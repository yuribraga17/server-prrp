#define SSCANF_NO_NICE_FEATURES
// --------- [ INCLUDES ] ---------
#include <a_samp>
//#include <fixes>
#include <a_mysql>
#include <zcmd>
#include <foreach>
#include <sscanf2>
#include <eSelection>
#include <easyDialog>
#include <streamer>
#include <strlib>
#include <multilines>
#include <neon>
#include <dini>
#include <YSI\y_bit>
#include <YSI\y_hooks> 
#include <YSI\y_va>
#include <YSI\y_foreach>
#include <YSI\y_iterate>
#include <YSI\y_timers>
#include "../include/gl_common.inc"
#include <progress>
#include <callbacks>
#include <OPA>
#include <dialogs>
#include <dns>
#include <EVF>

#include <mapandreas>
#include <YSI\y_ini>
#include <nex-ac>
#define YSI_NO_VERSION_CHECK
#define YSI_NO_HEAP_MALLOC
#include <YSI\y_malloc>
#include <profiler>

// --------- [ INCLUDES ] ---------

//Streamer
#define VISIBLE_ITEMS 3000

//Tunning
#include <YSI\y_ini>

native WP_Hash(_buffer[], len, const str[]);
// --------- [ INCLUDES ] ---------
#pragma dynamic 20000

#if defined MAX_PLAYERS
#undef MAX_PLAYERS
#define MAX_PLAYERS 500
#endif

#if defined MAX_VEHICLES
#undef MAX_VEHICLES
#define MAX_VEHICLES 50000
#endif

new PayDayDuplo = 0;

//#define HOLDOBJECT_UMBRELLA (0)

// Vehicle Rental
new CarRent[10];
new RentCarKey[MAX_PLAYERS];
//new gLastCar[MAX_PLAYERS];

//Sistema de ROJÃO
new Foguete[MAX_PLAYERS];
new Float:FogueteX[MAX_PLAYERS], Float:FogueteY[MAX_PLAYERS], Float:FogueteZ[MAX_PLAYERS];

//Fome e Sede
new PlayerText:FomeSede[MAX_PLAYERS][5];

//Tela de login
new PlayerText:TelaLogin[MAX_PLAYERS][9];

//Hud Radio
new PlayerText:RadioComunicador[MAX_PLAYERS][2];

#define DIALOG_PAINELNOME		1444
#define DIALOG_PAINELSENHA		1445


//Jogo do Bicho
#define DIALOG_JOGODoBichoMenu			900
#define DIALOG_JOGODoBichoTabela			901
#define DIALOG_JOGODoBichoTipoAposta		902
#define DIALOG_JOGODoBichoApostar		903
#define DIALOG_JOGODoBichoApostarValor	904
 
enum eBichos {
	Bicho[64],
	Dezenas[4]
}
 
new TabelaBichos[][eBichos] = {
	{"Vazio", {0, 0, 0, 0}},
	{"AVESTRUZ", {1, 2, 3, 4}},
	{"ÁGUIA", {5, 6, 7, 8}},
	{"BURRO", {09, 10, 11, 12}},
	{"BORBOLETA", {13, 14, 15, 16}},
	{"CACHORRO", {17, 18, 19, 20}},
	{"CABRA", {21, 22, 23, 24}},
	{"CARNEIRO", {25, 26, 27, 28}},
	{"CAMELO", {29, 30, 31, 32}},
	{"COBRA", {33, 34, 35, 36}},
	{"COELHO", {37, 38, 39, 40}},
	{"CAVALO", {41, 42, 43, 44}},
	{"ELEFANTE", {45, 46, 47, 48}},
	{"GALO", {49, 50, 51, 52}},
	{"GATO", {53, 54, 55, 56}},
	{"JACARÉ", {57, 58, 59, 60}},
	{"LEÃO", {61, 62, 63, 64}},
	{"MACACO", {65, 66, 67, 68}},
	{"PORCO", {69, 70, 71, 72}},
	{"PAVÃO", {73, 74, 75, 76}},
	{"PERU", {77, 78, 79, 80}},
	{"TOURO", {81, 82, 83, 84}},
	{"TIGRE", {85, 86, 87, 88}},
	{"URSO", {89, 90, 91, 92}},
	{"VEADO", {93, 94, 95, 96}},
	{"VACA", {97, 98, 99, 100}}
};
 
enum eApostador {
	Animal,
	TipoAposta,
	Aposta,
	bool:Apostando
}
 
new Apostadores[MAX_PLAYERS][eApostador];
//new UltimoResultado;
new bool:PodeApostarBicho = true;
//=====[SISTEMA DE PET BY YURS]=====
#define MAX_PET 1000

#define PET_NONE    (0)
#define PET_FOLLOW  (1)
#define PET_SIT     (2)
#define PET_STAY    (3)
#define PET_LAY     (4)
#define PET_JUMP    (5)

enum E_PLAYER_PET
{
    petModelID,
    petName[128],
    petModel,
    petStatus,
    Text3D:petText,
    bool:petSpawn,
    bool:petIdle,
    Float:PetposX,
    Float:PetposY,
    Float:PetposZ,
    Float:idle_posX,
    Float:idle_posY,
    Float:idle_posZ,
    Timer:petTimer
}

new PetData[MAX_PLAYERS][E_PLAYER_PET];

//=============================
new PlayersOnline = 0,
    RecordDia = 0,
    MaxPlayersHora = 0;

static stock
	BitArray:g_VehicleDriveBy<MAX_PLAYERS>;

#define MAX_CONNECTIONS_FROM_IP     11 // Máximo de conexões com mesmo IP.
new AvisoTiroOuvido[MAX_PLAYERS][8000];

new ambiente = 1; // 0  - Localhost 1 - Produção

#define localhost_Connection   "localhost"
#define localhost_User         "root"
#define localhost_DB           "prrpoficial"
#define localhost_Password     ""

#define sz_Connection   "localhost"
#define sz_User         "root"
#define sz_DB           "prrpoficial"
#define sz_Password     ""


//====== [DEFINIÇÕES DO SERVIDOR] =======================================================
#define ULTIMO_GMX      "09/01/2024"
#define CA_VERSAO       "CP:RP v9.124"
#define CA_LINK         "weburl cp-frp.com.br.com"
//#define CA_NOME         "hostname Capital Paulista Full Roleplay | BETA TEST CLOSED"
#define CA_NOME         "hostname Capital Paulista Full Roleplay | cp-frp.com.br.com"
#define CA_NOME2        "hostname Capital Paulista Full Roleplay [2x Paycheck]"
#define CA_NOME3        "hostname Capital Paulista Full Roleplay [Manutenção rápida]"
#define CA_LANGUAGE     "language Português Brasileiro"
#define MAP_NAME        "mapname São Paulo"
//==============================================================================
#define ANIM_DOIS_MORTE 3000
#define DISTANCIA_CHAT  12.0

new	Anuncio = 0;
new newfacid = 8;

#define KEY_AIM KEY_HANDBRAKE

new ADM_OBJ;

//============================Tolls============================//
// Main configuration
#define TollCost (35) 					// How much it costs to pass the tolls
#define TollDelayCop (4) 				// The timespace in seconds between each /toll command for all cops (To avoid spam)
#define TollOpenDistance (5.0) 			// The distance in units the player can be from the icon to open the toll

// Other defines
#define MAX_TOLLS (5) // Amount of tolls
#define INVALID_TOLL_ID (-1)
#define RichmanToll (0)
#define FlintToll (1)
#define LVToll (2)
#define BlueberryTollR (3)
#define BlueberryTollL (4)

#define L_sz_TollStringLocked ("Guarda diz: Desculpe, o pedágio fechou temporariamente. Por favor, volte mais tarde.")
#define L_sz_TollStringNoMoney ("ERRO: Você não possui dinheiro para passar no pedagio.")
#define L_sz_TollStringBye ("Guarda diz: Obrigado, dirija com cuidado!.")
#define L_sz_TollStringHurryUp ("INFO: Você tem 6 segundos para passar. Certifique-se de que Você não ficará preso.")

enum TOLL_INFO
{
	E_tLocked,  // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
	E_tOpenTime // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
}
new aTolls[MAX_TOLLS][TOLL_INFO];

//============================Tolls============================//

//Tolls
new L_a_RequestAllowedCop, // The same timer for all /toll changes
    L_a_Pickup[MAX_TOLLS*2],
	L_a_TollObject[MAX_TOLLS*2]; // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
//Tolls

//====== [GOVERNO] =======================================================
enum govInfo {
	gCofres,
	gPrefeito[24],

	gTaxa,
	gTaxaLuz,
	gTaxaHP,
	gConvenio,
	gSalarioMin,

	gSalarioGOV[12],
	gSalarioPMERJ[12],
	gSalarioFD[12],
	gSalarioPC[12],
	gSalarioEB[12],
	gSalarioTJRP[12],
	gSalarioFacCivil[12]
};
new GovInfo[govInfo];
//====== [SISTEMA DE MULTAS] =======================================================
#define MAX_MULTAS 100000

new Refundo[MAX_PLAYERS][4];

enum MultasInfos {
	mID,
	mCriada,
    mDono,
    mCarro,
    mValor,
    mData[64],
	mMotivo[124],
    mIssuer[24],
    mPayHours,
    mPaga
};
new MultasInfo[MAX_MULTAS][MultasInfos];

new VendoMultas[MAX_PLAYERS][50],
	PagandoMulta[MAX_PLAYERS];

new DandoMulta[MAX_PLAYERS][124];

//====== [FREIO DE MÃO] =======================================================
new FrenodeMano[MAX_VEHICLES] = 0;
new Float:VehFrenoPOS[MAX_VEHICLES][4];
new Float:VehComprobar[MAX_VEHICLES][4];
//====== [APAGÃO EM LS] =======================================================
new
    ApagaoEmGanton = 0,
	Text:ApagaoDraw;

enum CaixasFinfo {
        caixaID,
        Float:CaixaVida,
        CaixaObj,
        CaixaBairro[32]
};
new CaixaDeForca[20][CaixasFinfo];
//====== [ANUNCIOS] =======================================================
enum AnInfo {
	AnuncioDono,
	AnuncioPor[24],
	AnuncioMsg[162]
};
new AnuncioLista[100][AnInfo];
//====== [CELULAR -TEXTS, CONTATOS, SMS] =======================================================
new Text:Celular_Base[16],
	Text:Celular_Inicial[4],
	Text:Celular_Fundo[12],
	Text:TelPubBase[17];

new PlayerText:Celular_PlayerV[MAX_PLAYERS][6];
new PlayerText:TelPub[MAX_PLAYERS][2];

enum CelularDat
{
	//Variaveis que salvar/carregam da DB
	celModelo,
	celNumero,
	celModo,
	celRingTone,

	celPlano,
	celTPlano,
	celMinutos,
	celSMSs,
	celTotalPD,
	//Não salva ao re-entrar.
	LigandoPara,
	EmLigacao,
	LigandoParaNum,
	LigandoParaNumAtendido,
	DelayCelular,
	TempoChamada[3],
	DelaySMS,
	DelaySMSICO,
	LigandoOrelhao,
	LigandoOrelhaoAtendido,
	AtendeuOrelhao,
	UsandoCelOrOre,
	NavegandoCel,
	MenuContatos,
	MenuSelecionado,
	CelularAberto,
	VendoContato,
	VivaVoz,
	GGRastreamento,
	RastreandoTime,
	NumOrelhao[15],
	OreID,
	RastreTime,
	RastreIdParou
}
new CelularData[MAX_PLAYERS][CelularDat];

enum SmsDat {
	smsAtivo,
	smsLido,
	smsMensagem[256],
	smsMensagemLimpa[14],
	smsPor,
	smsData[56]
}
new MensagensInfo[MAX_PLAYERS][40][SmsDat];

enum contatuInfo {
	ContatoNome[24],
	ContatoNumero
}
new ContatoInfo[MAX_PLAYERS][40][contatuInfo];
//====== [TELEFONE PÚBLICO] =======================================================
#define MAX_ORELHOES 	2000
#define RANGE_VIVAVOZ   8.0

enum telPubData
{
	orID,
	orCriado,
	Float:orX,
	Float:orY,
	Float:orZ,
	Float:orR,
	orPrefixo[5],
	orNumero[5],
	orAtendeu,
	orLigou,
	orTocando,
	orUsando,
	Text3D:orTextRing,
    orObj
}
new TelPublico[MAX_ORELHOES][telPubData];
//==============================================================================[Torres de Sinal]
#define MAX_TORRES 4000
enum torresData
{
	torID,
	Float:torX,
	Float:torY,
	Float:torZ,
	Float:torR,
	Float:torSinal,
    orObj
}
new TorreData[MAX_TORRES][torresData];
//==============================================================================[ Forward ]
forward CriarCelular_Base();
forward MostrarCelular(playerid);
forward SumirCelular(playerid);
forward NavegandoCelular(playerid,parte);
forward GetPlayerMaxContatosCel(playerid);
forward GetPlayerMaxSMSCel(playerid);
forward SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);
forward CriarTextsCelularP(playerid);
forward Float:PegarSinalCelular(playerid);
forward TelPubCriado(playerid);
forward SalvarTelPub(id);
forward CarregandoTelPub();
forward AtualizarTelPub(id);
forward CarregandoTorres();
forward SalvarTorre(torreid);
forward AtualizarTorre(torreid);
forward TorreCriada(playerid);
forward TempoParaAtenderem(playerid,tipo);
forward LigarPara(playerid, numero, tipo, id_orelhao);
forward PararToqueDeCelular(playerid);
forward ToqueDeCelular(playerid);
forward MostrarCelularLigacao(playerid);
forward DesligarChamada(playerid, tipo);
forward ResetarVarsCel(playerid);
forward TempoParaAtenderem911(playerid,tipo);
forward DeletandoSMS(playerid,sms_id);
forward EnviarSMS(playerid, numero);
forward SumirIco(playerid);
forward LerSMS(playerid, sms_id);
forward RastreandoNumero(playerid, numero, fase, encontrado2);
forward CarregarSMS(playerid);
forward ComprandoPlano(playerid, plano);
forward TelPubNovoNumero(playerid, num);
forward GetTempoChamada(playerid);
forward CobrarChamada(playerid);
forward Rastreador(playerid, numero, encontrado);
forward CarregarSMS(playerid);
forward SalvarSMS(playerid);
forward CarregarContatosCel(playerid);
forward SalvarContatos(playerid);
//==============================================================================
new Text:InterruptorDraw;
new Trem;

//Taser
new TazerPlayer[MAX_PLAYERS];
new TomouTazer[MAX_PLAYERS];

//TextDraw Bairros/ Areas
new Text:Textdraw49[MAX_PLAYERS];

//==============================================================================
new EntrouInt[MAX_PLAYERS];
//====== [TUNNING SYSTEM] =======================================================
#define SPD                     ShowPlayerDialog
#define DSL                     DIALOG_STYLE_LIST
#define DSI             		DIALOG_STYLE_INPUT
#define D_TOP           		"Tuning"
#define D_OK                    "Ok"
#define D_CANCEL                "Cancelar"
#define D_TEXT                  "Paintjobs\nCores\nExaustores\nPára-choque dianteiro\nPára-choque traseiro\nRoof\nSpoilers\nSaias Laterais\nRodas\nCar Stereo\nHidráulica"

#define T_FILE                  "Tuning/%s.ini"
#define TG_FILE                 "TGarage/%d.ini"

#define MAX_GARAGES     5000

#define dialog_TUNING   1323
#define dialog_TUNING_2 1324

#define COLOR_PRICE             100
#define COLOR_LINHATELEFONICA 	0xF5FF00FF

new PlayerText:TuningBuy[ MAX_PLAYERS ][ 14 ];

enum aaa {
        Float:Position[ 3 ],
    Text3D:tg3D,
    tgPickup,
}
new tGarage[ MAX_GARAGES ][ aaa ];

enum PaintjobInfi {
        vehID,
        pNumber,
        pPrice,
        pName[ 12 ]
};
#define NUMBER_TYPE_PAINTJOB    36
static const
        pjInfo[ NUMBER_TYPE_PAINTJOB ][ PaintjobInfi ] = {
        { 483, 0, 100, "Paintjob 1" },
        { 534, 0, 100, "Paintjob 1" },
        { 534, 1, 100, "Paintjob 2" },
        { 534, 2, 100, "Paintjob 3" },
        { 535, 0, 100, "Paintjob 1" },
        { 535, 1, 100, "Paintjob 2" },
        { 535, 2, 100, "Paintjob 3" },
        { 536, 0, 100, "Paintjob 1" },
        { 536, 1, 100, "Paintjob 2" },
        { 536, 2, 100, "Paintjob 3" },
        { 558, 0, 100, "Paintjob 1" },
        { 558, 1, 100, "Paintjob 2" },
        { 558, 2, 100, "Paintjob 3" },
        { 559, 0, 100, "Paintjob 1" },
        { 559, 1, 100, "Paintjob 2" },
        { 559, 2, 100, "Paintjob 3" },
        { 560, 0, 100, "Paintjob 1" },
        { 560, 1, 100, "Paintjob 2" },
        { 560, 2, 100, "Paintjob 3" },
        { 561, 0, 100, "Paintjob 1" },
        { 561, 1, 100, "Paintjob 2" },
        { 561, 2, 100, "Paintjob 3" },
        { 562, 0, 100, "Paintjob 1" },
        { 562, 1, 100, "Paintjob 2" },
        { 562, 2, 100, "Paintjob 3" },
        { 565, 0, 100, "Paintjob 1" },
        { 565, 1, 100, "Paintjob 2" },
        { 565, 2, 100, "Paintjob 3" },
        { 567, 0, 100, "Paintjob 1" },
        { 567, 1, 100, "Paintjob 2" },
        { 567, 2, 100, "Paintjob 3" },
        { 575, 0, 100, "Paintjob 1" },
        { 575, 1, 100, "Paintjob 2" },
        { 576, 0, 100, "Paintjob 1" },
        { 576, 1, 100, "Paintjob 2" },
        { 576, 2, 100, "Paintjob 3" }
};

enum ComponentsInfo {
        cID,
        cName[ 40 ],
        cPrice,
        cType
};
#define MAX_COMPONENTS  194
static const
        cInfo[ MAX_COMPONENTS ][ ComponentsInfo ] = {
        { 1000, "Pro Spoiler", 5, CARMODTYPE_SPOILER },
        { 1001, "Win Spoiler", 5, CARMODTYPE_SPOILER },
        { 1002, "Drag Spoiler", 5, CARMODTYPE_SPOILER },
        { 1003, "Alpha Spoiler", 5, CARMODTYPE_SPOILER },
        { 1004, "Champ Scoop Hood", 5, CARMODTYPE_HOOD },
        { 1005, "Fury Scoop Hood", 5, CARMODTYPE_HOOD },
        { 1006, "Roof Scoop Roof", 5, CARMODTYPE_ROOF },
        { 1007, "Right Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1008, "5x Nitrous", 5, CARMODTYPE_NITRO },
        { 1009, "2x Nitrous", 5, CARMODTYPE_NITRO },
        { 1010, "10x Nitrous", 5, CARMODTYPE_NITRO },
        { 1011, "Race Scoop Hood", 5, CARMODTYPE_HOOD },
        { 1012, "Worx Scoop Hood", 5, CARMODTYPE_HOOD },
        { 1013, "Round Fog Lamp", 5, CARMODTYPE_LAMPS },
        { 1014, "Champ Spoiler", 5, CARMODTYPE_SPOILER },
        { 1015, "Race Spoiler", 5, CARMODTYPE_SPOILER },
        { 1016, "Worx Spoiler", 5, CARMODTYPE_SPOILER },
        { 1017, "Left Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1018, "Upswept Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1019, "Twin Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1020, "Large Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1021, "Medium Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1022, "Small Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1023, "Fury Spoiler", 5, CARMODTYPE_SPOILER },
        { 1024, "Square Fog Lamp", 5, CARMODTYPE_LAMPS },
        { 1025, "Offroad Wheels", 5, CARMODTYPE_WHEELS },
        { 1026, "Right Alien Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1027, "Left Alien Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1028, "Alien Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1029, "X-Flow Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1030, "Left X-Flow Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1031, "Right X-Flow Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1032, "Alien Roof Vent", 5, CARMODTYPE_ROOF },
        { 1033, "X-Flow Roof Vent", 5, CARMODTYPE_ROOF },
        { 1034, "Alien Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1035, "X-Flow Roof Vent", 5, CARMODTYPE_ROOF },
        { 1036, "Right Alien Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1037, "X-Flow Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1038, "Alien Roof Vent", 5, CARMODTYPE_ROOF },
        { 1039, "Left X-Flow Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1040, "Left Alien Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1041, "Right X-Flow Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1042, "Right Chrome Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1043, "Slamin Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1044, "Chrome Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1045, "X-Flow Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1046, "Alien Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1047, "Right Alien Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1048, "Right X-Flow Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1049, "Alien Spoiler", 5, CARMODTYPE_SPOILER },
        { 1050, "X-Flow Spoiler", 5, CARMODTYPE_SPOILER },
        { 1051, "Left Alien Sideskirt", 5, CARMODTYPE_SPOILER },
        { 1052, "Left X-Flow Sideskirt", 5, CARMODTYPE_SPOILER },
        { 1053, "X-Flow Roof", 5, CARMODTYPE_ROOF },
        { 1054, "Alien Roof", 5, CARMODTYPE_ROOF },
        { 1055, "Alien Roof", 5, CARMODTYPE_ROOF },
        { 1056, "Right Alien Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1057, "Right X-Flow Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1058, "Alien Spoiler", 5, CARMODTYPE_SPOILER },
        { 1059, "X-Flow Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1060, "X-Flow Spoiler", 5, CARMODTYPE_SPOILER },
        { 1061, "X-Flow Roof", 5, CARMODTYPE_ROOF },
        { 1062, "Left Alien Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1063, "Left X-Flow Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1064, "Alien Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1065, "Alien Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1066, "X-Flow Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1067, "Alien Roof", 5, CARMODTYPE_ROOF },
        { 1068, "X-Flow Roof", 5, CARMODTYPE_ROOF },
        { 1069, "Right Alien Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1070, "Right X-Flow Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1071, "Left Alien Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1072, "Left X-Flow Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1073, "Shadow Wheels", 5, CARMODTYPE_WHEELS },
        { 1074, "Mega Wheels", 5, CARMODTYPE_WHEELS },
        { 1075, "Rimshine Wheels", 5, CARMODTYPE_WHEELS },
        { 1076, "Wires Wheels", 5, CARMODTYPE_WHEELS },
        { 1077, "Classic Wheels", 5, CARMODTYPE_WHEELS },
        { 1078, "Twist Wheels", 5, CARMODTYPE_WHEELS },
        { 1079, "Cutter Wheels", 5, CARMODTYPE_WHEELS },
        { 1080, "Switch Wheels", 5, CARMODTYPE_WHEELS },
        { 1081, "Grove Wheels", 5, CARMODTYPE_WHEELS },
        { 1082, "Import Wheels", 5, CARMODTYPE_WHEELS },
        { 1083, "Dollar Wheels", 5, CARMODTYPE_WHEELS },
        { 1084, "Trance Wheels", 5, CARMODTYPE_WHEELS },
        { 1085, "Atomic Wheels", 5, CARMODTYPE_WHEELS },
        { 1086, "Stereo Wheels", 5, CARMODTYPE_STEREO },
        { 1087, "Hydraulics", 5, CARMODTYPE_HYDRAULICS },
        { 1088, "Alien Roof", 5, CARMODTYPE_ROOF },
        { 1089, "X-Flow Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1090, "Right Alien Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1091, "X-Flow Roof", 5, CARMODTYPE_ROOF },
        { 1092, "Alien Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1093, "Right X-Flow Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1094, "Left Alien Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1095, "Right X-Flow Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1096, "Ahab Wheels", 5, CARMODTYPE_WHEELS },
        { 1097, "Virtual Wheels", 5, CARMODTYPE_WHEELS },
        { 1098, "Access Wheels", 5, CARMODTYPE_WHEELS },
        { 1099, "Left Chrome Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1100, "Chrome Grill", 5, -1 }, // Bullbar
        { 1101, "Left `Chrome Flames` Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1102, "Left `Chrome Strip` Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1103, "Covertible Roof", 5, CARMODTYPE_ROOF },
        { 1104, "Chrome Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1105, "Slamin Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1106, "Right `Chrome Arches`", 5, CARMODTYPE_SIDESKIRT },
        { 1107, "Left `Chrome Strip` Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1108, "Right `Chrome Strip` Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1109, "Chrome", 5, -1 }, // Bullbar
        { 1110, "Slamin", 5, -1 }, // Bullbar
        { 1111, "Little Sign", 5, -1 }, // sig
        { 1112, "Little Sign", 5, -1 }, // sig
        { 1113, "Chrome Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1114, "Slamin Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1115, "Chrome", 5, -1 }, // Bullbar
        { 1116, "Slamin", 5, -1 }, // Bullbar
        { 1117, "Chrome Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1118, "Right `Chrome Trim` Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1119, "Right `Wheelcovers` Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1120, "Left `Chrome Trim` Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1121, "Left `Wheelcovers` Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1122, "Right `Chrome Flames` Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1123, "Bullbar Chrome Bars", 5, -1 }, // Bullbar
        { 1124, "Left `Chrome Arches` Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1125, "Bullbar Chrome Lights", 5, -1 }, // Bullbar
        { 1126, "Chrome Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1127, "Slamin Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1128, "Vinyl Hardtop", 5, CARMODTYPE_ROOF },
        { 1129, "Chrome Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1130, "Hardtop Roof", 5, CARMODTYPE_ROOF },
        { 1131, "Softtop Roof", 5, CARMODTYPE_ROOF },
        { 1132, "Slamin Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1133, "Right `Chrome Strip` Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1134, "Right `Chrome Strip` Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1135, "Slamin Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1136, "Chrome Exhaust", 5, CARMODTYPE_EXHAUST },
        { 1137, "Left `Chrome Strip` Sideskirt", 5, CARMODTYPE_SIDESKIRT },
        { 1138, "Alien Spoiler", 5, CARMODTYPE_SPOILER },
        { 1139, "X-Flow Spoiler", 5, CARMODTYPE_SPOILER },
        { 1140, "X-Flow Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1141, "Alien Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1142, "Left Oval Vents", 5, CARMODTYPE_VENT_LEFT },
        { 1143, "Right Oval Vents", 5, CARMODTYPE_VENT_RIGHT },
        { 1144, "Left Square Vents", 5, CARMODTYPE_VENT_LEFT },
        { 1145, "Right Square Vents", 5, CARMODTYPE_VENT_RIGHT },
        { 1146, "X-Flow Spoiler", 5, CARMODTYPE_SPOILER },
        { 1147, "Alien Spoiler", 5, CARMODTYPE_SPOILER },
        { 1148, "X-Flow Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1149, "Alien Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1150, "Alien Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1151, "X-Flow Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1152, "X-Flow Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1153, "Alien Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1154, "Alien Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1155, "Alien Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1156, "X-Flow Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1157, "X-Flow Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1158, "X-Flow Spoiler", 5, CARMODTYPE_SPOILER },
        { 1159, "Alien Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1160, "Alien Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1161, "X-Flow Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1162, "Alien Spoiler", 5, CARMODTYPE_SPOILER },
        { 1163, "X-Flow Spoiler", 5, CARMODTYPE_SPOILER },
        { 1164, "Alien Spoiler", 5, CARMODTYPE_SPOILER },
        { 1165, "X-Flow Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1166, "Alien Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1167, "X-Flow Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1168, "Alien Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1169, "Alien Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1170, "X-Flow Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1171, "Alien Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1172, "X-Flow Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1173, "X-Flow Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1174, "Chrome Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1175, "Slamin Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1176, "Chrome Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1177, "Slamin Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1178, "Slamin Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1179, "Chrome Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1180, "Chrome Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1181, "Slamin Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1182, "Chrome Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1183, "Slamin Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1184, "Chrome Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1185, "Slamin Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1186, "Slamin Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1187, "Chrome Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1188, "Slamin Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1189, "Chrome Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1190, "Slamin Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1191, "Chrome Front Bumper", 5, CARMODTYPE_FRONT_BUMPER },
        { 1192, "Chrome Rear Bumper", 5, CARMODTYPE_REAR_BUMPER },
        { 1193, "Slamin Rear Bumper", 5, CARMODTYPE_REAR_BUMPER }
};


enum tpi {
        tID,
        tType,
        bool:tPaintjob,
        PJColor[ 2 ]
};
new TPInfo[ MAX_PLAYERS ][ tpi ];

new globalstring[ 128 ];
//====== [EMPREGOS] =======================================================
//Emprego hacker
new HackerJob[MAX_PLAYERS];
new HJLimitTimer;

//Emprego moto busao
#define TEMPO 1500
new BusJob[256];
new TimerBus[MAX_PLAYERS];
new RotaBusJob[MAX_PLAYERS] = 0;

//Emprego ifood
#define GANHO_MIN   16 //GANHO MINIMO POR ENTREGA
#define GANHO_MAX   290 //GANHO MAXIMO POR ENTREGA
//#define ID_MOTOCA   448


new AppLigado[MAX_PLAYERS];
new iFood[MAX_PLAYERS];
new Entregando[MAX_PLAYERS];
new Retiroupedido[MAX_PLAYERS];
new buscandocorridas[MAX_PLAYERS];
new TempoDeResposta[MAX_PLAYERS];
new TemCorrida[MAX_PLAYERS];

 
 new Temporizador[][1] = //TEMPO DE ESPERA ENTRE CADA ENTREGA
{
    {5000},
    {8000},
    {10000},
    {12000},
    {16000}
};
 
enum Rests
{
    Float:BrX,
    Float:BrY,
    Float:BrZ,
    LocalRes[64]
}
 
new Restaurantes[][Rests] =
{
    {953.6340,-1379.8330,13.3438, "Cluckin' Bell"},// Cluckin Bells
    {1045.5018,-1269.2733,13.6790, "China's Food"},//Chinese Food
    {1126.0450,-1372.2838,13.9844, "Loja de bebidas"},// Loja de bebidas
    {1196.8871,-921.3952,43.0530, "Burguer Shot"},//Burguer Shot
    {1300.6167,-1156.1165,23.8281, "Disk Bebidas"},// Conveniencia 24hrs
    {421.7389,-1758.9269,8.1689, "Pizzaria da Praia"}// Pizzaria Praia
};
new Float:Entregas_ifood[][34] =
{
    {1847.9941,-1925.0844,13.2740},
    {1870.7611,-1924.3984,13.2740},
    {1919.5276,-2041.9980,13.5469},
    {1908.3558,-2044.1115,13.5469},
    {1902.1631,-2036.6743,13.5469},
    {1851.6858,-2030.9282,13.5469},
    {1810.7422,-2120.6484,13.1544},
    {1805.0891,-2110.3826,13.2813},
    {1729.3451,-2126.4932,12.7964},
    {1719.7161,-2120.9922,12.7893},
    {2256.5859,-1474.2635,23.1126},
    {2266.2900,-1476.6475,22.8564},
    {2259.5786,-1492.3561,22.9214},
    {2270.6577,-1510.5359,21.3949},
    {2514.3264,-1522.6776,24.0324},
    {2373.1550,-1136.2782,29.9781},
    {2348.4780,-1105.7855,31.1011},
    {2363.7617,-1109.5048,32.8823},
    {2389.4980,-1088.1390,37.1934},
    {2413.3333,-1083.9698,40.2521},
    {2439.0474,-1110.2521,42.5670},
    {2518.9053,-1086.0088,55.2062},
    {2561.3955,-1035.5872,69.5758},
    {2557.0015,-1036.7731,69.5806},
    {2599.3867,-1072.6698,69.5827},
    {2596.7668,-1077.6559,69.5852},
    {2596.7209,-1081.9963,69.5858},
    {2596.6416,-1085.2957,69.5418},
    {2577.7646,-992.5721,79.7550},
    {2595.1680,-994.9631,78.1295},
    {2587.5305,-976.9901,81.3566},
    {2589.8787,-968.5181,81.3919},
    {2573.1863,-965.2643,81.9168},
    {2535.1787,-974.5581,81.8190}
};
//====== [SISTEMA DE TRAFICANTE] =======================================================
#define MAX_TRAFICANTES 100
enum aTraficantesInfo{

	traID,
	traUsando, // 1 Criado / 2 - Não
	traTipo, //1 - Armas / 2 - Drogas
	traRand,
	traCarro,
	traTempoSumir,
	traPed[15],
	traPedPrec,
	traPlayerId,
	traJaPagou,
	traFaccao
}
new TraficInfo[MAX_TRAFICANTES][aTraficantesInfo];

new Float:TraficanteCarpos[7][4] = {
{ 2358.4604, -655.6785, 128.1139, 163.0494},
{ 1407.9150, -2364.8130, 13.1643, 0.0},
{ 2199.8923, -2633.2754, 13.1812, 0.0},
{ 2491.2717, -2117.8528, 13.1643, 0.0},
{ 2803.5557, -1427.8071, 35.6927, 0.0},
{ 2488.5415, 936.6708, 10.4190, 0.0},
{ 1866.7611, 1179.7461, 10.3726, 0.0}
};
//====== [SISTEMA DE PESCA] =======================================================
new	FishWeigh[MAX_PLAYERS],
    FishWeighBarco[MAX_PLAYERS],
    FishWeighBarcoID[MAX_PLAYERS],
    FishBarcoPoint[MAX_PLAYERS],
    FishTimer[MAX_PLAYERS],
    Fishingando[MAX_PLAYERS];

new Float:FishingPosX[MAX_PLAYERS],
	Float:FishingPosY[MAX_PLAYERS],
	Float:FishingPosZ[MAX_PLAYERS];

//====== [SISTEMA DE BOOMBOX] =======================================================
#define MAX_BOOMBOXES 250
enum boInfo{

	boUsed,
	Float:boX,
	Float:boY,
	Float:boZ,
	boObject,
	boPlacer,
	boWorld,
	boStream[526],
	boVolume
}

new BoomBoxInfo[MAX_BOOMBOXES][boInfo];

new streaming_boombox[MAX_PLAYERS],
 	boom_box_handle[MAX_PLAYERS],
	changing_boombox[MAX_PLAYERS],
	VendoListaRadios[MAX_PLAYERS][60];
//XMRAdio
new ouvindoxmradio[MAX_PLAYERS];
new ouvindoxmradioID[MAX_PLAYERS];

//====== [SISTEMA DE TAPETE] =======================================================
#define MAX_SPIKESTRIPS 100
enum sInfo
{
	sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};

new SpikeInfo[MAX_SPIKESTRIPS][sInfo];

//====== [WEATHER SYSTEM] =======================================================
stock IsPlayerInLS(playerid)
{
	new Float:xls,Float:yls,Float:zls;
	GetPlayerPos(playerid,xls,yls,zls);
	if(xls > 0 && yls < 0) return 1;
	return 0;
}

stock PlayerPlaySoundEx(playerid, sound)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
	    PlayerPlaySound(i, sound, x, y, z);
	}
	return 1;
}

stock IsPlayerInSF(playerid)
{
	new Float:xls,Float:yls,Float:zls;
	GetPlayerPos(playerid,xls,yls,zls);
	if(xls < 0) return 1;
	return 0;
}

stock IsPlayerInLV(playerid)
{
	new Float:xls,Float:yls,Float:zls;
	GetPlayerPos(playerid,xls,yls,zls);
	if(xls > 0 && yls > 0) return 1;
	return 0;
}

new Clima_LS = 2,
	Clima_LV = 2,
	Clima_SF = 2;

//====== [MINER SYSTEM] =======================================================
enum JobData
{
	jobID,
	jobExists,
	jobType,
	Float:jobPos[3],
	Float:jobPoint[3],
	Float:jobDeliver[3],
	jobInterior,
	jobWorld,
	jobPointInt,
	jobPointWorld,
	jobPickups[3],
	Text3D:jobText3D[3]
};
//====== [MDC SYSTEM] =======================================================
enum CrimeInf
{
	CriID,
	CriOwn,
	CriOwnN[24],
	CriData[32],
	CriCrime[64],
	CriPena[64],
	CrimeRelat[256],
	CriOutrInfo[256]
}
new CrimeData[MAX_PLAYERS][CrimeInf];

new MDC_INFO[MAX_PLAYERS],
	MDC_INFO2[MAX_PLAYERS][256];

new MDC_Variavel[MAX_PLAYERS][10];
new MDC_NomePesq[MAX_PLAYERS][24];
//====== [SISTEMA DE DROGAS] =======================================================
#define             pDroga[%0][%1]          PlayerDroga[%0][%1]

//Abreviações das drogas
//BDS = Bicarbonato de Sódio
//PBC = Pasta-base de cocaína
//Aclorídrico = ácido clorídrico
enum pdd {
	MaconhaR,
	MaconhaB,
	MaconhaE,
	CocaR,
	CocaB,
	CocaE,
	CrackR,
	CrackB,
	CrackE,
	LSDR,
	LSDB,
	LSDE,
	MetR,
	MetB,
	MetE,
	//Maconha
	Sementes,
	//Crack
	BDS,
	PBC,
	HDZ,
	LDC,
	BZC,
	//Metanfetamina
	Acloridrico,
	Efedrina,
	LancaPer
}
new PlayerDroga[MAX_PLAYERS][pdd];

stock GetUserName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

#define MAX_DRUGPLANT 50000
enum ddDrug
{
	ddID,
	ddSeteda,
	Float:ddX,
	Float:ddY,
	Float:ddZ,
	Float:ddR,
	ddTempo,
	ddObjeto,
	ddEstado,
	ddWorld
};
static DrogaPlantada[MAX_DRUGPLANT][ddDrug];

#define MAX_DRUGDROP 10000
enum dInfo
{
	dID,
	dDropou[MAX_PLAYER_NAME],
	dType,
    dWorld,
    dInt,
    dAmmo,
	Float:dX,
	Float:dY,
	Float:dZ,
	Float:dRX,
	Float:dRY,
	Float:dRZ,
	dObject,
	dEditando
};
new DropInfo[MAX_DRUGDROP][dInfo];

new FumandoMaconha[MAX_PLAYERS];
new FumandoMaconhaQ[MAX_PLAYERS];

new FumandoCigarro[MAX_PLAYERS];
//==============================================================================

//==============================================================================
#define UpdateIntVar(%0,%1,%2) SetPVarInt(%0, %1, (GetPVarInt(%0, %1) + %2))

#define COLOR_GREEN         0xDEFFFFFF
#define COLOR_LIGHTBLUE     0x42e1ddFF
#define COLOR_ALLDEPT       0x3216FFFF
#define MAXLEN 256

#define WALKSTYLE_GANG1 1
#define WALKSTYLE_GANG2 2
#define WALKSTYLE_NORMAL 3
#define WALKSTYLE_SEXY 4
#define WALKSTYLE_OLD 5
#define WALKSTYLE_SNEAK 6
#define WALKSTYLE_BLIND 7
#define WALKSTYLE_ARMED 8
#define WALKSTYLE_POLICE 9
//==================================================
#define MAX_ZONE_NAME 28
#define TOTAL_ZONE_NAME 64
forward CreateFireEx(Float:X, Float:Y, Float:Z, World, Interior,Health);
forward Get2DZone(zone[], len, Float:x, Float:y, Float:z);

enum fdInfo
{
	fObject,
	Float:fdX,
	Float:fdY,
	Float:fdZ,
	fWorld,
	fInt,
	fTime,
	fHealth,
	Text3D:fText
};
new FDInfo[300][fdInfo];

enum SAZONE_MAIN { //Betamaster
		SAZONE_NAME[28],
		Float:SAZONE_AREA[6]
};

#define COLOR_RADIOACTIVE 0xB13434AA
//====== [SISTEMA DE BANCO E caixa eletrônico] =======================================================
new TaNaATM[MAX_PLAYERS];

new TaNoCOFREL[MAX_PLAYERS];
new TaNoCOFREB[MAX_PLAYERS];
new TaNoJOALHERIA[MAX_PLAYERS];


#define PROGRESS_BAR_INVALID -1
#define PROGRESS_BAR_MALOTE 1

#define MAX_ATM 150
enum aCaixElet
{
	atID,
	aSeteda,
	Float:aposX,
	Float:aposY,
	Float:aposZ,
	Float:aposR,
	aGrana,
	aObjeto,
	aRrombado
};
static ATMs[MAX_ATM][aCaixElet];

new Bar:progress_bar[MAX_PLAYERS];
new CarregandoATM[MAX_PLAYERS];
new SECURITY_VEHICLE[MAX_PLAYERS];
new PlayerText3D:ATMText[MAX_ATM];
new SECURITY_SEGURANDOMALOTE[MAX_PLAYERS];
new company_work_stage[MAX_PLAYERS];

new progress_wait[MAX_PLAYERS];
new progress_wait_max[MAX_PLAYERS];
new progress_wait_type[MAX_PLAYERS];

//=========[SISTEMA DE LABORATORIO DE DROGAS]===================================
#define MAX_LABO 200
enum aLaboDroga
{
	ldID,
	ldSeteda,
	Float:ldposX,
	Float:ldposY,
	Float:ldposZ,
	Float:ldposR,
	ldObjeto,
	ldRrombado
};
static LaboDrug[MAX_LABO][aLaboDroga];

//==============================================================================
#define MAX_COFRE 150
enum aCofreLoja
{
	clID,
	clSeteda,
	Float:clposX,
	Float:clposY,
	Float:clposZ,
	Float:clposR,
	clObjeto,
	clRrombado
};
static cLoja[MAX_COFRE][aCofreLoja];

#define MAX_COFREB 2
enum aCofreBanco
{
	cbID,
	cbSeteda,
	Float:cbposX,
	Float:cbposY,
	Float:cbposZ,
	Float:cbposR,
	cbObjeto,
	cbRrombado
};
static cbanco[MAX_COFRE][aCofreBanco];

#define MAX_JOIA 2
enum aJoalheria
{
	jlID,
	jlSeteda,
	Float:jlposX,
	Float:jlposY,
	Float:jlposZ,
	Float:jlposR,
	jlObjeto,
	jlRrombado
};
static joalheria[MAX_COFRE][aJoalheria];
//==============================================================================
new Float:PlayerCruiseSpeed[MAX_PLAYERS];
new Float:PlayerHeadingAngle[MAX_PLAYERS];
forward CruiseControl(playerid);
#define COLOR_GREY 0xAFAFAFAA

// --------- [ Ant Bot Inivible ] ---------
enum iI
{
	IncomingIP[16],
	IncomingVezes,
	IncomingTempo
}
new IncomingConnection[iI];

//====== [DEFINIÇÕES] =======================================================

// MySQL threads
#define THREAD_NO_RESULT         	0
#define THREAD_LOAD_BANIDO      	3

// Dialogs
#define DIALOG_REGISTER             1
#define DIALOG_LOGIN                2
#define DIALOG_AGE                  3
#define DIALOG_COMPLEXO_MENU        4
#define DIALOG_EMPRESAS_MENU        5
#define DIALOG_CASAS_MENU           6
#define DIALOG_EMPRESASV_MENU       7
#define DIALOG_SELLCAR        		8 //Inicio dos Carros \/
#define DIALOG_BUYNEON              9
#define DIALOG_SCRAPCAR             10
#define DIALOG_INSURANCE 			13
#define DIALOG_SBANCO               14
#define DIALOG_DBANCO               15
#define DIALOG_CASAS2_MENU          16
#define DIALOG_CASAS1_MENU          17
#define DIALOG_EMP1_MENU            18
#define DIALOG_EMP2_MENU            19
#define DIALOG_ATTACH_INDEX             13500
#define DIALOG_ATTACH_INDEX_SELECTION   DIALOG_ATTACH_INDEX+1
#define DIALOG_ATTACH_EDITREPLACE       DIALOG_ATTACH_INDEX+2
#define DIALOG_ATTACH_MODEL_SELECTION   DIALOG_ATTACH_INDEX+3
#define DIALOG_ATTACH_BONE_SELECTION    DIALOG_ATTACH_INDEX+4

#define DIALOG_OOCREG           300
#define DIALOG_NOVASENHA        301

#define DIALOG_GRAFITE_1        311
#define DIALOG_GRAFITE_11       380
#define DIALOG_GRAFITE_2        312
#define DIALOG_GRAFITE_3        313
#define DIALOG_GRAFITE_4        314
#define DIALOG_GRAFITE_5        315
#define DIALOG_GRAFITE_6        316

#define DIALOG_APAGARFURNITURE  350

#define DIALOG_TESTCONCEN       352

// Colors
#define 	COLOR_PURPLE      	0xD0AEEBFF
#define 	COLOR_WHITE       	0xFFFFFFFF
#define 	COLOR_SYSBLUE 		0x0F59EFFF
#define 	COLOR_FADE1 		0xE6E6E6E6
#define 	COLOR_FADE2 		0xC8C8C8C8
#define 	COLOR_FADE3 		0xAAAAAAAA
#define 	COLOR_FADE4 		0x8C8C8C8C
#define 	COLOR_FADE5 		0x6E6E6E6E
#define 	COLOR_OFFWHITE 		0xF5DEB3AA
#define 	COLOR_RED 			0xFF0000AA
#define 	COLOR_YELLOW 		0xFFFF00AA
#define 	COLOR_MESSAGE_YELLOW        0xFFDD00AA
#define 	COL_WHITE 			"{FFFFFF}"
#define 	COL_RED 			"{F81414}"
#define 	COL_GREEN 			"{00FF22}"
#define 	COL_LIGHTBLUE 		"{00CED1}"
#define		COLOR_CHAT_ADMIN    0x00808000
#define     COLOR_LIGHTWHITE    0xe3e3e3ff
#define 	COLOR_LIGHTRED 		0xFF6347AA
#define 	COLOR_LIGHTGREEN	0x33AA3300
#define 	COLOR_BRANCO       	0xFFFFFFFF
#define     COLOR_ESPECIAL1     0xE2FFFFFF
#define     COLOR_ESPECIAL2     0xcce6e6ff
#define     COLOR_CINZA         0xcbccceff
#define     COLOR_VEICULO       0xffec8bff
#define     COLOR_PD1           0xb4b5b7ff
#define     COLOR_PD2           0xd8d8d8ff
#define     COLOR_ADMDUTYOFF    0xbfc0c2ff
#define     COLOR_COPDUTY       0x8d8dffff
#define     COLOR_FINALDEPOSIT  0xf0f0f0ff
#define     COLOR_BLUE          0x0090D6FF
#define     COLOR_ORANGE        0xFA6900AA
#define     COLOR_ANIMS         0xf0f8ffFF


#define ALTCOMMAND:%1->%2;           \
COMMAND:%1(playerid, params[])   \
return cmd_%2(playerid, params);

//Tempo do jogo / Horario do Jogo
#define COLOR_TIME 0xFFFFFFFF //Mude a cor do TextDraw tempo aqui
#define COLOR_DAY  0xFFFFFFFF //Mude a cor do TextDraw dia aqui
#define dcmd(%1,%2,%3) if ((strcmp((%3)[1], #%1, true, (%2)) == 0) && ((((%3)[(%2) + 1] == 0) && (dcmd_%1(playerid, "")))||(((%3)[(%2) + 1] == 32) && (dcmd_%1(playerid, (%3)[(%2) + 2]))))) return 1

new Text:gTime;

// --------- [ DEFINITIONS ] ---------
#define MODEL_SELECTION_SKIN 1

//#define NAME_DRAWDISTANCE 		20.0
#define NT_DISTANCE 20.0
new Text3D:cNametag[MAX_PLAYERS];

#define DISTANCIA_FERIMENTOS    20.0

#define MAX_HOUSES  2500

/*
//Armas - Danos desativados
#define  CORONHADA          5.0
#define  SOCODANO            2.0
#define  OBJETOSDANO         3.0
#define  KNIFEDANO           10.0
#define  KATANADANO          17.0
#define  SERRADANO           50.0
#define  COLTDANO            18.0
#define  SILENCEDDANO        18.0
#define  EAGLEDANO           18.0
#define  SHOTGDANO           25.0
#define  COMBATDANO          25.0
#define  UZIDANO             22.0
#define  MP5DANO             25.0
#define  AKDANO              30.0
#define  M4DANO              30.0
#define  TECDANO             25.0
#define  RIFLEDANO           300.0
#define  SNIPERDANO          300.0
*/
//Armas - Danos
#define  CORONHADA          3.0
#define  SOCODANO            2.0
#define  OBJETOSDANO         3.0
#define  KNIFEDANO           5.0
#define  KATANADANO          5.0
#define  SERRADANO           50.0
#define  COLTDANO            10.0
#define  SILENCEDDANO        10.0
#define  EAGLEDANO           13.0
#define  SHOTGDANO           25.0
#define  COMBATDANO          25.0
#define  UZIDANO             15.0
#define  MP5DANO             15.0
#define  AKDANO              15.0
#define  M4DANO              15.0
#define  TECDANO             15.0
#define  RIFLEDANO           300.0
#define  SNIPERDANO          300.0

new GunNames[48][] = {
	"Nada", "Brass Knuckles", "Golf Club", "Nitestick", "Knife", "Baseball Bat",
	"Showel", "Pool Cue", "Katana", "Chainsaw", "Purple Dildo", "Small White Dildo",
	"Long White Dildo", "Vibrador", "Flowers", "Cane", "Grenade", "Tear Gas", "Molotov",
	"Vehicle Missile", "Hydra Flare", "Jetpack", "Colt", "Silenced Colt", "Eagle",
	"Shotgun", "Sawn Off", "Combat Shotgun", "Micro UZI", "MP5", "AK47", "M4", "Tec9",
	"Rifle", "Sniper Rifle", "Rocket Launcher", "HS Rocket Launcher", "Flamethrower", "Minigun",
	"Satchel Charge", "Detonator", "Spraycan", "Fire Extinguisher", "Camera", "Nightvision",
	"Infrared Vision", "Parachute", "Fake Pistol"
};
// --------- [ TEXTDRAWS ] ---------
new Text:Telinha;
new Text:HitMark;
new Text:ScreenTelinha;
new Text:TelinhaPreta;
// --------- [ VARIABLES ] ---------

new Pipeline, szQuery[2048];
new TentativasDeLogin[MAX_PLAYERS];
new string[1024],
	VendoCasa[MAX_PLAYERS],
	VendoCasaCheckPoint[MAX_PLAYERS],
	VendoComplexo[MAX_PLAYERS],
	VendoEmpresa[MAX_PLAYERS],
	VendoGaragem[MAX_PLAYERS],
	CasaNenhuma[MAX_PLAYERS],
	EmpresaNenhuma[MAX_PLAYERS],
	ComplexoNenhuma[MAX_PLAYERS],
	GaragemNenhuma[MAX_PLAYERS],
	IndustriaNenhuma[MAX_PLAYERS],
	VendoIndustria[MAX_PLAYERS],
	TempoDesistir[MAX_PLAYERS],
	PodeAceitarMorte[MAX_PLAYERS],
	Text3D:TextMorto[MAX_PLAYERS],
	StatusPalco = 0,
	ObjPalco[66],
	Menu_Armas[MAX_PLAYERS][6],
	AcabouDeLogar[MAX_PLAYERS],
	ComAnim[MAX_PLAYERS],
	AcabouDeMorrer[MAX_PLAYERS],
	SocosMorto[MAX_PLAYERS],
	TrocandoInterior[MAX_PLAYERS],
	OOCChat,
	Anim2Morreu[MAX_PLAYERS],
	FazendoAnimDeMancar[MAX_PLAYERS],
	AcabouDeLogarVida[MAX_PLAYERS];

new VendendoCasa[MAX_PLAYERS][3],
	VendendoComplexo[MAX_PLAYERS][3],
	VendendoEmpresa[MAX_PLAYERS][3],
	VendendoGaragem[MAX_PLAYERS][3];

//==============================================================================
forward UpdateKeyArrombar(playerid);
//====== [SPRAY SYSTEM] =======================================================
#define COLOR_LIGHTRED 0xFF6347AA
#define SCM SendClientMessage

#define SendSucessMessage(%0,%1) \
    SendClientMessage(%0, COLOR_GREEN, " "%1)

#define PRESSED(%0) \
        (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))


forward CreateGraffiti(playerid);
forward StartDrawing(playerid);
forward UpdateKey(playerid);
forward GraffitiDone(playerid);
forward GraffitiFailed(playerid);
forward DeleteObject(playerid);
forward ResetVariables(playerid);

new Float:GraffitiPos[MAX_PLAYERS][6];
new GraffitiObject[MAX_PLAYERS];
new ShowFont[MAX_PLAYERS];
new GraffitiText[MAX_PLAYERS][128];
new GraffitiColor[MAX_PLAYERS][32];
new GraffitiFont[MAX_PLAYERS][16];
new GraffitiSize[MAX_PLAYERS];
new Color[24];
new Font[16];

new PlayerText:ClickTD[MAX_PLAYERS];

new UpdateTimer[MAX_PLAYERS];
new UpdateTimerAr[MAX_PLAYERS];
new DeleteObjectTimer[MAX_PLAYERS];
new KeyForPress[MAX_PLAYERS];
new ColorNow[MAX_PLAYERS];
new CountTimer[MAX_PLAYERS];
new KeyPressed[MAX_PLAYERS];

#define MAX_PIXES   8000

enum g_info
{
	gID,
	gTexto[124],
	gCor[124],
	gFonte[256],
	gTamanho,
	Float:gX,
	Float:gY,
	Float:gZ,
	Float:gRX,
	Float:gRY,
	Float:gRZ,
	gWorld,
	gInterior,
	gPor[24],
	gObj
};
new GrafiteSys[MAX_PIXES][g_info];
//====== [ITENS SYSTEM] =======================================================
//dGunEnum
#define MAX_ITENS 50000

enum i_info
{
	iID,
	iCriado,
	iObj,
	iItem,
	iCom,
	iNome[12],

	Float:iX,
	Float:iY,
	Float:iZ,
	Float:iRX,
	Float:iRY,
	Float:iRZ,
	Float:iSX,
	Float:iSY,
	Float:iSZ,

	iDrop,
	iInt,
	iWorld,
	iUsando,
	iTipo,

	iBone
};
new ItemInfo[MAX_ITENS][i_info];
//====== [SISTEMA DE ARMAS] =======================================================
new VendoListaPegar[MAX_PLAYERS][30];
new VendoListaPegarT[MAX_PLAYERS][30];

//dGunEnum
#define MAX_ARMAS 10000
#define MAX_CARTUXO 5000

enum infoArma
{
	ArmaID,
	ArmaObj,
	ArmaCom,
	ArmaCompradaPor[32],
	ArmaCompradaData[32],
	ArmaNumeracao,
	ArmaModelo,
	ArmaAmmo,
	ArmaCor,
	ArmaNoChao,
	Float:ArmaX,
	Float:ArmaY,
	Float:ArmaZ,
	Float:ArmaRX,
	Float:ArmaRY,
	Float:ArmaRZ,
	ArmaInt,
	ArmaWorld,
	ArmaExtra,
	ArmaRGB[26],
	ArmaRaspada,
	ArmaEditando
};
new ArmaData[MAX_ARMAS][infoArma];

new GunObjects[47] = {
	0,331,333,334,335,336,337,338,339,341,321,322,323,324,325,326,342,343,344,
	0,0,0,346,347,348,349,350,351,352,353,355,356,372,357,358,359,360,361,362,
	363,364,365,366,367,368,368,371
};

new ArrumandoPosArma[MAX_PLAYERS];

enum infoCartuxo
{
	CartuxoID,
	CartuxoTipo,
	Float:cartuxoX,
	Float:cartuxoY,
	Float:cartuxoZ,
	Float:cartuxoRX,
	Float:cartuxoRY,
	Float:cartuxoRZ,
	cartuxoInt,
	cartuxoWorld,
 	cartuxoQnt,
 	cartuxoObj,
 	cartuxoEditando
};
new CartuxoData[MAX_CARTUXO][infoCartuxo];

new DropandoAmmo[MAX_PLAYERS];
new DropandoDrug[MAX_PLAYERS];

new LastShoter[MAX_PLAYERS];
//==============================================================================//
//                  ELEVADOR - PRÉDIO DA LS
//==============================================================================//
#define DIALOG_ID3           (990)
#define X_DOOR_R_OPENED3     (289.542419)
#define X_DOOR_L_OPENED3     (286.342407)
#define Y_DOOR_R_OPENED3     (-1609.640991)
#define Y_DOOR_L_OPENED3     (-1609.076049)
#define X_FDOOR_R_OPENED3    (289.492431)
#define X_FDOOR_L_OPENED3    (286.292419)
#define Y_FDOOR_R_OPENED3    (-1609.870971)
#define Y_FDOOR_L_OPENED3    (-1609.306030)
#define GROUND_Z_COORD3      (18.755348)
#define X_ELEVATOR_POS3      (287.942413)
#define Y_ELEVATOR_POS3      (-1609.341064)
#define ELEVATOR_STATE_IDLE3     (0)
#define ELEVATOR_STATE_WAITING3  (1)
#define ELEVATOR_STATE_MOVING3   (2)
#define INVALID_FLOOR3           (-1)

#define ELEVATOR_WAIT_TIME3  (5000)
#define DOORS_SPEED3         (5.0)

static FloorNames3[14][] =
{
	"Estacionamento",
	"Térreo",
	"Primeiro andar",
	"Segundo andar",
	"Terceiro andar",
	"Quarto andar",
	"Quinto andar",
	"Sexto andar",
	"Sétimo andar",
	"Oitavo andar",
	"Nono andar",
	"Décimo andar",
	"Décimo primeiro andar",
	"Décimo segundo andar"
};

static Float:FloorZOffsets3[14] =
{
    0.0, 		// Car Park
    15.069729,  // Ground Floor
    29.130733,	// First Floor
    33.630733,  // Second Floor = 29.130733 + 4.5
    38.130733,  // Third Floor = 33.630733 + 4.5
    42.630733,  // Fourth Floor = 38.130733 + 4.5
    47.130733,  // Fifth Floor = 42.630733 + 4.5
    51.630733,  // Sixth Floor = 47.130733 + 4.5
    56.130733,  // Seventh Floor = 51.630733 + 4.5
    60.630733,  // Eighth Floor = 56.130733 + 4.5
    65.130733,  // Ninth Floor = 60.630733 + 4.5
    69.630733,  // Tenth Floor = 65.130733 + 4.5
    74.130733,  // Eleventh Floor = 69.630733 + 4.5
    78.630733,  // Twelfth Floor = 74.130733 + 4.5
};

new Obj_Elevator3, Obj_ElevatorDoors3[2], Obj_FloorDoors3[14][2];
new Text3D:Label_Elevator3, Text3D:Label_Floors3[14];
new ElevatorState3;
new	ElevatorFloor3;
new ElevatorQueue3[14];
new	FloorRequestedBy3[14];
new ElevatorBoostTimer3;

forward CallElevator3(playerid, floorid);
forward ShowElevatorDialog3(playerid);
forward Elevator_Initialize3();
forward Elevator_Destroy3();

forward Elevator_OpenDoors3();
forward Elevator_CloseDoors3();
forward Floor_OpenDoors3(floorid);
forward Floor_CloseDoors3(floorid);

forward Elevator_MoveToFloor3(floorid);
forward Elevator_Boost3(floorid);
forward Elevator_TurnToIdle3();

forward ReadNextFloorInQueue3();
forward RemoveFirstQueueFloor3();
forward AddFloorToQueue3(floorid);
forward IsFloorInQueue3(floorid);
forward ResetElevatorQueue3();

forward DidPlayerRequestElevator3(playerid);

forward Float:GetElevatorZCoordForFloor3(floorid);
forward Float:GetDoorsZCoordForFloor3(floorid);
//==============================================================================//
//                  ELEVADOR - DENTRO DA DELEGACIA
//==============================================================================//
#define DIALOG_ID2           (880)

#define GROUND_Z_COORD2      (844.9482)     // (33.825077)
#define X_ELEVATOR_POS2      (2483.5209)
#define Y_ELEVATOR_POS2      (-1512.5004)

static FloorNames2[3][] =
{
	"Sub-Solo",
	"Andar Principal",
	"Segundo Andar"
};

static Float:FloorZOffsets2[3] =
{
    0.0,
    8.4060,
    16.8120
};

new Obj_Elevator2, Obj_ElevatorDoors2[2], Obj_FloorDoors2[3][2];
new Text3D:Label_Elevator2, Text3D:Label_Floors2[3];
new ElevatorState2;
new	ElevatorFloor2;
new ElevatorQueue2[3];
new	FloorRequestedBy2[3];
new ElevatorBoostTimer2;

forward CallElevator2(playerid, floorid);    // You can use INVALID_PLAYER_ID too.
forward ShowElevatorDialog(playerid);

// Private:
forward Elevator_Initialize2();
forward Elevator_Destroy2();
forward Elevator_OpenDoors2();
forward Elevator_CloseDoors2();
forward Floor_OpenDoors2(floorid);
forward Floor_CloseDoors2(floorid);
forward Elevator_MoveToFloor2(floorid);
forward Elevator_Boost2(floorid);
forward Elevator_TurnToIdle2();
forward ReadNextFloorInQueue2();
forward RemoveFirstQueueFloor2();
forward AddFloorToQueue2(floorid);
forward IsFloorInQueue2(floorid);
forward ResetElevatorQueue2();
forward DidPlayerRequestElevator2(playerid);
forward Float:GetElevatorZCoordForFloor2(floorid);
forward Float:GetDoorsZCoordForFloor2(floorid);



//==============================================================================//
//                  ELEVADOR - PREDIO PISTA DE SKATE
//==============================================================================//
#define DIALOG_ID1           (874)

#define X_DOOR_CLOSED       (1786.627685)
#define X_DOOR_R_OPENED     (1785.027685)
#define X_DOOR_L_OPENED     (1788.227685)
#define GROUND_Z_COORD1      (14.511476)
#define ELEVATOR_OFFSET1     (0.059523)

static FloorNames1[21][] =
{
	"Térreo",
	"1º Andar",
	"2º Andar",
	"3º Andar",
	"4º Andar",
	"5º Andar",
	"6º Andar",
	"7º Andar",
	"8º Andar",
	"9º Andar",
	"10º Andar",
	"11º Andar",
	"12º Andar",
	"13º Andar",
	"14º Andar",
	"15º Andar",
	"16º Andar",
	"17º Andar",
	"18º Andar",
	"19º Andar",
	"20º Andar"
};

static Float:FloorZOffsets1[21] =
{
    0.0,		// 0.0,
    8.5479,		// 8.5479,
    13.99945,   // 8.5479 + (5.45155 * 1.0),
    19.45100,   // 8.5479 + (5.45155 * 2.0),
    24.90255,   // 8.5479 + (5.45155 * 3.0),
    30.35410,   // 8.5479 + (5.45155 * 4.0),
    35.80565,   // 8.5479 + (5.45155 * 5.0),
    41.25720,   // 8.5479 + (5.45155 * 6.0),
    46.70875,   // 8.5479 + (5.45155 * 7.0),
    52.16030,   // 8.5479 + (5.45155 * 8.0),
    57.61185,   // 8.5479 + (5.45155 * 9.0),
    63.06340,   // 8.5479 + (5.45155 * 10.0),
    68.51495,   // 8.5479 + (5.45155 * 11.0),
    73.96650,   // 8.5479 + (5.45155 * 12.0),
    79.41805,   // 8.5479 + (5.45155 * 13.0),
    84.86960,   // 8.5479 + (5.45155 * 14.0),
    90.32115,   // 8.5479 + (5.45155 * 15.0),
    95.77270,   // 8.5479 + (5.45155 * 16.0),
    101.22425,  // 8.5479 + (5.45155 * 17.0),
    106.67580,	// 8.5479 + (5.45155 * 18.0),
    112.12735	// 8.5479 + (5.45155 * 19.0)
};

new Obj_Elevator1, Obj_Elevator1Doors1[2], Obj_FloorDoors1[21][2];
new Text3D:Label_Elevator1, Text3D:Label_Floors1[21];
new ElevatorState1, ElevatorFloor1;
new ElevatorQueue1[21], FloorRequestedBy1[21];
new ElevatorBoostTimer1;

forward CallElevator1(playerid, floorid);
forward ShowElevatorDialog1(playerid);

// Private:
forward Elevator_Initialize1();
forward Elevator_Destroy1();
forward Elevator_OpenDoors1();
forward Elevator_CloseDoors1();
forward Floor_OpenDoors1(floorid);
forward Floor_CloseDoors1(floorid);
forward Elevator_MoveToFloor1(floorid);
forward Elevator_Boost1(floorid);
forward Elevator_TurnToIdle1();
forward ReadNextFloorInQueue1();
forward RemoveFirstQueueFloor1();
forward AddFloorToQueue1(floorid);
forward IsFloorInQueue1(floorid);
forward ResetElevatorQueue1();
forward DidPlayerRequestElevator1(playerid);
forward Float:GetElevatorZCoordForFloor1(floorid);
forward Float:GetDoorsZCoordForFloor1(floorid);
//==============================================================================//
//                  ELEVADOR - PREDIO LS PERTO HP
//==============================================================================//
#define ELEVATOR_SPEED      (5.0)
#define DOORS_SPEED         (5.0)
#define ELEVATOR_WAIT_TIME  (5000)
#define DIALOG_ID           (873)

#define Y_DOOR_CLOSED       (-1180.535917)
#define Y_DOOR_R_OPENED     Y_DOOR_CLOSED - 1.6
#define Y_DOOR_L_OPENED     Y_DOOR_CLOSED + 1.6

#define GROUND_Z_COORD      (20.879316)
#define ELEVATOR_OFFSET     (0.059523)
#define X_ELEVATOR_POS      (1181.622924)
#define Y_ELEVATOR_POS      (-1180.554687)

#define ELEVATOR_STATE_IDLE     (0)
#define ELEVATOR_STATE_WAITING  (1)
#define ELEVATOR_STATE_MOVING   (2)
#define INVALID_FLOOR           (-1)

static FloorNames[11][] =
{
	"Estacionamento",
	"Hall de Entrada",
	"1º Andar",
	"2º Andar",
	"3º Andar",
	"4º Andar",
	"5º Andar",
	"6º Andar",
	"7º Andar",
	"8º Andar",
	"9º Andar"
};

static Float:FloorZOffsets[11] =
{
    0.0, 		// Car Park
    13.604544,	// Ground Floor
    18.808519,	// First Floor = 13.604544 + 5.203975
    24.012494,  // Second Floor = 18.808519 + 5.203975
    29.216469,  // Third Floor = 24.012494 + 5.203975
    34.420444,  // Fourth Floor = 29.216469 + 5.203975
    39.624419,  // Fifth Floor = 34.420444 + 5.203975
    44.828394,  // Sixth Floor = 39.624419 + 5.203975
    50.032369,  // Seventh Floor = 44.828394 + 5.203975
    55.236344,  // Eighth Floor = 50.032369 + 5.203975
    60.440319   // Ninth Floor = 55.236344 + 5.203975
};

new LSApartments1Object;
new LSApartments1CPObject;
new Obj_Elevator, Obj_ElevatorDoors[2], Obj_FloorDoors[11][2];
new Text3D:Label_Elevator, Text3D:Label_Floors[11];
new ElevatorState;
new	ElevatorFloor;
new ElevatorQueue[11];
new	FloorRequestedBy[11];
new ElevatorBoostTimer;

forward CallElevator(playerid, floorid);
forward ShowElevatorDialog(playerid);
forward Elevator_Initialize();
forward Elevator_Destroy();
forward Elevator_OpenDoors();
forward Elevator_CloseDoors();
forward Floor_OpenDoors(floorid);
forward Floor_CloseDoors(floorid);
forward Elevator_MoveToFloor(floorid);
forward Elevator_Boost(floorid);
forward Elevator_TurnToIdle();
forward ReadNextFloorInQueue();
forward RemoveFirstQueueFloor();
forward AddFloorToQueue(floorid);
forward IsFloorInQueue(floorid);
forward ResetElevatorQueue();
forward DidPlayerRequestElevator(playerid);
forward Float:GetElevatorZCoordForFloor(floorid);
forward Float:GetDoorsZCoordForFloor(floorid);
//==============================================================================//
//  	ANTI CHEATERS <<<<<<
//==============================================================================//
new Float:AntiGodVida[MAX_PLAYERS],
	AntiGod[MAX_PLAYERS],
	bool:IsAFK[MAX_PLAYERS],
	AFKTimer[MAX_PLAYERS];

//Anti RT
new AvisoRT[MAX_PLAYERS];

//AimBot
#define BUSTAIM_IS_PAUSED_FUNCTION OnPlayerPause
#define BUSTAIM_MAX_PING 500
#define BUSTAIM_SKIP_WEAPON_IDS 38,37,36

#include <BustAim>

new ids[MAX_PLAYERS];
//Anti AirBreak
new AimbotWarnings[MAX_PLAYERS];
new AvisoDeSpeed[MAX_PLAYERS];

//Anti God Mod
new Float:God_VidaAnterior2[MAX_PLAYERS];
new God_Aviso2[MAX_PLAYERS];

//Anti Health Heal / Armour Heal
new Float:P_Health[MAX_PLAYERS];

new Float:P_Armour[MAX_PLAYERS];
new P_ArmourAvisos[MAX_PLAYERS];

//Anti Weapon Hack
new DesarmandoPlayer[MAX_PLAYERS];
new WeaponHackAvs[MAX_PLAYERS];
new TempoResetIsso[MAX_PLAYERS];

//Anti Flood
new FloodCMD[MAX_PLAYERS];

//Anti Speed
new Pos_Z_Old[MAX_PLAYERS];
new Pos_Z_Old_AV[MAX_PLAYERS];
//==============================================================================//
//                          		EMPREGOS
//==============================================================================//
#define JOB_MECANICO        1
#define JOB_CAMINHONEIRO 	2
#define JOB_TREINADOR  		3
#define JOB_TAXISTA   		4
#define JOB_FALSIFICADOR    5
#define JOB_HOTDOG          6
#define JOB_DESMANCHE       7
#define JOB_PESCADOR	    8
#define JOB_MOTOBOY       9
#define JOB_LIXEIRO         10
#define JOB_LAVAGEM         11
#define JOB_HACK 			12
#define JOB_MOTORISTA       13

//HotDog
new HotDogAccept[MAX_PLAYERS],
	HotDogOffer[MAX_PLAYERS],
	HotDogPrice[MAX_PLAYERS];

//Taxista
new lastcar[MAX_PLAYERS];
new objTaxi[MAX_VEHICLES];
new isTaxi[MAX_VEHICLES];

new SetandoPos[MAX_PLAYERS];
new CaindoInt[MAX_PLAYERS];
new CaindoInt_Av[MAX_PLAYERS];


new TaxiCallTime[MAX_PLAYERS],
	TransportDuty[MAX_PLAYERS],
	TransportCost[MAX_PLAYERS],
	TransportDriver[MAX_PLAYERS],
	TransportMoney[MAX_PLAYERS],
	TransportTime[MAX_PLAYERS],
	TaxiAccepted[MAX_PLAYERS],
	TransportValue[MAX_PLAYERS],
	TaxiDrivers = 0,
	ChamouTaxi[MAX_PLAYERS],
	ChamouMec[MAX_PLAYERS],
	MecCallTime[MAX_PLAYERS],
	MecAccepted[MAX_PLAYERS];

enum _vehDat
{
        _vehModel,
        Float:_attPos
};

new attInfo[212][_vehDat] =
{
        {400, 0.85},
        {401, 0.8},
        {402, 0.79},
        {403, 2.15},
        {404, -1.0},
        {405, 0.73},
        {406, -1.0},
        {407, -1.0},
        {408, -1.0},
        {409, 0.8},
        {410, 0.899999},
        {411, 0.699999},
        {412, 0.699999},
        {413, 1.149999},
        {414, 2.4},
        {415, 0.61},
        {416, -1.0},
        {417, -1.0},
        {418, 1.1},
        {419, 0.699999},
        {420, -1.0},
        {421, 0.699999},
        {422, -1.0},
        {423, -1.0},
        {424, -1.0},
        {425, -1.0},
        {426, 0.85},
        {427, -1.0},
        {428, 1.6},
        {429, -1.0},
        {430, -1.0},
        {431, -1.0},
        {432, -1.0},
        {433, -1.0},
        {434, 0.8},
        {435, -1.0},
        {436, 0.8},
        {437, -1.0},
        {438, -1.0},
        {439, -1.0},
        {440, 1.269999},
        {441, -1.0},
        {442, 0.92},
        {443, -1.0},
        {444, -1.0},
        {445, 0.86},
        {446, -1.0},
        {447, -1.0},
        {448, -1.0},
        {449, -1.0},
        {450, -1.0},
        {451, 0.569999},
        {452, -1.0},
        {453, -1.0},
        {454, -1.0},
        {455, -1.0},
        {456, -1.0},
        {457, -1.0},
        {458, 0.759999},
        {459, -1.0},
        {460, -1.0},
        {461, -1.0},
        {462, -1.0},
        {463, -1.0},
        {464, -1.0},
        {465, -1.0},
        {466, 0.86},
        {467, 0.86},
        {468, -1.0},
        {469, -1.0},
        {470, 1.1},
        {471, -1.0},
        {472, -1.0},
        {473, -1.0},
        {474, 0.839999},
        {475, 0.699999},
        {476, -1.0},
        {477, 0.699999},
        {478, -1.0},
        {479, 1.0},
        {480, -1.0},
        {481, -1.0},
        {482, 1.0},
        {483, 1.049999},
        {484, -1.0},
        {485, -1.0},
        {486, -1.0},
        {487, -1.0},
        {488, -1.0},
        {489, 1.1},
        {490, -1.0},
        {491, 0.699999},
        {492, 0.87},
        {493, -1.0},
        {494, 0.74},
        {495, 1.039999},
        {496, 0.839999},
        {497, -1.0},
        {498, -1.0},
        {499, -1.0},
        {500, 1.0},
        {501, -1.0},
        {502, -1.0},
        {503, -1.0},
        {504, 0.899999},
        {505, -1.0},
        {506, -1.0},
        {507, 0.81},
        {508, -1.0},
        {509, -1.0},
        {510, -1.0},
        {511, -1.0},
        {512, -1.0},
        {513, -1.0},
        {514, 1.549999},
        {515, 1.47},
        {516, 0.86},
        {517, 0.86},
        {518, 0.699999},
        {519, -1.0},
        {520, -1.0},
        {521, -1.0},
        {522, -1.0},
        {523, -1.0},
        {524, -1.0},
        {525, -1.0},
        {526, 0.68},
        {527, 0.85},
        {528, 1.1},
        {529, 0.92},
        {530, -1.0},
        {531, -1.0},
        {532, -1.0},
        {533, -1.0},
        {534, 0.649999},
        {535, -1.0},
        {536, -1.0},
        {537, -1.0},
        {538, -1.0},
        {539, -1.0},
        {540, 0.73},
        {541, 0.639999},
        {542, 0.85},
        {543, -1.0},
        {544, -1.0},
        {545, 0.769999},
        {546, 0.85},
        {547, 0.899999},
        {548, -1.0},
        {549, 0.709999},
        {550, 0.74},
        {551, 0.899999},
        {552, -1.0},
        {553, -1.0},
        {554, -1.0},
        {555, -1.0},
        {556, -1.0},
        {557, -1.0},
        {558, 0.87},
        {559, 0.759999},
        {560, 0.87},
        {561, 0.87},
        {562, 0.8},
        {563, -1.0},
        {564, -1.0},
        {565, 0.699999},
        {566, 0.85},
        {567, -1.0},
        {568, -1.0},
        {569, -1.0},
        {570, -1.0},
        {571, -1.0},
        {572, -1.0},
        {573, -1.0},
        {574, -1.0},
        {575, -1.0},
        {576, 0.899999},
        {577, -1.0},
        {578, -1.0},
        {579, 1.24},
        {580, 1.059999},
        {581, -1.0},
        {582, -1.0},
        {583, -1.0},
        {584, -1.0},
        {585, 1.0},
        {586, -1.0},
        {587, 0.73},
        {588, -1.0},
        {589, 1.1},
        {590, -1.0},
        {591, -1.0},
        {592, -1.0},
        {593, -1.0},
        {594, -1.0},
        {595, -1.0},
        {596, -1.0},
        {597, -1.0},
        {598, -1.0},
        {599, -1.0},
        {600, -1.0},
        {601, -1.0},
        {602, 0.709999},
        {603, 0.68},
        {604, -1.0},
        {605, -1.0},
        {606, -1.0},
        {607, -1.0},
        {608, -1.0},
        {609, -1.0},
        {610, -1.0},
        {611, -1.0}
};
//============================

//Mecanico
new PlayerText:Wheels[MAX_PLAYERS][23];
new Page[MAX_PLAYERS];

//Lixeiro
forward InGarbage(playerid);
forward OnPlayerPickupGarbage(playerid);
forward OnPlayerDropGarbage(playerid);
forward RefreshGarbageStage(playerid);
forward OnPlayerStartGarbage(playerid);
forward OnPlayerEndGarbage(playerid);

new	garbage_run[MAX_PLAYERS];
new garbage_run_stage[MAX_PLAYERS];
new garbage_run_state[MAX_PLAYERS];
new garbage_object[MAX_PLAYERS];
new garbage_run_vehicle[MAX_PLAYERS];

new Float:garbage_profiles[4][14][3] = {
	{
		{2238.1055, -1904.0712, 12.9855}, // Chain 1 Rub 1
		{2262.2729, -1903.9242, 12.9855}, // Chain 1 Rub 2
		{2285.1406, -1903.5358, 12.9855}, // Chain 1 Rub 3
		{2303.1992, -1945.3759, 12.9855}, // Chain 1 Rub 3
		{2335.5046, -1981.8279, 12.9855}, // Chain 1 Rub 5
		{2381.3782, -1981.3071, 12.9855}, // Chain 1 Rub 6
		{2423.1248, -1943.2981, 12.9855}, // Chain 1 Rub 7
		{2447.6748, -1941.6780, 12.9855}, // Chain 1 Rub 8
		{2501.7510, -1941.8524, 12.9855}, // Chain 1 Rub 9
		{2522.5681, -1910.8440, 12.9855}, // Chain 1 Rub 10
		{2518.6472, -1772.0482, 12.9855}, //11
		{2491.2029, -1725.0244, 12.9855}, //12
		{2305.7988, -1725.7566, 12.9826}, //13
		{2209.6577, -1826.5775, 12.7561} 	//14
	},
	{
		{1993.3402, -2100.7227, 12.9827},
		{1970.2771, -2072.0464, 12.9827},
		{1970.0034, -1975.6434, 12.9800},
		{1932.9795, -1922.9878, 12.9447},
		{1911.2578, -1923.0895, 12.9447},
		{1889.3787, -1923.1414, 12.9447},
		{1868.4376, -1922.7657, 12.9447},
		{1846.8329, -1922.9012, 12.9065},
		{1832.9207, -1849.7198, 13.0149},
		{1831.1727, -1789.2549, 12.8633}, // 10
		{1891.2146, -1761.7297, 13.0243},
		{1930.4758, -1761.5906, 13.0243},
		{1952.6826, -1802.8640, 13.0243},
		{1948.9067, -1881.3485, 13.5474}//{1947.3108, -1876.0703, 13.0243}  // 14
	},
	{
		{1970.8744, -1890.0879, 13.0243},
		{1970.2604, -1823.1033, 13.0243},
		{1970.7997, -1771.0829, 13.0243},
		{1998.4039, -1761.4270, 13.0243},
		{2050.5745, -1761.5645, 13.0243},
		{2102.9736, -1761.4343, 13.0243},
		{2170.5959, -1761.4913, 13.0243},
		{2199.7566, -1656.9728, 14.6752},
		{2151.3616, -1619.5427, 13.0371},
		{2072.2346, -1630.5328, 12.9049}, //10
		{2072.3318, -1650.8025, 12.9049},
		{2072.3906, -1700.6545, 12.9049},
		{2072.4556, -1724.6484, 12.9049},
		{2072.6104, -1788.9832, 12.9049}  //14
	},
	{
		{2769.6804, -2086.4065, 13.1374},
		{2782.9021, -2059.6636, 13.1374},
		{2723.4626, -2021.9238, 12.8639},
		{2688.4639, -1995.0366, 12.8639},
		{2658.4270, -1994.8995, 12.8639},
		{2664.2634, -2013.2699, 12.8639},
		{2689.7527, -2013.1443, 12.8639},
		{2735.5378, -1969.5908, 12.9419},
		{2735.7754, -1937.5048, 12.9419},
		{2537.4934, -1914.4580, 12.9814}, // 10
		{2527.9053, -1923.8716, 12.9814},
		{2464.7456, -1922.8197, 12.9055},
		{2393.6565, -1963.0088, 12.5476},
		{2269.9021, -1963.8254, 12.9182}    //14
	}
};
new garbage_vehicles[4];
//==============================================================================//
new Noia_1,
    Noia_2,
    Noia_3,
    Noia_4,
    Noia_5,
    Noia_6,
    Noia_7,
    Noia_8,
    Noia_9,
    Noia_10,
    Noia_11,
    Noia_12,
    Noia_13,
    Noia_14,
    Noia_15,
    Noia_16,
    Noia_17,
    Noia_18,
    Noia_19,
    Noia_20,
    Noia_21,
    Noia_22;
//==============================================================================//
new Float:estacionamento_vagas[19][3] = {
{1627.2080, -1046.3242, 23.5516},
{1632.0664, -1046.3995, 23.5516},
{1636.3129, -1046.2875, 23.5516},
{1640.8943, -1046.2921, 23.5516},
{1645.3209, -1046.3546, 23.5516},
{1649.8651, -1046.5424, 23.5516},
{1654.2026, -1046.4268, 23.5516},
{1658.4866, -1046.3741, 23.5516},
{1654.2428, -1038.2865, 23.5516},
{1649.6619, -1038.0814, 23.5516},
{1645.2607, -1038.0095, 23.5516},
{1640.7629, -1038.1798, 23.5516},
{1636.4507, -1038.0559, 23.5516},
{1631.8873, -1038.1050, 23.5516},
{1627.3658, -1038.2499, 23.5516},
{1691.0618, -1061.0374, 23.5516},
{1695.4944, -1060.7827, 23.5516},
{1695.6619, -1069.4045, 23.5516},
{1690.8846, -1069.0846, 23.5516}
};
// --------- [ ENUMERATORS ] ---------

// Account Enumerator !
enum e_Account
{
	pID,
	pucpOwn,
	pPassword[129],
	pLevel,
	pGender,
	pAge[50],
	pAdmin,
	pSkin,
	Float:pHealth,
	Float:pArmour,
	Float:pPos[4],
	pRegistrado,
	pTutorial,
	pLogado,
	pInterior,
	pWorld,
	pEditandoPlaca,
	pEditandoPlacaG,
	pEditandoPlacaC,
	pEditandoPlacaE,
	pEditandoPortao[2],
	pEntrouCasa,
	pEntrouEmpresa,
	pEntrouComplexo,
	pEntrouGaragem,
	pGrana,
	pGranaSuja,
	pOuro,
	pPrata,
	pBronze,
	pUltimoLogin[50],
	pMorto,
	pChaveEmprestada,
	pFac,
	pExecComando,
	pJob,
	pJobTempo,
	pJobInPd,
	pTrafico,
	pFabricouD,
	pPecasMecanicas[7], // 0 - Radio | 1 - Neon | 2 - GPS | 3 - Imob | 4 - Neon | 5 - Peças | 6 - Rodas
	pBateria,
	pBomba,
	pC4,
	pTNT,
	pTempoPLD,
	pToolKit,
	pArrombarDNV,
	pArrombarDNV_C,
	pCaixaSelect,
	pComprandoGas,
	pCargaGas,
	pItemTPDA,
	pEditPump,
	pEditMovel,
	pEditPorta[2],
	pGasPump,
    pGasStation,
   	pRefill,
	pRefillPrice,
	pEnchendoBomba,
	pLoadCrate,
	pLoadMovel,
	pGalao,
	pArmaMao,
	pMun9mm,
	pMun556,
	PlayerText:pTextdraws,
	pMunCart,
	pMun127,
	pWaypoint,
	pSalarios,
	pCortaRem,
	pLocation[32],
	Float:pWaypointPos[3],
	pSlot1,
	pSlot2,
	pSlot3,
	pSlot4,
	pSlot5,
	pSlot1a,
	pSlot2a,
	pSlot3a,
	pSlot4a,
	pSlot5a,
	pLogouAgr,
	pFacCargo,
	pEmServico,
	pPayDay,
	pDutySkin,
	pColde,
	pColdreA,
	pEditandoBareira,
	pArmario1,
	pArmario2,
	pArmario3,
    pArmario4,
    pArmario5,
    pArmario6,
    pArmario7,
    pArmario8,
    pArmario9,
    pArmario10,
	pArm9mm,
	pArm556,
	pArmCart,
	pArm127,
	pPrisao,
	pTemPreso,
	pEditandoItens,
	pTester,
	pNomeOOC[64],
	pAceitoSos,
	pDamage0[64],
	pDamage1[64],
	pDamage2[64],
	pDamage3[64],
	pDamage4[64],
	pDamage5[64],
	pDamage6[64],
	pDamage7[64],
	pDamage8[64],
	pDamage9[64],
	pDamage10[64],
	pDamage11[64],
	pDamage12[64],
	pDamage13[64],
	pDamage14[64],
	pDamage15[64],
	pDamage16[64],
	pDamage17[64],
	pDamage18[64],
	pDamage19[64],
	pBanco,
	pMancando,
	Float:pHealthMax,
	pChatStyle,
	pPontos,
	pKickAll,
	pBanAll,
	pBanido,
	pWalkStyle,
	pDoador,
	pDoadorTempo,
	pChangeNames,
	pSavings,
	pForca,
	pRadio,
	pRadioChan,
    pRadioChan2,
	pMascara,
	pMascaraU,
	pMascID,
	pNomeP[24],
	pNomeF[24],
	pAvisos,
	pAviso1[126],
	pAviso2[126],
	pAviso3[126],
	Float:pMenosDanoTiro,
	pDrogaTime,
	pTremorAtirar,
	pUsouDroga,
	pSkillTiro,
	Float:pColdreX,
	Float:pColdreY,
	Float:pColdreZ,
	Float:pColdreRX,
	Float:pColdreRY,
	Float:pColdreRZ,
	pColdreBone,
	pDriveLic,
	pWepLic,
	pFlyLic,
	pTruckLic,
	pCigarros,
	pSavingsGerando,
	pLutaStyle,
	pBoombox,
	pCasasDeletadas,
	pTomouAlgumTiro,
	pPlacas,
	pRaspador,
	pHabDrug,
	pArmasResetadas,
	pAjudaInicial,
	pTomouTiroPesado,
    pTomouTiroBrancas,
    pConvenio,
    pTempoMorto,
    pAjudaInicialDim,
	pMining,
	pMineTime,
	pMineCount,
	pMinedRock,
	pEtnia,
	pOlhos,
	pCabelo,
	pPeso,
	pAltura,
	pFome,
	pSede,
	pApostouBicho,
	pFomeTime,
	pSedeTime,
    pFactionTeam,
    pBanTeam,
    pRefundTeam,
    pPropertyTeam,
	//pUmbrella,
	pArrastado,
	pArrastante,
	pArrastarTimer
};
new PlayerInfo[MAX_PLAYERS][e_Account];

new SenhaErrada[MAX_PLAYERS], TempoParaSalvar[MAX_PLAYERS], SalvandoConta[MAX_PLAYERS];
new LoginSeconds[MAX_PLAYERS],TelaDeLogin[MAX_PLAYERS];//, LoginTimer[MAX_PLAYERS]
new Nickname[MAX_PLAYERS][25];

new JaEstaDesmanchando[MAX_PLAYERS];
new Desmanchando[MAX_PLAYERS];

new FaseTutorial[MAX_PLAYERS];

enum O_Infos
{
	oAlgemado,
    oAmarrado,
	oEditandoMesaPoker,
	oAdminOnDuty,
	oTesterOnDuty,
	oChangeName[24],
	oGalaoNaMao,
	oBombeiroOnDuty,
	oRadioPD,
	oEditandoArmaC,
	oModShop,
	oModCat,
	oModPart,
	oPodePas,
	oVendoMod,
	oModRod,
	oTraficanteID,
	oAguardandoNewTraf,
	oTraficanteRand,
	oComprandoDrug,
	oEntrouCheckPointTraf,
	oCPcarro,
	oPedidoID,
	oBoneCItem,
	oIndexCItem,
	oTipoCItem,
	oModelidCItem,
	oComprandoDrugQ,
	o911Nome[128],
	o911Local[128],
	o911Text[128],
	o911Reastreador[128],
	o911Tipo,
	oGovEditor[5],
	oPerdVida,
	oLigDireta,
	oFalsis,
	oFalsisT,
	oCaiSangue,
	oAjailMotivo[128],
	oSaindoDeSpec,
	Float:oDesmancheX,
	Float:oDesmancheY,
	Float:oDesmancheZ,
	Float:oDesmancheR,
	Float:oLavagemX,
	Float:oLavagemY,
	Float:oLavagemZ,
	Float:oLavagemR,
	oDesmancheTime
};
new OutrasInfos[MAX_PLAYERS][O_Infos];

#define	MAX_SANGUE_CHAO                                                         10000
#define SANGUE_TEMPO                                                            120

enum s_data
{
	SangueTempo,
	SangueObj
}
new SangueData[MAX_SANGUE_CHAO][s_data];

new EditandoEmpresa[MAX_PLAYERS];
new EditandoProduto[MAX_PLAYERS];
//==============================================================================
//Basket System
#include "../gamemodes/basket/b_Seville.pwn"
//==============================================================================
//                      				Casas
//==============================================================================
enum h_Info
{
	hID,
	hCriada,
	hDono,
	Float:hExX,
	Float:hExY,
	Float:hExZ,
	Float:hInX,
	Float:hInY,
	Float:hInZ,
	hExWorld,
	hExInt,
	hInt,
	hPreco,
	hTrancada,
	Float:hPlacaX,
	Float:hPlacaY,
	Float:hPlacaZ,
	Float:hPlacaR,
	hAVenda,
	Text3D:HouseText,
	ObjPlaca,
	hTelCont,
	hPerm1[24],
	hPerm2[24],
	hPerm3[24],
	hBank,
 	hXMR[256],
 	hDia,
 	hEndereco[32],
 	hTipo,
 	hSmoke,
 	hSmokeO[6],
 	hAlarme,
 	hAlarmeColocouAgr,
 	hAlarmeDisparado,
 	hInterruptor,
 	hGasto,
 	Float:hExX2,
	Float:hExY2,
	Float:hExZ2,
	Float:hInX2,
	Float:hInY2,
	Float:hInZ2
};
new HouseInfo[MAX_HOUSES][h_Info];
//==============================================================================
//                      				GARAGENS
//==============================================================================
#define MAX_GARAGENS    1000

enum g_Info
{
	hID,
	hCriada,
	hDono,
	Float:hExX,
	Float:hExY,
	Float:hExZ,
	Float:hInX,
	Float:hInY,
	Float:hInZ,
	Float:hInR,
	Float:hExX2,
	Float:hExY2,
	Float:hExZ2,
	Float:hExR,
	hExWorld,
	hExInt,
	hInt,
	hPreco,
	hTrancada,
	Float:hPlacaX,
	Float:hPlacaY,
	Float:hPlacaZ,
	Float:hPlacaR,
	hAVenda,
	Text3D:HouseText,
	ObjPlaca,
	hTelCont,
	hPerm1[24],
	hPerm2[24],
	hPerm3[24],
	hBank,
 	hXMR[256],
 	hDia,
 	hTipo, // Casa Anexada
 	hSmoke,
 	hSmokeO[6],
 	hAlarme,
 	hAlarmeColocouAgr,
 	hAlarmeDisparado,
 	hInterruptor,
 	hGasto,
 	hCarros
};
new GaragemInfo[MAX_GARAGENS][g_Info];
//==============================================================================
//                      		Furniture System by: Freeze
//==============================================================================
#define MAX_MOVEIS 30000

enum m_Info
{
	mID,
	mCriado,
	mObjeto,
	mModelo,
	Float:mX,
	Float:mY,
	Float:mZ,
	Float:mRX,
	Float:mRY,
	Float:mRZ,
	Float:mARZ,
	mWorld,
	mInt,
	mTextura,
	mCor,
	mNaCasa,
	mNaEmpresa,
	mFurniNome[24],
	mPAberta,
	mPTrancada,
	mNoComplexo,
 	mIndex,
 	mNaGaragem
};
new FurniInfo[MAX_MOVEIS][m_Info];

new VendoFurniList[MAX_PLAYERS][200];
new TexturaEdit[MAX_PLAYERS];
new VendoItemList[MAX_PLAYERS][50];

#include "../gamemodes/Furniture/texturas.pwn"

//Furniture
#define MODEL_SELECTION_ELETROS 	2
#define MODEL_SELECTION_CONFORTO 	3
#define MODEL_SELECTION_DECORACAO 	4
#define MODEL_SELECTION_ENTRERT		5
#define MODEL_SELECTION_ILUMINA 	6
#define MODEL_SELECTION_BANHEIRO    7
#define MODEL_SELECTION_ARMAZEM	    8
#define MODEL_SELECTION_SUPERF     	9
#define MODEL_SELECTION_DIVERSOS 	10
#define MODEL_SELECTION_ESPECIAL    11
#define MODEL_SELECTION_PORTAS	    12
#define MODEL_SELECTION_TVS	        13
#define MODEL_SELECTION_COMP        14

//PMERJ
#define MODEL_EB_SKINS           30
#define MODEL_PMERJ_SKINS            31
#define MODEL_VITOR_SKINS            32

#define MODEL_PMERJ_BARREIRAS        35

//Conces
new ComprandoCarro[MAX_PLAYERS][5];
#define MODEL_SELECTION_CONCE_0     39
#define MODEL_SELECTION_CONCE_1     40
#define MODEL_SELECTION_CONCE_2     41
#define MODEL_SELECTION_CONCE_3     42
#define MODEL_SELECTION_CONCE_4     43
#define MODEL_SELECTION_CONCE_5		47
#define MODEL_SELECTION_CONCE_6 	48

#define MODEL_SELECTION_OCULOS      50
#define MODEL_SELECTION_CHAPEUS     51
#define MODEL_SELECTION_MASCARAS    52

#define MODEL_SELECTION_OCULOS_PMERJ    53
#define MODEL_SELECTION_CHAPEU_PMERJ    54
#define MODEL_SELECTION_OUTROS_PMERJ    55

#define MODEL_SELECTION_OUTROS          56
#define MODEL_SELECTION_RELOGIOS        57

#define MODEL_SELECTION_OCULOS_PCERJ    58
#define MODEL_SELECTION_CHAPEU_PCERJ    59
#define MODEL_SELECTION_OUTROS_PCERJ    60


#define MODEL_SELECTION_OCULOS_CBERJ    61
#define MODEL_SELECTION_CHAPEU_CBERJ    62
#define MODEL_SELECTION_OUTROS_CBERJ    33

#define MODEL_SELECTION_OCULOS_EB    63
#define MODEL_SELECTION_CHAPEU_EB    64
#define MODEL_SELECTION_OUTROS_EB    65

#define MODEL_SELECTION_OUTROS_PROTEGE    66

#define MODEL_SELECTION_BINCO       80

#define MODEL_SELECTION_C_CEL      	120

#define MODEL_SELECTION_AJUDA_INI            145
//Itens PMERJ
#define  MAX_PMERJ_BARREIRAS 700

enum BlockInfo{
    BlockModel,
	BlockObj,
	Float:BlockX,
	Float:BlockY,
	Float:BlockZ,
	BlockW
}
new BarreiraInfo[MAX_PMERJ_BARREIRAS][BlockInfo];

//==== [ Furniture ] ====
static Catalogo_Eletrodomesticos[45] = {
  1780, 2127, 2131, 2147, 2361, 2017, 2135, 2144, 2294, 2134,
  1235, 1300, 1328, 1329, 1330, 1337, 1339, 1347, 1359, 1371,
  1574, 2770, 2421, 2426, 1331, 1332, 1333, 1334, 1335, 1336,
  1344, 1345, 1415, 11706, 11743, 2149, 19916, 19933, 19915,
  1773, 1777, 2415, 2417, 11743, 11717
};
static Catalogo_Conforto[88] = {
  1797, 1793, 1700, 1701, 1745, 1794, 1795, 1799, 1796, 1798,
  1800, 1801, 1802, 1803, 1812, 2299, 2302, 2603, 1663, 1715,
  1720, 1722, 1739, 1754, 1806, 1810, 1811, 2079, 2120, 2121,
  2122, 2123, 2124, 2724, 2788, 1724, 1705, 1707, 1769, 1711,
  1727, 1729, 1735, 1755, 1758, 1759, 1762, 1765, 1767, 1769,
  2096, 1702, 1703, 1706, 1710, 1712, 1713, 1756, 1757, 1760,
  1761, 1763, 1764, 1768, 1753, 1716, 1805, 2350, 2723, 11689,
  11687,11720,11734,14880,11682,11683, 11684, 11685, 11687,
  1968, 1969, 1970, 2027, 2343, 1721, 1671, 1726, 1968
};
static Catalogo_Decoracoes[133] = {
   2558, 2559, 2561, 2560, 2048, 11245 ,2614, 2631, 2632, 1828,
  2815,  2817, 2818, 2833, 2834, 2835, 2836, 2841, 2842, 2847,
  1640,  1641, 1642, 1643, 2289, 2287, 2286, 2278, 2285, 2283,
  2271,  2257, 2284, 2282, 2281, 2280, 2279, 2272, 2269, 2277,
  2276,  2275, 2274, 2273, 2270, 2255, 19473, 948, 949, 950,
  2001,  2010, 2011, 2194, 2195, 2203, 2240, 2241, 2242, 2244,
  2245,  2246, 2247, 2248, 2249,2251, 2250, 2252, 2253, 2345,
  3810,  3802, 3806, 14804 ,14834, 15038, 2049, 2051, 2050, 2691,
  2695,  2696, 2692, 2693, 2268, 11737, 19329, 19328, 19327, 19326,
  19320, 2047, 2048, 19319, 19318, 19317, 19175, 19174, 19173, 19172,
  19171, 19170, 19169, 19168, 19167, 19166, 19165, 19164, 2256, 2615,
  2726, 14705, 19617, 11744, 11747, 11721, 2655, 2656, 2657, 2658, 2659, 2660,
  2661, 2662, 2697, 2684, 2685, 2686, 2687, 2688, 2811
};

static Catalogo_Entreterimento[84] = {
  1985, 2627, 2628, 2629, 2913, 2916, 2915, 2630, 2964, 3094, 3004,
  3003, 3002, 3001, 3000, 3100, 3101, 3102, 3103, 3104, 3105, 3106,
  2999, 2998, 2997, 2996, 2995, 3497, 2114, 14772, 1748, 1747, 1429,
  1750, 2700, 2595, 14532, 1751, 1749, 1791, 1518, 1786, 1792, 2606,
  2640, 2681, 2778, 2779, 1717, 1718, 2028, 1782, 1783, 1785, 1787,
  1788, 1790, 2099, 2100, 1809, 2102, 2103, 2104, 2226, 2229, 2230,
  2232, 2231, 2233, 1781, 1841, 1952, 1953, 1954, 1955, 1956, 1957,
  1958, 16377, 14820, 16779, 14651, 19787, 19786
};

static Catalogo_Iluminacao[45] = {
  2238, 2196, 2707, 945, 666, 1893, 2026, 2073, 2074, 2075,
  2076, 16779, 16780, 18647, 18648, 18649, 18650, 18651, 18652, 19806,
  11726, 19806, 11726, 2069, 2070, 2071, 2072, 921, 938, 940, 945, 19156, 19155,
  19154, 19153, 19152, 19151, 19150, 19149, 19148, 19147, 19146, 19145, 19144,
  19143
};

static Catalogo_Banheiro[37] = {
  2514,2521,2525,2528,2738,2013,2130,2132,2136,2148,
  2150,2154,2160,2518,2523,2524,2739,2517,2520,2527,
  2097,2516,2519,2522,2526,11709,11707,11747, 11748,
  14481, 2741, 2742, 2749, 2750, 2751, 2752, 2602
};

static Catalogo_Armazenamento[36] = {
  1829, 2332, 1742, 14455, 2608, 1417, 1740, 2089, 2328, 2087,
  2088, 1743, 2323, 2020, 2021, 2000, 2007, 2065, 2066, 2067,
  2609, 2610, 2167, 2163, 2128, 2140, 2125, 2153, 2092, 2141,
  15037, 11729, 11730, 19899, 964, 2567
};

static Catalogo_Superficies[87] = {
  2357, 2118, 2117, 2086, 2080, 2115, 2110, 1770, 1813, 1814,
  1815, 1817, 1818, 1819, 1820, 1822, 1823, 2014, 2015, 2016,
  2019, 2022, 2129, 2304, 2133, 2137, 2138, 2139, 2305, 2142,
  2151, 2152, 2155, 2156, 2159, 2338, 2414, 2424, 2423, 2435,
  2434, 2439, 2440, 2441, 2442, 2445, 2444, 2446, 2450, 2455,
  2454, 2385, 2458, 2459, 2460, 2461, 2063, 2210, 2211, 2462,
  2463, 666, 2346, 2319, 2314, 2315, 2313, 2311, 19581, 19582,
  19583, 19584, 19585, 19586, 19590, 19900, 19903, 11690,
  11691, 15036, 1826, 1827, 933, 936, 937, 941, 1737
};

static Catalogo_Diversos[246] = {
  2374, 2377, 2378, 2381, 2382, 2383, 2384, 2389, 2390, 2391,
  2392, 2394, 2396, 2397, 2398, 2399, 2401, 1950, 1951, 1487,
  1544, 1520, 1644, 1668, 1670, 1485, 2867,
  2856, 2857, 2860, 2861, 2823, 2866, 2859, 2858, 2663, 2670,
  2671, 2673, 2674, 2672, 2675, 2676, 2677, 2843, 2844, 2845,
  2846, 2849, 2848, 2850, 2851, 2862, 2863, 2812, 2680, 1622,
  1616, 1886, 2690, 1808, 1964, 1998, 1999, 2008, 2009, 2161,
  2162, 2164, 2165, 2166, 2169, 2171, 2172, 2173, 2174, 2175,
  2180, 2181, 2182, 2183, 2184, 2185, 2186, 2190, 2192, 2193,
  2604, 2605, 2607, 19592, 19621, 19624, 19625, 19622, 19626,
  19623, 19627, 19560, 19561, 19562, 19563, 19564, 19565, 19566, 19567,
  19568, 19569, 19570, 19571, 19572, 19573, 19805, 19807, 19808, 19810,
  19811, 19812, 19813, 19814, 19815, 19816, 19818, 19819, 19820, 19821,
  19822, 19823, 19824, 19825, 19826, 19827, 19828, 19829, 19835, 19580,
  19636, 19637, 19638, 19639, 19579, 19896, 19897, 19943, 19857, 19858,
  19865, 19804, 19847, 19871, 19873, 19874, 19875, 19878, 19882, 19883,
  19893, 19894, 19587, 19608, 19609, 19610, 19611, 19612, 19613, 19614,
  19615, 19616, 19617, 19525, 11686, 11688, 3361, 3399, 7096, 8572, 14407,
  14409, 14410, 14411, 14414, 19830, 11728, 11710, 11711, 11713, 11715,
  11716, 11718, 11719, 11722, 11723, 11724, 11725, 11733,
  11705, 19920, 11738, 19921, 19918, 19625, 19621, 2002, 2055, 2649,
  2653, 2894, 2966, 2967, 3027, 2057, 2060, 2062, 2342, 918, 920, 927,
  929, 930, 934, 935, 939, 943, 1212, 2061, 19305, 19273, 2616, 2200, 2838,
  2839, 2840, 2837, 327, 328, 11745, 11746, 11748, 11712, 2800, 2801, 2802, 2824,
  2825, 2826, 2827
};

static Catalogo_Especial[171] = {
   1599, 1600, 1601, 1603, 1604, 1605, 1606, 1609, 1613, 19079,
   1515, 1830, 1831, 1832, 1833, 1834, 1835, 1838, 1836, 1837,
   1929, 1895, 1978, 18659, 18660, 18661, 18662, 18663, 18664, 18665,
   18667, 19128, 19129, 19159, 18102, 19121, 19122, 19123, 19124, 19125,
   19127, 19353, 19354, 19355, 19356, 19357, 19358, 19359, 19360, 19361,
   19363, 19364, 19365, 19366, 19367, 19368, 19369, 19370, 19371, 19463,
   19374, 19375, 19376, 19377, 19378, 19379, 19380, 19383, 19384, 19385,
   19387, 19388, 19389, 19390, 19391, 19392, 19393, 19394, 19395, 19396,
   19397, 19398, 19399, 19400, 19401, 19402, 19403, 19404, 19405, 19406,
   19409, 19410, 19411, 19412, 19413, 19414, 19415, 19416, 19426, 19427,
   19429, 19430, 19431, 19432, 19433, 19434, 19435, 19436, 19437, 19438,
   19439, 19440, 19441, 19442, 19443, 19445, 19446, 19447, 19448, 19449,
   19450, 19451, 19408, 19428, 19452, 19386, 19453, 19407, 19372, 19362,
   19126, 18666, 19454, 19373, 19455, 19456, 19457, 19458, 19459, 19460,
   19461, 19462, 19527, 19528, 11732, 19325, 2068, 3034, 3032, 3058, 3085,
   3087, 3088, 3111, 925, 931, 19158, 19157, 970, 11090, 19869, 19868, 19866,
   19865, 19641, 11474, 8674, -2047, -2048, -2049, -2050
};

#define MAX_PORTAS 59
static Catalogo_Portas[MAX_PORTAS] = {
	977, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1500, 1501, 1502, 1504,
	1505, 1506, 1507, 1522, 1532, 1533, 1535, 1536, 1537, 1538, 1555, 1556,
	1557, 1560, 1561, 1566, 1569, 2664, 2873, 2875, 2876, 2877, 2878, 2879,
	2911, 2924, 2946, 2947, 2948, 2949, 2959, 2970, 3029, 3061, 3109, 14638,
	14819, 19802, 19857, 19858, 19859, 19860, 19875, 1567, 2930, 3089, 2954
};

#define MAX_RADIOS 14
static OBJ_RADIOS[MAX_RADIOS] = {
	2099, 2100, 2101, 2102, 2103, 2104, 2226, 2225, 2227, 2229, 2230, 2231, 2232,
	2233
};

#define MAX_COMPUTS 9
static OBJ_COMPUTERS[MAX_COMPUTS] = {
	2008, 2009, 2165, 2172, 2181, 2185, 2190, 2193, 2198
};

#define MAX_TVS 31
static OBJ_TELEVISOES[MAX_TVS] = {
	1518, 1717, 1747, 1748, 1749, 1750, 1751, 1752, 2312, 2316,
	2317, 2318, 2320, 1781, 1786, 1791, 1792, 2322, 2297, 2296,
	2224, 2595, 2596, 2775, 2606, 2648, 2700, -2043, -2044, -2045,
	-2046
};
//===== [ SLOT ] =====//
static VITOR_Uniformes[6] = {
	20102, 20103, 20104, 20105,
	20106, 20107
};

//===== [ PMERJ ] =====//
static PMERJ_Uniformes[32] = {
	20400, 20401, 20402, 20403,
	20404, 20405, 20406, 20407,
	20408, 20409, 20410, 20411,
	20412, 20413, 20414, 20415,
	20416, 20417, 20418, 20419,
	20420, 20421, 20422, 20423,
	20424, 20426, 20427, 20428,
	20429, 20430, 20431, 20432
};

static PMERJ_Barreiras[16] = {
	1422, 1423, 1424, 1425, 1427,
	981, 978, 979, 19425, 19467, 
	1428, 1437, -2117, -2118, -2119

};

static TRAF_Barreiras[4] = {
	935, 3632, 1431, 2960

};

static LOJA_OCULOS_PMERJ[3] = {
	19138, 19139, 19140
};

static LOJA_CHAPEU_PMERJ[3] = {
	-2104, -2129, -2130
};

static LOJA_OUTROS_PMERJ[14] = {
	-2126, -2101, -2106, -2120,
	-2121, -2122, -2123, -2124,
	-2125, -2105, -2127, -2108, 
	-2128, -2100
};
//======== [PROTEGE]======//
static PROTEGE_Uniformes[4] = {
    20501, 20503, 20504, 20505
};
static LOJA_OUTROS_BANK[3] = {
	19138, 19139, 19140
	
};
//======== [PCESP]======//
static PCERJ_Uniformes[29] = {
    20200, 20201, 20202, 20203,
	20204, 20205, 20206, 20207,
	20208, 20209, 20210, 20211,
	20212, 20213, 20214, 20215,
	20216, 20217, 20218, 20219,
	20220, 20221, 20222, 20223,
	20224, 20225, 20226, 20227,
	20228
};
static LOJA_OCULOS_PCERJ[3] = {
    19138, 19139, 19140
};

static LOJA_CHAPEU_PCERJ[2] = {
    -2103,-2129
};

static LOJA_OUTROS_PCERJ[6] = {
	-2102, -2105, -2125, -2056,
	-2055, -2106
};

//======== [EB]======//
static EB_Uniformes[18] = {
    20401, 20402, 20403, 20404,
	20405, 20406, 20407, 20408,
	20409, 20410, 20411, 20412,
	20415, 20416, 20417, 20418, 
	20419, 20420

};
static LOJA_OCULOS_EB[3] = {
    19138, 19139, 19140
};

static LOJA_CHAPEU_EB[6] = {
    -2111, -2113, -2114, -2115,
	-2121, -2106

};

static LOJA_OUTROS_EB[8] = {
	-2109, -2110, -2111, -2116,
	-2120, -2107, -2103, -2112
};

//======== [CBERJ]======//
static CBERJ_Uniformes[37] = {
	20301, 20302, 20303, 20304,
	20305, 20306, 20307, 20308,
	20309, 20310, 20311, 20312,
	20313, 20314, 20315, 20316,
	20317, 20318, 20319, 20320,
	20321, 20322, 20324, 20325, 
	20326, 20329, 20330, 20331, 
	20332, 20333, 20334, 20336,
	20337, 20338, 20339, 20340,
	20342
	
};
static LOJA_OCULOS_CBERJ[3] = {
    19138, 19139, 19140
};

static LOJA_CHAPEU_CBERJ[1] = {
    -2400
};

static LOJA_OUTROS_CBERJ[3] = {
    -2120, -2121, -2125
};

//===== [ ITENS ] ====
static LOJA_CHAPEU[137] = {
	2052, 2053, 18638, 18639, 18926, 18927, 18928, 18929, 18930, 18931, 18932,
	18933, 18934, 18935, 18921, 18922, 18923, 18924, 18925, 18891, 18892, 18893,
	18894, 18895, 18896, 18897, 18898, 18899, 18900, 18901, 18902, 18903, 18904,
	18905, 18906, 18907, 18908, 18909, 18910, 18936, 18937, 18938, 18939, 18940,
	18941, 18942, 18943, 18944, 18945, 18946, 18947, 18948, 18949, 18950, 18951,
	18952, 18953, 18954, 18955, 18956, 18957, 18958, 18960, 18959, 18961, 18962,
	18964, 18965, 18966, 18967, 18968, 18969, 18970, 18971, 18972, 18973, 18975,
	18976, 18977, 18978, 18979, 19069, 19077, 19093, 19094, 19095, 19096, 19097,
	19098, 19101, 19102, 19103, 19104, 19105, 19106, 19107, 19108, 19109, 19110,
	19111, 19112, 19113, 19114, 19115, 19116, 19117, 19118, 19119, 19120, 19136,
	19137, 19160, 19352, 19487, 19488, 19528, 19553, 19558, 19067, 19068, 19069,
	19554, 19469, -2051, -2052, -2053, -2054, -2600, -2601, -2602, -2603, -2604,
	-2605, -2606, -2607, -2608, -2609
};

static LOJA_MASCARAS[19] = {
	18920, 18919, 18918, 18917, 18916, 18915, 18914, 18913, 18912, 18911, 18974,
	19801, 19036, 19037, 19038, 19472, 19557, 11704, 19085
};

static LOJA_OCULOS[31] = {
	19006, 19007, 19008, 19009, 19010, 19011, 19012, 19013, 19014, 19015, 19016,
	19017, 19018, 19019, 19020, 19021, 19022, 19023, 19024, 19025, 19026, 19027,
	19028, 19029, 19030, 19031, 19032, 19033, 19034, 19035, 19015
};

static LOJA_OUTROS[50] = {
	2919, 371, 3026, 11745, 19624, 19625, 1210, 19079, 19078, 18975, 19136,
	19090, 19091, 19092, 19350, 19351, 19421, 19422, 19423, 19424, 19556, 19555,
	19559, 19904, 11735, 19317, 19318, 19319, 19622, 19631, 19626, 19591, 19586,
	19307, 19306, -2125, -2080, -2086, -2082, -2055, -2057, -2058, -2059, 
	-2060, -2700, -2701, -2702, -2703, -2183, -2610
	
};

static LOJA_RELOGIOS[15] = {
    19039, 19040, 19041, 19042, 19043, 19044, 19045, 19046, 19047, 19048, 19049,
	19050, 19051, 19052, 19053
};
//===== [ CONCESSIONÁRIAS ] ====
static CONCE_PUB[12] = {  //Conce Publico
	407, 416, 427, 428, 544, 582, 601, 596, 597, 598, 599, 470
};

static CONCE_SALLON[62] = {  //Compactos
	400, 401, 404, 405, 410, 412, 418, 419, 420, 421, 422, 426, 436, 438, 439,
	445, 458, 466, 467, 474, 475, 478, 479, 483, 489, 491, 492, 496, 500, 505,
	507, 516, 517, 518, 526, 527, 529, 533, 534, 535, 536, 540, 542, 543, 545,
	546, 547, 549, 550, 551, 554, 555, 561, 566, 567, 575, 576, 579, 580, 585,
	589, 600
};

static CONCE_TRAILERS[31] = {  //Funcionais / Industriais
	499,
	422,
	482,
	498,
	609,
	524,
	578,
	455,
	403,
	414,
	443,
	514,
	600,
	413,
	515,
	440,
	543,
	459,
	531,
	408,
	552,
	478,
	456,
	554,
	435,
	450,
	584,
	591,
	428,
	423
};

static CONCE_LUXO[18] = {  //Funcionais / Industriais
	409,
	402,
	415,
	429,
 	451,
 	477,
 	480,
 	506,
 	558,
 	559,
	560,
	562,
	565,
	579,
	580,
	587,
	589,
	602
};

static CONCE_UTILITARIOS[11] = {
	457,
	486,
	524,
	530,
	531,
	572,
	424,
	508,
	525,
	588
};

static CONCE_MOTOS[11] = {
	461,
	462,
	463,
	468,
	471,
	521,
	581,
	586,
	481,
	509,
 510
};

static CONCE_BARCOS[8] = {
	446,
	452,
	453,
	472,
	473,
	484,
	493,
	454
};

static CARROS_AJUDAINI[10] = {
	401,
	404,
	458,
	463,
	516,
	526,
	527,
	543,
	586
};
//==============================================================================
//                      		Faction System by: Freeze
//==============================================================================
#define MAX_FACCOES 50
enum fac_Info
{
	fID,
	fCriada,
	fNome[34],
	fTipo, // 1 - PMERJ // 4 - GOV // 5 - Gang // 6 - Mafia // 7 - Entrega Banco // 8 - DoC // 10 ~ 13- DrugNvl
	fRank1[24],
	fRank2[24],
	fRank3[24],
	fRank4[24],
	fRank5[24],
	fRank6[24],
	fRank7[24],
	fRank8[24],
	fRank9[24],
	fRank10[24],
	fRank11[24],
	fRank12[24],
	fTrafNum,
	fBlockf,
	fMembros,
	fOrdem,
	fComando,
	Float:fArmarioPosX,
	Float:fArmarioPosY,
	Float:fArmarioPosZ,
	fArmarioVw,
	fArmarioPickup,
	Text3D:fArmario3DText,
};
new FacInfo[MAX_FACCOES][fac_Info];

#define FAC_TIPO_PMERJ 1
#define FAC_TIPO_PCERJ 2
#define FAC_TIPO_CBERJ 3
#define FAC_TIPO_GOV 4
#define FAC_TIPO_EB 5
#define FAC_TIPO_BANK 6
#define FAC_TIPO_TJRP 7
#define FAC_TIPO_PRIXY 8
new convidado[MAX_PLAYERS];
//============================================================================== [ Phone System ]
#define DIALOG_PHONE_TEXT_NUMBER    8000
#define DIALOG_PHONE_CALL_NUMBER    8001
#define DIALOG_PHONE_TEXT_TEXT      8002

#include "../gamemodes/sistemas/phone.pwn" // Phone System
//==============================================================================
//==============================================================================
//                      				Casas
//==============================================================================
#define MAX_PORTOES 200
enum port_Info
{
	ptID,
	ptCriado,
	ptObjeto,
	Float:ptX,
	Float:ptY,
	Float:ptZ,
	Float:ptRX,
	Float:ptRY,
	Float:ptRZ,
	Float:ptAX,
	Float:ptAY,
	Float:ptAZ,
	Float:ptRAX,
	Float:ptRAY,
	Float:ptRAZ,
	ptWorld,
	ptInt,
    ptFac,
    ptCasa,
    ptLock,
	ptAberto,
	ptModelo,
	Float:ptRange,
	ptTempo,
	ptTimer,
	ptEmpresa
};

new PortaoInfo[MAX_PORTOES][port_Info];
//==============================================================================
//                      				COMPLEXOS
//==============================================================================
#define MAX_COMPLEXOS   200
enum c_Info
{
	cID,
	cCriada,
	cDono,
	cNome[64],
	Float:cExX,
	Float:cExY,
	Float:cExZ,
	Float:cInX,
	Float:cInY,
	Float:cInZ,
	cInt,
	cPreco,
	cTrancada,
	Float:cPlacaX,
	Float:cPlacaY,
	Float:cPlacaZ,
	Float:cPlacaR,
	cAVenda,
	Text3D:cText,
	cIcone,
	cIcone2,
	cIcone3,
	cObjPlaca,
	cTelCont,
	Float:cExX2,
	Float:cExY2,
	Float:cExZ2,
	Float:cInX2,
	Float:cInY2,
	Float:cInZ2,
	cPerm1[24],
	cPerm2[24],
	cPerm3[24],
	cXMR[256],
	complexTipo,
	complexIcone,
	Float:cExX3,
	Float:cExY3,
	Float:cExZ3,
	Float:cInX3,
	Float:cInY3,
	Float:cInZ3
};
new ComplexoInfo[MAX_COMPLEXOS][c_Info];

#define STREAMER_DISTANCIA_ICONE_COMPLEXO 5000.0
//==============================================================================
//                      				EMPRESAS
//==============================================================================
#define MAX_EMPRESAS   		200
#define STREAMER_DISTANCIA_ICONE_EMPRESA 5000.0

#define EMP_TIPO_VUPGRADE 	1

#define EMP_TIPO_CONCE_0   	2 // Saloons Cars
#define EMP_TIPO_CONCE_1   	3 // Saloons Cars
#define EMP_TIPO_CONCE_2   	4 // Saloons Cars
#define EMP_TIPO_CONCE_3   	5 // Saloons Cars

#define EMP_TIPO_247    	6 // Posto de Gasolina
#define EMP_TIPO_ROUPAS    	7 //

#define EMP_TIPO_AMMU    	8
#define EMP_TIPO_TRANS      9

#define EMP_TIPO_CAVALO     10 // Aposta de Cavalos

#define EMP_TIPO_CONCE_4   	15 // Saloons Cars
#define EMP_TIPO_CONCE_5   	16 // Saloons Cars

#define EMP_TIPO_BANCO   	20

#define EMP_TIPO_PAWN       21
#define EMP_TIPO_BURGERSHOT 22
#define EMP_TIPO_CONCE    	23
#define EMP_TIPO_BAR    	24

#define EMP_TIPO_OUTROS   	25

#define EMP_TIPO_STACKED 26
#define EMP_TIPO_CLUCKIN 27

#define EMP_TIPO_CONCE_NEW  49 //Teste

#define EMP_TIPO_LIC_CENTER  50
#define EMP_TIPO_EMP_CENTER  51

#define EMP_TIPO_EMP_FVELHO  55
#define EMP_TIPO_EMP_CELULAR   56

#define EMP_TIPO_FARMACIA    	57 //farmacia de drogas
#define EMP_TIPO_CEL 58
#define EMP_TIPO_JOALHERIA 59

enum e_Info
{
	eID,
	eCriada,
	eDono,
	Float:eExX,
	Float:eExY,
	Float:eExZ,
	Float:eInX,
	Float:eInY,
	Float:eInZ,
	eExWorld,
	eExInt,
	eInt,
	ePreco,
	eTrancada,
	Float:ePlacaX,
	Float:ePlacaY,
	Float:ePlacaZ,
	Float:ePlacaR,
	eAVenda,
	Text3D:EmpText,
	eObjPlaca,
	eTelCont,
	eNome[64],
	eTipo,
	eIcone,
	eBank,
	Float:eVX,
	Float:eVY,
	Float:eVZ,
    Float:eVR,
    ePagaProd,
    eReqProd,
    eProdutos,
    eFuelPrice,
    ePerm1[24],
    ePerm2[24],
    ePerm3[24],

    eCelulares,
    eCelularPreco,

    eGalao,
	eGalaoPreco,

	eToolkitPreco,
	eCigarroPreco,
	eRadioPreco,
	eCameraPreco,
	eLanchePreco,
	eMascPreco,
	eBoomboxPreco,
	eXMR[256],
	eCervejaPreco,
	eCompraTipo,
	eLeasing,
	eEntradaPrice,
	eReqFuel,
	eReqFuelPay
};
new EmpInfo[MAX_EMPRESAS][e_Info];

//==============================================================================
//                      VEHICLE SYSTEM - BY: FREEZE
//==============================================================================
#define MAX_CA_VEHICLES 50000
new purchasing_vehicle[MAX_PLAYERS],
	sync_attribs[MAX_VEHICLES],
	sync_engine_off[MAX_VEHICLES],
	vehicle_creating = 0,
	fuel_interval[MAX_VEHICLES],
	vehicle_alarm_time[MAX_VEHICLES],
	startup_delay[MAX_VEHICLES],
	startup_delay_sender[MAX_VEHICLES],
	vehicle_sell_offer[MAX_PLAYERS],
	vehicle_sell_sender[MAX_PLAYERS],
	vehicle_sell_price[MAX_PLAYERS],
	vehicle_towing[MAX_PLAYERS],
	cp_target[MAX_PLAYERS],
	find_cooldown[MAX_PLAYERS],
	going_to_scrap[MAX_PLAYERS],
	confirm_dialog_extra[MAX_PLAYERS],
 	filling[MAX_PLAYERS],
	filling_amount[MAX_PLAYERS],
	filling_biz[MAX_PLAYERS],
	filling_started[MAX_PLAYERS],
	PlayerText:Speedo[MAX_PLAYERS],
	Flash[MAX_VEHICLES],
	FlashTime[MAX_VEHICLES];

new Text:ChangeColor[37];
new ColorsAvailable[36] = {
        0,1,5,8,10,15,68,48,98,45,73,64,80,250,111,228,235,117,118,50,81,63,119,230,150,30,96,115,36,4,3,11,9,28,99,181
};

new AllCarColors[256] = {
        0x000000FF,0xFFFFFFFF,0x55aaa7FF,0xce575bFF,0x58685dFF,0xb06c77FF,0xf8ad38FF,0x7a96acFF,0xdfdec9FF,0x81897aFF,
        0x677776FF,0x93948eFF,0x7e9689FF,0x807c70FF,0xe8eac3FF,0xbab9a5FF,0x73996aFF,0xa54549FF,0xc55063FF,0xd8d5b2FF,
        0x86979eFF,0xa66b67FF,0x8e4556FF,0xcfc3a9FF,0x6c6d65FF,0x5b5a55FF,0xafb295FF,0x77705eFF,0x5a6466FF,0xa89f82FF,
        0x64433aFF,0x73423dFF,0xb5bcb4FF,0xa1a58aFF,0x96947fFF,0x918a6cFF,0x5a5b53FF,0x5b6656FF,0xa8b186FF,0x8d9389FF,
        0x3f3c35FF,0x80765dFF,0x873b3bFF,0x7d3334FF,0x3b5741FF,0x71413dFF,0xaaa176FF,0x89815dFF,0xc2b894FF,0xd6d0b0FF,
        0xa9a98fFF,0x647d67FF,0x849283FF,0x495261FF,0x565b61FF,0x9d846eFF,0xb0af90FF,0xa19273FF,0x7a3138FF,0x5c6c69FF,
        0x9e9c83FF,0x887554FF,0x803c3dFF,0x928f7cFF,0xcfcda7FF,0xd4d27fFF,0x6f534fFF,0xa7ada1FF,0xe1dd9eFF,0xd9b79bFF,
        0xa84645FF,0x96a097FF,0x6f725dFF,0xb6bd93FF,0x764040FF,0x434842FF,0xb0ac89FF,0xb5a778FF,0x8a473fFF,0x375369FF,
        0x9a555aFF,0xaa9c75FF,0xac5359FF,0x56665bFF,0x786151FF,0x995061FF,0x60843cFF,0x72858bFF,0x7c454aFF,0xa7a373FF,
        0xb8b29aFF,0x585e5cFF,0x827f6eFF,0x388a85FF,0x4b6566FF,0x4c5858FF,0xc3c0a1FF,0x97a79aFF,0x80a999FF,0xe1c99dFF,
        0x6e8c8aFF,0x57585cFF,0xd6b98dFF,0x426d80FF,0xa29368FF,0x818274FF,0x3d717fFF,0xb6ab7eFF,0x587482FF,0x696a62FF,
        0x8f7d59FF,0xa3a091FF,0x80948bFF,0x786954FF,0x72866aFF,0xaa4553FF,0x53616aFF,0x8f4f4fFF,0xbfc1b6FF,0x938369FF,
        0xb5a180FF,0x763b41FF,0x747567FF,0x846c50FF,0x914b4dFF,0x38526bFF,0xef87a2FF,0x3c3d38FF,0x6cb85dFF,0x725a4eFF,
        0x78acaaFF,0x987e59FF,0x9b675aFF,0x545d4cFF,0x706c83FF,0x7dc6bdFF,0xcb90c6FF,0x7fca6fFF,0xf7ebc3FF,0x9697abFF,
        0xc3bda3FF,0xbdaf88FF,0xcdbf67FF,0xab8e90FF,0xa28796FF,0xd2ee99FF,0xbd8a93FF,0xaa6a85FF,0x72715cFF,0x665b45FF,
        0x656952FF,0x7e926fFF,0x7398b5FF,0x7da477FF,0x6bcf79FF,0x65c8a9FF,0xe0d59dFF,0xc8c5b4FF,0xde7c5fFF,0x77694cFF,
        0x5d6d49FF,0xd17f74FF,0x6f93b3FF,0x62b79aFF,0x667264FF,0x6aa998FF,0x6daaa5FF,0xaa7faaFF,0x875e4aFF,0xbfb1b0FF,
        0xb4a8acFF,0x987f9dFF,0x686947FF,0x80604bFF,0x8e6c50FF,0xd8685aFF,0xd294a9FF,0xbf9899FF,0xbb839cFF,0x826168FF,
        0xbd825aFF,0xba6254FF,0xd28865FF,0xcf7958FF,0xc88c84FF,0xbba899FF,0x4f5847FF,0x516b48FF,0x6c825bFF,0x677c5bFF,
        0xaa757dFF,0x8dca85FF,0xd4c7a4FF,0xc0bfaaFF,0xdfd249FF,0xbac775FF,0xbdc2a2FF,0xbabb5eFF,0x717caaFF,0x7d7b4aFF,
        0xc1aa74FF,0x536370FF,0x79936cFF,0x606f6cFF,0x798f8dFF,0x515459FF,0x4d585aFF,0x677a76FF,0x7d99a7FF,0x5d7b7dFF,
        0x6f8b8cFF,0x72668aFF,0xac6c53FF,0xd3caadFF,0x98a053FF,0x545945FF,0xcc996eFF,0xa3caafFF,0xd29779FF,0xcc9054FF,
        0xdd888fFF,0xd6c377FF,0xd07151FF,0x596271FF,0x936556FF,0x89864fFF,0x9cd665FF,0x5a765dFF,0xd0b858FF,0x66b758FF,
        0x83605aFF,0xb79153FF,0xc37d9fFF,0xbf6791FF,0x5b7f51FF,0x71894fFF,0x5d7166FF,0xc3919dFF,0xcca470FF,0xaf6c52FF,
        0x77c4a4FF,0x99c556FF,0x9b616fFF,0x63bd63FF,0x7c5d49FF,0x57694fFF,0x809ea8FF,0x748080FF,0x935d5bFF,0x90575eFF,
        0xaaa184FF,0x7d7e70FF,0x716d62FF,0xc9c3a3FF,0x9b907aFF,0x838786FF
};

#define VEHICLE_MODEL_TYPE_CAR 1
#define VEHICLE_MODEL_TYPE_BOAT 2
#define VEHICLE_MODEL_TYPE_PLANE 3

#define VIRTUAL_WORLD_CARCHOOSE 9191

#define chrtoupper(%1) \
        (((%1) > 0x60 && (%1) <= 0x7A) ? ((%1) ^ 0x20) : (%1))

#define flashtime 115 //milliseconds for the flash, larger number = slower flash

enum vInfo{

	vID,
	vModel,
	Float:vSpawnX,
	Float:vSpawnY,
	Float:vSpawnZ,
	Float:vSpawnR,
	vColor1,
	vColor2,
	vOwner,
	vVehicle,
	vFuel,
	vMileage,
	vInsurance,
	vLock,
	vLocked,
	vDestroyed,
	vEngine,
	vFaction,
	vOwnerName[64],
	vDeathTime,
	vPlate[38],
	vMods[128],
	vPaintjob,
	vImpounded,
	vGps,
	vCompany,
	vDamage[4],
	Float:vHealth,
	vNeon,
	vNeonState,
	vImmob,
	vSelling,
	vSellingPrice,
	vSellingExpire,
    vRadio,
	vWorld,
	vInterior,
    vMalote,
    vSlotTipo1,
    vSlotTipo2,
    vSlotTipo3,
    vSlotTipo4,
    vSlotTipo5,
    vSlotTipo6,
    vSlotTipo7,
    vSlotTipo8,
    vSlotTipo9,
    vSlotTipo10,
    vSlot1,
    vSlot2,
    vSlot3,
    vSlot4,
	vSlot5,
	vSlot6,
	vSlot7,
	vSlot8,
	vSlot9,
	vSlot10,
	vAmmo1,
	vAmmo2,
	vAmmo3,
	vAmmo4,
	vAmmo5,
	vAmmo6,
	vAmmo7,
	vAmmo8,
	vAmmo9,
	vAmmo10,
	vCargaGas,
	vCargaTipo,
	Text3D:vTrailerInfo,
	Float:vBateria,
	Float:vMotor,
	vSirene[2],
	vpluva1,
	vpluva2,
	vpluva3,
	vpluva4,
	vpluva5,
	vpluva1a,
	vpluva2a,
	vpluva3a,
	vpluva4a,
	vpluva5a,
	vpluva1t,
	vpluva2t,
	vpluva3t,
	vpluva4t,
	vpluva5t,
	Float:Slot1X,
	Float:Slot1Y,
	Float:Slot1Z,
	Float:Slot1RX,
	Float:Slot1RY,
	Float:Slot1RZ,
	Float:Slot2X,
	Float:Slot2Y,
	Float:Slot2Z,
	Float:Slot2RX,
	Float:Slot2RY,
	Float:Slot2RZ,
	Float:Slot3X,
	Float:Slot3Y,
	Float:Slot3Z,
	Float:Slot3RX,
	Float:Slot3RY,
	Float:Slot3RZ,
	Float:Slot4X,
	Float:Slot4Y,
	Float:Slot4Z,
	Float:Slot4RX,
	Float:Slot4RY,
	Float:Slot4RZ,
	Float:Slot5X,
	Float:Slot5Y,
	Float:Slot5Z,
	Float:Slot5RX,
	Float:Slot5RY,
	Float:Slot5RZ,
	Float:Slot6X,
	Float:Slot6Y,
	Float:Slot6Z,
	Float:Slot6RX,
	Float:Slot6RY,
	Float:Slot6RZ,
	Float:Slot7X,
	Float:Slot7Y,
	Float:Slot7Z,
	Float:Slot7RX,
	Float:Slot7RY,
	Float:Slot7RZ,
	Float:Slot8X,
	Float:Slot8Y,
	Float:Slot8Z,
	Float:Slot8RX,
	Float:Slot8RY,
	Float:Slot8RZ,
	Float:Slot9X,
	Float:Slot9Y,
	Float:Slot9Z,
	Float:Slot9RX,
	Float:Slot9RY,
	Float:Slot9RZ,
	Float:Slot10X,
	Float:Slot10Y,
	Float:Slot10Z,
	Float:Slot10RX,
	Float:Slot10RY,
	Float:Slot10RZ,
	vObj1,
	vObj2,
	vObj3,
	vObj4,
	vObj5,
	vObj6,
	vObj7,
	vObj8,
	vObj9,
	vObj10,
	vXMR[256],
	bool:vTuned,
 	vSpoiler,
  	vHood,
   	vRoof,
    vSkirt,
    vLamps,
    vNitro,
    vExhaust,
    vWheels,
    vStereo,
    vHydraulics,
    vFrontBumper,
    vRearBumper,
    vRightVent,
    vLeftVent,
    vPaintJob,
    vPlacaProcurada,
	vConsertando,
	vNPC_Tempo,
	vGunHack,
	vGunHackA,
	vAjudaIni,
	vGaragem,
	vDesmanchado,
	vSemUso,
	vLastDriver
}
new VehicleInfo[MAX_CA_VEHICLES][vInfo];

#define MAX_CARCACAS    1000
new Carcaca[MAX_CARCACAS],
	CarcacaCar[MAX_CARCACAS];

new Text3D:vehicle3Dtext[MAX_CA_VEHICLES],
	TemCarSign[MAX_CA_VEHICLES];

enum vmInfo{

	vmModel,
	vmName[256],
	vmPrice,
	vmEmerVeh,
	Float:vmDonatorVeh,
	vmType,
	vmVehicle,
	vmInsurancePrice,
	vmNews,
	vmFuelInterval

}
new VehicleModelInfo[300][vmInfo];

new VehicleNames[213][256] = {
   "Landstalker",
   "Bravura",
   "Buffalo",
   "Linerunner",
   "Pereniel",
   "Sentinel",
   "Dumper",
   "Firetruck",
   "Trashmaster",
   "Stretch",
   "Manana",
   "Infernus",
   "Voodoo",
   "Pony",
   "Mule",
   "Cheetah",
   "Ambulance",
   "Leviathan",
   "Moonbeam",
   "Esperanto",
   "Taxi",
   "Washington",
   "Bobcat",
   "Mr Whoopee",
   "BF Injection",
   "Hunter",
   "Premier",
   "Enforcer",
   "Securicar",
   "Banshee",
   "Predator",
   "Bus",
   "Rhino",
   "Barracks",
   "Hotknife",
   "Trailer", //artict1
   "Previon",
   "Coach",
   "Cabbie",
   "Stallion",
   "Rumpo",
   "RC Bandit",
   "Romero",
   "Packer",
   "Monster",
   "Admiral",
   "Squalo",
   "Seasparrow",
   "Pizzaboy",
   "Tram",
   "Trailer", //artict2
   "Turismo",
   "Speeder",
   "Reefer",
   "Tropic",
   "Flatbed",
   "Yankee",
   "Caddy",
   "Solair",
   "Berkley's RC Van",
   "Skimmer",
   "PCJ-600",
   "Faggio",
   "Freeway",
   "RC Baron",
   "RC Raider",
   "Glendale",
   "Oceanic",
   "Sanchez",
   "Sparrow",
   "Patriot",
   "Quad",
   "Coastguard",
   "Dinghy",
   "Hermes",
   "Sabre",
   "Rustler",
   "ZR3 50",
   "Walton",
   "Regina",
   "Comet",
   "BMX",
   "Burrito",
   "Camper",
   "Marquis",
   "Baggage",
   "Dozer",
   "Maverick",
   "News Chopper",
   "Rancher",
   "FBI Rancher",
   "Virgo",
   "Greenwood",
   "Jetmax",
   "Hotring",
   "Sandking",
   "Blista Compact",
   "Police Maverick",
   "Boxville",
   "Benson",
   "Mesa",
   "RC Goblin",
   "Hotring Racer", //hotrina
   "Hotring Racer", //hotrinb
   "Bloodring Banger",
   "Rancher",
   "Super GT",
   "Elegant",
   "Journey",
   "Bike",
   "Mountain Bike",
   "Beagle",
   "Cropdust",
   "Stunt",
   "Tanker", //petro
   "RoadTrain",
   "Nebula",
   "Majestic",
   "Buccaneer",
   "Shamal",
   "Hydra",
   "FCR-900",
   "NRG-500",
   "HPV1000",
   "Cement Truck",
   "Tow Truck",
   "Fortune",
   "Cadrona",
   "FBI Truck",
   "Willard",
   "Forklift",
   "Tractor",
   "Combine",
   "Feltzer",
   "Remington",
   "Slamvan",
   "Blade",
   "Freight",
   "Streak",
   "Vortex",
   "Vincent",
   "Bullet",
   "Clover",
   "Sadler",
   "Firetruck", //firela
   "Hustler",
   "Intruder",
   "Primo",
   "Cargobob",
   "Tampa",
   "Sunrise",
   "Merit",
   "Utility",
   "Nevada",
   "Yosemite",
   "Windsor",
   "Monster", //monstera
   "Monster", //monsterb
   "Uranus",
   "Jester",
   "Sultan",
   "Stratum",
   "Elegy",
   "Raindance",
   "RC Tiger",
   "Flash",
   "Tahoma",
   "Savanna",
   "Bandito",
   "Freight", //freiflat
   "Trailer", //streakc
   "Kart",
   "Mower",
   "Duneride",
   "Sweeper",
   "Broadway",
   "Tornado",
   "AT-400",
   "DFT-30",
   "Huntley",
   "Stafford",
   "BF-400",
   "Newsvan",
   "Tug",
   "Trailer", //petrotr
   "Emperor",
   "Wayfarer",
   "Euros",
   "Hotdog",
   "Club",
   "Trailer", //freibox
   "Trailer", //artict3
   "Andromada",
   "Dodo",
   "RC Cam",
   "Launch",
   "PMESP",//PMERJ
   "SFPD",//SFPD
   "LVPD",//LVPD
   "Police Ranger",
   "Picador",
   "S.W.A.T. Van",
   "Alpha",
   "Phoenix",
   "Glendale",
   "Sadler",
   "Luggage Trailer", //bagboxa
   "Luggage Trailer", //bagboxb
   "Stair Trailer", //tugstair
   "Boxville",
   "Farm Plow", //farmtr1
   "Utility Trailer", //utiltr1
   "Invalid Vehicle" //just to return if the modelid is invalid
};
//==============================================================================
//                              SISTEMA DE TROCA DE INTERIOR
//==============================================================================
new Float:TrocaDeInt_Coordenadas[26][9] = {
// X, Y, Z, SetPlayerCameraPos, SetPlayerCameraLookAt
{-2632.1641, 2364.0808, 821.1141, -2632.4727, 2360.1079, 823.5337, -2631.7937, 2360.8403, 823.2591}, // 0
{-2600.1455, 2352.0681, 821.3137, -2599.9082, 2350.1135, 824.0304, -2599.1448, 2350.7554, 823.7205}, // 1
{-2622.0054, 2334.9690, 822.1961, -2632.2283, 2321.6655, 825.3188, -2631.5779, 2322.4221, 825.0591}, // 2
{-2659.4983, 2365.9063, 821.1164, -2659.7654, 2362.3733, 824.2020, -2660.6836, 2362.7725, 823.9528}, // 3
{-2665.1130, 2331.4731, 822.7136, -2667.1536, 2317.7891, 849.4512, -2666.9912, 2318.7739, 847.3561}, // 4
{-2667.6387, 2284.2529, 822.0639, -2670.5737, 2299.5132, 825.0255, -2669.8496, 2298.8247, 824.8052}, // 5
{-2698.6301, 2284.5818, 816.6094, -2701.9380, 2289.2615, 823.8846, -2701.0225, 2288.8545, 823.3107}, // 6
{-2694.7510, 2334.7014, 821.5335, -2702.9277, 2329.7571, 823.6016, -2702.3447, 2330.5571, 823.3725}, // 7
{-2699.7207, 2374.9709, 822.4756, -2699.4937, 2376.0020, 825.1036, -2700.4600, 2375.7537, 824.8492}, // 8
{-2695.4116, 2390.7275, 821.7936, -2699.6621, 2399.7991, 823.7775, -2698.8604, 2399.2073, 823.5732}, // 9
{-2676.2278, 2428.6511, 823.5406, -2679.1914, 2429.0959, 825.3596, -2678.3635, 2429.6572, 825.1405}, // 10
{-2660.1392, 2397.9404, 821.4902, -2667.3826, 2397.0168, 823.9160, -2666.5195, 2397.5215, 823.7167}, // 11
{-2628.7571, 2395.4663, 821.7930, -2627.6086, 2412.2397, 823.3640, -2627.8921, 2411.2830, 823.1990}, // 12
{-2592.1885, 2398.2695, 821.4801, -2592.2627, 2407.8613, 823.4467, -2592.1030, 2406.8752, 823.1671}, // 13
{-2597.3855, 2426.4773, 821.8748, -2594.5813, 2437.7700, 823.6810, -2595.1768, 2436.9661, 823.5067}, // 14
{-2620.7158, 2447.4949, 821.7725, -2634.4575, 2448.2388, 823.1904, -2633.5134, 2447.9109, 823.0004}, // 15
{-2651.2485, 2454.6523, 821.6683, -2661.7102, 2456.0503, 823.5336, -2660.7590, 2455.7441, 823.2738}, // 16
{-2706.7031, 2445.6482, 821.4396, -2705.8340, 2466.4912, 823.5756, -2705.8821, 2465.4924, 823.4212}, // 17
{-2718.7007, 2414.4495, 821.3423, -2717.8218, 2435.9099, 823.5691, -2717.9219, 2434.9170, 823.4608}, // 18
{-2766.6028, 2418.8728, 818.7828, -2767.6135, 2436.1455, 821.5051, -2766.9583, 2435.3955, 821.4351}, // 19
{-2746.6106, 2373.4556, 819.7089, -2744.3647, 2374.4783, 821.5710, -2744.6282, 2375.4412, 821.4359}, // 20
{-2742.9319, 2328.8184, 819.1420, -2746.7827, 2345.4973, 821.2327, -2746.6116, 2344.5146, 821.0934}, // 21
{-2738.2229, 2278.6963, 821.2982, -2738.5129, 2293.4324, 822.6985, -2738.5166, 2292.4351, 822.5751}, // 22
{-2785.4290, 2282.9329, 821.6121, -2783.5139, 2294.0322, 823.1035, -2783.6699, 2293.0425, 823.0238}, // 23
{2288.0500, -1161.2000, 1068.0500, 2288.0601, -1162.2000, 1058.4000, 2288.4634,-1166.8131,1050.8984},// 24
{495.7541, 492.7330, 1884.1791, 502.8339, 484.4307, 1886.3436, 502.4439, 485.3502, 1886.0856} // 25
};

//==============================================================================
//                              BLACK JACK
//==============================================================================

//==============================================================================
//                              POKER SYSTEM
//==============================================================================
#define STR_VERSION "CP:RPP v1.7 Version"

#define COLOR_GOLD										0xFFCC00AA

#define DIALOG_CGAMESADMINMENU                          32100
#define DIALOG_CGAMESSELECTPOKER                        32101
#define DIALOG_CGAMESSETUPPOKER                         32102
#define DIALOG_CGAMESCREDITS                            32103
#define DIALOG_CGAMESSETUPPGAME                         32104
#define DIALOG_CGAMESSETUPPGAME2                        32105
#define DIALOG_CGAMESSETUPPGAME3                        32106
#define DIALOG_CGAMESSETUPPGAME4                        32107
#define DIALOG_CGAMESSETUPPGAME5                        32108
#define DIALOG_CGAMESSETUPPGAME6                        32109
#define DIALOG_CGAMESSETUPPGAME7                        32110
#define DIALOG_CGAMESBUYINPOKER                         32111
#define DIALOG_CGAMESCALLPOKER                          32112
#define DIALOG_CGAMESRAISEPOKER                         32113

#define OBJ_POKER_TABLE									19474
#define GUI_POKER_TABLE                                	0

#define MAX_POKERTABLES									100
#define MAX_POKERTABLEMISCOBJS                          6
#define MAX_PLAYERPOKERUI								48
#define DRAWDISTANCE_POKER_TABLE                        300.0
#define DRAWDISTANCE_POKER_MISC                         3.0
#define CAMERA_POKER_INTERPOLATE_SPEED          		5000 // ms (longer = slower)

#define IsNull(%1) \
((!(%1[0])) || (((%1[0]) == '\1') && (!(%1[1]))))

new PlayerText:PlayerPokerUI[MAX_PLAYERS][MAX_PLAYERPOKERUI];

enum pkrInfo
{
        pkrActive,
        pkrPlaced,
        pkrObjectID,
        pkrMiscObjectID[MAX_POKERTABLEMISCOBJS],
        Text3D:pkrText3DID,
        Float:pkrX,
        Float:pkrY,
        Float:pkrZ,
        Float:pkrRX,
        Float:pkrRY,
        Float:pkrRZ,
        pkrVW,
        pkrInt,
        pkrPlayers,
        pkrActivePlayers,
        pkrActiveHands,
        pkrSlot[6],
        pkrPass[32],
        pkrLimit,
        pkrPulseTimer,
        pkrBuyInMax,
        pkrBuyInMin,
        pkrBlind,
        pkrTinkerLiveTime,
        pkrDelay,
        pkrSetDelay,
        pkrPos,
        pkrRotations,
        pkrSlotRotations,
        pkrActivePlayerID,
        pkrActivePlayerSlot,
        pkrRound,
        pkrStage,
        pkrActiveBet,
        pkrDeck[54],
        pkrCCards[5],
        pkrPot,
        pkrWinners,
        pkrWinnerID,
};
new PokerTable[MAX_POKERTABLES][pkrInfo];

/*new Float:PokerTableMiscObjOffsets[MAX_POKERTABLEMISCOBJS][6] = {
{-1.25, 0.470, 0.1, 0.0, 0.0, 180.0}, // (Slot 1)
{-1.25, -0.470, 0.1, 0.0, 0.0, 180.0}, // (Slot 2)
{-0.01, -1.85, 0.1, 0.0, 0.0, -90.0}, // (Slot 3)
{1.25, -0.470, 0.1, 0.0, 0.0, 0.0}, // (Slot 4)
{1.25, 0.470, 0.1, 0.0, 0.0, 0.0}, // (Slot 5)
{0.01, 1.85, 0.1, 0.0, 0.0, 90.0}  // (Slot 6)
};*/

new Float:PokerTableMiscObjOffsets[MAX_POKERTABLEMISCOBJS][6] = {
{-1.25, -0.470, 0.1, 0.0, 0.0, 180.0}, // (Slot 2)
{-1.25, 0.470, 0.1, 0.0, 0.0, 180.0}, // (Slot 1)
{0.01, 1.85, 0.1, 0.0, 0.0, 90.0},  // (Slot 6)
{1.25, 0.470, 0.1, 0.0, 0.0, 0.0}, // (Slot 5)
{1.25, -0.470, 0.1, 0.0, 0.0, 0.0}, // (Slot 4)
{-0.01, -1.85, 0.1, 0.0, 0.0, -90.0} // (Slot 3)
};

new DeckTextdrw[53][] = {
"LD_CARD:cdback", // CARD BACK
"LD_CARD:cd1c", // A Clubs - 0
"LD_CARD:cd2c", // 2 Clubs - 1
"LD_CARD:cd3c", // 3 Clubs - 2
"LD_CARD:cd4c", // 4 Clubs - 3
"LD_CARD:cd5c", // 5 Clubs - 4
"LD_CARD:cd6c", // 6 Clubs - 5
"LD_CARD:cd7c", // 7 Clubs - 6
"LD_CARD:cd8c", // 8 Clubs - 7
"LD_CARD:cd9c", // 9 Clubs - 8
"LD_CARD:cd10c", // 10 Clubs - 9
"LD_CARD:cd11c", // J Clubs - 10
"LD_CARD:cd12c", // Q Clubs - 11
"LD_CARD:cd13c", // K Clubs - 12
"LD_CARD:cd1d", // A Diamonds - 13
"LD_CARD:cd2d", // 2 Diamonds - 14
"LD_CARD:cd3d", // 3 Diamonds - 15
"LD_CARD:cd4d", // 4 Diamonds - 16
"LD_CARD:cd5d", // 5 Diamonds - 17
"LD_CARD:cd6d", // 6 Diamonds - 18
"LD_CARD:cd7d", // 7 Diamonds - 19
"LD_CARD:cd8d", // 8 Diamonds - 20
"LD_CARD:cd9d", // 9 Diamonds - 21
"LD_CARD:cd10d", // 10 Diamonds - 22
"LD_CARD:cd11d", // J Diamonds - 23
"LD_CARD:cd12d", // Q Diamonds - 24
"LD_CARD:cd13d", // K Diamonds - 25
"LD_CARD:cd1h", // A Heats - 26
"LD_CARD:cd2h", // 2 Heats - 27
"LD_CARD:cd3h", // 3 Heats - 28
"LD_CARD:cd4h", // 4 Heats - 29
"LD_CARD:cd5h", // 5 Heats - 30
"LD_CARD:cd6h", // 6 Heats - 31
"LD_CARD:cd7h", // 7 Heats - 32
"LD_CARD:cd8h", // 8 Heats - 33
"LD_CARD:cd9h", // 9 Heats - 34
"LD_CARD:cd10h", // 10 Heats - 35
"LD_CARD:cd11h", // J Heats - 36
"LD_CARD:cd12h", // Q Heats - 37
"LD_CARD:cd13h", // K Heats - 38
"LD_CARD:cd1s", // A Spades - 39
"LD_CARD:cd2s", // 2 Spades - 40
"LD_CARD:cd3s", // 3 Spades - 41
"LD_CARD:cd4s", // 4 Spades - 42
"LD_CARD:cd5s", // 5 Spades - 43
"LD_CARD:cd6s", // 6 Spades - 44
"LD_CARD:cd7s", // 7 Spades - 45
"LD_CARD:cd8s", // 8 Spades - 46
"LD_CARD:cd9s", // 9 Spades - 47
"LD_CARD:cd10s", // 10 Spades - 48
"LD_CARD:cd11s", // J Spades - 49
"LD_CARD:cd12s", // Q Spades - 50
"LD_CARD:cd13s" // K Spades - 51
};
//==============================================================================
//              SISTEMA DE CAMINHONEIRO | CAMINHAOSYST
//==============================================================================
#define MAX_GAS_PUMPS   100
enum pumpData {
	pumpID,
	pumpExists,
	pumpBusiness,
	Float:pumpPos[4],
	pumpFuel,
	pumpObject,
	Text3D:pumpText3D
};
new PumpData[MAX_GAS_PUMPS][pumpData];

StopRefilling(playerid)
{
    PlayerInfo[playerid][pGasPump] = -1;
    PlayerInfo[playerid][pGasStation] = -1;
   	PlayerInfo[playerid][pRefill] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pRefillPrice] = 0;
}

//==== [ Define's - Navio ]
#define MAX_OBJ_PER_VEHICLE 	120
//==== [#defines - Caixas / Emprego]
#define MAX_CAIXAS  2000 //Máximo de caixas no servidor todo.
#define MAX_EMPCARGA 200

#define DIALOG_CARGA1   98
#define DIALOG_CARGA2   99

//==== [ New's ]
new StringBarco[256],
	PontoDeVenda[20],
	Text3D:TextPontoDeVenda[20],
	AttachingObjects[MAX_PLAYERS],
	AttachedObjects[MAX_VEHICLES][MAX_OBJ_PER_VEHICLE],
	VendoTPDA[MAX_PLAYERS][50],
	VendoMDCP[MAX_PLAYERS][50],
	PortoStatus = 1;

//Caixas
enum caixasData
{
	cID,
	cTipo,
	cObj,
	Float:cPosX,
	Float:cPosY,
	Float:cPosZ,
	Text3D:TextTipo
}
new CaixaInfo[MAX_CAIXAS][caixasData];

enum cDataPM
{
	cID,
	cSlot[101],
	cGasolina
}
new CargaInfo[MAX_VEHICLES][cDataPM];

enum PentData {
	emID,
	emExiste,
	emTipo, // 1 - Primaria // 2 - Secundária // 3 - Especial
	emStatus, // 0 - Fechada // 1 - Aberta
	emNome[64],
	emCompra, //Tipo de produto que a empresa compra ( Tipo de Caixa )
	emFabrica, // Tipo de Produto que a empresa Vende ( Tipo de Caixa )
	Float:emX,
	Float:emY,
	Float:emZ,
	emEmpresa, // Empresa do Sistema de empresas que vai ganhar os produtos que foram entregues
	emStock,
	emCobraProd, // Quantia cobrada por caixa vendida
	emPagProd, // Quantia paga por caixa vendida
	emStockMax,
	emProdHora, // Quantidade de Caixa produzida por hora
	emConsHora, // Quantidade de Caixa consumida por hora
	emStockC,
	emStockMaxC,
	Text3D:emLabel,
	emPickup,
	emIndustria,
	emIndustriaC
}
new PontoEntrega[MAX_EMPCARGA][PentData];
/*

Tipos de Produtos:


1 - Alimentos
2 - Frutas   	-> Bebida
3 - Gasolina
4 - Ovos        -> Alimentos
5 - Carne      	-> Alimentos
6 - Leite       -> Alimentos
7 - Algodão     -> Roupas
8 - Roupas
9 - Troncos de Madeira  -> Moveis
10 - Bebidas
11 - Itens Diversos
12 - Formas de Aço
13 - Armas
14 - Transformador
15 - Veículos

20 - Corante
21 - Póvora

30 - Moedas

55 - Carcaça
56 - Prensado


====== [ Secundárias ]
*/

stock GetCargaTipo(tipo)
{
    switch(tipo)
	{
		case 1: format(StringBarco,sizeof(StringBarco), "[Alimentos]");
   		case 2: format(StringBarco,sizeof(StringBarco), "[Frutas]");
   		case 3: format(StringBarco,sizeof(StringBarco), "[Gasolina]");
   		case 4: format(StringBarco,sizeof(StringBarco), "[Ovos]");
   		case 5: format(StringBarco,sizeof(StringBarco), "[Carne]");
   		case 6: format(StringBarco,sizeof(StringBarco), "[Leite]");
   		case 7: format(StringBarco,sizeof(StringBarco), "[Algodão]");
   		case 8: format(StringBarco,sizeof(StringBarco), "[Roupas]");
   		case 10: format(StringBarco,sizeof(StringBarco), "[Bebidas]");
   		case 11: format(StringBarco,sizeof(StringBarco), "[Itens Diversos]");
   		case 12: format(StringBarco,sizeof(StringBarco), "[Formas de Aço]");
   		case 13: format(StringBarco,sizeof(StringBarco), "[Armas]");
   		case 14: format(StringBarco,sizeof(StringBarco), "[Transformador]");
   		case 15: format(StringBarco,sizeof(StringBarco), "[Veiculos]");

   		case 20: format(StringBarco,sizeof(StringBarco), "[Corante]");
   		case 21: format(StringBarco,sizeof(StringBarco), "[Póvora]");
   		case 30: format(StringBarco,sizeof(StringBarco), "[Moedas]");
    	case 56: format(StringBarco,sizeof(StringBarco), "[Veiculo Prensado]");
   		default: format(StringBarco,sizeof(StringBarco), "ERRO");
	}
	return StringBarco;
}
stock GetCaixaTipo(tipo)
{
    switch(tipo)
	{
		case 1: format(StringBarco,sizeof(StringBarco), "Caixa de Alimentos");
   		case 2: format(StringBarco,sizeof(StringBarco), "Caixa de Frutas");
   		case 4: format(StringBarco,sizeof(StringBarco), "Caixa de Ovos");
   		case 5: format(StringBarco,sizeof(StringBarco), "Caixa de Carne");
   		case 6: format(StringBarco,sizeof(StringBarco), "Caixa de Leite");
   		case 7: format(StringBarco,sizeof(StringBarco), "Caixa de Algodão");
   		case 8: format(StringBarco,sizeof(StringBarco), "Caixa de Roupas");
   		case 10: format(StringBarco,sizeof(StringBarco), "Caixa de Bebidas");
   		case 11: format(StringBarco,sizeof(StringBarco), "Caixa de Itens Diversos");
   		case 12: format(StringBarco,sizeof(StringBarco), "Caixa de Formas de Aço");
   		case 13: format(StringBarco,sizeof(StringBarco), "Caixa de Armas");
   		case 14: format(StringBarco,sizeof(StringBarco), "Transformador");
   		case 15: format(StringBarco,sizeof(StringBarco), "Veiculos");

   		case 20: format(StringBarco,sizeof(StringBarco), "Caixa de Corantes");
   		case 21: format(StringBarco,sizeof(StringBarco), "Caixa de Póvora");

   		case 30: format(StringBarco,sizeof(StringBarco), "Caixa de Moedas");

   		case 56: format(StringBarco,sizeof(StringBarco), "Veiculo Prensado");
   		default: format(StringBarco,sizeof(StringBarco), "Slot Vazio");
	}
	return StringBarco;
}

stock GetProdutoNome(empid){

	new stringTipo1[24];
    switch(empid)
	{
		case 1: format(stringTipo1,sizeof(stringTipo1), "Alimentos\t\t");
		case 2: format(stringTipo1,sizeof(stringTipo1), "Frutas\t\t\t");
		case 3: format(stringTipo1,sizeof(stringTipo1), "Gasolina\t\t");
		case 4: format(stringTipo1,sizeof(stringTipo1), "Ovos\t\t\t");
		case 5: format(stringTipo1,sizeof(stringTipo1), "Carne\t\t\t");
		case 6: format(stringTipo1,sizeof(stringTipo1), "Leite\t\t\t");
		case 7: format(stringTipo1,sizeof(stringTipo1), "Algodão\t\t");
		case 8: format(stringTipo1,sizeof(stringTipo1), "Roupas\t\t");
		case 10: format(stringTipo1,sizeof(stringTipo1), "Bebidas\t\t");
		case 11: format(stringTipo1,sizeof(stringTipo1), "Itens Diversos\t");
		case 12: format(stringTipo1,sizeof(stringTipo1), "Formas de Aço\t");
		case 13: format(stringTipo1,sizeof(stringTipo1), "Arma\t\t\t");
		case 14: format(stringTipo1,sizeof(stringTipo1), "Transformador\t");
		case 15: format(stringTipo1,sizeof(stringTipo1), "Veículo\t\t");
		case 20: format(stringTipo1,sizeof(stringTipo1), "Corantes\t\t");
		case 21: format(stringTipo1,sizeof(stringTipo1), "Póvora\t\t\t");
		case 30: format(stringTipo1,sizeof(stringTipo1), "Moedas\t\t");
		case 55: format(stringTipo1,sizeof(stringTipo1), "Carcaça\t\t");
		case 56: format(stringTipo1,sizeof(stringTipo1), "Veículo Prensado\t");
		default: format(stringTipo1,sizeof(stringTipo1), "NADA\t\t");
	}
	return stringTipo1;
}
//==============================================================================
static const gSAZones[][SAZONE_MAIN] = {  // Majority of names and area coordinates adopted from Mabako's 'Zones Script' v0.2	//	NAME                            AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield Section",          {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield Section",          {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield Section",          {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield Section",          {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"US Marine Corps",         {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"US Marine Corps",         {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"Castillo del Diablo",         {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"Castillo del Diablo",         {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"Castillo del Diablo",         {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"KACC Military Fuels",         {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"LS International",            {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"LS International",            {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"LS International",            {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"LS International",            {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"LS International",            {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"LS International",            {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery Section",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery Section",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
	{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
	{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
	{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
	{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
	{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
	{"Mulholland Section",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
	{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
	{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
	{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
	{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
	{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
	{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
	{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
	{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
	{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
	{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
	{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
	{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
	{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
	{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
	{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
	{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
	{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
	{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
	{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
	{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
	{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
	{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
	{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
	{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
	{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
	{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
	{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
	{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
	{"Randolph Ind. Estate",        {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
	{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
	{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
	{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
	{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
	{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
	{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
	{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
	{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
	{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
	{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
	{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
	{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
	{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
	{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
	{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
	{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
	{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada Section",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"Four Dragons Casino",         {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Main Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};
//==============================================================================
new ComplexoDialogNames[13][] =
{
    "Complexo 1 - Luxo",
    "Complexo 2 - Gueto",
    "Complexo 3 - Classe Média",
    "Complexo 4",
    "Complexo 5",
    "Complexo 6",
    "Complexo 7",
    "Complexo 8",
    "Complexo 9",
    "Complexo 10 - Chique",
    "Complexo 11 - CA By Paulo",
    "",
    ""
};

new Float:ComplexoDialogData[13][4] =
{
    {1331.2612, -1060.4828, 3359.1062, 0.0},//
    {2568.3979, -1670.5448, 1002.1602, 0.0},//
    {618.6927, 837.7122, 1021.0855, 0.0},//
    {2378.3464, -1257.7424, 1042.6548, 0.0},//
    {1073.3221, 2139.2131, 13.1882, 0.0}, //
    {2008.8798, -1591.6805, 713.1729, 0.0}, //
    {1699.6060, -1610.4526, 521.3545, 0.0}, //
    {-72.8666, 974.8179, 1715.7444, 0.0}, //
    {2282.6492, 70.0543, 551.5721, 0.0},
    {1172.1969, -240.2761, 1127.2876, 0.0},
    {1401.3379, -17.5763, 1000.9980, 0.0},
    {0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0}
};
new InteriorDialogComplexo[13][1] =
{
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
	{1},
	{1},
	{1},
	{1},
	{1},
    {1},
    {1}
};

stock ShowInterioresDialog(playerid)
{
    new dialog_string[2600];
    for(new i = 0; i < sizeof(ComplexoDialogNames); i++)
	{
        if(!i)
		{
            format(dialog_string, sizeof(dialog_string), ComplexoDialogNames[i]);
        }
        else
		{
            format(dialog_string, sizeof(dialog_string), "%s\n%s", dialog_string, ComplexoDialogNames[i]);
        }
    }
    return ShowPlayerDialog(playerid, DIALOG_COMPLEXO_MENU, DIALOG_STYLE_LIST, "Interiores", dialog_string, "Select", "Cancel");
}
//==============================================================================
new EmpresaDialogNames[24][] =
{
    "Banco",
    "Prefeitura",
    "Barzinho 1",
    "Vestiario",
    "Barzinho 2",
    "Barzinho 3",
    "Sony Shop",
    "Bar MotoClub",
    "Loja de Eletronicos",
    "Lavanderia",
    "Hospital",
	"Tattuadora - MOBILIADA",
	"Barbearia	- MOBILIADA",
	"Agencia De Empregos",
	"Igreja",
	"CluckinBell - Pequeno",
	"Box Local",
	"Prefeitura",
	"Fight Room",
	"StripClub",
	"Fundo verde",
	"Caixa Economica",
	"Lavagem dinheiro",
	"Loja de peças"
};

new Float:EmpresaDialogData[24][4] =
{
    {1409.53857, 1316.47266, 1501.04822, 0.0}, 		// Banco
    {1461.6343, -1726.4952, 1051.3344, 0.0}, 		// Prefeitura
    {926.2477, 639.0723, 2399.1499, 0.0}, 			// Barzinho
    {-297.7795, 1441.8667, 1088.2208, 0.0}, 		// Vestiario
    {-452.1363, -285.7151, 4022.9924, 0.0}, 		// Barzinho 2
    {164.83, 1748.34, 615.63, 0.0}, 				// Bar 3
    {-2285.7458, -156.7833, 3346.9490, 0.0},        // Sony Shop
    {490.2410, 636.3953, 1020.8666,0.0},            // MotoClub Bar
    {1005.0934, 52.0730, 54.5856,0.0},              // Loja de Eletronicos
    {1834.1338, 1804.9091, 614.5231,0.0},           // Lavanderia
    {169.078, 2794.769, 766.749,0.0},          // Hospital 
    {2639.5457, 638.7292, 616.6067,0.0}, 		// Tatuadora
    {2674.7686, 639.5853, 614.4777,0.0},        // Barbearia
    {1415.1191, -1576.1100, 19.3596,0.0},        // Agencia de Empregos
    {-2027.9401, 1019.1985, 1417.9236, 0.0},     //Igreja
    {2423.1428,-1496.6943,-52.8550, 0.0},        //Cluckint
    {2302.2561, -1647.8159, -97.3755, 0.0},     // Box Local
    {-500.8079, 293.8986, 2000.7140, 0.0},     // Prefeitura
    {2001.6118, 1105.6027, 331.0500, 0.0},     // FightRoom
    {1973.7617, 1342.8131, 246.5860, 0.0},     // StripClub_New
	{1392.7712,-13.4471,1000.9965, 0.0},		//fundo verde
	{1406.1774,-5.3591,1003.9926, 0.0},		//banco
	{1392.7712,-13.4471,1000.9965, 0.0},		//lavagem dinheiro
	{1411.8286,2.7863,1000.9764, 0.0}		//loja peças
};
new InteriorDialogEmpresa[21][1] =
{
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
	{1},
	{1},
	{1},
	{1},
	{1},
    {1},
	{1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
	{1}
};

stock ShowEmpInterioresDialog(playerid)
{
    new dialog_string[2600];
    for(new i = 0; i < sizeof(EmpresaDialogNames); i++) {
        if(!i) {
            format(dialog_string, sizeof(dialog_string), EmpresaDialogNames[i]);
        }
        else {
            format(dialog_string, sizeof(dialog_string), "%s\n%s", dialog_string, EmpresaDialogNames[i]);
        }
    }
    return ShowPlayerDialog(playerid, DIALOG_EMPRESAS_MENU, DIALOG_STYLE_LIST, "Interiores", dialog_string, "Select", "Cancel");
}


ShowAparencia(playerid, targetid)
{
    new
	    peso[24],
	    altura[32],
	    etnia[128],
		olhos[32],
		cabelo[32],
  		str3[64];

	switch (PlayerInfo[targetid][pAltura])
 	{
 	    case 0: { altura = "N/A";}
		case 1: { altura = "1,10m";}
		case 2: { altura = "1,20m";}
		case 3: { altura = "1,25m";}
		case 4: { altura = "1,30m";}
		case 5: { altura = "1,35m";}
		case 6: { altura = "1,40m";}
		case 7: { altura = "1,45m";}
		case 8: { altura = "1,50m";}
		case 9: { altura = "1,55m";}
		case 10: { altura = "1,60m";}
		case 11: { altura = "1,65m";}
		case 12: { altura = "1,70m";}
		case 13: { altura = "1,75m";}
		case 14: { altura = "1,80m";}
		case 15: { altura = "1,85m";}
		case 16: { altura = "1,90m";}
		case 17: { altura = "1,95m";}
		case 18: { altura = "2,00m";}
		case 19: { altura = "2,10m";}
 	}
 	switch (PlayerInfo[targetid][pPeso])
 	{
 	    case 0: { peso = "N/A";}
		case 1: { peso = "50kg";}
		case 2: { peso = "60kg";}
		case 3: { peso = "70kg";}
		case 4: { peso = "90kg";}
		case 5: { peso = "100kg";}
		case 6: { peso = "110kg";}
		case 7: { peso = "120kg";}
		case 8: { peso = "130kg";}
		case 9: { peso = "140kg";}
		case 10: { peso = "150kg";}
 	}
 	switch (PlayerInfo[targetid][pEtnia])
 	{
 	    case 0: { etnia = "N/A";}
		case 1: { etnia = "Caucasiano";}
		case 2: { etnia = "Negro";}
		case 3: { etnia = "Asiático";}
		case 4: { etnia = "Hispânico";}
		case 5: { etnia = "Mediterrâneo";}
		case 6: { etnia = "Desconhecida";}
 	}
 	switch (PlayerInfo[targetid][pOlhos])
 	{
 	    case 0: { olhos = "N/A";}
		case 1: { olhos = "Castanhos-claro";}
		case 2: { olhos = "Castanhos-escuro";}
		case 3: { olhos = "Azuis";}
		case 4: { olhos = "Verdes";}
 	}
	switch (PlayerInfo[targetid][pCabelo])
 	{
 	    case 0: { cabelo = "N/A";}
		case 1: { cabelo = "Preto";}
		case 2: { cabelo = "Branco";}
		case 3: { cabelo = "Grisalho";}
		case 4: { cabelo = "Loiro";}
		case 5: { cabelo = "Afro";}
		case 6: { cabelo = "Careca";}
 	}

	format(str3, sizeof(str3), "Altura: %s",altura);
	SendClientMessage(playerid, COLOR_WHITE, str3);
	format(str3, sizeof(str3), "Peso: %s",peso);
	SendClientMessage(playerid, COLOR_WHITE, str3);
	format(str3, sizeof(str3), "Etnia: %s",etnia);
	SendClientMessage(playerid, COLOR_WHITE, str3);
	format(str3, sizeof(str3), "Olhos: %s",olhos);
	SendClientMessage(playerid, COLOR_WHITE, str3);
	format(str3, sizeof(str3), "Cabelo: %s",cabelo);
	SendClientMessage(playerid, COLOR_WHITE, str3);
	return 1;
}
//==============================================================================
new EmpresaVDialogNames[22][] =
{
    "Escritorio Vazio",
    "Restaurante - Vazio",
    "Bar Idlewood - Vazio",
    "Binco - Vazio",
    "Ammu Nation - Vazia",
    "Ammu Nation 2 Andares - Vazio",
    "Restaurante/Lanchonete - Vazio",
    "Donut Restaurant - Vazio",
    "Binco 2 - Vazia",
    "ProLabs - Vazia",
    "SubUrban - Vazia",
    "Pizzaria Stacked",
    "Donut Restaurant 2",
    "Burger Shot",
    "Alhambra",
    "Victim",
    "Industria",
    "Escritorio Pequeno",
    "Sex Shop",
	"Cassino",
	"Puteiro - Pequeno",
	"Puteiro - Grande"
};

new Float:EmpresaVDialogData[23][4] =
{
    {1983.1492, -1149.8864, 1076.6642,0.0},         // Escritorio Vazio
    {2703.3059, 783.9529, 610.4917,0.0},
    {2645.2715, 789.0724, 613.2525,0.0},
    {2592.4304, 772.7965, 613.0685,0.0},
    {2554.2668, 779.8199, 613.4438,0.0},
    {2564.2876, 811.9368, 611.2873,0.0},
    {2557.3379, 853.6022, 613.6505,0.0},
    {2598.0391, 855.5490, 613.6508,0.0},
    {2639.5029, 822.9683, 615.1712,0.0},
    {2603.0935, 821.6221, 613.5614,0.0},
    {2640.8445, 863.3856, 612.1510,0.0},
    {2685.3237, 863.5480, 613.3163,0.0},
    {2684.0779, 827.1850, 613.3138,0.0},
    {2632.0762, 732.5900, 613.4436,0.0},
    {2583.8196, 740.2671, 615.4417,0.0},
    {2547.8237, 728.0671, 612.4431,0.0},
    {2559.1243, 663.0873, 614.3564,0.0},
    {2600.1655, 637.0085, 616.4742,0.0},
    {2655.2993, 665.8322, 616.2574,0.0},
    {2661.8914, 611.5082, 614.4751,0.0},
    {2622.2505, 611.7969, 614.1364,0.0},
    {2589.0955, 585.0298, 612.5771,0.0},
    {1213.1588, -799.1284,1083.4057, 0.0}
};
new InteriorDialogEmpresaV[23][1] =
{
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
	{1},
	{1},
	{1},
	{1},
	{1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {1}
};

stock ShowEmpVInterioresDialog(playerid)
{
    new dialog_string[2600];
    for(new i = 0; i < sizeof(EmpresaVDialogNames); i++) {
        if(!i) {
            format(dialog_string, sizeof(dialog_string), EmpresaVDialogNames[i]);
        }
        else {
            format(dialog_string, sizeof(dialog_string), "%s\n%s", dialog_string, EmpresaVDialogNames[i]);
        }
    }
    return ShowPlayerDialog(playerid, DIALOG_EMPRESASV_MENU, DIALOG_STYLE_LIST, "Interiores Vazios", dialog_string, "Select", "Cancel");
}
//==============================================================================
new HouseDialogNames[13][] =
{
    "Apartamento [Luxo]",
    "Apartamento 2 [Luxo]",
    "Apartamento 3 [Luxo]",
    "Main 1",
    "Main 2",
    "Biblioteca",
    "Enfermaria",
    "Sala de Aula",
    "Presidio - 1",
    "NADA",
    "Caravan",
    "NADA",
    "NADA"
};

new Float:HouseDialogData[13][4] =
{
    {1699.5927, -1424.9175, 36.5657, 0.0}, 			//Apartamento
    {-1817.0074, 825.8862, 127.2960, 0.0}, 			// Apartamento 2
    {851.3640100,1991.1080300,1013.4790000, 0.0}, 	// Apartamento 3
    {1783.6355, -1340.8993, 3529.8076, 0.0}, 		// Main
    {1801.9773, -1381.4071, 6532.2888, 0.0}, 		// Main 2
    {1843.7408, -1446.2926, 566.6570, 0.0}, 		// Biblioteca
    {-2801.8401, -2505.0554, 1500.5603, 0.0}, 		// Enfermaria
    {1764.5349, -1377.0894, 1923.0090, 0.0}, 		// Sala de Aula
    {1793.7739, -1578.1603, 539.1032, 0.0}, 		// Presidio
    {0.0, 0.0, 0.0, 0.0},        //
    {2513.1809, -1729.2502, 778.6371, 0.0},        	// Caravan
    {-699.1899,-7450.6929,37.9266, 0.0},            //
    {0.0, 0.0, 0.0, 0.0}            //
};
new InteriorDialogHouse[13][1] =
{
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {0},
    {0}
};

stock ShowHouseInterioresDialog(playerid)
{
    new dialog_string[2600];
    for(new i = 0; i < sizeof(HouseDialogNames); i++) {
        if(!i) {
            format(dialog_string, sizeof(dialog_string), HouseDialogNames[i]);
        }
        else {
            format(dialog_string, sizeof(dialog_string), "%s\n%s", dialog_string, HouseDialogNames[i]);
        }
    }
    return ShowPlayerDialog(playerid, DIALOG_CASAS_MENU, DIALOG_STYLE_LIST, "Interiores", dialog_string, "SeleCIONAR", "CancelAR");
}
///==============================================================================
new CasasIntDialogNames[50][] =
{
    "1 - 1 Andar Simples #1", 
    "2 - 1 Andar Simples #2",
    "3 - 1 Andar Simples #3",
    "4 - 1 Andar Simples #4",
    "5 - 1 Andar Simples #5",
    "6 - 1 Andar Simples #6",
    "7 - 1 Andar Simples #7",
    "8 - 1 Andar Simples #8",
    "9 - 1 Andar Simples #9",
    "10 - 1 Andar Simples #10",
    "11 - 1 Andar Simples #11",
    "12 - 1 Andar Simples #12",
    "13 - 1 Andar Simples #13",
    "14 - 1 Andar Simples #14",
    "15 - 1 Andar Simples #15",
    "16 - 1 Andar Simples #16",
    "17 - 1 Andar Luxo #1",
    "18 - 1 Andar Luxo #2",
    "19 - 1 Andar Luxo #3",
    "20 - 1 Andar Apartamento #1",
    "21 - 1 Andar Apartamento #2",
    "22 - 1 Andar Apartamento #3",
	"23 - 1 Andar Apartamento #4",
	"24 - 1 Andar Apartamento #5",
	"25 - 1 Andar Apartamento #6",
	"26 - 1 Andar Apartamento #7",
	"27 - 1 Andar Apartamento #8",
	"28 - 1 Andar Apartamento #9",
	"29 - 1 Andar Apartamento #10",
	"30 - 1 Andar Apartamento #11",
	"31 - 2 Andar Simples #1",
	"32 - 2 Andar Simples #2",
	"33 - 2 Andar Simples #3",
	"34 - 2 Andar Luxo #",
	"35 - 2 Andar Luxo #",
	"36 - 2 Andar Luxo #",
	"37 - 2 Andar Luxo #",
	"38 - 2 Andar Luxo #",
	"39 - 2 Andar Luxo #",
	"40 - 2 Andar Luxo #",
	"41 - Mansão",
	"42 - LIVRE",
	"43 - LIVRE",
	"44 - LIVRE",
	"45 - LIVRE",
	"46 - LIVRE",
	"47 - LIVRE",
	"48 - LIVRE",
	"49 - LIVRE",
	"50 - LIVRE"
};

new Float:CasasIntDialogData[50][4] =
{
    {225.5707, 1240.0643, 1082.1406, 0.0}, //1
	{239.2819, 1114.1991, 1080.9922, 0.0}, //2
	{446.626, 1397.738, 1084.3047, 0.0}, //3
	{295.1391, 1473.3719, 1080.2578, 0.0}, //4
	{261.1165, 1287.2197, 1080.2578, 0.0}, //5
	{-262.1759, 1456.6158, 1084.3672, 0.0}, //6
	{140.3679, 1367.8837, 1083.8621, 0.0}, //7
	{-68.5145, 1353.8485, 1080.2109, 0.0}, //8
	{-285.2511, 1471.197, 1084.375, 0.0}, //9
	{-42.5267, 1408.23, 1084.4297, 0.0}, //10
	{84.9244, 1324.2983, 1083.8594, 0.0}, //11
    {260.7421, 1238.2261, 1084.2578, 0.0}, //12
	{2319.1272, -1023.9562, 1050.2109, 0.0}, //13
	{2447.8704, -1704.4509, 1013.5078, 0.0}, //14
	{2527.0176, -1679.2076, 1015.4986, 0.0}, //15
	{2350.1597, -1181.0658, 1027.9766, 0.0}, //16
	{2365.1089, -1133.0795, 1050.875, 0.0}, //17
	{1211.2484, 1049.0234, 359.941, 0.0}, //18
	{2182.2017, 1628.5848, 1043.8723, 0.0}, //19
	{224.288, 1289.1907, 1082.1406, 0.0}, //20
	{1.1853, -3.2387, 999.4284, 0.0}, //21
	{419.8936, 2537.1155, 10.0, 0.0}, //22
    {2216.1282, -1076.3052, 1050.4844, 0.0}, //23
	{2283.3118, 1139.307, 1050.8984, 0.0}, //24
	{2233.6919, -1112.8107, 1050.8828, 0.0}, //25
	{2261.0977, -1137.8833, 1050.6328, 0.0}, //26
	{245.2307, 304.7632, 999.1484, 0.0}, //27
	{269.6405, 305.9512, 999.1484, 0.0}, //28
	{1527.0468, -12.0236, 1002.0971, 0.0}, //29
	{1446.3247, 509.9662, 1001.4195, 0.0}, //30
	{2496.0549, -1695.1749, 1014.7422 , 0.0}, //31
	{306.1966, 307.819, 1003.3047 , 0.0}, //32
	{2807.3604, -1171.7048, 1025.5703, 0.0}, //33
    {234.6087, 1187.8195, 1080.2578, 0.0}, //34
	{227.7559, 1114.3844, 1080.9922, 0.0}, //35
	{22.861, 1404.9165, 1084.4297, 0.0}, //36
	{234.2826, 1065.229, 1084.2101, 0.0}, //37
	{24.3769, 1341.1829, 1084.375, 0.0}, //38
	{221.6766, 1142.4962, 1082.6094, 0.0}, //39
	{1267.8407, -776.9587, 1091.9063, 0.0}, //40
	{2323.7063, -1147.6509, 1050.7101, 0.0}, //41
	{2323.7063, -1147.6509, 1050.7101, 0.0}, //42
	{2323.7063, -1147.6509, 1050.7101, 0.0}, //43
	{2323.7063, -1147.6509, 1050.7101, 0.0}, //44
    {2323.7063, -1147.6509, 1050.7101, 0.0}, //45
	{2323.7063, -1147.6509, 1050.7101, 0.0}, //46
	{2323.7063, -1147.6509, 1050.7101, 0.0}, //47
	{2323.7063, -1147.6509, 1050.7101, 0.0}, //48
	{2323.7063, -1147.6509, 1050.7101, 0.0}, //49
	{2323.7063, -1147.6509, 1050.7101, 0.0} //50
};
new InteriorDialogCasasInt[50][1] =
{
    {5}, //1
    {5}, //2 
    {2}, //3
    {15}, //4 
    {4}, //5 
    {4}, //6 
    {5}, //7
    {6}, //8
    {15}, //9
    {8}, //10
    {9}, //11
    {9}, //12
    {9}, //13
    {2}, //14
    {1}, //15
    {5}, //16
    {8}, //17
    {6}, //18
    {2}, //19
    {1}, //20
    {2}, //21
    {10}, //22
	{1}, //23
    {11}, //24
    {5}, //25
    {10}, //26
    {1}, //27
    {2}, //28
	{3}, //29
    {12}, //30
    {3}, //31
    {4}, //32
    {8}, //33
    {3}, //34
	{5}, //35
    {5}, //36
    {6}, //37
    {10}, //38
    {4}, //39
    {12}, //40
	{5}, //41
    {0}, //42
    {0}, //43
    {0}, //44
    {0}, //45
    {0}, //46
	{0}, //47
	{0}, //48
	{0}, //49
	{0} //50
}; 

stock ShowCasasInterioresDialog(playerid)
{
    new dialog_string[2600];
    for(new i = 0; i < sizeof(CasasIntDialogNames); i++) {
        if(!i) {
            format(dialog_string, sizeof(dialog_string), CasasIntDialogNames[i]);
        }
        else {
            format(dialog_string, sizeof(dialog_string), "%s\n%s", dialog_string, CasasIntDialogNames[i]);
        }
    }
    return ShowPlayerDialog(playerid, DIALOG_CASAS1_MENU, DIALOG_STYLE_LIST, "Interiores", dialog_string, "Select", "Cancel");
}

//==============================================================================
new CasasIntDialogNames1[50][] =
{
    "1 - OUTROS", 
    "2 - OUTROS",
    "3 - OUTROS",
    "4 - OUTROS",
    "5 - OUTROS",
    "6 - OUTROS",
    "7 - OUTROS",
    "8 - OUTROS",
    "9 - OUTROS",
    "10 - OUTROS",
    "11 - OUTROS",
    "12 - OUTROS",
    "13 - OUTROS",
    "14 - OUTROS",
    "15 - OUTROS",
    "16 - OUTROS",
    "17 - OUTROS",
    "18 - OUTROS",
    "19 - OUTROS",
    "20 - LIVRE",
    "21 - LIVRE",
    "22 - LIVRE",
	"23 - LIVRE",
	"24 - LIVRE",
	"25 - LIVRE",
	"26 - LIVRE",
	"27 - LIVRE",
	"28 - LIVRE",
	"29 - LIVRE",
	"30 - LIVRE",
	"31 - LIVRE",
	"32 - LIVRE",
	"33 - LIVRE",
	"34 - LIVRE",
	"35 - LIVRE",
	"36 - LIVRE",
	"37 - LIVRE",
	"38 - LIVRE",
	"39 - LIVRE",
	"40 - LIVRE",
	"41 - LIVRE",
	"42 - LIVRE",
	"43 - LIVRE",
	"44 - LIVRE",
	"45 - LIVRE",
	"46 - LIVRE",
	"47 - LIVRE",
	"48 - LIVRE",
	"49 - LIVRE",
	"50 - LIVRE"
};

new Float:CasasIntDialogData1[50][4] =
{
    {328.05, 1477.73, 1084.44, 0.0},//
    {295.04, 1472.26, 1080.26, 0.0},
    {140.17, 1366.07, 1083.65, 0.0},
    {491.07, 1398.50, 1080.26, 0.0},
    {83.03, 1322.28, 1083.87, 0.0},
    {226.30, 1114.24, 1080.99, 0.0},
    {225.68, 1021.45, 1084.02, 0.0},
    {-283.44, 1470.93, 1084.38, 0.0},
    {-260.49, 1456.75, 1084.37, 0.0},
    {-68.81, 1351.21, 1080.21, 0.0},
    {2259.38, -1135.77, 1050.64, 0.0},
    {2324.53, -1149.54, 1050.71, 0.0},
    {2233.64, -1115.26, 1050.88, 0.0},
    {2196.85, -1204.25, 1049.02, 0.0},
    {2270.38, -1210.35, 1047.56, 0.0},
    {2308.77, -1212.94, 1049.02, 0.0},
    {2283.04, -1140.28, 1050.90, 0.0},
    {318.564971, 1118.209960, 1083.882812, 0.0},
    {2237.59, -1081.64, 1049.02, 0.0},
    {2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
	{2218.40, -1076.18, 1050.48, 0.0},
    {2317.89, -1026.76, 1050.22, 0.0}
};
new InteriorDialogCasasInt1[50][1] =
{
    {0}, //1
    {0}, //2 
    {0}, //3
    {0}, //4 
    {0}, //5 
    {0}, //6 
    {0}, //7
    {0}, //8
    {0}, //9
    {0}, //10
    {0}, //11
    {0}, //12
    {0}, //13
    {0}, //14
    {0}, //15
    {0}, //16
    {0}, //17
    {0}, //18
    {0}, //19
    {0}, //20
    {0}, //21
    {0}, //22
	{0}, //23
    {0}, //24
    {0}, //25
    {0}, //26
    {0}, //27
    {0}, //28
	{0}, //29
    {0}, //30
    {0}, //31
    {0}, //32
    {0}, //33
    {0}, //34
	{0}, //35
    {0}, //36
    {0}, //37
    {0}, //38
    {0}, //39
    {0}, //40
	{0}, //41
    {0}, //42
    {0}, //43
    {0}, //44
    {0}, //45
    {0}, //46
	{0}, //47
	{0}, //48
	{0}, //49
	{0} //50
};

stock ShowCasasInterioresDialog1(playerid)
{
    new dialog_string[2600];
    for(new i = 0; i < sizeof(CasasIntDialogNames1); i++) {
        if(!i) {
            format(dialog_string, sizeof(dialog_string), CasasIntDialogNames1[i]);
        }
        else {
            format(dialog_string, sizeof(dialog_string), "%s\n%s", dialog_string, CasasIntDialogNames1[i]);
        }
    }
    return ShowPlayerDialog(playerid, DIALOG_CASAS2_MENU, DIALOG_STYLE_LIST, "Interiores", dialog_string, "Select", "Cancel");
}
//==============================================================================
new EmpresasIntDialogNames[47][] =
{
    "1 - 24/7 #1",
    "2 - 24/7 #2",
    "3 - 24/7 #3",
    "4 - 24/7 #4",
    "5 - 24/7 #5",
    "6 - 24/7 #6",
    "7 - Tatoo #1",
    "8 - Tatoo #2",
    "9 - Barbeiro #1",
    "10 - Barbeiro #2",
    "11 - Barbeiro #3",
    "12 - Bar #1",
    "13 - Bar #2",
    "14 - Bar #3",
    "15 - GYM #1",
    "16 - GYM #2",
    "17 - GYM #3",
    "18 - Pizza #1",
    "19 - Pizza #2",
    "20 - Pizza #3",
    "21 - Pizza #4",
    "22 - Pizza #5",
    "23 - Cassino #1",
    "24 - Cassino #2",
	"25 - Binco #1",
	"26 - Binco #2",
	"27 - Binco #3",
	"28 - Binco #4",
	"29 - Binco #5",
	"30 - Binco #6",
	"31 - Governamental #1",
	"32 - Governamental #2",
	"33 - Governamental #3",
	"34 - Governamental #4",
	"35 - Governamental #5",
	"36 - Governamental #6",
	"37 - Estadio #1",
	"38 - Estadio #2",
	"39 - Estadio #3",
	"40 - Estadio #4",
	"41 - Estadio #5",
	"42 - Estadio #6",
	"43 - Estadio #7",
	"44 - Office #1",
	"45 - Office #2",
	"46 - Office #3",
	"47 - Office #4"
};

new Float:EmpresasIntDialogData[47][4] =
{
    {-25.7220, -187.8216, 1003.5469, 0.0}, //01
    {6.0856, -28.8966, 1003.5494, 0.0},  //02
    {-30.9875, -89.6806, 1003.5469, 0.0},  //03 
    {-26.1856, -140.9164, 1003.5469, 0.0},  //04
    {-27.844, -26.6737, 1003.5573, 0.0},  //05
    {-26.8339, -55.5846, 1003.5469, 0.0},  //06
    {-201.2236, -43.2465, 1002.2734, 0.0},  //07
    {-202.842, -24.0325, 1002.2734, 0.0},  //08
	{418.4666, -80.4595, 1001.8047, 0.0},  //9
    {414.2987, -18.8044, 1001.8047, 0.0},  //10
    {411.9707, -51.9217, 1001.8984, 0.0},  //11
    {501.9578, -70.5648, 998.7578, 0.0},  //12
    {-227.5703, 1401.5544, 27.7656, 0.0},  //13
    {681.6216, -451.8933, -25.6172, 0.0},  //14
    {770.8033, -0.7033, 1000.7267, 0.0},  //15
    {773.7318, -74.6957, 1000.6542, 0.0},  //16
    {773.8887, -47.7698, 1000.5859, 0.0},  //17
    {372.5565, -131.3607, 1001.4922, 0.0},  //18
    {366.0248, -73.3478, 1001.5078, 0.0},  //19
    {366.0002, -9.4338, 1001.8516, 0.0},  //20
    {442.1295, -52.4782, 999.7167, 0.0},  //21 
    {445.6003, -6.9823, 1000.7344 , 0.0},  //22
    {2003.1178, 1015.1948, 33.008, 0.0},  //23
    {2233.9363, 1711.8038, 1011.6312, 0.0},  //24
    {206.4627, -137.7076, 1003.0938, 0.0}, //25
	{225.0306, -9.1838, 1002.218, 0.0}, //26
	{204.1174, -46.8047, 1001.8047, 0.0}, //27
	{161.4048, -94.2416, 1001.8047, 0.0}, //28
	{207.5219, -109.7448, 1005.1328, 0.0}, //29
	{204.1658, -165.7678, 1000.5234, 0.0}, //30
	{322.5014, 303.6906, 999.1484 , 0.0}, //31
	{386.5259, 173.6381, 1008.3828, 0.0}, //32
	{288.4723, 170.0647, 1007.1794, 0.0}, //33
	{-202.9381, -6.7006, 1002.2734, 0.0}, //34
	{246.6695, 65.8039, 1003.6406, 0.0}, //35
	{-1864.9434, 55.7325, 1055.5276, 0.0}, //36
	{-1402.6613, 106.3897, 1032.2734, 0.0}, //37
	{-1401.067, 1265.3706, 1039.8672, 0.0}, //38
	{-1417.8927, 932.4482, 1041.5313, 0.0}, //39
	{-1420.4277, 1616.9221, 1052.5313, 0.0}, //40
	{-1129.8909, 1057.5424, 1346.4141, 0.0}, //41
	{830.6016, 5.9404, 1004.1797, 0.0}, //42
	{-1421.5618, -663.8262, 1059.5569, 0.0}, //43
	{1494.8589, 1306.48, 1093.2953, 0.0}, //44
	{1168.512, 1360.1145, 10.9293, 0.0}, //45
	{-2031.1196, -115.8287, 1035.1719, 0.0}, //46
	{2306.3826, -15.2365, 26.7496, 0.0} //47
};
new InteriorDialogEmpresasInt[47][1] =
{
    {17},  //01
    {10},  //02
    {18},  //03
    {16},  //04
    {4}, //05
    {6}, //06 
    {3}, //07
    {16}, //08
    {3}, //9
    {2}, //10
    {12}, //11
    {11}, //12
    {18}, //13
    {1}, //14
    {5}, //15
    {7}, //16
    {6}, //17
    {5}, //18
    {10}, //19
    {9}, //20
    {6}, //21
    {1}, //22
    {11}, //23
	{1}, //24
    {1}, //25
	{5}, //26
	{1}, //27
	{18}, //28
	{15}, //29
	{14}, //30
	{5}, //31
	{3}, //32
	{3}, //33
	{17}, //34
	{6}, //35
	{14}, //36
	{1}, //37
	{16}, //38
	{15}, //39
	{14}, //40
	{10}, //41
	{3}, //42
	{4}, //43
	{3}, //44
	{0}, //45
	{3}, //46
	{0} //47
};

stock ShowEmpInterioresDialog1(playerid)
{
    new dialog_string[2600];
    for(new i = 0; i < sizeof(EmpresasIntDialogNames); i++) {
        if(!i) {
            format(dialog_string, sizeof(dialog_string), EmpresasIntDialogNames[i]);
        }
        else {
            format(dialog_string, sizeof(dialog_string), "%s\n%s", dialog_string, EmpresasIntDialogNames[i]);
        }
    }
    return ShowPlayerDialog(playerid, DIALOG_EMP1_MENU, DIALOG_STYLE_LIST, "Interiores", dialog_string, "Select", "Cancel");
}
//==============================================================================
new EmpresasIntDialogNames2[50][] =
{
    "1 - Warehouse #1", //1
    "2 - Warehouse #2", //2
    "3 - Warehouse #3", //3
    "4 - Warehouse #4", //4
    "5 - Ammu-nation #1", //5
    "6 - Ammu-nation #2", //6
    "7 - Ammu-nation #3", //7
    "8 - Ammu-nation #4", //8
    "9 - Ammu-nation #5", //9
    "10 - Outros #1", //10
    "11 - Outros #2", //11
    "12 - Outros #3", //12
    "13 - Outros #4", //13
    "14 - Outros #5", //14
    "15 - LIVRE", //15
    "16 - LIVRE", //16
    "17 - LIVRE", //17
    "18 - LIVRE", //18
    "19 - LIVRE", //19
    "20 - LIVRE", //20
    "21 - LIVRE", //21
    "22 - LIVRE", //22
    "23 - LIVRE", //23
    "24 - LIVRE", //24
    "25 - LIVRE", //25
    "26 - LIVRE", //26
    "27 - LIVRE", //27
    "28 - LIVRE", //28
    "29 - LIVRE", //29
    "30 - LIVRE", //30
    "31 - LIVRE", //31
    "32 - LIVRE", //32
    "33 - LIVRE", //33
    "34 - LIVRE", //34
    "35 - LIVRE", //35
    "36 - LIVRE", //36
    "37 - LIVRE", //37
    "38 - LIVRE", //38
    "39 - LIVRE", //39
    "40 - LIVRE", //40
    "41 - LIVRE", //41
    "42 - LIVRE", //42
    "43 - LIVRE", //43
    "44 - LIVRE", //44
    "45 - LIVRE", //45
    "46 - LIVRE", //46
    "47 - LIVRE", //47
    "48 - LIVRE", //48
    "49 - LIVRE", //49
    "50 - LIVRE" //50
};

new Float:EmpresasIntDialogData2[50][4] =
{
    {1290.4106, 1.9512, 1001.0201 , 0.0}, //1
    {1412.1472, -2.2836, 1000.9241 , 0.0}, //2
    {2135.2004, -2276.2815, 20.6719 , 0.0}, //3
    {2536.5322, -1294.8425, 1044.125 , 0.0}, //4
    {315.244, -140.8858, 999.6016 , 0.0}, //5
    {285.8361, -39.0166, 1001.5156 , 0.0}, //6
    {291.7626, -80.1306, 1001.5156 , 0.0}, //7
    {297.144, -109.8702, 1001.5156 , 0.0}, //8
    {316.5025, -167.6272, 999.5938 , 0.0}, //9
    {1727.2853, -1642.9451, 20.2254 , 0.0}, //10
    {1.5491, 23.3183, 1199.5938 , 0.0}, //11
    {315.4544, 976.5972, 1960.8511 , 0.0}, //12
	{963.0586, 2159.7563, 1011.0303, 0.0}, //13
    {-2240.1028, 136.973, 1035.4141, 0.0}, //14
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
	{-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
	{-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0},
	{-2240.1028, 136.973, 1035.4141, 0.0},
    {-2240.1028, 136.973, 1035.4141, 0.0}
};
new InteriorDialogEmpresasInt2[50][1] =
{
    {18}, //1
    {1}, //2
    {0}, //3
    {2}, //4
    {7}, //5
    {1}, //6
    {4}, //7
    {6}, //8
    {6}, //9
    {18}, //10
    {1}, //11
    {9}, //12
    {1}, //13
    {6}, //14
    {0}, //15
    {0}, //16
    {0}, //17
    {0}, //18
    {0}, //19
    {0}, //20
	{0}, //21
    {0}, //22
    {0}, //23
    {0}, //24
    {0}, //25
    {0}, //26
    {0}, //27
    {0}, //28
    {0}, //29
    {0}, //30
	{0}, //31
    {0}, //32
    {0}, //33
    {0}, //34
    {0}, //35
    {0}, //36
    {0}, //37
    {0}, //38
    {0}, //39
    {0}, //40
	{0}, //41
    {0}, //42
    {0}, //43
    {0}, //44
    {0}, //45
    {0}, //46
    {0}, //47
    {0}, //48
	{0}, //49
	{0} //50
};

stock ShowEmpInterioresDialog2(playerid)
{
    new dialog_string[2600];
    for(new i = 0; i < sizeof(EmpresasIntDialogNames2); i++) {
        if(!i) {
            format(dialog_string, sizeof(dialog_string), EmpresasIntDialogNames2[i]);
        }
        else {
            format(dialog_string, sizeof(dialog_string), "%s\n%s", dialog_string, EmpresasIntDialogNames2[i]);
        }
    }
    return ShowPlayerDialog(playerid, DIALOG_EMP2_MENU, DIALOG_STYLE_LIST, "Interiores", dialog_string, "Selecionar", "Cancelar");
}
//==============================================================================
// --------- [ ENUMERATORS ] ---------

static g_aMaleSkins[185] = {
	1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60,
	61, 62, 66, 68, 72, 73, 78, 79, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 142, 143, 144, 146,
	147, 153, 154, 155, 156, 158, 159, 160, 161, 162, 167, 168, 170, 171, 173, 174, 175, 176,
	177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 200, 202, 203, 204, 206,
	208, 209, 210, 212, 213, 217, 220, 221, 222, 223, 228, 229, 230, 234, 235, 236, 239, 240,
	241, 242, 247, 248, 249, 250, 253, 254, 255, 258, 259, 260, 261, 262, 268, 272, 273, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 299
};

static g_aFemaleSkins[77] = {
	9, 10, 11, 12, 13, 31, 38, 39, 40, 41, 53, 54, 55, 56, 63, 64, 65, 69,
	75, 76, 77, 85, 88, 89, 90, 91, 92, 93, 129, 130, 131, 138, 140, 141,
	145, 148, 150, 151, 152, 157, 169, 178, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 201, 205, 207, 211, 214, 215, 216, 219, 224, 225,
	226, 231, 232, 233, 237, 238, 243, 244, 245, 246, 251, 256, 257, 263,
	298
};

static g_NewSkins[100] = {
    20002, 20003, 20004,
    20005, 20006, 20007, 20008,
    20009, 20010, 20011, 20012,
    20013, 20014, 20015, 20016,
    20017, 20018, 20019, 20020,
    20022, 20023, 20024, 20025,
    20026, 20027, 20028, 20029,
    20030, 20031, 20032, 20033,
    20034, 20035, 20036, 20037,
    20038, 20039, 20040, 20041,
	20042, 20045, 20046, 20047, 
	20049, 20050, 20051, 20052,
	20054, 20055, 20056, 20057,
	20058, 20059, 20060, 20061,
	20062, 20063, 20064, 20065,
	20066, 20067, 20068
};


static const g_aPreloadLibs[][] =
{
	"AIRPORT",      "ATTRACTORS",   "BAR",          "BASEBALL",     "BD_FIRE",
	"BEACH",        "BENCHPRESS",   "BF_INJECTION", "BIKE_DBZ",     "BIKED",
	"BIKEH",        "BIKELEAP",     "BIKES",        "BIKEV",        "BLOWJOBZ",
	"BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
	"BUS",          "CAMERA",       "CAR",          "CAR_CHAT",     "CARRY",
	"CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
	"COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
	"DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
	"DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
	"FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
	"FLOWERS",      "FOOD",         "FREEWEIGHTS",  "GANGS",        "GFUNK",
	"GHANDS",       "GHETTO_DB",    "GOGGLES",      "GRAFFITI",     "GRAVEYARD",
	"GRENADE",      "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",
	"INT_OFFICE",   "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",
	"KNIFE",        "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",
	"MD_CHASE",     "MD_END",       "MEDIC",        "MISC",         "MTB",
	"MUSCULAR",     "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",
	"PARK",         "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",
	"POLICE",       "POOL",         "POOR",         "PYTHON",       "QUAD",
	"QUAD_DBZ",     "RAPPING",      "RIFLE",        "RIOT",         "ROB_BANK",
	"ROCKET",       "RUNNINGMAN",   "RUSTLER",      "RYDER",        "SCRATCHING",
	"SEX",          "SHAMAL",       "SHOP",         "SHOTGUN",      "SILENCED",
	"SKATE",        "SMOKING",      "SNIPER",       "SNM",          "SPRAYCAN",
	"STRIP",        "SUNBATHE",     "SWAT",         "SWEET",        "SWIM",
	"SWORD",        "TANK",         "TATTOOS",      "TEC",          "TRAIN",
	"TRUCK",        "UZI",          "VAN",          "VENDING",      "VORTEX",
	"WAYFARER",     "WEAPONS",      "WOP",          "WUZI"
};

//==============================================================================//
#include "../gamemodes/mapas/empresasint.pwn"
#include "../gamemodes/mapas/casasint.pwn"
#include "../gamemodes/mapas/mapascivis.pwn"
#include "../gamemodes/mapas/governamentalext.pwn"
#include "../gamemodes/mapas/govinterior.pwn"
#include "../gamemodes/mapas/whdh.pwn"
#include "../gamemodes/mapas/complexosint.pwn"
#include "../gamemodes/mapas/prisao.pwn"

#include "../gamemodes/Anims.pwn"
#include "../gamemodes/logs.pwn"

#include "../gamemodes/sistemas/Horse.pwn"
#include "../gamemodes/sistemas/MorteSys.pwn"
//==============================================================================//

main()
{
	print("\n-------------------------------------------	");
	print("	Capital Paulista Full Roleplay							");
	print("	por Yur$										");
	print("----------------------------------\n				");
}

public OnPlayerPause(playerid)
{
    if (IsPlayerNPC(playerid)) return 1;
	IsAFK[playerid] = true;
 	return 1;
}
public OnPlayerResume(playerid, time)
{
    if (IsPlayerNPC(playerid)) return 1;

    if(AFKTimer[playerid] >= 600)
		SendClientMessage(playerid,COLOR_LIGHTGREEN,"SERVER: Você retornou da inatividade e o tempo do PayDay voltou a contar.");

	IsAFK[playerid] = false;
	AFKTimer[playerid] = 0;

 	return 1;
}

forward Tempo_Clima();
public Tempo_Clima()
{
	new novoclima_LS = random(6);
	new novoclima_LV = random(6);
	new novoclima_SF = random(6);

	switch(novoclima_LS)
	{
	    case 0: Clima_LS = 2;
	    case 1: Clima_LS = 2;
     	case 2: Clima_LS = 7;
   		case 3: Clima_LS = 8;
   		case 4: Clima_LS = 2;
   		case 5: Clima_LS = 2;
   		default: Clima_LS = 2;
	}
	switch(novoclima_LV)
	{
	    case 0: Clima_LV = 2;
	    case 1: Clima_LV = 2;
     	case 2: Clima_LV = 7;
   		case 3: Clima_LV = 8;
   		case 4: Clima_LV = 2;
   		case 5: Clima_LV = 2;
   		default: Clima_LV = 2;
	}
	switch(novoclima_SF)
	{
	    case 0: Clima_SF = 2;
	    case 1: Clima_SF = 2;
     	case 2: Clima_SF = 7;
   		case 3: Clima_SF = 8;
   		case 4: Clima_SF = 2;
   		case 5: Clima_SF = 2;
   		default: Clima_SF = 2;
	}
	return 1;
}

new SERVER_DOWNLOAD[] = "https://cp-frp.com.br.com/sampbrasil";
public OnPlayerRequestDownload(playerid, type, crc)
{
    if(!IsPlayerConnected(playerid)) return 0;

    if (IsPlayerNPC(playerid)) return 1;
    new filename[64], filefound, url_final[256];

	if(type == DOWNLOAD_REQUEST_TEXTURE_FILE)
		filefound = FindTextureFileNameFromCRC(crc, filename, sizeof(filename));
	else if(type == DOWNLOAD_REQUEST_MODEL_FILE)
		filefound = FindModelFileNameFromCRC(crc, filename, sizeof(filename));

	if(filefound) {
		format(url_final, sizeof(url_final), "%s/%s", SERVER_DOWNLOAD, filename);
		RedirectDownload(playerid, url_final);
	}
	return 1;
}

public OnGameModeInit()
{
    ShowNameTags(0);
    print("[CARREGADO] Custom nametags by Yur$");
    // OnPlayerUpdate causa lag e OnPlayer(Take/Give)Damage não funciona com ele
    SetTimer("UpdateNametag", 1000, true); // Então, estamos usando um cronômetro, altere o intervalo para o que você deseja
	
	if (ambiente == 1){
		Pipeline = mysql_connect(sz_Connection, sz_User, sz_DB, sz_Password);
	}else{
		Pipeline = mysql_connect(localhost_Connection, localhost_User, localhost_DB, localhost_Password);
	}

	if(mysql_errno() != 0){
		print("[ERRO] Falha de conexão com banco de dados!");
		GameModeExit();
	}
	

	//Streamer
	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, VISIBLE_ITEMS);

	SetGameModeText(CA_VERSAO);
	SendRconCommand(MAP_NAME);
	SendRconCommand(CA_LINK);
	SendRconCommand(CA_NOME);
	SendRconCommand(CA_LANGUAGE);

	DisableInteriorEnterExits();
	//SetNameTagDrawDistance(NAME_DRAWDISTANCE);
    EnableStuntBonusForAll(0);

    ManualVehicleEngineAndLights();
    ShowPlayerMarkers(0);

    OOCChat = 0;

	//==========================================================================
    //Trem = AddStaticVehicleEx(538,-1942.0443,183.1388,25.5979,280.0056, -1, -1, 9999999);
    //ConnectNPC("Trainbot","train_carp");
	//==========================================================================
	//================================================
	//Caixas de Força - Apagão
	CaixaDeForca[0][CaixaObj] = CreateDynamicObject(3387, 2280.06250, -1695.46216, 12.42650,   0.00000, 0.00000, 270.00000);
	CaixaDeForca[0][CaixaVida] = 1000.0;
	format(CaixaDeForca[0][CaixaBairro], 32, "Ganton");
	//================================================
	//Carros de Emprego
	//================================================
    garbage_vehicles[0] = AddStaticVehicle(408,2175.9990,-1976.7263,14.2235,273.6964,1,1); // Lixeiro 1
    garbage_vehicles[1] = AddStaticVehicle(408,2175.8127,-1970.4688,14.1050,271.2801,1,1); // Lixeiro 1
    garbage_vehicles[2] = AddStaticVehicle(408,2186.2073,-1991.3400,14.1957,358.8047,1,1);  // Lixeiro 1
    garbage_vehicles[3] = AddStaticVehicle(408,2190.6982,-1991.1963,14.1343,359.5683,1,1); // Lixeiro 1

    CarRent[0] = AddStaticVehicle(492,1664.2168,-2248.0488,-2.9842,90.2306,1,1); // Green 1
    CarRent[1] = AddStaticVehicle(492,1653.5485,-2313.4810,-2.9741,269.5144,1,1); // Green 2
	CarRent[2] = AddStaticVehicle(492,1560.7415,-2308.8511,13.3286,269.5454,1,1); // 1
	CarRent[3] = AddStaticVehicle(492,1560.7153,-2312.1589,13.3285,269.5454,1,1); // 2
	CarRent[4] = AddStaticVehicle(492,1560.6952,-2315.5034,13.3498,269.5466,1,1); // 3
	CarRent[5] = AddStaticVehicle(422,1560.6693,-2318.7683,13.3567,269.5466,1,1); // 4
	CarRent[6] = AddStaticVehicle(422,1560.6440,-2321.9934,13.3636,269.5466,1,1); // 5
	CarRent[7] = AddStaticVehicle(422,1560.6185,-2325.2891,13.3706,269.5466,1,1); // 6
	CarRent[8] = AddStaticVehicle(492,1560.5928,-2328.5264,13.3775,269.5466,1,1); // 7
	CarRent[9] = AddStaticVehicle(492,1560.5668,-2331.8062,13.3845,269.5466,1,1); // 8
    for(new c=0;c<sizeof(CarRent);c++)
    {
		SetVehicleNumberPlate(CarRent[c], "ALUGADO");
		new playerid;
		new veh = GetPlayerVehicleID(playerid);
		new slot = GetVehicleSlot(veh);
		VehicleInfo[slot][vBateria] = 10000.0;
    }
    Noia_1 = CreateActor(20001,2573.5181,-1124.5466,65.3464,63.5828); 
    Noia_2 = CreateActor(20002,2577.3850,-1130.1652,65.1935,237.8145); 
    Noia_3 = CreateActor(20003,2595.5320,-1111.5963,67.4365,135.0617); 
    Noia_4 = CreateActor(20004,2589.0232,-1112.6173,66.9152,225.2634); 
    Noia_5 = CreateActor(20005,2595.9336,-962.2279,81.1852,131.2234); 
    Noia_6 = CreateActor(20006,2585.7937,-955.1824,81.3715,167.7262); 
    Noia_7 = CreateActor(20007,2557.9902,-956.3238,82.7591,208.9504); 
    Noia_8 = CreateActor(20008,1850.6703,-2000.5491,14.1094,86.9080); 
    Noia_9 = CreateActor(20009,1846.1360,-2004.2552,13.5469,164.7114); 
    Noia_10 = CreateActor(20010,1841.3813,-2008.3091,13.5469,252.2360); 
    Noia_11 = CreateActor(20011,1731.6779,-2123.5327,12.7954,6.4656); 
    Noia_12 = CreateActor(20012,1727.1029,-2127.2014,12.7933,359.5086); 
    Noia_13 = CreateActor(20013,1726.0736,-2122.7458,12.7933,275.6207); 
    Noia_14 = CreateActor(20014,2226.6240,-1458.6040,24.0754,32.3747); 
    Noia_15 = CreateActor(20015,2222.3228,-1457.7727,24.0000,3.9032); 
    Noia_16 = CreateActor(20016,2669.5825,-1460.8533,30.5523,249.9516); 
    Noia_17 = CreateActor(20017,2671.0518,-1468.1061,30.5604,267.7805); 
    Noia_18 = CreateActor(20018,2683.7068,-1471.5103,30.5612,86.4176); 
    Noia_19 = CreateActor(20019,2687.3025,-1459.4653,30.6193,86.8974); 
    Noia_20 = CreateActor(20020,2709.9211,-1447.3977,30.6297,285.2825); 
    Noia_21 = CreateActor(20021,2056.5154,-1821.0952,13.5469,359.7273); 
    Noia_22 = CreateActor(20022,1891.0433,-1785.9810,13.5544,272.8079); 
    SetActorInvulnerable(Noia_1, true);
    SetActorVirtualWorld(Noia_1, 0);
    SetActorInvulnerable(Noia_2, true);
    SetActorVirtualWorld(Noia_2, 0); 
    SetActorInvulnerable(Noia_3, true);
    SetActorVirtualWorld(Noia_3, 0);  
    SetActorInvulnerable(Noia_4, true);
    SetActorVirtualWorld(Noia_4, 0);     
    SetActorInvulnerable(Noia_5, true);
    SetActorVirtualWorld(Noia_5, 0);     
    SetActorInvulnerable(Noia_6, true);
    SetActorVirtualWorld(Noia_6, 0);     
    SetActorInvulnerable(Noia_7, true);
    SetActorVirtualWorld(Noia_7, 0);     
    SetActorInvulnerable(Noia_8, true);
    SetActorVirtualWorld(Noia_8, 0);    
    SetActorInvulnerable(Noia_9, true);
    SetActorVirtualWorld(Noia_9, 0);     
    SetActorInvulnerable(Noia_10, true);
    SetActorVirtualWorld(Noia_10, 0);     
    SetActorInvulnerable(Noia_11, true);
    SetActorVirtualWorld(Noia_11, 0);     
    SetActorInvulnerable(Noia_12, true);
    SetActorVirtualWorld(Noia_12, 0);     
    SetActorInvulnerable(Noia_13, true);
    SetActorVirtualWorld(Noia_13, 0);     
    SetActorInvulnerable(Noia_14, true);
    SetActorVirtualWorld(Noia_14, 0);     
    SetActorInvulnerable(Noia_15, true);
    SetActorVirtualWorld(Noia_15, 0);     
    SetActorInvulnerable(Noia_16, true);
    SetActorVirtualWorld(Noia_16, 0);     
    SetActorInvulnerable(Noia_17, true);
    SetActorVirtualWorld(Noia_17, 0);     
    SetActorInvulnerable(Noia_18, true);
    SetActorVirtualWorld(Noia_18, 0);     
    SetActorInvulnerable(Noia_19, true);
    SetActorVirtualWorld(Noia_19, 0);   
    SetActorInvulnerable(Noia_20, true);
    SetActorVirtualWorld(Noia_20, 0);     
    SetActorInvulnerable(Noia_21, true);
    SetActorVirtualWorld(Noia_21, 0);     
    SetActorInvulnerable(Noia_22, true);
    SetActorVirtualWorld(Noia_22, 0);     


    //Basket
    basket_OnGameModeInit();
    Iniciar_HorseBetSys();
    //PortoTrucker_ModeInit();

    //============ Pickup / TextLabel - Anuncio
	CreateDynamic3DTextLabel("[PCESP]\n/entrar", 0xffffffff, 1728.8789,-1565.1876,14.5625, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
	CreatePickup(1239, 1, 1728.8789,-1565.1876,14.5625, 0); 

	CreateDynamic3DTextLabel("[PCESP]\n/entrar", 0xffffffff, 1400.2490,-12.1037,1001.0098, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
	CreatePickup(1239, 1, 1400.2490,-12.1037,1001.0098, 0); 

	CreateDynamic3DTextLabel("[PMESP]\n/entrar", 0xffffffff, 2514.5640,-1525.5608,24.0324, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
	CreatePickup(1239, 1, 2514.5640,-1525.5608,24.0324, 0); 

    CreateDynamic3DTextLabel("[CENTRO DE EMPREGOS]\nUse '/pegaremprego'", 0x008080FF, 1414.9390,-1576.9739,20.0859, 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    CreatePickup(1239, 1, 1414.9390,-1576.9739,20.0859, -1);

    CreateDynamic3DTextLabel("[VENDER PEIXES]\nUse '/venderpeixes'", 0x008080FF, -754.3839,1529.4766,26.9495, 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    CreatePickup(1239, 1, -754.3839,1529.4766,26.9495, -1);

    CreateDynamic3DTextLabel("[CENTRAL DE ANÚNCIOS]\nUse '/anuncio'\nUse '/anuncioemp'", 0xffffffff, 1166.6110,-1473.7046,15.7921, 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    CreatePickup(1239, 1, 1166.6110,-1473.7046,15.7921, -1);
    
	CreateDynamic3DTextLabel("[PMESP]\n/reparar", 0xffffffff, 2507.6438,-1551.7308,24.0324, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
    CreatePickup(1239, 1, 2507.6438,-1551.7308,24.0324, 0);

	CreateDynamic3DTextLabel("[PCESP]\n/reparar", 0xffffffff, 1720.7937,-1578.8098,13.5547, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
    CreatePickup(1239, 1, 1720.7937,-1578.8098,13.5547, 0);

	CreateDynamic3DTextLabel("[GARAGEM]\n/entrar", 0xffffffff, 1742.7393,-1551.3011,7.9609, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
    CreatePickup(1239, 1, 1742.7393,-1551.3011,7.9609, 0); 

	CreateDynamic3DTextLabel("[PCESP]\n/sair", 0xffffffff, -1628.0112,690.6479,7.1875, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
	CreatePickup(1239, 1, -1628.0112,690.6479,7.1875, 0); 

	CreateDynamic3DTextLabel("[P. ONIBUS]\n/iniciarviagem", 0xffffffff, 1737.5643,-1859.1648,13.4141, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
	CreatePickup(1239, 1, 1737.5643,-1859.1648,13.4141, 0); 

	CreateDynamic3DTextLabel("[GARAGEM]\n/entrar", 0xffffffff, 954.6230,-1467.4749,13.5547, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
	CreatePickup(1239, 1, 954.6230,-1467.4749,13.5547, 0);

	CreateDynamic3DTextLabel("[GARAGEM]\n/entrar", 0xffffffff, 2501.8635,-1564.3923,24.0324, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
    CreatePickup(1239, 1, 2501.8635,-1564.3923,24.0324, 0);
	//PROTEGE
	CreateDynamic3DTextLabel("[GARAGEM]\n/entrar", 0xffffffff, 1772.9445,-1543.1234,13.6688, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
	CreatePickup(1239, 1, 1772.9445,-1543.1234,13.6688, 0);

    //MULTAS
    CreateDynamic3DTextLabel("{FFFFFF}[DETRAN]\nUse '/Multas'\nPara pagar suas multas", 0xffffffff,-501.2948,293.6831,2001.0950, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    CreatePickup(1239, 1, -501.2948,293.6831,2001.0950, 0);

    //Apreensão
    CreateDynamic3DTextLabel("[PÁTIO]\nUse '/apreender'\nUse '/desapreender'",0xffffffff,2819.6492,-1203.3964,24.9792, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    CreatePickup(1239, 1, 2819.6492,-1203.3964,24.9792, 0);

	CreateDynamic3DTextLabel("[Agencia de Seguros]\nUse '/aceitarcobranca'",0xffffffff,1500.2792,-1241.3109,14.5563, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	CreatePickup(1239, 1, 1500.2792,-1241.3109,14.5563, 0);

    //PEIXES
    CreateDynamic3DTextLabel("{FFFFFF}[Casa de Peixes]\nUse '/venderpeixes'",0xffffffff, 2784.9338,-2454.6338,13.6344, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    CreatePickup(1239, 1, 2784.9338,-2454.6338,13.6344, 0);

    //CADEIA
    CreateDynamic3DTextLabel("{FFFFFF}[CADEIA]\nUse '/prender'",0xffffffff, 1396.2954,-10.2383,1000.9221, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    CreatePickup(1239, 1, 1396.2954,-10.2383,1000.9221, 0);

    //ENTRADA HOSPITAL
    CreateDynamic3DTextLabel("{FFFFFF}[UPA]\n/entrar",0xffffffff, 2027.3602,-1386.4576,17.2108, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    CreatePickup(1239, 1, 2027.3602,-1386.4576,17.2108, 0);

    //HOSPITAL
    CreateDynamic3DTextLabel("{FFFFFF}[UPA]\n/tratar\n/convenio",0xffffffff, 174.4834,2784.5520,767.7469, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    CreatePickup(1239, 1, 1177.7151,-1321.4143,2015.4130, 0);

    CreateDynamic3DTextLabel("{FFFFFF}[UPA]]\n/deixarferido\nPara deixar o ferido",0xffffffff, 2043.6692,-1383.1019,17.1479, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    CreatePickup(1239, 1, 2043.6692,-1383.1019,17.1479, 0);

	//COMPRAR PEÇAS
    CreateDynamic3DTextLabel("{FFFFFF}[LOJA DE PEÇAS]\n/comprarpecas\n/comprarplaca",0xffffffff, 1096.8484,-1528.9009,22.7434, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    CreatePickup(1239, 1, 1096.8484,-1528.9009,22.7434, 0);
	
	//COMPRAR
    CreateDynamic3DTextLabel("{FFFFFF}Conveniência\n/comprar",0xffffffff, 1917.8755,-1776.0514,13.6094, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    CreatePickup(1239, 1, 1917.8755,-1776.0514,13.6094, 0);

    CreateDynamic3DTextLabel("{FFFFFF}RM Lanches\n/comprar",0xffffffff, 2114.7300,-1806.5607,13.5616, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    CreatePickup(1239, 1, 2114.7300,-1806.5607,13.5616, 0);

	//TOLLS
	L_a_Pickup[0] = CreateDynamicPickup(1239, 14, 607.9684, -1194.2866, 19.0043, 0); //  Richman 1
	L_a_Pickup[1] = CreateDynamicPickup(1239, 14, 623.9500, -1183.9774, 19.2260, 0); // Richman 2
	L_a_Pickup[2] = CreateDynamicPickup(1239, 14, 39.7039, -1522.9891, 6.1995, 0); // Flint 1
	L_a_Pickup[3] = CreateDynamicPickup(1239, 14, 62.7378, -1539.9891, 6.0639, 0); // Flint 2
	L_a_Pickup[4] = CreateDynamicPickup(1239, 14, 1795.9447, 704.2550, 15.0006, 0); // LV 1
	L_a_Pickup[5] = CreateDynamicPickup(1239, 14, 1778.9886, 702.6728, 15.2574, 0); // LV 2
	L_a_Pickup[6] = CreateDynamicPickup(1239, 14, 612.53070, 346.59592, 17.92614, 0); // BlueberryR 1
	L_a_Pickup[7] = CreateDynamicPickup(1239, 14, 604.37152, 346.88141, 17.92614, 0); // BlueberryR 2
	L_a_Pickup[8] = CreateDynamicPickup(1239, 14, -195.2768,252.2416,12.0781, 0); // BlueberryL 1
	L_a_Pickup[9] = CreateDynamicPickup(1239, 14, -199.5153,260.3405,12.0781, 0); // BlueberryL 2
	//==========================================================
    //Tunning
    for(new i = 1; i < MAX_GARAGES; i++)
	{
 		new file[ 50 ];
   		format( file, sizeof( file ), TG_FILE, i );
     	if( fexist( file ) )
 		{
   			INI_ParseFile( file, "LoadTGarage", .bExtra = true, .extra = i );
      		tGarage[ i ][ tg3D ] = CreateDynamic3DTextLabel( "{FFFFFF}/tunar\n/removertunnings", -1, tGarage[ i ][ Position ][ 0 ], tGarage[ i ][ Position ][ 1 ], tGarage[ i ][ Position ][ 2 ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
      		tGarage[ i ][ tgPickup ] = CreatePickup( 1239, 1, tGarage[ i ][ Position ][ 0 ], tGarage[ i ][ Position ][ 1 ], tGarage[ i ][ Position ][ 2 ], -1 );
       	}
 	}

 	for(new cars = 0; cars < 1000; cars++)
 	{
 	    Carcaca[cars] = -1;
 	    CarcacaCar[cars] = -1;
 	}

 	for(new anid = 0; anid < 100; anid++)
  	{
		AnuncioLista[anid][AnuncioDono] = 0;
 		format(AnuncioLista[anid][AnuncioPor], 24, " ");
   		format(AnuncioLista[anid][AnuncioMsg], 162, " ");
	}
    //==========================================================================
	//								Loading's
	//==========================================================================
	mysql_function_query(Pipeline, "SELECT * FROM rp_vehicle_models ORDER BY id ASC", true, "QUERY_LOAD_MODELS", "");
	mysql_function_query(Pipeline, "SELECT * FROM `rp_vehicles` WHERE `truncated` = 0", true, "CarregandoCarros", "");
    mysql_function_query(Pipeline, "SELECT * FROM `casas`", true, "CarregandoCasas", "");
    mysql_function_query(Pipeline, "SELECT * FROM `garagens`", true, "CarregandoGaragens", "");
    mysql_function_query(Pipeline, "SELECT * FROM `complexos`", true, "CarregandoComplexos", "");
    mysql_function_query(Pipeline, "SELECT * FROM `empresas`", true, "CarregandoEmpresas", "");
    mysql_function_query(Pipeline, "SELECT * FROM `pontoentrega`", true, "CarregarPontoEntrega", "");

	mysql_function_query(Pipeline, "SELECT * FROM `furniture` WHERE `mCriado` = 1", true, "CarregandoMoveis", "");

    mysql_function_query(Pipeline, "SELECT * FROM `droparmas`", true, "LoadArmas", "");
    mysql_function_query(Pipeline, "SELECT * FROM `faccoes`", true, "CarregarFacs", "");
    mysql_function_query(Pipeline, "SELECT * FROM `portoes`", true, "CarregarPortoes", "");
    mysql_function_query(Pipeline, "SELECT * FROM `itens`", true, "LoadItens", "");
    mysql_function_query(Pipeline, "SELECT * FROM `rp_atms`", true, "QUERY_LOAD_ATMS", "");
	mysql_function_query(Pipeline, "SELECT * FROM `rp_cloja`", true, "QUERY_LOAD_COFRELOJAS", "");
	mysql_function_query(Pipeline, "SELECT * FROM `rp_cofre`", true, "QUERY_LOAD_COFREBANCO", "");
	mysql_function_query(Pipeline, "SELECT * FROM `rp_joias`", true, "QUERY_LOAD_JOIAS", "");
	mysql_function_query(Pipeline, "SELECT * FROM `rp_laboratorio`", true, "QUERY_LOAD_LABORATORIO", "");
    mysql_function_query(Pipeline, "SELECT * FROM `cartuxo`", true, "LoadAmmos", "");
    mysql_function_query(Pipeline, "SELECT * FROM `rp_drogasplant`", true, "QUERY_LOAD_DRUGPLAN", "");
    mysql_function_query(Pipeline, "SELECT * FROM `drop_drug`", true, "LoadDrugs", "");
    mysql_function_query(Pipeline, "SELECT * FROM `pixes`", true, "CarregandoPixes", "");
    mysql_function_query(Pipeline, "SELECT * FROM `multas`", true, "CarregandoMultas", "");

   	mysql_function_query(Pipeline, "SELECT * FROM `torres`", true, "CarregandoTorres", "");
	mysql_function_query(Pipeline, "SELECT * FROM `telpubs` WHERE `deletado` = 0", true, "CarregandoTelPub", "");
    CriarCelular_Base();

    mysql_function_query(Pipeline, "SELECT * FROM `governo` WHERE id = '1'", true, "CarregandoGoverno", "");
    mysql_function_query(Pipeline, "SELECT * FROM `server` WHERE id = '1'", true, "CarregarServerInfo", "");

    for(new caix = 0; caix < MAX_CAIXAS; caix++)
	{
	    CaixaInfo[caix][cTipo] = 0;
	}
	for(new c = 0; c < MAX_VEHICLES; c++)
	{
	    for(new cc = 0; cc < 101; cc++)
    	{
			CargaInfo[c][cSlot][cc] = 0;
		}
	}
	for(new tra = 0; tra < MAX_TRAFICANTES; tra++)
	{
	    TraficInfo[tra][traRand] = 9999;
	}
    //Timers
    SetTimer("Timer_Segundos", 1000, true);
    SetTimer("Timer_Minutos", 60000, true);
    SetTimer("OnPlayerUpdate_Timer", 600, true);
    SetTimer("Tempo_Clima", 3600000, true);

	
	mapacivil();
	governamental();
	faccoes();
	interiorgov();
	empresasint();
	interiorescasa();
	complexosint();
	Mapa_Presidio();

	ApagaoEmGanton = 0;

	//TextDraw
	ApagaoDraw = TextDrawCreate(680.000000, 0.000000, "New Textdraw");
    TextDrawBackgroundColor(ApagaoDraw, 255);
    TextDrawFont(ApagaoDraw, 1);
    TextDrawLetterSize(ApagaoDraw, 0.500000, 26.000000);
    TextDrawColor(ApagaoDraw, -1);
    TextDrawSetOutline(ApagaoDraw, 0);
    TextDrawSetProportional(ApagaoDraw, 1);
    TextDrawSetShadow(ApagaoDraw, 1);
    TextDrawUseBox(ApagaoDraw, 1);
    TextDrawBoxColor(ApagaoDraw, 100);
    TextDrawTextSize(ApagaoDraw, -41.000000, 68.000000);

    InterruptorDraw = TextDrawCreate(680.000000, 0.000000, "New Textdraw");
    TextDrawBackgroundColor(InterruptorDraw, 255);
    TextDrawFont(InterruptorDraw, 1);
    TextDrawLetterSize(InterruptorDraw, 0.500000, 26.000000);
    TextDrawColor(InterruptorDraw, -1);
    TextDrawSetOutline(InterruptorDraw, 0);
    TextDrawSetProportional(InterruptorDraw, 1);
    TextDrawSetShadow(InterruptorDraw, 1);
    TextDrawUseBox(InterruptorDraw, 1);
    TextDrawBoxColor(InterruptorDraw, 100);
    TextDrawTextSize(InterruptorDraw, -41.000000, 68.000000);

	Telinha = TextDrawCreate(-30.000000, -5.000000, "_"); // Quando Morre
	TextDrawBackgroundColor(Telinha, 100);
	TextDrawFont(Telinha, 1);
	TextDrawLetterSize(Telinha, 0.700000, 53.099998);
	TextDrawColor(Telinha, -1);
	TextDrawSetOutline(Telinha, 0);
	TextDrawSetProportional(Telinha, 1);
	TextDrawSetShadow(Telinha, 1);
	TextDrawUseBox(Telinha, 1);
	TextDrawBoxColor(Telinha, 80);
	TextDrawTextSize(Telinha, 650.000000, 30.000000);

	ScreenTelinha = TextDrawCreate(-30.000000, -5.000000, "_"); // Quando Morre
	TextDrawBackgroundColor(ScreenTelinha, 100);
	TextDrawFont(ScreenTelinha, 1);
	TextDrawLetterSize(ScreenTelinha, 0.700000, 53.099998);
	TextDrawColor(ScreenTelinha, -1);
	TextDrawSetOutline(ScreenTelinha, 0);
	TextDrawSetProportional(ScreenTelinha, 1);
	TextDrawSetShadow(ScreenTelinha, 1);
	TextDrawUseBox(ScreenTelinha, 1);
	TextDrawBoxColor(ScreenTelinha, 0x686261);
	TextDrawTextSize(ScreenTelinha, 650.000000, 30.000000);

	TelinhaPreta = TextDrawCreate(-30.000000, -5.000000, "_"); // Quando Morre
	TextDrawBackgroundColor(TelinhaPreta, 100);
	TextDrawFont(TelinhaPreta, 1);
	TextDrawLetterSize(TelinhaPreta, 0.700000, 53.099998);
	TextDrawColor(TelinhaPreta, -1);
	TextDrawSetOutline(TelinhaPreta, 0);
	TextDrawSetProportional(TelinhaPreta, 1);
	TextDrawSetShadow(TelinhaPreta, 1);
	TextDrawUseBox(TelinhaPreta, 1);
	TextDrawBoxColor(TelinhaPreta, 0x1D1B1AFF);
	TextDrawTextSize(TelinhaPreta, 650.000000, 30.000000);


	gTime = TextDrawCreate(605.000000,25.000000,"00:00"); // Clima / Horario
	TextDrawAlignment(gTime,3);
	TextDrawBackgroundColor(gTime,0x000000FF);
	TextDrawFont(gTime,3);
	TextDrawLetterSize(gTime,0.535,2.2);
	TextDrawColor(gTime,COLOR_TIME);
	TextDrawSetOutline(gTime,2);
	TextDrawSetProportional(gTime,1);
	TextDrawSetShadow(gTime,1);

	HitMark = TextDrawCreate(333.000000, 174.000000, "X");
    TextDrawBackgroundColor(HitMark, 255);
    TextDrawFont(HitMark, 1);
    TextDrawLetterSize(HitMark, 0.500000, 1.000000);
    TextDrawColor(HitMark, -1);
    TextDrawSetOutline(HitMark, 0);
    TextDrawSetProportional(HitMark, 1);
    TextDrawSetShadow(HitMark, 1);

    ChangeColor[0] = TextDrawCreate(22.474380, 130.416687, "box");
    TextDrawLetterSize(ChangeColor[0], 0.0, 19.894905); TextDrawTextSize(ChangeColor[0], 170.946334, 0.0);
    TextDrawAlignment(ChangeColor[0], 1); TextDrawColor(ChangeColor[0], -1);
    TextDrawUseBox(ChangeColor[0], 1); TextDrawBoxColor(ChangeColor[0], 102);
    TextDrawSetOutline(ChangeColor[0], 0); TextDrawBackgroundColor(ChangeColor[0], 255);
    TextDrawFont(ChangeColor[0], 1); TextDrawSetProportional(ChangeColor[0], 1);
    TextDrawSetShadow(ChangeColor[0], 0);

    new Float:X=25.0,Float:Y=130.0,count = 1;
    for(new i=1; i < sizeof(ChangeColor); i++)
    {
    	ChangeColor[i] = TextDrawCreate(X, Y, "box");
     	TextDrawBackgroundColor(ChangeColor[i], (AllCarColors[ColorsAvailable[i-1]]));
      	TextDrawLetterSize(ChangeColor[0], 0.0, 18.894905);
       	TextDrawTextSize(ChangeColor[i], 20.0, 20.0);TextDrawAlignment(ChangeColor[i], 1);
        TextDrawColor(ChangeColor[i], -1);TextDrawUseBox(ChangeColor[i], 1);
        TextDrawBoxColor(ChangeColor[i], 0);TextDrawSetOutline(ChangeColor[i], 0);
        TextDrawFont(ChangeColor[i], 5);TextDrawSetProportional(ChangeColor[i], 1);
        TextDrawSetShadow(ChangeColor[i], 1);TextDrawSetPreviewModel(ChangeColor[i], 19349);
        TextDrawSetPreviewRot(ChangeColor[i], -16.0, 0.0, -180.0, 0.7);TextDrawSetSelectable(ChangeColor[i], 1);

		X = X + 25;
  		count++;
    	if(count == 7)
     	{
      		Y = Y + 30.0;X = 25.0;
        	count = 1;
		}
	}
  	//==========================================================================
  	//Poker System
  	InitPokerTables();
  	//Grafitti System
  	print("[CARREGADO] Sistema de Grafite");
	return 1;
}
static GetHealthDots(playerid)
{
    new
        dots[64], Float: HP;
 
    GetPlayerHealth(playerid, HP);
    if(HP >= 160)
    	dots = "";
    else if(HP >= 150)
        dots = "{660000}";
    else if(HP >= 140)
        dots = "{660000}";
    else if(HP >= 130)
        dots = "{660000}";
    else if(HP >= 120)
        dots = "{660000}";
    else if(HP >= 110)
        dots = "{660000}";
    else if(HP >= 100)
        dots = "{660000}";
    else if(HP >= 90)
        dots = "{660000}";
    else if(HP >= 80)
        dots = "{660000}";
    else if(HP >= 70)
        dots = "{660000}";
    else if(HP >= 60)
        dots = "{660000}";
    else if(HP >= 50)
        dots = "{660000}";
    else if(HP >= 40)
        dots = "{660000}";
    else if(HP >= 30)
        dots = "{660000}";
    else if(HP >= 20)
        dots = "{660000}";
    else if(HP >= 10)
        dots = "{660000}";
    else if(HP >= 0)
        dots = "{660000}";
 
    return dots;
}

static GetArmorDots(playerid)
{
    new
        dots[64], Float: AR;
 
    GetPlayerArmour(playerid, AR);
 
    if(AR >= 100)
        dots = "{666666}";
    else if(AR >= 90)
        dots = "{666666}";
    else if(AR >= 80)
        dots = "{666666}";
    else if(AR >= 70)
        dots = "{666666}";
    else if(AR >= 60)
        dots = "{666666}";
    else if(AR >= 50)
        dots = "{666666}";
    else if(AR >= 40)
        dots = "{666666}";
    else if(AR >= 30)
        dots = "{666666}";
    else if(AR >= 20)
        dots = "{666666}";
    else if(AR >= 10)
        dots = "{666666}";
    else if(AR >= 0)
        dots = "{666666}";
 
    return dots;
}

//=========================================================================================================================================

forward CarregarFacs();
public CarregarFacs()
{
    new Rows, Fields, totalfacs = 0;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		new tmp[130];
		for(new i = 0; i < Rows; i++) if(i < MAX_FACCOES)
		{
			new idFac = i+1;
			cache_get_field_content(i, "fID", tmp);             FacInfo[idFac][fID] = strval(tmp);

            cache_get_field_content(i, "fCriada", tmp); 		FacInfo[idFac][fCriada] = strval(tmp);
            cache_get_field_content(i, "fNome", tmp); 			format(FacInfo[idFac][fNome], 34, "%s", tmp);
		 	cache_get_field_content(i, "fTipo", tmp);			FacInfo[idFac][fTipo] = strval(tmp);
		 	cache_get_field_content(i, "fComando", tmp);		FacInfo[idFac][fComando] = strval(tmp);

		 	cache_get_field_content(i, "fRank1", tmp); 			format(FacInfo[idFac][fRank1], 34, "%s", tmp);
		 	cache_get_field_content(i, "fRank2", tmp); 			format(FacInfo[idFac][fRank2], 34, "%s", tmp);
		 	cache_get_field_content(i, "fRank3", tmp); 			format(FacInfo[idFac][fRank3], 34, "%s", tmp);
		 	cache_get_field_content(i, "fRank4", tmp); 			format(FacInfo[idFac][fRank4], 34, "%s", tmp);
		 	cache_get_field_content(i, "fRank5", tmp); 			format(FacInfo[idFac][fRank5], 34, "%s", tmp);
		 	cache_get_field_content(i, "fRank6", tmp); 			format(FacInfo[idFac][fRank6], 34, "%s", tmp);
		 	cache_get_field_content(i, "fRank7", tmp); 			format(FacInfo[idFac][fRank7], 34, "%s", tmp);
		 	cache_get_field_content(i, "fRank8", tmp); 			format(FacInfo[idFac][fRank8], 34, "%s", tmp);
		 	cache_get_field_content(i, "fRank9", tmp); 			format(FacInfo[idFac][fRank9], 34, "%s", tmp);
		 	cache_get_field_content(i, "fRank10", tmp); 		format(FacInfo[idFac][fRank10], 34, "%s", tmp);
		 	cache_get_field_content(i, "fRank11", tmp); 		format(FacInfo[idFac][fRank11], 34, "%s", tmp);
		 	cache_get_field_content(i, "fRank12", tmp); 		format(FacInfo[idFac][fRank12], 34, "%s", tmp);

		 	cache_get_field_content(i, "fTrafNum", tmp);		FacInfo[idFac][fTrafNum] = strval(tmp);

		 	cache_get_field_content(i, "fMembros", tmp);		FacInfo[idFac][fMembros] = strval(tmp);
		 	cache_get_field_content(i, "fOrdem", tmp);			FacInfo[idFac][fOrdem] = strval(tmp);
			cache_get_field_content(i, "fArmarioPosX", tmp);    FacInfo[idFac][fArmarioPosX] = floatstr(tmp);
			cache_get_field_content(i, "fArmarioPosY", tmp);    FacInfo[idFac][fArmarioPosY] = floatstr(tmp);
			cache_get_field_content(i, "fArmarioPosZ", tmp);    FacInfo[idFac][fArmarioPosZ] = floatstr(tmp); 
			cache_get_field_content(i, "fArmarioVw", tmp);		FacInfo[idFac][fArmarioVw] = strval(tmp);

			new str[126];
			format(str, 126, "SELECT Fac FROM accounts WHERE Fac='%d'", FacInfo[idFac][fID]);
            mysql_function_query(Pipeline, str, true, "LoadMembrosFac", "d", idFac);
			gerarArmario(idFac);
		 	if(FacInfo[idFac][fCriada]) totalfacs++;
		}
	}
	//AtualizarMembrosFacs();

	printf("[CARREGADO] Total de facções: %d", totalfacs);
	return 1;
}

forward LoadMembrosFac(facid);
public LoadMembrosFac(facid)
{
    new Rows, Fields;
	cache_get_data(Rows, Fields);

	if(Rows) FacInfo[facid][fMembros] = Rows;
 	else FacInfo[facid][fMembros] = 0;
}
forward SalvarFaccoes();
public SalvarFaccoes(){
	for (new i = 1; i < MAX_FACCOES; i++){
		if (FacInfo[i][fCriada] == 1){
			SalvarFaccao(i);
		}
	}
}
forward SalvarFaccao(facid);
public SalvarFaccao(facid)
{
	if(FacInfo[facid][fCriada] != 0)
	{
		static query[2048];
		format(query, sizeof(query), "UPDATE `faccoes` SET `fCriada` = '%d', `fNome` = '%s', `fTipo` = '%d', `fRank1` = '%s', `fRank2` = '%s', `fRank3` = '%s', `fRank4` = '%s', `fRank5` = '%s', `fRank6` = '%s', `fRank7` = '%s', `fRank8` = '%s', `fRank9` = '%s', `fRank10` = '%s', `fRank11` = '%s', `fRank12` = '%s', `fTrafNum`='%d', `fMembros`='%d', `fOrdem`='%d', `fComando`='%d', `fArmarioPosX` = '%f', `fArmarioPosY` = '%f', `fArmarioPosZ` = '%f', `fArmarioVw` = '%d' WHERE `fID` = '%d'",
			FacInfo[facid][fCriada],
			FacInfo[facid][fNome],
			FacInfo[facid][fTipo],
			FacInfo[facid][fRank1],
			FacInfo[facid][fRank2],
			FacInfo[facid][fRank3],
			FacInfo[facid][fRank4],
			FacInfo[facid][fRank5],

			FacInfo[facid][fRank6],
			FacInfo[facid][fRank7],
			FacInfo[facid][fRank8],
			FacInfo[facid][fRank9],
			FacInfo[facid][fRank10],
			FacInfo[facid][fRank11],
			FacInfo[facid][fRank12],
		 	FacInfo[facid][fTrafNum],
		 	FacInfo[facid][fMembros],
		 	FacInfo[facid][fOrdem],
		    FacInfo[facid][fComando],
		    FacInfo[facid][fArmarioPosX],
			FacInfo[facid][fArmarioPosY],
			FacInfo[facid][fArmarioPosZ],
			FacInfo[facid][fArmarioVw],
			FacInfo[facid][fID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);
	}
	return 1;
}

//=========================================================================================================================================

forward CarregarPortoes();
public CarregarPortoes()
{
    new Rows, Fields, totalfacs = 0;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		new tmp[130];
		for(new i ; i < Rows; i++) if(i < MAX_PORTOES)
		{
			cache_get_field_content(i, "ptID", tmp);
			new IdFac = strval(tmp);
		 	PortaoInfo[IdFac][ptID] = strval(tmp);

            cache_get_field_content(i, "ptCriado", tmp); 		PortaoInfo[IdFac][ptCriado] = strval(tmp);

		 	cache_get_field_content(i, "ptX", tmp); 			PortaoInfo[IdFac][ptX] = floatstr(tmp);
		 	cache_get_field_content(i, "ptY", tmp); 			PortaoInfo[IdFac][ptY] = floatstr(tmp);
		 	cache_get_field_content(i, "ptZ", tmp); 			PortaoInfo[IdFac][ptZ] = floatstr(tmp);
		 	cache_get_field_content(i, "ptAX", tmp); 			PortaoInfo[IdFac][ptAX] = floatstr(tmp);
		 	cache_get_field_content(i, "ptAY", tmp); 			PortaoInfo[IdFac][ptAY] = floatstr(tmp);
		 	cache_get_field_content(i, "ptAZ", tmp); 			PortaoInfo[IdFac][ptAZ] = floatstr(tmp);

		 	cache_get_field_content(i, "ptWorld", tmp);			PortaoInfo[IdFac][ptWorld] = strval(tmp);
			cache_get_field_content(i, "ptInt", tmp);			PortaoInfo[IdFac][ptInt] = strval(tmp);
		    cache_get_field_content(i, "ptFac", tmp);			PortaoInfo[IdFac][ptFac] = strval(tmp);
		    cache_get_field_content(i, "ptCasa", tmp);			PortaoInfo[IdFac][ptCasa] = strval(tmp);
		    cache_get_field_content(i, "ptLock", tmp);			PortaoInfo[IdFac][ptLock] = strval(tmp);
			cache_get_field_content(i, "ptAberto", tmp);		PortaoInfo[IdFac][ptAberto] = strval(tmp);
			cache_get_field_content(i, "ptModelo", tmp);		PortaoInfo[IdFac][ptModelo] = strval(tmp);

			cache_get_field_content(i, "ptRX", tmp); 			PortaoInfo[IdFac][ptRX] = floatstr(tmp);
		 	cache_get_field_content(i, "ptRY", tmp); 			PortaoInfo[IdFac][ptRY] = floatstr(tmp);
		 	cache_get_field_content(i, "ptRZ", tmp); 			PortaoInfo[IdFac][ptRZ] = floatstr(tmp);
		 	cache_get_field_content(i, "ptRAX", tmp); 			PortaoInfo[IdFac][ptRAX] = floatstr(tmp);
		 	cache_get_field_content(i, "ptRAY", tmp); 			PortaoInfo[IdFac][ptRAY] = floatstr(tmp);
		 	cache_get_field_content(i, "ptRAZ", tmp); 			PortaoInfo[IdFac][ptRAZ] = floatstr(tmp);

		 	cache_get_field_content(i, "ptRange", tmp); 		PortaoInfo[IdFac][ptRange] = floatstr(tmp);

		 	cache_get_field_content(i, "ptTempo", tmp); 		PortaoInfo[IdFac][ptTempo] = strval(tmp);

		 	cache_get_field_content(i, "ptEmpresa", tmp); 		PortaoInfo[IdFac][ptEmpresa] = strval(tmp);

			if(PortaoInfo[IdFac][ptCriado] == 1)
			{
			    PortaoInfo[IdFac][ptObjeto] = CreateDynamicObject(PortaoInfo[IdFac][ptModelo], PortaoInfo[IdFac][ptX], PortaoInfo[IdFac][ptY], PortaoInfo[IdFac][ptZ], PortaoInfo[IdFac][ptRX], PortaoInfo[IdFac][ptRY], PortaoInfo[IdFac][ptRZ], PortaoInfo[IdFac][ptWorld], PortaoInfo[IdFac][ptInt]);
       			PortaoInfo[IdFac][ptAberto] = 0;
				if(PortaoInfo[IdFac][ptModelo] == 190)
				{
				    SetDynamicObjectMaterial(PortaoInfo[IdFac][ptModelo], 0, 5422, "idlewood6_lae", "LoadingDoorClean", 0xFFFFFFFF);
				}
				totalfacs++;
			}
		}
	}
	printf("[CARREGADO] Total de Portas/Portões [Fac/Casa/empresa]: %d", totalfacs);
	return 1;
}

forward SalvarPortao(IdPortao);
public SalvarPortao(IdPortao)
{
	if(PortaoInfo[IdPortao][ptCriado] != 0)
	{
		static query[2048];
		format(query, sizeof(query), "UPDATE `portoes` SET `ptCriado` = '%d', `ptX`= '%.4f', `ptY`= '%.4f', `ptZ`= '%.4f', `ptAX`= '%.4f', `ptAY`= '%.4f', `ptAZ`= '%.4f', `ptWorld` = '%d' WHERE `ptID` = '%d'",
			PortaoInfo[IdPortao][ptCriado],
			PortaoInfo[IdPortao][ptX],
			PortaoInfo[IdPortao][ptY],
			PortaoInfo[IdPortao][ptZ],
			PortaoInfo[IdPortao][ptAX],
			PortaoInfo[IdPortao][ptAY],
			PortaoInfo[IdPortao][ptAZ],
			PortaoInfo[IdPortao][ptWorld],
		    PortaoInfo[IdPortao][ptID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

		format(query, sizeof(query), "UPDATE `portoes` SET `ptInt` = '%d', `ptFac` = '%d', `ptCasa` = '%d', `ptLock` = '%d', `ptAberto` = '%d', `ptModelo` = '%d',`ptRX`= '%.4f', `ptRY`= '%.4f', `ptRZ`= '%.4f' WHERE `ptID` = '%d'",
			PortaoInfo[IdPortao][ptInt],
			PortaoInfo[IdPortao][ptFac],
			PortaoInfo[IdPortao][ptCasa],
			PortaoInfo[IdPortao][ptLock],
			PortaoInfo[IdPortao][ptAberto],
			PortaoInfo[IdPortao][ptModelo],
			PortaoInfo[IdPortao][ptRX],
			PortaoInfo[IdPortao][ptRY],
			PortaoInfo[IdPortao][ptRZ],
		    PortaoInfo[IdPortao][ptID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

		format(query, sizeof(query), "UPDATE `portoes` SET `ptRAX`= '%.4f', `ptRAY`= '%.4f', `ptRAZ`= '%.4f', `ptRange` = '%.4f', `ptTempo` = '%d',`ptEmpresa` = '%d' WHERE `ptID` = '%d'",
			PortaoInfo[IdPortao][ptRAX],
			PortaoInfo[IdPortao][ptRAY],
			PortaoInfo[IdPortao][ptRAZ],
			PortaoInfo[IdPortao][ptRange],
			PortaoInfo[IdPortao][ptTempo],
			PortaoInfo[IdPortao][ptEmpresa],
		    PortaoInfo[IdPortao][ptID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);
	}
	return 1;
}

//=========================================================================================================================================

forward LoadItens();
public LoadItens()
{
    new Rows, Fields, totalitens = 0, totalitensChao = 0, ItemNaPos0 = 0;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		new tmp[130];
		for(new i ; i < Rows; i++) if(i < MAX_ITENS)
		{
			cache_get_field_content(i, "iID", tmp);
			new ItemID = strval(tmp);
		 	ItemInfo[ItemID][iID] = strval(tmp);

            cache_get_field_content(i, "iCriado", tmp); 		ItemInfo[ItemID][iCriado] = strval(tmp);
		 	cache_get_field_content(i, "iObj", tmp); 			ItemInfo[ItemID][iObj] = strval(tmp);
		 	cache_get_field_content(i, "iCom", tmp); 			ItemInfo[ItemID][iCom] = strval(tmp);
			cache_get_field_content(i, "iNome", tmp); 			format(ItemInfo[ItemID][iNome], 32, "%s", tmp);

            cache_get_field_content(i, "iX", tmp); 				ItemInfo[ItemID][iX] = floatstr(tmp);
            cache_get_field_content(i, "iY", tmp); 				ItemInfo[ItemID][iY] = floatstr(tmp);
            cache_get_field_content(i, "iZ", tmp); 				ItemInfo[ItemID][iZ] = floatstr(tmp);
            cache_get_field_content(i, "iRX", tmp); 			ItemInfo[ItemID][iRX] = floatstr(tmp);
            cache_get_field_content(i, "iRY", tmp); 			ItemInfo[ItemID][iRY] = floatstr(tmp);
            cache_get_field_content(i, "iRZ", tmp); 			ItemInfo[ItemID][iRZ] = floatstr(tmp);
            cache_get_field_content(i, "iSX", tmp); 			ItemInfo[ItemID][iSX] = floatstr(tmp);
            cache_get_field_content(i, "iSY", tmp); 			ItemInfo[ItemID][iSY] = floatstr(tmp);
            cache_get_field_content(i, "iSZ", tmp); 			ItemInfo[ItemID][iSZ] = floatstr(tmp);

            cache_get_field_content(i, "iDrop", tmp); 			ItemInfo[ItemID][iDrop] = strval(tmp);
            cache_get_field_content(i, "iInt", tmp); 			ItemInfo[ItemID][iInt] = strval(tmp);
            cache_get_field_content(i, "iWorld", tmp); 			ItemInfo[ItemID][iWorld] = strval(tmp);

            cache_get_field_content(i, "iUsando", tmp); 		ItemInfo[ItemID][iUsando] = strval(tmp);
            cache_get_field_content(i, "iTipo", tmp); 			ItemInfo[ItemID][iTipo] = strval(tmp);

            cache_get_field_content(i, "iBone", tmp); 			ItemInfo[ItemID][iBone] = strval(tmp);

            if(ItemInfo[ItemID][iCriado] != 0)
			{
				totalitens++;
			}
			if(ItemInfo[ItemID][iDrop] == 1 && ItemInfo[ItemID][iX] != 0.0)
			{
   				ItemInfo[ItemID][iItem] = CreateDynamicObject(ItemInfo[ItemID][iObj], ItemInfo[ItemID][iX], ItemInfo[ItemID][iY], ItemInfo[ItemID][iZ], ItemInfo[ItemID][iRX], ItemInfo[ItemID][iRY], ItemInfo[ItemID][iRZ], ItemInfo[ItemID][iWorld],  ItemInfo[ItemID][iInt]);
                totalitensChao++;
			}
			if(ItemInfo[ItemID][iDrop] == 1 && ItemInfo[ItemID][iX] == 0.0)
			{
			    ItemNaPos0++;
			}
		}
	}
	printf("[CARREGADO] Itens no Servidor: %d | Itens no Chão: %d | Itens na Pos 0: %d",totalitens, totalitensChao, ItemNaPos0);
	return 1;
}

forward SalvarItem(ItemID);
public SalvarItem(ItemID)
{
	if(ItemInfo[ItemID][iCriado] != 0)
	{
		static query[2048];
		format(query, sizeof(query), "UPDATE `itens` SET `iCriado` = '%d', `iObj` = '%d', `iCom` = '%d', `iNome` = '%s', `iX` = '%.4f', `iY` = '%.4f', `iZ` = '%.4f', `iRX` = '%.4f', `iRY` = '%.4f', `iRZ` = '%.4f', `iSX` = '%.4f', `iSY` = '%.4f', `iSZ`= '%.4f', `iDrop` = '%d', `iInt` = '%d', `iWorld` = '%d', `iUsando` = '%d', `iTipo` = '%d', `iBone`='%d' WHERE `iID` = '%d'",
			ItemInfo[ItemID][iCriado],
			ItemInfo[ItemID][iObj],
			ItemInfo[ItemID][iCom],
			ItemInfo[ItemID][iNome],
			ItemInfo[ItemID][iX],
			ItemInfo[ItemID][iY],
			ItemInfo[ItemID][iZ],
			ItemInfo[ItemID][iRX],
			ItemInfo[ItemID][iRY],
			ItemInfo[ItemID][iRZ],
			ItemInfo[ItemID][iSX],
			ItemInfo[ItemID][iSY],
			ItemInfo[ItemID][iSZ],
			ItemInfo[ItemID][iDrop],
		    ItemInfo[ItemID][iInt],
		    ItemInfo[ItemID][iWorld],
		    ItemInfo[ItemID][iUsando],
            ItemInfo[ItemID][iTipo],
            ItemInfo[ItemID][iBone],
		    ItemInfo[ItemID][iID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);
	}
	return 1;
}

//=========================================================================================================================================
forward LoadAmmos();
public LoadAmmos()
{
	//===========================================
    new Rows, Fields,totalarmasChao = 0;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		new tmp[130];
		for(new i ; i < Rows; i++) if(i < MAX_ARMAS)
		{
			cache_get_field_content(i, "CartuxoID", tmp);
			new IdArma = strval(tmp);
		 	CartuxoData[IdArma][CartuxoID] = strval(tmp);

		 	cache_get_field_content(i, "CartuxoTipo", tmp);			CartuxoData[IdArma][CartuxoTipo] = strval(tmp);
   			cache_get_field_content(i, "cartuxoX", tmp); 			CartuxoData[IdArma][cartuxoX] = floatstr(tmp);
            cache_get_field_content(i, "cartuxoY", tmp); 			CartuxoData[IdArma][cartuxoY] = floatstr(tmp);
			cache_get_field_content(i, "cartuxoZ", tmp); 			CartuxoData[IdArma][cartuxoZ] = floatstr(tmp);
            cache_get_field_content(i, "cartuxoRX", tmp); 			CartuxoData[IdArma][cartuxoRX] = floatstr(tmp);
            cache_get_field_content(i, "cartuxoRY", tmp); 			CartuxoData[IdArma][cartuxoRY] = floatstr(tmp);
            cache_get_field_content(i, "cartuxoRZ", tmp); 			CartuxoData[IdArma][cartuxoRZ] = floatstr(tmp);
			cache_get_field_content(i, "cartuxoInt", tmp); 			CartuxoData[IdArma][cartuxoInt] = strval(tmp);
			cache_get_field_content(i, "cartuxoWorld", tmp); 		CartuxoData[IdArma][cartuxoWorld] = strval(tmp);
			cache_get_field_content(i, "cartuxoQnt", tmp); 			CartuxoData[IdArma][cartuxoQnt] = strval(tmp);

			if(CartuxoData[IdArma][CartuxoTipo] != 0)
			{
			    CartuxoData[i][cartuxoEditando] = 0;
			    CartuxoData[i][cartuxoObj] = CreateDynamicObject(2040, CartuxoData[i][cartuxoX], CartuxoData[i][cartuxoY], CartuxoData[i][cartuxoZ], 0, 0, 0,CartuxoData[i][cartuxoWorld],CartuxoData[i][cartuxoInt]);
				totalarmasChao++;
			}
		}
	}
	printf("[CARREGADO] Cartuchos no chão do Servidor: %d ", totalarmasChao);
	return 1;
}

forward SalvarAmmos(armaid);
public SalvarAmmos(armaid)
{
	if(CartuxoData[armaid][CartuxoTipo] != 0)
	{
		static query[2048];
		format(query, sizeof(query), "UPDATE `cartuxo` SET `CartuxoTipo` = '%d', `cartuxoX` = '%.4f', `cartuxoY` = '%.4f', `cartuxoZ` = '%.4f', `cartuxoRX` = '%.4f', `cartuxoRY` = '%.4f', `cartuxoRZ`= '%.4f', `cartuxoInt` = '%d', `cartuxoWorld` = '%d', `cartuxoQnt` = '%d' WHERE `CartuxoID` = '%d'",
			CartuxoData[armaid][CartuxoTipo],
			CartuxoData[armaid][cartuxoX],
			CartuxoData[armaid][cartuxoY],
			CartuxoData[armaid][cartuxoZ],
			CartuxoData[armaid][cartuxoRX],
			CartuxoData[armaid][cartuxoRY],
			CartuxoData[armaid][cartuxoRZ],
			CartuxoData[armaid][cartuxoInt],
			CartuxoData[armaid][cartuxoWorld],
			CartuxoData[armaid][cartuxoQnt],
		    CartuxoData[armaid][CartuxoID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);
	}
	return 1;
}

forward SalvarDrogas(id);
public SalvarDrogas(id)
{
	if(DropInfo[id][dType] != 0)
	{
		static query[2048];
		format(query, sizeof(query), "UPDATE `drop_drug` SET `dType` = '%d', `dX` = '%.4f', `dY` = '%.4f', `dZ` = '%.4f', `dRX` = '%.4f', `dRY` = '%.4f', `dRZ`= '%.4f', `dAmmo` = '%d', `dInt` = '%d', `dWorld` = '%d' WHERE `dID` = '%d'",
			DropInfo[id][dType],
			DropInfo[id][dX],
 			DropInfo[id][dY],
    		DropInfo[id][dZ],
	 		DropInfo[id][dRX],
 			DropInfo[id][dRY],
    		DropInfo[id][dRZ],
    		DropInfo[id][dAmmo],
    		DropInfo[id][dInt],
    		DropInfo[id][dWorld],
   			DropInfo[id][dID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);
	}
	return 1;
}

forward LoadDrugs();
public LoadDrugs()
{
	//===========================================
    new Rows, Fields, totalarmas = 0, ArmasNaPos0 = 0;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		new tmp[130];
		for(new i ; i < Rows; i++) if(i < MAX_ARMAS)
		{
			cache_get_field_content(i, "dID", tmp);
			new IdArma = strval(tmp);
		 	DropInfo[IdArma][dID] = strval(tmp);
            cache_get_field_content(i, "dType", tmp); 			DropInfo[IdArma][dType] = strval(tmp);

            cache_get_field_content(i, "dX", tmp); 				DropInfo[IdArma][dX] = floatstr(tmp);
            cache_get_field_content(i, "dY", tmp); 				DropInfo[IdArma][dY] = floatstr(tmp);
            cache_get_field_content(i, "dZ", tmp); 				DropInfo[IdArma][dZ] = floatstr(tmp);
		 	cache_get_field_content(i, "dRX", tmp); 			DropInfo[IdArma][dRX] = floatstr(tmp);
            cache_get_field_content(i, "dRY", tmp); 			DropInfo[IdArma][dRY] = floatstr(tmp);
            cache_get_field_content(i, "dRZ", tmp); 			DropInfo[IdArma][dRZ] = floatstr(tmp);

		 	cache_get_field_content(i, "dAmmo", tmp); 			DropInfo[IdArma][dAmmo] = strval(tmp);
			cache_get_field_content(i, "dInt", tmp); 			DropInfo[IdArma][dInt] = strval(tmp);
			cache_get_field_content(i, "dWorld", tmp); 			DropInfo[IdArma][dWorld] = strval(tmp);

			if(DropInfo[IdArma][dX] != 0.0)
			{
			    switch(DropInfo[IdArma][dType])
			    {
					case 1,2,3: DropInfo[IdArma][dObject] = CreateDynamicObject(-2300, DropInfo[IdArma][dX], DropInfo[IdArma][dY], DropInfo[IdArma][dZ], DropInfo[IdArma][dRX], DropInfo[IdArma][dRY], DropInfo[IdArma][dRZ], DropInfo[IdArma][dWorld],  DropInfo[IdArma][dInt]);
					case 4,5,6: DropInfo[IdArma][dObject] = CreateDynamicObject(-2301, DropInfo[IdArma][dX], DropInfo[IdArma][dY], DropInfo[IdArma][dZ], DropInfo[IdArma][dRX], DropInfo[IdArma][dRY], DropInfo[IdArma][dRZ], DropInfo[IdArma][dWorld],  DropInfo[IdArma][dInt]);
					case 7,8,9: DropInfo[IdArma][dObject] = CreateDynamicObject(-2302, DropInfo[IdArma][dX], DropInfo[IdArma][dY], DropInfo[IdArma][dZ], DropInfo[IdArma][dRX], DropInfo[IdArma][dRY], DropInfo[IdArma][dRZ], DropInfo[IdArma][dWorld],  DropInfo[IdArma][dInt]);
					case 10,11,12: DropInfo[IdArma][dObject] = CreateDynamicObject(-2303, DropInfo[IdArma][dX], DropInfo[IdArma][dY], DropInfo[IdArma][dZ], DropInfo[IdArma][dRX], DropInfo[IdArma][dRY], DropInfo[IdArma][dRZ], DropInfo[IdArma][dWorld],  DropInfo[IdArma][dInt]);
					case 13,14,15: DropInfo[IdArma][dObject] = CreateDynamicObject(-2303, DropInfo[IdArma][dX], DropInfo[IdArma][dY], DropInfo[IdArma][dZ], DropInfo[IdArma][dRX], DropInfo[IdArma][dRY], DropInfo[IdArma][dRZ], DropInfo[IdArma][dWorld],  DropInfo[IdArma][dInt]);
					case 16: DropInfo[IdArma][dObject] = CreateDynamicObject(-2306, DropInfo[IdArma][dX], DropInfo[IdArma][dY], DropInfo[IdArma][dZ], DropInfo[IdArma][dRX], DropInfo[IdArma][dRY], DropInfo[IdArma][dRZ], DropInfo[IdArma][dWorld],  DropInfo[IdArma][dInt]);
				}
				totalarmas++;
			}
			if(DropInfo[IdArma][dX] == 0.0)
			{
			    ArmasNaPos0++;
			}
		}
	}
	printf("[CARREGADO] Drogas no chão do Servidor: %d | Drogas na Pos 0: %d",totalarmas, ArmasNaPos0);
	return 1;
}

forward LoadArmas();
public LoadArmas()
{
	//===========================================
    new Rows, Fields, totalarmas = 0, totalarmasChao = 0, ArmasNaPos0 = 0;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		new tmp[130];
		for(new i = 1; i < Rows; i++) if(i < MAX_ARMAS)
		{
			cache_get_field_content(i, "ArmaID", tmp);
			new IdArma = strval(tmp);
		 	ArmaData[IdArma][ArmaID] = strval(tmp);

            cache_get_field_content(i, "Com", tmp); 			ArmaData[IdArma][ArmaCom] = strval(tmp);
		 	cache_get_field_content(i, "CompradaPor", tmp);		format(ArmaData[IdArma][ArmaCompradaPor], 24, "%s", tmp);
            cache_get_field_content(i, "CompradaData", tmp); 	format(ArmaData[IdArma][ArmaCompradaData], 32, "%s", tmp);
		 	cache_get_field_content(i, "Numeracao", tmp); 		ArmaData[IdArma][ArmaNumeracao] = strval(tmp);
		 	cache_get_field_content(i, "Modelo", tmp); 			ArmaData[IdArma][ArmaModelo] = strval(tmp);
		 	cache_get_field_content(i, "Ammo", tmp); 			ArmaData[IdArma][ArmaAmmo] = strval(tmp);
		 	cache_get_field_content(i, "Cor", tmp); 			ArmaData[IdArma][ArmaCor] = strval(tmp);
		 	cache_get_field_content(i, "NoChao", tmp); 			ArmaData[IdArma][ArmaNoChao] = strval(tmp);
   			cache_get_field_content(i, "ArmaX", tmp); 			ArmaData[IdArma][ArmaX] = floatstr(tmp);
            cache_get_field_content(i, "ArmaY", tmp); 			ArmaData[IdArma][ArmaY] = floatstr(tmp);
			cache_get_field_content(i, "ArmaZ", tmp); 			ArmaData[IdArma][ArmaZ] = floatstr(tmp);
            cache_get_field_content(i, "ArmaRX", tmp); 			ArmaData[IdArma][ArmaRX] = floatstr(tmp);
            cache_get_field_content(i, "ArmaRY", tmp); 			ArmaData[IdArma][ArmaRY] = floatstr(tmp);
            cache_get_field_content(i, "ArmaRZ", tmp); 			ArmaData[IdArma][ArmaRZ] = floatstr(tmp);
			cache_get_field_content(i, "Inte", tmp); 			ArmaData[IdArma][ArmaInt] = strval(tmp);
			cache_get_field_content(i, "World", tmp); 			ArmaData[IdArma][ArmaWorld] = strval(tmp);
			cache_get_field_content(i, "ArmaExtra", tmp); 		ArmaData[IdArma][ArmaExtra] = strval(tmp);
			cache_get_field_content(i, "ArmaRGB", tmp); 		ArmaData[IdArma][ArmaRGB] = strval(tmp);
			cache_get_field_content(i, "ArmaRaspada", tmp); 	ArmaData[IdArma][ArmaRaspada] = strval(tmp);

			if(i == 0)
			{
			    ArmaData[0][ArmaModelo] = 0;
			    ArmaData[0][ArmaAmmo] = 0;
			    ArmaData[0][ArmaCom] = 0;
			}
			if(ArmaData[IdArma][ArmaExtra] > 5)
			{
			    ArmaData[IdArma][ArmaExtra] = 0;
			}
            if(ArmaData[IdArma][ArmaModelo] != 0)
			{
			    ArmaData[IdArma][ArmaEditando] = 0;
				totalarmas++;
			}
			if(ArmaData[IdArma][ArmaNoChao] == 1 && ArmaData[IdArma][ArmaX] != 0.0)
			{
   				if(ArmaData[IdArma][ArmaExtra] == 1) ArmaData[IdArma][ArmaObj] = CreateDynamicObject( 2045, ArmaData[IdArma][ArmaX], ArmaData[IdArma][ArmaY],ArmaData[IdArma][ArmaZ], ArmaData[IdArma][ArmaRX], ArmaData[IdArma][ArmaRY], ArmaData[IdArma][ArmaRZ], ArmaData[IdArma][ArmaWorld],  ArmaData[IdArma][ArmaInt]);
   				else ArmaData[IdArma][ArmaObj] = CreateDynamicObject(GunObjects[ArmaData[IdArma][ArmaModelo]], ArmaData[IdArma][ArmaX], ArmaData[IdArma][ArmaY],ArmaData[IdArma][ArmaZ], ArmaData[IdArma][ArmaRX], ArmaData[IdArma][ArmaRY], ArmaData[IdArma][ArmaRZ], ArmaData[IdArma][ArmaWorld],  ArmaData[IdArma][ArmaInt]);
                totalarmasChao++;
			}
			if(ArmaData[IdArma][ArmaNoChao] == 1 && ArmaData[IdArma][ArmaX] == 0.0)
			{
			    ArmasNaPos0++;
			}
		}
	}
	printf("[CARREGADO] Armas no Servidor: %d | Armas no Chão: %d | Armas na Pos 0: %d",totalarmas, totalarmasChao, ArmasNaPos0);
	return 1;
}

forward SalvarArma(armaid);
public SalvarArma(armaid)
{
	if(ArmaData[armaid][ArmaModelo] != 0)
	{
		static query[2048];
		format(query, sizeof(query), "UPDATE `droparmas` SET `Com` = '%d', `CompradaData` = '%s', `Numeracao` = '%d', `Modelo` = '%d', `Ammo` = '%d', `Cor` = '%d', `NoChao` = '%d', `ArmaX` = '%.4f', `ArmaY` = '%.4f', `ArmaZ` = '%.4f', `ArmaRX` = '%.4f', `ArmaRY` = '%.4f', `ArmaRZ`= '%.4f', `Inte` = '%d', `World` = '%d', `ArmaExtra` = '%d',`ArmaRGB`='%s', `ArmaRaspada`='%d' WHERE `ArmaID` = '%d'",
			ArmaData[armaid][ArmaCom],
			ArmaData[armaid][ArmaCompradaData],
			ArmaData[armaid][ArmaNumeracao],
			ArmaData[armaid][ArmaModelo],
			ArmaData[armaid][ArmaAmmo],
			ArmaData[armaid][ArmaCor],
			ArmaData[armaid][ArmaNoChao],
			ArmaData[armaid][ArmaX],
			ArmaData[armaid][ArmaY],
			ArmaData[armaid][ArmaZ],
			ArmaData[armaid][ArmaRX],
			ArmaData[armaid][ArmaRY],
			ArmaData[armaid][ArmaRZ],
			ArmaData[armaid][ArmaInt],
			ArmaData[armaid][ArmaWorld],
			ArmaData[armaid][ArmaExtra],
			ArmaData[armaid][ArmaRGB],
			ArmaData[armaid][ArmaRaspada],
		    ArmaData[armaid][ArmaID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);
	}
	return 1;
}

forward EntregandoArmaSQL(playerid, armaid, extra, equipar, raspada);
public EntregandoArmaSQL(playerid, armaid, extra, equipar, raspada)
{
	new ammo;
	if(PlayerInfo[playerid][pArmaMao] > 0)
	{
	    SCM(playerid, COLOR_LIGHTRED, "Você já tem uma arma em mãos, guarde-a antes.");
	    return 1;
	}
	else
	{
		new ArmaEncontrada = 0;
		for(new i; i < MAX_ARMAS; i++)
		{
		    if(ArmaData[i][ArmaCor] == 1)
		    {
		        ArmaEncontrada = i;
				break;
		    }
		}
		if(ArmaEncontrada == 0)
		{
		    if(armaid == 41) ammo = 2000;
			else if(armaid == 42) ammo = 2000;
			else if(armaid == 43) ammo = 2000;
			else if(armaid == 46) ammo = 1;
			else if(armaid == 1) ammo = 1;
			else if(armaid == 2) ammo = 1;
			else if(armaid == 3) ammo = 1;
			else if(armaid == 4) ammo = 1;
			else if(armaid == 5) ammo = 1;
			else if(armaid == 6) ammo = 1;
			else if(armaid == 7) ammo = 1;
			else if(armaid == 8) ammo = 1;
			else if(armaid == 16) ammo = 1;
			else if(armaid == 17) ammo = 1;
			else ammo = 0;

			new str2[520];
    		format(str2,sizeof(str2),"INSERT INTO droparmas (Com,Modelo,Ammo,CompradaPor) VALUES ('%d','%d','%d','%s')",PlayerInfo[playerid][pID],armaid,ammo,PlayerName(playerid,0));
    		mysql_function_query(Pipeline, str2, true, "ArmaEntregueComSucesso", "dddddd",playerid,armaid,ammo,extra,equipar,raspada);
		}
		else
		{
      		new Numeracao = randomEx(1000, 99999999);
			new Numerac = 0;
		    for(new i = 0; i < MAX_ARMAS; i++)
		    {
		        if(ArmaData[i][ArmaNumeracao] != Numeracao)
		        {
		            Numerac = Numeracao;
		            break;
		        }
		    }
		    if(Numerac != 0)
		    {
		        if(armaid == 41) ammo = 2000;
				else if(armaid == 42) ammo = 2000;
				else if(armaid == 43) ammo = 2000;
				else if(armaid == 46) ammo = 1;
				else if(armaid == 1) ammo = 1;
				else if(armaid == 2) ammo = 1;
				else if(armaid == 3) ammo = 1;
				else if(armaid == 4) ammo = 1;
				else if(armaid == 5) ammo = 1;
				else if(armaid == 6) ammo = 1;
				else if(armaid == 7) ammo = 1;
				else if(armaid == 8) ammo = 1;
				else if(armaid == 16) ammo = 1;
				else if(armaid == 17) ammo = 1;
				else ammo = 0;

		        GivePlayerWeapon(playerid,armaid,ammo);

				new id = ArmaData[ArmaEncontrada][ArmaID];
			    PlayerInfo[playerid][pArmaMao] = id;
			    ArmaData[id][ArmaModelo] = armaid;
			    ArmaData[id][ArmaCom] = PlayerInfo[playerid][pID];
			    ArmaData[id][ArmaAmmo] = ammo;
		     	ArmaData[id][ArmaExtra] = extra;

		     	if(raspada == 1) ArmaData[id][ArmaRaspada] = 1;
		     	else ArmaData[id][ArmaRaspada] = 0;

				if(ArmaData[id][ArmaExtra] == 1) SetPlayerAttachedObject(playerid, 0, 2045, 6, 90.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[id][ArmaRGB]);
				else SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaData[id][ArmaModelo]], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[id][ArmaRGB]);

		        new hour, mins, sec;
				new d,m,y;
				new DataSalvar[124];
				getdate(y,m,d);
				gettime(hour,mins,sec);

		        new strh[24], hourstr[4], minstr[4], secstr[4];

				if(hour < 10) { format(hourstr,sizeof(hourstr),"0%d",hour); } else { format(hourstr,sizeof(hourstr),"%d",hour); }
				if(mins < 10) { format(minstr,sizeof(minstr),"0%d",mins); } else { format(minstr,sizeof(minstr),"%d",mins); }
				if(sec < 10) { format(secstr,sizeof(secstr),"0%d",sec); } else { format(secstr,sizeof(secstr),"%d",sec); }
				format(strh,sizeof(strh),"%s:%s:%s",hourstr,minstr,secstr);

				format(DataSalvar,sizeof(DataSalvar),"%d-%d-%d - %s",d,m,y,strh);

				format(ArmaData[id][ArmaCompradaData],33,"%s", DataSalvar);

		        ArmaData[id][ArmaNumeracao] = Numeracao;
		        ArmaData[id][ArmaModelo] = armaid;
		        ArmaData[id][ArmaCor] = 0;

		        format(ArmaData[id][ArmaCompradaPor],32,"%s", PlayerName(playerid,0));

		        //new DataSave[124];
		    	//format(DataSave,sizeof(DataSave),"[2] Arma ID: %d | Numeração: %d | Comprada Por: %s", id, ArmaData[id][ArmaNumeracao], ArmaData[id][ArmaCompradaPor]);
		    	//SCM(playerid, -1, DataSave);

				if(equipar == 1)
				{
				    new strl1[24];
				    if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ) format(strl1, sizeof(strl1), "PMESP");
                    else if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ) format(strl1, sizeof(strl1), "PCESP");
                    else if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_CBERJ) format(strl1, sizeof(strl1), "GBESP");
				    else if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_GOV) format(strl1, sizeof(strl1), "GOV SP");
				    else if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_TJRP) format(strl1, sizeof(strl1), "TJSP");
					else if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_BANK) format(strl1, sizeof(strl1), "PROTEGE");
					else format(strl1, sizeof(strl1), "Nenhum");

	                new strl[326];
				   	format(strl, sizeof(strl), "%s equipou uma %s [%s][%d].", ArmaData[id][ArmaCompradaPor], GunNames[ArmaData[id][ArmaModelo]], strl1, Numeracao);
				  	LogEquipar_P(playerid,strl);
				}

		    	SalvarArma(id);
		    }
		}
	}
	return 1;
}

forward ArmaEntregueComSucesso(playerid,armaid,ammo,extra,equipar,raspada);
public ArmaEntregueComSucesso(playerid,armaid,ammo,extra,equipar,raspada)
{
    new id = cache_insert_id();
    ArmaData[id][ArmaID] = id;
    PlayerInfo[playerid][pArmaMao] = id;
    ArmaData[id][ArmaModelo] = armaid;
    ArmaData[id][ArmaCom] = PlayerInfo[playerid][pID];

	if(extra == 1) SetPlayerAttachedObject(playerid, 0, 2045, 6);
	else SetPlayerAttachedObject(playerid, 0, GunObjects[armaid], 6);

	if(armaid == 41) GivePlayerWeapon(playerid,armaid,2000);
	else if(armaid == 42) GivePlayerWeapon(playerid,armaid,2000);
	else if(armaid == 43) GivePlayerWeapon(playerid,armaid,50);
	else GivePlayerWeapon(playerid,armaid,0);

    new Numeracao = randomEx(1000, 99999999);
	new Numerac = 0;
    for(new i = 0; i < MAX_ARMAS; i++)
    {
        if(ArmaData[i][ArmaNumeracao] != Numeracao)
        {
            Numerac = Numeracao;
            break;
        }
    }
    if(Numerac != 0)
    {
        new hour, mins, sec;
		new d,m,y;
		new DataSalvar[124];
		getdate(y,m,d);
		gettime(hour,mins,sec);

        new strh[24], hourstr[4], minstr[4], secstr[4];

		if(hour < 10) { format(hourstr,sizeof(hourstr),"0%d",hour); } else { format(hourstr,sizeof(hourstr),"%d",hour); }
		if(mins < 10) { format(minstr,sizeof(minstr),"0%d",mins); } else { format(minstr,sizeof(minstr),"%d",mins); }
		if(sec < 10) { format(secstr,sizeof(secstr),"0%d",sec); } else { format(secstr,sizeof(secstr),"%d",sec); }
		format(strh,sizeof(strh),"%s:%s:%s",hourstr,minstr,secstr);

		format(DataSalvar,sizeof(DataSalvar),"%d-%d-%d - %s",d,m,y,strh);

		format(ArmaData[id][ArmaCompradaData],33,"%s", DataSalvar);

        ArmaData[id][ArmaNumeracao] = Numeracao;
        ArmaData[id][ArmaModelo] = armaid;

        if(raspada == 1) ArmaData[id][ArmaRaspada] = 1;
 		else ArmaData[id][ArmaRaspada] = 0;

        format(ArmaData[id][ArmaCompradaPor],32,"%s", PlayerName(playerid,0));

        //new DataSave[124];
    	//format(DataSave,sizeof(DataSave),"[1] Arma ID: %d | Numeracao: %d | Comprada Por: %s", id, ArmaData[id][ArmaNumeracao], ArmaData[id][ArmaCompradaPor]);
    	//SCM(playerid, -1, DataSave);

    	if(equipar == 1)
		{
  			new strl1[24];
	    	if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ) format(strl1, sizeof(strl1), "PMESP");
            else if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ) format(strl1, sizeof(strl1), "PCESP");
            else if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_CBERJ) format(strl1, sizeof(strl1), "GBESP");
		    else if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_GOV) format(strl1, sizeof(strl1), "GOV SP");
		    else if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_TJRP) format(strl1, sizeof(strl1), "TJRP");
			else if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_BANK) format(strl1, sizeof(strl1), "PROTEGE");
			else format(strl1, sizeof(strl1), "Nenhum");

			new strl[326];
  			format(strl, sizeof(strl), "%s equipou uma %s [%s][%d].", ArmaData[id][ArmaCompradaPor], GunNames[ArmaData[id][ArmaModelo]], strl1,Numeracao);
  			LogEquipar_P(playerid,strl);
		}

    	SalvarArma(id);
    }
	return 1;
}

CMD:bichos(playerid, params[]) 
{
	if(!PlayerInfo[playerid][pLogado]) return 1;
	MostrarMenuTabela(playerid);
	return 1;
}
 
CMD:jogodobicho(playerid, params[]) 
{
	if(!PlayerInfo[playerid][pLogado]) return 1;
	MostrarMenuBicho(playerid);
	return 1;
}

forward FecharBicho(playerid);
public FecharBicho(playerid) 
{
	PodeApostarBicho = false;
	new Msg[512];
	format(Msg, sizeof(Msg), "[Jogo Do Bicho] {ffffff}O resultado irá sair daqui 15 segundos! As apostas estão fechadas.");
	SendClientMessage(playerid, COLOR_LIGHTRED, Msg);
	SetTimerEx("ResultadoBicho", 5000, false, "d");
	return 1;
}

forward ResultadoBicho(playerid);
public ResultadoBicho(playerid) 
{
	new resultado_mil = randomEx(10,99),
	resultado_dez = randomEx(10,99),
	animal = PegarBicho(resultado_dez),
	ganhadores,
	stringB[256],
	Msg[256];
	format(Msg, sizeof(Msg), "[Jogo Do Bicho] {ffffff}O número sorteado foi: %d%d!", resultado_mil, resultado_dez);
	SendClientMessage(playerid, COLOR_LIGHTRED, Msg);
	format(Msg, sizeof(Msg), "[Jogo Do Bicho] {ffffff}Animal: %s (Grupo %d) - Dezena %d!", TabelaBichos[animal][Bicho], animal, resultado_dez);
	SendClientMessage(playerid, COLOR_LIGHTRED, Msg);
	printf("Número: %d%d | Animal: %s (dezena %d)", resultado_mil, resultado_dez, TabelaBichos[animal][Bicho], resultado_dez);
	for(new i;i < sizeof(Apostadores);i++) 
	{
		if(Apostadores[i][Animal] == animal) 
		{
			ganhadores++;
			//GivePlayerMoney(i, (Apostadores[i][Aposta] * 14));
			PlayerInfo[playerid][pApostouBicho] = 0;
			PlayerInfo[playerid][pGrana] += (Apostadores[i][Aposta] * 14);
			format(stringB, sizeof(stringB), "[Jogo Do Bicho] {ffffff}Parabens! Você apostou no animal %s e ganhou 14x sua aposta de R$%d!", TabelaBichos[animal][Bicho], Apostadores[i][Aposta]);
			SendClientMessage(playerid, COLOR_LIGHTRED, stringB);
		}
		Apostadores[i][Animal] = 0;
		Apostadores[i][TipoAposta] = 0;
		Apostadores[i][Aposta] = 0;
		Apostadores[i][Apostando] = false;
		if(i == sizeof(Apostadores)-1) 
		{
			format(Msg, sizeof(Msg), "[Jogo Do Bicho] {ffffff}Tivemos um total de %d vencedores!", ganhadores);
			SendClientMessage(playerid, COLOR_LIGHTRED, Msg);
			break;
		}
	}
	//UltimoResultado = gettime();
	PodeApostarBicho = true;
	return 1;
}
 
MostrarMenuBicho(playerid) 
{
	new lista[1024];
	format(lista, sizeof(lista), "{a9c4e4}Apostar\r\n{a9c4e4}Lista de bichos");
	return ShowPlayerDialog(playerid, DIALOG_JOGODoBichoMenu, DIALOG_STYLE_LIST, "{FCB876}#{ffffff}Bicho | Menu", lista, "OK", "");
}
 
MostrarMenuTipoAposta(playerid) {
	if(!PodeApostarBicho) return SendClientMessage(playerid, -1, "{FCB876}[Jogo Do Bicho] {a9c4e4}Falta pouco para sair o resultado do jogo do bicho, então as apostas estão fechadas.");
	if(Apostadores[playerid][Apostando]) return SendClientMessage(playerid, -1, "{FCB876}[Jogo Do Bicho] {a9c4e4}Você já fez uma aposta, aguarde o resultado.");
	new lista[1024];
	format(lista, sizeof(lista), "{a9c4e4}Aposta de Grupos\r\n");
	return ShowPlayerDialog(playerid, DIALOG_JOGODoBichoTipoAposta, DIALOG_STYLE_LIST, "{FCB876}#{ffffff}Bicho | Apostar", lista, "OK", "Voltar");
}
 
MostrarMenuTabela(playerid) {
	new lista[2048];
	format(lista, sizeof(lista), "Grupo\tAnimal\tDezenas\n");
	for(new i = 1; i < sizeof(TabelaBichos);i++) {
		format(lista, sizeof(lista), "%s{FCB876}%d\t{a9c4e4}%s\t%d-%d-%d-%d\n", lista, i, TabelaBichos[i][Bicho], TabelaBichos[i][Dezenas][0], TabelaBichos[i][Dezenas][1], TabelaBichos[i][Dezenas][2], TabelaBichos[i][Dezenas][3]);
	}
	return ShowPlayerDialog(playerid, DIALOG_JOGODoBichoTabela, DIALOG_STYLE_TABLIST_HEADERS, "{ffff00}#{ffffff}Bicho | Lista de bichos", lista, "OK", "Voltar");
}
 
PegarBicho(numero) {
	new animal;
	for(new i = 1; i < sizeof(TabelaBichos);i++) {
		for(new b; b < 4;b++) {
			if(TabelaBichos[i][Dezenas][b] == numero) {
				animal = i;
				break;
			}
		}
	}
	return animal;
}

CMD:morto(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pMorto] > 0) SetarAnimMorto(playerid);
	return 1;
}
CMD:limparchat(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	LimparChat(playerid);
	return 1;
}
CMD:veraparencia(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new target;
    if( sscanf( params, "d", target ) ) return SCM(playerid, COLOR_LIGHTRED, "USE: {FFFFFF}/veraparencia [playerid]");
    else
    {
    	SendClientMessage(playerid, COLOR_LIGHTRED, "Aparência de %s:");
    	ShowAparencia(target, playerid);
    	return 1;
	}
}
CMD:idade(playerid, params[])
{
    ///if(PlayerInfo[playerid][pAge] == 23);
    ShowPlayerDialog(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, "Idade", "Idade minima: 5\n Idade máxima: 99.\n Entre com uma idade válida.", "Confirmar", "Cancelar");
    return 1;
}

CMD:minhaaparencia(playerid, params[])
{
	SendClientMessage(playerid, COLOR_LIGHTRED, "Minha Aparência:");
	ShowAparencia(playerid, playerid);
	return 1;
}

COMMAND:painel(playerid, params[]) 

{
	if(!PlayerInfo[playerid][pLogado]) return 1;
	if (PlayerInfo[playerid][pAdmin] < 5) return 1;
	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: {FFFFFF}Use /Painel [Nome/Senha].");
	if(strcmp(params, "Nome", true) == 0)
		return ShowPlayerDialog(playerid, DIALOG_PAINELNOME, DIALOG_STYLE_INPUT, "{FFFFFF}Painel", "{FFFFFF}Coloque abaixo o novo nome do servidor.", "Modificar", "Cancelar");
	if(strcmp(params, "Senha", true) == 0)
		return ShowPlayerDialog(playerid, DIALOG_PAINELSENHA, DIALOG_STYLE_INPUT, "{FFFFFF}Painel", "{FFFFFF}Coloque abaixo a nova senha do servidor\nPara deixar sem senha, deixe o espaço em branco.", "Modificar", "Cancelar");
	return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: {FFFFFF}Use /Painel [Nome/Senha].");
}

COMMAND:refundteam(playerid, params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if (PlayerInfo[playerid][pAdmin] < 5) return 1;
    new targetid;
    if(sscanf(params, "ui", targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /refundteam [id]");
    else
    {
        if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}Este jogador não está conectado!");
        if(PlayerInfo[playerid][pAdmin] >= 5)
        {
            new admnome[24];
            if(PlayerInfo[playerid][pAdmin] > 3000) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
            else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

            if(PlayerInfo[targetid][pRefundTeam] == 0)
            {
                PlayerInfo[targetid][pRefundTeam] = 1;
                format(string,sizeof(string),"AdmCmd: Você setou %s na Refund Team.",PlayerName(targetid, 0));
                SendClientMessage(playerid, COLOR_LIGHTRED, string);
                format(string,sizeof(string),"-> %s promoveu você para Refund Team, parabéns por esta conquista.",admnome);
                SendClientMessage(targetid, COLOR_YELLOW, string);
            }
            else
            {
                PlayerInfo[targetid][pRefundTeam] = 0;
                format(string,sizeof(string),"AdmCmd: Você removeu %s da Refund Team.",PlayerName(targetid, 0));
                SendClientMessage(playerid, COLOR_LIGHTRED, string);
                format(string,sizeof(string),"AdmCmd: %s removeu você da Refund Team.",admnome);
                SendClientMessage(targetid, COLOR_LIGHTRED, string);
            }
        }
    }
    return 1;
}

COMMAND:banappeal(playerid, params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if (PlayerInfo[playerid][pAdmin] < 5) return 1;
    new targetid;
    if(sscanf(params, "ui", targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /banappeal [id]");
    else
    {
        if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}Este jogador não está conectado!");
        if(PlayerInfo[playerid][pAdmin] >= 5)
        {
            new admnome[24];
            if(PlayerInfo[playerid][pAdmin] > 3000) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
            else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

            if(PlayerInfo[targetid][pBanTeam] == 0)
            {
                PlayerInfo[targetid][pBanTeam] = 1;
                format(string,sizeof(string),"AdmCmd: Você setou %s na Ban Appeals Team.",PlayerName(targetid, 0));
                SendClientMessage(playerid, COLOR_LIGHTRED, string);
                format(string,sizeof(string),"-> %s promoveu você para Ban Appeals Team, parabéns por esta conquista.",admnome);
                SendClientMessage(targetid, COLOR_YELLOW, string);
            }
            else
            {
                PlayerInfo[targetid][pBanTeam] = 0;
                format(string,sizeof(string),"AdmCmd: Você removeu %s da Ban Appeals Team.",PlayerName(targetid, 0));
                SendClientMessage(playerid, COLOR_LIGHTRED, string);
                format(string,sizeof(string),"AdmCmd: %s removeu você da Ban Appeals Team.",admnome);
                SendClientMessage(targetid, COLOR_LIGHTRED, string);
            }
        }
    }
    return 1;
}

COMMAND:propertyteam(playerid, params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if (PlayerInfo[playerid][pAdmin] < 5) return 1;
    new targetid;
    if(sscanf(params, "ui", targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /propertytean [id]");
    else
    {
        if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}Este jogador não está conectado!");
        if(PlayerInfo[playerid][pAdmin] >= 5)
        {
            new admnome[24];
            if(PlayerInfo[playerid][pAdmin] > 3000) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
            else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

            if(PlayerInfo[targetid][pPropertyTeam] == 0)
            {
                PlayerInfo[targetid][pPropertyTeam] = 1;
                format(string,sizeof(string),"AdmCmd: Você setou %s na Property Team.",PlayerName(targetid, 0));
                SendClientMessage(playerid, COLOR_LIGHTRED, string);
                format(string,sizeof(string),"-> %s promoveu você para Property Team, parabéns por esta conquista.",admnome);
                SendClientMessage(targetid, COLOR_YELLOW, string);
            }
            else
            {
                PlayerInfo[targetid][pPropertyTeam] = 0;
                format(string,sizeof(string),"AdmCmd: Você removeu %s da Property Team.",PlayerName(targetid, 0));
                SendClientMessage(playerid, COLOR_LIGHTRED, string);
                format(string,sizeof(string),"AdmCmd: %s removeu você da Property Team.",admnome);
                SendClientMessage(targetid, COLOR_LIGHTRED, string);
            }
        }
    }
    return 1;
}

COMMAND:factionteam(playerid, params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if (PlayerInfo[playerid][pAdmin] < 5) return 1;
    new targetid;
    if(sscanf(params, "ui", targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /factionteam [id]");
    else
    {
        if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}Este jogador não está conectado!");
        if(PlayerInfo[playerid][pAdmin] >= 5)
        {
            new admnome[24];
            if(PlayerInfo[playerid][pAdmin] > 3000) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
            else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

            if(PlayerInfo[targetid][pFactionTeam] == 0)
            {
                PlayerInfo[targetid][pFactionTeam] = 1;
                format(string,sizeof(string),"AdmCmd: Você setou %s na Faction Management.",PlayerName(targetid, 0));
                SendClientMessage(playerid, COLOR_LIGHTRED, string);
                format(string,sizeof(string),"-> %s promoveu você para Faction Management, parabéns por esta conquista.",admnome);
                SendClientMessage(targetid, COLOR_YELLOW, string);
            }
            else
            {
                PlayerInfo[targetid][pFactionTeam] = 0;
                format(string,sizeof(string),"AdmCmd: Você removeu %s da Faction Management.",PlayerName(targetid, 0));
                SendClientMessage(playerid, COLOR_LIGHTRED, string);
                format(string,sizeof(string),"AdmCmd: %s removeu você da Faction Management.",admnome);
                SendClientMessage(targetid, COLOR_LIGHTRED, string);
            }
        }
    }
    return 1;
}

CMD:aparencia(playerid, params[])
{

	Dialog_Show(playerid, MAINAPARENCIA, DIALOG_STYLE_LIST, "Editar Aparência", "Altura\nPeso\nEtnia\nOlhos\nCabelos", "Selecionar", "Cancelar");
	return 1;
}

Dialog:MAINAPARENCIA(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if(PlayerInfo[playerid][pAltura] == 0)
				{
				    Dialog_Show(playerid, ALTURA, DIALOG_STYLE_LIST, "Altura", "1,10m\n1,20m\n1,25m\n1,30m\n1,35m\n1,40m\n1,45m\n1,50m\n1,55m\n1,60m\n1,65m\n1,70m\n1,75m\n1,80m\n1,85m\n1,90m\n1,95m\n2,00m\n2,10m", "Selecionar", "Cancelar");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Este campo já foi preenchido.");
				    return 1;
				}
    		}
    		case 1:
    		{
    		  	if(PlayerInfo[playerid][pPeso] == 0)
				{
				    Dialog_Show(playerid, PESO, DIALOG_STYLE_LIST, "Peso", "50kg\n60kg\n70kg\n80kg\n90kg\n100kg\n110kg\n120kg\n130kg\n140kg\n150kg", "Selecionar", "Cancelar");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Este campo já foi preenchido.");
				    return 1;
				}
			}
			case 2:
    		{
    		  	if(PlayerInfo[playerid][pEtnia] == 0)
				{
				    Dialog_Show(playerid, ETNIA, DIALOG_STYLE_LIST, "Etnia", "Caucasiano\nNegro\nAsiático\nHispânico\nMediterrâneo\nDescohecida", "Selecionar", "Cancelar");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Este campo já foi preenchido.");
				    return 1;
				}
			}
			case 3:
    		{
    		  	if(PlayerInfo[playerid][pOlhos] == 0)
				{
				    Dialog_Show(playerid, OLHOS, DIALOG_STYLE_LIST, "Olhos", "Castanhos-claro\nCastanhos-escuro\nAzuis\nVerdes", "Selecionar", "Cancelar");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Este campo já foi preenchido.");
				    return 1;
				}
			}
			case 4:
    		{
    		  	if(PlayerInfo[playerid][pCabelo] == 0)
				{
				    Dialog_Show(playerid, CABELOS, DIALOG_STYLE_LIST, "Cabelo", "Preto\nBranco\nGrisalhos\nLoiro\nAfro\nCareca", "Selecionar", "Cancelar");
				}
                else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Este campo já foi preenchido.");
				    return 1;
				}
			}
	    }
	}
	return 1;
}

Dialog:ALTURA(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new altura[32];
		PlayerInfo[playerid][pAltura] = listitem+1;
		switch (PlayerInfo[playerid][pAltura])
 		{
 	    	case 0: { altura = "N/A";}
			case 1: { altura = "1,10m";}
			case 2: { altura = "1,20m";}
			case 3: { altura = "1,25m";}
			case 4: { altura = "1,30m";}
			case 5: { altura = "1,35m";}
			case 6: { altura = "1,40m";}
			case 7: { altura = "1,45m";}
			case 8: { altura = "1,50m";}
			case 9: { altura = "1,55m";}
			case 10: { altura = "1,60m";}
			case 11: { altura = "1,65m";}
			case 12: { altura = "1,70m";}
			case 13: { altura = "1,75m";}
			case 14: { altura = "1,80m";}
			case 15: { altura = "1,85m";}
			case 16: { altura = "1,90m";}
			case 17: { altura = "1,95m";}
			case 18: { altura = "2,00m";}
			case 19: { altura = "2,10m";}
 		}
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Certo, você definiu sua altura.");
	}
	return 1;
}

Dialog:ETNIA(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new etnia[32];
		PlayerInfo[playerid][pEtnia] = listitem+1;
 		switch (PlayerInfo[playerid][pEtnia])
 		{
 	    	case 0: { etnia = "N/A";}
			case 1: { etnia = "Caucasiano";}
			case 2: { etnia = "Negro";}
			case 3: { etnia = "Asiático";}
			case 4: { etnia = "Hispânico";}
			case 5: { etnia = "Mediterrâneo";}
//			case 6: { etnia = "Desconhecida";}

 		}
 		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Certo, você definiu sua etnia.");
	}
	return 1;
}
Dialog:OLHOS(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new olhos[32];
		PlayerInfo[playerid][pOlhos] = listitem+1;
 		switch (PlayerInfo[playerid][pOlhos])
 		{
 	    	case 0: { olhos = "N/A";}
			case 1: { olhos = "Castanhos-claro";}
			case 2: { olhos = "Castanhos-escuro";}
			case 3: { olhos = "Azuis";}
			case 4: { olhos = "Verdes";}
 		}
 		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Certo, você definiu seus olhos.");
	}
	return 1;
}
Dialog:PESO(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new peso[32];
		PlayerInfo[playerid][pPeso] = listitem+1;
		switch (PlayerInfo[playerid][pPeso])
 		{
 	    	case 0: { peso = "N/A";}
			case 1: { peso = "50kg";}
			case 2: { peso = "60kg";}
			case 3: { peso = "70kg";}
			case 4: { peso = "90kg";}
			case 5: { peso = "100kg";}
			case 6: { peso = "110kg";}
			case 7: { peso = "120kg";}
			case 8: { peso = "130kg";}
			case 9: { peso = "140kg";}
			case 10: { peso = "150kg";}
 		}
 		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Certo, você definiu seu peso.");
	}
	return 1;
}
Dialog:CABELOS(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new cabelo[32];
		PlayerInfo[playerid][pCabelo] = listitem+1;
		switch (PlayerInfo[playerid][pCabelo])
 		{
 	    	case 0: { cabelo = "N/A";}
			case 1: { cabelo = "Preto";}
			case 2: { cabelo = "Branco";}
			case 3: { cabelo = "Grisalho";}
			case 4: { cabelo = "Loiro";}
			case 5: { cabelo = "Afro";}
			case 6: { cabelo = "Careca";}
 		}
 		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Certo, você definiu seu cabelo.");
	}
	return 1;
}

CMD:numeracao(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pArmaMao] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma em mãos");

    new otherid;
    new id = PlayerInfo[playerid][pArmaMao];
 	if(sscanf(params, "i", otherid))
	{
	    new DataSave[256];
    	format( DataSave,sizeof(DataSave),"______ Numeração da Arma (%s)(ID: %d)________", GunNames[ArmaData[id][ArmaModelo]], ArmaData[id][ArmaID]); SCM(playerid, COLOR_LIGHTGREEN, DataSave);
    	if(ArmaData[id][ArmaRaspada] == 0)
		{
			format(DataSave,sizeof(DataSave),"Numeração: %d", ArmaData[id][ArmaNumeracao]); SCM(playerid, COLOR_WHITE, DataSave);
		}
   		else SCM(playerid, COLOR_WHITE, "Numeração: Raspada");

		SCM(playerid, COLOR_WHITE, "Você pode usar '/numeracao [Playerid]' para mostrar a numeração a um player.");
	}
	else
	{
	    if(PlayerInfo[otherid][pLogado] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player não está logado.");

        if(GetDistanceBetweenPlayers(playerid,otherid) < 5.0)
		{
	        new DataSave[256];
	        format(DataSave,sizeof(DataSave),"Você mostrou a %s a numeração da arma que está em suas mãos.", PlayerName(otherid, 1)); SCM(playerid, COLOR_LIGHTGREEN, DataSave);
	    	format(DataSave,sizeof(DataSave),"______ Numeração da Arma (%s)________", GunNames[ArmaData[id][ArmaModelo]]); SCM(otherid, COLOR_LIGHTGREEN, DataSave);
	    	if(ArmaData[id][ArmaRaspada] == 0)
			{
				format(DataSave,sizeof(DataSave),"Numeração: %d", ArmaData[id][ArmaNumeracao]); SCM(otherid, COLOR_WHITE, DataSave);
			}
			else SCM(otherid, COLOR_WHITE, "Numeração: Raspada");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a este player.");
	}
	return 1;
}

CMD:rasparnumeracao(playerid, params[])
{
    if(PlayerInfo[playerid][pArmaMao] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma em mãos");
    if(PlayerInfo[playerid][pLogado] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player não está logado.");
    if(PlayerInfo[playerid][pJob] != JOB_FALSIFICADOR) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um Falsificador.");
	if(PlayerInfo[playerid][pRaspador] < 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um raspador de armas.");

    PlayerInfo[playerid][pRaspador] --;
    new id = PlayerInfo[playerid][pArmaMao];

    if(ArmaData[id][ArmaRaspada] == 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A numeração desta arma já está raspada.");
    SCM(playerid, COLOR_LIGHTGREEN, "Você raspou a numeração da arma.");
    ArmaData[id][ArmaRaspada] = 1;

	PlayerInfo[playerid][pGranaSuja] += 1800;
	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você recebeu 1800 reais sujo pela remoção da placa.");

    SalvarArma(id);
	return 1;
}

forward randomEx(min, max);
public randomEx(min, max)
{
    new rand = random(max-min)+min;
    return rand;
}

public OnGameModeExit()
{

	SetTimerEx("FecharServidor", 100, false, "d");
    //PortoTrucker_ModeExit();
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    /*if (IsPlayerNPC(playerid))
    {
        if(strcmp(PlayerName(playerid,0),"Trainbot",true) == 0)
		{
			SetSpawnInfo(playerid,69,253,-1941.9301,185.4146,25.7109,355.1588,-1,-1,-1,-1,-1,-1);
			PutPlayerInVehicle(playerid,Trem,0);
            SpawnPlayer(playerid);
		}
    }*/

    if(PlayerInfo[playerid][pLogado] == 0) {
 	    SetSpawnInfo(playerid,0,29,0,0,0,0,0,0,0,0,0,0);
	 	SpawnPlayer(playerid);
	}
	return 1;
}

stock PreloadAnimLib(playerid, animlib[]) return ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0,1);
stock GetPlayerSpeed(playerid, bool:kmh)
{
    new Float:Vx,Float:Vy,Float:Vz,Float:rtn;
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid),Vx,Vy,Vz); else GetPlayerVelocity(playerid,Vx,Vy,Vz);
    rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz,2)));
    return kmh?floatround(rtn * 100 * 1.61):floatround(rtn * 100);
}

encode_tires(tires1, tires2, tires3, tires4) {
	return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);
}

forward SetarAnimMorto(i);
public SetarAnimMorto(i) {
	if(IsPlayerInAnyVehicle(i)) {
		ApplyAnimation(i, "ped", "CAR_dead_LHS", 4.0, 0, 1, 1, 1, 1, 1);
		ApplyAnimation(i, "ped", "CAR_dead_LHS", 4.0, 0, 1, 1, 1, 1, 1);
	}
	else
	{
	    if(PlayerInfo[i][pMorto] == 1) {
		    ApplyAnimation(i, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
			ComAnim[i] = 0;
    		ClearAnimations(i, 1);

			ApplyAnimation(i, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1, 1);
			Anim2Morreu[i] = SetTimerEx("AnimMorreu", ANIM_DOIS_MORTE, false, "d", i);
		}
		else
		    ApplyAnimation(i, "ped", "FLOOR_hit_f", 4.0, 0, 1, 1, 1, -1, 1);
		    //ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.0, 1, 1, 1, 1, -1, 1);
	}
	return 1;
}

forward AnimMorreu(i);
public AnimMorreu(i)
{
	if(PlayerInfo[i][pMorto] > 0) {
    	ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.0, 1, 1, 1, 1, -1, 1);
	}
	return 1;
}

forward Timer_Minutos();
public Timer_Minutos()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
 		if(IsPlayerConnected(i) && !IsPlayerNPC(i))
 		{
		    if(PlayerInfo[i][pLogado])
		    {
				if(SalvandoConta[i] == 0)
				{
					if(TempoParaSalvar[i] < 15) TempoParaSalvar[i]++;
					else {
					    TempoParaSalvar[i] = 0;
					    SalvarPlayer(i);
						TollUpdate();
					}
				}
				if(AFKTimer[i] < 1200)
				{
					if(PlayerInfo[i][pPayDay] >= 1) PlayerInfo[i][pPayDay]--;
					if(PlayerInfo[i][pPayDay] == 0) PayDay(i);
				}
				if(AFKTimer[i] == 1200) SendClientMessage(i,COLOR_LIGHTRED,"SERVER: VOCÊ FICOU 20 MINUTOS AFK, PORTANTO O TEMPO PARA O PD FOI PAUSADO.");
				if(PlayerInfo[i][pDoador] > 0) {
  					if(gettime() > PlayerInfo[i][pDoadorTempo]) {
		    			PlayerInfo[i][pDoador] = 0;
					    PlayerInfo[i][pDoadorTempo] = 0;
					    SendClientMessage(i, COLOR_LIGHTRED, "SERVER: Seus dias de doador chegaram ao fim.");
					}
				}

				/*new bool:done;
				for(new c=0;c<sizeof(CarRent);c++) 
				{
					done = false;
					foreach (new i : Player) if(gLastCar[i] == CarRent[c] || RentCarKey[i] == CarRent[c]) done = true;
					if(!done) SetVehicleToRespawn(CarRent[c]);
				}*/

				if(PlayerInfo[i][pTomouAlgumTiro] > 0)
				{
				    if(OutrasInfos[i][oPerdVida] < 5) OutrasInfos[i][oPerdVida]++;
				    else
				    {
				        OutrasInfos[i][oPerdVida] = 0;
				    	SendClientMessage(i, COLOR_LIGHTRED, "-> Você está perdendo vida devido a um ferimento a bala ou facada não tratado.");

				    	new Float:Perda;
				    	if(PlayerInfo[i][pTomouTiroPesado] > 0) Perda = 3.0;
				    	else Perda = 1.0;

				    	new Float:health;
						GetPlayerHealth(i,health);
						SetPlayerHealth(i, health-Perda);
						P_Health[i] = health-Perda;

						if((PlayerInfo[i][pMorto] < 1) && ((health-Perda) <= 20)) SetPlayerMorto(i, 1);
					}
				}
				else
				    if(GetPVarInt(i, "TempoParaSerLevantado") > 0) SetPVarInt(i, "TempoParaSerLevantado", GetPVarInt(i, "TempoParaSerLevantado")-1);

				if(PlayerInfo[i][pTemPreso] > 1) PlayerInfo[i][pTemPreso]--;
				if(PlayerInfo[i][pTemPreso] == 1)
				{
				    if(PlayerInfo[i][pPrisao] == 1)
				    {
				    	SendClientMessage(i, COLOR_LIGHTGREEN, "[!] Você foi liberto.");
				    	SetPlayerPosFreeze(i, 1734.3285,-1861.4269,13.5775, 1);
				    	SetPlayerVirtualWorld(i,0);
				    	SetPlayerInterior(i, 0);
						SetPlayerAlgema(i, 0);
					}
					else if(PlayerInfo[i][pPrisao] == 2)
				    {
				    	SendClientMessage(i, COLOR_LIGHTGREEN, "[!] Você foi liberto.");
				    	SetPlayerPosFreeze(i, 1734.3285,-1861.4269,13.5775, 1);
				    	SetPlayerVirtualWorld(i,0);
				    	SetPlayerInterior(i, 0);
						SetPlayerAlgema(i, 0);
					}
					else
				    {
				        //Ajail
				    	SendClientMessage(i, COLOR_LIGHTGREEN, "-> Você foi liberto da prisão administrativa.");
				    	SetPlayerPosFreeze(i, 1734.3285,-1861.4269,13.5775, 1);
				    	SetPlayerVirtualWorld(i,0);
				    	SetPlayerInterior(i, 0);
						SetPlayerAlgema(i, 0);
					}
					PlayerInfo[i][pPrisao] = 0;
				    PlayerInfo[i][pTemPreso] = 0;
				}
				if(PlayerInfo[i][pDrogaTime] > 1) PlayerInfo[i][pDrogaTime]--;
				if(PlayerInfo[i][pDrogaTime] == 1)
				{
					PlayerInfo[i][pMenosDanoTiro] = 0.0;
					PlayerInfo[i][pDrogaTime] = 0;
					//SetPlayerWeather(i, WeatherGlobal);
					PlayerInfo[i][pTremorAtirar] = PlayerInfo[i][pSkillTiro];
	    			SendClientMessage(i,COLOR_LIGHTGREEN,"-> O efeito das drogas passou.");
	    			RemoverVidaMaxDrug(i);

					PlayerInfo[i][pUsouDroga] = 0;
				}
				if(PlayerInfo[i][pUsouDroga] > 0 && PlayerInfo[i][pDrogaTime] == 0)
				    PlayerInfo[i][pUsouDroga] = 0;
			}
		}
	}
	for(new fi=0; fi < 300; fi++)
    {
        if(FDInfo[fi][fObject] == 0)
        {
            FDInfo[fi][fTime]--;
            if(FDInfo[fi][fTime] == 0)
            {
                if(IsValidDynamicObject(FDInfo[fi][fObject])) DestroyDynamicObject(FDInfo[fi][fObject]);
				FDInfo[fi][fObject]=0;
		        FDInfo[fi][fdX]=0.0;
		        FDInfo[fi][fdY]=0.0;
		        FDInfo[fi][fdZ]=0.0;
		        FDInfo[fi][fWorld]=0;
		        FDInfo[fi][fInt]=0;
		        FDInfo[fi][fTime]=0;
		        FDInfo[fi][fHealth]=0;
            }
		}
	}
	for(new i = 0; i < MAX_TRAFICANTES; i++)
	{
	    if(TraficInfo[i][traUsando] == 1)
		{
		    if(TraficInfo[i][traTempoSumir] > 1) TraficInfo[i][traTempoSumir]--;
		    if(TraficInfo[i][traTempoSumir] == 1)
		    {
		    	SumirTraficantes(i);
			}
		}
	}
	for(new mults = 0; mults < MAX_MULTAS; mults++)
	{
	    if(MultasInfo[mults][mPayHours] > 0)
		{
			MultasInfo[mults][mPayHours]--;
		}
	}
	new hour, mins, sec;
	gettime(hour,mins,sec);
 	if(mins == 59 || mins == 30) {
	    Timer_Industrias(1);
	}
	if(mins == 10 || mins == 20 || mins == 30 || mins == 40 || mins == 50)
	{
	    Timer_Industrias(2);
	    Timer_Industrias(3);
	}

	if(hour == 23 && mins == 50)
	{
		new query[2054];
		format(query, sizeof(query),"UPDATE `server` SET `totalonline`='%d', `recorddia`='%d' WHERE `id`= 1", PlayersOnline, RecordDia);
		mysql_function_query(Pipeline, query, false, "", "");

		RecordDia = 0;
	}
	else
	{
	    new query[2054];
		format(query, sizeof(query),"UPDATE `server` SET `totalonline`='%d' WHERE `id`= 1", PlayersOnline);
		mysql_function_query(Pipeline, query, false, "", "");
	}

	//==========================================================================
	//Leasing System
	if((hour == 21 && mins == 00) && !strcmp(GetWeekDay(), "Domingo", false))
	{
	        print("|- Cobrando Leasing das empresas -|");
			for(new i; i < MAX_EMPRESAS; i++)
		    {
		        if(EmpInfo[i][eCriada]){
			        if(EmpInfo[i][eLeasing] > 0 && EmpInfo[i][eDono] != 0){
				        if((EmpInfo[i][eBank]-EmpInfo[i][eLeasing]) > 0) {
				            EmpInfo[i][eBank] -= EmpInfo[i][eLeasing];
				        }
				        else {
				            printf("|- Empresa: [%d] %s - Vendida por falta de dinheiro no cofre. -|", EmpInfo[i][eID], EmpInfo[i][eNome]);

							EmpInfo[i][eDono] = 0;
							EmpInfo[i][eAVenda] = 1;
							EmpInfo[i][eLeasing] = 0;
							EmpInfo[i][eBank] = 0;

							if(EmpInfo[i][ePreco] == 0) EmpInfo[i][ePreco] = 50000;

							if(IsValidDynamicObject(EmpInfo[i][eObjPlaca]))
			    				DestroyDynamicObject(EmpInfo[i][eObjPlaca]);
							format(string, sizeof(string), "%s\nVende-se\nR$%d!",EmpInfo[i][eNome],EmpInfo[i][ePreco]);
			    			EmpInfo[i][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[i][eExWorld], EmpInfo[i][eExInt]);
						    if(EmpInfo[i][ePlacaX] != 0 && EmpInfo[i][ePlacaY] != 0 && EmpInfo[i][ePlacaZ] != 0)
								EmpInfo[i][eObjPlaca] = CreateDynamicObject(19471, EmpInfo[i][ePlacaX], EmpInfo[i][ePlacaY], EmpInfo[i][ePlacaZ], 0.0, 0.0, EmpInfo[i][ePlacaR], EmpInfo[i][eExWorld], EmpInfo[i][eExInt]);
				        }
					}
				}
			}
	}
	//==========================================================================

    /*if(hour == 5 && mins == 30)
	    SendClientMessageToAll(COLOR_LIGHTRED, "SERVER: Dentro de 15 minutos, o servidor será reiniciado.");
    if(hour == 5 && mins == 45)
	    SendClientMessageToAll(COLOR_LIGHTRED, "SERVER: Dentro de 10 minutos, o servidor será reiniciado.");
    if(hour == 5 && mins == 50)
	    SendClientMessageToAll(COLOR_LIGHTRED, "SERVER: Dentro de 5 minutos, o servidor será reiniciado.");
    if(hour == 5 && mins == 55) {
	   // GiveGMX();
	}
	if(mins == 00) {
	    if(PlayersOnline > MaxPlayersHora) MaxPlayersHora = PlayersOnline;
	    if(MaxPlayersHora > RecordDia) RecordDia = MaxPlayersHora;
		MaxPlayersHora = 0;

		SaveVehicles();
    	SalvarCasas();
    	SalvarGoverno();
		SalvarFaccoes();
	}*/
}

forward FecharServidor();
public FecharServidor(){
    new panels, doors, lights, tires;
    print("  |--  Desligando Servidor --|");

	for( new i; i < MAX_PORTOES; i++)
		if(PortaoInfo[i][ptCriado] != 0) SalvarPortao(i);

	print("  |--  Portões Salvos --|");
    if (IsValidObject(LSApartments1Object)) DestroyObject(LSApartments1Object);
	if (IsValidObject(LSApartments1CPObject)) DestroyObject(LSApartments1CPObject);
    for(new i=0; i<GetVehiclePoolSize(); i++)
    {
    	KillTimer(FlashTime[i]);

		GetVehicleDamageStatus(i, panels, doors, lights, tires);
  		UpdateVehicleDamageStatus(i, panels, doors, 0, tires);
   	}
   	for(new i=0; i < MAX_DRUGDROP; i++)
    	if(DropInfo[i][dType] != 0) SalvarDrogas(i);
   	for(new i=0;i<MAX_ATM; i++)
   		SaveATM(i);
	for(new mults = 0; mults < MAX_MULTAS; mults++)
		if(MultasInfo[mults][mCriada] == 1) SalvarMulta(mults);

    Elevator_Destroy1();
    Elevator_Destroy();
    Elevator_Destroy2();
    Elevator_Destroy3();
    DestroyAllDynamicObjects();
    print("  |--  Objetos Dynamics destruidos --|");
    SaveVehicles();
    SalvarCasas();
    SalvarGoverno();
	SalvarFaccoes();
    for(new i = 0; i < 3; i++){
    	if (IsValidDynamicPickup(PontoDeVenda[i])) DestroyDynamicPickup(PontoDeVenda[i]);
    	if (IsValidDynamic3DTextLabel(TextPontoDeVenda[i])) DestroyDynamic3DTextLabel(TextPontoDeVenda[i]);
   	}

	Horse_OnGameModeExit();

	//==========================================================================
   	print("  |--  Servidor desligado com sucesso --|");

   	SetTimer("FecharServidor1", 100, 0);
	return 1;
}

forward FecharServidor1();
public FecharServidor1(){
    mysql_close(Pipeline);
    SendRconCommand("gmx");
    return 1;
}

stock RemoverVidaMaxDrug(i)
{
    switch(PlayerInfo[i][pUsouDroga])
	{
 		case 11: PlayerInfo[i][pHealthMax] = PlayerInfo[i][pHealthMax]-10;
   		case 12: PlayerInfo[i][pHealthMax] = PlayerInfo[i][pHealthMax]-20;
	    case 13: PlayerInfo[i][pHealthMax] = PlayerInfo[i][pHealthMax]-30;
	    case 21: PlayerInfo[i][pHealthMax] = PlayerInfo[i][pHealthMax]-40;
	    case 22: PlayerInfo[i][pHealthMax] = PlayerInfo[i][pHealthMax]-50;
	    case 23: PlayerInfo[i][pHealthMax] = PlayerInfo[i][pHealthMax]-60;
	    case 31: PlayerInfo[i][pHealthMax] = PlayerInfo[i][pHealthMax]-50;
	    case 32: PlayerInfo[i][pHealthMax] = PlayerInfo[i][pHealthMax]-70;
	    case 33: PlayerInfo[i][pHealthMax] = PlayerInfo[i][pHealthMax]-100;
	    case 41: PlayerInfo[i][pHealthMax] = PlayerInfo[i][pHealthMax]-20;
	    case 42: PlayerInfo[i][pHealthMax] = PlayerInfo[i][pHealthMax]-30;
	    case 43: PlayerInfo[i][pHealthMax] = PlayerInfo[i][pHealthMax]-40;
	    case 51: PlayerInfo[i][pHealthMax] = PlayerInfo[i][pHealthMax]-70;
	    case 52: PlayerInfo[i][pHealthMax] = PlayerInfo[i][pHealthMax]-90;
	    case 53: PlayerInfo[i][pHealthMax] = PlayerInfo[i][pHealthMax]-120;
	}
	new Float:AtualVida;
	GetPlayerHealth(i,AtualVida);

	if(AtualVida > PlayerInfo[i][pHealthMax])
	    SetPlayerHealth(i, PlayerInfo[i][pHealthMax]);

	return 1;
}

stock GetSalarioJob(playerid)
{
	new Pagamento = 0;
	if(PlayerInfo[playerid][pJob] > 0)
		Pagamento = 350;

	return Pagamento;
}

forward PayDay(playerid);
public PayDay(playerid) {
    if(IsPlayerConnected(playerid)) {
	    if(PlayerInfo[playerid][pLogado]) {
			new DinheiroFinal = GovInfo[gSalarioMin];
			new SalarioJob = GetSalarioJob(playerid);
			new TaxaEnergia = GovInfo[gTaxaLuz],
				Casas = 0,
				total = 0,
				TaxaAlarme = 0,
				TaxaConvenio = 0,
				insuranceValue = 0,
				TaxaCarros = 0;
			new SaldoAnt = PlayerInfo[playerid][pBanco];

			DinheiroFinal = DinheiroFinal+SalarioJob;
			total = DinheiroFinal;
            if(PayDayDuplo == 1) {
			    total = total*2;
			    PlayerInfo[playerid][pLevel]++;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"--- O PAYDAY DUPLO ESTÁ ATIVO! ---");
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"--- Você receberá o dobro de TC e do dinheiro.");
			}
			for(new h = 0; h < MAX_HOUSES; h++) {
			    if(HouseInfo[h][hDono] == PlayerInfo[playerid][pID]) {
			        if(HouseInfo[h][hAlarmeColocouAgr] > 0) {
                        HouseInfo[h][hAlarmeColocouAgr] = 0;
				    }


				    switch(HouseInfo[h][hAlarme]) {
				        case 1: TaxaAlarme += 30;
				        case 2: TaxaAlarme += 60;
				        case 3: TaxaAlarme += 90;
				    }
					Casas++;
                    TaxaEnergia+= HouseInfo[h][hGasto]/100;

                    HouseInfo[h][hGasto] = 0;
			    }
			}
			for(new h = 0; h < MAX_GARAGENS; h++) {
			    if(GaragemInfo[h][hTipo] == 0) {
				    if(GaragemInfo[h][hDono] == PlayerInfo[playerid][pID]) {
				        if(GaragemInfo[h][hAlarmeColocouAgr] > 0) {
	                        GaragemInfo[h][hAlarmeColocouAgr] = 0;
					    }


					    switch(GaragemInfo[h][hAlarme]) {
							case 1: TaxaAlarme += 30;
							case 2: TaxaAlarme += 60;
							case 3: TaxaAlarme += 90;
					    }
						Casas++;
	                    TaxaEnergia+= GaragemInfo[h][hGasto]/100;

	                    GaragemInfo[h][hGasto] = 0;
				    }
				}
				else {
				    new houseid = GaragemInfo[h][hTipo];
				    if(HouseInfo[houseid][hDono] == PlayerInfo[playerid][pID]) {
				        if(GaragemInfo[h][hAlarmeColocouAgr] > 0) {
	                        GaragemInfo[h][hAlarmeColocouAgr] = 0;
					    }


					    switch(GaragemInfo[h][hAlarme]) {
							case 1: TaxaAlarme += 30;
							case 2: TaxaAlarme += 60;
							case 3: TaxaAlarme += 90;
					    }
						Casas++;
	                    TaxaEnergia+= GaragemInfo[h][hGasto]/100;

	                    GaragemInfo[h][hGasto] = 0;
				    }
				}
			}

			for(new slot = 0; slot < MAX_CA_VEHICLES; slot ++) {
   				if(PlayerInfo[playerid][pID] == VehicleInfo[slot][vOwner]) {
					if(VehicleInfo[slot][vInsurance] > 0) {
					    if(VehicleInfo[slot][vInsurance] > 1) VehicleInfo[slot][vInsurance]--;
						insuranceValue += FetchVehicleInsurancePrice(VehicleInfo[slot][vModel]/250);
					}

					TaxaCarros += FetchVehicleInsurancePrice(VehicleInfo[slot][vModel])/250;
				}
				/*if(PlayerInfo[playerid][pID] == VehicleInfo[slot][vOwner]) {
					if(VehicleInfo[slot][vInsurance] > 0) {
					    if(VehicleInfo[slot][vInsurance] > 1) VehicleInfo[slot][vInsurance]--;
						insuranceValue += 120;
					}

					TaxaCarros += FetchVehicleInsurancePrice(VehicleInfo[slot][vModel])/250;
				}*/
			}

			new Invest;
			if(PlayerInfo[playerid][pSavings] > 0 && PlayerInfo[playerid][pSavings] < 500000) {
   				Invest = PlayerInfo[playerid][pSavingsGerando];
			    PlayerInfo[playerid][pSavings] = PlayerInfo[playerid][pSavings]+Invest;
				PlayerInfo[playerid][pSavingsGerando] = floatround(PlayerInfo[playerid][pSavings] * 0.60, floatround_ceil);
				

			    if(PlayerInfo[playerid][pSavings] > 500000) {
				    PlayerInfo[playerid][pSavingsGerando] = 0;
				    Invest = 0;
					PlayerInfo[playerid][pSavings] = 500000;
				}
			}
			if(PlayerInfo[playerid][pJobTempo] > 0)
				PlayerInfo[playerid][pJobTempo]--;

			PlayerInfo[playerid][pJobInPd] = 0;
			PlayerInfo[playerid][pTrafico] = 0;
			PlayerInfo[playerid][pFabricouD] = 0;

			new salarfac = 0;
			if(PlayerInfo[playerid][pFac] > 0) {
				if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ) {
					switch(PlayerInfo[playerid][pFacCargo]) {
					    case 1: salarfac = GovInfo[gSalarioPMESP][0];
					    case 2: salarfac = GovInfo[gSalarioPMESP][1];
					    case 3: salarfac = GovInfo[gSalarioPMESP][2];
					    case 4: salarfac = GovInfo[gSalarioPMESP][3];
					    case 5: salarfac = GovInfo[gSalarioPMESP][4];
					    case 6: salarfac = GovInfo[gSalarioPMESP][5];
					    case 7: salarfac = GovInfo[gSalarioPMESP][6];
						case 8: salarfac = GovInfo[gSalarioPMESP][7];
						case 9: salarfac = GovInfo[gSalarioPMESP][8];
						case 10: salarfac = GovInfo[gSalarioPMESP][9];
						case 11: salarfac = GovInfo[gSalarioPMESP][10];
						case 12: salarfac = GovInfo[gSalarioPMESP][11];
					}
				}
				if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ) {
					switch(PlayerInfo[playerid][pFacCargo]) {
					    case 1: salarfac = GovInfo[gSalarioPC][0];
					    case 2: salarfac = GovInfo[gSalarioPC][1];
					    case 3: salarfac = GovInfo[gSalarioPC][2];
					    case 4: salarfac = GovInfo[gSalarioPC][3];
					    case 5: salarfac = GovInfo[gSalarioPC][4];
					    case 6: salarfac = GovInfo[gSalarioPC][5];
					    case 7: salarfac = GovInfo[gSalarioPC][6];
						case 8: salarfac = GovInfo[gSalarioPC][7];
						case 9: salarfac = GovInfo[gSalarioPC][8];
						case 10: salarfac = GovInfo[gSalarioPC][9];
						case 11: salarfac = GovInfo[gSalarioPC][10];
						case 12: salarfac = GovInfo[gSalarioPC][11];
					}
				}
				if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_BANK) {
					switch(PlayerInfo[playerid][pFacCargo]) {
					    case 1: salarfac = GovInfo[gSalarioEB][0];
					    case 2: salarfac = GovInfo[gSalarioEB][1];
					    case 3: salarfac = GovInfo[gSalarioEB][2];
					    case 4: salarfac = GovInfo[gSalarioEB][3];
					    case 5: salarfac = GovInfo[gSalarioEB][4];
					    case 6: salarfac = GovInfo[gSalarioEB][5];
					    case 7: salarfac = GovInfo[gSalarioEB][6];
						case 8: salarfac = GovInfo[gSalarioEB][7];
						case 9: salarfac = GovInfo[gSalarioEB][8];
						case 10: salarfac = GovInfo[gSalarioEB][9];
						case 11: salarfac = GovInfo[gSalarioEB][10];
						case 12: salarfac = GovInfo[gSalarioEB][11];
					}
				}
				if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_CBERJ) {
					switch(PlayerInfo[playerid][pFacCargo]) {
					    case 1: salarfac = GovInfo[gSalarioFD][0];
					    case 2: salarfac = GovInfo[gSalarioFD][1];
					    case 3: salarfac = GovInfo[gSalarioFD][2];
					    case 4: salarfac = GovInfo[gSalarioFD][3];
					    case 5: salarfac = GovInfo[gSalarioFD][4];
					    case 6: salarfac = GovInfo[gSalarioFD][5];
					    case 7: salarfac = GovInfo[gSalarioFD][6];
						case 8: salarfac = GovInfo[gSalarioFD][7];
						case 9: salarfac = GovInfo[gSalarioFD][8];
						case 10: salarfac = GovInfo[gSalarioFD][9];
						case 11: salarfac = GovInfo[gSalarioFD][10];
						case 12: salarfac = GovInfo[gSalarioFD][11];
					}
				}
				if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_GOV) {
					switch(PlayerInfo[playerid][pFacCargo]) {
					    case 1: salarfac = GovInfo[gSalarioGOV][0];
					    case 2: salarfac = GovInfo[gSalarioGOV][1];
					    case 3: salarfac = GovInfo[gSalarioGOV][2];
					    case 4: salarfac = GovInfo[gSalarioGOV][3];
					    case 5: salarfac = GovInfo[gSalarioGOV][4];
					    case 6: salarfac = GovInfo[gSalarioGOV][5];
					    case 7: salarfac = GovInfo[gSalarioGOV][6];
					    case 8: salarfac = GovInfo[gSalarioGOV][7];
					    case 9: salarfac = GovInfo[gSalarioGOV][8];
					    case 10: salarfac = GovInfo[gSalarioGOV][9];
					    case 11: salarfac = GovInfo[gSalarioGOV][10];
					    case 12: salarfac = GovInfo[gSalarioGOV][11];
					}
				}
				if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_TJRP) {
					switch(PlayerInfo[playerid][pFacCargo]) {
					    case 1: salarfac = GovInfo[gSalarioTJRP][0];
					    case 2: salarfac = GovInfo[gSalarioTJRP][1];
					    case 3: salarfac = GovInfo[gSalarioTJRP][2];
					    case 4: salarfac = GovInfo[gSalarioTJRP][3];
					    case 5: salarfac = GovInfo[gSalarioTJRP][4];
					    case 6: salarfac = GovInfo[gSalarioTJRP][5];
					    case 7: salarfac = GovInfo[gSalarioTJRP][6];
					    case 8: salarfac = GovInfo[gSalarioTJRP][7];
					    case 9: salarfac = GovInfo[gSalarioTJRP][8];
					    case 10: salarfac = GovInfo[gSalarioTJRP][9];
					    case 11: salarfac = GovInfo[gSalarioTJRP][10];
					    case 12: salarfac = GovInfo[gSalarioTJRP][11];
					}
				}
				if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_BANK) {
					switch(PlayerInfo[playerid][pFacCargo]) {
					    case 1: salarfac = GovInfo[gSalarioTJRP][0];
					    case 2: salarfac = GovInfo[gSalarioTJRP][1];
					    case 3: salarfac = GovInfo[gSalarioTJRP][2];
					    case 4: salarfac = GovInfo[gSalarioTJRP][3];
					    case 5: salarfac = GovInfo[gSalarioTJRP][4];
					    case 6: salarfac = GovInfo[gSalarioTJRP][5];
					    case 7: salarfac = GovInfo[gSalarioTJRP][6];
					    case 8: salarfac = GovInfo[gSalarioTJRP][7];
					    case 9: salarfac = GovInfo[gSalarioTJRP][8];
					    case 10: salarfac = GovInfo[gSalarioTJRP][9];
					    case 11: salarfac = GovInfo[gSalarioTJRP][10];
					    case 12: salarfac = GovInfo[gSalarioTJRP][11];
					}
				}
				if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PRIXY) {
					switch(PlayerInfo[playerid][pFacCargo]) {
					    case 1: salarfac = GovInfo[gSalarioFacCivil][0];
					    case 2: salarfac = GovInfo[gSalarioFacCivil][1];
					    case 3: salarfac = GovInfo[gSalarioFacCivil][2];
					    case 4: salarfac = GovInfo[gSalarioFacCivil][3];
					    case 5: salarfac = GovInfo[gSalarioFacCivil][4];
					    case 6: salarfac = GovInfo[gSalarioFacCivil][5];
					    case 7: salarfac = GovInfo[gSalarioFacCivil][6];
					    case 8: salarfac = GovInfo[gSalarioFacCivil][7];
					    case 9: salarfac = GovInfo[gSalarioFacCivil][8];
					    case 10: salarfac = GovInfo[gSalarioFacCivil][9];
					    case 11: salarfac = GovInfo[gSalarioFacCivil][10];
					    case 12: salarfac = GovInfo[gSalarioFacCivil][11];
					}
				}
			}
			if(PlayerInfo[playerid][pConvenio] > 0)
			{
			    if(PlayerInfo[playerid][pConvenio] > 1) PlayerInfo[playerid][pConvenio]--;
				TaxaConvenio = GovInfo[gConvenio];
			}

			new gastocomcel = CelularData[playerid][celTotalPD];

			CelularData[playerid][celTotalPD] = 0;

			if(TaxaEnergia < 0) TaxaEnergia = 0;
			if(TaxaAlarme < 0) TaxaAlarme = 0;
			if(TaxaConvenio < 0) TaxaConvenio = 0;
			if(gastocomcel < 0) gastocomcel = 0;
			if(insuranceValue < 0) insuranceValue = 0;
			if(TaxaCarros < 0) TaxaCarros = 0;

			total+= salarfac;
			total-= TaxaEnergia;
			total-= GovInfo[gTaxa];
			total-= TaxaAlarme;
			total-= TaxaConvenio;
			total-= gastocomcel;
			total-= insuranceValue;
			total-= TaxaCarros;

			new TotalAoCofre = (TaxaAlarme+GovInfo[gTaxa]+TaxaEnergia+TaxaConvenio+gastocomcel+insuranceValue+TaxaCarros)-salarfac;
			GovInfo[gCofres] += TotalAoCofre;

			//Pagando o Player
   			PlayerInfo[playerid][pBanco] = PlayerInfo[playerid][pBanco]+total;
			new stringpd[1024];

   			SendClientMessage(playerid,COLOR_WHITE,"|__ Extrato de Conta __|");
   			format(stringpd, sizeof(stringpd), "Balanço: R$%d", SaldoAnt); 					SendClientMessage(playerid, COLOR_PD1, stringpd);
   			format(stringpd, sizeof(stringpd), "Salário Base: +R$%d", GovInfo[gSalarioMin]); 	SendClientMessage(playerid, COLOR_PD1, stringpd);
   			format(stringpd, sizeof(stringpd), "Salário emprego: +R$%d", SalarioJob); 		SendClientMessage(playerid, COLOR_PD1, stringpd);
   			if(salarfac > 0){
			    format(stringpd, sizeof(stringpd), "Salário da Facção: +R$%d", salarfac);	SendClientMessage(playerid,COLOR_CINZA,stringpd);
			}
			if(Casas > 0){
				format(stringpd, sizeof(stringpd), "Eletricidade: -R$%d", TaxaEnergia);
				SendClientMessage(playerid,COLOR_CINZA,stringpd);
				if(TaxaAlarme > 0){
					format(stringpd, sizeof(stringpd), "Alarmes em Residências: -R$%d", TaxaAlarme); SendClientMessage(playerid,COLOR_CINZA,stringpd);
				}
			}
			if(gastocomcel > 0) {
			    format(stringpd, sizeof(stringpd), "Celular: -R$%d", gastocomcel); SendClientMessage(playerid,COLOR_CINZA,stringpd);
			}
			if(insuranceValue > 0) {
			    format(stringpd, sizeof(stringpd), "Seguro Veicular: -R$%d", insuranceValue); SendClientMessage(playerid,COLOR_CINZA,stringpd);
			}
			if(TaxaCarros > 0) {
			    format(stringpd, sizeof(stringpd), "IPVA Veículos: -R$%d", TaxaCarros); SendClientMessage(playerid,COLOR_CINZA,stringpd);
			}
			format(stringpd, sizeof(stringpd), "Imposto do Governo: -R$%d", GovInfo[gTaxa]); 	SendClientMessage(playerid,COLOR_CINZA,stringpd);
   			if(PlayerInfo[playerid][pSavings] > 0) {
				format(stringpd, sizeof(stringpd), " Rendimento dos Savings: R$%d", Invest); 	SendClientMessage(playerid,COLOR_PD2,stringpd);
				format(stringpd, sizeof(stringpd), " Novo balanço dos Savings: R$%d", PlayerInfo[playerid][pSavings]); 	SendClientMessage(playerid,COLOR_PD2,stringpd);
			}
            format(stringpd, sizeof(stringpd), " Total recebido: R$%d", total); 	SendClientMessage(playerid, COLOR_LIGHTWHITE, stringpd);
   			SendClientMessage(playerid,COLOR_PD2, "|______________________|");
            format(stringpd, sizeof(stringpd), " Novo balanço: R$%d", PlayerInfo[playerid][pBanco]); 	SendClientMessage(playerid, COLOR_LIGHTWHITE, stringpd);
   			format(stringpd, sizeof(stringpd),"~y~PayDay~n~ ~w~Salario ~n~~g~R$%d",total);
			GameTextForPlayer(playerid,stringpd,10000,1);
			if(PlayerInfo[playerid][pApostouBicho] == 1)
			{
				SetTimerEx("FecharBicho", 100, false, "d");
				SetTimerEx("ResultadoBicho", 10000, false, "d");
			}


            PlayerInfo[playerid][pLevel]++;
			if(PlayerInfo[playerid][pLevel] >= 2 && PlayerInfo[playerid][pAjudaInicial] != 2)
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Utilize '/ajudainicial' para pegar o seu veículo da ajuda inicial.");

			if(PlayerInfo[playerid][pLevel] >= 4 && PlayerInfo[playerid][pAjudaInicialDim] != 1) {
			    PlayerInfo[playerid][pAjudaInicialDim] = 1;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Foi depositado em seu banco R$5.000 referente a ajuda do TC 4.");
			    PlayerInfo[playerid][pBanco]+= 5000;
			}

			if(PlayerInfo[playerid][pMascaraU] != 2) SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
			PlayerInfo[playerid][pPayDay] = 60;
            PlayerInfo[playerid][pSalarios] ++;
			new PontosAntes = PlayerInfo[playerid][pPontos];
			if(PlayerInfo[playerid][pSalarios] == 2) {
			    PlayerInfo[playerid][pPontos]++;
			    PlayerInfo[playerid][pSalarios] = 0;
			}
			if(PlayerInfo[playerid][pPontos] > PontosAntes)
				SendClientMessage(playerid, COLOR_YELLOW, "* Você recebeu 1 ponto de upgrade.");

			if(PlayerInfo[playerid][pPontos] > 0) {
				format(stringpd, sizeof(stringpd), "* Você tem %d pontos de upgrade (Use /upgrade).", PlayerInfo[playerid][pPontos]); 	SendClientMessage(playerid, COLOR_YELLOW, stringpd);
			}
		}
	}
	return 1;
}

forward Timer_Celular();
public Timer_Celular()
{
    new hour, mins, sec;
	new d,m,y;
	new DataSalvar[20],mes_name[12];
	getdate(y,m,d);
	gettime(hour,mins,sec);
	new strh[24], hourstr[4], minstr[4], secstr[4];
	if(hour < 10) { format(hourstr,sizeof(hourstr),"0%d",hour); } else { format(hourstr,sizeof(hourstr),"%d",hour); }
	if(mins < 10) { format(minstr,sizeof(minstr),"0%d",mins); } else { format(minstr,sizeof(minstr),"%d",mins); }
	if(sec < 10) { format(secstr,sizeof(secstr),"0%d",sec); } else { format(secstr,sizeof(secstr),"%d",sec); }

	switch(m)
	{
	    case 1: format(mes_name,sizeof(mes_name),"janeiro");
	    case 2: format(mes_name,sizeof(mes_name),"fevereiro");
	    case 3: format(mes_name,sizeof(mes_name),"marco");
	    case 4: format(mes_name,sizeof(mes_name),"abril");
	    case 5: format(mes_name,sizeof(mes_name),"maio");
	    case 6: format(mes_name,sizeof(mes_name),"junho");
	    case 7: format(mes_name,sizeof(mes_name),"julho");
	    case 8: format(mes_name,sizeof(mes_name),"agosto");
	    case 9: format(mes_name,sizeof(mes_name),"setembro");
	    case 10: format(mes_name,sizeof(mes_name),"outubro");
	    case 11: format(mes_name,sizeof(mes_name),"novembro");
	    case 12: format(mes_name,sizeof(mes_name),"dezembro");
	}

	format(strh,sizeof(strh),"%s:%s",hourstr,minstr);
	format(DataSalvar,sizeof(DataSalvar),"%d,_%s",d,mes_name);


	TextDrawSetString(Celular_Inicial[0], strh);
	TextDrawSetString(Celular_Inicial[1], DataSalvar);

	for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
	    if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid) && PlayerInfo[playerid][pLogado])
 		{
 		    if(CelularData[playerid][RastreandoTime] > 1) CelularData[playerid][RastreandoTime]--;
 		    else if(CelularData[playerid][RastreandoTime] == 1)
 		    {
 		        SendClientMessage(playerid, COLOR_LIGHTGREEN, "-> Você já pode rastrear um numero novamente.");
 		        CelularData[playerid][RastreandoTime] = 0;
 		    }
 		    if(CelularData[playerid][RastreandoTime] == 60) GangZoneDestroy(CelularData[playerid][GGRastreamento]);
 		    if(PegarSinalCelular(playerid) > 10.0 && CelularData[playerid][celModo] != 3)
 		    {
 		        new sms_total = 0;
	 		    for(new sms_id = 0; sms_id < 40; sms_id++)
				{
				    if(MensagensInfo[playerid][sms_id][smsAtivo] == 2)
					{
						MensagensInfo[playerid][sms_id][smsAtivo] = 1;

                        sms_total++;

						if(CelularData[playerid][NavegandoCel] == 5)
						{
						    SelecionarNovaOpcao(playerid,CelularData[playerid][MenuSelecionado]+1,2);
							CelularData[playerid][MenuSelecionado] = 1;
			      			NavegandoCelular(playerid,5);//Mensagens
						}
					}
				}
				if(sms_total > 0)
				{
				    TextDrawShowForPlayer(playerid,Celular_Base[13]);
					PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
				}
			}
			if(CelularData[playerid][CelularAberto] == 1)
			{
			    new tor_melhorid = PegarSinalCelular_TorID(playerid);
				new Float:Sinal = GetPlayerDistanceFromPoint(playerid, TorreData[tor_melhorid][torX], TorreData[tor_melhorid][torY], TorreData[tor_melhorid][torZ]),
				    Float:SinalEncontrado = PegarSinalCelular(playerid);

  				new Float:sinalmax = TorreData[tor_melhorid][torSinal];

 				Sinal = TorreData[tor_melhorid][torSinal]-Sinal;

				if(sinalmax > 0)
				{
	     			if(SinalEncontrado >= (sinalmax*0.8)) PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][0], 0x009A00FF);
					else if(SinalEncontrado >= (sinalmax*0.5) && SinalEncontrado < (sinalmax*0.8) ) PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][0], 0xD6C100FF);
					else if(SinalEncontrado >= (sinalmax*0.2) && SinalEncontrado < (sinalmax*0.5) ) PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][0], 0xA49DBCFF);
					else if(SinalEncontrado >= (sinalmax*0.1) && SinalEncontrado < (sinalmax*0.2) ) PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][0], 0x980000FF);
					else PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][0], 0x000000FF);
				}
				else PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][0], 0x000000FF);

				PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][0]);
				PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][0]);
			}
			if((CelularData[playerid][LigandoPara] != 999 && CelularData[playerid][LigandoParaNumAtendido] == 1)
			|| ((CelularData[playerid][AtendeuOrelhao] != 999 || CelularData[playerid][LigandoOrelhao] != 999) && CelularData[playerid][LigandoOrelhaoAtendido] == 1)
			|| (CelularData[playerid][LigandoParaNum] > 100 && CelularData[playerid][LigandoParaNum] < 999 && CelularData[playerid][LigandoParaNumAtendido] == 1))
			{
			    new comquemfalo;
				if(CelularData[playerid][LigandoOrelhao] == 999) comquemfalo = CelularData[playerid][LigandoPara];
				if(CelularData[playerid][LigandoParaNum] > 100 && CelularData[playerid][LigandoParaNum] < 1000) comquemfalo = 800;

                if(PegarSinalCelular(playerid) < 10.0)
                {
                    DesligarChamada(playerid, 3);
                    SendClientMessage(playerid, COLOR_YELLOW, "[!] Você entrou numa area sem sinal...");
                }
				else if(comquemfalo != 800 && PegarSinalCelular(comquemfalo) < 10.0)
				{
    				DesligarChamada(comquemfalo, 3);
    				SendClientMessage(comquemfalo, COLOR_YELLOW, "[!] Você entrou numa area sem sinal...");
				}
				else
				{
					CelularData[playerid][TempoChamada][0]++;
				    if(CelularData[playerid][TempoChamada][0] == 60)
				    {
				        CelularData[playerid][TempoChamada][1]++;
				        CelularData[playerid][TempoChamada][0] = 0;
				    }
				    if(CelularData[playerid][TempoChamada][1] == 60)
				    {
				        CelularData[playerid][TempoChamada][2]++;
				        CelularData[playerid][TempoChamada][1] = 0;
					}

					new strnumb[24];
					if(CelularData[playerid][LigandoParaNum] == 190 || CelularData[playerid][LigandoParaNum] == 191 || CelularData[playerid][LigandoParaNum] == 192 || CelularData[playerid][LigandoParaNum] == 193
					|| CelularData[playerid][LigandoParaNum] == 194 || CelularData[playerid][LigandoParaNum] == 195 || CelularData[playerid][LigandoParaNum] == 196) format(strnumb,sizeof(strnumb),"90");
					else format(strnumb,sizeof(strnumb),"%d",CelularData[playerid][LigandoParaNum]);

			 		new str[56],strhora[10],strmim[10],strseg[10];
			 		if(CelularData[playerid][TempoChamada][0] < 10) format(strseg,sizeof(strseg),"0%d", CelularData[playerid][TempoChamada][0]);
			 		else format(strseg,sizeof(strseg),"%d", CelularData[playerid][TempoChamada][0]);

			 		if(CelularData[playerid][TempoChamada][1] < 10) format(strmim,sizeof(strmim),"0%d", CelularData[playerid][TempoChamada][1]);
			 		else format(strmim,sizeof(strmim),"%d", CelularData[playerid][TempoChamada][1]);

			 		if(CelularData[playerid][TempoChamada][2] < 10) format(strhora,sizeof(strhora),"0%d", CelularData[playerid][TempoChamada][2]);
			 		else format(strhora,sizeof(strhora),"%d", CelularData[playerid][TempoChamada][2]);

					if(CelularData[playerid][LigandoParaNum] > 100 && CelularData[playerid][LigandoParaNum] < 1000)
					{
					    format(str,sizeof(str),"Em_chamada~n~(%s)~n~%s:%s:%s", strnumb,strhora,strmim,strseg);
					    PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], str);
					}
					else if(CelularData[playerid][AtendeuOrelhao] == 999 && CelularData[playerid][LigandoOrelhao] == 999)
					{
					    format(str,sizeof(str),"Em_chamada~n~(%s)~n~%s:%s:%s", strnumb,strhora,strmim,strseg);
					    PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], str);

				  		format(str,sizeof(str),"Em_chamada~n~(%d)~n~%s:%s:%s", CelularData[playerid][celNumero],strhora,strmim,strseg);
				  		PlayerTextDrawSetString(comquemfalo, Celular_PlayerV[comquemfalo][1], str);
					}
					else
					{
					    new orelhao_id = 999;
						if(CelularData[playerid][AtendeuOrelhao] != 999) orelhao_id = CelularData[playerid][AtendeuOrelhao];
						else orelhao_id = CelularData[playerid][LigandoOrelhao];

						if(orelhao_id != 999)
					    {
	    					format(strnumb,sizeof(strnumb),"024-%.3s-%.3s",TelPublico[orelhao_id][orPrefixo],TelPublico[orelhao_id][orNumero]);

					    	format(str,sizeof(str),"Em_chamada~n~(%s)~n~%s:%s:%s", strnumb,strhora,strmim,strseg);
					    	PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], str);
						}
					}
				}
			}
		}
	}
}

forward Timer_Segundos();
public Timer_Segundos()
{
	Timer_Celular();
	if(Anuncio > 0) Anuncio--;
	if(Anuncio == 0)

	{
	    Anuncio = 30;

	    new AnunciouAlgo = 0;
		if(AnuncioLista[0][AnuncioDono] != 0)
		{
			new stringan[256];
			format(stringan, sizeof(stringan), "%s", AnuncioLista[0][AnuncioMsg]);
			EnviarAnuncioDePlayer(COLOR_LIGHTGREEN, stringan);

			format(stringan, sizeof(stringan), "[ADM] Anunciante: %s.", AnuncioLista[0][AnuncioPor]);
			SendAdminMessage(COLOR_LIGHTRED,stringan);

			AnunciouAlgo++;
		}
		if(AnunciouAlgo != 0)
		{
			for(new anid = 0; anid < 100; anid++)
		    {
				if(AnuncioLista[anid][AnuncioDono] != 0)
	   			{
	   				new anid2 = (anid+1);
	      			AnuncioLista[anid][AnuncioDono] = AnuncioLista[anid2][AnuncioDono];
		        	format(AnuncioLista[anid][AnuncioPor], 24, "%s", AnuncioLista[anid2][AnuncioPor]);
			        format(AnuncioLista[anid][AnuncioMsg], 162, "%s", AnuncioLista[anid2][AnuncioMsg]);
				}
			}
		}
	}
	if(vehicle_creating == 1) vehicle_creating = 0;

	new hour, mins, sec;
	gettime(hour,mins,sec);

	new Horariorelogio = hour+1;
 	new timestring[24];

	new HoraIC, MinsIC = 99;

	if(hour == 0) HoraIC = 1, MinsIC = 0;
	else if(hour == 1) HoraIC = 1, MinsIC = 0;
	else if(hour == 2) HoraIC = 2, MinsIC = 0;
	else if(hour == 3) HoraIC = 3;
	else if(hour == 4) HoraIC = 4;
	else if(hour == 5) HoraIC = 5;
	else if(hour == 6) HoraIC = 6;
	else if(hour == 7) HoraIC = 10;
	else if(hour == 8) HoraIC = 11;
	else if(hour == 9) HoraIC = 12;
	else if(hour == 10) HoraIC = 13;
	else if(hour == 11) HoraIC = 14;
	else if(hour == 12) HoraIC = 15;

	else if(hour == 13) HoraIC = 16;
	else if(hour == 14) HoraIC = 17;
	else if(hour == 15) HoraIC = 18;
	else if(hour == 16) HoraIC = 19;
	else if(hour == 17) HoraIC = 20;
	else if(hour == 18) HoraIC = 21;
	else if(hour == 19) HoraIC = 22;
	else if(hour == 20) HoraIC = 23;
	else if(hour == 21) HoraIC = 24;
	else if(hour == 22) HoraIC = 1, MinsIC = 0;
	else if(hour == 23) HoraIC = 1, MinsIC = 0;
	else if(hour == 24)
	{
		hour = 0;
		HoraIC = 1;
		MinsIC = 0;
	}
	if(MinsIC == 99)
	{
	    MinsIC = mins;
	}

	new d,m,y;
	getdate(y,m,d);
	new hourstr[4], minstr[4], secstr[4];
	new str[256];

    if(hour == 24) hour = 0;
    if(Horariorelogio == 24) Horariorelogio = 0;

	if(hour < 10) { format(hourstr,sizeof(hourstr),"0%d",Horariorelogio); } else { format(hourstr,sizeof(hourstr),"%d",Horariorelogio); }
	if(mins < 10) { format(minstr,sizeof(minstr),"0%d",mins); } else { format(minstr,sizeof(minstr),"%d",mins); }
	if(sec < 10) {  format(secstr,sizeof(secstr),"0%d",sec); } else { format(secstr,sizeof(secstr),"%d",sec); }
	//format(timestring, sizeof (timestring), "   %02d:%02d", Horariorelogio, mins);
	format(timestring, sizeof (timestring), "   %d:%d", Horariorelogio, mins);
	TextDrawSetString(gTime,timestring);


	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) || PlayerInfo[i][pLogado])
 		{
 		    if(!IsPlayerNPC(i))
 		    {
			    if(PlayerInfo[i][pLogado])
			    {
			        //Ouvir Tiros
					for(new tt = 0; tt < 40; tt++)
					{
						if(AvisoTiroOuvido[i][tt] > 0) AvisoTiroOuvido[i][tt]--;
					}
			        //===============================================================
			        //Atualizar Player Pos
			        new Float:X,Float:Y,Float:Z;
					GetPlayerPos(i, X, Y, Z);


					if(PlayerInfo[i][pMorto] > 0){
					    if(GetPlayerAnimationIndex(i) == 0 && !IsPlayerInAnyVehicle(i)) {
					    	SetarAnimMorto(i);
							SetPlayerHealth(i, 15);
						}
					}
					else {
					    new Float:AtualVida;
						GetPlayerHealth(i,AtualVida);
						if(IsAFK[i] == false) {
							if(AtualVida > PlayerInfo[i][pHealthMax]){
							    TogglePlayerControllable(i, false);
							   	format(string, sizeof(string), "AdmWarn: O ANTI-CHEAT detectou que %s[%d] pode estar de GodMod. | Vida: %0.4f | HealthMax: %0.4f.", PlayerName(i,0), i, AtualVida, PlayerInfo[i][pHealthMax]);
								SendAdminMessage(COLOR_YELLOW,string);
								SetPlayerHealth(i, PlayerInfo[i][pHealthMax]);
							}
						}
						if(AtualVida <= 20 && PlayerInfo[i][pMorto] == 0 && (gettime() > AcabouDeLogar[i])){
						    if(GetPVarInt(i, "MorrerVidaBaixa") == 0)
								SetPVarInt(i, "MorrerVidaBaixa", gettime()+10);
						    else if(gettime() > GetPVarInt(i, "MorrerVidaBaixa"))
							{
						    	SetPlayerMorto(i, 1);
						    	SetPVarInt(i, "MorrerVidaBaixa", 0);
							}
						}
					}

                    if(GetPlayerAnimationIndex(i))
					{
					     new animlib[32],animname[32],acname[MAX_PLAYER_NAME];
					     GetPlayerName(i, acname, sizeof(acname));
					     GetAnimationName(GetPlayerAnimationIndex(i),animlib,32,animname,32);
					     if(strcmp(animlib, "PED", true) == 0)
					     {
					          if(strcmp(animname, "RUN_PLAYER", true) == 0)
					          {
					               SetPlayerSkin(i, PlayerInfo[i][pSkin]);
					          }
					     }
					}
	    			//===============================================================
	    			if(PlayerInfo[i][pMascaraU] == 1)
					{
					    new name[MAX_PLAYER_NAME];
	    				GetPlayerName(i, name, MAX_PLAYER_NAME);
					    if(strfind(name, "Mascarado") == -1) //Checa se a string da variável Cla foi encontrada dentro da string da variável Nome.
						{
					 		new randid = 1000 + random(9999);
							PlayerInfo[i][pMascID] = randid;
							GameTextForPlayer(i, "~p~Mascara colocada", 5000, 4);

							new stringname[24];
							format(stringname,sizeof(stringname),"Mascarado_%d",PlayerInfo[i][pMascID]);
							SetPlayerName(i, stringname);

							new strl[126];
							format(strl, sizeof(strl), "%s colocou uma mascara ID: %d", PlayerName(i,0), randid);
							LogCMD_Mascara(strl);
						}
					}
	    			//===============================================================
			        //Anti Jet Pack
					if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK) {
						if(PlayerInfo[i][pAdmin] < 0) {
						   	TogglePlayerControllable(i, false);
						   	format(string, sizeof(string), "AdmWarn: O ANTI-CHEAT baniu %s[%d] por criar um JetPack.", PlayerName(i,0), i);
							SendAdminMessage(COLOR_YELLOW,string);

							PlayerInfo[i][pBanido] = 1;

                            Banir(PrintPlayerIP(i),GetUserName(i),PlayerInfo[i][pID], "Anti Cheat","Jetpack");
                            SetTimerEx("TimerKick", 500, 0, "d", i);
					 	}
					}
			        if(GetPlayerSkin(i) < 1 || GetPlayerSkin(i) == 74) SetPlayerSkin(i, 29);
					if(PlayerInfo[i][pTomouAlgumTiro] > 0) {
					    if(OutrasInfos[i][oCaiSangue] < 4) OutrasInfos[i][oCaiSangue]++;
					    else {
					        OutrasInfos[i][oCaiSangue] = 0;
                            CriarSangue(i);
						}
					}
			        if(PlayerInfo[i][pHealthMax] < 90) PlayerInfo[i][pHealthMax] = 100;
					if(PlayerInfo[i][pUsouDroga] == 0) SetPlayerTime( i, HoraIC, mins);
					if(OutrasInfos[i][oLigDireta] > 1) OutrasInfos[i][oLigDireta]--;
					if(OutrasInfos[i][oLigDireta] == 1) {
					    OutrasInfos[i][oLigDireta] = 0;
					    SendClientMessage(i, COLOR_LIGHTGREEN, "- Você já pode tentar fazer outra ligação direta.");
					}
			        if(PlayerInfo[i][pArmaMao] != 0) {
	    				if(ArmaData[PlayerInfo[i][pArmaMao]][ArmaModelo] == 1 || ArmaData[PlayerInfo[i][pArmaMao]][ArmaModelo] == 4) {
		                    if(GetPlayerAmmo(i) == 0) {
		                        new weap = GetPlayerWeapon(i);
		                        SetPlayerAmmo(i, weap, 1);
		                    }
						}
					}
					//==========================================================
					//Taser
					if(GetPVarInt(i, "TempoTaser") > 1)
						SetPVarInt(i, "TempoTaser", GetPVarInt(i, "TempoTaser")-1);
					else if(GetPVarInt(i, "TempoTaser") == 1){
						SendClientMessage(i, COLOR_LIGHTGREEN, "-> Taser/Calibre 12 recarregado.");
						SetPVarInt(i, "TempoTaser", 0);
						if(TazerPlayer[i] == 1) GivePlayerWeapon(i, 23, 1);
					}
					//==========================================================
					if(AcabouDeLogarVida[i] > 0) AcabouDeLogarVida[i]--;
					if(AvisoDeSpeed[i] > 0) AvisoDeSpeed[i]--;
					new inter = GetPlayerInterior(i);
					if(inter == 0) {
					    new zone[MAX_ZONE_NAME];
				        GetPlayer2DRadarZone(i, zone, MAX_ZONE_NAME);
				        format(string,sizeof(string),"%s",zone);
				        TextDrawSetString(Textdraw49[i], string);
				        //==================================================
				        if(strcmp(string,"Ganton", true ) == 0) {
							if(ApagaoEmGanton == 1) {
							    if(GetPVarInt(i, "BairroEmApagao") == 0) {
									TextDrawShowForPlayer(i,ApagaoDraw);
									SendClientMessage(i, COLOR_LIGHTGREEN, "[APAGÃO] O bairro que você entrou no momento está sofrendo um apagão.");
									SetPVarInt(i, "BairroEmApagao", 1);
								}
							}
							else {
							    if(GetPVarInt(i, "BairroEmApagao") == 1) {
							        TextDrawHideForPlayer(i,ApagaoDraw);
							        SetPVarInt(i, "BairroEmApagao", 0);
							    }
							}
						}
						else
						{
						    if(GetPVarInt(i, "BairroEmApagao") == 1) {
				      			TextDrawHideForPlayer(i,ApagaoDraw);
					        	SetPVarInt(i, "BairroEmApagao", 0);
						    }
						}
						//==================================================
					}
					else {
						new OndeEntrou = 999;

					    if(PlayerInfo[i][pEntrouCasa] != -1) OndeEntrou = 1;
						else if(PlayerInfo[i][pEntrouEmpresa] != -1) OndeEntrou = 2;
						else if(PlayerInfo[i][pEntrouComplexo] != -1) OndeEntrou = 3;
						else if(PlayerInfo[i][pEntrouGaragem] != -1) OndeEntrou = 4;
						if(OndeEntrou == 1) {
						    new HouseID = PlayerInfo[i][pEntrouCasa];
						    new location[MAX_ZONE_NAME];
							Get2DZone(location, TOTAL_ZONE_NAME, HouseInfo[HouseID][hExX], HouseInfo[HouseID][hExY], HouseInfo[HouseID][hExZ]);
					        format(string,sizeof(string),"%s",location);
					        //TextDrawSetString(Textdraw49[i], string);
					        TextDrawSetString(Textdraw49[i], "");

					        if(HouseInfo[HouseID][hInterruptor] == 0) {
					            TextDrawShowForPlayer(i,InterruptorDraw);
					            SetPVarInt(i, "CasaApagada", 1);
		           			}
		           			else {
						        //==================================================
						        if(strcmp(string,"Ganton", true ) == 0) {
									if(ApagaoEmGanton == 1) {
									    if(GetPVarInt(i, "BairroEmApagao") == 0) {
											TextDrawShowForPlayer(i,ApagaoDraw);
											SendClientMessage(i, COLOR_LIGHTGREEN, "[APAGÃO] Esta casa está em um bairro que no momento está sofrendo um apagão.");
											SetPVarInt(i, "BairroEmApagao", 1);
											TextDrawHideForPlayer(i,InterruptorDraw);
									    	SetPVarInt(i, "CasaApagada", 0);
										}
									}
									else {
									    if(GetPVarInt(i, "BairroEmApagao") == 1) {
									        TextDrawHideForPlayer(i,ApagaoDraw);
									        SetPVarInt(i, "BairroEmApagao", 0);
									    }
									}
								}
								else
								{
								    if(GetPVarInt(i, "BairroEmApagao") == 1) {
						      			TextDrawHideForPlayer(i,ApagaoDraw);
							        	SetPVarInt(i, "BairroEmApagao", 0);
								    }
								}

								if(GetPVarInt(i, "BairroEmApagao") == 0) {
				    			    if(GetPVarInt(i, "CasaApagada") == 1) {
									    TextDrawHideForPlayer(i,InterruptorDraw);
									    SetPVarInt(i, "CasaApagada", 0);
									}
								}
					        	//==================================================
							}
						}
						else if(OndeEntrou == 2) {
						    new empid = PlayerInfo[i][pEntrouEmpresa];
						    new location[MAX_ZONE_NAME];
							Get2DZone(location, TOTAL_ZONE_NAME, EmpInfo[empid][eExX], EmpInfo[empid][eExY], EmpInfo[empid][eExZ]);
					        format(string,sizeof(string),"%s",location);
					        //TextDrawSetString(Textdraw49[i], string);
					        TextDrawSetString(Textdraw49[i], "");

					        //==================================================
					        if(strcmp(string,"Ganton", true ) == 0) {
								if(ApagaoEmGanton == 1) {
								    if(GetPVarInt(i, "BairroEmApagao") == 0)
								    {
										TextDrawShowForPlayer(i,ApagaoDraw);
										SendClientMessage(i, COLOR_LIGHTGREEN, "[APAGÃO] Esta empresa está em um bairro que no momento está sofrendo um apagão.");
										SetPVarInt(i, "BairroEmApagao", 1);
									}
								}
								else {
								    if(GetPVarInt(i, "BairroEmApagao") == 1) {
								        TextDrawHideForPlayer(i,ApagaoDraw);
								        SetPVarInt(i, "BairroEmApagao", 0);
								    }
								}
							}
							else {
							    if(GetPVarInt(i, "BairroEmApagao") == 1) {
					      			TextDrawHideForPlayer(i,ApagaoDraw);
						        	SetPVarInt(i, "BairroEmApagao", 0);
							    }
							}
					        //==================================================
						}
						else if(OndeEntrou == 3) {
						    new complexid = PlayerInfo[i][pEntrouComplexo];
						    new location[MAX_ZONE_NAME];
							Get2DZone(location, TOTAL_ZONE_NAME, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ]);
					        format(string,sizeof(string),"%s",location);
					        //TextDrawSetString(Textdraw49[i], string);
					        TextDrawSetString(Textdraw49[i], "");

					        //==================================================
					        if(strcmp(string,"Ganton", true ) == 0) {
								if(ApagaoEmGanton == 1) {
								    if(GetPVarInt(i, "BairroEmApagao") == 0) {
										TextDrawShowForPlayer(i,ApagaoDraw);
										SendClientMessage(i, COLOR_LIGHTGREEN, "[APAGÃO] Este complexo está em um bairro que no momento está sofrendo um apagão.");
										SetPVarInt(i, "BairroEmApagao", 1);
									}
								}
								else
								{
								    if(GetPVarInt(i, "BairroEmApagao") == 1) {
								        TextDrawHideForPlayer(i,ApagaoDraw);
								        SetPVarInt(i, "BairroEmApagao", 0);
								    }
								}
							}
							else
							{
							    if(GetPVarInt(i, "BairroEmApagao") == 1) {
					      			TextDrawHideForPlayer(i,ApagaoDraw);
						        	SetPVarInt(i, "BairroEmApagao", 0);
							    }
							}
					        //==================================================
						}
						else if(OndeEntrou == 4) {
						    new HouseID = PlayerInfo[i][pEntrouGaragem];
						    new location[MAX_ZONE_NAME];
							Get2DZone(location, TOTAL_ZONE_NAME, GaragemInfo[HouseID][hExX], GaragemInfo[HouseID][hExY], GaragemInfo[HouseID][hExZ]);
					        format(string,sizeof(string),"%s",location);
					        TextDrawSetString(Textdraw49[i], "");

					        if(GaragemInfo[HouseID][hInterruptor] == 0) {
					            TextDrawShowForPlayer(i,InterruptorDraw);
					            SetPVarInt(i, "CasaApagada", 1);
		           			}
		           			else
		           			{
						        //==================================================
						        if(strcmp(string,"Ganton", true ) == 0) {
									if(ApagaoEmGanton == 1) {
									    if(GetPVarInt(i, "BairroEmApagao") == 0) {
											TextDrawShowForPlayer(i,ApagaoDraw);
											SendClientMessage(i, COLOR_LIGHTGREEN, "[APAGÃO] Esta Garagem está em um bairro que no momento está sofrendo um apagão.");
											SetPVarInt(i, "BairroEmApagao", 1);
											TextDrawHideForPlayer(i,InterruptorDraw);
									    	SetPVarInt(i, "CasaApagada", 0);
										}
									}
									else {
									    if(GetPVarInt(i, "BairroEmApagao") == 1) {
									        TextDrawHideForPlayer(i,ApagaoDraw);
									        SetPVarInt(i, "BairroEmApagao", 0);
									    }
									}
								}
								else {
								    if(GetPVarInt(i, "BairroEmApagao") == 1) {
						      			TextDrawHideForPlayer(i,ApagaoDraw);
							        	SetPVarInt(i, "BairroEmApagao", 0);
								    }
								}

								if(GetPVarInt(i, "BairroEmApagao") == 0) {
				    			    if(GetPVarInt(i, "CasaApagada") == 1) {
									    TextDrawHideForPlayer(i,InterruptorDraw);
									    SetPVarInt(i, "CasaApagada", 0);
									}
								}
					        	//==================================================
							}
						}
						else
							TextDrawSetString(Textdraw49[i], "");
					}
			        //Casas
			        CasaNenhuma[i] = 0;
			        for(new h = 0; h < MAX_HOUSES; h++)
			        {
			            if(HouseInfo[h][hDono] == PlayerInfo[i][pID])
			            {
				            if(HouseInfo[h][hInterruptor] == 1)
						    {
						        HouseInfo[h][hGasto]++;
						    }
						}

			            if(HouseInfo[h][hExX] != 0)
			            {
				            if(IsPlayerInRangeOfPoint(i, 2, HouseInfo[h][hExX], HouseInfo[h][hExY], HouseInfo[h][hExZ]) && GetPlayerVirtualWorld(i) == HouseInfo[h][hExWorld] && GetPlayerInterior(i) == HouseInfo[h][hExInt])
			   				{
				            	if (HouseInfo[h][hCriada])
				  				{
					    		    if(VendoCasa[i] != h)
					    		    {
					    		        if(IsValidDynamicCP(VendoCasaCheckPoint[i]))
											DestroyDynamicCP(VendoCasaCheckPoint[i]);
					    		        if(HouseInfo[h][hTipo] == 0)
					    		        {
						    		        if(HouseInfo[h][hAVenda] == 0)
											{
											    format(string, sizeof(string), "Você esta na porta da casa de numero %d.", h);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
			 									format(string, sizeof(string), "Endereço: %s.", HouseInfo[h][hEndereco]);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
					 							format(string, sizeof(string), "Comandos disponíveis: /entrar /g(ritar) /pdo /pme /bater");
					 							SendClientMessage(i, COLOR_WHITE, string);
											}
											else
											{
											    format(string, sizeof(string), "Você esta na porta da de numero %d.", h);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
			 									format(string, sizeof(string), "Endereço: %s.", HouseInfo[h][hEndereco]);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
			 									format(string, sizeof(string), "Casa a venda por: R$%d", HouseInfo[h][hPreco]);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
					 							format(string, sizeof(string), "Comandos disponíveis: /comprar");
					 							SendClientMessage(i, COLOR_WHITE, string);
											}
											VendoCasa[i] = h;
			 								VendoCasaCheckPoint[i] = CreateDynamicCP(HouseInfo[h][hExX], HouseInfo[h][hExY], HouseInfo[h][hExZ]-1, 1, GetPlayerVirtualWorld(i), -1, i);
										}
										else
										{
										    if(HouseInfo[h][hAVenda] == 0)
											{
											    format(string, sizeof(string), "Você esta na porta da casa de numero %d.", h);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
			 									format(string, sizeof(string), "Endereço: %s.", HouseInfo[h][hEndereco]);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
											}
											else
											{
											    format(string, sizeof(string), "Você esta na porta da de numero %d.", h);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
			 									format(string, sizeof(string), "Endereço: %s.", HouseInfo[h][hEndereco]);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
			 									format(string, sizeof(string), "Casa a venda por: R$%d", HouseInfo[h][hPreco]);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
					 							format(string, sizeof(string), "Comandos disponíveis: /comprar");
					 							SendClientMessage(i, COLOR_WHITE, string);
					 							VendoCasaCheckPoint[i] = CreateDynamicCP(HouseInfo[h][hExX], HouseInfo[h][hExY], HouseInfo[h][hExZ]-1, 1, GetPlayerVirtualWorld(i), -1, i);
											}
											VendoCasa[i] = h;
										}
									}
									CasaNenhuma[i]++;
					    		}
							}
							if(IsPlayerInRangeOfPoint(i, 2, HouseInfo[h][hExX2], HouseInfo[h][hExY2], HouseInfo[h][hExZ2]) && GetPlayerVirtualWorld(i) == HouseInfo[h][hExWorld] && GetPlayerInterior(i) == HouseInfo[h][hExInt])
			   				{
				            	if (HouseInfo[h][hCriada])
				  				{
					    		    if(VendoCasa[i] != h)
					    		    {
					    		        if(IsValidDynamicCP(VendoCasaCheckPoint[i]))
											DestroyDynamicCP(VendoCasaCheckPoint[i]);
					    		        if(HouseInfo[h][hTipo] == 0)
					    		        {
						    		        if(HouseInfo[h][hAVenda] == 0)
											{
											    format(string, sizeof(string), "Você esta na porta da casa de numero %d.", h);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
			 									format(string, sizeof(string), "Endereço: %s.", HouseInfo[h][hEndereco]);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
					 							format(string, sizeof(string), "Comandos disponíveis: /entrar /g(ritar) /pdo /pme /bater");
					 							SendClientMessage(i, COLOR_WHITE, string);
											}
											else
											{
											    format(string, sizeof(string), "Você esta na porta da de numero %d.", h);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
			 									format(string, sizeof(string), "Endereço: %s.", HouseInfo[h][hEndereco]);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
			 									format(string, sizeof(string), "Casa a venda por: R$%d", HouseInfo[h][hPreco]);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
					 							format(string, sizeof(string), "Comandos disponíveis: /comprar");
					 							SendClientMessage(i, COLOR_WHITE, string);
											}
											VendoCasa[i] = h;
			 								VendoCasaCheckPoint[i] = CreateDynamicCP(HouseInfo[h][hExX2], HouseInfo[h][hExY2], HouseInfo[h][hExZ2]-1, 1, GetPlayerVirtualWorld(i), -1, i);
										}
										else
										{
										    if(HouseInfo[h][hAVenda] == 0)
											{
											    format(string, sizeof(string), "Você esta na porta da casa de numero %d.", h);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
			 									format(string, sizeof(string), "Endereço: %s.", HouseInfo[h][hEndereco]);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
											}
											else
											{
											    format(string, sizeof(string), "Você esta na porta da de numero %d.", h);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
			 									format(string, sizeof(string), "Endereço: %s.", HouseInfo[h][hEndereco]);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
			 									format(string, sizeof(string), "Casa a venda por: R$%d", HouseInfo[h][hPreco]);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
					 							format(string, sizeof(string), "Comandos disponíveis: /comprar");
					 							SendClientMessage(i, COLOR_WHITE, string);
					 							VendoCasaCheckPoint[i] = CreateDynamicCP(HouseInfo[h][hExX2], HouseInfo[h][hExY2], HouseInfo[h][hExZ2]-1, 1, GetPlayerVirtualWorld(i), -1, i);
											}
											VendoCasa[i] = h;
										}
									}
									CasaNenhuma[i]++;
					    		}
							}
						}
			        }
			        if(CasaNenhuma[i] == 0)
					{
	    				if(VendoCasa[i] != 9999) {
	    				    if(IsValidDynamicCP(VendoCasaCheckPoint[i]))
								DestroyDynamicCP(VendoCasaCheckPoint[i]);
						}
			  			VendoCasa[i] = 9999;

					}
					//Garagens
					GaragemNenhuma[i] = 0;
					for(new h = 0; h < MAX_GARAGENS; h++)
			        {

			            if(GaragemInfo[h][hTipo] == 0)
			            {
				            if(GaragemInfo[h][hDono] == PlayerInfo[i][pID])
				            {
					            if(GaragemInfo[h][hInterruptor] == 1)
							    {
							        GaragemInfo[h][hGasto]++;
							    }
							}
						}
						else
						{
						    new houseid = GaragemInfo[h][hTipo];
						    if(GaragemInfo[houseid][hDono] == PlayerInfo[i][pID])
				            {
					            if(GaragemInfo[h][hInterruptor] == 1)
							    {
							        GaragemInfo[h][hGasto]++;
							    }
							}
						}

			            if(GaragemInfo[h][hExX] != 0)
			            {
				            if(IsPlayerInRangeOfPoint(i, 2, GaragemInfo[h][hExX], GaragemInfo[h][hExY], GaragemInfo[h][hExZ]) && GetPlayerVirtualWorld(i) == GaragemInfo[h][hExWorld] && GetPlayerInterior(i) == GaragemInfo[h][hExInt])
			   				{
				            	if (GaragemInfo[h][hCriada])
				  				{
					    		    if(VendoGaragem[i] != h)
					    		    {
					    		        if(IsValidDynamicCP(VendoCasaCheckPoint[i]))
											DestroyDynamicCP(VendoCasaCheckPoint[i]);
					    		        if(GaragemInfo[h][hTipo] != 0)
										{
						    				format(string, sizeof(string), "Você esta em frente a garagem da casa %d.", GaragemInfo[h][hTipo]);
											SendClientMessage(i, COLOR_LIGHTGREEN, string);
		 									format(string, sizeof(string), "Comandos disponíveis: /entrar /g(ritar) /pdo /pme /bater");
		 									SendClientMessage(i, COLOR_WHITE, string);
											VendoGaragem[i] = h;
			 								VendoCasaCheckPoint[i] = CreateDynamicCP(GaragemInfo[h][hExX], GaragemInfo[h][hExY], GaragemInfo[h][hExZ]-1, 1, GetPlayerVirtualWorld(i), -1, i);
										}
										else
										{
										    if(GaragemInfo[h][hAVenda] == 0)
											{
											    format(string, sizeof(string), "Você esta em frente a garagem de numero %d.", h);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
											}
											else
											{
											    format(string, sizeof(string), "Você esta em frente a garagem de numero %d.", h);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
			 									format(string, sizeof(string), "Garagem a venda por: R$%d", GaragemInfo[h][hPreco]);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
					 							format(string, sizeof(string), "Comandos disponíveis: /comprar");
					 							SendClientMessage(i, COLOR_WHITE, string);
					 							VendoCasaCheckPoint[i] = CreateDynamicCP(GaragemInfo[h][hExX], GaragemInfo[h][hExY], GaragemInfo[h][hExZ]-1, 1, GetPlayerVirtualWorld(i), -1, i);
											}
											VendoGaragem[i] = h;
										}
									}
									GaragemNenhuma[i]++;
					    		}
							}
						}
			        }
			        if(GaragemNenhuma[i] == 0)
					{
	    				if(VendoGaragem[i] != 9999){
	    				    if(IsValidDynamicCP(VendoCasaCheckPoint[i]))
								DestroyDynamicCP(VendoCasaCheckPoint[i]);
	    				}
			  			VendoGaragem[i] = 9999;

					}
					//Complexos
			        ComplexoNenhuma[i] = 0;
			        for(new c = 0; c < MAX_COMPLEXOS; c++)
			        {
			            if(ComplexoInfo[c][cExX] != 0)
			            {
				            if(IsPlayerInRangeOfPoint(i, 2, ComplexoInfo[c][cExX], ComplexoInfo[c][cExY], ComplexoInfo[c][cExZ]) && GetPlayerVirtualWorld(i) == 0 && GetPlayerInterior(i) == 0)
			   				{
				            	if (ComplexoInfo[c][cCriada])
				  				{
					    		    if(VendoComplexo[i] != c)
					    		    {
					    		        if(ComplexoInfo[c][cAVenda] == 0)
										{
										    if(ComplexoInfo[c][complexTipo] != 2)
										    {
											    format(string, sizeof(string), "Você esta em frente a um complexo.");
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
					 							format(string, sizeof(string), "Comandos disponíveis: /entrar /g(ritar) /pdo /pme /bater");
					 							SendClientMessage(i, COLOR_WHITE, string);
											}
										}
										else
										{
										    if(ComplexoInfo[c][complexTipo] != 2)
										    {
											    format(string, sizeof(string), "Você esta em frente a um complexo.");
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
			 									format(string, sizeof(string), "Complexo a venda por: R$%d", ComplexoInfo[c][cPreco]);
			 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
					 							format(string, sizeof(string), "Comandos disponíveis: /comprar");
					 							SendClientMessage(i, COLOR_WHITE, string);
											}
										}
			 							VendoComplexo[i] = c;
			 							VendoCasaCheckPoint[i] = CreateDynamicCP(ComplexoInfo[c][cExX], ComplexoInfo[c][cExY], ComplexoInfo[c][cExZ]-1, 1, GetPlayerVirtualWorld(i), -1, i);
									}
									ComplexoNenhuma[i]++;
					    		}
							}
							else if(IsPlayerInRangeOfPoint(i, 2, ComplexoInfo[c][cExX2], ComplexoInfo[c][cExY2], ComplexoInfo[c][cExZ2]) && GetPlayerVirtualWorld(i) == 0 && GetPlayerInterior(i) == 0)
			   				{
			   				    if(ComplexoInfo[c][cExX2] != 0)
			   				    {
					            	if (ComplexoInfo[c][cCriada])
					  				{
						    		    if(VendoComplexo[i] != c)
						    		    {
				 							if(ComplexoInfo[c][cAVenda] == 0)
											{
											    if(ComplexoInfo[i][complexTipo] == 0)
											    {
											    	format(string, sizeof(string), "Você esta em frente a um complexo.");
			 										SendClientMessage(i, COLOR_LIGHTGREEN, string);
					 								format(string, sizeof(string), "Comandos disponíveis: /entrar /g(ritar) /pdo /pme /bater");
					 								SendClientMessage(i, COLOR_WHITE, string);
												}
											}
											else
											{
											    if(ComplexoInfo[i][complexTipo] == 0)
											    {
												    format(string, sizeof(string), "Você esta em frente o complexo de Governo de SA.");
				 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
				 									format(string, sizeof(string), "Complexo a venda por: R$%d", ComplexoInfo[c][cPreco]);
				 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
						 							format(string, sizeof(string), "Comandos disponíveis: /comprar");
						 							SendClientMessage(i, COLOR_WHITE, string);
												}
											}
				 							VendoComplexo[i] = c;
				 							VendoCasaCheckPoint[i] = CreateDynamicCP(ComplexoInfo[c][cExX], ComplexoInfo[c][cExY], ComplexoInfo[c][cExZ]-1, 1, GetPlayerVirtualWorld(i), -1, i);
										}
										ComplexoNenhuma[i]++;
									}
					    		}
							}
							else if(IsPlayerInRangeOfPoint(i, 2, ComplexoInfo[c][cExX3], ComplexoInfo[c][cExY3], ComplexoInfo[c][cExZ3]) && GetPlayerVirtualWorld(i) == 0 && GetPlayerInterior(i) == 0)
			   				{
			   				    if(ComplexoInfo[c][cExX3] != 0)
			   				    {
					            	if (ComplexoInfo[c][cCriada])
					  				{
						    		    if(VendoComplexo[i] != c)
						    		    {
				 							if(ComplexoInfo[c][cAVenda] == 0)
											{
											    if(ComplexoInfo[i][complexTipo] == 0)
											    {
											    	format(string, sizeof(string), "Você esta em frente a um complexo.");
			 										SendClientMessage(i, COLOR_LIGHTGREEN, string);
					 								format(string, sizeof(string), "Comandos disponíveis: /entrar /g(ritar) /pdo /pme /bater");
					 								SendClientMessage(i, COLOR_WHITE, string);
												}
											}
											else
											{
											    if(ComplexoInfo[i][complexTipo] == 0)
											    {
												    format(string, sizeof(string), "Você esta em frente o complexo de Governo de SA.");
				 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
				 									format(string, sizeof(string), "Complexo a venda por: R$%d", ComplexoInfo[c][cPreco]);
				 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
						 							format(string, sizeof(string), "Comandos disponíveis: /comprar");
						 							SendClientMessage(i, COLOR_WHITE, string);
												}
											}
				 							VendoComplexo[i] = c;
				 							VendoCasaCheckPoint[i] = CreateDynamicCP(ComplexoInfo[c][cExX], ComplexoInfo[c][cExY], ComplexoInfo[c][cExZ]-1, 1, GetPlayerVirtualWorld(i), -1, i);
										}
										ComplexoNenhuma[i]++;
									}
					    		}
							}
						}
			        }
			        if(ComplexoNenhuma[i] == 0)
					{
					    if(VendoComplexo[i] != 9999){
					        if(IsValidDynamicCP(VendoCasaCheckPoint[i]))
								DestroyDynamicCP(VendoCasaCheckPoint[i]);
					    }
			  			VendoComplexo[i] = 9999;
					}
					//Empresas
			        EmpresaNenhuma[i] = 0;
			        for(new e = 0; e < MAX_EMPRESAS; e++)
			        {
			            if(EmpInfo[e][eExX] != 0)
			            {
				            if(IsPlayerInRangeOfPoint(i, 2, EmpInfo[e][eExX], EmpInfo[e][eExY], EmpInfo[e][eExZ]) && GetPlayerVirtualWorld(i) == EmpInfo[e][eExWorld] && GetPlayerInterior(i) == EmpInfo[e][eExInt])
			   				{
				            	if (EmpInfo[e][eCriada])
				  				{
					    		    if(VendoEmpresa[i] != e)
					    		    {
					    		        if(EmpInfo[e][eAVenda] == 1)
										{
										    format(string, sizeof(string), "Você esta em frente a uma empresa a venda.");
		 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
		 									format(string, sizeof(string), "Valor: R$%d", EmpInfo[e][ePreco]);
		 									SendClientMessage(i, COLOR_LIGHTGREEN, string);
				 							format(string, sizeof(string), "Comandos disponíveis: /comprar");
				 							SendClientMessage(i, COLOR_WHITE, string);
										}
			 							VendoEmpresa[i] = e;
									}
									EmpresaNenhuma[i]++;
					    		}
							}
						}
			        }
			        if(EmpresaNenhuma[i] == 0)
					{
			  			VendoEmpresa[i] = 9999;
					}
					IndustriaNenhuma[i] = 0;
					for(new pe = 0; pe < MAX_EMPCARGA; pe++)
			        {
			            if(PontoEntrega[pe][emExiste])
			            {
				            if(IsPlayerInRangeOfPoint(i, 2, PontoEntrega[pe][emX], PontoEntrega[pe][emY], PontoEntrega[pe][emZ]))
			   				{
    		    				if(VendoIndustria[i] != pe)
				    		    {
				    		        format(string, sizeof(string), "Você está em frente à %s.", PontoEntrega[pe][emNome]); SendClientMessage(i, COLOR_LIGHTGREEN, string);
    		        				if(PontoEntrega[pe][emFabrica] > 0 && PontoEntrega[pe][emFabrica] < 9999) {
										format(string, sizeof(string), "Aqui você pode comprar: %s à R$%d.", GetProdutoNome(PontoEntrega[pe][emFabrica]), PontoEntrega[pe][emCobraProd]); SendClientMessage(i, COLOR_CINZA, string); }
									if(PontoEntrega[pe][emCompra] > 0 && PontoEntrega[pe][emCompra] < 9999) {
					    				format(string, sizeof(string), "Aqui você pode vender: %s por R$%d.", GetProdutoNome(PontoEntrega[pe][emCompra]), PontoEntrega[pe][emPagProd]); SendClientMessage(i, COLOR_CINZA, string); }
									SendClientMessage(i, COLOR_CINZA, "(( Pode ser que nas proximidades existam outros pontos da industria, para comprar/vender outros tipos de carga. ))");
	 								VendoIndustria[i] = pe;
								}
								IndustriaNenhuma[i]++;
		    				}
						}
					}
			        if(IndustriaNenhuma[i] == 0)
					{
			  			VendoIndustria[i] = 9999;
					}
			        //Money
	          		new DinheiroAtual = GetPlayerMoney(i);
			        if(DinheiroAtual != PlayerInfo[i][pGrana])
			        {
		         		ResetPlayerMoney(i);
		         		GivePlayerMoney(i,PlayerInfo[i][pGrana]);
			        }
			        //Taxi
			        if(TransportTime[i] > 0)
					{
					    if(TransportTime[i] >= 16)
						{
							TransportTime[i] = 1;
							if(TransportDriver[i] < 999)
							{
								if(IsPlayerConnected(TransportDriver[i]))
								{
								    if(TransportCost[i] <= PlayerInfo[i][pGrana])
								    {
			      						TransportCost[i] += TransportValue[TransportDriver[i]];
								    	TransportCost[TransportDriver[i]] = TransportCost[i];
									}
									else
									{
										RemovePlayerFromVehicle(i);
									}
								}
							}
						}
					    TransportTime[i] += 1;
					    format(string, sizeof(string), "~r~%d ~w~: ~g~R$%d",TransportTime[i],TransportCost[i]);
					    GameTextForPlayer(i, string, 15000, 6);
					}
					if(TaxiCallTime[i] > 0)
					{
					    if(TaxiAccepted[i] < 999)
					    {
						    if(IsPlayerConnected(TaxiAccepted[i]))
						    {
								GetPlayerPos(TaxiAccepted[i], X, Y, Z);
								SetPlayerCheckpoint(i, X, Y, Z, 5);
						    }
						}
					}
					if(MecCallTime[i] > 0)
					{
					    if(MecAccepted[i] < 999)
					    {
						    if(IsPlayerConnected(MecAccepted[i]))
						    {
								GetPlayerPos(MecAccepted[i], X, Y, Z);
								SetPlayerCheckpoint(i, X, Y, Z, 5);
						    }
						}
					}
					//Veiculo - Milhagem
					if(IsPlayerInAnyVehicle(i))
					{
						new slot = GetVehicleSlot(GetPlayerVehicleID(i));
				    	if(slot > -1)
				    	{
				        	if(VehicleInfo[slot][vMileage] < 9999999)
				        	{
				        		VehicleInfo[slot][vMileage] += GetPlayerMileage(i,true);
				        	}
							if(VehicleInfo[slot][vConsertando] == 0)
							{
							    new Float:vidav;
						    	GetVehicleHealth(VehicleInfo[slot][vVehicle], vidav);

						    	new engine,lights,alarm,doors,bonnet,boot,objective;
								GetVehicleParamsEx(VehicleInfo[slot][vVehicle],engine,lights,alarm,doors,bonnet,boot,objective);

						    	if(engine == 1)
						    	{
	                                if(vidav < 300)
							    	{
							    	    if(IsPushbike(GetVehicleModel(GetPlayerVehicleID(i))))
										{
										    SetVehicleHealth(VehicleInfo[slot][vVehicle], 1000);
											SetVehicleParamsEx(VehicleInfo[slot][vVehicle],1,lights,alarm,doors,bonnet,boot,objective);
										}
										else
										{
								    	    SetVehicleHealth(VehicleInfo[slot][vVehicle], 300);
											SetVehicleParamsEx(VehicleInfo[slot][vVehicle],0,0,alarm,doors,bonnet,boot,objective);
											SCM(i,COLOR_LIGHTRED, "O seu veículo quebrou..");
										}
							        }
								}
							    if(vidav > VehicleInfo[slot][vHealth])
							    {
							        for(new pp = 0; pp < MAX_PLAYERS; pp++)
							        {
							            if(IsPlayerConnected(pp) && !IsPlayerNPC(pp) && IsPlayerInAnyVehicle(pp))
										{
					                        new vehiid = GetPlayerVehicleID(pp);
					                        if(vehiid != 0)
					                        {
												if(vehiid == VehicleInfo[slot][vVehicle])
												{
												    //format(string, sizeof(string), "[ANTI-HACK] %s é suspeito de estar usando o hack RepairVehicle (ID: %d) [Health V: %.4f]", PlayerName(pp,1), pp,VehicleInfo[slot][vHealth]);
													//SendAdminMessage(COLOR_LIGHTRED,string);

													SetVehicleHealth(VehicleInfo[slot][vVehicle], VehicleInfo[slot][vHealth]);
													SetVehicleDamage(VehicleInfo[slot][vVehicle]);
													//VehicleInfo[slot][vHealth] = vidav;
												}
											}
										}
							        }
							    }
							    else
							    {
							        SaveVehicleDamage(VehicleInfo[slot][vVehicle]);
							        VehicleInfo[slot][vHealth] = vidav;
							    }
							}

						}
				    }
					if (PlayerInfo[i][pRegistrado] && PlayerInfo[i][pTutorial] && !PlayerInfo[i][pTemPreso] && PlayerInfo[i][pRegistrado] && IsPlayerConnected(i))
					{
						new Float:health;
						GetPlayerHealth(i,health);
						new Float:Perda;
						if(PlayerInfo[i][pFome] == 0) Perda = 1.0;
						if(PlayerInfo[i][pSede] == 0) Perda = 2.0;
						//else Perda = 0.10;

            			PlayerInfo[i][pFomeTime]++;
						PlayerInfo[i][pSedeTime]++;
		    			if (PlayerInfo[i][pFomeTime] >= 180)
						{

							
							SetPlayerHealth(i, health-Perda);
							P_Health[i] = health-Perda; 

							if (PlayerInfo[i][pFome] > 0 )
							{
    	        				PlayerInfo[i][pFome]--;
    		    			}
        					else if (PlayerInfo[i][pFome] == 0)
							{
    	        				SetPlayerHealth(i, health-Perda -5);
        					}
        					PlayerInfo[i][pFomeTime] = 0;
							updateTextDrawFomeSede(i);

							
        				}
	        			if (PlayerInfo[i][pSedeTime] >= 180)
						{
							if (PlayerInfo[i][pSede] > 0)
							{
    	        				PlayerInfo[i][pSede]--;
							}
							else if (PlayerInfo[i][pSede] == 0)
							{
		        				SetPlayerHealth(i, health-Perda -6);
        					}
        					PlayerInfo[i][pSedeTime] = 0;
							updateTextDrawFomeSede(i);
						}
					}
					//Outras - Timers
			        if(PlayerInfo[i][pTempoPLD] > 0) { PlayerInfo[i][pTempoPLD]--; }
			        if(PlayerInfo[i][pArrombarDNV] > 0) { PlayerInfo[i][pArrombarDNV]--; }
			        if(PlayerInfo[i][pArrombarDNV_C] > 0) { PlayerInfo[i][pArrombarDNV_C]--; }
			        if(GetPVarInt(i, "HitMark") > 0)
					{
					    SetPVarInt(i, "HitMark", GetPVarInt(i, "HitMark")-1);
					    if(GetPVarInt(i, "HitMark") == 0)
					    {
					        TextDrawHideForPlayer(i,HitMark);
					    }
					}
					if(GetPVarInt(i, "CommandTime") > 0)
		    	    {
		    	        SetPVarInt(i, "CommandTime", GetPVarInt(i, "CommandTime")-1);
		    	        if(GetPVarInt(i, "CommandTime") == 0)
		    	        {
		    	            DeletePVar(i,"CommandTime");
		    	            DeletePVar(i,"CommandSpam");
		    	            SetPVarInt(i, "Mute", 0);
		    	            //SendClientMessage(i, COLOR_LIGHTRED, "{FF6347} Você foi desmutado!");
		    	        }
		    	    }
					//
					if(AcabouDeMorrer[i] > 0) AcabouDeMorrer[i]--;
	      		    //Tempo para Desistir
	      		    if(TempoDesistir[i] > 0)
	      		    {
	      		        TempoDesistir[i]--;
	      		        if(TempoDesistir[i] == 1)
	      		    	{
	      		    	    if(PlayerInfo[i][pMorto] > 0)
	      		    	    {
	      		    	    	PodeAceitarMorte[i] = 1;
								SendClientMessage(i, COLOR_YELLOW, "-> Você já pode utilizar o comando /aceitarmorte para respawnar.");
							}
	      		    	}
	      		    }
	      		    if(PlayerInfo[i][pTempoMorto] > 0)
	      		    {
	      		        new temporestante = (PlayerInfo[i][pTempoMorto]-gettime());
			  			if(temporestante <= 0) SairDoHospital(i);
					}
	      		    //=================== [ caixa eletrônico ] Entrega de Malote
	      		    if(company_work_stage[i] == 5)
					{
					    for(new a = 0; a < MAX_ATM; a++)
						{
							if(ATMs[a][aSeteda] == 1)
							{
			    				if(ATMs[a][aGrana] < 15000)
					    		{
	    	    					format(str,sizeof(str),"%d",ATMs[a][aGrana]);
					    	    	UpdatePlayer3DTextLabelText(i, ATMText[a], 0x00893F9E, str);
								}
								else
								{
				    				format(str,sizeof(str),"%d",ATMs[a][aGrana]);
								    UpdatePlayer3DTextLabelText(i, ATMText[a], 0x8900009E, str);
								}
							}
						}
					}
					//=============================
					if(progress_wait[i] >= 1 && progress_wait[i] < progress_wait_max[i])
					{
						ShowProgressBarForPlayer(i,progress_bar[i]);
			            new Float:tmp = progress_wait[i];
			            new Float:tmp2 = progress_wait_max[i];
			            new Float:prog = ((tmp / tmp2) * 100.0);
			            SetProgressBarValue(progress_bar[i],prog);
			            ShowProgressBarForPlayer(i,progress_bar[i]);
						progress_wait[i] ++;
					}
					if(progress_wait[i] == progress_wait_max[i])
					{

						SetProgressBarValue(progress_bar[i],0.0);
						HideProgressBarForPlayer(i,progress_bar[i]);
						progress_wait[i] = 0;
						progress_wait_max[i] = 0;
						OnProgressBarFinish(i,progress_wait_type[i]);
						progress_wait_type[i] = PROGRESS_BAR_INVALID;

					}
					//=============================
					//if(OutrasInfos[i][oPodePas] > 0) OutrasInfos[i][oPodePas]--;
					//=============================
					if(IsAFK[i] == true)
					{
						AFKTimer[i]++;
					}
					if(GetPVarInt(i, "CuffedTime") > 0)
					{
			    		SetPVarInt(i, "CuffedTime", GetPVarInt(i, "CuffedTime")-1);
			    		if(GetPVarInt(i, "CuffedTime") == 0)
						{
						    SetPVarInt(i, "Cuffed", 0);
						    TogglePlayerControllable(i,true);
						}
					}
					//Alarme
					new perto_alarme = GetClosestAlarme(i);
					if(perto_alarme > -1)
					{
						if(ouvindoxmradio[i] == 0)
	    				{
						    if(HouseInfo[perto_alarme][hAlarmeDisparado] > 0)
						    {
		        				PlayAudioStreamForPlayer(i, "https://cp-frp.com.br.com/midia/alarme_casa.mp3", HouseInfo[perto_alarme][hExX],HouseInfo[perto_alarme][hExY],HouseInfo[perto_alarme][hExZ], 50.0, 1);
		        				ouvindoxmradio[i] = 5;
						    }
						}
					}
					else if(perto_alarme == -1 && ouvindoxmradio[i] == 5)
					{
						ouvindoxmradio[i] = 0;
		                StopAudioStreamForPlayer(i);
					}
					//Alarme - Garagem
					new perto_alarmeg = GetClosestAlarmeGaragem(i);
					if(perto_alarmeg > -1)
					{
						if(ouvindoxmradio[i] == 0)
	    				{
						    if(GaragemInfo[perto_alarmeg][hAlarmeDisparado] > 0)
						    {
		        				PlayAudioStreamForPlayer(i, "https://cp-frp.com.br.com/midia/alarme_casa.mp3", GaragemInfo[perto_alarmeg][hExX],GaragemInfo[perto_alarmeg][hExY],GaragemInfo[perto_alarmeg][hExZ], 50.0, 1);
		        				ouvindoxmradio[i] = 5;
						    }
						}
					}
					else if(perto_alarmeg == -1 && ouvindoxmradio[i] == 5)
					{
						ouvindoxmradio[i] = 0;
		                StopAudioStreamForPlayer(i);
					}
					//Boombox
					new boom_box = GetClosestBoomBox(i,35.0);
					if(boom_box > -1)
					{
					    if(ouvindoxmradio[i] == 0)
					    {
						    if(strlen(BoomBoxInfo[boom_box][boStream]))
						    {
						        if(streaming_boombox[i] != boom_box)
						        {
							        boom_box_handle[i] = PlayAudioStreamForPlayer(i, BoomBoxInfo[boom_box][boStream], BoomBoxInfo[boom_box][boX],BoomBoxInfo[boom_box][boY],BoomBoxInfo[boom_box][boZ], BoomBoxInfo[boom_box][boVolume], 1);
							        streaming_boombox[i] = boom_box;
						        }
						    }
						}
					}
					else if(boom_box == -1 && streaming_boombox[i] != -1)
					{
						streaming_boombox[i] = -1;
		                StopAudioStreamForPlayer(i);
						boom_box_handle[i] = -1;
					}
					//XMRadio - Carro
					if(IsPlayerInAnyVehicle(i))
					{
						new slot = GetVehicleSlot(GetPlayerVehicleID(i));
						if(slot > -1)
						{
							if(strlen(VehicleInfo[slot][vXMR]))
						    {
						        if(ouvindoxmradio[i] == 0)
						        {
		                        	PlayAudioStreamForPlayer(i, VehicleInfo[slot][vXMR]);
		                        	ouvindoxmradio[i] = 4;
		                        	ouvindoxmradioID[i] = slot;
								}
							}
						}
						else
						{
						    if(ouvindoxmradio[i] == 4)
			       			{
		          				StopAudioStreamForPlayer(i);
		          				ouvindoxmradio[i] = 0;
		          				ouvindoxmradioID[i] = 0;
							}
						}
					}
					else
					{
					    if(ouvindoxmradio[i] == 4)
	     				{
	     					StopAudioStreamForPlayer(i);
	      					ouvindoxmradio[i] = 0;
	       					ouvindoxmradioID[i] = 0;
						}
					}

					//Anti WeaponHack
					//if(DesarmandoPlayer[i] > 0) DesarmandoPlayer[i]--;
					//==============================================================
					if(TomouTazer[i] > 1) TomouTazer[i]--;
					if(TomouTazer[i] == 1)
					{
					    TomouTazer[i] = 0;
					    TogglePlayerControllable(i, true);
					}
					//=============================================================
					//==============================================================
					//Weather Sys By Freeze
					if(PlayerInfo[i][pDrogaTime] == 0)
					{
						if(PlayerInfo[i][pEntrouCasa] == -1 && PlayerInfo[i][pEntrouEmpresa] == -1  && PlayerInfo[i][pEntrouComplexo] == -1 && PlayerInfo[i][pEntrouGaragem] == -1 && EntrouInt[i] == -1)
						{
						    if(IsPlayerInLS(i))
							{
								SetPlayerWeather(i, Clima_LS);
							}
						    else if(IsPlayerInLV(i))
							{
								SetPlayerWeather(i, Clima_LV);
							}
						    else if(IsPlayerInSF(i))
							{
								SetPlayerWeather(i, Clima_SF);
							}
						}
						else
						{
		                    SetPlayerWeather(i, 2);
						}
					}
					//==============================================================
			    }
	 		}
		}
	}
	for(new i = 0; i < MAX_DRUGPLANT; i ++)
	{
	    if(DrogaPlantada[i][ddSeteda] == 1)
    	{
    	    if(DrogaPlantada[i][ddTempo] > 0) DrogaPlantada[i][ddTempo]--;
			if(DrogaPlantada[i][ddTempo] <= 0)
			{
                if(DrogaPlantada[i][ddEstado] == 1)
			    {
			        DrogaPlantada[i][ddEstado] = 0;
			        DrogaPlantada[i][ddTempo] = 0;
			        SaveDroga(i);
			    }
 		    	else if(DrogaPlantada[i][ddEstado] == 2)
			    {
			        DrogaPlantada[i][ddEstado] = 1;
			        DrogaPlantada[i][ddTempo] = 3600;
			        if(IsValidDynamicObject(DrogaPlantada[i][ddObjeto])) DestroyDynamicObject(DrogaPlantada[i][ddObjeto]);
		 			DrogaPlantada[i][ddObjeto] = CreateDynamicObject(19473, DrogaPlantada[i][ddX], DrogaPlantada[i][ddY], DrogaPlantada[i][ddZ], 0.000000, 0.000000, DrogaPlantada[i][ddR], DrogaPlantada[i][ddWorld]);
                    SaveDroga(i);
				}
			    else if(DrogaPlantada[i][ddEstado] == 3)
			    {
			        DrogaPlantada[i][ddEstado] = 2;
			        DrogaPlantada[i][ddTempo] = 1800;
			        if(IsValidDynamicObject(DrogaPlantada[i][ddObjeto])) DestroyDynamicObject(DrogaPlantada[i][ddObjeto]);
		 			DrogaPlantada[i][ddObjeto] = CreateDynamicObject(861, DrogaPlantada[i][ddX], DrogaPlantada[i][ddY], DrogaPlantada[i][ddZ], 0.000000, 0.000000, DrogaPlantada[i][ddR], DrogaPlantada[i][ddWorld]);
                    SaveDroga(i);
				}
			}
		}
	}

	for(new s = 0; s < MAX_SANGUE_CHAO; s++)
	{
	    if(SangueData[s][SangueTempo] > 1) SangueData[s][SangueTempo]--;
		if(SangueData[s][SangueTempo] == 1)
		{
		    SangueData[s][SangueTempo] = 0;
		    if(IsValidDynamicObject(SangueData[s][SangueObj])) DestroyDynamicObject(SangueData[s][SangueObj]);
		}
	}

    for(new h = 0; h < MAX_HOUSES; h++)
	{
	    if(HouseInfo[h][hAlarmeDisparado] > 0) HouseInfo[h][hAlarmeDisparado]--;

	    if(HouseInfo[h][hSmoke] > 0)
	    {
	        HouseInfo[h][hSmoke]--;
	        if(HouseInfo[h][hSmoke] == 0)
	        {
	            if(IsValidDynamicObject(HouseInfo[h][hSmokeO][0])) DestroyDynamicObject(HouseInfo[h][hSmokeO][0]);
	            if(IsValidDynamicObject(HouseInfo[h][hSmokeO][1])) DestroyDynamicObject(HouseInfo[h][hSmokeO][1]);
	            if(IsValidDynamicObject(HouseInfo[h][hSmokeO][2])) DestroyDynamicObject(HouseInfo[h][hSmokeO][2]);
	            if(IsValidDynamicObject(HouseInfo[h][hSmokeO][3])) DestroyDynamicObject(HouseInfo[h][hSmokeO][3]);
	            if(IsValidDynamicObject(HouseInfo[h][hSmokeO][4])) DestroyDynamicObject(HouseInfo[h][hSmokeO][4]);
	            if(IsValidDynamicObject(HouseInfo[h][hSmokeO][5])) DestroyDynamicObject(HouseInfo[h][hSmokeO][5]);
	        }
	    }
	}
	for(new h = 0; h < MAX_GARAGENS; h++)
	{
	    if(GaragemInfo[h][hAlarmeDisparado] > 0) GaragemInfo[h][hAlarmeDisparado]--;

	    if(GaragemInfo[h][hSmoke] > 0)
	    {
	        GaragemInfo[h][hSmoke]--;
	        if(GaragemInfo[h][hSmoke] == 0)
	        {
	            if(IsValidDynamicObject(GaragemInfo[h][hSmokeO][0])) DestroyDynamicObject(GaragemInfo[h][hSmokeO][0]);
	            if(IsValidDynamicObject(GaragemInfo[h][hSmokeO][1])) DestroyDynamicObject(GaragemInfo[h][hSmokeO][1]);
	            if(IsValidDynamicObject(GaragemInfo[h][hSmokeO][2])) DestroyDynamicObject(GaragemInfo[h][hSmokeO][2]);
	            if(IsValidDynamicObject(GaragemInfo[h][hSmokeO][3])) DestroyDynamicObject(GaragemInfo[h][hSmokeO][3]);
	            if(IsValidDynamicObject(GaragemInfo[h][hSmokeO][4])) DestroyDynamicObject(GaragemInfo[h][hSmokeO][4]);
	            if(IsValidDynamicObject(GaragemInfo[h][hSmokeO][5])) DestroyDynamicObject(GaragemInfo[h][hSmokeO][5]);
	        }
	    }
	}

	for(new slot = 0; slot < MAX_CA_VEHICLES; slot ++)
	{
		if(VehicleInfo[slot][vVehicle] > -1)
		{
		    if(VehicleInfo[slot][vVehicle] > MAX_CA_VEHICLES)
		    {
		        VehicleInfo[slot][vNeonState] = 0;
				if(VehicleInfo[slot][vSirene][0] != 0){
					if(IsValidDynamicObject(VehicleInfo[slot][vSirene][0])) DestroyDynamicObject(VehicleInfo[slot][vSirene][0]);
					VehicleInfo[slot][vSirene][0] = 0;
				}
				DestruirObjetosCarro(slot,VehicleInfo[slot][vVehicle]);
 				VehicleInfo[slot][vTuned] = false;

				DestroyVehicle(VehicleInfo[slot][vVehicle]);
				VehicleInfo[slot][vVehicle] = -1;
		    }
		    else {
	    		if(sync_engine_off[VehicleInfo[slot][vVehicle]])
				{
					StopEngine(VehicleInfo[slot][vVehicle]);
					sync_engine_off[VehicleInfo[slot][vVehicle]] = 0;
				}
				if(sync_attribs[VehicleInfo[slot][vVehicle]]) { AddVehicleMods(VehicleInfo[slot][vVehicle],slot); ResyncColors(VehicleInfo[slot][vVehicle]); sync_attribs[VehicleInfo[slot][vVehicle]] = 0; }
				if(IsEngineOn(VehicleInfo[slot][vVehicle]) && !sync_engine_off[VehicleInfo[slot][vVehicle]] && !IsPushbike(GetVehicleModel(VehicleInfo[slot][vVehicle])))
				{
					if(fuel_interval[VehicleInfo[slot][vVehicle]] <= 0)
					{
					    GastarVeiculo(slot, 1, 0.003);
						VehicleInfo[slot][vFuel]--;
						fuel_interval[VehicleInfo[slot][vVehicle]] = FetchFuelInterval(VehicleInfo[slot][vVehicle]);
						FuelCheck(VehicleInfo[slot][vVehicle]);
					}
					else if(fuel_interval[VehicleInfo[slot][vVehicle]] > 0) { fuel_interval[VehicleInfo[slot][vVehicle]] --; }
				}
				if(vehicle_alarm_time[VehicleInfo[slot][vVehicle]] == 1)
				{
				    StopAlarm(VehicleInfo[slot][vVehicle]);
				    vehicle_alarm_time[VehicleInfo[slot][vVehicle]] = 0;
				}
				if(vehicle_alarm_time[VehicleInfo[slot][vVehicle]] > 1)
				{
				    vehicle_alarm_time[VehicleInfo[slot][vVehicle]] --;
				}
				if(startup_delay[VehicleInfo[slot][vVehicle]] > 0)
				{
					startup_delay[VehicleInfo[slot][vVehicle]] --;
					if(startup_delay[VehicleInfo[slot][vVehicle]] == 0 && IsPlayerInVehicle(startup_delay_sender[VehicleInfo[slot][vVehicle]],VehicleInfo[slot][vVehicle]))
					{
						new vname[128];
						GetVehicleNameByModel(GetVehicleModel(VehicleInfo[slot][vVehicle]),vname);
						StartEngine(VehicleInfo[slot][vVehicle]);
						startup_delay_sender[VehicleInfo[slot][vVehicle]] = -1;
						//VehicleInfo[slot][pBateria] -= 1;
					}
					else if(startup_delay[VehicleInfo[slot][vVehicle]] == 0) { startup_delay_sender[VehicleInfo[slot][vVehicle]] = -1; }
				}
	   			//==================================================================
				if(VehicleInfo[slot][vFaction] == 0)
				{
	   				if(VehicleInfo[slot][vSemUso] > 1) VehicleInfo[slot][vSemUso]--;
		   			if(VehicleInfo[slot][vSemUso] == 1)
		   			{
		   			    new other = IsCharacterOnline(VehicleInfo[slot][vOwner]);
		   			    if(other > -1)
		   			    {
							new str2[128]; new vname[64];
							GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
							format(str2,sizeof(str2),"SERVER: O seu %s foi despawnado devido ao tempo sem uso.",vname);
							SendClientMessage(other,COLOR_YELLOW,str2);
						}

						VehicleInfo[slot][vNeonState] = 0;
						if(VehicleInfo[slot][vSirene][0] != 0) {
							if(IsValidDynamicObject(VehicleInfo[slot][vSirene][0])) DestroyDynamicObject(VehicleInfo[slot][vSirene][0]);
							VehicleInfo[slot][vSirene][0] = 0;
						}

						if (IsValidDynamic3DTextLabel(VehicleInfo[slot][vTrailerInfo]))
  							DestroyDynamic3DTextLabel(VehicleInfo[slot][vTrailerInfo]);

						DestruirObjetosCarro(slot,VehicleInfo[slot][vVehicle]);
		    			VehicleInfo[slot][vTuned] = false;


						new Float:X, Float:Y, Float:Z, Float:R;
						GetVehiclePos(VehicleInfo[slot][vVehicle],X,Y,Z);
						GetVehicleZAngle(VehicleInfo[slot][vVehicle],R);
						VehicleInfo[slot][vSpawnX] = X;
						VehicleInfo[slot][vSpawnY] = Y;
						VehicleInfo[slot][vSpawnZ] = Z;
						VehicleInfo[slot][vSpawnR] = R;

						SaveVehicle(slot);

						DestroyVehicle(VehicleInfo[slot][vVehicle]);
						VehicleInfo[slot][vVehicle] = -1;

		   			}
				}
			}
   			//==================================================================
		}
		//
		if(VehicleInfo[slot][vConsertando] > 0) VehicleInfo[slot][vConsertando]--;
		//
		if(VehicleInfo[slot][vDeathTime] > 1) VehicleInfo[slot][vDeathTime] --;
		if(VehicleInfo[slot][vDeathTime] == 1)
		{
			new vehowner = -1;
		    for(new a = 0; a < MAX_PLAYERS; a ++)
   			{
      			if(PlayerInfo[a][pLogado])
	        	{
          			if(PlayerInfo[a][pID] == VehicleInfo[slot][vOwner])
	            	{
						vehowner = a;
      				}
		        }
		    }
		    if(vehowner > -1) {
		        new vname[256];
				GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
				format(str,sizeof(str)," Você não conseguiu resgatar seu %s a tempo. Veículo perdido!",vname);
				SendClientMessageA(vehowner,COLOR_LIGHTRED,str);
		  	}
		  	VehicleInfo[slot][vOwner] = 0;
     		VehicleInfo[slot][vInsurance] = 0;
       		VehicleInfo[slot][vDestroyed] = 0;
	        VehicleInfo[slot][vModel] = 0;
	        VehicleInfo[slot][vBateria] = 100.0;
	        VehicleInfo[slot][vSpawnX] = 0.0;
	        VehicleInfo[slot][vSpawnY] = 0.0;
	        VehicleInfo[slot][vSpawnZ] = 0.0;
	        VehicleInfo[slot][vDeathTime] = 0;
			format(str,sizeof(str),"UPDATE rp_vehicles SET truncated = 1 WHERE id = '%d'",VehicleInfo[slot][vID]);
			mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
		}
	}
}

CMD:ajudaradio(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	SCM(playerid, COLOR_LIGHTGREEN,"|_____________________Ajuda rádio______________________|");
	SCM(playerid, COLOR_YELLOW,"[!] Você pode comprar um rádio em uma 24/7");
	SCM(playerid, COLOR_WHITE,"/canalradio {FFFFFF}- Define qual o canal que você quer em qual slot.");
	SCM(playerid, COLOR_WHITE,"/r(adio) {FFFFFF}- Fala no rádio, no canal que você definiu.");
	SCM(playerid, COLOR_LIGHTGREEN,"|_____________________________________________________|");
	return 1;
}

CMD:ajudajogo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	SCM(playerid, COLOR_LIGHTGREEN,"|_____________________Ajuda jogo do Bicho______________________|");
	SCM(playerid, COLOR_YELLOW,"[!] Comandos para jogar no jogo do bicho");
	SCM(playerid, COLOR_WHITE,"/jogodobicho {FFFFFF}- Abre o dialog para apostas e ver os bichos e informações.");
	SCM(playerid, COLOR_WHITE,"/bicho {FFFFFF}- Informações dos bichos, grupos e dezenas.");
	SCM(playerid, COLOR_LIGHTGREEN,"|_____________________________________________________|");
	return 1;
}

CMD:ajudacelular(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	SCM(playerid, COLOR_LIGHTGREEN,"_______________________________________");
	SCM(playerid, COLOR_BRANCO,"*** AJUDA *** Você pode comprar um celular numa 24/7");
	SCM(playerid, COLOR_CINZA,"*** CELULAR *** /ligar ('ex: /ligar911') /celular /sms (/des)ligar");
	SCM(playerid, COLOR_CINZA,"*** CELULAR *** /tog celular /quebrarcelular /vivavoz");
	return 1;
}

CMD:quebrarcelular(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(CelularData[playerid][celNumero] != 0)
	{
		CelularData[playerid][celNumero] = 0;
		format(string,sizeof(string),"%s quebra seu celular e joga no chão.", PlayerName(playerid,1));
		ProxDetector(10.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
	}
	else return SCM(playerid, COLOR_LIGHTRED,"Você não tem um celular.");
}

CMD:ajudaarma(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	SCM(playerid, COLOR_LIGHTGREEN,"_______________________________________");
	SCM(playerid, COLOR_CINZA,"*** AJUDA ARMA *** Você pode guardar/retirar armas pequenas no inventário.");
	SCM(playerid, COLOR_CINZA,"*** AJUDA ARMA *** Você pode utilizar /recarregar ou a tecla 'Y' para recarregar.");
	SCM(playerid, COLOR_CINZA,"*** AJUDA ARMA *** /inv(entario) /guardararma (/ga) /pegararma (/pa)");
	SCM(playerid, COLOR_CINZA,"*** AJUDA ARMA *** /dropar e /larma /dropare /pegar");
	SCM(playerid, COLOR_CINZA,"*** AJUDA ARMA *** /numeracao");
	SCM(playerid, COLOR_CINZA,"*** AJUDA MUNIÇÃO *** 9mm serve para Colt/Silenced/Deagle/Uzi/MP5/Tec9");
	SCM(playerid, COLOR_CINZA,"*** AJUDA MUNIÇÃO *** Cartucho serve para Shotgun");
	SCM(playerid, COLOR_CINZA,"*** AJUDA MUNIÇÃO *** 5.56mm serve para AK47/M4/County Rifle");
	SCM(playerid, COLOR_CINZA,"*** AJUDA MUNIÇÃO *** 12.7x106mm serve para Sniper");
	return 1;
}

CMD:ajudadrogas(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	SCM(playerid, COLOR_LIGHTGREEN,"____________________Ajuda Drogas____________________");
	SCM(playerid, COLOR_BRANCO,"/minhasdrogas - Mostra os seus pacotes de drogas.");
	SCM(playerid, COLOR_BRANCO,"/meusingredientes - Mostra os seus ingredientes");
	SCM(playerid, COLOR_BRANCO,"/drogas [usar] [slot(id)] - Utiliza uma droga");
	SCM(playerid, COLOR_BRANCO,"/drogas [entregar] [slot(id)] [playerid] [quantidade] - Entrega uma droga a alguém");
	SCM(playerid, COLOR_BRANCO,"/drogas [plantar] - Cria uma planta de maconha");
	SCM(playerid, COLOR_BRANCO,"/drogas [colher] - Colhe uma planta de maconha");
	SCM(playerid, COLOR_BRANCO,"/drogas [destruir] - Destroi uma planta de maconha");
	SCM(playerid, COLOR_BRANCO,"/dropar droga - Dropa sua droga");
	return 1;
}

CMD:armasid(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
	    SCM(playerid, COLOR_LIGHTGREEN,"_______________________________________");
	    SCM(playerid, COLOR_ESPECIAL1,"[1. Soco Ingles] [2. Taco de Gold] [3. Cacetete]");
	    SCM(playerid, COLOR_ESPECIAL2,"[4. Faca] [5. Taco de Baseball] [6. Pá]");
	    SCM(playerid, COLOR_ESPECIAL1,"[7. Taco de Sinuca] [8. Katana] [9. Serra-Elétrica]");
	    SCM(playerid, COLOR_ESPECIAL2,"[14. Flor] [15. Muleta] [16. Granada]");
	    SCM(playerid, COLOR_ESPECIAL1,"[17. Bomba de Gas] [18. Molotov] [22. Colt-45]");
	    SCM(playerid, COLOR_ESPECIAL2,"[23. Pistola Silenciada] [24. Eagle] [25. Shotgun]");
	    SCM(playerid, COLOR_ESPECIAL1,"[26. Sawnoff] [27. Spaz] [28. Uzi]");
	    SCM(playerid, COLOR_ESPECIAL2,"[29. MP5] [30. AK-47] [31. M4]");
	    SCM(playerid, COLOR_ESPECIAL1,"[32. TEC-9] [33. Rifle] [34. Sniper]");
	    SCM(playerid, COLOR_ESPECIAL2,"[35. Nome] [41. Spray]  [42. Extintor]");
	    SCM(playerid, COLOR_ESPECIAL1,"[43. Camera]");
    }
    else SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Você não possui acesso a este comando!");
	return 1;
}

stock CriarTraficantes(playerid, tipo)
{
    	new rand = randomEx(0, 6), usando = 0, trafid, erro = 0;

		for(new i = 0; i < MAX_TRAFICANTES; i++)
		{
		    if(TraficInfo[i][traUsando] == 0)
			{
				trafid = i;
				break;
			}
		}

		new tentativas = 0;
		for(new cc = 0; cc < MAX_TRAFICANTES; cc++)
		{
		    if(tentativas < 11)
		    {
				if(TraficInfo[cc][traRand] == rand)
				{
					rand = randomEx(0, 6);
					tentativas++;
				}
				else
				{
				    TraficInfo[trafid][traRand] = rand;
				    break;
				}
			}
			else
			{
				erro = 1;
				break;
			}
		}


		if(usando == 0)
		{
		    for(new b = 0; b < 15; b++)
		    {
		        TraficInfo[trafid][traPed][b] = 0;
		    }
			format(string, sizeof(string), "Traficante diz (celular): Qual será o seu pedido dessa vez?");
			SCM(playerid, COLOR_YELLOW, string);

			TraficInfo[trafid][traTipo] = tipo;
            TraficInfo[trafid][traUsando] = 1;
            TraficInfo[trafid][traPlayerId] = PlayerInfo[playerid][pID];
            TraficInfo[trafid][traPedPrec] = 0;
            TraficInfo[trafid][traJaPagou] = 0;
            TraficInfo[trafid][traFaccao] = PlayerInfo[playerid][pFac];

			OutrasInfos[playerid][oTraficanteID] = trafid;


			if(tipo == 1){
				MenuCompraArma(playerid, 1);
				print("Chegou 1");
			}
			else if(tipo == 2)
			{
			    if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == 11)
			    {
				    Dialog_Show(playerid, DIALOG_TRAFICANTEDROGA, DIALOG_STYLE_TABLIST_HEADERS, string, "Produto\tPreço\n \
					Maconha\t R$2 grama\n \
			  		Cocaina\tR$3 grama\n \
			  		LSD\tR$5 unidade\n \
     				Crack\tR$4 grama\n \
					Metanfetamina\tR$8 grama\n \
					Pasta base de Cocaina\tR$8 grama\n \
					Lança Perfume\tR$5 tubo\n \
					", "Pedir", "Cancelar");
				}
				else if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == 12)
			    {
				    Dialog_Show(playerid, DIALOG_TRAFICANTEDROGA, DIALOG_STYLE_TABLIST_HEADERS, string, "Produto\tPreço\n \
					Maconha\t R$2 grama\n \
			  		Cocaina\tR$3 grama\n \
     				LSD\tR$5 unidade\n \
					", "Pedir", "Cancelar");
				}
				else if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == 13)
			    {
				    Dialog_Show(playerid, DIALOG_TRAFICANTEDROGA, DIALOG_STYLE_TABLIST_HEADERS, string, "Produto\tPreço\n \
					Maconha\t R$2 grama\n \
			  		Cocaina\tR$3 grama\n \
     				LSD\tR$5 unidade\n \
					Crack\tR$4 grama\n \
					", "Pedir", "Cancelar");
				}
				else if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == 14)
			    {
				    Dialog_Show(playerid, DIALOG_TRAFICANTEDROGA, DIALOG_STYLE_TABLIST_HEADERS, string, "Produto\tPreço\n \
					Maconha\t R$2 grama\n \
			  		Cocaina\tR$3 grama\n \
			  		LSD\tR$5 unidade\n \
     				Crack\tR$4 grama\n \
					Metanfetamina\tR$8 grama\n \
					", "Pedir", "Cancelar");
				}
			}

			return 1;
		}
		if(erro == 1)
		{
		    format(string, sizeof(string), "SMS: Estamos sem nenhum veículo disponivel no momento.. Ligue novamente mais tarde, Remetente: %d", FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTrafNum]);
			SCM(playerid, COLOR_YELLOW, string);
			//EndCall(playerid);
		}
		return 1;
}

Dialog:DIALOG_TRAFICANTEDROGA(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    new trafid = OutrasInfos[playerid][oTraficanteID];
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Você cancelou o pedido.");
	    //EndCall(playerid);

		TraficInfo[trafid][traTipo] = 0;
        TraficInfo[trafid][traRand] = 9999;
        TraficInfo[trafid][traUsando] = 0;
		OutrasInfos[playerid][oTraficanteID] = 9999;
		TraficInfo[trafid][traFaccao] = 0;
	}
	else
	{
	    new strDrug[126];
 		switch(listitem)
		{
			case 0:
			{
				format(strDrug, 126, "Negociante -> Drogas -> Maconha");
				OutrasInfos[playerid][oComprandoDrug] = 0;
			}
			case 1:
			{
				format(strDrug, 126, "Negociante -> Drogas -> Cocaina");
				OutrasInfos[playerid][oComprandoDrug] = 1;
   			}
			case 2:
			{
				format(strDrug, 126, "Negociante -> Drogas -> LSD");
				OutrasInfos[playerid][oComprandoDrug] = 3;
			}
			case 3:
			{
				format(strDrug, 126, "Negociante -> Drogas -> Crack");
				OutrasInfos[playerid][oComprandoDrug] = 2;
			}
			case 4:
			{
				format(strDrug, 126, "Negociante -> Drogas -> Metanfetamina");
				OutrasInfos[playerid][oComprandoDrug] = 4;
			}
			case 5:
			{
				format(strDrug, 126, "Negociante -> Drogas -> Pasta Base de Cocaina");
				OutrasInfos[playerid][oComprandoDrug] = 5;
			}
			case 6:
			{
				format(strDrug, 126, "Negociante -> Drogas -> Lança Perfume");
				OutrasInfos[playerid][oComprandoDrug] = 6;
			}
		}

		Dialog_Show(playerid, DIALOG_TRAFICANTEDROGA2, DIALOG_STYLE_INPUT, strDrug, "Digite a quantidade a ser comprada.", "Comprar", "Cancelar");
	}
	return 1;
}

Dialog:DIALOG_TRAFICANTEDROGA2(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    new trafid = OutrasInfos[playerid][oTraficanteID];
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Você cancelou o pedido.");
	    //EndCall(playerid);

		TraficInfo[trafid][traTipo] = 0;
        TraficInfo[trafid][traRand] = 9999;
        TraficInfo[trafid][traUsando] = 0;
		OutrasInfos[playerid][oTraficanteID] = 9999;
		TraficInfo[trafid][traFaccao] = 0;
	}
	else
	{
        new valor = strval(inputtext),
			valorfinal,
        	trafid = OutrasInfos[playerid][oTraficanteID];

 		switch(OutrasInfos[playerid][oComprandoDrug])
		{
			case 0:
			{
			    valorfinal = valor*2;
			    OutrasInfos[playerid][oComprandoDrugQ] = valor;
			    TraficInfo[trafid][traPedPrec] += valorfinal;
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Você fez o pedido de Maconha.");
			}
			case 1:
			{
			    valorfinal = valor*3;
			    OutrasInfos[playerid][oComprandoDrugQ] = valor;
			    TraficInfo[trafid][traPedPrec] += valorfinal;
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Você fez o pedido de Cocaina.");
			}
			case 2:
			{
			    valorfinal = valor*4;
			    OutrasInfos[playerid][oComprandoDrugQ] = valor;
			    TraficInfo[trafid][traPedPrec] += valorfinal;
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Você fez o pedido de Crack.");
			}
			case 3:
			{
			    valorfinal = valor*5;
			    OutrasInfos[playerid][oComprandoDrugQ] = valor;
			    TraficInfo[trafid][traPedPrec] += valorfinal;
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Você fez o pedido de LSD.");
			}
			case 4:
			{
			    valorfinal = valor*6;
			    OutrasInfos[playerid][oComprandoDrugQ] = valor;
			    TraficInfo[trafid][traPedPrec] += valorfinal;
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Você fez o pedido de Metanfetamina.");
			}
			case 5:
			{
			    valorfinal = valor*6;
			    OutrasInfos[playerid][oComprandoDrugQ] = valor;
			    TraficInfo[trafid][traPedPrec] += valorfinal;
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Você fez o pedido de Pasta base de cocaina.");
			}
			case 6:
			{
			    valorfinal = valor*6;
			    OutrasInfos[playerid][oComprandoDrugQ] = valor;
			    TraficInfo[trafid][traPedPrec] += valorfinal;
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Você fez o pedido de Lança Perfume.");
			}
		}

		if(OutrasInfos[playerid][oComprandoDrugQ] != 0)
		{
		    new rand = random(7);

		    new location[MAX_ZONE_NAME];
			Get2DZone(location, TOTAL_ZONE_NAME, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2]);
	 		format(string, sizeof(string), "Traficante diz (celular): Seu pedido foi anotado. Vai estar tudo em um porta-malas de um carro em %s, leve R$%d.. Não demore.", location, valorfinal);
			SCM(playerid, COLOR_YELLOW, string);
			SCM(playerid, COLOR_WHITE, "(Use /encomenda para pegar seu pedido | /encomendac para reviver o checkpoint)");

		    //EndCall(playerid);

			OutrasInfos[playerid][oTraficanteRand] = rand;

			TraficInfo[trafid][traCarro] = AddStaticVehicle(579, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2], TraficanteCarpos[rand][3], 0, 0);
			SetPlayerCheckpoint(playerid, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2], 5.0);
			SetVehicleParamsEx(TraficInfo[trafid][traCarro],0,0,0,1,0,0,0);
			SetVehicleNumberPlate(TraficInfo[trafid][traCarro],"TF331 IC");

			TraficInfo[trafid][traTempoSumir] = 30;
			OutrasInfos[playerid][oEntrouCheckPointTraf] = 1;
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você cancelou o pedido.");
	    	//EndCall(playerid);

			TraficInfo[trafid][traTipo] = 0;
        	TraficInfo[trafid][traRand] = 9999;
        	TraficInfo[trafid][traUsando] = 0;
			OutrasInfos[playerid][oTraficanteID] = 9999;
			TraficInfo[trafid][traFaccao] = 0;
		}

	}
	return 1;
}

forward SumirTraficantes(traficid);
public SumirTraficantes(traficid)
{
	DestroyVehicle(TraficInfo[traficid][traCarro]);
	TraficInfo[traficid][traRand] = 9999;
	TraficInfo[traficid][traTipo] = 0;
	TraficInfo[traficid][traUsando] = 0;
	TraficInfo[traficid][traTempoSumir] = 0;
	TraficInfo[traficid][traFaccao] = 0;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(TraficInfo[traficid][traPlayerId] == PlayerInfo[i][pID])
	    {
	        OutrasInfos[i][oTraficanteID] = 9999;
			OutrasInfos[i][oTraficanteRand] = 9999;
			OutrasInfos[i][oAguardandoNewTraf] = 9999;

			SendClientMessage(i, COLOR_GREY, "- Você já pode fazer outra encomenda.");
	        break;
	    }
	}

	TraficInfo[traficid][traPlayerId] = 9999;
	TraficInfo[traficid][traPedPrec] = 0;
 	TraficInfo[traficid][traJaPagou] = 0;
	return 1;
}

forward ChecarPedidosTraf(playerid);
public ChecarPedidosTraf(playerid){
    for(new traficid = 0; traficid < MAX_TRAFICANTES; traficid++) {
   		if(TraficInfo[traficid][traPlayerId] == PlayerInfo[playerid][pID]) return 1;
	}
	return 0;
}


forward PlayRingSound(playerid);
public PlayRingSound(playerid)
{
	PlaySound(playerid, 1138);
}

stock PlaySound(playerid, soundid)
{
	new Float:x,Float:y,Float:z;
	GetPlayerPos(playerid, x, y, z);
	PlayerPlaySound(playerid, soundid, x, y, z);
}

stock PlayerIsOn(playerid)
{
	if(PlayerInfo[playerid][pLogado] && playerid != INVALID_PLAYER_ID) return true;
	else return false;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z)
{
    if(FrenodeMano[vehicleid] == 1)
    {
    	GetVehiclePos(vehicleid, VehComprobar[vehicleid][0], VehComprobar[vehicleid][1], VehComprobar[vehicleid][2]);
     	GetVehicleZAngle(vehicleid, VehComprobar[vehicleid][3]);
      	if(VehComprobar[vehicleid][0] == VehFrenoPOS[vehicleid][0] || VehComprobar[vehicleid][1] == VehFrenoPOS[vehicleid][1] || VehComprobar[vehicleid][2] == VehFrenoPOS[vehicleid][2]|| VehComprobar[vehicleid][3] == VehFrenoPOS[vehicleid][3]) return 1;
       	SetVehiclePos(vehicleid, VehFrenoPOS[vehicleid][0], VehFrenoPOS[vehicleid][1], VehFrenoPOS[vehicleid][2]);
        SetVehicleZAngle(vehicleid, VehComprobar[vehicleid][3]);
	}

	new Float:vidaCar;
	GetVehicleHealth(vehicleid, vidaCar);
	if(vidaCar < 300.0)
	{
	    SetVehicleHealth(vehicleid, 300);
	}

    return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    if(IsPushbike(GetVehicleModel(GetPlayerVehicleID(playerid)))) return 1;
    if(!PlayerInfo[playerid][pLogado]) return 1;

    new Float:vidaCar;
	GetVehicleHealth(vehicleid, vidaCar);
    new slot = GetVehicleSlot(vehicleid);

	if(vidaCar < 300.0)
	{
	    SetVehicleHealth(vehicleid, 300);
	    new engine,lights,alarm,doors,bonnet,boot,objective;
	    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(vehicleid,0,0,alarm,doors,bonnet,boot,objective);
		
		if(playerid != INVALID_PLAYER_ID) SCM(playerid,COLOR_LIGHTRED, "O seu veículo quebrou..");

		if(slot > -1)
			GastarVeiculo(slot, 1, 0.070);
	}
	if(GetPlayerSpeed(playerid,true) >= 170)
	{
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnected(i) && GetPlayerVehicleID(i) == vehicleid)
	        {
	  			new Float:health;
				GetPlayerHealth(i,health);

				if(GetVehicleModel(vehicleid) == 448 || GetVehicleModel(vehicleid) == 461 || GetVehicleModel(vehicleid) == 462 ||
				GetVehicleModel(vehicleid) == 463 || GetVehicleModel(vehicleid) == 468 || GetVehicleModel(vehicleid) == 471 ||
				GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 ||
				GetVehicleModel(vehicleid) == 521 || GetVehicleModel(vehicleid) == 470 || GetVehicleModel(vehicleid) == 523 ||
				GetVehicleModel(vehicleid) == 581 || GetVehicleModel(vehicleid) == 586) return 1;
				if(slot > -1)
				{
				    new Float:vidav;
   					GetVehicleHealth(VehicleInfo[slot][vVehicle], vidav);

					if(VehicleInfo[slot][vHealth] > vidav)
					{
					    VehicleInfo[slot][vHealth] = vidav;
						switch(GetPVarInt(i, "CintoVeicular"))
						{
							case 0:
							{
							    new Float:Vida, Float:VidaFinal, totalperdido = randomEx(5, 10);
						        GetPlayerHealth(playerid, Vida);
								VidaFinal = Vida-totalperdido;
						    	if(VidaFinal <= 20)
								{
									SetPlayerHealth(playerid, 20);
									P_Health[playerid] = 20;
									God_VidaAnterior2[playerid] = 20;
									God_Aviso2[playerid] = 0;

									PlayerInfo[playerid][pMorto] = 1;
									AcabouDeMorrer[playerid] = 2;
									SetPVarInt(playerid, "TempoParaSerLevantado", 300);

									TogglePlayerControllable(playerid, 0);
									SendClientMessage(playerid, COLOR_LIGHTRED, "Você está ferido, você pode aguardar um médico chegar ou aceitar a morte daqui a 3 minutos. ((Se o anim bugar, use /morto))");

									PlayerInfo[playerid][pMancando] = 0;

                                    if (IsValidDynamic3DTextLabel(TextMorto[playerid])) DestroyDynamic3DTextLabel(TextMorto[playerid]);
									TextMorto[playerid] = CreateDynamic3DTextLabel("(( Este player está ferido /ferimentos para mais informações))", 0xFF4B00FF, 0.0, 0.0, 0.7, DISTANCIA_FERIMENTOS, playerid, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid));
					
									TempoDesistir[playerid] = 600;

									SetarAnimMorto(playerid);

									for(new m; m < MAX_ITENS; m++)
									{
										if(ItemInfo[m][iCriado] == 1)
										{
											if(ItemInfo[m][iCom] == PlayerInfo[playerid][pID])
											{
												if(ItemInfo[m][iUsando] == 1)
												{
												    switch(ItemInfo[m][iTipo])
													{
														case 1: { slot = 9; }
														case 2: { slot = 8; }
							 							case 3: { slot = 7; }
							 							case 4: { slot = 6; }
							   						}
							   						if(ItemInfo[m][iBone] == 0) ItemInfo[m][iBone] = 1;
								    				SetPlayerAttachedObject(playerid, slot, ItemInfo[m][iObj], ItemInfo[m][iBone], ItemInfo[m][iX], ItemInfo[m][iY], ItemInfo[m][iZ], ItemInfo[m][iRX], ItemInfo[m][iRY], ItemInfo[m][iRZ], ItemInfo[m][iSX], ItemInfo[m][iSY], ItemInfo[m][iSZ]);
												}
											}
											if(PlayerInfo[playerid][pColde] > 0) AttachArmaCorpo(playerid, ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo], PlayerInfo[playerid][pColdreBone]);
										}
									}
								}
								else
								{
								    SetPlayerHealth(playerid, VidaFinal);
									P_Health[playerid] = VidaFinal;
									God_VidaAnterior2[playerid] = VidaFinal;
									God_Aviso2[playerid] = 0;
								}
							}
		            	}
					}
				}
            }
        }
    }
	return 1;
}

forward GetPlayerMileage(playerid,bool:kmm);
public GetPlayerMileage(playerid,bool:kmm)
{
    new Float:Vx,Float:Vy,Float:Vz,Float:rtn;
    if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid),Vx,Vy,Vz); else GetPlayerVelocity(playerid,Vx,Vy,Vz);
    rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz,2)));
    return kmm ? floatround((((rtn * 100 * 1.61) / 60) / 2) / 1.609) : floatround(rtn * 100);
}

forward GivePlayerMoneyCA(playerid,qnt);
public GivePlayerMoneyCA(playerid,qnt)
{
    PlayerInfo[playerid][pGrana] += qnt;
	return 1;
}

forward GetPlayerMoneyCA(playerid);
public GetPlayerMoneyCA(playerid)
{
	return PlayerInfo[playerid][pGrana];
}

stock SetarCameraLogin(playerid)
{
    SetPlayerCameraPos(playerid, -86.0129,1173.2157,59.9796);
	SetPlayerCameraLookAt(playerid, -86.0129,1173.2157,59.9796);
	TogglePlayerControllable(playerid, 0);
	SetPlayerPos(playerid, 1677.8491, -1967.2262, 13.6364);
	return 1;
}



forward KickInTime(playerid);
public KickInTime(playerid)
{
	Kick(playerid);
}


//Multi Stream Teste
stock StopAudioStreamForPlayerEx(playerid)
{
    SetPVarInt(playerid, "duration", 0);
    SetPVarString(playerid, "url", "");
    SetPVarFloat(playerid, "posX", 0.0);
    SetPVarFloat(playerid, "posY", 0.0);
    SetPVarFloat(playerid, "posZ", 0.0);
    SetPVarFloat(playerid, "distance", 50.0);
    SetPVarInt(playerid, "usepos", 0);

    StopAudioStreamForPlayer(playerid);
}
stock PlayAudioStreamForPlayerEx(playerid, url[], duration, Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
        if(GetPVarInt(playerid, "duration") == 0)
        {
            PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
            SetPVarInt(playerid, "duration", duration);
            SetPVarString(playerid, "url", url);
            SetPVarFloat(playerid, "posX", posX);
            SetPVarFloat(playerid, "posY", posY);
            SetPVarFloat(playerid, "posZ", posZ);
            SetPVarFloat(playerid, "distance", distance);
            SetPVarInt(playerid, "usepos", usepos);
	        if(duration != -1)
	        {
	                SetTimerEx("StopAudio", duration, 0, "d", playerid);
	                }
	        }
	        else if(GetPVarInt(playerid, "duration") == -1)
	        {
	            StopAudioStreamForPlayer(playerid);
	        PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
	        if(duration != -1)
	        {
	                new tmp[256];
	                GetPVarString(playerid, "url", tmp, 256);
	                SetTimerEx("SetNextStream", duration, 0, "dsdffffd", playerid, tmp, GetPVarInt(playerid, "duration"), GetPVarFloat(playerid, "posX"), GetPVarFloat(playerid, "posY"), GetPVarFloat(playerid, "posZ"), GetPVarFloat(playerid, "distance"), GetPVarInt(playerid, "usepos"));
	                }
	        }
	        else
	        {
	            StopAudioStreamForPlayer(playerid);
	        PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);

	        if(duration != -1)
	        {
                new tmp[256];
                GetPVarString(playerid, "url", tmp, 256);
                SetTimerEx("SetNextStream", duration, 0, "dsdffffd", playerid, tmp, GetPVarInt(playerid, "duration"), GetPVarFloat(playerid, "posX"), GetPVarFloat(playerid, "posY"), GetPVarFloat(playerid, "posZ"), GetPVarFloat(playerid, "distance"), GetPVarInt(playerid, "usepos"));
         	}
        }
}

forward StopAudio(playerid);
public StopAudio(playerid)
{
	StopAudioStreamForPlayerEx(playerid);
}

forward SetNextStream(playerid,url[], duration, Float:posX, Float:posY, Float:posZ, Float:distance, usepos);
public SetNextStream(playerid,url[], duration, Float:posX, Float:posY, Float:posZ, Float:distance, usepos)
{
    StopAudioStreamForPlayer(playerid);
    new tmp[256];
    format(tmp, 256, url);
    PlayAudioStreamForPlayer(playerid, tmp, Float:posX, Float:posY, Float:posZ, Float:distance, usepos);

    SetPVarInt(playerid, "duration", duration);
    SetPVarString(playerid, "url", tmp);
    SetPVarFloat(playerid, "posX", posX);
    SetPVarFloat(playerid, "posY", posY);
    SetPVarFloat(playerid, "posZ", posZ);
    SetPVarFloat(playerid, "distance", distance);
    SetPVarInt(playerid, "usepos", usepos);
    if(duration != -1)
    {
    	SetTimerEx("StopAudio", duration, 0, "d", playerid);
    }
    return 1;
}
forward UpdateNametag();
public UpdateNametag()
{
    for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
    {
        if(IsPlayerConnected(i))
        {
            new nametag[128], playername[MAX_PLAYER_NAME], Float:armour;
            GetPlayerArmour(i, armour);
            GetPlayerName(i, playername, sizeof(playername));
            if(armour > 1.0)
            {
                format(nametag, sizeof(nametag), "{%06x}%s {FFFFFF}(%i)\n{FFFFFF}%s\n{FF0000}%s", GetPlayerColor(i) >>> 8, playername, i, GetArmorDots(i), GetHealthDots(i));
            }
            else
            {
                format(nametag, sizeof(nametag), "{%06x}%s {FFFFFF}(%i)\n{FF0000}%s", GetPlayerColor(i) >>> 8, playername, i, GetHealthDots(i));
            }
            UpdateDynamic3DTextLabelText(cNametag[i], 0xFFFFFFFF, nametag);
        }
    }
}
forward ResetVarsPlayerInfo(extraid);
public ResetVarsPlayerInfo(extraid)
{
    PlayerInfo[extraid][pLogado] = 0;
    PlayerInfo[extraid][pID] = 0;
    PlayerInfo[extraid][pucpOwn] = 0;
	format(PlayerInfo[extraid][pPassword], 129, "YURIDESENVOLVEDORFULLSTACK@!BRASILcomedor");
	PlayerInfo[extraid][pLevel] = 0;
	PlayerInfo[extraid][pGender] = 0;
	//PlayerInfo[extraid][pAge] = 0;
	format(PlayerInfo[extraid][pAge], 128, " ");
	PlayerInfo[extraid][pAdmin] = 0;
	PlayerInfo[extraid][pSkin] = 0;
	PlayerInfo[extraid][pPos][0] = 0;
	PlayerInfo[extraid][pPos][1] = 0;
	PlayerInfo[extraid][pPos][2] = 0;
	PlayerInfo[extraid][pPos][3] = 0;
	PlayerInfo[extraid][pRegistrado] = 0;
	PlayerInfo[extraid][pHealth] = 90;
	PlayerInfo[extraid][pArmour] = 0;
	PlayerInfo[extraid][pInterior] = 0;
	PlayerInfo[extraid][pWorld] = 0;
	PlayerInfo[extraid][pTutorial] = 0;
	PlayerInfo[extraid][pEntrouCasa] = -1;
	PlayerInfo[extraid][pEntrouComplexo] = -1;
	PlayerInfo[extraid][pGrana] = 0;
	PlayerInfo[extraid][pOuro] = 0;
	PlayerInfo[extraid][pPrata] = 0;
	PlayerInfo[extraid][pBronze] = 0;
	PlayerInfo[extraid][pGranaSuja] = 0;
	PlayerInfo[extraid][pMorto] = 0;
	format(PlayerInfo[extraid][pUltimoLogin], 128, " ");
	PlayerInfo[extraid][pEntrouEmpresa] = -1;
	PlayerInfo[extraid][pChaveEmprestada] = 0;
	PlayerInfo[extraid][pFac] = 0;
	PlayerInfo[extraid][pExecComando] = 0;
	PlayerInfo[extraid][pJob] = 0;
	PlayerInfo[extraid][pBomba] = 0;
	PlayerInfo[extraid][pC4] = 0;
	PlayerInfo[extraid][pTNT] = 0;
	PlayerInfo[extraid][pPecasMecanicas][0] = 0;
	PlayerInfo[extraid][pPecasMecanicas][1] = 0;
	PlayerInfo[extraid][pPecasMecanicas][2] = 0;
	PlayerInfo[extraid][pPecasMecanicas][3] = 0;
	PlayerInfo[extraid][pPecasMecanicas][4] = 0;
	PlayerInfo[extraid][pPecasMecanicas][5] = 0;
	PlayerInfo[extraid][pPecasMecanicas][6] = 0;
	//PlayerInfo[extraid][pBateria] = 0;
	PlayerInfo[extraid][pTempoPLD] = 0;
	PlayerInfo[extraid][pToolKit] = 0;
	PlayerInfo[extraid][pArrombarDNV] = 0;
	PlayerInfo[extraid][pArrombarDNV_C] = 0;
	PlayerInfo[extraid][pGalao] = 0;
	PlayerInfo[extraid][pArmaMao] = 0;
	PlayerInfo[extraid][pMun9mm] = 0;
	PlayerInfo[extraid][pMun556] = 0;
	PlayerInfo[extraid][pMunCart] = 0;
	PlayerInfo[extraid][pMun127] = 0;
	PlayerInfo[extraid][pSlot1] = 0;
	PlayerInfo[extraid][pSlot2] = 0;
	PlayerInfo[extraid][pSlot3] = 0;
	PlayerInfo[extraid][pSlot4] = 0;
	PlayerInfo[extraid][pSlot5] = 0;
	PlayerInfo[extraid][pSlot1a] = 0;
	PlayerInfo[extraid][pSlot2a] = 0;
	PlayerInfo[extraid][pSlot3a] = 0;
	PlayerInfo[extraid][pSlot4a] = 0;
	PlayerInfo[extraid][pSlot5a] = 0;
	PlayerInfo[extraid][pFacCargo] = 0;
	PlayerInfo[extraid][pEmServico] = 0;
	PlayerInfo[extraid][pPayDay] = 0;
	PlayerInfo[extraid][pDutySkin] = 0;
	PlayerInfo[extraid][pColde] = 0;
	PlayerInfo[extraid][pColdreA] = 0;
	PlayerInfo[extraid][pArmario1] = 0;
	PlayerInfo[extraid][pArmario2] = 0;
	PlayerInfo[extraid][pArmario3] = 0;
	PlayerInfo[extraid][pArmario4] = 0;
	PlayerInfo[extraid][pArmario5] = 0;
	PlayerInfo[extraid][pArmario6] = 0;
	PlayerInfo[extraid][pArmario7] = 0;
	PlayerInfo[extraid][pArmario8] = 0;
	PlayerInfo[extraid][pArmario9] = 0;
	PlayerInfo[extraid][pArmario10] = 0;

	PlayerInfo[extraid][pArm9mm] = 0;
	PlayerInfo[extraid][pArm556] = 0;
	PlayerInfo[extraid][pArmCart] = 0;
	PlayerInfo[extraid][pArm127] = 0;
 	PlayerInfo[extraid][pPrisao] = 0;
	PlayerInfo[extraid][pTemPreso] = 0;
 	PlayerInfo[extraid][pTester] = 0;
	PlayerInfo[extraid][pAceitoSos] = 0;
	format(PlayerInfo[extraid][pNomeOOC], 50, " ");
	format(PlayerInfo[extraid][pDamage0], 50, " ");
	format(PlayerInfo[extraid][pDamage1], 50, " ");
	format(PlayerInfo[extraid][pDamage2], 50, " ");
	format(PlayerInfo[extraid][pDamage3], 50, " ");
	format(PlayerInfo[extraid][pDamage4], 50, " ");
	format(PlayerInfo[extraid][pDamage5], 50, " ");
	format(PlayerInfo[extraid][pDamage6], 50, " ");
	format(PlayerInfo[extraid][pDamage7], 50, " ");
	format(PlayerInfo[extraid][pDamage8], 50, " ");
	format(PlayerInfo[extraid][pDamage9], 50, " ");
	format(PlayerInfo[extraid][pDamage10], 50, " ");
	format(PlayerInfo[extraid][pDamage11], 50, " ");
	format(PlayerInfo[extraid][pDamage12], 50, " ");
	format(PlayerInfo[extraid][pDamage13], 50, " ");
	format(PlayerInfo[extraid][pDamage14], 50, " ");
	format(PlayerInfo[extraid][pDamage15], 50, " ");
	format(PlayerInfo[extraid][pDamage16], 50, " ");
	format(PlayerInfo[extraid][pDamage17], 50, " ");
	format(PlayerInfo[extraid][pDamage18], 50, " ");
	format(PlayerInfo[extraid][pDamage19], 50, " ");
	PlayerInfo[extraid][pBanco] = 0;
	PlayerInfo[extraid][pHealthMax] = 100;
	PlayerInfo[extraid][pChatStyle] = 0;
	PlayerInfo[extraid][pPontos] = 0;
	PlayerInfo[extraid][pKickAll] = 0;
	PlayerInfo[extraid][pBanAll] = 0;
	PlayerInfo[extraid][pBanido] = 0;
	PlayerInfo[extraid][pWalkStyle] = 0;
	PlayerInfo[extraid][pDoador] = 0;
	PlayerInfo[extraid][pDoadorTempo] = 0;
	PlayerInfo[extraid][pChangeNames] = 0;
	PlayerInfo[extraid][pSavings] = 0;
	PlayerInfo[extraid][pForca] = 0;
	PlayerInfo[extraid][pRadio] = 0;
 	PlayerInfo[extraid][pRadioChan] = 0;
    PlayerInfo[extraid][pRadioChan2] = 0;
	PlayerInfo[extraid][pMascara] = 0;
	PlayerInfo[extraid][pMascaraU] = 0;
 	PlayerInfo[extraid][pMascID] = 0;
 	format(PlayerInfo[extraid][pNomeP],24," ");
 	PlayerInfo[extraid][pAvisos] = 0;
	format(PlayerInfo[extraid][pAviso1],24," ");
	format(PlayerInfo[extraid][pAviso2],24," ");
	format(PlayerInfo[extraid][pAviso3],24," ");
	PlayerInfo[extraid][pMenosDanoTiro] = 0;
	PlayerInfo[extraid][pDrogaTime] = 0;
	PlayerInfo[extraid][pFome] = 0;
	PlayerInfo[extraid][pSede] = 0;
	PlayerInfo[extraid][pApostouBicho] = 0;
	PlayerInfo[extraid][pTremorAtirar] = 0;
	PlayerInfo[extraid][pUsouDroga] = 0;
	PlayerInfo[extraid][pSkillTiro] = 0;
	PlayerInfo[extraid][pColdreX] = 0;
	PlayerInfo[extraid][pColdreY] = 0;
	PlayerInfo[extraid][pColdreZ] = 0;
	PlayerInfo[extraid][pColdreRX] = 0;
	PlayerInfo[extraid][pColdreRY] = 0;
	PlayerInfo[extraid][pColdreRZ] = 0;
	PlayerInfo[extraid][pColdreBone] = 0;
	PlayerInfo[extraid][pDriveLic] = 0;
	PlayerInfo[extraid][pWepLic] = 0;
	PlayerInfo[extraid][pFlyLic] = 0;
	PlayerInfo[extraid][pTruckLic] = 0;
	PlayerInfo[extraid][pCigarros] = 0;
	PlayerInfo[extraid][pSavingsGerando] = 0;
	PlayerInfo[extraid][pLutaStyle] = 0;
	PlayerInfo[extraid][pBoombox] = 0;
	PlayerInfo[extraid][pPlacas] = 0;
	PlayerInfo[extraid][pCasasDeletadas] = 0;
	PlayerInfo[extraid][pJobTempo] = 0;
	PlayerInfo[extraid][pRaspador] = 0;
	PlayerInfo[extraid][pJobInPd] = 0;
	PlayerInfo[extraid][pTrafico] = 0;
	PlayerInfo[extraid][pFabricouD] = 0;
	PlayerInfo[extraid][pHabDrug] = 0;
	PlayerInfo[extraid][pArmasResetadas] = 0;
	PlayerInfo[extraid][pEntrouGaragem] = -1;
	CelularData[extraid][celModelo] = 0;
	CelularData[extraid][celNumero] = 0;
	CelularData[extraid][celModo] = 0;
	CelularData[extraid][celRingTone] = 0;
	CelularData[extraid][celPlano] = 0;
	CelularData[extraid][celTPlano] = 0;
	CelularData[extraid][celMinutos] = 0;
	CelularData[extraid][celSMSs] = 0;
	CelularData[extraid][celTotalPD] = 0;
	PlayerInfo[extraid][pAjudaInicial] = 0;
	PlayerInfo[extraid][pAjudaInicialDim] = 0;
	PlayerInfo[extraid][pTomouAlgumTiro] = 0;
	PlayerInfo[extraid][pTomouTiroPesado] = 0;
	PlayerInfo[extraid][pTomouTiroBrancas] = 0;
	PlayerInfo[extraid][pConvenio] = 0;
	PlayerInfo[extraid][pTempoMorto] = 0;
/*	PlayerInfo[extraid][pMining] = 0;
	PlayerInfo[extraid][pMinedRock] = 0;
	PlayerInfo[extraid][pMineTime] = 0;*/ //Desativado

	PlayerInfo[extraid][pFome] = 100;
	PlayerInfo[extraid][pSede] = 100;
	PlayerInfo[extraid][pFomeTime] = 0;
	PlayerInfo[extraid][pSedeTime] = 0;
	PlayerInfo[extraid][pApostouBicho] = 0;

	OutrasInfos[extraid][oDesmancheX] = 0;
	OutrasInfos[extraid][oDesmancheY] = 0;
	OutrasInfos[extraid][oDesmancheZ] = 0;
	OutrasInfos[extraid][oDesmancheR] = 0;

	OutrasInfos[extraid][oDesmancheTime] = 0;

	OutrasInfos[extraid][oLavagemX] = 0;
	OutrasInfos[extraid][oLavagemY] = 0;
	OutrasInfos[extraid][oLavagemZ] = 0;
	OutrasInfos[extraid][oLavagemR] = 0;


	LastShoter[extraid] = 0;
}

forward LoadGetWayFRZ(playerid);
public LoadGetWayFRZ(playerid){
    ToASave(playerid)=SaveTheSys;
    return 1;
}

public OnPlayerConnect(playerid)
{
    if(IsPlayerNPC(playerid)) return 1;

    PlayersOnline++;

    if(PlayersOnline > RecordDia) 		RecordDia = PlayersOnline;
    if(PlayersOnline > MaxPlayersHora) 	MaxPlayersHora = PlayersOnline;

    //TEXTGPS
   	PlayerInfo[playerid][pTextdraws] = CreatePlayerTextDraw(playerid, 13.000000, 320.000000, "~b~GPS:~w~ Calculando rota...");
	PlayerTextDrawBackgroundColor(playerid, PlayerInfo[playerid][pTextdraws], 255);
	PlayerTextDrawFont(playerid, PlayerInfo[playerid][pTextdraws], 1);
	PlayerTextDrawLetterSize(playerid, PlayerInfo[playerid][pTextdraws], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerInfo[playerid][pTextdraws], -1);
	PlayerTextDrawSetOutline(playerid, PlayerInfo[playerid][pTextdraws], 1);
	PlayerTextDrawSetProportional(playerid, PlayerInfo[playerid][pTextdraws], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerInfo[playerid][pTextdraws], 0);


	HackerJob[playerid] = 0;
	RotaBusJob[playerid] = 0;

    AppLigado[playerid] = 0;
    Retiroupedido[playerid] = 0;
    Entregando[playerid] = 0;
    TemCorrida[playerid] = 0;

    PetData[playerid][petModel] = INVALID_ACTOR_ID;
    PetData[playerid][petText] = Text3D:INVALID_STREAMER_ID;
    PetData[playerid][petStatus] = PET_NONE;
    PetData[playerid][petSpawn] = false;

    LastShoter[playerid] = 0;
    SalvandoConta[playerid] = 0;
	TempoParaSalvar[playerid] = 0;
    FishWeighBarcoID[playerid] = -1;
    FishBarcoPoint[playerid] = 0;
    FishWeighBarco[playerid] = 0;
    FishWeigh[playerid] = 0;
	FishingPosX[playerid] = 0;
	FishingPosY[playerid] = 0;
	FishingPosZ[playerid] = 0;
	Fishingando[playerid] = 0;

    //if(LoginTimer[playerid]) KillTimer(LoginTimer[playerid]);
	TelaDeLogin[playerid] = 0;

    PlayAudioStreamForPlayer(playerid, "https://cp-frp.com.br.com/midia/intro.mp3");
	
	//PlayerTextDrawHide(playerid, pTextdraws);

    //GetPlayerHost(playerid);

	//Multi Stream Teste
    SetPVarInt(playerid, "duration", 0);
    SetPVarString(playerid, "url", "");
    SetPVarFloat(playerid, "posX", 0.0);
    SetPVarFloat(playerid, "posY", 0.0);
    SetPVarFloat(playerid, "posZ", 0.0);
    SetPVarFloat(playerid, "distance", 50.0);
    SetPVarInt(playerid, "usepos", 0);

    new connecting_ip[32+1];
    GetPlayerIp(playerid,connecting_ip,32);
    new num_players_on_ip = GetNumberOfPlayersOnThisIP(connecting_ip);
    if(num_players_on_ip > MAX_CONNECTIONS_FROM_IP)
    {
        SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Você atingiu o máximo de contas logadas neste IP.");
        SetTimerEx("KickInTime", 1000, 0, "i", playerid);
        return 1;
    }

    new pname[24];
	GetPlayerName(playerid, pname, sizeof(pname));
    if(!NameIsRP(pname))
	{
	    SetPlayerVirtualWorld(playerid, 9999);
	    SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Você precisa de um nome real para jogar no servidor.");
		SendClientMessage(playerid, COLOR_YELLOW, "EXEMPLO: Nome_Sobrenome (Dica: não use numeros e muitas letras maiusculas em CAPSLOCK).");
		SendClientMessage(playerid, COLOR_YELLOW, "PARA MAIS INFORMAÇÕES: https://forum.cp-frp.com.br.com");


		SetTimerEx("KickInTime", 1000, 0, "i", playerid);
	    return 1;
	}
	SetandoPos[playerid] = 0;
	CaindoInt[playerid] = 0;
	CaindoInt_Av[playerid] = 0;
	OutrasInfos[playerid][oSaindoDeSpec] = 0;

	JaEstaDesmanchando[playerid] = 0;
    KillTimer(Desmanchando[playerid]);
	FaseTutorial[playerid] = 0;

	Pos_Z_Old[playerid] = 0;
	Pos_Z_Old_AV[playerid] = 0;

	ResetPlayerWeapons(playerid);

	CelularData[playerid][celModo] = 0;
 	CelularData[playerid][celNumero] = 0;
 	CelularData[playerid][celModelo] = 0;
	CelularData[playerid][celRingTone] = 0;

	CelularData[playerid][celPlano] = 0;
	CelularData[playerid][celTPlano] = 0;
	CelularData[playerid][celMinutos] = 0;
	CelularData[playerid][celSMSs] = 0;
	CelularData[playerid][celTotalPD] = 0;
	//========================================[Celular]
	SumirCelular(playerid);

    ResetarVarsCel(playerid);
    AnimCelular(playerid, 2);

    SetPVarInt(playerid, "EditandoTorre", 0);
    SetPVarString(playerid, "SMSEnviado", "");
    SetPVarString(playerid, "RastreMsg", "");

    CriarTextsCelularP(playerid);
	//========================================
	SetPVarInt(playerid, "PlayerSpectate", 0);
	//Arrombar
	KillTimer(UpdateTimerAr[playerid]);
	KeyPressed[playerid] = 0;
	KeyForPress[playerid] = 0;
 	SetPVarInt(playerid, "Arrombando", 0);
 	SetPVarInt(playerid, "ArrombandoOque", 0);
	ColorNow[playerid] = 0;
	CountTimer[playerid] = 0;
	PlayerTextDrawHide(playerid, ClickTD[playerid]);
	//Tunning
	CreatePlayerTextDraws( playerid );
    ResetTuningInfo( playerid );
    //========================================
    OutrasInfos[playerid][oFalsis] = 0;
	//========================================
	RemovePlayerAttachedObject(playerid, 0);
    RemovePlayerAttachedObject(playerid, 1);
    RemovePlayerAttachedObject(playerid, 2);
    RemovePlayerAttachedObject(playerid, 3);
    RemovePlayerAttachedObject(playerid, 4);
    RemovePlayerAttachedObject(playerid, 5);
    RemovePlayerAttachedObject(playerid, 6);
    RemovePlayerAttachedObject(playerid, 7);
    RemovePlayerAttachedObject(playerid, 8);
    RemovePlayerAttachedObject(playerid, 9);
	//========================================
	TempoResetIsso[playerid] = 0;
	WeaponHackAvs[playerid] = 0;
    DesarmandoPlayer[playerid] = 2;
	ResetPlayerWeapons(playerid);
	PlayerInfo[playerid][pArmaMao] = 0;
	RemovePlayerAttachedObject(playerid, 0);
	//========================================
	//Taxi
	TaxiCallTime[playerid] = 0;
	TransportDuty[playerid] = 0;
	TransportCost[playerid] = 0;
	TransportDriver[playerid] = 999;
	TransportMoney[playerid] = 0;
	TransportTime[playerid] = 0;
	TaxiAccepted[playerid] = 999;
	TransportValue[playerid] = 0;
	ChamouTaxi[playerid] = 0;
	ChamouMec[playerid] = 0;
	MecCallTime[playerid] = 0;
	MecAccepted[playerid] = 999;

	PreloadAnimations(playerid);
	CancelSelectTextDraw(playerid);
	AvisoRT[playerid] = 0;

	HotDogPrice[playerid] = 0;
	HotDogOffer[playerid] = 0;
	HotDogAccept[playerid] = 0;

	KeyPressed[playerid] = 0;
	KeyForPress[playerid] = 0;
    SetPVarInt(playerid, "Arrombando", 0);
	ColorNow[playerid] = 0;
	CountTimer[playerid] = 0;

	TextDrawHideForPlayer(playerid,ApagaoDraw);
	TextDrawHideForPlayer(playerid,InterruptorDraw);

	SetPVarInt(playerid, "CasaApagada", 0);

	IsAFK[playerid] = false;
	AFKTimer[playerid] = 0;
	ids[playerid] = 0;
	AimbotWarnings[playerid] = 0;

	God_Aviso2[playerid] = 0;
	DesarmandoPlayer[playerid] = 0;
	P_ArmourAvisos[playerid] = 0;

	streaming_boombox[playerid] = -1;
	boom_box_handle[playerid] = -1;
	changing_boombox[playerid] = -1;

	cp_target[playerid] = 0;

	FloodCMD[playerid] = 0;

	AvisoDeSpeed[playerid] = 0;

	FumandoMaconha[playerid] = 0;
	FumandoMaconhaQ[playerid] = 0;
	FumandoCigarro[playerid] = 0;
	TazerPlayer[playerid] = 0;
	TomouTazer[playerid] = 0;
	SetPVarInt(playerid, "TempoTaser", 0);
	SetPVarInt(playerid, "MorrerVidaBaixa", 0);

	OutrasInfos[playerid][oAlgemado] = 0;
    OutrasInfos[playerid][oAmarrado] = 0;

	ResetPlayerWeapons(playerid);

	SetPVarInt(playerid, "TaNaConce", 0);
	EntrouInt[playerid] = -1;

	//=================================
	//      RESETAR VARIAVEIS
	//=================================
	TentativasDeLogin[playerid] = 5;
	convidado[playerid] = 999;
	SetPlayerHealth(playerid, 99999);
	P_Health[playerid] = 99999;
	God_VidaAnterior2[playerid] = 999999;
	God_Aviso2[playerid] = 0;
	SocosMorto[playerid] = 0;

	ResetVarsPlayerInfo(playerid);

    for(new tt = 0; tt < 40; tt++)
	{
 		AvisoTiroOuvido[playerid][tt] = 0;
	}

	PlayerInfo[playerid][pEntrouCasa] = -1;
	PlayerInfo[playerid][pEntrouEmpresa] = -1;
	PlayerInfo[playerid][pEntrouComplexo] = -1;
	PlayerInfo[playerid][pEntrouGaragem] = -1;
	PlayerInfo[playerid][pGrana] = 0;
	PlayerInfo[playerid][pGranaSuja] = 0;
	PlayerInfo[playerid][pOuro] = 0;
	PlayerInfo[playerid][pPrata] = 0;
	PlayerInfo[playerid][pBronze] = 0;
	PlayerInfo[playerid][pFac] = 0;
	PlayerInfo[playerid][pExecComando] = 0;
	PlayerInfo[playerid][pJob] = 0;
	PlayerInfo[playerid][pJobTempo] = 0;
	PlayerInfo[playerid][pJobInPd] = 0;
	PlayerInfo[playerid][pTrafico] = 0;
	PlayerInfo[playerid][pFabricouD] = 0;
	PlayerInfo[playerid][pTempoPLD] = 0;
	PlayerInfo[playerid][pToolKit] = 0;
	PlayerInfo[playerid][pArrombarDNV] = 0;
	PlayerInfo[playerid][pArrombarDNV_C] = 0;
	PlayerInfo[playerid][pCaixaSelect] = -1;
	PlayerInfo[playerid][pComprandoGas] = 0;
	PlayerInfo[playerid][pCargaGas] = 0;
	PlayerInfo[playerid][pEnchendoBomba] = 0;
	PlayerInfo[playerid][pItemTPDA] = 0;
	PlayerInfo[playerid][pEnchendoBomba] = 0;
	PlayerInfo[playerid][pLoadCrate] = -1;
	PlayerInfo[playerid][pLoadMovel] = 0;
	PlayerInfo[playerid][pGasPump] = -1;
    PlayerInfo[playerid][pGasStation] = -1;
   	PlayerInfo[playerid][pRefill] = INVALID_VEHICLE_ID;
	PlayerInfo[playerid][pRefillPrice] = 0;
	PlayerInfo[playerid][pGalao] = 0;
	PlayerInfo[playerid][pArmaMao] = 0;
	PlayerInfo[playerid][pMun9mm] = 0;
	PlayerInfo[playerid][pMun556] = 0;
	PlayerInfo[playerid][pMunCart] = 0;
	PlayerInfo[playerid][pMun127] = 0;
	PlayerInfo[playerid][pEditPump] = -1;
	PlayerInfo[playerid][pEditMovel] = -1;
	PlayerInfo[playerid][pEditPorta][0] = -1;
	PlayerInfo[playerid][pEditPorta][1] = -1;
	PlayerInfo[playerid][pPayDay] = 0;
	PlayerInfo[playerid][pTester] = 0;
	PlayerInfo[playerid][pAceitoSos] = 0;
	PlayerInfo[playerid][pDutySkin] = 0;
	PlayerInfo[playerid][pColde] = 0;
	PlayerInfo[playerid][pColdreA] = 0;
	PlayerInfo[playerid][pEditandoBareira] = -1;
	PlayerInfo[playerid][pArmario1] = 0;
	PlayerInfo[playerid][pArmario2] = 0;
	PlayerInfo[playerid][pArmario3] = 0;
    PlayerInfo[playerid][pArmario4] = 0;
    PlayerInfo[playerid][pArmario5] = 0;
	PlayerInfo[playerid][pArmario6] = 0;
	PlayerInfo[playerid][pArmario7] = 0;
	PlayerInfo[playerid][pArmario8] = 0;
	PlayerInfo[playerid][pArmario9] = 0;
	PlayerInfo[playerid][pArmario10] = 0;
	PlayerInfo[playerid][pArm9mm] = 0;
	PlayerInfo[playerid][pArm556] = 0;
	PlayerInfo[playerid][pArmCart] = 0;
	PlayerInfo[playerid][pArm127] = 0;
	PlayerInfo[playerid][pPrisao] = 0;
	PlayerInfo[playerid][pTemPreso] = 0;
	PlayerInfo[playerid][pEditandoItens] = 0;
	PlayerInfo[playerid][pBanco] = 0;
	PlayerInfo[playerid][pMancando] = 0;
	OutrasInfos[playerid][oEditandoMesaPoker] = -1;
	OutrasInfos[playerid][oAdminOnDuty] = 0;
	OutrasInfos[playerid][oTesterOnDuty] = 0;
	OutrasInfos[playerid][oGalaoNaMao] = 0;
	OutrasInfos[playerid][oBombeiroOnDuty] = 0;
	OutrasInfos[playerid][oModShop] = 0;
	OutrasInfos[playerid][oModCat] = 0;
	OutrasInfos[playerid][oModPart] = 0;
	OutrasInfos[playerid][oPodePas] = 0;
	OutrasInfos[playerid][oVendoMod] = 0;
	OutrasInfos[playerid][oTraficanteID] = 9999;
	OutrasInfos[playerid][oTraficanteRand] = 9999;
	OutrasInfos[playerid][oEntrouCheckPointTraf] = 0;

	format(OutrasInfos[playerid][o911Nome],128,"_");
	format(OutrasInfos[playerid][o911Local],128,"_");
	format(OutrasInfos[playerid][o911Text],128,"_");
	format(OutrasInfos[playerid][o911Reastreador],128,"_");
	OutrasInfos[playerid][o911Tipo] = 0;

	PlayerInfo[playerid][pChatStyle] = 0;
	PlayerInfo[playerid][pPontos] = 0;
	PlayerInfo[playerid][pSalarios] = 0;
	PlayerInfo[playerid][pCortaRem] = 0;
	PlayerInfo[playerid][pKickAll] = 0;
	PlayerInfo[playerid][pBanAll] = 0;
	PlayerInfo[playerid][pBanido] = 0;
	PlayerInfo[playerid][pWalkStyle] = 0;
	PlayerInfo[playerid][pDoador] = 0;
	PlayerInfo[playerid][pDoadorTempo] = 0;
	PlayerInfo[playerid][pChangeNames] = 0;
	PlayerInfo[playerid][pSavings] = 0;
	PlayerInfo[playerid][pSavingsGerando] = 0;
	PlayerInfo[playerid][pForca] = 0;
	PlayerInfo[playerid][pRadio] = 0;
	PlayerInfo[playerid][pRadioChan] = 0;
    PlayerInfo[playerid][pRadioChan2] = 0;
	PlayerInfo[playerid][pMascara] = 0;
	PlayerInfo[playerid][pMascaraU] = 0;
	PlayerInfo[playerid][pMascID] = 0;
	PlayerInfo[playerid][pLutaStyle] = 4;
	PlayerInfo[playerid][pBoombox] = 0;
	PlayerInfo[playerid][pPlacas] = 0;
	PlayerInfo[playerid][pRaspador] = 0;
	PlayerInfo[playerid][pHabDrug] = 0;
	PlayerInfo[playerid][pArmasResetadas] = 0;
	PlayerInfo[playerid][pCasasDeletadas] = 0;
	PlayerInfo[playerid][pConvenio] = 0;
	PlayerInfo[playerid][pAjudaInicial] = 0;
	PlayerInfo[playerid][pAjudaInicialDim] = 0;
	format(PlayerInfo[playerid][pNomeP], 50, "");
	format(PlayerInfo[playerid][pNomeF], 50, "");
	format(PlayerInfo[playerid][pNomeOOC], 50, "");

	PlayerInfo[playerid][pColdreX] = 0;
	PlayerInfo[playerid][pColdreY] = 0;
	PlayerInfo[playerid][pColdreZ] = 0;
	PlayerInfo[playerid][pColdreRX] = 0;
	PlayerInfo[playerid][pColdreRY] = 0;
	PlayerInfo[playerid][pColdreRZ] = 0;
	PlayerInfo[playerid][pColdreBone] = 0;

	PlayerInfo[playerid][pDriveLic] = 0;
	PlayerInfo[playerid][pWepLic] = 0;
	PlayerInfo[playerid][pFlyLic] = 0;
	PlayerInfo[playerid][pTruckLic] = 0;
	PlayerInfo[playerid][pCigarros] = 0;

	PlayerInfo[playerid][pAvisos] = 0;
	format(PlayerInfo[playerid][pAviso1], 126, "");
	format(PlayerInfo[playerid][pAviso2], 126, "");
	format(PlayerInfo[playerid][pAviso3], 126, "");

	format(PlayerInfo[playerid][pDamage0], 50, "");
	format(PlayerInfo[playerid][pDamage1], 50, "");
	format(PlayerInfo[playerid][pDamage2], 50, "");
	format(PlayerInfo[playerid][pDamage3], 50, "");
	format(PlayerInfo[playerid][pDamage4], 50, "");
	format(PlayerInfo[playerid][pDamage5], 50, "");
	format(PlayerInfo[playerid][pDamage6], 50, "");
	format(PlayerInfo[playerid][pDamage7], 50, "");
	format(PlayerInfo[playerid][pDamage8], 50, "");
	format(PlayerInfo[playerid][pDamage9], 50, "");
	format(PlayerInfo[playerid][pDamage10], 50, "");
	format(PlayerInfo[playerid][pDamage11], 50, "");
	format(PlayerInfo[playerid][pDamage12], 50, "");
	format(PlayerInfo[playerid][pDamage13], 50, "");
	format(PlayerInfo[playerid][pDamage14], 50, "");
	format(PlayerInfo[playerid][pDamage15], 50, "");
	format(PlayerInfo[playerid][pDamage16], 50, "");
	format(PlayerInfo[playerid][pDamage17], 50, "");
	format(PlayerInfo[playerid][pDamage18], 50, "");
	format(PlayerInfo[playerid][pDamage19], 50, "");

	PlayerInfo[playerid][pMenosDanoTiro] = 0;
	PlayerInfo[playerid][pDrogaTime] = 0;
	PlayerInfo[playerid][pTremorAtirar] = 0;
	PlayerInfo[playerid][pUsouDroga] = 0;
	PlayerInfo[playerid][pSkillTiro] = 0;

	/*PlayerInfo[playerid][pMining] = 0;
	PlayerInfo[playerid][pMinedRock] = 0;
	PlayerInfo[playerid][pMineTime] = 0;*/ //DESATIVADO

	PlayerInfo[playerid][pFome] = 100;
	PlayerInfo[playerid][pSede] = 100;
	PlayerInfo[playerid][pFomeTime] = 0;
	PlayerInfo[playerid][pSedeTime] = 0;

	PlayerInfo[playerid][pApostouBicho] = 0;

	PlayerDroga[playerid][MaconhaR] = 0;
	PlayerDroga[playerid][MaconhaB] = 0;
	PlayerDroga[playerid][MaconhaE] = 0;
	PlayerDroga[playerid][CocaR] = 0;
	PlayerDroga[playerid][CocaB] = 0;
	PlayerDroga[playerid][CocaE] = 0;
	PlayerDroga[playerid][CrackR] = 0;
	PlayerDroga[playerid][CrackB] = 0;
	PlayerDroga[playerid][CrackE] = 0;
	PlayerDroga[playerid][LSDR] = 0;
	PlayerDroga[playerid][LSDB] = 0;
	PlayerDroga[playerid][LSDE] = 0;
	PlayerDroga[playerid][MetR] = 0;
	PlayerDroga[playerid][MetB] = 0;
	PlayerDroga[playerid][MetE] = 0;
	PlayerDroga[playerid][LancaPer] = 0;
	PlayerDroga[playerid][Sementes] = 0;
	PlayerDroga[playerid][BDS] = 0;
	PlayerDroga[playerid][BZC] = 0;
	PlayerDroga[playerid][LDC] = 0;
	PlayerDroga[playerid][HDZ] = 0;
	PlayerDroga[playerid][PBC] = 0;
	PlayerDroga[playerid][Acloridrico] = 0;
	PlayerDroga[playerid][Efedrina] = 0;

	DropandoAmmo[playerid] = 0;
	SetPVarInt(playerid, "EditandoAmmoNoChao", -1);
	DropandoDrug[playerid] = 0;
	SetPVarInt(playerid, "EditandoDrogaNoChao", -1);

	filling[playerid] = 0;
	filling_amount[playerid] = 0;
	filling_biz[playerid] = -1;
	filling_started[playerid] = 0;
	EditandoEmpresa[playerid] = 9999;
	EditandoProduto[playerid] = 9999;
	ArrumandoPosArma[playerid] = 9999;
	AcabouDeLogar[playerid] = gettime()+60;
	AcabouDeLogarVida[playerid] = 0;
	ComAnim[playerid] = 0;
	AcabouDeMorrer[playerid] = 0;
	SocosMorto[playerid] = 0;
	TrocandoInterior[playerid] = 9999;
	TaNaATM[playerid] = 0;
	TaNoCOFREL[playerid] = 0;
	TaNoCOFREB[playerid] = 0;
	TaNoJOALHERIA[playerid] = 0;
	SECURITY_VEHICLE[playerid] = -1;
	CarregandoATM[playerid] = -1;
	SECURITY_SEGURANDOMALOTE[playerid] = 0;

	SetPVarInt(playerid, "ChamouOnPlayerDeath", 0);

	garbage_run[playerid] = -1;
	garbage_run_stage[playerid] = -1;
	garbage_run_state[playerid] = -1;
	garbage_object[playerid] = -1;
	garbage_run_vehicle[playerid] = -1;

	AntiGodVida[playerid] = 0;
	AntiGod[playerid] = 0;

	progress_wait[playerid] = 0;
	progress_wait_max[playerid] = 0;
	progress_wait_type[playerid] = PROGRESS_BAR_INVALID;

	for(new i = 0; i < 7; i++) { PlayerInfo[playerid][pPecasMecanicas][i] = 0; }

	purchasing_vehicle[playerid] = -1;
	format(PlayerInfo[playerid][pUltimoLogin],50," ");
	format(PlayerInfo[playerid][pAge],50," ");

	SetPVarInt(playerid, "EditandoArmaNoChao", 0);

    VendoCasa[playerid] = 9999;
    VendoComplexo[playerid] = 9999;
    TempoDesistir[playerid] = 0;
    PodeAceitarMorte[playerid] = 0;
    PlayerInfo[playerid][pTempoMorto] = 0;
    FazendoAnimDeMancar[playerid] = 0;

    SetPVarInt(playerid, "Ligando",999999);

    SetPVarInt(playerid, "PermissaoNomeOOC", 0);
	SetPVarInt(playerid, "TogHa", 0);
	SetPVarInt(playerid, "TogBicho", 0);
	SetPVarInt(playerid, "TogChatADM", 0);
	SetPVarInt(playerid, "TogBairros", 0);
	SetPVarInt(playerid, "TogAdmin", 0);
	SetPVarInt(playerid, "HelpMe", 0);
	SetPVarInt(playerid, "TogAnuncios", 0);
	SetPVarInt(playerid, "TogMsgMatou", 0);
	SetPVarInt(playerid, "EditandoArmaNoChao", 0);
	SetPVarInt(playerid, "PDRadio" , 0);
	SetPVarInt(playerid, "ScreenTelinha", 0);
	SetPVarInt(playerid, "TelinhaPretaa", 0);

	SetPVarInt(playerid, "CumpInvite", 9999);
 	SetPVarInt(playerid, "CumpID", 0);

	SetPVarInt(playerid, "TogPM", 0);
	SetPVarInt(playerid, "TogFacChat", 0);
	SetPVarInt(playerid, "TogHud", 0);
	SetPVarInt(playerid, "TogRadio", 0);

	SetPVarInt(playerid, "QuerRevistar", 9999);

	SetPVarInt(playerid, "ObjPortaMalas", -1);
	SetPVarInt(playerid, "ObjPortaMalasSlot", 0);

	SetPVarInt(playerid, "OfereceLuta", 999);
	SetPVarInt(playerid, "OfereceuLuta", 999);

	SetPVarInt(playerid, "EditandoBoomboxPos", -1);
	SetPVarInt(playerid, "ComprandoNovoMovel", 0);

	SetPVarInt(playerid, "EditandoTelPub", 0);

	SetPVarInt(playerid, "Drag", 501);

	//Edições de Objetos
	PlayerInfo[playerid][pEditandoPlaca] = -1;
	PlayerInfo[playerid][pEditandoPlacaC] = -1;
	PlayerInfo[playerid][pEditandoPlacaE] = -1;
	PlayerInfo[playerid][pEditandoPlacaG] = -1;
	PlayerInfo[playerid][pEditandoPortao][0] = -1;
	PlayerInfo[playerid][pEditandoPortao][1] = -1;


	TextDrawHideForPlayer(playerid, HitMark);

	//Praia
	RemoveBuildingForPlayer(playerid, 6280, 260.023, -1839.914, -1.453, 0.250);
	RemoveBuildingForPlayer(playerid, 6432, 223.617, -1756.023, 8.773, 0.250);
	RemoveBuildingForPlayer(playerid, 6433, 265.968, -1757.578, 8.906, 0.250);
	RemoveBuildingForPlayer(playerid, 6434, 307.265, -1760.546, 7.625, 0.250);
	RemoveBuildingForPlayer(playerid, 6435, 181.851, -1758.843, 8.429, 0.250);
	RemoveBuildingForPlayer(playerid, 6437, 260.023, -1839.914, -1.453, 0.250);
	RemoveBuildingForPlayer(playerid, 730, 185.101, -1765.546, 3.421, 0.250);
	RemoveBuildingForPlayer(playerid, 730, 240.453, -1765.546, 3.421, 0.250);
	RemoveBuildingForPlayer(playerid, 3778, 337.453, -1875.000, 3.406, 0.250);
	RemoveBuildingForPlayer(playerid, 3778, 289.226, -1875.000, 3.203, 0.250);
	RemoveBuildingForPlayer(playerid, 3778, 245.539, -1875.000, 2.687, 0.250);
	RemoveBuildingForPlayer(playerid, 3778, 200.484, -1875.000, 3.078, 0.250);
	RemoveBuildingForPlayer(playerid, 3615, 200.484, -1875.000, 3.078, 0.250);
	RemoveBuildingForPlayer(playerid, 3615, 245.539, -1875.000, 2.687, 0.250);
	RemoveBuildingForPlayer(playerid, 3615, 289.226, -1875.000, 3.203, 0.250);
	RemoveBuildingForPlayer(playerid, 1297, 313.664, -1811.820, 6.765, 0.250);
	RemoveBuildingForPlayer(playerid, 1297, 326.375, -1811.820, 6.765, 0.250);
	RemoveBuildingForPlayer(playerid, 3615, 337.453, -1875.000, 3.406, 0.250);
	RemoveBuildingForPlayer(playerid, 1297, 339.289, -1811.820, 6.765, 0.250);
	RemoveBuildingForPlayer(playerid, 1297, 352.296, -1811.820, 6.765, 0.250);
	RemoveBuildingForPlayer(playerid, 1461, 173.000, -1768.882, 4.242, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 185.640, -1766.734, 4.984, 0.250);
	RemoveBuildingForPlayer(playerid, 1461, 201.000, -1769.304, 4.101, 0.250);
	RemoveBuildingForPlayer(playerid, 6286, 181.851, -1758.843, 8.429, 0.250);
	RemoveBuildingForPlayer(playerid, 6294, 223.617, -1756.023, 8.773, 0.250);
	RemoveBuildingForPlayer(playerid, 6436, 212.539, -1757.984, 10.328, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 211.039, -1751.054, 3.125, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 181.187, -1751.054, 3.125, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 255.968, -1765.960, 5.570, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 238.835, -1768.148, 4.984, 0.250);
	RemoveBuildingForPlayer(playerid, 6285, 265.968, -1757.578, 8.906, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 240.195, -1760.945, 4.500, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 237.625, -1751.054, 3.125, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 256.359, -1745.742, 3.125, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 240.765, -1748.140, 5.570, 0.250);
	RemoveBuildingForPlayer(playerid, 1461, 269.101, -1769.593, 4.242, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 289.679, -1767.492, 4.898, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 285.500, -1750.812, 3.125, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 300.265, -1750.781, 3.125, 0.250);
	RemoveBuildingForPlayer(playerid, 6284, 307.265, -1760.546, 7.625, 0.250);
	RemoveBuildingForPlayer(playerid, 1500, 315.046, -1769.046, 3.468, 0.250);
	RemoveBuildingForPlayer(playerid, 6517, 322.414, -1769.031, 5.250, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 328.500, -1770.320, 4.554, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 328.515, -1768.039, 3.125, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 331.726, -1764.875, 4.554, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 332.359, -1751.632, 3.125, 0.250);
	RemoveBuildingForPlayer(playerid, 6425, 400.695, -1755.703, 6.500, 0.250);
	RemoveBuildingForPlayer(playerid, 6438, 245.195, -1736.703, 3.632, 0.250);
	RemoveBuildingForPlayer(playerid, 6428, 245.195, -1736.703, 3.632, 0.250);
	RemoveBuildingForPlayer(playerid, 6311, 400.695, -1755.703, 6.500, 0.250);
	//Market Hospital
	RemoveBuildingForPlayer(playerid, 5930, 1134.250, -1338.078, 23.156, 0.250);
	RemoveBuildingForPlayer(playerid, 5708, 1134.250, -1338.078, 23.156, 0.250);
	RemoveBuildingForPlayer(playerid, 1440, 1141.984, -1346.109, 13.265, 0.250);
	RemoveBuildingForPlayer(playerid, 1440, 1148.679, -1385.187, 13.265, 0.250);
	RemoveBuildingForPlayer(playerid, 617, 1178.601, -1332.070, 12.890, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1184.007, -1353.500, 12.578, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1184.007, -1343.265, 12.578, 0.250);
	RemoveBuildingForPlayer(playerid, 618, 1177.734, -1315.664, 13.296, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1184.812, -1292.914, 12.578, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1184.812, -1303.148, 12.578, 0.250);
	RemoveBuildingForPlayer(playerid, 1297, 1190.773, -1383.273, 15.945, 0.250);
	RemoveBuildingForPlayer(playerid, 1297, 1190.773, -1299.742, 15.945, 0.250);
    //UPA 24 HORAS
    RemoveBuildingForPlayer(playerid, 5579, 2050.070, -1401.210, 33.679, 0.250);
    RemoveBuildingForPlayer(playerid, 5661, 2050.070, -1401.210, 33.679, 0.250);
    RemoveBuildingForPlayer(playerid, 5467, 2026.117, -1404.640, 46.000, 0.250);
    RemoveBuildingForPlayer(playerid, 5403, 2050.070, -1401.210, 33.679, 0.250);
	// Sprunk machines
 	RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1977, 0.0, 0.0, 0.0, 6000.0);
 	//cracolandia
    RemoveBuildingForPlayer(playerid, 17944, 2674.020, -1382.550, 52.695, 0.250);
    RemoveBuildingForPlayer(playerid, 17945, 2674.020, -1382.550, 52.695, 0.250);
    RemoveBuildingForPlayer(playerid, 17592, 2697.500, -1451.420, 35.492, 0.250);
    RemoveBuildingForPlayer(playerid, 17955, 2717.4922, -1416.1875, 50.4297, 0.25);
	//Mecanica
	RemoveBuildingForPlayer(playerid, 1265, 1441.550, -1323.310, 12.984, 0.250);
	RemoveBuildingForPlayer(playerid, 1227, 1439.859, -1323.699, 13.382, 0.250);
	RemoveBuildingForPlayer(playerid, 1617, 1436.390, -1322.880, 16.421, 0.250);
	//Presidio
	RemoveBuildingForPlayer(playerid, 13048, -91.562, -251.515, 0.421, 0.250);
	RemoveBuildingForPlayer(playerid, 3377, -207.656, -246.734, 1.578, 0.250);
	RemoveBuildingForPlayer(playerid, 3377, -196.718, -246.164, 1.578, 0.250);
	RemoveBuildingForPlayer(playerid, 3377, -224.500, -183.906, 1.531, 0.250);
	RemoveBuildingForPlayer(playerid, 3377, -200.328, -189.734, 1.601, 0.250);
	RemoveBuildingForPlayer(playerid, 3377, -200.328, -189.734, 3.945, 0.250);
	RemoveBuildingForPlayer(playerid, 3377, -176.679, -195.359, 1.562, 0.250);
	RemoveBuildingForPlayer(playerid, 3377, -156.945, -266.914, 4.007, 0.250);
	RemoveBuildingForPlayer(playerid, 3377, -149.914, -324.343, 1.578, 0.250);
	RemoveBuildingForPlayer(playerid, 706, -56.609, -387.507, 4.046, 0.250);
	RemoveBuildingForPlayer(playerid, 780, -42.210, -390.156, 5.179, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -31.406, -382.132, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -42.414, -382.156, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -53.421, -382.171, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -58.921, -382.179, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -64.429, -382.187, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -70.054, -382.195, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 773, -0.867, -387.187, 4.429, 0.250);
	RemoveBuildingForPlayer(playerid, 780, -23.062, -390.156, 5.179, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -3.890, -382.093, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -9.390, -382.101, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -20.398, -382.117, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -25.906, -382.125, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 4.593, -377.273, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 1.609, -382.085, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1278, -74.546, -366.164, 18.468, 0.250);
	RemoveBuildingForPlayer(playerid, 1290, -68.289, -361.679, 10.382, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 4.570, -360.632, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 4.578, -366.179, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 4.585, -371.726, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1278, 5.710, -371.523, 18.984, 0.250);
	RemoveBuildingForPlayer(playerid, 780, 9.062, -364.945, 5.101, 0.250);
	RemoveBuildingForPlayer(playerid, 1290, -68.289, -344.242, 11.359, 0.250);
	RemoveBuildingForPlayer(playerid, 13024, -87.304, -347.500, 3.171, 0.250);
	RemoveBuildingForPlayer(playerid, 1290, -33.406, -348.750, 10.382, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 4.546, -343.984, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 4.554, -349.539, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -67.078, -339.851, 5.968, 0.250);
	RemoveBuildingForPlayer(playerid, 773, -70.835, -338.968, 4.429, 0.250);
	RemoveBuildingForPlayer(playerid, 12932, -117.960, -337.453, 3.617, 0.250);
	RemoveBuildingForPlayer(playerid, 1290, -45.406, -336.101, 10.375, 0.250);
	RemoveBuildingForPlayer(playerid, 3378, -149.914, -324.343, 1.578, 0.250);
	RemoveBuildingForPlayer(playerid, 1290, -37.312, -316.804, 10.570, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -69.820, -326.851, 5.968, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -67.109, -324.085, 5.968, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -67.117, -318.476, 5.968, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -67.125, -312.867, 5.968, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -67.132, -307.257, 5.968, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -69.890, -331.460, 5.968, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -67.085, -334.242, 5.968, 0.250);
	RemoveBuildingForPlayer(playerid, 773, -71.781, -312.421, 4.429, 0.250);
	RemoveBuildingForPlayer(playerid, 1232, -55.265, -297.125, 7.984, 0.250);
	RemoveBuildingForPlayer(playerid, 1232, -44.546, -297.125, 7.984, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -54.343, -296.054, 5.968, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -64.031, -298.898, 5.968, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -57.148, -298.882, 5.968, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -45.296, -296.023, 6.187, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -42.343, -298.867, 6.148, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -36.054, -296.039, 6.187, 0.250);
	RemoveBuildingForPlayer(playerid, 729, -58.531, -292.328, 4.585, 0.250);
	RemoveBuildingForPlayer(playerid, 729, -41.960, -292.515, 4.585, 0.250);
	RemoveBuildingForPlayer(playerid, 729, -68.968, -292.328, 4.585, 0.250);
	RemoveBuildingForPlayer(playerid, 12933, -29.031, -302.125, 6.671, 0.250);
	RemoveBuildingForPlayer(playerid, 1290, -19.875, -316.648, 10.382, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 4.468, -294.039, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 4.476, -299.585, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 4.484, -305.132, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 4.492, -310.687, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 4.507, -321.789, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 4.515, -327.335, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 4.523, -332.882, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 780, 10.335, -330.101, 5.101, 0.250);
	RemoveBuildingForPlayer(playerid, 773, 10.007, -298.937, 4.429, 0.250);
	RemoveBuildingForPlayer(playerid, 12934, -184.578, -289.898, 3.710, 0.250);
	RemoveBuildingForPlayer(playerid, 12935, -215.945, -275.750, 3.328, 0.250);
	RemoveBuildingForPlayer(playerid, 1232, -55.265, -287.125, 7.984, 0.250);
	RemoveBuildingForPlayer(playerid, 1232, -55.265, -277.125, 7.984, 0.250);
	RemoveBuildingForPlayer(playerid, 1232, -44.546, -277.125, 7.984, 0.250);
	RemoveBuildingForPlayer(playerid, 1232, -44.546, -287.125, 7.984, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -54.351, -290.445, 5.968, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -54.359, -284.835, 5.968, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -54.367, -279.226, 5.968, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -45.320, -279.195, 6.187, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -45.312, -284.804, 6.187, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -45.304, -290.414, 6.187, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -36.062, -290.429, 6.187, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -36.070, -284.820, 6.187, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -36.078, -279.210, 6.187, 0.250);
	RemoveBuildingForPlayer(playerid, 729, -58.531, -279.367, 4.585, 0.250);
	RemoveBuildingForPlayer(playerid, 729, -41.960, -279.554, 4.585, 0.250);
	RemoveBuildingForPlayer(playerid, 1278, 5.960, -287.101, 18.984, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 4.445, -277.390, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 4.460, -288.484, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 3378, -156.945, -266.914, 4.007, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 4.437, -271.835, 6.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -54.375, -273.617, 5.968, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, -45.328, -273.585, 6.187, 0.250);
	RemoveBuildingForPlayer(playerid, 12931, -91.562, -251.515, 0.421, 0.250);
	RemoveBuildingForPlayer(playerid, 3378, -207.656, -246.734, 1.578, 0.250);
	RemoveBuildingForPlayer(playerid, 13025, -148.976, -228.531, 3.539, 0.250);
	RemoveBuildingForPlayer(playerid, 3378, -196.718, -246.164, 1.578, 0.250);
	RemoveBuildingForPlayer(playerid, 3378, -176.679, -195.359, 1.562, 0.250);
	RemoveBuildingForPlayer(playerid, 3378, -200.328, -189.734, 1.601, 0.250);
	RemoveBuildingForPlayer(playerid, 3378, -200.328, -189.734, 3.945, 0.250);
	RemoveBuildingForPlayer(playerid, 3378, -224.500, -183.906, 1.531, 0.250);
	//BOPE
	RemoveBuildingForPlayer(playerid, 3276, -525.039, -1037.160, 24.421, 0.250);
	RemoveBuildingForPlayer(playerid, 3276, -536.218, -1037.420, 24.851, 0.250);
	RemoveBuildingForPlayer(playerid, 3276, -546.398, -1042.229, 24.187, 0.250);
	RemoveBuildingForPlayer(playerid, 3276, -559.867, -1060.420, 23.710, 0.250);
	RemoveBuildingForPlayer(playerid, 3276, -565.312, -1070.369, 23.359, 0.250);
	RemoveBuildingForPlayer(playerid, 3276, -571.304, -1079.250, 23.359, 0.250);
	RemoveBuildingForPlayer(playerid, 3276, -577.593, -1088.160, 23.359, 0.250);
	RemoveBuildingForPlayer(playerid, 3276, -576.351, -1097.810, 23.359, 0.250);
	RemoveBuildingForPlayer(playerid, 696, -560.093, -1089.839, 25.773, 0.250);
	RemoveBuildingForPlayer(playerid, 790, -560.210, -1067.949, 26.250, 0.250);
	RemoveBuildingForPlayer(playerid, 3276, -554.250, -1050.390, 24.015, 0.250);
	RemoveBuildingForPlayer(playerid, 696, -603.296, -1054.800, 27.523, 0.250);
	RemoveBuildingForPlayer(playerid, 17067, -588.750, -1046.180, 22.289, 0.250);
	RemoveBuildingForPlayer(playerid, 17102, -536.093, -985.039, 38.070, 0.250);
	RemoveBuildingForPlayer(playerid, 17375, -536.093, -985.039, 38.070, 0.250);
	//RM
	RemoveBuildingForPlayer(playerid, 5418, 2112.938, -1797.088, 19.334, 0.250);
	RemoveBuildingForPlayer(playerid, 5530, 2112.938, -1797.088, 19.334, 0.250);
	//favela las colinas alta
	RemoveBuildingForPlayer(playerid, 659, 2568.938, -1021.510, 68.093, 0.250);
	RemoveBuildingForPlayer(playerid, 3241, 2578.948, -1029.979, 69.084, 0.250);
	RemoveBuildingForPlayer(playerid, 3298, 2578.948, -1029.979, 69.084, 0.250);
	RemoveBuildingForPlayer(playerid, 1368, 2575.408, -1033.348, 69.241, 0.250);
	RemoveBuildingForPlayer(playerid, 1409, 2567.820, -1035.280, 68.670, 0.250);
	RemoveBuildingForPlayer(playerid, 3283, 2564.958, -1028.239, 69.007, 0.250);
	RemoveBuildingForPlayer(playerid, 3299, 2564.958, -1028.239, 69.007, 0.250);
	RemoveBuildingForPlayer(playerid, 671, 2556.239, -1033.239, 68.500, 0.250);
	RemoveBuildingForPlayer(playerid, 659, 2555.428, -1026.800, 68.250, 0.250);
	RemoveBuildingForPlayer(playerid, 3285, 2544.550, -1029.130, 70.468, 0.250);
	RemoveBuildingForPlayer(playerid, 3300, 2544.550, -1029.130, 70.468, 0.250);
	RemoveBuildingForPlayer(playerid, 3285, 2529.948, -1028.869, 70.468, 0.250);
	RemoveBuildingForPlayer(playerid, 3300, 2529.948, -1028.869, 70.468, 0.250);
	RemoveBuildingForPlayer(playerid, 3241, 2512.178, -1023.919, 69.530, 0.250);
	RemoveBuildingForPlayer(playerid, 3298, 2512.178, -1023.919, 69.530, 0.250);
	RemoveBuildingForPlayer(playerid, 1409, 2528.668, -1034.920, 68.670, 0.250);
	RemoveBuildingForPlayer(playerid, 656, 2536.500, -1019.590, 69.328, 0.250);
	RemoveBuildingForPlayer(playerid, 1409, 2545.158, -1034.900, 68.664, 0.250);
	RemoveBuildingForPlayer(playerid, 1409, 2510.290, -1029.588, 69.179, 0.250);
	RemoveBuildingForPlayer(playerid, 656, 2511.270, -1014.658, 68.039, 0.250);
	RemoveBuildingForPlayer(playerid, 617, 2520.898, -1031.380, 67.953, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2591.408, -976.812, 81.030, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2586.750, -977.539, 81.061, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2582.158, -978.265, 81.030, 0.250);
	RemoveBuildingForPlayer(playerid, 671, 2576.050, -977.359, 79.914, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2579.570, -976.234, 81.093, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2578.860, -971.640, 81.084, 0.250);
	RemoveBuildingForPlayer(playerid, 3285, 2586.610, -971.593, 82.234, 0.250);
	RemoveBuildingForPlayer(playerid, 3300, 2586.610, -971.593, 82.234, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2592.479, -969.421, 81.093, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2593.310, -974.062, 81.093, 0.250);
	RemoveBuildingForPlayer(playerid, 617, 2605.340, -946.539, 79.132, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2597.770, -949.351, 80.741, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2596.698, -944.796, 80.679, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2595.628, -940.273, 80.757, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2592.708, -938.585, 80.920, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2588.360, -940.148, 81.023, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2584.030, -941.804, 81.030, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2579.510, -942.890, 81.061, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2574.908, -943.984, 81.030, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2573.229, -946.875, 81.093, 0.250);
	RemoveBuildingForPlayer(playerid, 3241, 2581.500, -949.945, 80.795, 0.250);
	RemoveBuildingForPlayer(playerid, 3298, 2581.500, -949.945, 80.795, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2574.428, -951.437, 81.093, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2596.479, -964.515, 79.453, 0.250);
	RemoveBuildingForPlayer(playerid, 617, 2620.968, -966.242, 78.882, 0.250);
	RemoveBuildingForPlayer(playerid, 671, 2571.239, -958.101, 80.648, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2555.550, -985.171, 81.350, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2549.658, -983.867, 81.459, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2545.040, -982.875, 81.444, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2538.739, -981.539, 81.578, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2534.120, -980.593, 81.670, 0.250);
	RemoveBuildingForPlayer(playerid, 671, 2533.428, -977.937, 80.789, 0.250);
	RemoveBuildingForPlayer(playerid, 617, 2540.590, -975.164, 80.741, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2558.239, -956.000, 82.507, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2557.479, -951.414, 82.444, 0.250);
	RemoveBuildingForPlayer(playerid, 3167, 2549.218, -955.906, 81.289, 0.250);
	RemoveBuildingForPlayer(playerid, 3340, 2549.218, -955.906, 81.289, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2548.489, -963.781, 82.061, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2543.898, -964.507, 81.828, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2541.378, -962.539, 81.694, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2540.850, -957.914, 81.850, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2527.370, -979.640, 81.694, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2522.770, -979.695, 81.773, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2518.050, -979.648, 81.789, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2516.968, -979.140, 80.975, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2513.438, -978.968, 81.578, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2508.979, -977.789, 81.334, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2504.448, -976.484, 81.484, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 2521.360, -966.929, 81.069, 0.250);
	RemoveBuildingForPlayer(playerid, 617, 2522.148, -952.453, 80.741, 0.250);
	RemoveBuildingForPlayer(playerid, 3241, 2530.030, -960.039, 81.289, 0.250);
	RemoveBuildingForPlayer(playerid, 3298, 2530.030, -960.039, 81.289, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 2561.428, -971.984, 81.179, 0.250);
	RemoveBuildingForPlayer(playerid, 3285, 2513.208, -962.328, 82.898, 0.250);
	RemoveBuildingForPlayer(playerid, 3300, 2513.208, -962.328, 82.898, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 2489.168, -975.445, 79.984, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2498.188, -968.453, 81.929, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2493.590, -968.507, 81.843, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2488.870, -968.460, 81.718, 0.250);
	RemoveBuildingForPlayer(playerid, 617, 2484.928, -966.992, 80.164, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2486.610, -966.054, 81.718, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2486.658, -961.335, 81.828, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2486.610, -956.734, 81.859, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2486.658, -952.085, 81.944, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2486.698, -947.375, 81.975, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2486.648, -942.773, 81.936, 0.250);
	RemoveBuildingForPlayer(playerid, 3283, 2493.388, -944.148, 81.609, 0.250);
	RemoveBuildingForPlayer(playerid, 3299, 2493.388, -944.148, 81.609, 0.250);
	RemoveBuildingForPlayer(playerid, 3283, 2494.948, -959.632, 81.686, 0.250);
	RemoveBuildingForPlayer(playerid, 3299, 2494.948, -959.632, 81.686, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 2479.938, -967.085, 79.366, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2474.378, -951.648, 79.179, 0.250);
	RemoveBuildingForPlayer(playerid, 3241, 2458.708, -944.492, 79.539, 0.250);
	RemoveBuildingForPlayer(playerid, 3298, 2458.708, -944.492, 79.539, 0.250);
	RemoveBuildingForPlayer(playerid, 3283, 2466.290, -959.195, 79.664, 0.250);
	RemoveBuildingForPlayer(playerid, 3299, 2466.290, -959.195, 79.664, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2471.570, -967.054, 79.843, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2466.968, -967.109, 79.882, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2462.250, -967.062, 79.795, 0.250);
	RemoveBuildingForPlayer(playerid, 671, 2471.628, -976.695, 78.694, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2468.120, -975.429, 79.741, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2463.520, -975.484, 79.773, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2458.800, -975.437, 79.694, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 2455.378, -975.617, 78.616, 0.250);
	RemoveBuildingForPlayer(playerid, 617, 2440.468, -953.632, 78.639, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2442.698, -955.398, 79.741, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2442.750, -960.000, 79.795, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2442.698, -964.710, 79.734, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2441.370, -967.476, 79.069, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2444.968, -967.062, 79.734, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2449.688, -967.109, 79.811, 0.250);
	RemoveBuildingForPlayer(playerid, 3285, 2449.520, -961.898, 81.007, 0.250);
	RemoveBuildingForPlayer(playerid, 3300, 2449.520, -961.898, 81.007, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2446.718, -975.070, 79.600, 0.250);
	RemoveBuildingForPlayer(playerid, 1407, 2427.388, -975.203, 78.023, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2422.739, -975.804, 77.475, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 2532.770, -1037.588, 68.750, 0.250);
	RemoveBuildingForPlayer(playerid, 1294, 2566.989, -1038.979, 72.984, 0.250);
	RemoveBuildingForPlayer(playerid, 790, -425.953, -1432.780, 25.054, 0.250);
	RemoveBuildingForPlayer(playerid, 3172, 2326.620, -1062.699, 51.273, 0.250);
	RemoveBuildingForPlayer(playerid, 3345, 2326.620, -1062.699, 51.273, 0.250);
	RemoveBuildingForPlayer(playerid, 1368, 2332.510, -1055.140, 52.023, 0.250);
	RemoveBuildingForPlayer(playerid, 3167, 2332.300, -1048.479, 51.328, 0.250);
	RemoveBuildingForPlayer(playerid, 3340, 2332.300, -1048.479, 51.328, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 2321.629, -1068.670, 49.101, 0.250);
	RemoveBuildingForPlayer(playerid, 3171, 2321.129, -1052.270, 51.265, 0.250);
	RemoveBuildingForPlayer(playerid, 3344, 2321.129, -1052.270, 51.265, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 2318.050, -1056.050, 51.164, 0.250);
	RemoveBuildingForPlayer(playerid, 671, 2303.729, -1061.900, 47.812, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 2341.449, -1053.939, 51.453, 0.250);
    //posto norte
    RemoveBuildingForPlayer(playerid, 5853, 1018.159, -908.976, 43.648, 0.250);
    RemoveBuildingForPlayer(playerid, 5898, 1018.159, -908.976, 43.648, 0.250);
    RemoveBuildingForPlayer(playerid, 1522, 1000.880, -919.109, 41.289, 0.250);
	//posto sul
	RemoveBuildingForPlayer(playerid, 5409, 1918.849, -1776.329, 16.976, 0.250);
	RemoveBuildingForPlayer(playerid, 5535, 1918.849, -1776.329, 16.976, 0.250);
	RemoveBuildingForPlayer(playerid, 1524, 1910.160, -1779.660, 18.750, 0.250);
	RemoveBuildingForPlayer(playerid, 5681, 1921.479, -1778.910, 18.578, 0.250);
	RemoveBuildingForPlayer(playerid, 955, 1928.729, -1772.449, 12.945, 0.250);
	RemoveBuildingForPlayer(playerid, 1676, 1941.660, -1767.290, 14.140, 0.250);
	RemoveBuildingForPlayer(playerid, 1676, 1941.660, -1771.339, 14.140, 0.250);
	RemoveBuildingForPlayer(playerid, 1676, 1941.660, -1774.310, 14.140, 0.250);
	RemoveBuildingForPlayer(playerid, 1676, 1941.660, -1778.449, 14.140, 0.250);
	//16BPM
	RemoveBuildingForPlayer(playerid, 616, 2528.709, -1556.680, 21.468, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2510.560, -1563.479, 21.804, 0.250);
	//favela LC parte baixa
	RemoveBuildingForPlayer(playerid, 714, 2588.250, -1090.015, 66.045, 0.250);
	RemoveBuildingForPlayer(playerid, 3656, 2620.639, -1068.906, 71.382, 0.250);
	RemoveBuildingForPlayer(playerid, 3656, 2620.187, -1086.187, 71.382, 0.250);
	RemoveBuildingForPlayer(playerid, 3654, 2583.264, -1069.428, 70.670, 0.250);
	RemoveBuildingForPlayer(playerid, 3647, 2513.468, -1111.828, 57.834, 0.250);
	RemoveBuildingForPlayer(playerid, 3647, 2406.545, -1112.500, 41.539, 0.250);
	RemoveBuildingForPlayer(playerid, 3654, 2372.687, -1132.334, 29.898, 0.250);
	RemoveBuildingForPlayer(playerid, 3650, 2618.562, -1113.788, 69.600, 0.250);
	RemoveBuildingForPlayer(playerid, 3650, 2618.553, -1099.906, 70.959, 0.250);
	RemoveBuildingForPlayer(playerid, 3706, 2577.897, -1095.553, 68.061, 0.250);
	RemoveBuildingForPlayer(playerid, 3562, 2515.108, -1132.453, 42.687, 0.250);
	RemoveBuildingForPlayer(playerid, 3562, 2470.834, -1109.859, 45.554, 0.250);
	RemoveBuildingForPlayer(playerid, 3563, 2438.789, -1109.709, 44.147, 0.250);
	RemoveBuildingForPlayer(playerid, 3561, 2488.241, -1130.850, 40.554, 0.250);
	RemoveBuildingForPlayer(playerid, 3560, 2457.062, -1105.600, 44.851, 0.250);
	RemoveBuildingForPlayer(playerid, 3559, 2394.428, -1130.647, 31.983, 0.250);
	RemoveBuildingForPlayer(playerid, 3581, 2427.077, -1131.265, 36.280, 0.250);
	RemoveBuildingForPlayer(playerid, 1530, 2621.507, -1092.203, 69.795, 0.250);
	RemoveBuildingForPlayer(playerid, 1261, 2590.601, -1141.859, 64.225, 0.250);
	RemoveBuildingForPlayer(playerid, 1266, 2531.514, -1136.100, 54.164, 0.250);
	RemoveBuildingForPlayer(playerid, 669, 2359.632, -1132.038, 27.679, 0.250);
	RemoveBuildingForPlayer(playerid, 3649, 2372.687, -1132.334, 29.898, 0.250);
	RemoveBuildingForPlayer(playerid, 3558, 2394.428, -1130.647, 31.983, 0.250);
	RemoveBuildingForPlayer(playerid, 3594, 2382.414, -1131.069, 28.437, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2384.562, -1120.031, 27.819, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2396.789, -1118.140, 39.187, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2386.764, -1115.234, 26.608, 0.250);
	RemoveBuildingForPlayer(playerid, 669, 2396.070, -1107.187, 38.476, 0.250);
	RemoveBuildingForPlayer(playerid, 1307, 2403.897, -1135.968, 28.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2417.389, -1137.453, 32.905, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2413.272, -1129.209, 30.334, 0.250);
	RemoveBuildingForPlayer(playerid, 3648, 2406.545, -1112.500, 41.539, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2419.209, -1139.140, 32.867, 0.250);
	RemoveBuildingForPlayer(playerid, 17907, 2426.164, -1110.093, 43.484, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2427.022, -1139.468, 33.702, 0.250);
	RemoveBuildingForPlayer(playerid, 3583, 2427.077, -1131.265, 36.280, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2430.500, -1139.437, 33.804, 0.250);
	RemoveBuildingForPlayer(playerid, 17530, 2452.601, -1193.381, 35.312, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2434.000, -1139.397, 33.921, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2435.670, -1137.562, 34.030, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2435.656, -1134.078, 34.155, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2435.625, -1130.553, 34.272, 0.250);
	RemoveBuildingForPlayer(playerid, 669, 2449.976, -1128.406, 34.209, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2456.772, -1117.984, 40.889, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 2478.820, -1136.421, 37.601, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2481.514, -1137.131, 38.289, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2480.272, -1134.062, 38.289, 0.250);
	RemoveBuildingForPlayer(playerid, 669, 2474.358, -1130.734, 38.506, 0.250);
	RemoveBuildingForPlayer(playerid, 669, 2468.834, -1120.100, 43.039, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2484.452, -1138.390, 38.194, 0.250);
	RemoveBuildingForPlayer(playerid, 3556, 2488.241, -1130.850, 40.554, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2491.351, -1138.459, 38.726, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2494.420, -1137.343, 38.772, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2495.764, -1134.390, 38.772, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2451.351, -1115.991, 41.647, 0.250);
	RemoveBuildingForPlayer(playerid, 3555, 2438.789, -1109.709, 44.147, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2447.920, -1102.413, 40.881, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2450.241, -1103.828, 42.664, 0.250);
	RemoveBuildingForPlayer(playerid, 3557, 2457.062, -1105.600, 44.851, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2448.320, -1096.709, 42.421, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2450.420, -1099.140, 42.562, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2473.039, -1099.194, 44.750, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2464.820, -1100.772, 43.562, 0.250);
	RemoveBuildingForPlayer(playerid, 3582, 2470.834, -1109.859, 45.554, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2477.608, -1099.781, 45.367, 0.250);
	RemoveBuildingForPlayer(playerid, 3594, 2484.639, -1115.022, 48.217, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2460.928, -1097.875, 42.992, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2465.468, -1098.359, 43.631, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2516.459, -1139.656, 40.819, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2511.202, -1139.656, 40.351, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2505.945, -1139.656, 39.897, 0.250);
	RemoveBuildingForPlayer(playerid, 3582, 2515.108, -1132.453, 42.687, 0.250);
	RemoveBuildingForPlayer(playerid, 669, 2500.702, -1129.225, 38.351, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2521.695, -1139.656, 41.264, 0.250);
	RemoveBuildingForPlayer(playerid, 1260, 2531.514, -1136.093, 54.171, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2524.303, -1136.959, 41.429, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2554.108, -1135.788, 62.929, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2549.093, -1134.609, 63.077, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2564.241, -1136.281, 64.725, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2559.125, -1136.022, 63.476, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2544.991, -1131.538, 62.875, 0.250);
	RemoveBuildingForPlayer(playerid, 669, 2534.875, -1130.875, 42.054, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2543.039, -1126.897, 62.359, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2542.928, -1121.928, 62.131, 0.250);
	RemoveBuildingForPlayer(playerid, 3648, 2513.468, -1111.828, 57.834, 0.250);
	RemoveBuildingForPlayer(playerid, 700, 2538.789, -1105.015, 59.209, 0.250);
	RemoveBuildingForPlayer(playerid, 669, 2531.709, -1112.000, 56.617, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2546.803, -1111.116, 60.327, 0.250);
	RemoveBuildingForPlayer(playerid, 3594, 2548.584, -1106.319, 62.256, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2554.882, -1115.234, 58.734, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2554.257, -1104.350, 60.671, 0.250);
	RemoveBuildingForPlayer(playerid, 669, 2559.968, -1110.218, 63.514, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2561.834, -1097.725, 65.984, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2557.937, -1094.069, 65.875, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2557.952, -1101.319, 62.914, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2569.187, -1136.444, 65.359, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2574.507, -1136.296, 65.359, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2579.764, -1136.084, 65.359, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2584.820, -1134.765, 65.359, 0.250);
	RemoveBuildingForPlayer(playerid, 17919, 2611.522, -1149.218, 67.084, 0.250);
	RemoveBuildingForPlayer(playerid, 1267, 2590.601, -1141.859, 64.225, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2610.014, -1132.359, 65.398, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2605.031, -1133.171, 65.359, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2599.812, -1132.406, 65.359, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2594.601, -1131.640, 65.359, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2589.553, -1132.381, 65.359, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2567.031, -1080.234, 68.804, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2565.820, -1101.428, 66.155, 0.250);
	RemoveBuildingForPlayer(playerid, 17905, 2568.022, -1098.319, 59.539, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2569.084, -1076.350, 69.007, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2569.709, -1105.171, 66.250, 0.250);
	RemoveBuildingForPlayer(playerid, 669, 2571.889, -1107.459, 64.734, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2571.750, -1063.125, 69.234, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2569.733, -1072.913, 69.100, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2571.045, -1066.593, 69.125, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2570.632, -1078.225, 68.882, 0.250);
	RemoveBuildingForPlayer(playerid, 3646, 2577.897, -1095.553, 68.061, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2574.170, -1078.694, 68.882, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2577.632, -1082.921, 66.828, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 2580.647, -1058.796, 68.539, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2572.437, -1059.663, 69.295, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2574.522, -1057.906, 69.319, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2578.014, -1057.850, 69.319, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2582.334, -1104.975, 65.241, 0.250);
	RemoveBuildingForPlayer(playerid, 700, 2581.202, -1109.578, 65.725, 0.250);
	RemoveBuildingForPlayer(playerid, 669, 2608.539, -1105.187, 67.264, 0.250);
	RemoveBuildingForPlayer(playerid, 669, 2608.233, -1089.944, 68.632, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2610.695, -1080.109, 69.866, 0.250);
	RemoveBuildingForPlayer(playerid, 3649, 2583.264, -1069.428, 70.670, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2590.843, -1059.859, 67.514, 0.250);
	RemoveBuildingForPlayer(playerid, 700, 2616.647, -1126.928, 64.491, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2624.062, -1122.625, 66.218, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2620.601, -1122.625, 66.186, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2617.093, -1122.625, 66.186, 0.250);
	RemoveBuildingForPlayer(playerid, 3651, 2618.562, -1113.788, 69.600, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2630.976, -1122.647, 66.241, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2627.514, -1122.625, 66.209, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2632.593, -1120.975, 66.545, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2632.593, -1117.475, 67.093, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2632.695, -1110.631, 68.030, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2627.459, -1105.413, 68.375, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2623.920, -1105.413, 68.375, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2620.382, -1105.413, 68.375, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2632.656, -1102.890, 69.170, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2632.695, -1107.140, 68.343, 0.250);
	RemoveBuildingForPlayer(playerid, 1418, 2630.983, -1105.413, 68.398, 0.250);
	RemoveBuildingForPlayer(playerid, 3651, 2618.553, -1099.906, 70.959, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2632.639, -1093.671, 69.866, 0.250);
	RemoveBuildingForPlayer(playerid, 3655, 2620.187, -1086.187, 71.382, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2632.639, -1088.334, 69.866, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2629.875, -1092.125, 69.866, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2632.639, -1078.303, 69.882, 0.250);
	RemoveBuildingForPlayer(playerid, 1468, 2627.289, -1077.538, 69.882, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2630.233, -1075.125, 69.203, 0.250);
	RemoveBuildingForPlayer(playerid, 3655, 2620.639, -1068.906, 71.382, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2632.639, -1073.015, 69.328, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2632.632, -1065.116, 69.295, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2613.695, -1060.125, 67.045, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2632.632, -1060.328, 69.295, 0.250);
	RemoveBuildingForPlayer(playerid, 1410, 2630.437, -1057.913, 69.295, 0.250);
	RemoveBuildingForPlayer(playerid, 710, 2412.991, -1055.006, 65.014, 0.250);
	RemoveBuildingForPlayer(playerid, 710, 2515.459, -1065.741, 83.069, 0.250);
	RemoveBuildingForPlayer(playerid, 3340, 2460.000, -1057.616, 58.734, 0.250);
	RemoveBuildingForPlayer(playerid, 3340, 2481.170, -1067.406, 65.773, 0.250);
	RemoveBuildingForPlayer(playerid, 3341, 2440.406, -1059.437, 53.289, 0.250);
	RemoveBuildingForPlayer(playerid, 3300, 2539.264, -1066.312, 70.500, 0.250);
	RemoveBuildingForPlayer(playerid, 3299, 2523.507, -1066.906, 69.109, 0.250);
	RemoveBuildingForPlayer(playerid, 3301, 2502.327, -1068.296, 71.014, 0.250);
	RemoveBuildingForPlayer(playerid, 3299, 2466.289, -959.195, 79.664, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2421.772, -1061.756, 44.069, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 2418.608, -1050.609, 50.101, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2423.289, -1051.125, 49.171, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 2423.500, -1064.647, 47.359, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2426.702, -1047.281, 50.867, 0.250);
	RemoveBuildingForPlayer(playerid, 1409, 2436.709, -1052.250, 53.429, 0.250);
	RemoveBuildingForPlayer(playerid, 3170, 2440.406, -1059.437, 53.289, 0.250);
	RemoveBuildingForPlayer(playerid, 617, 2441.928, -1046.265, 53.334, 0.250);
	RemoveBuildingForPlayer(playerid, 3167, 2460.000, -1057.616, 58.734, 0.250);
	RemoveBuildingForPlayer(playerid, 1409, 2459.452, -1051.609, 58.842, 0.250);
	RemoveBuildingForPlayer(playerid, 656, 2463.116, -1049.288, 58.467, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 2462.007, -1046.600, 59.405, 0.250);
	RemoveBuildingForPlayer(playerid, 1368, 2475.031, -1065.203, 66.507, 0.250);
	RemoveBuildingForPlayer(playerid, 3167, 2481.170, -1067.406, 65.773, 0.250);
	RemoveBuildingForPlayer(playerid, 659, 2486.570, -1058.584, 66.398, 0.250);
	RemoveBuildingForPlayer(playerid, 13731, 2485.170, -1040.968, 71.773, 0.250);
	RemoveBuildingForPlayer(playerid, 1409, 2484.084, -1053.140, 66.639, 0.250);
	RemoveBuildingForPlayer(playerid, 617, 2489.233, -1069.444, 66.148, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 2488.366, -1056.006, 66.850, 0.250);
	RemoveBuildingForPlayer(playerid, 671, 2492.514, -1059.187, 66.898, 0.250);
	RemoveBuildingForPlayer(playerid, 3284, 2502.327, -1068.296, 71.014, 0.250);
	RemoveBuildingForPlayer(playerid, 1409, 2505.077, -1061.078, 69.311, 0.250);
	RemoveBuildingForPlayer(playerid, 659, 2507.202, -1062.281, 66.398, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 2517.616, -1061.288, 68.343, 0.250);
	RemoveBuildingForPlayer(playerid, 3283, 2523.507, -1066.906, 69.109, 0.250);
	RemoveBuildingForPlayer(playerid, 1409, 2527.920, -1058.140, 68.686, 0.250);
	RemoveBuildingForPlayer(playerid, 3285, 2539.264, -1066.312, 70.500, 0.250);
	RemoveBuildingForPlayer(playerid, 1409, 2538.647, -1058.600, 68.670, 0.250);
	RemoveBuildingForPlayer(playerid, 1368, 2543.366, -1063.890, 69.225, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2548.647, -1064.834, 68.194, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 2548.608, -1062.750, 68.273, 0.250);
	//PROTEGE
	RemoveBuildingForPlayer(playerid, 647, 1808.869, -1591.050, 14.460, 0.250);
	RemoveBuildingForPlayer(playerid, 700, 1807.469, -1590.479, 13.445, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 1805.630, -1589.969, 14.546, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 1801.880, -1592.449, 14.414, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 1781.380, -1596.339, 14.210, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 1799.479, -1594.410, 14.546, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 1800.290, -1598.290, 14.625, 0.250);
	RemoveBuildingForPlayer(playerid, 700, 1799.160, -1596.540, 13.445, 0.250);
	RemoveBuildingForPlayer(playerid, 1216, 1809.339, -1597.089, 13.226, 0.250);
	RemoveBuildingForPlayer(playerid, 1216, 1808.380, -1597.920, 13.226, 0.250);
	RemoveBuildingForPlayer(playerid, 1216, 1807.380, -1598.780, 13.226, 0.250);
	RemoveBuildingForPlayer(playerid, 1216, 1806.390, -1599.619, 13.226, 0.250);
	RemoveBuildingForPlayer(playerid, 1216, 1805.410, -1600.459, 13.226, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 1811.979, -1582.250, 12.867, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 1822.160, -1543.790, 12.632, 0.250);
	RemoveBuildingForPlayer(playerid, 647, 1818.949, -1547.449, 14.164, 0.250);
	RemoveBuildingForPlayer(playerid, 4189, 1794.619, -1576.729, 17.757, 0.250);
	RemoveBuildingForPlayer(playerid, 4000, 1787.130, -1565.680, 11.968, 0.250);
	RemoveBuildingForPlayer(playerid, 4080, 1787.130, -1565.680, 11.968, 0.250);
	RemoveBuildingForPlayer(playerid, 4079, 1785.979, -1564.859, 25.250, 0.250);
	RemoveBuildingForPlayer(playerid, 3999, 1785.979, -1564.859, 25.250, 0.250);
	RemoveBuildingForPlayer(playerid, 4099, 1770.050, -1549.410, 10.468, 0.250);
	//Bombeiros
	RemoveBuildingForPlayer(playerid, 620, 930.242, -1442.979, 12.281, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 929.937, -1447.800, 12.491, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 930.242, -1451.800, 12.491, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 950.125, -1420.270, 12.100, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 950.445, -1476.947, 12.328, 0.250);
	RemoveBuildingForPlayer(playerid, 1529, 947.484, -1466.718, 17.242, 0.250);
	RemoveBuildingForPlayer(playerid, 6148, 941.250, -1447.770, 21.420, 0.250);
	RemoveBuildingForPlayer(playerid, 6155, 941.250, -1447.770, 21.420, 0.250);
	RemoveBuildingForPlayer(playerid, 6152, 990.085, -1450.088, 12.772, 0.250);
	RemoveBuildingForPlayer(playerid, 6156, 990.085, -1450.088, 12.772, 0.250);
	RemoveBuildingForPlayer(playerid, 6192, 988.906, -1487.910, 24.538, 0.250);
	//estação unity
	RemoveBuildingForPlayer(playerid, 5024, 1748.843, -1883.031, 14.187, 0.250);
	//Ocean Docks 
	RemoveBuildingForPlayer(playerid, 5145, 2716.7969, -2447.8750, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3689, 2685.3828, -2366.0547, 19.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 3707, 2716.2344, -2452.5938, 20.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 3707, 2720.3203, -2530.9141, 19.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 5235, 2716.7969, -2447.8750, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3690, 2685.3828, -2366.0547, 19.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2417.7891, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2455.8828, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2493.9844, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3709, 2660.4766, -2429.2969, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3709, 2639.5469, -2429.2969, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3709, 2618.8594, -2429.2969, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3708, 2720.3203, -2530.9141, 19.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 3708, 2716.2344, -2452.5938, 20.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2771.0703, -2372.4453, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2789.2109, -2377.6250, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2774.7969, -2386.8516, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2771.0703, -2520.5469, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2774.7969, -2534.9531, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3746, 2814.2656, -2356.5703, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3746, 2814.2656, -2521.4922, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3758, 2748.0156, -2571.5938, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 3758, 2702.3984, -2324.2578, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 3770, 2795.8281, -2394.2422, 14.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3770, 2746.4063, -2453.4844, 14.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2624.3281, -2452.1484, 16.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, 2592.4922, -2359.4219, 26.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3623, 2618.8594, -2429.2969, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2624.3281, -2409.5625, 16.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, 2626.2344, -2391.5234, 26.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, 2674.5234, -2557.4922, 26.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2669.9063, -2518.6641, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2674.2656, -2508.3047, 16.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2713.0625, -2508.3047, 16.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2672.5938, -2506.8594, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2680.8594, -2493.0781, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 2704.3672, -2487.8672, 20.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2742.2656, -2481.5156, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2696.0234, -2474.8594, 16.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2675.5703, -2466.8516, 16.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 5326, 2661.5156, -2465.1406, 20.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2669.9063, -2447.2891, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2696.0234, -2446.6250, 16.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3623, 2639.5469, -2429.2969, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3623, 2660.4766, -2429.2969, 17.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2629.2109, -2419.6875, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 2649.8984, -2419.6875, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2686.7578, -2416.6250, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2663.5078, -2409.5625, 16.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2672.5938, -2408.2500, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2742.2656, -2416.5234, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2639.1953, -2392.8203, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2663.8359, -2392.8203, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2637.1719, -2385.8672, 16.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 1306, 2669.9063, -2394.5078, 19.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2692.6797, -2387.4766, 16.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, 2708.4063, -2391.5234, 26.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3753, 2748.0156, -2571.5938, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2774.7969, -2534.9531, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2771.0703, -2520.5469, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2501.8359, 14.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2493.9844, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2486.9609, 14.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2747.0078, -2480.2422, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2463.8203, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, 2773.3438, -2479.9688, 26.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2455.8828, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3626, 2746.4063, -2453.4844, 14.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2448.4766, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, 2773.3438, -2443.1719, 26.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3577, 2744.5703, -2436.1875, 13.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 3577, 2744.5703, -2427.3203, 13.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2425.3516, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2774.7969, -2386.8516, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2771.0703, -2372.4453, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2410.2109, 14.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2417.7891, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2789.2109, -2377.6250, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, 2802.4297, -2556.5234, 26.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2501.8359, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2486.8281, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2486.9609, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2463.8203, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2448.3438, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2448.4766, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2425.3516, 14.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2410.2109, 14.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 5351, 2789.6563, -2418.6953, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2410.0781, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3626, 2795.8281, -2394.2422, 14.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3620, 2814.2656, -2521.4922, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3620, 2814.2656, -2356.5703, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3753, 2702.3984, -2324.2578, 3.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, 2762.7578, -2333.3828, 26.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1278, 2804.2422, -2333.3828, 26.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 4271, 2657.0781, -2387.1953, -4.0000, 0.25); 
	//Bar
	RemoveBuildingForPlayer(playerid, 5422, 2071.479, -1831.420, 14.562, 0.250);
	RemoveBuildingForPlayer(playerid, 5532, 2056.979, -1830.520, 20.601, 0.250);
	RemoveBuildingForPlayer(playerid, 5527, 2056.979, -1830.520, 20.601, 0.250);
	RemoveBuildingForPlayer(playerid, 5532, 2056.979, -1830.520, 20.601, 0.250);
	RemoveBuildingForPlayer(playerid, 5527, 2056.979, -1830.520, 20.601, 0.250);
	//Palco Prefeitura
    RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1716.7031, 15.6250, 0.25);
    RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1702.5313, 15.6250, 0.25);
    RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1692.3906, 15.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1682.7188, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1682.3125, 15.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1682.6719, 13.4531, 0.25);
	//caixa economica
	RemoveBuildingForPlayer(playerid, 4552, 1391.130, -1318.089, 24.664, 0.250);
	RemoveBuildingForPlayer(playerid, 4632, 1391.130, -1318.089, 24.664, 0.250);
	RemoveBuildingForPlayer(playerid, 1617, 1403.380, -1299.270, 17.109, 0.250);
	RemoveBuildingForPlayer(playerid, 1617, 1417.020, -1282.890, 16.890, 0.250);
	RemoveBuildingForPlayer(playerid, 4711, 1392.189, -1336.800, 15.984, 0.250);
	RemoveBuildingForPlayer(playerid, 1617, 1403.380, -1328.869, 15.796, 0.250);
	RemoveBuildingForPlayer(playerid, 1617, 1403.380, -1342.410, 15.796, 0.250);
	RemoveBuildingForPlayer(playerid, 1617, 1398.890, -1250.599, 25.445, 0.250);
	RemoveBuildingForPlayer(playerid, 1617, 1398.890, -1250.599, 16.546, 0.250);
	RemoveBuildingForPlayer(playerid, 1533, 1369.400, -1278.280, 12.539, 0.250);
	RemoveBuildingForPlayer(playerid, 1537, 1369.400, -1281.300, 12.539, 0.250);
	RemoveBuildingForPlayer(playerid, 4588, 1405.880, -1254.790, 34.000, 0.250);
	RemoveBuildingForPlayer(playerid, 4757, 1404.1406, -1309.1328, 43.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 1371.4688, -1268.2188, 37.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 4736, 1404.1406, -1309.1328, 43.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1371.4688, -1268.2188, 37.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 4752, 1430.8516, -1340.7500, 23.0469, 0.25);
    //ammu nation
    RemoveBuildingForPlayer(playerid, 620, 1305.670, -1583.699, 12.585, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1305.560, -1614.829, 12.289, 0.250);
    RemoveBuildingForPlayer(playerid, 6253, 1305.469, -1619.739, 13.398, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1305.560, -1641.530, 12.289, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1305.670, -1669.900, 12.585, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1304.119, -1696.800, 12.289, 0.250);
    RemoveBuildingForPlayer(playerid, 713, 1304.770, -1729.939, 12.437, 0.250);
    RemoveBuildingForPlayer(playerid, 713, 1304.770, -1753.589, 12.437, 0.250);
    RemoveBuildingForPlayer(playerid, 713, 1304.770, -1780.109, 12.437, 0.250);
    RemoveBuildingForPlayer(playerid, 713, 1304.770, -1808.489, 12.437, 0.250);
    RemoveBuildingForPlayer(playerid, 713, 1304.770, -1839.869, 12.437, 0.250);
    RemoveBuildingForPlayer(playerid, 6127, 1306.520, -1630.359, 12.468, 0.250);
    RemoveBuildingForPlayer(playerid, 6172, 1306.520, -1630.359, 12.468, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 928.140, -1484.130, 12.500, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1380.349, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1366.689, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1355.979, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1343.260, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 1290, 1349.989, -1348.670, 18.289, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1331.660, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1317.890, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1305.160, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1293.560, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1267.130, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1261.020, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1255.050, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1228.040, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.109, -1215.390, 15.375, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.050, -1208.229, 16.867, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.160, -1187.290, 20.648, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.000, -1170.199, 23.179, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1360.579, -1012.409, 26.265, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1362.589, -992.664, 27.960, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1369.010, -965.523, 32.789, 0.250);
    RemoveBuildingForPlayer(playerid, 5859, 1350.150, -1353.369, 12.476, 0.250);
    RemoveBuildingForPlayer(playerid, 5903, 1350.150, -1353.369, 12.476, 0.250);
    RemoveBuildingForPlayer(playerid, 5750, 1350.160, -1250.839, 14.132, 0.250);
    RemoveBuildingForPlayer(playerid, 5902, 1350.160, -1250.839, 14.132, 0.250);
    RemoveBuildingForPlayer(playerid, 5799, 1350.160, -1170.819, 19.460, 0.250);
    RemoveBuildingForPlayer(playerid, 5901, 1350.160, -1170.819, 19.460, 0.250);
    RemoveBuildingForPlayer(playerid, 5793, 1365.479, -998.265, 30.328, 0.250);
    RemoveBuildingForPlayer(playerid, 5825, 1365.479, -998.265, 30.328, 0.250);
    //Favela el corona
    RemoveBuildingForPlayer(playerid, 4820, 1738.390, -2117.023, 13.937, 0.250);
    RemoveBuildingForPlayer(playerid, 4952, 1738.390, -2117.023, 13.937, 0.250);
    RemoveBuildingForPlayer(playerid, 4989, 1799.687, -2139.695, 15.054, 0.250);
    RemoveBuildingForPlayer(playerid, 3669, 1801.976, -2093.664, 15.210, 0.250);
    RemoveBuildingForPlayer(playerid, 3669, 1762.445, -2096.710, 15.046, 0.250);
    RemoveBuildingForPlayer(playerid, 3669, 1734.101, -2092.703, 15.226, 0.250);
    RemoveBuildingForPlayer(playerid, 3669, 1711.632, -2095.960, 15.210, 0.250);
    RemoveBuildingForPlayer(playerid, 3669, 1669.914, -2126.156, 15.335, 0.250);
    RemoveBuildingForPlayer(playerid, 3669, 1695.484, -2131.109, 15.000, 0.250);
    RemoveBuildingForPlayer(playerid, 3669, 1734.687, -2135.632, 15.210, 0.250);
    RemoveBuildingForPlayer(playerid, 3669, 1782.148, -2131.781, 15.257, 0.250);
    RemoveBuildingForPlayer(playerid, 3670, 1759.937, -2136.195, 15.171, 0.250);
    RemoveBuildingForPlayer(playerid, 3670, 1713.867, -2136.195, 15.171, 0.250);
    RemoveBuildingForPlayer(playerid, 3670, 1668.726, -2096.195, 15.187, 0.250);
    RemoveBuildingForPlayer(playerid, 3670, 1782.710, -2090.523, 15.171, 0.250);
    RemoveBuildingForPlayer(playerid, 1525, 1783.968, -2156.539, 14.312, 0.250);
    RemoveBuildingForPlayer(playerid, 1531, 1808.343, -2092.265, 14.218, 0.250);
    RemoveBuildingForPlayer(playerid, 5056, 1798.687, -2146.734, 14.000, 0.250);
    RemoveBuildingForPlayer(playerid, 1413, 1658.914, -2120.281, 13.679, 0.250);
    RemoveBuildingForPlayer(playerid, 1412, 1658.835, -2114.960, 13.679, 0.250);
    RemoveBuildingForPlayer(playerid, 1413, 1658.835, -2109.687, 13.679, 0.250);
    RemoveBuildingForPlayer(playerid, 1413, 1658.835, -2104.406, 13.679, 0.250);
    RemoveBuildingForPlayer(playerid, 3634, 1669.914, -2126.156, 15.335, 0.250);
    RemoveBuildingForPlayer(playerid, 3635, 1668.726, -2096.195, 15.187, 0.250);
    RemoveBuildingForPlayer(playerid, 1308, 1676.281, -2118.093, 12.750, 0.250);
    RemoveBuildingForPlayer(playerid, 1226, 1681.968, -2108.304, 16.390, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1682.140, -2102.351, 11.781, 0.250);
    RemoveBuildingForPlayer(playerid, 1535, 1684.007, -2097.773, 12.914, 0.250);
    RemoveBuildingForPlayer(playerid, 1308, 1692.875, -2102.671, 12.750, 0.250);
    RemoveBuildingForPlayer(playerid, 3634, 1695.484, -2131.109, 15.000, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1700.804, -2123.796, 11.781, 0.250);
    RemoveBuildingForPlayer(playerid, 1307, 1708.734, -2122.593, 12.687, 0.250);
    RemoveBuildingForPlayer(playerid, 3634, 1711.632, -2095.960, 15.210, 0.250);
    RemoveBuildingForPlayer(playerid, 3635, 1713.867, -2136.195, 15.171, 0.250);
    RemoveBuildingForPlayer(playerid, 1226, 1725.726, -2116.890, 16.390, 0.250);
    RemoveBuildingForPlayer(playerid, 5025, 1728.070, -2125.804, 21.179, 0.250);
    RemoveBuildingForPlayer(playerid, 1468, 1729.296, -2122.929, 13.757, 0.250);
    RemoveBuildingForPlayer(playerid, 5088, 1728.070, -2125.804, 21.179, 0.250);
    RemoveBuildingForPlayer(playerid, 1308, 1731.218, -2102.976, 12.843, 0.250);
    RemoveBuildingForPlayer(playerid, 712, 1733.242, -2125.843, 21.914, 0.250);
    RemoveBuildingForPlayer(playerid, 1468, 1734.578, -2122.929, 13.757, 0.250);
    RemoveBuildingForPlayer(playerid, 3634, 1734.687, -2135.632, 15.210, 0.250);
    RemoveBuildingForPlayer(playerid, 712, 1742.421, -2101.148, 21.914, 0.250);
    RemoveBuildingForPlayer(playerid, 1468, 1739.851, -2122.929, 13.757, 0.250);
    RemoveBuildingForPlayer(playerid, 5060, 1690.875, -2090.226, 14.945, 0.250);
    RemoveBuildingForPlayer(playerid, 5061, 1698.906, -2088.742, 14.140, 0.250);
    RemoveBuildingForPlayer(playerid, 3634, 1734.101, -2092.703, 15.226, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1751.148, -2126.398, 11.781, 0.250);
    RemoveBuildingForPlayer(playerid, 1308, 1757.343, -2122.750, 12.750, 0.250);
    RemoveBuildingForPlayer(playerid, 3635, 1759.937, -2136.195, 15.171, 0.250);
    RemoveBuildingForPlayer(playerid, 3634, 1762.445, -2096.710, 15.046, 0.250);
    RemoveBuildingForPlayer(playerid, 1226, 1772.117, -2108.695, 16.390, 0.250);
    RemoveBuildingForPlayer(playerid, 1308, 1770.523, -2102.539, 12.750, 0.250);
    RemoveBuildingForPlayer(playerid, 3634, 1782.148, -2131.781, 15.257, 0.250);
    RemoveBuildingForPlayer(playerid, 3635, 1782.710, -2090.523, 15.171, 0.250);
    RemoveBuildingForPlayer(playerid, 1308, 1788.882, -2123.265, 12.734, 0.250);
    RemoveBuildingForPlayer(playerid, 1468, 1795.601, -2102.375, 13.757, 0.250);
    RemoveBuildingForPlayer(playerid, 4892, 1799.687, -2139.695, 15.054, 0.250);
    RemoveBuildingForPlayer(playerid, 3634, 1801.976, -2093.664, 15.210, 0.250);
    RemoveBuildingForPlayer(playerid, 5069, 1800.117, -2139.875, 14.195, 0.250);
    RemoveBuildingForPlayer(playerid, 1307, 1807.296, -2101.828, 12.687, 0.250);
    RemoveBuildingForPlayer(playerid, 1468, 1806.156, -2102.375, 13.757, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1812.171, -2140.453, 11.781, 0.250);
    RemoveBuildingForPlayer(playerid, 1468, 1812.593, -2096.000, 13.757, 0.250);
    RemoveBuildingForPlayer(playerid, 1468, 1812.593, -2090.718, 13.757, 0.250);
    RemoveBuildingForPlayer(playerid, 1468, 1812.593, -2085.445, 13.757, 0.250);
    RemoveBuildingForPlayer(playerid, 1468, 1810.695, -2100.523, 13.757, 0.250);
    RemoveBuildingForPlayer(playerid, 1226, 1817.007, -2118.546, 16.390, 0.250);
    RemoveBuildingForPlayer(playerid, 1308, 1813.148, -2133.562, 12.750, 0.250);
    RemoveBuildingForPlayer(playerid, 712, 1796.703, -2080.968, 21.914, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1810.000, -2079.406, 9.671, 0.250);
    RemoveBuildingForPlayer(playerid, 1468, 1812.593, -2080.171, 13.757, 0.250);
    RemoveBuildingForPlayer(playerid, 4984, 1880.710, -2112.632, 21.257, 0.250);
	//29 DP Penha
	RemoveBuildingForPlayer(playerid, 3998, 1734.300, -1560.708, 18.881, 0.250);
	RemoveBuildingForPlayer(playerid, 4081, 1734.300, -1560.708, 18.881, 0.250);
	//Restaurante
	RemoveBuildingForPlayer(playerid, 759, 962.812, -1559.906, 20.835, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 967.062, -1559.906, 20.835, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 971.304, -1559.906, 20.835, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 975.546, -1559.906, 20.835, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 979.789, -1559.906, 20.835, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 984.039, -1559.906, 20.835, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 962.812, -1547.968, 20.835, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 967.062, -1547.968, 20.835, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 971.304, -1547.968, 20.835, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 975.546, -1547.968, 20.835, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 979.789, -1547.968, 20.835, 0.250);
	RemoveBuildingForPlayer(playerid, 759, 984.039, -1547.968, 20.835, 0.250);
	//Favela original
	RemoveBuildingForPlayer(playerid, 3560, 2187.343, -1470.414, 26.898, 0.250);
	RemoveBuildingForPlayer(playerid, 3559, 2185.656, -1419.718, 27.421, 0.250);
	RemoveBuildingForPlayer(playerid, 3562, 2189.812, -1443.132, 27.140, 0.250);
	RemoveBuildingForPlayer(playerid, 3563, 2192.296, -1404.273, 27.015, 0.250);
	RemoveBuildingForPlayer(playerid, 3562, 2232.398, -1464.796, 25.648, 0.250);
	RemoveBuildingForPlayer(playerid, 3562, 2247.531, -1464.796, 25.546, 0.250);
	RemoveBuildingForPlayer(playerid, 3562, 2263.718, -1464.796, 25.437, 0.250);
	RemoveBuildingForPlayer(playerid, 3562, 2243.710, -1401.781, 25.640, 0.250);
	RemoveBuildingForPlayer(playerid, 3562, 2230.609, -1401.781, 25.640, 0.250);
	RemoveBuildingForPlayer(playerid, 3562, 2256.664, -1401.781, 25.640, 0.250);
	RemoveBuildingForPlayer(playerid, 5582, 2187.312, -1510.304, 25.000, 0.250);
	RemoveBuildingForPlayer(playerid, 3563, 2186.398, -1487.828, 27.171, 0.250);
	RemoveBuildingForPlayer(playerid, 3561, 2186.718, -1455.687, 26.968, 0.250);
	RemoveBuildingForPlayer(playerid, 1527, 2182.234, -1467.898, 25.554, 0.250);
	RemoveBuildingForPlayer(playerid, 713, 2275.390, -1438.664, 22.554, 0.250);
	RemoveBuildingForPlayer(playerid, 713, 2256.164, -1508.046, 20.679, 0.250);
	RemoveBuildingForPlayer(playerid, 713, 2237.625, -1538.765, 18.687, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2229.023, -1411.640, 22.960, 0.250);
	RemoveBuildingForPlayer(playerid, 1264, 2224.984, -1408.906, 23.398, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2265.617, -1410.335, 21.773, 0.250);
	RemoveBuildingForPlayer(playerid, 1221, 2253.218, -1409.890, 23.632, 0.250);
	RemoveBuildingForPlayer(playerid, 3555, 2192.296, -1404.273, 27.015, 0.250);
	RemoveBuildingForPlayer(playerid, 1264, 2224.125, -1408.835, 23.398, 0.250);
	RemoveBuildingForPlayer(playerid, 1221, 2226.851, -1404.742, 23.632, 0.250);
	RemoveBuildingForPlayer(playerid, 1230, 2225.851, -1394.632, 23.304, 0.250);
	RemoveBuildingForPlayer(playerid, 1220, 2224.859, -1393.960, 23.304, 0.250);
	RemoveBuildingForPlayer(playerid, 1220, 2222.875, -1396.125, 23.304, 0.250);
	RemoveBuildingForPlayer(playerid, 1230, 2223.875, -1396.796, 23.304, 0.250);
	RemoveBuildingForPlayer(playerid, 1221, 2223.468, -1396.093, 23.375, 0.250);
	RemoveBuildingForPlayer(playerid, 3582, 2230.609, -1401.781, 25.640, 0.250);
	RemoveBuildingForPlayer(playerid, 1224, 2225.984, -1396.679, 23.531, 0.250);
	RemoveBuildingForPlayer(playerid, 1221, 2227.953, -1396.851, 23.375, 0.250);
	RemoveBuildingForPlayer(playerid, 3582, 2243.710, -1401.781, 25.640, 0.250);
	RemoveBuildingForPlayer(playerid, 645, 2237.531, -1395.484, 23.039, 0.250);
	RemoveBuildingForPlayer(playerid, 3582, 2256.664, -1401.781, 25.640, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2274.578, -1398.492, 22.507, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 2162.375, -1504.000, 23.054, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2159.765, -1507.625, 22.398, 0.250);
	RemoveBuildingForPlayer(playerid, 3110, 2167.812, -1518.195, 20.234, 0.250);
	RemoveBuildingForPlayer(playerid, 1224, 2173.234, -1503.078, 23.531, 0.250);
	RemoveBuildingForPlayer(playerid, 1220, 2172.453, -1501.968, 23.281, 0.250);
	RemoveBuildingForPlayer(playerid, 5565, 2171.453, -1448.421, 28.804, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2179.414, -1503.085, 24.164, 0.250);
	RemoveBuildingForPlayer(playerid, 5401, 2187.312, -1510.304, 25.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2186.734, -1503.085, 24.164, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 2194.054, -1504.390, 23.867, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 2202.500, -1506.781, 23.054, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 2179.429, -1500.312, 23.054, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2196.781, -1492.242, 24.445, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2201.710, -1485.593, 24.117, 0.250);
	RemoveBuildingForPlayer(playerid, 3555, 2186.398, -1487.828, 27.171, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2228.257, -1504.773, 22.250, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2262.421, -1499.062, 19.601, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2256.070, -1496.546, 19.601, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2179.921, -1478.710, 24.281, 0.250);
	RemoveBuildingForPlayer(playerid, 3557, 2187.343, -1470.414, 26.898, 0.250);
	RemoveBuildingForPlayer(playerid, 3556, 2186.718, -1455.687, 26.968, 0.250);
	RemoveBuildingForPlayer(playerid, 700, 2178.210, -1461.132, 24.828, 0.250);
	RemoveBuildingForPlayer(playerid, 1220, 2222.960, -1469.742, 23.195, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 2224.421, -1473.039, 22.804, 0.250);
	RemoveBuildingForPlayer(playerid, 1230, 2223.632, -1468.750, 23.195, 0.250);
	RemoveBuildingForPlayer(playerid, 1307, 2225.421, -1456.390, 23.117, 0.250);
	RemoveBuildingForPlayer(playerid, 1220, 2225.132, -1471.726, 23.195, 0.250);
	RemoveBuildingForPlayer(playerid, 1221, 2225.093, -1471.132, 23.273, 0.250);
	RemoveBuildingForPlayer(playerid, 3582, 2189.812, -1443.132, 27.140, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2183.703, -1441.484, 23.109, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2201.710, -1441.484, 24.117, 0.250);
	RemoveBuildingForPlayer(playerid, 645, 2200.820, -1447.343, 23.812, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2197.539, -1429.109, 23.507, 0.250);
	RemoveBuildingForPlayer(playerid, 3558, 2185.656, -1419.718, 27.421, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2201.078, -1421.617, 24.117, 0.250);
	RemoveBuildingForPlayer(playerid, 1224, 2225.679, -1468.617, 23.429, 0.250);
	RemoveBuildingForPlayer(playerid, 1230, 2225.796, -1470.726, 23.195, 0.250);
	RemoveBuildingForPlayer(playerid, 1221, 2225.851, -1466.648, 23.273, 0.250);
	RemoveBuildingForPlayer(playerid, 645, 2239.570, -1468.804, 22.687, 0.250);
	RemoveBuildingForPlayer(playerid, 3582, 2232.398, -1464.796, 25.648, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2241.890, -1458.929, 22.960, 0.250);
	RemoveBuildingForPlayer(playerid, 3582, 2247.531, -1464.796, 25.546, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2267.468, -1470.195, 21.718, 0.250);
	RemoveBuildingForPlayer(playerid, 3582, 2263.718, -1464.796, 25.437, 0.250);
	RemoveBuildingForPlayer(playerid, 1221, 2251.289, -1461.828, 23.632, 0.250);
	RemoveBuildingForPlayer(playerid, 1220, 2256.656, -1456.898, 22.859, 0.250);
	RemoveBuildingForPlayer(playerid, 1230, 2255.984, -1457.906, 22.859, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2227.203, -1444.500, 22.960, 0.250);
	RemoveBuildingForPlayer(playerid, 5682, 2241.429, -1433.671, 31.281, 0.250);
	RemoveBuildingForPlayer(playerid, 700, 2226.515, -1426.765, 23.117, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2243.570, -1423.609, 22.960, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2256.406, -1444.507, 23.101, 0.250);
	RemoveBuildingForPlayer(playerid, 3593, 2261.773, -1441.101, 23.500, 0.250);
	RemoveBuildingForPlayer(playerid, 3593, 2265.078, -1424.476, 23.500, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2288.976, -1502.312, 23.367, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2311.265, -1500.789, 22.765, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2324.273, -1500.867, 23.367, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2318.195, -1500.867, 23.367, 0.250);
	//Desmanche
	RemoveBuildingForPlayer(playerid, 3414, 2351.830, -652.921, 129.188, 0.250);
	RemoveBuildingForPlayer(playerid, 3421, 2351.830, -652.921, 129.188, 0.250);
	//Willowfield
	RemoveBuildingForPlayer(playerid, 3699, 2471.671, -1428.132, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 3699, 2490.695, -1428.132, 30.515, 0.250);
	RemoveBuildingForPlayer(playerid, 3699, 2490.695, -1413.898, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 3699, 2471.671, -1413.898, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 3699, 2490.695, -1395.265, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 3699, 2471.671, -1395.265, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 3699, 2490.695, -1379.828, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 3699, 2471.671, -1379.828, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 3699, 2490.695, -1362.656, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 3699, 2471.671, -1362.656, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2463.210, -1433.117, 27.476, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2463.070, -1374.828, 27.132, 0.250);
	RemoveBuildingForPlayer(playerid, 700, 2462.710, -1386.179, 27.859, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 2462.320, -1357.484, 27.312, 0.250);
	RemoveBuildingForPlayer(playerid, 3698, 2471.671, -1428.132, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 3698, 2471.671, -1413.898, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 3698, 2471.671, -1395.265, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 3698, 2471.671, -1379.828, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 2483.796, -1422.718, 27.992, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2481.695, -1431.515, 27.000, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 2483.593, -1384.953, 27.960, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2485.546, -1372.554, 27.445, 0.250);
	RemoveBuildingForPlayer(playerid, 3698, 2490.695, -1428.132, 30.515, 0.250);
	RemoveBuildingForPlayer(playerid, 3698, 2490.695, -1413.898, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2499.812, -1419.570, 23.992, 0.250);
	RemoveBuildingForPlayer(playerid, 3698, 2490.695, -1395.265, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 3698, 2490.695, -1379.828, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2496.601, -1369.960, 27.132, 0.250);
	RemoveBuildingForPlayer(playerid, 3698, 2471.671, -1362.656, 30.812, 0.250);
	RemoveBuildingForPlayer(playerid, 17528, 2484.976, -1357.835, 28.750, 0.250);
	RemoveBuildingForPlayer(playerid, 1308, 2484.093, -1357.320, 27.992, 0.250);
	RemoveBuildingForPlayer(playerid, 700, 2481.101, -1360.007, 27.859, 0.250);
	RemoveBuildingForPlayer(playerid, 3698, 2490.695, -1362.656, 30.812, 0.250);
    //Shopping
	RemoveBuildingForPlayer(playerid, 6130, 1117.5859, -1490.0078, 32.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 6255, 1117.5859, -1490.0078, 32.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1050.1328, -1566.4375, 12.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1117.6094, -1536.9766, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1111.5625, -1533.9609, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1105.6016, -1531.1563, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1141.5781, -1566.4375, 12.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1190.2578, -1545.6016, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1137.9297, -1537.0625, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1143.7891, -1534.7031, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1148.6016, -1532.2578, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1097.4766, -1523.9766, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1093.4219, -1519.8281, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1089.5781, -1515.7891, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1087.1953, -1510.4922, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1084.9688, -1504.4219, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1101.1406, -1527.9688, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1128.7344, -1518.4922, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1111.2578, -1512.3594, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1077.8594, -1499.8672, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1083.6719, -1499.4922, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1106.4375, -1501.3750, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1134.0781, -1500.3750, 22.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1123.2500, -1500.5313, 22.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1124.3672, -1476.9844, 22.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1133.2266, -1476.2266, 22.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1144.3984, -1512.7891, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1152.3828, -1502.5391, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1153.5391, -1529.8047, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1157.8203, -1525.4844, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1161.3281, -1521.5781, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1165.1563, -1517.2109, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1167.7813, -1513.1797, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1169.1641, -1509.3359, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1170.8047, -1503.5547, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1190.2578, -1503.3906, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1467.4688, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 955, 1154.7266, -1460.8906, 15.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1467.4688, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1456.4375, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1456.4375, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1445.1016, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1445.1016, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1434.0703, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1434.0703, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1190.2578, -1458.7344, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1190.2578, -1426.3516, 12.6641, 0.25);
	//RM
	RemoveBuildingForPlayer(playerid, 5418, 2112.938, -1797.088, 19.334, 0.250);
	RemoveBuildingForPlayer(playerid, 5530, 2112.938, -1797.088, 19.334, 0.250);
	RemoveBuildingForPlayer(playerid, 1522, 2105.919, -1807.250, 12.515, 0.250);

	for(new i = 0; i < 50; i++) //CaminhaoSyst
	{
		VendoTPDA[playerid][i] = -1;
		VendoMDCP[playerid][i] = -1;
		VendoMultas[playerid][i] = 0;
	}

	progress_bar[playerid] = CreateProgressBar(278.00, 379.00, 84.50, 7.50, COLOR_WHITE, 100.0);

	//==========================================================================
	//              Text Draw For Player
	//==========================================================================
	PlayerConectCriarTexts(playerid);


     // DEBUG
   	//CancelSelectTextDraw(playerid);
	// DEBUG

    //basket_OnPlayerConnect(playerid);
    Horse_OnPlayerConnect(playerid);

    SenhaErrada[playerid] = 0;

	PlayerInfo[playerid][pLogado] = 0;
	SetPlayerColor(playerid, 0xFFFFFFFF);
	//SetPlayerColor(playerid, 0x0000001D); original

	new query[256], name[MAX_PLAYER_NAME];
	TogglePlayerSpectating(playerid, 1);
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	GetPlayerName(playerid, Nickname[playerid], MAX_PLAYER_NAME);
	format(query, sizeof(query),"SELECT * FROM `accounts` WHERE `Username` = '%s'", name);
	mysql_tquery(Pipeline, query, "CheckingAccount", "i", playerid);
	SendClientMessage(playerid, COLOR_YELLOW, "[SERVER]: Realizando atualizações necessárias para jogar no servidor.");

	cNametag[playerid] = CreateDynamic3DTextLabel("Loading nametag...", 0xFFFFFFFF, 0.0, 0.0, 0.1, NT_DISTANCE, .attachedplayer = playerid, .testlos = 1);

	return 1;
}

stock GetSeconds(seconds)
{
	seconds = seconds * 1000;
	return seconds;
}

public OnPlayerFinishedDownloading(playerid, virtualworld)
{
    if (IsPlayerNPC(playerid)) return 1;
	if(!PlayerInfo[playerid][pLogado])
	{
	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "[SERVIDOR] Downloads finalizados, você já pode se logar.");
	    new query[256], name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, MAX_PLAYER_NAME);
		GetPlayerName(playerid, Nickname[playerid], MAX_PLAYER_NAME);
	    format(query, sizeof(query),"SELECT * FROM `accounts` WHERE `Username` = '%s'", name);
	}
    return 1;
}
//COM UCP
/*forward CheckingAccount(playerid);
public CheckingAccount(playerid)
{
	LimparChat(playerid);

    TogglePlayerControllable(playerid,false);
	SetPlayerPos(playerid, 1741.3394, -1875.1597, 13.5859);

    InterpolateCameraPos(playerid, 2119.1499, -491.2563, 122.1350, 2220.1875, -178.1629, 68.8067, GetSeconds(60), CAMERA_MOVE);
    InterpolateCameraLookAt(playerid, 2119.4563, -490.3004, 121.9445, 2220.4978, -177.2082, 68.4912, GetSeconds(60), CAMERA_MOVE);

	new rows, fields;
	cache_get_data(rows, fields, Pipeline);
	if(rows)
	{
		LoginSeconds[playerid] = 50000;
		TelaDeLogin[playerid] = 1;
		new tmp[130];
  		cache_get_field_content(0, "ID", tmp); 			PlayerInfo[playerid][pID] = strval(tmp);
		cache_get_field_content(0, "Password", tmp);	format(PlayerInfo[playerid][pPassword], 129, "%s", tmp);
		cache_get_field_content(0, "ucpOwn", tmp);	    PlayerInfo[playerid][pucpOwn] = strval(tmp);

		new JaEstaOn = 0;
		for(new di = 0; di < MAX_PLAYERS; di++) {
		    if(IsPlayerConnected(di)) {
			    if(playerid != di) {
			    	if(PlayerInfo[playerid][pID] == PlayerInfo[di][pID]) {
			        	JaEstaOn = 1;
						break;
					}
					if(PlayerInfo[playerid][pucpOwn] == PlayerInfo[di][pucpOwn]) {
					    JaEstaOn = di+100;
					    break;
					}
			    }
			}
		}

		if(JaEstaOn == 0) {
		    new escapedPlayerName[MAX_PLAYER_NAME];
		    mysql_real_escape_string(GetName(playerid), escapedPlayerName);
			new str[250];
			format(str, sizeof(str), "SERVER: Você só pode errar sua senha três (3) vezes.\n INFO: Nosso UCP é o https://cp-frp.com.br.com\n acesse-o para mais informações sobre sua conta.\n\n        Digite sua senha:");
			ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Capital Paulista Full Roleplay", str, "Autenticar", "Cancelar");
			PlayerTextDrawShow(playerid, TelaLogin[playerid][0]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][1]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][3]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][4]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][5]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][6]);
		}
		else if(JaEstaOn == 1) {
		    new strdebug[56];
			format(strdebug,126,"ERRO: O seu personagem %s, já está logado... Caso estranhe isto, contate um administrador.", GetName(playerid));
			SendClientMessage(playerid, COLOR_LIGHTRED, strdebug);
			SetTimerEx("TimerKick", 7000, 0, "d", playerid);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][0]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][1]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][3]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][4]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][5]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][6]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][8]);
		}
		else {
		    new strdebug[56];
		    new pppid = (JaEstaOn-100);
			format(strdebug,126,"ERRO: Algum outro personagem de sua UCP já está logado no servidor.. (Personagem: %s)", GetName(pppid));
			SendClientMessage(playerid, COLOR_LIGHTRED, strdebug);
			SetTimerEx("TimerKick", 7000, 0, "d", playerid);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][0]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][1]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][3]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][4]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][5]);
		}
	}
	else
	{
	    new str[256];
		format(str, sizeof(str), "\nOlá %s.\nA sua conta não existe, por favor dirija-se ao UCP para criar um personagem\nAtente-se as regras no nosso fórum também.\nUCP: https://cp-frp.com.br.com/ucp\nFórum: https://cp-frp.com.br.com\n", GetName(playerid));
  		ShowPlayerDialog(playerid, 999999, DIALOG_STYLE_MSGBOX, "Capital Paulista Full Roleplay - Informação", str, "Fechar", "");
		PlayerTextDrawShow(playerid, TelaLogin[playerid][0]);
		PlayerTextDrawShow(playerid, TelaLogin[playerid][1]);
		PlayerTextDrawShow(playerid, TelaLogin[playerid][2]);
		PlayerTextDrawShow(playerid, TelaLogin[playerid][3]);
		PlayerTextDrawShow(playerid, TelaLogin[playerid][4]);
		PlayerTextDrawShow(playerid, TelaLogin[playerid][5]);
		SetTimerEx("TimerKick", 30, 0, "d", playerid);

	}
	return 1;

}*/
// SEM UCP
forward CheckingAccount(playerid);
public CheckingAccount(playerid)
{
	LimparChat(playerid);

    TogglePlayerControllable(playerid,false);
	SetPlayerPos(playerid, 1741.3394, -1875.1597, 13.5859);

	InterpolateCameraPos(playerid, 2482.030517, -1100.739501, 52.487133, 2482.030517, -1100.739501, 52.487133, GetSeconds(60), CAMERA_MOVE);
	InterpolateCameraLookAt(playerid, 2477.113769, -1099.987792, 51.976806, 2477.113769, -1099.987792, GetSeconds(60), CAMERA_MOVE);
	
	new rows, fields;
	cache_get_data(rows, fields, Pipeline);
	
	if(rows)
	{
		LoginSeconds[playerid] = 60000;
		TelaDeLogin[playerid] = 1;
		new tmp[130];
  		cache_get_field_content(0, "ID", tmp); 			PlayerInfo[playerid][pID] = strval(tmp);
		cache_get_field_content(0, "Password", tmp);	format(PlayerInfo[playerid][pPassword], 129, "%s", tmp);
		
		new JaEstaOn = 0;
		for(new di = 0; di < MAX_PLAYERS; di++)
		{
		    if(IsPlayerConnected(di))
        	{
			    if(playerid != di)
			    {
			    	if(PlayerInfo[playerid][pID] == PlayerInfo[di][pID])
			    	{
			        	JaEstaOn = 1;
						break;
					}
			    }
			}
		}
		
		if(JaEstaOn == 0)
		{
		    new escapedPlayerName[MAX_PLAYER_NAME];
		    mysql_real_escape_string(GetName(playerid), escapedPlayerName);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][0]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][1]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][3]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][4]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][5]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][6]);
			new str[1024];
			format(str, sizeof(str), "SERVER: Você só pode errar sua senha três (3) vezes.\n INFO: Nosso FÓRUM é o http://forum.cp-frp.com.br\n acesse-o para mais informações sobre sua conta.\n\n        Digite sua senha:");
			ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Capital Paulista Full Roleplay", str, "Autenticar", "Cancelar");
		}
		else
		{
			PlayerTextDrawShow(playerid, TelaLogin[playerid][0]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][1]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][3]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][4]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][5]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][6]);
			PlayerTextDrawShow(playerid, TelaLogin[playerid][8]);
		    new strdebug[56];
			format(strdebug,126,"ERRO: O seu personagem %s, já está logado... Caso estranhe isto, contate um administrador.", GetName(playerid));
			SendClientMessage(playerid, COLOR_LIGHTRED, strdebug);
			SetTimerEx("TimerKick", 7000, 0, "d", playerid);
		}
	}
	else
	{
		PlayerTextDrawShow(playerid, TelaLogin[playerid][0]);
		PlayerTextDrawShow(playerid, TelaLogin[playerid][1]);
		PlayerTextDrawShow(playerid, TelaLogin[playerid][3]);
		PlayerTextDrawShow(playerid, TelaLogin[playerid][4]);
		PlayerTextDrawShow(playerid, TelaLogin[playerid][5]);
	    new str[126];
		format(str, sizeof(str), "Olá %s.\nBem vindo ao Capital Paulista Full Roleplay. Por favor entre com uma senha para registrar-se.", GetName(playerid));
  		ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT, "Registrar", str, "Registrar", "Sair");
	}
}


forward PlayerConectCriarTexts(playerid);
public PlayerConectCriarTexts(playerid)
{

    Textdraw49[playerid] = TextDrawCreate(33.000, 700.000, " "); // area
	TextDrawAlignment(Textdraw49[playerid], 2);
	TextDrawBackgroundColor(Textdraw49[playerid], 255);
	TextDrawFont(Textdraw49[playerid], 2);
	TextDrawLetterSize(Textdraw49[playerid],0.280000, 1.100000);
	TextDrawColor(Textdraw49[playerid], -1);
	TextDrawSetOutline(Textdraw49[playerid], 1);
	TextDrawSetProportional(Textdraw49[playerid], 1);

	Wheels[playerid][0] = CreatePlayerTextDraw(playerid, 132.000000, 147.125000, "box");
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][0], 0.000000, 21.299993);
  	PlayerTextDrawTextSize(playerid, Wheels[playerid][0], 534.500000, 0.000000);
   	PlayerTextDrawAlignment(playerid, Wheels[playerid][0], 1);
   	PlayerTextDrawColor(playerid, Wheels[playerid][0], -1);
    PlayerTextDrawUseBox(playerid, Wheels[playerid][0], 1);
    PlayerTextDrawBoxColor(playerid, Wheels[playerid][0], 95);
    PlayerTextDrawSetShadow(playerid, Wheels[playerid][0], 0);
    PlayerTextDrawSetOutline(playerid, Wheels[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][0], 255);
    PlayerTextDrawFont(playerid, Wheels[playerid][0], 1);
    PlayerTextDrawSetProportional(playerid, Wheels[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid, Wheels[playerid][0], 0);

	Wheels[playerid][1] = CreatePlayerTextDraw(playerid, 260.500000, 151.500000, "box");
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][1], 0.000000, 2.150000);
    PlayerTextDrawTextSize(playerid, Wheels[playerid][1], 388.000000, 0.000000);
    PlayerTextDrawAlignment(playerid, Wheels[playerid][1], 1);
    PlayerTextDrawColor(playerid, Wheels[playerid][1], -1);
    PlayerTextDrawUseBox(playerid, Wheels[playerid][1], 1);
    PlayerTextDrawBoxColor(playerid, Wheels[playerid][1], 95);
    PlayerTextDrawSetShadow(playerid, Wheels[playerid][1], 0);
    PlayerTextDrawSetOutline(playerid, Wheels[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][1], 255);
    PlayerTextDrawFont(playerid, Wheels[playerid][1], 1);
    PlayerTextDrawSetProportional(playerid, Wheels[playerid][1], 1);
    PlayerTextDrawSetShadow(playerid, Wheels[playerid][1], 0);

	Wheels[playerid][2] = CreatePlayerTextDraw(playerid, 281.000000, 154.125000, "MENU_DE_RODAS");
	PlayerTextDrawLetterSize(playerid, Wheels[playerid][2], 0.388000, 1.486250);
	PlayerTextDrawAlignment(playerid, Wheels[playerid][2], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][2], -1);
  	PlayerTextDrawSetShadow(playerid, Wheels[playerid][2], 0);
   	PlayerTextDrawSetOutline(playerid, Wheels[playerid][2], -1);
    PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][2], 255);
    PlayerTextDrawFont(playerid, Wheels[playerid][2], 1);
    PlayerTextDrawSetProportional(playerid, Wheels[playerid][2], 1);
    PlayerTextDrawSetShadow(playerid, Wheels[playerid][2], 0);

	Wheels[playerid][3] = CreatePlayerTextDraw(playerid, 170.000000, 176.437500, ""); // 1073
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][3], 0.000000, 0.000000);
 	PlayerTextDrawTextSize(playerid, Wheels[playerid][3], 43.500000, 41.437500);
 	PlayerTextDrawAlignment(playerid, Wheels[playerid][3], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][3], -1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][3], 0);
  	PlayerTextDrawSetOutline(playerid, Wheels[playerid][3], 0);
   	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][3], 0);
    PlayerTextDrawFont(playerid, Wheels[playerid][3], 5);
    PlayerTextDrawSetProportional(playerid, Wheels[playerid][3], 1);
    PlayerTextDrawSetShadow(playerid, Wheels[playerid][3], 0);
    PlayerTextDrawSetSelectable(playerid, Wheels[playerid][3], true);
    PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][3], 1073);
    PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][3], 0.000000, 0.000000, 90.000000, 1.000000);

	Wheels[playerid][4] = CreatePlayerTextDraw(playerid, 241.500000, 175.125000, ""); //1074
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][4], 0.000000, 0.000000);
  	PlayerTextDrawTextSize(playerid, Wheels[playerid][4], 43.500000, 41.437500);
  	PlayerTextDrawAlignment(playerid, Wheels[playerid][4], 1);
  	PlayerTextDrawColor(playerid, Wheels[playerid][4], -1);
  	PlayerTextDrawSetShadow(playerid, Wheels[playerid][4], 0);
   	PlayerTextDrawSetOutline(playerid, Wheels[playerid][4], 0);
   	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][4], 0);
	PlayerTextDrawFont(playerid, Wheels[playerid][4], 5);
 	PlayerTextDrawSetProportional(playerid, Wheels[playerid][4], 1);
    PlayerTextDrawSetShadow(playerid, Wheels[playerid][4], 0);
    PlayerTextDrawSetSelectable(playerid, Wheels[playerid][4], true);
    PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][4], 1074);
    PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][4], 0.000000, 0.000000, 90.000000, 1.000000);

	Wheels[playerid][5] = CreatePlayerTextDraw(playerid, 313.000000, 176.000000, ""); //1075
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][5], 0.000000, 0.000000);
  	PlayerTextDrawTextSize(playerid, Wheels[playerid][5], 43.500000, 41.437500);
   	PlayerTextDrawAlignment(playerid, Wheels[playerid][5], 1);
   	PlayerTextDrawColor(playerid, Wheels[playerid][5], -1);
   	PlayerTextDrawSetShadow(playerid, Wheels[playerid][5], 0);
   	PlayerTextDrawSetOutline(playerid, Wheels[playerid][5], 0);
    PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][5], 0);
    PlayerTextDrawFont(playerid, Wheels[playerid][5], 5);
    PlayerTextDrawSetProportional(playerid, Wheels[playerid][5], 1);
    PlayerTextDrawSetShadow(playerid, Wheels[playerid][5], 0);
    PlayerTextDrawSetSelectable(playerid, Wheels[playerid][5], true);
    PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][5], 1075);
    PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][5], 0.000000, 0.000000, 90.000000, 1.000000);

	Wheels[playerid][6] = CreatePlayerTextDraw(playerid, 385.000000, 174.250000, "");//1076
	PlayerTextDrawLetterSize(playerid, Wheels[playerid][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, Wheels[playerid][6], 43.500000, 41.437500);
	PlayerTextDrawAlignment(playerid, Wheels[playerid][6], 1);
	PlayerTextDrawColor(playerid, Wheels[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, Wheels[playerid][6], 0);
 	PlayerTextDrawSetOutline(playerid, Wheels[playerid][6], 0);
  	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][6], 0);
   	PlayerTextDrawFont(playerid, Wheels[playerid][6], 5);
    PlayerTextDrawSetProportional(playerid, Wheels[playerid][6], 1);
    PlayerTextDrawSetShadow(playerid, Wheels[playerid][6], 0);
    PlayerTextDrawSetSelectable(playerid, Wheels[playerid][6], true);
    PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][6], 1076);
    PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][6], 0.000000, 0.000000, 90.000000, 1.000000);

	Wheels[playerid][7] = CreatePlayerTextDraw(playerid, 457.500000, 174.250000, ""); //1077
	PlayerTextDrawLetterSize(playerid, Wheels[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, Wheels[playerid][7], 43.500000, 41.437500);
	PlayerTextDrawAlignment(playerid, Wheels[playerid][7], 1);
	PlayerTextDrawColor(playerid, Wheels[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, Wheels[playerid][7], 0);
 	PlayerTextDrawSetOutline(playerid, Wheels[playerid][7], 0);
 	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][7], 0);
 	PlayerTextDrawFont(playerid, Wheels[playerid][7], 5);
 	PlayerTextDrawSetProportional(playerid, Wheels[playerid][7], 1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][7], 0);
 	PlayerTextDrawSetSelectable(playerid, Wheels[playerid][7], true);
  	PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][7], 1077);
   	PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][7], 0.000000, 0.000000, 90.000000, 1.000000);

	Wheels[playerid][8] = CreatePlayerTextDraw(playerid, 168.000000, 224.562500, ""); //1078
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][8], 0.000000, 0.000000);
 	PlayerTextDrawTextSize(playerid, Wheels[playerid][8], 43.500000, 41.437500);
 	PlayerTextDrawAlignment(playerid, Wheels[playerid][8], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][8], -1);
  	PlayerTextDrawSetShadow(playerid, Wheels[playerid][8], 0);
   	PlayerTextDrawSetOutline(playerid, Wheels[playerid][8], 0);
   	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][8], 0);
   	PlayerTextDrawFont(playerid, Wheels[playerid][8], 5);
   	PlayerTextDrawSetProportional(playerid, Wheels[playerid][8], 1);
   	PlayerTextDrawSetShadow(playerid, Wheels[playerid][8], 0);
   	PlayerTextDrawSetSelectable(playerid, Wheels[playerid][8], true);
   	PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][8], 1078);
   	PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][8], 0.000000, 0.000000, 90.000000, 1.000000);

	Wheels[playerid][9] = CreatePlayerTextDraw(playerid, 241.000000, 223.687500, "");  //1079
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][9], 0.000000, 0.000000);
 	PlayerTextDrawTextSize(playerid, Wheels[playerid][9], 43.500000, 41.437500);
 	PlayerTextDrawAlignment(playerid, Wheels[playerid][9], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][9], -1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][9], 0);
 	PlayerTextDrawSetOutline(playerid, Wheels[playerid][9], 0);
 	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][9], 0);
 	PlayerTextDrawFont(playerid, Wheels[playerid][9], 5);
  	PlayerTextDrawSetProportional(playerid, Wheels[playerid][9], 1);
   	PlayerTextDrawSetShadow(playerid, Wheels[playerid][9], 0);
   	PlayerTextDrawSetSelectable(playerid, Wheels[playerid][9], true);
   	PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][9], 1079);
   	PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][9], 0.000000, 0.000000, 90.000000, 1.000000);

	Wheels[playerid][10] = CreatePlayerTextDraw(playerid, 312.500000, 224.562500, "");  //1080
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][10], 0.000000, 0.000000);
 	PlayerTextDrawTextSize(playerid, Wheels[playerid][10], 43.500000, 41.437500);
 	PlayerTextDrawAlignment(playerid, Wheels[playerid][10], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][10], -1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][10], 0);
 	PlayerTextDrawSetOutline(playerid, Wheels[playerid][10], 0);
 	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][10], 0);
 	PlayerTextDrawFont(playerid, Wheels[playerid][10], 5);
 	PlayerTextDrawSetProportional(playerid, Wheels[playerid][10], 1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][10], 0);
 	PlayerTextDrawSetSelectable(playerid, Wheels[playerid][10], true);
 	PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][10], 1080);
 	PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][10], 0.000000, 0.000000, 90.000000, 1.000000);

 	Wheels[playerid][11] = CreatePlayerTextDraw(playerid, 386.000000, 223.687500, "");  //1081
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][11], 0.000000, 0.000000);
 	PlayerTextDrawTextSize(playerid, Wheels[playerid][11], 43.500000, 41.437500);
 	PlayerTextDrawAlignment(playerid, Wheels[playerid][11], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][11], -1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][11], 0);
 	PlayerTextDrawSetOutline(playerid, Wheels[playerid][11], 0);
 	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][11], 0);
 	PlayerTextDrawFont(playerid, Wheels[playerid][11], 5);
 	PlayerTextDrawSetProportional(playerid, Wheels[playerid][11], 1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][11], 0);
 	PlayerTextDrawSetSelectable(playerid, Wheels[playerid][11], true);
 	PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][11], 1081);
 	PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][11], 0.000000, 0.000000, 90.000000, 1.000000);

 	Wheels[playerid][12] = CreatePlayerTextDraw(playerid, 458.000000, 222.375000, ""); //1082
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][12], 0.000000, 0.000000);
 	PlayerTextDrawTextSize(playerid, Wheels[playerid][12], 43.500000, 41.437500);
 	PlayerTextDrawAlignment(playerid, Wheels[playerid][12], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][12], -1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][12], 0);
 	PlayerTextDrawSetOutline(playerid, Wheels[playerid][12], 0);
 	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][12], 0);
 	PlayerTextDrawFont(playerid, Wheels[playerid][12], 5);
 	PlayerTextDrawSetProportional(playerid, Wheels[playerid][12], 1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][12], 0);
 	PlayerTextDrawSetSelectable(playerid, Wheels[playerid][12], true);
 	PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][12], 1082);
 	PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][12], 0.000000, 0.000000, 90.000000, 1.000000);

 	Wheels[playerid][13] = CreatePlayerTextDraw(playerid, 168.500000, 276.187500, ""); //1083
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][13], 0.000000, 0.000000);
 	PlayerTextDrawTextSize(playerid, Wheels[playerid][13], 43.500000, 41.437500);
 	PlayerTextDrawAlignment(playerid, Wheels[playerid][13], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][13], -1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][13], 0);
 	PlayerTextDrawSetOutline(playerid, Wheels[playerid][13], 0);
 	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][13], 0);
 	PlayerTextDrawFont(playerid, Wheels[playerid][13], 5);
 	PlayerTextDrawSetProportional(playerid, Wheels[playerid][13], 1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][13], 0);
 	PlayerTextDrawSetSelectable(playerid, Wheels[playerid][13], true);
 	PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][13], 1083);
 	PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][13], 0.000000, 0.000000, 90.000000, 1.000000);

 	Wheels[playerid][14] = CreatePlayerTextDraw(playerid, 242.000000, 275.750000, ""); //1084
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][14], 0.000000, 0.000000);
 	PlayerTextDrawTextSize(playerid, Wheels[playerid][14], 43.500000, 41.437500);
 	PlayerTextDrawAlignment(playerid, Wheels[playerid][14], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][14], -1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][14], 0);
 	PlayerTextDrawSetOutline(playerid, Wheels[playerid][14], 0);
 	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][14], 0);
 	PlayerTextDrawFont(playerid, Wheels[playerid][14], 5);
 	PlayerTextDrawSetProportional(playerid, Wheels[playerid][14], 1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][14], 0);
 	PlayerTextDrawSetSelectable(playerid, Wheels[playerid][14], true);
 	PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][14], 1084);
 	PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][14], 0.000000, 0.000000, 90.000000, 1.000000);

 	Wheels[playerid][15] = CreatePlayerTextDraw(playerid, 314.000000, 276.625000, ""); //1085
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][15], 0.000000, 0.000000);
 	PlayerTextDrawTextSize(playerid, Wheels[playerid][15], 43.500000, 41.437500);
 	PlayerTextDrawAlignment(playerid, Wheels[playerid][15], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][15], -1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][15], 0);
 	PlayerTextDrawSetOutline(playerid, Wheels[playerid][15], 0);
 	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][15], 0);
 	PlayerTextDrawFont(playerid, Wheels[playerid][15], 5);
 	PlayerTextDrawSetProportional(playerid, Wheels[playerid][15], 1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][15], 0);
 	PlayerTextDrawSetSelectable(playerid, Wheels[playerid][15], true);
 	PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][15], 1085);
 	PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][15], 0.000000, 0.000000, 90.000000, 1.000000);

 	Wheels[playerid][16] = CreatePlayerTextDraw(playerid, 170.000000, 176.437500, ""); // 1025 V2--------
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][16], 0.000000, 0.000000);
 	PlayerTextDrawTextSize(playerid, Wheels[playerid][16], 43.500000, 41.437500);
 	PlayerTextDrawAlignment(playerid, Wheels[playerid][16], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][16], -1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][16], 0);
 	PlayerTextDrawSetOutline(playerid, Wheels[playerid][16], 0);
 	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][16], 0);
 	PlayerTextDrawFont(playerid, Wheels[playerid][16], 5);
 	PlayerTextDrawSetProportional(playerid, Wheels[playerid][16], 1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][16], 0);
 	PlayerTextDrawSetSelectable(playerid, Wheels[playerid][16], true);
 	PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][16], 1025);
 	PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][16], 0.000000, 0.000000, 90.000000, 1.000000);

 	Wheels[playerid][17] = CreatePlayerTextDraw(playerid, 241.500000, 175.125000, ""); //1096 V2--------
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][17], 0.000000, 0.000000);
 	PlayerTextDrawTextSize(playerid, Wheels[playerid][17], 43.500000, 41.437500);
 	PlayerTextDrawAlignment(playerid, Wheels[playerid][17], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][17], -1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][17], 0);
 	PlayerTextDrawSetOutline(playerid, Wheels[playerid][17], 0);
 	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][17], 0);
 	PlayerTextDrawFont(playerid, Wheels[playerid][17], 5);
 	PlayerTextDrawSetProportional(playerid, Wheels[playerid][17], 1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][17], 0);
 	PlayerTextDrawSetSelectable(playerid, Wheels[playerid][17], true);
 	PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][17], 1096);
 	PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][17], 0.000000, 0.000000, 90.000000, 1.000000);

 	Wheels[playerid][18] = CreatePlayerTextDraw(playerid, 313.000000, 176.000000, "");
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][18], 0.000000, 0.000000); // 1097 V2--------
 	PlayerTextDrawTextSize(playerid, Wheels[playerid][18], 43.500000, 41.437500);
 	PlayerTextDrawAlignment(playerid, Wheels[playerid][18], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][18], -1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][18], 0);
 	PlayerTextDrawSetOutline(playerid, Wheels[playerid][18], 0);
 	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][18], 0);
 	PlayerTextDrawFont(playerid, Wheels[playerid][18], 5);
 	PlayerTextDrawSetProportional(playerid, Wheels[playerid][18], 1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][18], 0);
 	PlayerTextDrawSetSelectable(playerid, Wheels[playerid][18], true);
 	PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][18], 1097);
 	PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][18], 0.000000, 0.000000, 90.000000, 1.000000);

 	Wheels[playerid][19] = CreatePlayerTextDraw(playerid, 385.000000, 174.250000, ""); //1098 V2--------
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][19], 0.000000, 0.000000);
 	PlayerTextDrawTextSize(playerid, Wheels[playerid][19], 43.500000, 41.437500);
 	PlayerTextDrawAlignment(playerid, Wheels[playerid][19], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][19], -1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][19], 0);
 	PlayerTextDrawSetOutline(playerid, Wheels[playerid][19], 0);
 	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][19], 0);
 	PlayerTextDrawFont(playerid, Wheels[playerid][19], 5);
 	PlayerTextDrawSetProportional(playerid, Wheels[playerid][19], 1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][19], 0);
 	PlayerTextDrawSetSelectable(playerid, Wheels[playerid][19], true);
 	PlayerTextDrawSetPreviewModel(playerid, Wheels[playerid][19], 1098);
 	PlayerTextDrawSetPreviewRot(playerid, Wheels[playerid][19], 0.000000, 0.000000, 90.000000, 1.000000);

 	Wheels[playerid][20] = CreatePlayerTextDraw(playerid, 437.500000, 312.500000, "box");
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][20], 0.000000, 1.549998);
 	PlayerTextDrawTextSize(playerid, Wheels[playerid][20], 506.000000, 0.000000);
 	PlayerTextDrawAlignment(playerid, Wheels[playerid][20], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][20], -1);
 	PlayerTextDrawUseBox(playerid, Wheels[playerid][20], 1);
 	PlayerTextDrawBoxColor(playerid, Wheels[playerid][20], 95);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][20], 0);
 	PlayerTextDrawSetOutline(playerid, Wheels[playerid][20], 0);
 	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][20], 255);
 	PlayerTextDrawFont(playerid, Wheels[playerid][20], 1);
 	PlayerTextDrawSetProportional(playerid, Wheels[playerid][20], 1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][20], 0);

 	Wheels[playerid][21] = CreatePlayerTextDraw(playerid, 454.500000, 312.500000, "FECHAR");
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][21], 0.265498, 1.385625);
 	PlayerTextDrawAlignment(playerid, Wheels[playerid][21], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][21], -1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][21], 0);
 	PlayerTextDrawSetOutline(playerid, Wheels[playerid][21], 0);
 	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][21], 255);
 	PlayerTextDrawFont(playerid, Wheels[playerid][21], 2);
 	PlayerTextDrawSetProportional(playerid, Wheels[playerid][21], 1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][21], 0);
 	PlayerTextDrawSetSelectable(playerid, Wheels[playerid][21], true);

 	Wheels[playerid][22] = CreatePlayerTextDraw(playerid, 477.000000, 155.000000, "Prox ~g~>"); // V2--------
 	PlayerTextDrawLetterSize(playerid, Wheels[playerid][22], 0.250999, 1.066249);
 	PlayerTextDrawAlignment(playerid, Wheels[playerid][22], 1);
 	PlayerTextDrawColor(playerid, Wheels[playerid][22], -1);
 	PlayerTextDrawSetShadow(playerid, Wheels[playerid][22], 0);
 	PlayerTextDrawSetOutline(playerid, Wheels[playerid][22], 0);
 	PlayerTextDrawBackgroundColor(playerid, Wheels[playerid][22], 255);
 	PlayerTextDrawFont(playerid, Wheels[playerid][22], 1);
 	PlayerTextDrawSetProportional(playerid, Wheels[playerid][22], 1);
	PlayerTextDrawSetShadow(playerid, Wheels[playerid][22], 0);
	PlayerTextDrawSetSelectable(playerid, Wheels[playerid][22], true);

	Speedo[playerid] =  CreatePlayerTextDraw(playerid,168.000000, 408.000000, "0 km/h");
    PlayerTextDrawFont(playerid, Speedo[playerid], 3);
    PlayerTextDrawLetterSize(playerid, Speedo[playerid], 0.380000, 1.100000);
    PlayerTextDrawColor(playerid, Speedo[playerid], -1);
    PlayerTextDrawSetOutline(playerid, Speedo[playerid], 1);
    PlayerTextDrawSetProportional(playerid, Speedo[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, Speedo[playerid], 0);

	ClickTD[playerid] = CreatePlayerTextDraw(playerid, 274.666900, 328.035888, "PREPARADO!!!");
	PlayerTextDrawLetterSize(playerid, ClickTD[playerid], 0.627333, 2.919111);
	PlayerTextDrawAlignment(playerid, ClickTD[playerid], 1);
	PlayerTextDrawColor(playerid, ClickTD[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ClickTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ClickTD[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ClickTD[playerid], 51);
	PlayerTextDrawFont(playerid, ClickTD[playerid], 2);
	PlayerTextDrawSetProportional(playerid, ClickTD[playerid], 1);

    TelaLogin[playerid][0] = CreatePlayerTextDraw(playerid, 0.000, -2.000, "mdl-2200:fundo");
    PlayerTextDrawTextSize(playerid, TelaLogin[playerid][0], 1676.000, 455.000);
    PlayerTextDrawAlignment(playerid, TelaLogin[playerid][0], 1);
    PlayerTextDrawColor(playerid, TelaLogin[playerid][0], -1);
    PlayerTextDrawSetShadow(playerid, TelaLogin[playerid][0], 0);
    PlayerTextDrawSetOutline(playerid, TelaLogin[playerid][0], 0);
    PlayerTextDrawBackgroundColor(playerid, TelaLogin[playerid][0], 255);
    PlayerTextDrawFont(playerid, TelaLogin[playerid][0], 4);
    PlayerTextDrawSetProportional(playerid, TelaLogin[playerid][0], 1);

    TelaLogin[playerid][1] = CreatePlayerTextDraw(playerid, 220.000, -13.000, "mdl-2201:logo");
    PlayerTextDrawTextSize(playerid, TelaLogin[playerid][1], 210.000, 230.000);
    PlayerTextDrawAlignment(playerid, TelaLogin[playerid][1], 1);
    PlayerTextDrawColor(playerid, TelaLogin[playerid][1], -1);
    PlayerTextDrawSetShadow(playerid, TelaLogin[playerid][1], 0);
    PlayerTextDrawSetOutline(playerid, TelaLogin[playerid][1], 0);
    PlayerTextDrawBackgroundColor(playerid, TelaLogin[playerid][1], 255);
    PlayerTextDrawFont(playerid, TelaLogin[playerid][1], 4);
    PlayerTextDrawSetProportional(playerid, TelaLogin[playerid][1], 1);

    TelaLogin[playerid][2] = CreatePlayerTextDraw(playerid, 235.000, 169.000, "mdl-2200:ucp");
    PlayerTextDrawTextSize(playerid, TelaLogin[playerid][2], 173.000, 112.000);
    PlayerTextDrawAlignment(playerid, TelaLogin[playerid][2], 1);
    PlayerTextDrawColor(playerid, TelaLogin[playerid][2], -1);
    PlayerTextDrawSetShadow(playerid, TelaLogin[playerid][2], 0);
    PlayerTextDrawSetOutline(playerid, TelaLogin[playerid][2], 0);
    PlayerTextDrawBackgroundColor(playerid, TelaLogin[playerid][2], 255);
    PlayerTextDrawFont(playerid, TelaLogin[playerid][2], 4);
    PlayerTextDrawSetProportional(playerid, TelaLogin[playerid][2], 1);

    TelaLogin[playerid][3] = CreatePlayerTextDraw(playerid, 18.000, 428.000, "mdl-2200:serverok");
    PlayerTextDrawTextSize(playerid, TelaLogin[playerid][3], 625.000, 22.000);
    PlayerTextDrawAlignment(playerid, TelaLogin[playerid][3], 1);
    PlayerTextDrawColor(playerid, TelaLogin[playerid][3], -1);
    PlayerTextDrawSetShadow(playerid, TelaLogin[playerid][3], 0);
    PlayerTextDrawSetOutline(playerid, TelaLogin[playerid][3], 0);
    PlayerTextDrawBackgroundColor(playerid, TelaLogin[playerid][3], 255);
    PlayerTextDrawFont(playerid, TelaLogin[playerid][3], 4);
    PlayerTextDrawSetProportional(playerid, TelaLogin[playerid][3], 1);

    TelaLogin[playerid][4] = CreatePlayerTextDraw(playerid, 0.000, 428.000, "mdl-2200:fok");
    PlayerTextDrawTextSize(playerid, TelaLogin[playerid][4], 18.000, 43.000);
    PlayerTextDrawAlignment(playerid, TelaLogin[playerid][4], 1);
    PlayerTextDrawColor(playerid, TelaLogin[playerid][4], -1);
    PlayerTextDrawSetShadow(playerid, TelaLogin[playerid][4], 0);
    PlayerTextDrawSetOutline(playerid, TelaLogin[playerid][4], 0);
    PlayerTextDrawBackgroundColor(playerid, TelaLogin[playerid][4], 255);
    PlayerTextDrawFont(playerid, TelaLogin[playerid][4], 4);
    PlayerTextDrawSetProportional(playerid, TelaLogin[playerid][4], 1);

    TelaLogin[playerid][5] = CreatePlayerTextDraw(playerid, 2.000, 432.000, "mdl-2200:ok");
    PlayerTextDrawTextSize(playerid, TelaLogin[playerid][5], 11.000, 12.000);
    PlayerTextDrawAlignment(playerid, TelaLogin[playerid][5], 1);
    PlayerTextDrawColor(playerid, TelaLogin[playerid][5], -1);
    PlayerTextDrawSetShadow(playerid, TelaLogin[playerid][5], 0);
    PlayerTextDrawSetOutline(playerid, TelaLogin[playerid][5], 0);
    PlayerTextDrawBackgroundColor(playerid, TelaLogin[playerid][5], 255);
    PlayerTextDrawFont(playerid, TelaLogin[playerid][5], 4);
    PlayerTextDrawSetProportional(playerid, TelaLogin[playerid][5], 1);

    TelaLogin[playerid][6] = CreatePlayerTextDraw(playerid, 234.000, 137.000, "mdl-2200:welcomeback");
    PlayerTextDrawTextSize(playerid, TelaLogin[playerid][6], 174.000, 15.000);
    PlayerTextDrawAlignment(playerid, TelaLogin[playerid][6], 1);
    PlayerTextDrawColor(playerid, TelaLogin[playerid][6], -1);
    PlayerTextDrawSetShadow(playerid, TelaLogin[playerid][6], 0);
    PlayerTextDrawSetOutline(playerid, TelaLogin[playerid][6], 0);
    PlayerTextDrawBackgroundColor(playerid, TelaLogin[playerid][6], 255);
    PlayerTextDrawFont(playerid, TelaLogin[playerid][6], 4);
    PlayerTextDrawSetProportional(playerid, TelaLogin[playerid][6], 1);

    TelaLogin[playerid][7] = CreatePlayerTextDraw(playerid, 224.000, 154.000, "mdl-2200:ban");
    PlayerTextDrawTextSize(playerid, TelaLogin[playerid][7], 192.000, 122.000);
    PlayerTextDrawAlignment(playerid, TelaLogin[playerid][7], 1);
    PlayerTextDrawColor(playerid, TelaLogin[playerid][7], -1);
    PlayerTextDrawSetShadow(playerid, TelaLogin[playerid][7], 0);
    PlayerTextDrawSetOutline(playerid, TelaLogin[playerid][7], 0);
    PlayerTextDrawBackgroundColor(playerid, TelaLogin[playerid][7], 255);
    PlayerTextDrawFont(playerid, TelaLogin[playerid][7], 4);
    PlayerTextDrawSetProportional(playerid, TelaLogin[playerid][7], 1);

    TelaLogin[playerid][8] = CreatePlayerTextDraw(playerid, 234.000, 169.000, "mdl-2200:pjon");
    PlayerTextDrawTextSize(playerid, TelaLogin[playerid][8], 175.000, 122.000);
    PlayerTextDrawAlignment(playerid, TelaLogin[playerid][8], 1);
    PlayerTextDrawColor(playerid, TelaLogin[playerid][8], -1);
    PlayerTextDrawSetShadow(playerid, TelaLogin[playerid][8], 0);
    PlayerTextDrawSetOutline(playerid, TelaLogin[playerid][8], 0);
    PlayerTextDrawBackgroundColor(playerid, TelaLogin[playerid][8], 255);
    PlayerTextDrawFont(playerid, TelaLogin[playerid][8], 4);
    PlayerTextDrawSetProportional(playerid, TelaLogin[playerid][8], 1);


	return 1;
}

forward TelaLoginDel(playerid);
public TelaLoginDel(playerid)
{
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][0]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][1]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][2]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][3]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][4]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][5]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][6]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][7]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][8]);
	return 1;
}

forward PlayerDisconectDelTexts(playerid);
public PlayerDisconectDelTexts(playerid)
{
    TextDrawDestroy(Textdraw49[playerid]);
	PlayerTextDrawDestroy(playerid, Wheels[playerid][0]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][1]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][2]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][3]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][4]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][5]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][6]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][7]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][8]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][9]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][10]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][11]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][12]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][13]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][14]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][15]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][16]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][17]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][18]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][19]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][20]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][21]);
    PlayerTextDrawDestroy(playerid, Wheels[playerid][22]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][0]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][1]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][2]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][3]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][4]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][5]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][6]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][7]);
	PlayerTextDrawDestroy(playerid, TelaLogin[playerid][8]);
	PlayerTextDrawDestroy(playerid, Speedo[playerid]);
	PlayerTextDrawDestroy(playerid, ClickTD[playerid]);
	return 1;
}

public OnDynamicObjectMoved(objectid) {
	//Basket - Seville
	if(objectid == Ball_sv) {
	    OnObjectMoved_Basket(objectid, 1);
	    return 1;
	}
	if(objectid == Ball_idle) {
	    OnObjectMoved_Basket(objectid, 2);
	    return 1;
	}
	return 1;
}

public OnObjectMoved(objectid)
{
    new Float:x, Float:y, Float:z;
    // Loop
	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    // Check if the object that moved was one of the elevator floor doors
		if(objectid == Obj_FloorDoors[i][0])
		{
		    GetObjectPos(Obj_FloorDoors[i][0], x, y, z);

            // Some floor doors have shut, move the elevator to next floor in queue:
            if (y < Y_DOOR_L_OPENED - 0.5)
		    {
				Elevator_MoveToFloor(ElevatorQueue[0]);
				RemoveFirstQueueFloor();
			}
		}
	}
	for(new i; i < sizeof(Obj_FloorDoors1); i ++)
	{
		if(objectid == Obj_FloorDoors1[i][0])
		{
		    GetObjectPos(Obj_FloorDoors1[i][0], x, y, z);

		    if(x < X_DOOR_L_OPENED - 0.5)   // Some floor doors have shut, move the elevator to next floor in queue:
		    {
				Elevator_MoveToFloor1(ElevatorQueue1[0]);
				RemoveFirstQueueFloor1();
			}
		}
	}
	for(new i; i < sizeof(Obj_FloorDoors2); i ++)
	{
	    // Check if the object that moved was one of the elevator floor doors
		if(objectid == Obj_FloorDoors2[i][0])
		{
		    GetObjectPos(Obj_FloorDoors2[i][0], x, y, z);

            // Some floor doors have shut, move the elevator to next floor in queue:
            if (y == -1512.4995)
		    {
				Elevator_MoveToFloor2(ElevatorQueue2[0]);
				RemoveFirstQueueFloor2();
			}
		}
	}
	for(new i; i < sizeof(Obj_FloorDoors3); i ++)
	{
	    // Check if the object that moved was one of the elevator floor doors
		if(objectid == Obj_FloorDoors3[i][0])
		{
		    GetObjectPos(Obj_FloorDoors3[i][0], x, y, z);

            // Some floor doors have shut, move the elevator to next floor in queue:
            if (y < Y_DOOR_L_OPENED3 - 0.5)
		    {
				Elevator_MoveToFloor3(ElevatorQueue3[0]);
				RemoveFirstQueueFloor3();
			}
		}
	}

	if(objectid == Obj_Elevator)   // The elevator reached the specified floor.
	{
	    KillTimer(ElevatorBoostTimer);  // Kills the timer, in case the elevator reached the floor before boost.

	    FloorRequestedBy[ElevatorFloor] = INVALID_PLAYER_ID;

	    Elevator_OpenDoors();
	    Floor_OpenDoors(ElevatorFloor);

	    GetObjectPos(Obj_Elevator, x, y, z);
	    Label_Elevator	= CreateDynamic3DTextLabel("{CCCCCC}Pressione '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' para usar o elevador", 0xCCCCCCAA, X_ELEVATOR_POS - 1.7, Y_ELEVATOR_POS - 1.75, z - 0.4, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

	    ElevatorState = ELEVATOR_STATE_WAITING;
	    SetTimer("Elevator_TurnToIdle", ELEVATOR_WAIT_TIME, 0);
	}
	if(objectid == Obj_Elevator1)   // The elevator reached the specified floor.
	{
	    KillTimer(ElevatorBoostTimer1);  // Kills the timer, in case the elevator reached the floor before boost.

	    FloorRequestedBy1[ElevatorFloor1] = INVALID_PLAYER_ID;

	    Elevator_OpenDoors1();
	    Floor_OpenDoors1(ElevatorFloor1);

	    GetObjectPos(Obj_Elevator1, x, y, z);
	    Label_Elevator1	= CreateDynamic3DTextLabel("{CCCCCC}Pressione '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' para usar o elevator", 0xCCCCCCAA, 1784.9822, -1302.0426, z - 0.9, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

	    ElevatorState1 = ELEVATOR_STATE_WAITING;
	    SetTimer("Elevator_TurnToIdle1", ELEVATOR_WAIT_TIME, 0);
	}
	if(objectid == Obj_Elevator2)   // The elevator reached the specified floor.
	{
	    KillTimer(ElevatorBoostTimer2);  // Kills the timer, in case the elevator reached the floor before boost.

	    FloorRequestedBy2[ElevatorFloor2] = INVALID_PLAYER_ID;

	    Elevator_OpenDoors2();
	    Floor_OpenDoors2(ElevatorFloor2);

	    GetObjectPos(Obj_Elevator2, x, y, z);
	    Label_Elevator2	= CreateDynamic3DTextLabel("{CCCCCC}Press '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' to use elevator", 0xCCCCCCAA, X_ELEVATOR_POS2 + 1.6, Y_ELEVATOR_POS2 - 1.85, z - 0.4, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

	    ElevatorState2 	= ELEVATOR_STATE_WAITING;
	    SetTimer("Elevator_TurnToIdle2", ELEVATOR_WAIT_TIME, 0);
	}
	if(objectid == Obj_Elevator3)   // The elevator reached the specified floor.
	{
	    KillTimer(ElevatorBoostTimer3);  // Kills the timer, in case the elevator reached the floor before boost.

	    FloorRequestedBy3[ElevatorFloor3] = INVALID_PLAYER_ID;

	    Elevator_OpenDoors3();
	    Floor_OpenDoors3(ElevatorFloor3);

	    GetObjectPos(Obj_Elevator3, x, y, z);
	    Label_Elevator3	= CreateDynamic3DTextLabel("{CCCCCC}Press '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' to use elevator", 0xCCCCCCAA, X_ELEVATOR_POS + 1.6, Y_ELEVATOR_POS - 1.85, z - 0.4, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

	    ElevatorState3 	= ELEVATOR_STATE_WAITING3;
	    SetTimer("Elevator_TurnToIdle3", ELEVATOR_WAIT_TIME3, 0);
	}
	return 1;
}
public OnPlayerDisconnect(playerid, reason)
{
    PlayersOnline--;
    PlayerDisconectDelTexts(playerid);
	TelaLoginDel(playerid);
	PetDespawn(playerid);

    if(IsValidDynamic3DTextLabel(cNametag[playerid]))
              DestroyDynamic3DTextLabel(cNametag[playerid]);

	if(GetPVarInt(playerid, "AcabouDeMorrer") == 1)
	{
		SetPVarInt(playerid, "AcabouDeMorrer", 0);
	}
	
    //if(LoginTimer[playerid]) KillTimer(LoginTimer[playerid]);
	TelaDeLogin[playerid] = 0;
 	KillTimer(UpdateTimerAr[playerid]);
 	KillTimer(FishTimer[playerid]);

 	KillTimer(HJLimitTimer);
	HackerJob[playerid] = 0;

    AppLigado[playerid] = 0;
    Retiroupedido[playerid] = 0;
    Entregando[playerid] = 0;
    TemCorrida[playerid] = 0;

 	if(GetPVarInt(playerid, "PlayerSpectate") != 0)
 		SetPVarInt(playerid, "PlayerSpectate", 0);

 	if(OutrasInfos[playerid][oFalsis] > 0) KillTimer(OutrasInfos[playerid][oFalsisT]);

	if(PlayerInfo[playerid][pLogado])
	{
	    switch(reason)
	    {
	        case 0: // Crashed
	        {
                if(IsPlayerInAnyVehicle(playerid))
                {
                    new playerState = GetPlayerState(playerid);
    				if(playerState == PLAYER_STATE_DRIVER)
                    	StopEngine(GetPlayerVehicleID(playerid));
				}
	            format(string, sizeof(string), "** %s saiu do servidor. (Crashou)", PlayerName(playerid, 1));
	        }
	        case 1:
	        {
			    format(string, sizeof(string), "** %s saiu do servidor. (Desconectou-se)", PlayerName(playerid, 1));
			}
	        case 2: format(string, sizeof(string), "** %s saiu do servidor. (Kickado/Banido)", PlayerName(playerid, 1));
	    }
	    ProxDetector(8.0, playerid, string, 0xC8CAC3FF,0xC8CAC3FF,0xC8CAC3FF,0xC8CAC3FF,0xC8CAC3FF);

	    KillTimer(DeleteObjectTimer[playerid]);
		KillTimer(UpdateTimer[playerid]);
		KillTimer(UpdateTimerAr[playerid]);
        KillTimer(Desmanchando[playerid]);
		KeyPressed[playerid] = 0;
		KeyForPress[playerid] = 0;
	    SetPVarInt(playerid, "Arrombando", 0);
	    SetPVarInt(playerid, "ArrombandoOque", 0);
		ColorNow[playerid] = 0;
		CountTimer[playerid] = 0;
		PlayerTextDrawHide(playerid, ClickTD[playerid]);

    	if(IsValidDynamicObject(ShowFont[playerid])) DestroyDynamicObject(ShowFont[playerid]);
    	if(IsValidDynamicObject(GraffitiObject[playerid])) DestroyDynamicObject(GraffitiObject[playerid]);

	    SetPVarInt(playerid, "Arrombando", 0);

	    PlayerInfo[playerid][pTomouAlgumTiro] = 0;
		OutrasInfos[playerid][oPerdVida] = 0;
		OutrasInfos[playerid][oLigDireta] = 0;
		OutrasInfos[playerid][oCaiSangue] = 0;

		if(CelularData[playerid][LigandoPara] != 999 && CelularData[playerid][EmLigacao] != 999 && CelularData[playerid][LigandoOrelhao] == 999 && CelularData[playerid][AtendeuOrelhao] == 999)
		{
		    DesligarChamada(playerid, 3);
		}
		else if(CelularData[playerid][EmLigacao] != 999 && CelularData[playerid][LigandoOrelhao] == 999 && CelularData[playerid][AtendeuOrelhao] == 999)
		{
		    DesligarChamada(playerid, 3);
		}
		else if(CelularData[playerid][LigandoParaNum] != 999 && CelularData[playerid][LigandoOrelhao] == 999 && CelularData[playerid][AtendeuOrelhao] == 999)
		{
		    DesligarChamada(playerid, 4);
		}
		else if(CelularData[playerid][LigandoOrelhao] != 999)
		{
		    DesligarChamada(playerid, 3);
		}
		else if(CelularData[playerid][AtendeuOrelhao] != 999)
		{
		    DesligarChamada(playerid, 3);
		}
		if(CelularData[playerid][RastreandoTime] > 0)
		{
			GangZoneDestroy(CelularData[playerid][GGRastreamento]);
			CelularData[playerid][RastreandoTime] = 0;
		}
		KillTimer(CelularData[playerid][DelaySMS]);
		KillTimer(CelularData[playerid][DelaySMSICO]);
		KillTimer(CelularData[playerid][DelayCelular]);
		KillTimer(CelularData[playerid][RastreTime]);
		CelularData[playerid][RastreIdParou] = 0;

		SalvarSMS(playerid);
		SalvarContatos(playerid);

	    if(garbage_run[playerid] > -1) { OnPlayerEndGarbage(playerid); }

	    if (IsValidDynamic3DTextLabel(TextMorto[playerid])) DestroyDynamic3DTextLabel(TextMorto[playerid]);

		new string5[126];
		if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
		{
	    	if(IsPlayerConnected(TransportDriver[playerid]))
			{
			    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			    TransportTime[TransportDriver[playerid]] = 0;
			    TransportCost[TransportDriver[playerid]] = 0;
			    format(string5, sizeof(string5), "Passageiro saiu, você ganhou R$%d",TransportCost[playerid]);
			    SendClientMessage(TransportDriver[playerid], COLOR_YELLOW, string5);
			}
		}
		for(new i = 0; i <= MAX_PLAYERS; ++i)
		{
	    	if(IsPlayerConnected(i))
			{
				if(TaxiAccepted[i] < 999)
				{
		  			if(TaxiAccepted[i] == playerid)
		  			{
		     			TaxiAccepted[i] = 999;
		        		SendClientMessage(playerid, COLOR_LIGHTRED, "O taxista deslogou do servidor");
		          		TaxiCallTime[i] = 0;
		            	DisablePlayerCheckpoint(i);
		        	}
		        }
		        if(MecAccepted[i] < 999)
				{
		  			if(MecAccepted[i] == playerid)
		  			{
		     			MecAccepted[i] = 999;
		        		SendClientMessage(playerid, COLOR_LIGHTRED, "O Mecanico deslogou do servidor");
		          		MecCallTime[i] = 0;
		            	DisablePlayerCheckpoint(i);
		        	}
		        }
		        if(HotDogOffer[i] == playerid)
	    		{
			        SendClientMessage(playerid, COLOR_LIGHTRED, "O vendedor de HotDog deslogou do servidor");
					HotDogPrice[i] = 0;
					HotDogOffer[i] = 0;
					HotDogAccept[i] = 0;
			    }
			}
		}

    	if(GetPVarType(playerid, "pkrTableID")) {
                LeavePokerTable(playerid);
        }

        TextDrawDestroy(Textdraw49[playerid]);

		CancelSelectTextDraw(playerid);

	    if(OutrasInfos[playerid][oModShop] > 0)
	    {
	        new id = GetPlayerVehicleID(playerid);
	   		new empid = PlayerInfo[playerid][pEntrouEmpresa];
	   		SetPlayerPos(playerid, EmpInfo[empid][eExX], EmpInfo[empid][eExY], EmpInfo[empid][eExZ]);
		    SetVehiclePos(id, EmpInfo[empid][eExX], EmpInfo[empid][eExY], EmpInfo[empid][eExZ]);
		    SetPlayerVirtualWorld(playerid,EmpInfo[empid][eExWorld]);
		    SetVehicleVirtualWorld(id,EmpInfo[empid][eExWorld]);
		    TogglePlayerControllable(playerid, 1);
		    //==============================================
		    OutrasInfos[playerid][oModShop] = 0;
		    OutrasInfos[playerid][oModCat] = 0;
		    OutrasInfos[playerid][oModPart] = 0; // Vista de Cima
		    OutrasInfos[playerid][oPodePas] = 0;
		    SetCameraBehindPlayer(playerid);
			//==============================================
			PlayerInfo[playerid][pEntrouCasa] = -1;
			PlayerInfo[playerid][pEntrouGaragem] = -1;
			PlayerInfo[playerid][pEntrouComplexo] = -1;
			PlayerInfo[playerid][pEntrouEmpresa] = -1;
			SetPlayerInterior(playerid, 0);
	 		LinkVehicleToInterior(id, 0);
	    }
	    //==========================================================================
		if(PlayerInfo[playerid][pArmaMao] != 0)
		{
		    new armaid = PlayerInfo[playerid][pArmaMao];
			RemovePlayerAttachedObject(playerid, 0);
			SalvarArma(armaid);
		}

	    if(PlayerInfo[playerid][pLoadCrate] != -1)
		{
			new Float:X,Float:Y,Float:Z,Float:A;
	  		GetPlayerPos(playerid, X, Y, Z);
	   		GetPlayerFacingAngle(playerid,A);

			X = X-1;
			Z = Z-0.65;

	    	CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cObj] = CreateDynamicObject(1271, X,Y,Z,   0.00000, 0.00000, A);
	    	CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cPosX] = X;
	    	CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cPosY] = Y;
	    	CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cPosZ] = Z;

	    	new tipp = CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cTipo];
	    	format(StringBarco,sizeof(StringBarco), "%s", GetCargaTipo(tipp));
	    	CaixaInfo[PlayerInfo[playerid][pLoadCrate]][TextTipo] = CreateDynamic3DTextLabel(StringBarco, 0xFFFFFFFF, X, Y, Z+0.6, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

			RemovePlayerAttachedObject(playerid, 0);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			PlayerInfo[playerid][pLoadCrate] = -1;
	 	}

	 	//Basket System
		basket_Disconnect(playerid);
		//Horse Bet
		Horse_OnPlayerDisconnect(playerid);
		PlayerDeslogouEditandoAlgo(playerid);

	 	DestroyProgressBar(progress_bar[playerid]);

	 	TogSQLstatus(playerid, 0);

	 	SaveDrogas(playerid);
	 	SalvarPlayer(playerid);


	 	ResetVarsPlayerInfo(playerid);
 	}

	PlayerInfo[playerid][pLogado] = 0;

	return 1;
}

stock PlayRingSoundTwice(playerid)
{
	PlaySound(playerid, 1138);
	SetTimerEx("PlayRingSound", 500, 0, "i", playerid);
	return 1;
}

stock SetPlayerProgressBar(playerid,type,max)
{
	progress_wait_max[playerid] = max;
	progress_wait[playerid] = 1;
	progress_wait_type[playerid] = type;
}

public OnPlayerSpawn(playerid){
    if(IsPlayerNPC(playerid)) return 1;
    else {
        if(!PlayerInfo[playerid][pLogado]) {
            SetPlayerHealth(playerid, 99999.0);
            SetPlayerColor(playerid, 0xFFFFFFFF);
			//SetPlayerColor(playerid, 0x0000001D); original 2
            return 1;
        }
        else {
            if(GetPVarInt(playerid, "ChamouOnPlayerDeath") == 1 || (PlayerInfo[playerid][pMorto] > 0 && PlayerInfo[playerid][pMorto] < 3)) {
                P_Health[playerid] = 20;
                SetPlayerHealth(playerid, 20);

				Anim2Morreu[playerid] = SetTimerEx("AnimMorreu", ANIM_DOIS_MORTE, false, "d", playerid);

                SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pWorld]);
                SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);

                SetPlayerSkin(playerid,PlayerInfo[playerid][pSkin]);

                SetarItensDoPlayer(playerid);
				TelaLoginDel(playerid);

				PlayerInfo[playerid][pMorto] = 1;
				AcabouDeMorrer[playerid] = 5;

				TogglePlayerControllable(playerid, 0);
				//SendClientMessage(playerid, "Você está ferido, você pode aguardar um médico chegar ou aceitar a morte daqui a 3 minutos.");


				PlayerInfo[playerid][pMancando] = 0;
				TempoDesistir[playerid] = 600;

				ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
				ComAnim[playerid] = 0;
				ClearAnimations(playerid, 1);


				ApplyAnimation(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1, 1);
				ApplyAnimation(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1, 1);

				Anim2Morreu[playerid] = SetTimerEx("AnimMorreu", ANIM_DOIS_MORTE, false, "d", playerid);
                //================================================
                if(PlayerInfo[playerid][pColde] > 0) AttachArmaCorpo(playerid, ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo], PlayerInfo[playerid][pColdreBone]);

                SetPlayerPos(playerid, PlayerInfo[playerid][pPos][0], PlayerInfo[playerid][pPos][1], PlayerInfo[playerid][pPos][2]);
                return 1;
                //===============================
            }
            else if(OutrasInfos[playerid][oSaindoDeSpec] == 1) {
                SetPlayerInterior(playerid,GetPVarInt(playerid, "Int"));
                SetPlayerVirtualWorld(playerid,GetPVarInt(playerid, "World"));
                TogglePlayerControllable(playerid,true);

                if(GetPVarFloat(playerid, "Health") > 0)
                {
                    P_Health[playerid] = GetPVarFloat(playerid, "Health");
                    SetPlayerHealth(playerid, GetPVarFloat(playerid, "Health"));
                }
                if(GetPVarFloat(playerid, "Armour") > 0)
                {
                    P_Armour[playerid] = GetPVarFloat(playerid, "Armour");
                    SetPlayerArmour_CA(playerid, GetPVarFloat(playerid, "Armour"));
                }

                new IdArma = PlayerInfo[playerid][pArmaMao];
                if(IdArma > 0)
                {
                    GivePlayerWeapon(playerid,ArmaData[IdArma][ArmaModelo], ArmaData[IdArma][ArmaAmmo]);
                    SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaData[IdArma][ArmaModelo]], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[IdArma][ArmaRGB]);
                }
                if(PlayerInfo[playerid][pColde] > 0) AttachArmaCorpo(playerid, ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo], PlayerInfo[playerid][pColdreBone]);

                if(PlayerInfo[playerid][pAdmin] > 0)
                    if(OutrasInfos[playerid][oAdminOnDuty]) SetPlayerColor(playerid,0x587b9500);

                if(PlayerInfo[playerid][pTester] > 0)
                    if(OutrasInfos[playerid][oTesterOnDuty]) SetPlayerColor(playerid,0x587b9500);

                new slot;
                for(new m; m < MAX_ITENS; m++)
                {
                    if(ItemInfo[m][iCriado] == 1)
                    {
                        if(ItemInfo[m][iCom] == PlayerInfo[playerid][pID])
                        {
                            if(ItemInfo[m][iUsando] == 1)
                            {
                                switch(ItemInfo[m][iTipo])
                                {
                                    case 1: { slot = 9; }
                                    case 2: { slot = 8; }
                                    case 3: { slot = 7; }
                                    case 4: { slot = 6; }
                                }
                                if(ItemInfo[m][iBone] == 0) ItemInfo[m][iBone] = 1;
                                SetPlayerAttachedObject(playerid, slot, ItemInfo[m][iObj], ItemInfo[m][iBone], ItemInfo[m][iX], ItemInfo[m][iY], ItemInfo[m][iZ], ItemInfo[m][iRX], ItemInfo[m][iRY], ItemInfo[m][iRZ], ItemInfo[m][iSX], ItemInfo[m][iSY], ItemInfo[m][iSZ]);
                            }
                        }
                    }
                }

                SCM(playerid, COLOR_LIGHTRED, "- Você saiu de spec.");
                OutrasInfos[playerid][oSaindoDeSpec] = 0;
            }
            else {
                AcabouDeLogar[playerid] = gettime()+15;
                if(PlayerInfo[playerid][pTutorial] > 0) {
                    SetPlayerColor(playerid, COLOR_WHITE);
                    TogglePlayerControllable(playerid, 0);
                    SetCameraBehindPlayer(playerid);
                    SetPlayerInterior(playerid,PlayerInfo[playerid][pInterior]);
                    SetPlayerVirtualWorld(playerid,PlayerInfo[playerid][pWorld]);
                    SetPlayerSkin(playerid,PlayerInfo[playerid][pSkin]);

					SetPlayerAlgema(playerid, OutrasInfos[playerid][oAlgemado]);

                    if(PlayerInfo[playerid][pHealth] > 20.0) {
                        P_Health[playerid] = PlayerInfo[playerid][pHealth];
                        SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
                    }
                    else {
                        PlayerInfo[playerid][pHealth] = 20;
                        SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
                        P_Health[playerid] = PlayerInfo[playerid][pHealth];
                    }

                    P_Armour[playerid] = PlayerInfo[playerid][pArmour];
                    SetPlayerArmour_CA(playerid, PlayerInfo[playerid][pArmour]);
                    God_VidaAnterior2[playerid] = PlayerInfo[playerid][pHealth];
                    God_Aviso2[playerid] = 0;
                    StopAudioStreamForPlayer(playerid);


                    new stringl[124];
                    format(stringl,sizeof(stringl),"~w~Bem vindo ~n~~Y~%s", PlayerName(playerid,0));
                    GameTextForPlayer(playerid, stringl,6000,1);

                    format(stringl, sizeof(stringl), "SERVER: Bem-vindo %s.",PlayerName(playerid,0)); SendClientMessage(playerid, COLOR_WHITE, stringl);
                    format(stringl, sizeof(stringl), "SERVER: Última atualização realizada em 15/04/2023, v2.09, acesse nosso fórum e veja o que vou atualizado."); SendClientMessage(playerid, COLOR_WHITE, stringl);
                    format(stringl, sizeof(stringl), "DEV: Estamos em nossa versão Beta e caso algum bug seja encontrado reporte-o via fórum."); SendClientMessage(playerid, COLOR_WHITE, stringl);
                    
                    if(PlayerInfo[playerid][pAge] == 23)
                        SCM(playerid, COLOR_LIGHTRED, "O campo de idade não foi preenchido, use /idade para preenche-lo.");

                    if((PlayerInfo[playerid][pFac] > 0) && (FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fCriada] == 0 || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fCriada] == 2)){
                        SCM(playerid, COLOR_LIGHTRED, "SERVER: A facção que você fazia parte, não existe mais.");
                        PlayerInfo[playerid][pFac] = 0;
                    }


                    new str[64];
                    format(str, 256, "SELECT * FROM `sms` WHERE `dono` = '%d'", PlayerInfo[playerid][pID]);
                    mysql_function_query(Pipeline, str, true, "CarregarSMS", "d", playerid);

                    format(str, 256, "SELECT * FROM `contatoscel` WHERE `dono` = '%d'", PlayerInfo[playerid][pID]);
                    mysql_function_query(Pipeline, str, true, "CarregarContatosCel", "d", playerid);

                    new strRefundo[256];
                    format(strRefundo, 256, "SELECT * FROM `refundo` WHERE `rDono` = '%d' AND `rUsado` = '0'",PlayerInfo[playerid][pID]);
                    mysql_function_query(Pipeline, strRefundo, true, "RefundoPendente", "d",playerid);

                    SetarItensDoPlayer(playerid);
					TextDrawShowForPlayer(playerid, Textdraw49[playerid]);

					createHudRadio(playerid);
					createDisplayFomeSede(playerid);

                    //Login
					TelaLoginDel(playerid);


	                PlayerTextDrawShow(playerid, RadioComunicador[playerid][0]);
                    PlayerTextDrawShow(playerid, RadioComunicador[playerid][1]);

                    PlayerTextDrawShow(playerid, FomeSede[playerid][0]);
                    PlayerTextDrawShow(playerid, FomeSede[playerid][1]);
                    PlayerTextDrawShow(playerid, FomeSede[playerid][2]);
                    PlayerTextDrawShow(playerid, FomeSede[playerid][3]);

                
					
					AppLigado[playerid] = 0;
					Retiroupedido[playerid] = 0;
					Entregando[playerid] = 0;
					TemCorrida[playerid] = 0;


                    if(PlayerInfo[playerid][pDoador] > 0)
                    {
                        if(gettime() > PlayerInfo[playerid][pDoadorTempo])
                        {
                            PlayerInfo[playerid][pDoador] = 0;
                            PlayerInfo[playerid][pDoadorTempo] = 0;
                            SendClientMessage(playerid, COLOR_LIGHTRED, "INFO: Seus dias de doador chegaram ao fim.");
                        }
                    }
                    if(PlayerInfo[playerid][pArmasResetadas] == 1)
                    {
                        PlayerInfo[playerid][pArmasResetadas] = 0;
                    }
                    if(PlayerInfo[playerid][pArmasResetadas] == 2)
                    {
                        if(PlayerInfo[playerid][pSlot1] != 0)
                        {
                            PlayerInfo[playerid][pSlot1] = 0;
                            PlayerInfo[playerid][pSlot1a] = 0;
                        }
                        if(PlayerInfo[playerid][pSlot2] != 0)
                        {
                            PlayerInfo[playerid][pSlot2] = 0;
                            PlayerInfo[playerid][pSlot2a] = 0;
                        }
                        if(PlayerInfo[playerid][pSlot3] != 0)
                        {
                            PlayerInfo[playerid][pSlot3] = 0;
                            PlayerInfo[playerid][pSlot3a] = 0;
                        }
                        if(PlayerInfo[playerid][pSlot4] != 0)
                        {
                            PlayerInfo[playerid][pSlot4] = 0;
                            PlayerInfo[playerid][pSlot4a] = 0;
                        }
                        if(PlayerInfo[playerid][pSlot5] != 0)
                        {
                            PlayerInfo[playerid][pSlot5] = 0;
                            PlayerInfo[playerid][pSlot5a] = 0;
                        }

                        if(PlayerInfo[playerid][pArmario1] != 0) PlayerInfo[playerid][pArmario1] = 0;
                        if(PlayerInfo[playerid][pArmario2] != 0) PlayerInfo[playerid][pArmario2] = 0;
                        if(PlayerInfo[playerid][pArmario3] != 0) PlayerInfo[playerid][pArmario3] = 0;
                        if(PlayerInfo[playerid][pArmario4] != 0) PlayerInfo[playerid][pArmario4] = 0;
                        if(PlayerInfo[playerid][pArmario5] != 0) PlayerInfo[playerid][pArmario5] = 0;
                        if(PlayerInfo[playerid][pArmario6] != 0) PlayerInfo[playerid][pArmario6] = 0;
                        if(PlayerInfo[playerid][pArmario7] != 0) PlayerInfo[playerid][pArmario7] = 0;
                        if(PlayerInfo[playerid][pArmario8] != 0) PlayerInfo[playerid][pArmario8] = 0;
                        if(PlayerInfo[playerid][pArmario9] != 0) PlayerInfo[playerid][pArmario9] = 0;
                        if(PlayerInfo[playerid][pArmario10] != 0) PlayerInfo[playerid][pArmario10] = 0;

                        if(PlayerInfo[playerid][pArm9mm] != 0) PlayerInfo[playerid][pArm9mm] = 0;
                        if(PlayerInfo[playerid][pArm556] != 0) PlayerInfo[playerid][pArm556] = 0;
                        if(PlayerInfo[playerid][pArmCart] != 0) PlayerInfo[playerid][pArmCart] = 0;
                        if(PlayerInfo[playerid][pArm127] != 0) PlayerInfo[playerid][pArm127] = 0;

                        if(PlayerInfo[playerid][pColde] > 0)
                        {
                            PlayerInfo[playerid][pColde] = 0;
                            PlayerInfo[playerid][pColdreA] = 0;
                            RemovePlayerAttachedObject(playerid, 2);
                        }
                        if(PlayerInfo[playerid][pArmaMao] > 0)
                        {
                            DesarmandoPlayer[playerid] = 2;
                            ResetPlayerWeapons(playerid);
                            PlayerInfo[playerid][pArmaMao] = 0;
                            RemovePlayerAttachedObject(playerid, 0);
                        }
                        if(PlayerInfo[playerid][pMun9mm] > 0 || PlayerInfo[playerid][pMunCart] > 0 || PlayerInfo[playerid][pMun556] > 0 || PlayerInfo[playerid][pMun127] > 0)
                        {
                            PlayerInfo[playerid][pMun9mm] = 0;
                            PlayerInfo[playerid][pMunCart] = 0;
                            PlayerInfo[playerid][pMun556] = 0;
                            PlayerInfo[playerid][pMun127] = 0;
                        }
                        SendClientMessage(playerid,COLOR_LIGHTRED,"[RESET-ARMAS] As suas armas do inventário foram retiradas devido a um reset de armas do servidor.");
                        PlayerInfo[playerid][pArmasResetadas] = 1;
                    }
                    AtualizarCaPCERJata(playerid);
                    AtualizarGaragensData(playerid);

                    new TotalBugPecas = 0,
                        pecas0, pecas1, pecas2,
                        pecas3, pecas4, pecas5;
                    if(PlayerInfo[playerid][pPecasMecanicas][0] < 0)
                    {
                        pecas0 = PlayerInfo[playerid][pPecasMecanicas][0];
                        for(new p = 0; p > pecas0; p--)
                        {
                            PlayerInfo[playerid][pPecasMecanicas][0] = 0;
                            TotalBugPecas+= 15;
                        }
                    }
                    if(PlayerInfo[playerid][pPecasMecanicas][1] < 0)
                    {
                        pecas1 = PlayerInfo[playerid][pPecasMecanicas][1];
                        for(new p = 0; p > pecas1; p--)
                        {
                            PlayerInfo[playerid][pPecasMecanicas][1] = 0;
                            TotalBugPecas+= 60;
                        }
                    }
                    if(PlayerInfo[playerid][pPecasMecanicas][2] < 0)
                    {
                        pecas2 = PlayerInfo[playerid][pPecasMecanicas][2];
                        for(new p = 0; p > pecas2; p--)
                        {
                            PlayerInfo[playerid][pPecasMecanicas][2] = 0;
                            TotalBugPecas+= 15;
                        }
                    }
                    if(PlayerInfo[playerid][pPecasMecanicas][3] < 0)
                    {
                        pecas3 = PlayerInfo[playerid][pPecasMecanicas][3];
                        for(new p = 0; p > pecas3; p--)
                        {
                            PlayerInfo[playerid][pPecasMecanicas][3] = 0;
                            TotalBugPecas+= 10;
                        }
                    }
                    if(PlayerInfo[playerid][pPecasMecanicas][4] < 0)
                    {
                        pecas4 = PlayerInfo[playerid][pPecasMecanicas][4];
                        for(new p = 0; p > pecas4; p--)
                        {
                            PlayerInfo[playerid][pPecasMecanicas][4] = 0;
                            TotalBugPecas+= 10;
                        }
                    }
                    if(PlayerInfo[playerid][pPecasMecanicas][5] < 0)
                    {
                        pecas5 = PlayerInfo[playerid][pPecasMecanicas][5];
                        for(new p = 0; p > pecas5; p--)
                        {
                            PlayerInfo[playerid][pPecasMecanicas][5] = 0;
                            TotalBugPecas+= 10;
                        }
                    }
                    if(TotalBugPecas > 0)
                    {
                        format(string, sizeof(string), "INFO: Foram retirados $%d de seu banco devido as suas peças de mecânico negativas. (Abuso de Bug)", TotalBugPecas);
                        SendClientMessage(playerid, COLOR_LIGHTRED, string);
                        PlayerInfo[playerid][pBanco] -= TotalBugPecas;
                    }

                    if(PlayerInfo[playerid][pUsouDroga] > 0)
                    {
                        UsarDrogaLogando(playerid);
                    }
                    if(PlayerInfo[playerid][pSkillTiro] == 0) PlayerInfo[playerid][pSkillTiro] = 6000;
                    LoadPlayerDrugs(playerid);
                    if(PlayerInfo[playerid][pLutaStyle] == 0) PlayerInfo[playerid][pLutaStyle] = 4;
                    if(PlayerInfo[playerid][pLutaStyle] == 7 || PlayerInfo[playerid][pLutaStyle] == 16) PlayerInfo[playerid][pLutaStyle] = 4;
                    SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pLutaStyle]);
                    //================================================
                    if(PlayerInfo[playerid][pColde] > 0) AttachArmaCorpo(playerid, ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo], PlayerInfo[playerid][pColdreBone]);

                    if(PlayerInfo[playerid][pEmServico]) SetPlayerSkin(playerid, PlayerInfo[playerid][pDutySkin]);
                    else SetPlayerSkin(playerid,PlayerInfo[playerid][pSkin]);

                    if(PlayerInfo[playerid][pAdmin] > 0)
                        if(OutrasInfos[playerid][oAdminOnDuty]) SetPlayerColor(playerid,0x587b9500);

                    if(PlayerInfo[playerid][pTester] > 0)
                        if(OutrasInfos[playerid][oTesterOnDuty]) SetPlayerColor(playerid,0x587b9500);
                    SetPlayerLocalSpawn(playerid);
                }
                else
                {
                    LimparChat(playerid);

                    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                    SetPlayerPos(playerid, 1719.6351,-1946.9980,13.5573);
                    SetPlayerFacingAngle( playerid, 360.0);
                    SetCameraBehindPlayer(playerid);
                    TogglePlayerControllable(playerid, 1);
                    SetPlayerInterior(playerid, 0);
                    SetPlayerVirtualWorld(playerid, 0);
                    FaseTutorial[playerid] = 0;

                    PlayerInfo[playerid][pTutorial] = 1;
                    PlayerInfo[playerid][pLogado] = 1;
                    PlayerInfo[playerid][pRegistrado] = 1;

                    SetPlayerColor(playerid,COLOR_WHITE);
                    SendClientMessage(playerid, COLOR_LIGHTRED,"INFO: Não deixe de visitar nosso fórum: forum.cp-frp.com.br.com.");
                    SendClientMessage(playerid, COLOR_LIGHTRED,"INFO: Utilize /gps para encontrar os principais pontos da cidade.");
                }
	
            }
        }
    }
    return 1;
}

forward SetPlayerLocalSpawn(playerid);
public SetPlayerLocalSpawn(playerid) {

    if(PlayerInfo[playerid][pPrisao] == 10) {
 		format(string, sizeof(string), "INFO: Você está na prisão administrativa por %d minuto(s)", PlayerInfo[playerid][pTemPreso]);
		SendClientMessage(playerid, COLOR_LIGHTRED, string);

		SetPlayerPos(playerid,2523.9197,-1673.8944,14.8589);
		TogglePlayerControllable(playerid, false);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, playerid);
		PlayerInfo[playerid][pEntrouEmpresa] = -1;
		PlayerInfo[playerid][pEntrouCasa] = -1;
		PlayerInfo[playerid][pEntrouComplexo] = -1;
		PlayerInfo[playerid][pEntrouGaragem] = -1;

		TogglePlayerControllable(playerid, 0);
		CaindoInt[playerid] = 0;
  		CaindoInt_Av[playerid] = 0;
  		return 1;
	}
 	else if(PlayerInfo[playerid][pPrisao] == 1 || PlayerInfo[playerid][pPrisao] == 2) {
		format(string, sizeof(string), "INFO: Você está na prisão por %d minuto(s)", PlayerInfo[playerid][pTemPreso]);
		SendClientMessage(playerid, COLOR_LIGHTRED, string);
		SetPlayerPosLogin(playerid, PlayerInfo[playerid][pPos][0], PlayerInfo[playerid][pPos][1], PlayerInfo[playerid][pPos][2], 1);

		SetPlayerInterior(playerid,PlayerInfo[playerid][pInterior]);
		SetPlayerVirtualWorld(playerid,PlayerInfo[playerid][pWorld]);

		TogglePlayerControllable(playerid, 1);
  		CaindoInt[playerid] = 0;
  		CaindoInt_Av[playerid] = 0;
  		return 1;
	}
    else if(PlayerInfo[playerid][pMorto] == 1)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "VOCÊ LOGOU FERIDO.");
		SetPlayerHealth(playerid, 20);
		P_Health[playerid] = 20;

		PlayerInfo[playerid][pMorto] = 1;
		AcabouDeMorrer[playerid] = 5;

		TogglePlayerControllable(playerid, 0);
		SendClientMessage(playerid, COLOR_LIGHTRED, "Você está ferido, você pode aguardar um médico chegar ou aceitar a morte daqui a 3 minutos.");

		if (IsValidDynamic3DTextLabel(TextMorto[playerid])) DestroyDynamic3DTextLabel(TextMorto[playerid]);

		PlayerInfo[playerid][pMancando] = 0;

		TextMorto[playerid] = CreateDynamic3DTextLabel("(( Este jogador está brutalmente ferido\n/ferimentos para mais informações\n))", 0xFF4B00FF, 0.0, 0.0, 0.7, DISTANCIA_FERIMENTOS, playerid);
		TempoDesistir[playerid] = 600;

		SetPlayerPosLogin(playerid, PlayerInfo[playerid][pPos][0], PlayerInfo[playerid][pPos][1], PlayerInfo[playerid][pPos][2], 1);

		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
		ComAnim[playerid] = 0;
		ClearAnimations(playerid, 1);


		ApplyAnimation(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1, 1);
		ApplyAnimation(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1, 1);

		Anim2Morreu[playerid] = SetTimerEx("AnimMorreu", ANIM_DOIS_MORTE, false, "d", playerid);
		TelaLoginDel(playerid);
	}
	else if(PlayerInfo[playerid][pMorto] == 2)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "VOCÊ LOGOU MORTO.");
		SetPlayerHealth(playerid, 20);
		P_Health[playerid] = 20;

		PlayerInfo[playerid][pMorto] = 1;
		AcabouDeMorrer[playerid] = 5;

		TogglePlayerControllable(playerid, 0);
		SendClientMessage(playerid, COLOR_LIGHTRED, "Você está morto, você pode aguardar um médico chegar ou aceitar a morte daqui a 3 minutos.");

		if (IsValidDynamic3DTextLabel(TextMorto[playerid])) DestroyDynamic3DTextLabel(TextMorto[playerid]);

		PlayerInfo[playerid][pMancando] = 0;

		TextMorto[playerid] = CreateDynamic3DTextLabel("(( Este jogador está brutalmente ferido\n/ferimentos para mais informações\n))", 0xFF4B00FF, 0.0, 0.0, 0.7, DISTANCIA_FERIMENTOS, playerid);
		TempoDesistir[playerid] = 600;
		
		SetPlayerPosLogin(playerid, PlayerInfo[playerid][pPos][0], PlayerInfo[playerid][pPos][1], PlayerInfo[playerid][pPos][2], 1);

		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
		ComAnim[playerid] = 0;
		ClearAnimations(playerid, 1);

		ApplyAnimation(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1, 1);
		ApplyAnimation(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1, 1);

		Anim2Morreu[playerid] = SetTimerEx("AnimMorreu", ANIM_DOIS_MORTE, false, "d", playerid);
		TelaLoginDel(playerid);
	}
	else if(PlayerInfo[playerid][pMorto] == 3)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "VOCÊ LOGOU MORTO.");
		SetPlayerHealth(playerid, 20);
		P_Health[playerid] = 20;

		PlayerInfo[playerid][pMorto] = 1;
		AcabouDeMorrer[playerid] = 5;

		TogglePlayerControllable(playerid, 0);
		SendClientMessage(playerid, COLOR_LIGHTRED, "Você está morto, você pode aguardar um médico chegar ou aceitar a morte daqui a 3 minutos.");

		if (IsValidDynamic3DTextLabel(TextMorto[playerid])) DestroyDynamic3DTextLabel(TextMorto[playerid]);

		PlayerInfo[playerid][pMancando] = 0;

		TextMorto[playerid] = CreateDynamic3DTextLabel("(( Este jogador está brutalmente ferido\n/ferimentos para mais informações\n))", 0xFF4B00FF, 0.0, 0.0, 0.7, DISTANCIA_FERIMENTOS, playerid);
		TempoDesistir[playerid] = 600;
		
		SetPlayerPosLogin(playerid, PlayerInfo[playerid][pPos][0], PlayerInfo[playerid][pPos][1], PlayerInfo[playerid][pPos][2], 1);

		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
		ComAnim[playerid] = 0;
		ClearAnimations(playerid, 1);

		ApplyAnimation(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1, 1);
		ApplyAnimation(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1, 1);

		Anim2Morreu[playerid] = SetTimerEx("AnimMorreu", ANIM_DOIS_MORTE, false, "d", playerid);
		TelaLoginDel(playerid);
	}
	SetPlayerPosFreeze(playerid, PlayerInfo[playerid][pPos][0], PlayerInfo[playerid][pPos][1], PlayerInfo[playerid][pPos][2],1);
	SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos][3]);
	SetPlayerInterior(playerid,PlayerInfo[playerid][pInterior]);
	SetPlayerVirtualWorld(playerid,PlayerInfo[playerid][pWorld]);
	//Login
	TelaLoginDel(playerid);

	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    new slot = GetVehicleSlot(vehicleid);
	if(slot > -1)
	{
	    if(VehicleInfo[slot][vCompany] > 0)
	    {
	        RepairVehicle(vehicleid);
			ResetVehicleDamage(vehicleid);
			VehicleInfo[slot][vFuel] = 100;
		}
		if(VehicleInfo[slot][vFaction] > 0)
	    {
	        RepairVehicle(vehicleid);
			ResetVehicleDamage(vehicleid);
			VehicleInfo[slot][vFuel] = 100;
		}
        DisableNeonsAndSirens(vehicleid);
		sync_attribs[vehicleid] = 1;
	    if(!IsPushbike(GetVehicleModel(vehicleid))) { StopEngine(vehicleid); } else if(IsPushbike(GetVehicleModel(vehicleid))) { StartEngine(vehicleid); }
	    sync_engine_off[vehicleid] = 1;
		if(!IsPushbike(GetVehicleModel(vehicleid))) { LockVehicle(vehicleid); } else if(IsPushbike(GetVehicleModel(vehicleid))) { UnlockVehicle(vehicleid); }
	    if(strlen(VehicleInfo[slot][vPlate])) { SetVehicleNumberPlate(vehicleid,VehicleInfo[slot][vPlate]); }
	   	SetVehicleDamage(vehicleid);
	}
	return 1;
}

stock DisableNeonsAndSirens(vehicleid)
{
	new slot = GetVehicleSlot(vehicleid);
	if(slot > -1)
	{
	    if(VehicleInfo[slot][vNeon])
	    {
	        RemoveNeons(vehicleid);
	    }
	}

	if (IsValidDynamicObject(VehicleInfo[slot][vSirene][0]))
	{
 		if(IsValidDynamicObject(VehicleInfo[slot][vSirene][0])) DestroyDynamicObject(VehicleInfo[slot][vSirene][0]);
		VehicleInfo[slot][vSirene][0] = 0;
	}
}

forward GetConnectedVehicleOwnerID(vehicleid);
public GetConnectedVehicleOwnerID(vehicleid)
{
	new vehowner = -1;
	new slot = GetVehicleSlot(vehicleid);
	if(slot == -1) { return -1; }
    for(new i = 0; i < MAX_PLAYERS; i ++)
    {
        if(IsPlayerConnected(i))
        {
            if(PlayerInfo[i][pID] == VehicleInfo[slot][vOwner])
            {
				vehowner = i;
            }
        }
    }
    return vehowner;
}

forward DestruirObjetosCarro(slot,vehicleid);
public DestruirObjetosCarro(slot,vehicleid)
{
    if(IsValidDynamicObject(VehicleInfo[slot][vObj1])) DestroyDynamicObject(VehicleInfo[slot][vObj1]);
    if(IsValidDynamicObject(VehicleInfo[slot][vObj2])) DestroyDynamicObject(VehicleInfo[slot][vObj2]);
    if(IsValidDynamicObject(VehicleInfo[slot][vObj3])) DestroyDynamicObject(VehicleInfo[slot][vObj3]);
    if(IsValidDynamicObject(VehicleInfo[slot][vObj4])) DestroyDynamicObject(VehicleInfo[slot][vObj4]);
    if(IsValidDynamicObject(VehicleInfo[slot][vObj5])) DestroyDynamicObject(VehicleInfo[slot][vObj5]);
    if(IsValidDynamicObject(VehicleInfo[slot][vObj6])) DestroyDynamicObject(VehicleInfo[slot][vObj6]);
   	if(IsValidDynamicObject(VehicleInfo[slot][vObj7])) DestroyDynamicObject(VehicleInfo[slot][vObj7]);
    if(IsValidDynamicObject(VehicleInfo[slot][vObj8])) DestroyDynamicObject(VehicleInfo[slot][vObj8]);
    if(IsValidDynamicObject(VehicleInfo[slot][vObj9])) DestroyDynamicObject(VehicleInfo[slot][vObj9]);
    if(IsValidDynamicObject(VehicleInfo[slot][vObj10])) DestroyDynamicObject(VehicleInfo[slot][vObj10]);

    RemoveNeons(vehicleid);

    for(new i = 0; i < MAX_OBJ_PER_VEHICLE; i++)
    {
    	if (IsValidDynamicObject(AttachedObjects[vehicleid][i])) DestroyDynamicObject(AttachedObjects[vehicleid][i]);
    }
    for(new cc = 0; cc < 101; cc++)
		CargaInfo[vehicleid][cSlot][cc] = 0;

    if(TemCarSign[vehicleid]) Delete3DTextLabel(vehicle3Dtext[vehicleid]);

    if(isTaxi[vehicleid])
   	{
   		if(IsValidDynamicObject(objTaxi[vehicleid])) DestroyDynamicObject(objTaxi[vehicleid]);
    	isTaxi[vehicleid]=false;
	}
	if(VehicleInfo[slot][vSirene][0] != 0)
	{
		if(IsValidDynamicObject(VehicleInfo[slot][vSirene][0])) DestroyDynamicObject(VehicleInfo[slot][vSirene][0]);
		VehicleInfo[slot][vSirene][0] = 0;
	}
    return 1;
}

forward OnVehicleDeathP2(slot);
public OnVehicleDeathP2(slot){

	if(slot > -1){
		if(VehicleInfo[slot][vSirene][0] != 0) {
			if(IsValidDynamicObject(VehicleInfo[slot][vSirene][0]))
				DestroyDynamicObject(VehicleInfo[slot][vSirene][0]);
			VehicleInfo[slot][vSirene][0] = 0;
		}

		DestruirObjetosCarro(slot, VehicleInfo[slot][vVehicle]);
		VehicleInfo[slot][vTuned] = false;
	    VehicleInfo[slot][vNeon] = 0;
		VehicleInfo[slot][vNeonState] = 0;

	    if(IsValidDynamicObject(VehicleInfo[slot][vObj1])) DestroyDynamicObject(VehicleInfo[slot][vObj1]);
	    if(IsValidDynamicObject(VehicleInfo[slot][vObj2])) DestroyDynamicObject(VehicleInfo[slot][vObj2]);
		if(IsValidDynamicObject(VehicleInfo[slot][vObj3])) DestroyDynamicObject(VehicleInfo[slot][vObj3]);
	    if(IsValidDynamicObject(VehicleInfo[slot][vObj4])) DestroyDynamicObject(VehicleInfo[slot][vObj4]);
	    if(IsValidDynamicObject(VehicleInfo[slot][vObj5])) DestroyDynamicObject(VehicleInfo[slot][vObj5]);
	    if(IsValidDynamicObject(VehicleInfo[slot][vObj6])) DestroyDynamicObject(VehicleInfo[slot][vObj6]);
	    if(IsValidDynamicObject(VehicleInfo[slot][vObj7])) DestroyDynamicObject(VehicleInfo[slot][vObj7]);
	    if(IsValidDynamicObject(VehicleInfo[slot][vObj8])) DestroyDynamicObject(VehicleInfo[slot][vObj8]);
	    if(IsValidDynamicObject(VehicleInfo[slot][vObj9])) DestroyDynamicObject(VehicleInfo[slot][vObj9]);
	    if(IsValidDynamicObject(VehicleInfo[slot][vObj10])) DestroyDynamicObject(VehicleInfo[slot][vObj10]);
	    ResetPortaMalas(slot);

	    DestroyVehicle(VehicleInfo[slot][vVehicle]);
		//CreateDynamicObject(3594, VehX, VehY, VehZ, 0.0, 0.0, VehAngle); //Aqui eu crio o objeto da carcaça e armazeno o id na variável Carcaca[vehicleid]
		VehicleInfo[slot][vVehicle] = -1;

		RefreshNeon(slot);
	}
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
    if(!IsValidVehicle(vehicleid)) return 0;

    new slot = GetVehicleSlot(vehicleid);
	if(slot > -1) {

	    new Float:VehX, Float:VehY, Float:VehZ, Float:VehAngle; //Aqui eu crio umas variáveis pra armazenar a posição do veículo
		GetVehiclePos(vehicleid, VehX, VehY, VehZ); //Pego a posição X, Y e Z do veículo
		GetVehicleZAngle(vehicleid, VehAngle); //E o angulo do veículo

	    if(VehicleInfo[slot][vFaction] > 0 || VehicleInfo[slot][vCompany] > 0) {
     		SetVehicleToRespawn(vehicleid);
       		RepairVehicle(vehicleid);
        	return 1;
		}

		new vehowner = GetConnectedVehicleOwnerID(vehicleid);
	    if(vehowner > -1 )
	    {
	        ClearMods(vehicleid);
	        GastarVeiculo(slot, 1, 20.0);

	        if(VehicleInfo[slot][vInsurance] > 0 && VehZ > 1)
	        {
				new vname[256];
				new str[256];
				GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
		        VehicleInfo[slot][vDestroyed] ++;
				format(str,sizeof(str),"[!] O seu %s foi destruido! A empresa seguradora cobriu.",vname,VehicleInfo[slot][vInsurance]);
				SendClientMessage(vehowner,COLOR_LIGHTRED,str);

				VehicleInfo[slot][vSpawnX] = 2333.0037;
				VehicleInfo[slot][vSpawnY] = -2080.2627;
				VehicleInfo[slot][vSpawnZ] = 13.1274;
				VehicleInfo[slot][vSpawnR] = 0.0;

				OnVehicleDeathP2(slot);
			}
			else
			{
			    if(VehicleInfo[slot][vLastDriver] == vehowner)
			    {
					//new price_of_car = GetVehiclePrice(VehicleInfo[slot][vModel]);
					new price_to_keep_car = 2500;
					
			        new vname[256];
					new str[256];
					GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
					VehicleInfo[slot][vInsurance] = 0;
			        VehicleInfo[slot][vDestroyed] ++;

			        format(str,sizeof(str)," Você jogou o seu %s na agua, portanto, a seguradora resolveu não cobrir o prejuizo e cancelar o seu seguro.",vname);
					SendClientMessage(vehowner,COLOR_LIGHTGREEN,str);
					format(str,sizeof(str)," Você tem 72 horas para pagar R$%d caso deseje recuperar seu veiculo. (( /aceitarcobranca ))",price_to_keep_car);
					SendClientMessage(vehowner,COLOR_LIGHTGREEN,str);

					OnVehicleDeathP2(slot);
					VehicleInfo[slot][vDeathTime] = 259200;
				}
				else
			    {
					new vname[256];
					new str[256];
					GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
			        VehicleInfo[slot][vDestroyed] ++;
					format(str,sizeof(str),"[!] O seu %s foi destruido! A empresa seguradora cobriu.",vname,VehicleInfo[slot][vInsurance]);
					SendClientMessage(vehowner,COLOR_LIGHTRED,str);

					VehicleInfo[slot][vSpawnX] = 2333.0037;
					VehicleInfo[slot][vSpawnY] = -2080.2627;
					VehicleInfo[slot][vSpawnZ] = 13.1274;
					VehicleInfo[slot][vSpawnR] = 0.0;

					OnVehicleDeathP2(slot);
				}

			}
	    }
	    else
         	OnVehicleDeathP2(slot);

	    new vname[256];
		GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
	    new strdeath[120];
    	format(strdeath, sizeof(strdeath), "O veiculo %s (SQLID: %i) foi destruido por: %s.", vname,VehicleInfo[slot][vID], PlayerName(killerid,0));
    	VehicleDeath(strdeath);
	}
	return 1;
}
COMMAND:darpet(playerid, params[])
{
    new targetid, petmodel;
	new petzin[256];

    if(PlayerInfo[playerid][pAdmin] <= 5) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FFFFFF}Você não é um administrador.");

    if(sscanf(params, "ud", targetid, petmodel))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /darpet [playerid] [petmodel]");

    if(!IsValidPetModel(petmodel))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Modelo de pet invalido!");   

    PetData[targetid][petModelID] = petmodel;
    format(petzin, sizeof(petzin), PetData[targetid][petName], 128, "Jack");
    format(petzin, sizeof(petzin), "Você deu um pet para %s.", PlayerName(targetid, 0));
    SendClientMessage(playerid, COLOR_WHITE, petzin);

    return 1;
}

COMMAND:petmenu(playerid, params[])
{
    if(!PetData[playerid][petModelID])
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não possui um pet.");
	if(PlayerInfo[playerid][pDoador] < 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um premium.");

    ShowPetMenu(playerid);
    return 1;
}

UpdatePetText3D(playerid, Float:x, Float:y, Float:z)
{
    if(IsValidDynamic3DTextLabel(PetData[playerid][petText]))
    {
        Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, PetData[playerid][petText], E_STREAMER_X, x);
        Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, PetData[playerid][petText], E_STREAMER_Y, y);
        Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, PetData[playerid][petText], E_STREAMER_Z, z);
    }
    return 1;
}

IsPetSpawned(playerid)
{
    if(PetData[playerid][petSpawn])
        return 1;

    return 0;
}

ShowPetMenu(playerid)
{
    new stringpet[256];
	format(stringpet, sizeof(stringpet), "Ação: Spawnar\n{FF0000}Despawnar\nNome\nAção: Fica\nAção: Segue\nAção: Sentar\nAção: Deitar\nAção: Pular");
    Dialog_Show(playerid, PETMENU, DIALOG_STYLE_LIST, "Pet Menu", stringpet, "Escolher", "Fechar");
    
	return 1;
}

PetSpawn(playerid)
{
    if(PetData[playerid][petSpawn])
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem um pet spawnado.");

    if(GetPlayerVirtualWorld(playerid) != 0)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode spawnar um pet em outro VW.");

    new petmodelid = PetData[playerid][petModelID], stringpet[256];

    new Float:fX, Float:fY, Float:fZ, Float:fAngle;

    GetXYInFrontOfPlayer(playerid, fX, fY, -1.0);
    GetPlayerPos(playerid, fZ, fZ, fZ);
    GetPlayerFacingAngle(playerid, fAngle);

    PetData[playerid][petModel] = CreateActor(petmodelid, fX, fY+2, fZ, fAngle);

    format(stringpet, sizeof(stringpet), "Dono: %s", ReturnName(playerid));
    PetData[playerid][petText] = CreateDynamic3DTextLabel(stringpet, COLOR_WHITE, fX, fY+1, fZ, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);


    PetData[playerid][petSpawn] = true;
    PetData[playerid][petStatus] = PET_FOLLOW;
    SendClientMessage(playerid, COLOR_WHITE, "Você spawnou seu pet.");
    PetData[playerid][petTimer] = repeat Pet_Update(playerid, playerid);
    return 1;
}


PetDespawn(playerid)
{
    if(PetData[playerid][petSpawn])
    {
        if(IsValidActor(PetData[playerid][petModel]))
            DestroyActor(PetData[playerid][petModel]);
        
        if(IsValidDynamic3DTextLabel(PetData[playerid][petText]))
            DestroyDynamic3DTextLabel(PetData[playerid][petText]);

        PetData[playerid][petModel] = INVALID_ACTOR_ID;
        PetData[playerid][petText] = Text3D:INVALID_STREAMER_ID;
        PetData[playerid][petStatus] = PET_NONE;
        PetData[playerid][petSpawn] = false;
        stop PetData[playerid][petTimer];

        SendClientMessage(playerid, COLOR_WHITE, "Pet guardado.");
    }
    return 1;
}

PetSit(playerid)
{
    if(!IsPetSpawned(playerid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Seu pet não está spawnado.");

    if(IsValidActor(PetData[playerid][petModel]))
    {
        PetData[playerid][petStatus] = PET_SIT;
        stop PetData[playerid][petTimer];
        ClearDynamicActorAnimations(PetData[playerid][petModel]);
        ApplyActorAnimation(PetData[playerid][petModel], "ped", "SEAT_down", 4.1, 0, 0, 0, 1, 0);
        SendClientMessage(playerid, COLOR_WHITE, "O pet está sentado.");
    }
    return 1;
}

PetLay(playerid)
{
    if(!IsPetSpawned(playerid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Seu pet não está spawnado.");

    if(IsValidActor(PetData[playerid][petModel]))
    {
        PetData[playerid][petStatus] = PET_LAY;
        stop PetData[playerid][petTimer];
        ClearDynamicActorAnimations(PetData[playerid][petModel]);
        ApplyActorAnimation(PetData[playerid][petModel], "CRACK", "crckidle2", 4.1, 0, 0, 0, 1, 0);
        SendClientMessage(playerid, COLOR_WHITE, "O pet está deitado.");
    }
    return 1;
}


PetJump(playerid)
{
    if(!IsPetSpawned(playerid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Seu pet não está spawnado.");

    if(IsValidActor(PetData[playerid][petModel]))
    {
        PetData[playerid][petStatus] = PET_LAY;
        stop PetData[playerid][petTimer];
        ClearDynamicActorAnimations(PetData[playerid][petModel]);
        ApplyActorAnimation(PetData[playerid][petModel], "BSKTBALL", "BBALL_DEF_JUMP_SHOT", 4.1, 1, 0, 0, 0, 0);
        SendClientMessage(playerid, COLOR_WHITE, "O seu pet está pulando!");
    }
    return 1;
}

PetStay(playerid)
{
    if(!IsPetSpawned(playerid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Seu pet não está spawnado.");

    if(IsValidActor(PetData[playerid][petModel]))
    {
        PetData[playerid][petStatus] = PET_STAY;
        stop PetData[playerid][petTimer];
        ClearDynamicActorAnimations(PetData[playerid][petModel]);
        SendClientMessage(playerid, COLOR_WHITE, "ERRO:{FFFFFF} Seu pet não está executando a animação.");
    }
    return 1;
}


PetFollow(playerid, targetid)
{
    if(!IsPetSpawned(playerid))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Seu pet não está spawnado.");

    if(IsValidActor(PetData[playerid][petModel]))
    {
        if(PetData[playerid][petStatus] == PET_FOLLOW)
        {
            stop PetData[playerid][petTimer];
        }
        PetData[playerid][petStatus] = PET_FOLLOW;
        ClearActorAnimations(PetData[playerid][petModel]);
        PetData[playerid][petTimer] = repeat Pet_Update(playerid, targetid);
        SendClientMessage(playerid, COLOR_LIGHTRED, "Seu pet agora está acompanhando.");
    }
    return 1;
}

PetName(playerid)
{
    if(PetData[playerid][petSpawn])
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Guarde seu pet primeiro!");

    if(strcmp(PetData[playerid][petName], "Jack", true))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "O nome do seu pet não pode mais ser alterado!");

    Dialog_Show(playerid, PET_NAME, DIALOG_STYLE_INPUT, "Nome", "AVISO: Você só pode alterar os nomes dos animais de estimação uma vez\n\nInsira o Nome:", "Insirir nome", "Cancelar");
    return 1;
}

Dialog:PET_NAME(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        if(isnull(inputtext) || IsNumeric(inputtext))
            return Dialog_Show(playerid, PET_NAME, DIALOG_STYLE_INPUT, "Nome", "ERROR: Preencha o nome\nInsira o Nome:", "Insirir nome", "Cancelar");

        if(strlen(inputtext) > 128)
            return Dialog_Show(playerid, PET_NAME, DIALOG_STYLE_INPUT, "Nome", "ERROR: Erro, o nome não pode ter mais de 128 caracteres\nInsira o Nome:", "Insirir nome", "Cancelar");

		new petzin[256];
        format(petzin, sizeof(petzin),PetData[playerid][petName], 128, "%s.", inputtext);
   	 	format(petzin, sizeof(petzin), "Você alterou o nome do pet para: %s.", inputtext);
    	SendClientMessage(playerid, COLOR_WHITE, petzin);
    }
    return 1;
}

Dialog:PETMENU(playerid, response, listitem, inputtext[])
{
    if(response)
    {
        switch(listitem)
        {
            case 0: PetSpawn(playerid);
            case 1: PetDespawn(playerid);
            case 2: PetName(playerid);
            case 3: PetStay(playerid);
            case 4: Dialog_Show(playerid, PET_MENU_FOLLOW, DIALOG_STYLE_INPUT, "Ação: Seguir", "Insira o ID do jogador que você queria que seu pet segue\nPreencha vazio se você quiser seguir a si mesmo!", "Seguir", "Cancelar");
            case 5: PetSit(playerid);
            case 6: PetLay(playerid);
            case 7: PetJump(playerid);
        }
    }
    return 1;
}
Dialog:PET_MENU_FOLLOW(playerid, response, listitem, inputtext[]) {
    if(response) {
        new targetid;
        if(isnull(inputtext))
            return PetFollow(playerid, playerid);

        if(!IsNumeric(inputtext))
            return Dialog_Show(playerid, PET_MENU_FOLLOW, DIALOG_STYLE_INPUT, "Ação: Seguir", "{FFFFFF}Insira o ID do jogador que você deseja que seu pet siga:", "Seguir", "Cancelar");

        if(sscanf(inputtext, "u", targetid))
            return Dialog_Show(playerid, PET_MENU_FOLLOW, DIALOG_STYLE_INPUT, "Ação: Seguir", "{FF0000}ERRO:{FFFFFF} O ID inserido é inválido.\n\n{FFFFFF}Insira o ID do jogador que você deseja que seu pet siga:", "Seguir", "Cancelar");

        if(targetid == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, PET_MENU_FOLLOW, DIALOG_STYLE_INPUT, "Ação: Seguir", "{FF0000}ERRO:{FFFFFF} O jogador especificado é inválido.\n\n{FFFFFF}Insira o ID do jogador que você deseja que seu pet siga:", "Seguir", "Cancelar");
        
        if(!IsPlayerNearPlayer(playerid, targetid, 10.0)) return Dialog_Show(playerid, PET_MENU_FOLLOW, DIALOG_STYLE_INPUT, "Ação: Seguir", "{FF0000}ERRO:{FFFFFF} O jogador especificado não está perto o suficiente.\n\n{FFFFFF}Insira o ID do jogador que você deseja que seu pet siga:", "Seguir", "Cancelar");
        
        PetFollow(playerid, targetid);
    }
    return true;
}

stock Float:GetDistance2D(Float:x1, Float:y1, Float:x2, Float:y2) {
	return floatsqroot(
		((x1 - x2) * (x1 - x2)) +
		((y1 - y2) * (y1 - y2))
	);
}

stock Float:GetAbsoluteAngle(Float:angle) {
	while(angle < 0.0) {
		angle += 360.0;
	}
	while(angle > 360.0) {
		angle -= 360.0;
	}
	return angle;
}

// Returns the offset heading from north between a point and a destination
stock Float:GetAngleToPoint(Float:fPointX, Float:fPointY, Float:fDestX, Float:fDestY) {
	return GetAbsoluteAngle(-(
		90.0 - (
			atan2(
				(fDestY - fPointY),
				(fDestX - fPointX)
			)
		)
	));
}

stock GetXYFromAngle(&Float:x, &Float:y, Float:a, Float:distance) 
{
    x += (distance*floatsin(-a,degrees));
    y += (distance*floatcos(-a,degrees));
}


stock SetFacingPlayer(actorid, playerid)
{
    new Float:pX, Float:pY, Float:pZ;
    GetPlayerPos(playerid, pX, pY, pZ);

    return SetFacingPoint(actorid, pX, pY);
}

stock SetFacingPoint(actorid, Float:x, Float:y)
{

    new Float:pX, Float:pY, Float:pZ;
    GetActorPos(actorid, pX, pY, pZ);

    new Float:angle;

    if( y > pY ) angle = (-acos((x - pX) / floatsqroot((x - pX)*(x - pX) + (y - pY)*(y - pY))) - 90.0);
    else if( y < pY && x < pX ) angle = (acos((x - pX) / floatsqroot((x - pX)*(x - pX) + (y - pY)*(y - pY))) - 450.0);
    else if( y < pY ) angle = (acos((x - pX) / floatsqroot((x - pX)*(x - pX) + (y - pY)*(y - pY))) - 90.0);

    if(x > pX) angle = (floatabs(floatabs(angle) + 180.0));
    else angle = (floatabs(angle) - 180.0);

    return SetActorFacingAngle(actorid, angle);
}


IsValidPetModel(skinid)
{
    switch(skinid)
    {
        case 20069..20077:
            return 1;
    }
    return 0;
}

timer Pet_Update[100](playerid, targetid)
{
    if(PetData[playerid][petModelID] != 0 && PetData[playerid][petSpawn] && PetData[playerid][petStatus] == PET_FOLLOW)
    {

        if(!IsPlayerConnected(targetid) || GetActorVirtualWorld(PetData[playerid][petModel]) != GetPlayerVirtualWorld(targetid))
        {
            PetData[playerid][petStatus] = PET_STAY;
            stop PetData[playerid][petTimer];
            ClearActorAnimations(PetData[playerid][petModel]);
            return 1;
        }

        new 
            Float:plrX, Float:plrY, Float:plrZ,
            Float:actorX, Float:actorY, Float:actorZ, 
            Float:actorAngle, Float:playerAngle, animIndex
        ;

        GetActorPos(PetData[playerid][petModel], actorX, actorY, actorZ);
        GetPlayerPos(targetid, plrX, plrY, plrZ);
        GetPlayerFacingAngle(targetid, playerAngle);
        actorAngle = (GetAngleToPoint(actorX, actorY, plrX, plrY));

        animIndex = GetPlayerAnimationIndex(targetid);
        switch(animIndex)
        {
            case 1222..1236, 1246..1250:
            {
                
                if(GetDistance2D(plrX, plrY, actorX, actorY) > 3.0 && GetDistance2D(plrX, plrY, actorX, actorY) < 5.0)
                {
                    GetXYFromAngle(actorX, actorY, actorAngle, 0.1);
                    ApplyActorAnimation(PetData[playerid][petModel], "ped", "WALK_civi", 4.1, 1, 1, 1, 1, 0);
                    MapAndreas_FindZ_For2DCoord(actorX, actorY, actorZ);
                    SetFacingPlayer(PetData[playerid][petModel], targetid);
                    if(PetData[playerid][petModelID] == 20063) SetActorPos(PetData[playerid][petModel], actorX, actorY, actorZ+0.5);
                    else SetActorPos(PetData[playerid][petModel], actorX, actorY, actorZ+1);

                    UpdatePetText3D(playerid, actorX, actorY, actorZ+1.5);
                }
                else if(GetDistance2D(plrX, plrY, actorX, actorY) >= 5.0)
                {
                    GetXYFromAngle(actorX, actorY, actorAngle, 0.3);
                    ApplyActorAnimation(PetData[playerid][petModel], "ped", "run_civi", 4.1, 1, 1, 1, 1, 0);
                    MapAndreas_FindZ_For2DCoord(actorX, actorY, actorZ);
                    SetFacingPlayer(PetData[playerid][petModel], targetid);
                    if(PetData[playerid][petModelID] == 20063) SetActorPos(PetData[playerid][petModel], actorX, actorY, actorZ+0.5);
                    else SetActorPos(PetData[playerid][petModel], actorX, actorY, actorZ+1);

                    UpdatePetText3D(playerid, actorX, actorY, actorZ+1.5);
                }
            }
            default:
            {
                if (GetDistance2D(plrX, plrY, actorX, actorY) > 3.0 && GetDistance2D(plrX, plrY, actorX, actorY) < 5.0)
                {
                    GetXYFromAngle(actorX, actorY, actorAngle, 0.1);
                    ApplyActorAnimation(PetData[playerid][petModel], "ped", "WALK_civi", 4.1, 1, 1, 1, 1, 0);
                    MapAndreas_FindZ_For2DCoord(actorX, actorY, actorZ);
                    SetFacingPlayer(PetData[playerid][petModel], targetid);
                    if(PetData[playerid][petModelID] == 20063) SetActorPos(PetData[playerid][petModel], actorX, actorY, actorZ+0.5);
                    else SetActorPos(PetData[playerid][petModel], actorX, actorY, actorZ+1);

                    UpdatePetText3D(playerid, actorX, actorY, actorZ+1.5);
                }
                else if(GetDistance2D(plrX, plrY, actorX, actorY) >= 5.0)
                {
                    GetXYFromAngle(actorX, actorY, actorAngle, 0.3);
                    ApplyActorAnimation(PetData[playerid][petModel], "ped", "run_civi", 4.1, 1, 1, 1, 1, 0);
                    MapAndreas_FindZ_For2DCoord(actorX, actorY, actorZ);
                    SetFacingPlayer(PetData[playerid][petModel], targetid);
                    if(PetData[playerid][petModelID] == 20063) SetActorPos(PetData[playerid][petModel], actorX, actorY, actorZ+0.5);
                    else SetActorPos(PetData[playerid][petModel], actorX, actorY, actorZ+1);

                    UpdatePetText3D(playerid, actorX, actorY, actorZ+1.5);
                }
                else if(GetDistance2D(plrX, plrY, actorX, actorY) <= 3.0)
                {
                    ClearActorAnimations(PetData[playerid][petModel]);
                    UpdatePetText3D(playerid, actorX, actorY, actorZ+0.5);
                }
            }
        }
    }
    return 1;
}

COMMAND:aceitarcobranca(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;

    if(IsPlayerInRangeOfPoint(playerid,7.5,1500.2792,-1241.3109,14.5563))
	{
		new idx = 0;
		new tmp[64];
		tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessage(playerid, COLOR_LIGHTRED,"USO: /aceitarcobranca [Slot do Veículo (/v lista)]"); return 1; }
		new slot = strval(tmp);
		if(slot < 1) { SendClientMessage(playerid,COLOR_WHITE,"Slot do Veículo Inválido."); return 1; }
		AcceptVehicleCharge(playerid,slot);
    }
	else
	{
 		SendClientMessage(playerid,COLOR_LIGHTRED,"Você não esta na agência de seguros. (Marcada no mapa)");
   		SetPlayerCheckpoint(playerid,1500.2792,-1241.3109,14.5563,5.0);
	    cp_target[playerid] = 2;
	}
	return 1;
}

stock ResetVehicleDamage(vehicleid)
{
	new slot = GetVehicleSlot(vehicleid);
	if(slot > -1)
	{
		VehicleInfo[slot][vDamage][0] = 0;
		VehicleInfo[slot][vDamage][1] = 0;
		VehicleInfo[slot][vDamage][2] = 0;
		VehicleInfo[slot][vDamage][3] = 0;
		VehicleInfo[slot][vHealth] = 2000.0;

		SaveVehicle(slot);
    	SaveVehicleDamage(slot);
	}
}

forward ResetPortaMalas(slot);
public ResetPortaMalas(slot)
{
    VehicleInfo[slot][vSlotTipo1] = 0;
	VehicleInfo[slot][vSlot1] = 0;
	VehicleInfo[slot][vAmmo1] = 0;
	//===============================
	VehicleInfo[slot][vSlotTipo2] = 0;
	VehicleInfo[slot][vSlot2] = 0;
	VehicleInfo[slot][vAmmo2] = 0;
	//===============================
	VehicleInfo[slot][vSlotTipo3] = 0;
	VehicleInfo[slot][vSlot3] = 0;
	VehicleInfo[slot][vAmmo3] = 0;
	//===============================
	VehicleInfo[slot][vSlotTipo4] = 0;
	VehicleInfo[slot][vSlot4] = 0;
	VehicleInfo[slot][vAmmo4] = 0;
	//===============================
	VehicleInfo[slot][vSlotTipo5] = 0;
	VehicleInfo[slot][vSlot5] = 0;
	VehicleInfo[slot][vAmmo5] = 0;
	//===============================
	VehicleInfo[slot][vSlotTipo6] = 0;
	VehicleInfo[slot][vSlot7] = 0;
	VehicleInfo[slot][vAmmo7] = 0;
	//===============================
	VehicleInfo[slot][vSlotTipo8] = 0;
	VehicleInfo[slot][vSlot8] = 0;
	VehicleInfo[slot][vAmmo8] = 0;
	//===============================
	VehicleInfo[slot][vSlotTipo9] = 0;
	VehicleInfo[slot][vSlot9] = 0;
	VehicleInfo[slot][vAmmo9] = 0;
	//===============================
	VehicleInfo[slot][vSlotTipo10] = 0;
	VehicleInfo[slot][vSlot10] = 0;
	VehicleInfo[slot][vAmmo10] = 0;
	SaveVehicle(slot);
	return 1;
}

public OnPlayerText(playerid, text[])
{
	new str[256];
    if(strfind(text,"!kill",true) == 0) return Kick(playerid);
   	if(strfind(text,"www.samphax.tk",true) == 0) return Kick(playerid);
	if(strfind(text,"koplan",true) == 0) return Kick(playerid);
	if(strfind(text,"kopran",true) == 0) return Kick(playerid);
	if(strfind(text,"csp",true) == 0) return Kick(playerid);
	if(strfind(text,"csprp",true) == 0) return Kick(playerid);

    if(!PlayerInfo[playerid][pLogado]) return 0;
	if(PlayerInfo[playerid][pMorto] <= 1)
	{
	    //======================================================================

	    //======================================================================
		if(TrocandoInterior[playerid] != 9999)
		{
			if(strfind(text,"Proximo",true) == 0)
			{
				TrocandoInterior[playerid]++;
				if(TrocandoInterior[playerid] < 26)
				{
					SetPlayerPos(playerid, TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][3], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][4], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][5]-3);
					TogglePlayerControllable(playerid, 0);

					SetPlayerCameraPos(playerid, TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][3], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][4], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][5]);
					SetPlayerCameraLookAt(playerid, TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][6], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][7], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][8]);
				}
				else
				{
					TrocandoInterior[playerid] = 0;

					SetPlayerPos(playerid, TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][3], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][4], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][5]-3);
					TogglePlayerControllable(playerid, 0);

					SetPlayerCameraPos(playerid, TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][3], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][4], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][5]);
					SetPlayerCameraLookAt(playerid, TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][6], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][7], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][8]);
				}
				format(str,sizeof(str),"%s diz: %s", PlayerName(playerid, 1), text);
				ProxDetector(1.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 0;
			}
			else if(strfind(text,"Anterior",true) == 0)
			{
				TrocandoInterior[playerid]--;
				if(TrocandoInterior[playerid] >= 0)
				{
					SetPlayerPos(playerid, TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][3], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][4], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][5]-3);
					TogglePlayerControllable(playerid, 0);

					SetPlayerCameraPos(playerid, TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][3], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][4], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][5]);
					SetPlayerCameraLookAt(playerid, TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][6], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][7], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][8]);
				}
				else
				{
					TrocandoInterior[playerid] = 25;

					SetPlayerPos(playerid, TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][3], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][4], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][5]-3);
					TogglePlayerControllable(playerid, 0);

					SetPlayerCameraPos(playerid, TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][3], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][4], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][5]);
					SetPlayerCameraLookAt(playerid, TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][6], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][7], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][8]);
				}
				format(str,sizeof(str),"%s diz: %s", PlayerName(playerid, 1), text);
				ProxDetector(1.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 0;
			}
			else if(strfind(text,"Cancelar",true) == 0)
			{
				TrocandoInterior[playerid] = 9999;
				SetPlayerInterior(playerid, PlayerInfo[playerid][pInterior]);
				SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pWorld]);
				SetPlayerPosFreeze(playerid, PlayerInfo[playerid][pPos][0], PlayerInfo[playerid][pPos][1], PlayerInfo[playerid][pPos][2], 1);

				format(str,sizeof(str),"%s diz: %s", PlayerName(playerid, 1), text);
				ProxDetector(1.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 0;
			}
			else if(strfind(text,"Confirmar",true) == 0)
			{
				new c = PlayerInfo[playerid][pEntrouCasa];
				HouseInfo[c][hInX] = TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][0];
				HouseInfo[c][hInY] = TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][1];
				HouseInfo[c][hInZ] = TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][2];
				SetPlayerPosFreeze(playerid, TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][0], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][1], TrocaDeInt_Coordenadas[TrocandoInterior[playerid]][2], 1);
				SetCameraBehindPlayer(playerid);
				SalvarCasa(c);
				SCM(playerid, COLOR_LIGHTWHITE, "Parabéns, agora a sua casa tem um novo interior.");

				TrocandoInterior[playerid] = 9999;

				format(str,sizeof(str),"%s diz: %s", PlayerName(playerid, 1), text);
				ProxDetector(1.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 0;
			}
			else
			{
				SCM(playerid, COLOR_LIGHTGREEN, "_________________________________________________________________________________________");
				SCM(playerid, -1, "[!]Você está selecionando um novo interior para sua residência..");
				SCM(playerid, -1, "    Você pode digitar 'Proximo' para ver outro interior,");
				SCM(playerid, -1, "    Ou então 'Anterior' para voltar para o interior anterior.");
				SCM(playerid, -1, "      Quando encontrar um, diga 'Confirmar', caso desista fale 'Cancelar'.");

				format(str,sizeof(str),"%s diz: %s", PlayerName(playerid, 1), text);
				ProxDetector(1.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				return 0;
			}
		}
		//=================================================
        if(CelularData[playerid][EmLigacao] != 999 && CelularData[playerid][UsandoCelOrOre] == 1 && CelularData[playerid][LigandoOrelhaoAtendido] == 0)
		{
		    new falandocom = CelularData[playerid][EmLigacao], str_msg[256];
		    format(str_msg, sizeof(str_msg), "%s diz (celular): %s", PlayerName(playerid, 1), text);

		    if(PegarSinalCelular(playerid) < 40.0 || PegarSinalCelular(falandocom) < 40.0) FalhasDeSinal(text);

		    if(CelularData[falandocom][VivaVoz] == 0)
			{
		    	format(str, sizeof(str), "[CELULAR] %s diz: %s", PlayerName(playerid, 1), text);
		    	SendClientMessage(falandocom, COLOR_LINHATELEFONICA, str);
		    }
		    else
		    {
		        format(str, sizeof(str), "[VIVA VOZ] %s diz: %s", PlayerName(playerid, 1), text);
		    	ProxDetector(RANGE_VIVAVOZ, falandocom, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
		    }

		    ProxDetectorJanela(DISTANCIA_CHAT, playerid, str_msg, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		    return 0;
		}
		else if((CelularData[playerid][LigandoParaNum] > 100 && CelularData[playerid][LigandoParaNum] < 1000 && CelularData[playerid][LigandoParaNum] != 999) && (CelularData[playerid][LigandoParaNumAtendido] == 1 || CelularData[playerid][LigandoOrelhaoAtendido] == 1))
		{
		    new strop[26];
	     	if(CelularData[playerid][UsandoCelOrOre] == 1) format(strop,sizeof(strop),"[CELULAR]");
		    else format(strop,sizeof(strop),"[ORELHÃO]");

		    switch(CelularData[playerid][LigandoParaNum])
		    {
		        case 1:
		        {
		            format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
				    ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

                    SendClientMessage(playerid, COLOR_LINHATELEFONICA, "** Possivel ouvir um som de chamada desligada do outro lado da linha.");
					return 0;
		        }
		        case 101:
		        {
		            format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
				    ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

				    if(CelularData[playerid][VivaVoz] == 0)
					{
					    format(str, sizeof(str), "%s Atendente diz: A sua chamada está em espera, aguarde a transferência da linha.", strop);
			            SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
					}
					else
					{
					    format(str, sizeof(str), "[VIVA VOZ] Atendente diz: A sua chamada está em espera, aguarde a transferência da linha.");
		    			ProxDetectorJanela(RANGE_VIVAVOZ, playerid, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
					}
		            return 0;
		        }
		        case 444: // Taxistas
				{
				    format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
					ProxDetectorJanela(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);

					new taxs = 0, StrMsg[128], msg[128];
				    for(new i =0 ; i < MAX_PLAYERS; i++)
				    {
				        if(PlayerInfo[i][pRadioChan] == 444)
				        {
				            taxs++;
				        }
				    }
				    if(taxs == 0) format(msg, 128, "Atendente diz: Sinto informar mas não temos taxistas disponiveis no momento.");
				    else
					{
						format(msg, 128, "Atendente diz: Certo, assim que sua chamada for aceita o senhor receberá um SMS informando. (Se preciso use /cancelartaxi )");


	                    format(StrMsg, sizeof(StrMsg), "**[CH: 444] Central: Há um chamado para ser atendido em: %s. (use '/chamada %d' para aceitar a chamada)", text, playerid);
						SendRadioMessage(0xFFFF79FF,444,StrMsg);

						ChamouTaxi[playerid] = 1;
					}
				    SCM(playerid, COLOR_YELLOW, msg);

				    CelularData[playerid][LigandoParaNum] = 1;
					return 0;
				}
				case 555: // Mecanicos
				{
				    format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
					ProxDetectorJanela(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);

					new mecs = 0, StrMsg[128], msg[128];
				    for(new i =0 ; i < MAX_PLAYERS; i++)
				    {
				        if(PlayerInfo[i][pRadioChan] == 555)
				        {
				            mecs++;
				        }
				    }
				    if(mecs == 0) format(msg, 128, "Atendente diz: Sinto informar mas não temos mecânicos disponiveis no momento.");
				    else
					{
						format(msg, 128, "Atendente diz: Certo, assim que sua chamada for aceita o senhor receberá um SMS informando.");


	                    format(StrMsg, sizeof(StrMsg), "**[CH: 555] Central: Há um chamado para ser atendido em: %s.", text);
						SendRadioMessage(0xFFFF79FF,555,StrMsg);

						ChamouMec[playerid] = 1;
					}
				    SCM(playerid, COLOR_YELLOW, msg);

				    CelularData[playerid][LigandoParaNum] = 1;
					return 0;
				}
				case 221: // Anuncios
				{
				    if(strfind(text, "Empresa", true) != -1 || strfind(text, "empresa", true) != -1 || strfind(text, "EMPRESA", true) != -1)
	                {
	                    format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
				    	ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

						new empresas = 0;
						for(new emps = 1; emps < MAX_EMPRESAS; emps++)
						{
						    if(EmpInfo[emps][eDono] == PlayerInfo[playerid][pID])
			            	{
			            	    empresas++;
			            	}
						}
						if(empresas > 0)
						{
							if(CelularData[playerid][VivaVoz] == 0)
							{
			                    format(str, sizeof(str), "%s Atendente diz: Certo, você fará um anuncio de empresa, digite o texto do anúncio por favor...", strop);
				            	SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
							}
							else
							{
							    format(str, sizeof(str), "[VIVA VOZ] Atendente diz: Certo, você fará um anuncio de empresa, digite o texto do anúncio por favor...");
			    				ProxDetectorJanela(RANGE_VIVAVOZ, playerid, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
							}
							CelularData[playerid][LigandoParaNum] = 223;
						}
						else
						{
						    if(CelularData[playerid][VivaVoz] == 0)
							{
			                    format(str, sizeof(str), "%s Atendente diz: Desculpe-me, mas você não tem nenhuma empresa, envie um anúncio particular.", strop);
				            	SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
							}
							else
							{
							    format(str, sizeof(str), "[VIVA VOZ] Atendente diz: Desculpe-me, mas você não tem nenhuma empresa, envie um anúncio particular.");
			    				ProxDetectorJanela(RANGE_VIVAVOZ, playerid, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
							}
						}
	                    return 0;
	                }
	                else if(strfind(text, "Particular", true) != -1 || strfind(text, "particular", true) != -1 || strfind(text, "PARTICULAR", true) != -1)
	                {
	                    format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
				    	ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

	                    if(CelularData[playerid][VivaVoz] == 0)
						{
	                    	format(str, sizeof(str), "%s Atendente diz: Atendente diz: Certo, você fará um anuncio particular, digite o texto do anúncio por favor...", strop);
		            		SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
						}
						else
						{
						    format(str, sizeof(str), "[VIVA VOZ] Atendente diz: Atendente diz: Certo, você fará um anuncio particular, digite o texto do anúncio por favor...");
		    				ProxDetectorJanela(RANGE_VIVAVOZ, playerid, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
						}

						CelularData[playerid][LigandoParaNum] = 224;
	                    return 0;
	                }
					else
					{
					    format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
				    	ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

	                    if(CelularData[playerid][VivaVoz] == 0)
						{
	                    	format(str, sizeof(str), "%s Atendente diz: Desculpe mas eu não lhe entendi, qual tipo de anúncio você fará? ((Particular ou Empresa))", strop);
		            		SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
						}
						else
						{
						    format(str, sizeof(str), "[VIVA VOZ] Atendente diz: Desculpe mas eu não lhe entendi, qual tipo de anúncio você fará? ((Particular ou Empresa))");
		    				ProxDetectorJanela(RANGE_VIVAVOZ, playerid, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
						}
					    return 0;
					}
				}
				case 223: // Anuncio -> Empresas
				{
					if(strlen(text) > 100)
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"O tamanho do anúncio não pode exceder 100 caracteres.");
						return 0;
					}
					for(new anid = 0; anid < 100; anid++)
				    {
        				if(AnuncioLista[anid][AnuncioDono] == PlayerInfo[playerid][pID])
				        {
				            SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem um anúncio pendente, aguarde até ele ser enviado.");
							return 0;
				        }
					}
	    			new fila = 0;
	    			for(new anid = 0; anid < 100; anid++)
				    {
        				if(AnuncioLista[anid][AnuncioDono] != 0)
				        {
				            fila++;
						}
					}
				    for(new anid = 0; anid < 100; anid++)
				    {
        				if(AnuncioLista[anid][AnuncioDono] == 0)
				        {
				            new price = (1 * strlen(text));

					        AnuncioLista[anid][AnuncioDono] = PlayerInfo[playerid][pID];
					        format(AnuncioLista[anid][AnuncioPor], 24, "%s", PlayerName(playerid, 0));
					        format(AnuncioLista[anid][AnuncioMsg], 162, "[Anúncio] %s", text);

					        SendClientMessage(playerid,COLOR_WHITE,"|-----[Anúncio - São Paulo]-----|");
					   		format(string,sizeof(string),"Número de Caracteres: %d.",strlen(text));
					   		SendClientMessage(playerid,COLOR_WHITE,string);
					   		SendClientMessage(playerid,COLOR_WHITE,"Taxa: R$1 por caractere.");
							format(string,sizeof(string),"Total: R$%d.",price);
							SendClientMessage(playerid,COLOR_WHITE,string);
							format(string,sizeof(string),"Existem %d anuncios na frente do seu. Ele será enviado em breve.",fila);
							SendClientMessage(playerid,COLOR_WHITE,string);
							GivePlayerMoneyCA(playerid, -price);

							DesligarChamada(playerid, 1);

							new strl[326];
						   	format(strl, sizeof(strl), "%s anunciou: %s", PlayerName(playerid,0), text);
						  	LogCMD_Anuncio(strl);
						  	break;
				        }
					}
					return 0;
				}
				case 224: // Anuncio -> Particular
				{
					if(strlen(text) > 100)
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"O tamanho do anúncio não pode exceder 100 caracteres.");
						return 0;
					}
					for(new anid = 0; anid < 100; anid++)
				    {
        				if(AnuncioLista[anid][AnuncioDono] == PlayerInfo[playerid][pID])
				        {
				            SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem um anúncio pendente, aguarde até ele ser enviado.");
							return 0;
				        }
					}
	    			new fila = 0;
	    			for(new anid = 0; anid < 100; anid++)
				    {
        				if(AnuncioLista[anid][AnuncioDono] != 0)
				        {
				            fila++;
						}
					}
				    for(new anid = 0; anid < 100; anid++)
				    {
        				if(AnuncioLista[anid][AnuncioDono] == 0)
				        {
				            new price = (1 * strlen(text));


				            new orelhao_id = 999,
				                playernum[16];
							if(CelularData[playerid][LigandoOrelhaoAtendido] == 1)
							{
								orelhao_id = CelularData[playerid][LigandoOrelhao];
								if(orelhao_id != 999) format(playernum, sizeof(playernum), "024-%.3s-%.3s", TelPublico[orelhao_id][orPrefixo],TelPublico[orelhao_id][orNumero]);
								else format(playernum, sizeof(playernum), "%d", CelularData[playerid][celNumero]);
							}
							else
								format(playernum, sizeof(playernum), "#%d", CelularData[playerid][celNumero]);

					        AnuncioLista[anid][AnuncioDono] = PlayerInfo[playerid][pID];
					        format(AnuncioLista[anid][AnuncioPor], 24, "%s", PlayerName(playerid, 0));
					        format(AnuncioLista[anid][AnuncioMsg], 162, "[Anúncio] %s, Telefone: %s", text, playernum);

					        SendClientMessage(playerid,COLOR_WHITE,"|-----[Anúncio  São Paulo]-----|");
					   		format(string,sizeof(string),"Número de Caracteres: %d.",strlen(text));
					   		SendClientMessage(playerid,COLOR_WHITE,string);
					   		SendClientMessage(playerid,COLOR_WHITE,"Taxa: R$1 por caractere.");
							format(string,sizeof(string),"Total: R$%d.",price);
							SendClientMessage(playerid,COLOR_WHITE,string);
							format(string,sizeof(string),"Existem %d anuncios na frente do seu. Ele será enviado em breve.",fila);
							SendClientMessage(playerid,COLOR_WHITE,string);
							GivePlayerMoneyCA(playerid, -price);

							if(orelhao_id != 999)
								DesligarChamada(playerid, 7);
							else
							    DesligarChamada(playerid, 1);

							new strl[326];
						   	format(strl, sizeof(strl), "%s anunciou: %s", PlayerName(playerid,0), text);
						  	LogCMD_Anuncio(strl);
						  	break;
				        }
					}
					return 0;
				}
		        case 190: // Emergencia
				{
	                if(strfind(text, "policia", true) != -1 || strfind(text, "policia", true) != -1 || strfind(text, "POLICIA", true) != -1)
	                {
	                    format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
				    	ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

	                    if(CelularData[playerid][VivaVoz] == 0)
						{
		                    format(str, sizeof(str), "%s Atendente diz: Estou transferindo sua ligação para a Polícia, aguarde um momento...", strop);
			            	SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
						}
						else
						{
						    format(str, sizeof(str), "[VIVA VOZ] Atendente diz: Estou transferindo sua ligação para a Polícia, aguarde um momento...");
		    				ProxDetectorJanela(RANGE_VIVAVOZ, playerid, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
						}

						OutrasInfos[playerid][o911Tipo] = 1;
	                    new tempo = randomEx(4, 8);
						CelularData[playerid][DelayCelular] = SetTimerEx("TempoParaAtenderem911", (tempo*50), false, "dd", playerid,1);
	                    CelularData[playerid][LigandoParaNum] = 101;
	                    return 0;
	                }
	                else if(strfind(text, "bombeiros", true) != -1 || strfind(text, "Bombeiros", true) != -1 || strfind(text, "BOMBEIROS", true) != -1)
	                {
	                    format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
				    	ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

	                    if(CelularData[playerid][VivaVoz] == 0)
						{
	                    	format(str, sizeof(str), "%s Atendente diz: Estou transferindo sua ligação para os bombeiros, aguarde um momento...", strop);
		            		SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
						}
						else
						{
						    format(str, sizeof(str), "[VIVA VOZ] Atendente diz: Estou transferindo sua ligação para os bombeiros, aguarde um momento...");
		    				ProxDetectorJanela(RANGE_VIVAVOZ, playerid, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
						}

						OutrasInfos[playerid][o911Tipo] = 2;
	                    new tempo = randomEx(4, 8);
						CelularData[playerid][DelayCelular] = SetTimerEx("TempoParaAtenderem911", (tempo*50), false, "dd", playerid,2);
	                    CelularData[playerid][LigandoParaNum] = 5;
	                    return 0;
	                }
					else
					{
					    format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
				    	ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

	                    if(CelularData[playerid][VivaVoz] == 0)
						{
	                    	format(str, sizeof(str), "%s Atendente diz: Desculpe mas eu não lhe entendi, qual serviço você necessita? ((Policia ou bombeiros))", strop);
		            		SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
						}
						else
						{
						    format(str, sizeof(str), "[VIVA VOZ] Atendente diz: Desculpe mas eu não lhe entendi, qual serviço você necessita? ((Policia ou bombeiros))");
		    				ProxDetectorJanela(RANGE_VIVAVOZ, playerid, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
						}
					    return 0;
					}
				}
				case 191: // Emergencia > PMERJ - Nome
				{
				    format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
				    ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

	                if(CelularData[playerid][LigandoParaNumAtendido] == 1) if(PegarSinalCelular(playerid) < 40.0) FalhasDeSinal(text);
				    SetPVarString(playerid, "911_Nome", text);

				    if(CelularData[playerid][VivaVoz] == 0)
					{
					    format(str, sizeof(str), "%s Atendente diz: Nos informe a localização por favor...", strop);
		      			SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
					}
					else
					{
						format(str, sizeof(str), "[VIVA VOZ] Atendente diz: Nos informe a localização por favor...");
	 					ProxDetectorJanela(RANGE_VIVAVOZ, playerid, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
					}

				    CelularData[playerid][LigandoParaNum] = 192;
					return 0;
				}
				case 192: // Emergencia > PMERJ - Localização
				{
				    format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
				    ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

				    if(CelularData[playerid][LigandoParaNumAtendido] == 1) if(PegarSinalCelular(playerid) < 40.0) FalhasDeSinal(text);
				    SetPVarString(playerid, "911_Local", text);

				    if(CelularData[playerid][VivaVoz] == 0)
					{
				    	format(str, sizeof(str), "%s Atendente diz: Nos informe a situação por favor...", strop);
	      				SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
					}
					else
					{
					    format(str, sizeof(str), "[VIVA VOZ] Atendente diz: Nos informe a situação por favor...");
	 					ProxDetectorJanela(RANGE_VIVAVOZ, playerid, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
					}
				    CelularData[playerid][LigandoParaNum] = 193;

				    return 0;
				}
				case 193: // Emergencia > PMERJ - Final
				{
				    format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
				    ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

	                if(CelularData[playerid][LigandoParaNumAtendido] == 1) if(PegarSinalCelular(playerid) < 40.0) FalhasDeSinal(text);
					//======================
					if(CelularData[playerid][VivaVoz] == 0)
					{
						format(str, sizeof(str), "%s Atendente diz: Certo, estamos enviando a viatura mais próxima até o local.", strop);
	      				SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
					}
					else
					{
					    format(str, sizeof(str), "[VIVA VOZ] Atendente diz: Certo, estamos enviando a viatura mais próxima até o local.");
	 					ProxDetectorJanela(RANGE_VIVAVOZ, playerid, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
					}
					//Conteudo a enviar via 911
                    new Nome[24]; GetPVarString(playerid, "911_Nome", Nome, 24);
					new Local[24]; GetPVarString(playerid, "911_Local", Local, 24);
					SendFacMessage(COLOR_LIGHTBLUE, 1, "|__________EMERGENCIA POLICIAL__________|");
                    SendFacMessage(COLOR_LIGHTBLUE, 2, "|__________EMERGENCIA POLICIAL__________|");
					SendFacMessage(COLOR_LIGHTBLUE, 5, "|__________EMERGENCIA EXÉRCITO__________|");
					new orelhao_id = 999;
					if(CelularData[playerid][LigandoOrelhaoAtendido] == 1)
					{
						orelhao_id = CelularData[playerid][LigandoOrelhao];
						if(orelhao_id != 999)
					    {
	    					format(str, sizeof(str), "Relator: %s Contato: #024-%.3s-%.3s", Nome, TelPublico[orelhao_id][orPrefixo],TelPublico[orelhao_id][orNumero]);
   							SendFacMessage(COLOR_LIGHTBLUE, 1, str);
                            SendFacMessage(COLOR_LIGHTBLUE, 2, str);
							SendFacMessage(COLOR_LIGHTBLUE, 5, str);
						}
						else
						{
						    format(str, sizeof(str), "Relator: %s Contato: #%d", Nome, CelularData[playerid][celNumero]);
   							SendFacMessage(COLOR_LIGHTBLUE, 1, str);
                            SendFacMessage(COLOR_LIGHTBLUE, 2, str);
							SendFacMessage(COLOR_LIGHTBLUE, 5, str);
						}
					}
					else
					{
     					format(str, sizeof(str), "Relator: %s Contato: #%d", Nome, CelularData[playerid][celNumero]);
   						SendFacMessage(COLOR_LIGHTBLUE, 1, str);
                        SendFacMessage(COLOR_LIGHTBLUE, 2, str);
						SendFacMessage(COLOR_LIGHTBLUE, 5, str);
					}

                    new location[MAX_ZONE_NAME];
					GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
					format(str, sizeof(str), "Local: %s", Local);
	                SendFacMessage(COLOR_LIGHTBLUE, 1, str);
                    SendFacMessage(COLOR_LIGHTBLUE, 2, str);
					SendFacMessage(COLOR_LIGHTBLUE, 5, str);
	                format(str, sizeof(str), "Situação: %s", text);
	                SendFacMessage(COLOR_LIGHTBLUE, 1, str);
                    SendFacMessage(COLOR_LIGHTBLUE, 2, str);
					SendFacMessage(COLOR_LIGHTBLUE, 5, str);
	                format(str, sizeof(str), "Rastreador: %s",location);
	                SendFacMessage(COLOR_LIGHTBLUE, 1, str);
                    SendFacMessage(COLOR_LIGHTBLUE, 2, str);
					SendFacMessage(COLOR_LIGHTBLUE, 5, str);

                    if(strfind(text, "'") != -1)
					{
					    return 0;
					}
					else
					{
		                new string_m[1024];
			   			format(string_m,sizeof(string_m),"INSERT INTO last911 (nTelefone) VALUES ('%d') ", CelularData[playerid][celNumero]);
						mysql_function_query(Pipeline, string_m, false, "CriandoLast911", "d",playerid);
						format(OutrasInfos[playerid][o911Nome],128,"%s",Nome);
						format(OutrasInfos[playerid][o911Local],128,"%s",Local);
						format(OutrasInfos[playerid][o911Text],128,"%s",text);
						format(OutrasInfos[playerid][o911Reastreador],128,"%s",location);
					}
					//====================== [ Enviar Msg na área ]
					if(orelhao_id != 999)
						DesligarChamada(playerid, 7);
					else
					    DesligarChamada(playerid, 4);

					SendClientMessage(playerid, COLOR_WHITE, " Chamada desligada.");

					return 0;
				}
				case 194: // Emergencia > CBERJ - Nome
				{
				    format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
				    ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

	                if(CelularData[playerid][LigandoParaNumAtendido] == 1) if(PegarSinalCelular(playerid) < 40.0) FalhasDeSinal(text);
				    SetPVarString(playerid, "911_Nome", text);

				    if(CelularData[playerid][VivaVoz] == 0)
					{
				    	format(str, sizeof(str), "%s Atendente diz: Nos informe a localização por favor...", strop);
	      				SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
					}
					else
					{
					    format(str, sizeof(str), "[VIVA VOZ] Atendente diz: Nos informe a localização por favor...");
	 					ProxDetectorJanela(RANGE_VIVAVOZ, playerid, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
					}
				    CelularData[playerid][LigandoParaNum] = 195;
					return 0;
				}
				case 195: // Emergencia > CBERJ - Localização
				{
				    format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
				    ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

	                if(CelularData[playerid][LigandoParaNumAtendido] == 1) if(PegarSinalCelular(playerid) < 40.0) FalhasDeSinal(text);
				    SetPVarString(playerid, "911_Local", text);

				    if(CelularData[playerid][VivaVoz] == 0)
					{
				    	format(str, sizeof(str), "%s Atendente diz: Nos informe a situação por favor...", strop);
	      				SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
					}
					else
					{
					    format(str, sizeof(str), "[VIVA VOZ] Atendente diz: Nos informe a situação por favor...");
	 					ProxDetectorJanela(RANGE_VIVAVOZ, playerid, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
					}
				    CelularData[playerid][LigandoParaNum] = 196;

				    return 0;
				}
				case 196: // Emergencia > CBERJ - Final
				{
				    format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
				    ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	                if(CelularData[playerid][LigandoParaNumAtendido] == 1) if(PegarSinalCelular(playerid) < 40.0) FalhasDeSinal(text);

					//======================
					if(CelularData[playerid][VivaVoz] == 0)
					{
						format(str, sizeof(str), "%s Atendente diz: Certo, estamos enviando a unidade mais próxima até o local.", strop);
	      				SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
					}
					else
					{
					    format(str, sizeof(str), "[VIVA VOZ] Atendente diz: Nos informe a situação por favor...");
	 					ProxDetectorJanela(RANGE_VIVAVOZ, playerid, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
					}
					//Conteudo a enviar via 911
                    new Nome[24]; GetPVarString(playerid, "911_Nome", Nome, 24);
					new Local[24]; GetPVarString(playerid, "911_Local", Local, 24);
					SendFacMessage(COLOR_LIGHTBLUE, 3, "|__________Emergência Médica__________|");
					new orelhao_id = 999;
					if(CelularData[playerid][LigandoOrelhaoAtendido] == 1)
					{
						orelhao_id = CelularData[playerid][LigandoOrelhao];
						if(orelhao_id != 999)
					    {
	    					format(str, sizeof(str), "Relator: %s Contato: #024-%.3s-%.3s", Nome, TelPublico[orelhao_id][orPrefixo],TelPublico[orelhao_id][orNumero]);
   							SendFacMessage(COLOR_LIGHTBLUE, 3, str);
						}
						else
						{
						    format(str, sizeof(str), "Relator: %s Contato: #%d", Nome, CelularData[playerid][celNumero]);
   							SendFacMessage(COLOR_LIGHTBLUE, 3, str);
						}
					}
					else
					{
     					format(str, sizeof(str), "Relator: %s Contato: #%d", Nome, CelularData[playerid][celNumero]);
   						SendFacMessage(COLOR_LIGHTBLUE, 3, str);
					}

                    new location[MAX_ZONE_NAME];
					GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
					format(str, sizeof(str), "Local: %s", Local);
	                SendFacMessage(COLOR_LIGHTBLUE, 3, str);
	                format(str, sizeof(str), "Situação: %s", text);
	                SendFacMessage(COLOR_LIGHTBLUE, 3, str);
	                format(str, sizeof(str), "Rastreador: %s",location);
	                SendFacMessage(COLOR_LIGHTBLUE, 3, str);

	                new string_m[1024];
		   			format(string_m,sizeof(string_m),"INSERT INTO last911 (nTelefone) VALUES ('%d') ", CelularData[playerid][celNumero]);
					mysql_function_query(Pipeline, string_m, false, "CriandoLast911", "d",playerid);
					format(OutrasInfos[playerid][o911Nome],128,"%s",Nome);
					format(OutrasInfos[playerid][o911Local],128,"%s",Local);
					format(OutrasInfos[playerid][o911Text],128,"%s",text);
					format(OutrasInfos[playerid][o911Reastreador],128,"%s",location);
					//====================== [ Enviar Msg na área ]
					if(orelhao_id != 999)
						DesligarChamada(playerid, 7);
					else
					    DesligarChamada(playerid, 4);

					SendClientMessage(playerid, COLOR_WHITE, "Chamada desligada.");

					return 0;
				}
		        default:
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} #002 - Desligue a chamada e tenta novamente.");
					return 0;
				}
			}
		}
		else if(CelularData[playerid][UsandoCelOrOre] == 1 && CelularData[playerid][LigandoOrelhao] != 999 && CelularData[playerid][LigandoOrelhaoAtendido] == 1)
		{
		    new falandocom = TelPublico[CelularData[playerid][LigandoOrelhao]][orAtendeu];
	        format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
		    ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

		    if(PegarSinalCelular(playerid) < 40.0 || PegarSinalCelular(falandocom) < 40.0) FalhasDeSinal(text);
		    format(str, sizeof(str), "[CELULAR] %s diz: %s", PlayerName(playerid, 1), text);
		    SendClientMessage(falandocom, COLOR_LINHATELEFONICA, str);

		    /*if(CelularData[falandocom][VivaVoz] == 0)
			{
				format(str, sizeof(str), "[CELULAR] %s diz: %s", PlayerName(playerid, 1), text);
		    	SendClientMessage(falandocom, COLOR_LINHATELEFONICA, str);
			}
			else
			{
	  			format(str, sizeof(str), "[VIVA VOZ] %s diz: %s", PlayerName(playerid, 1), text);
				ProxDetectorJanela(RANGE_VIVAVOZ, falandocom, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
			}*/
			return 0;
		}
		else if(CelularData[playerid][UsandoCelOrOre] == 2 && CelularData[playerid][LigandoOrelhao] != 999 && CelularData[playerid][LigandoOrelhaoAtendido] == 1)
		{
		    new falandocom = TelPublico[CelularData[playerid][LigandoOrelhao]][orAtendeu];

		    format(str, sizeof(str), "%s diz (orelhão): %s", PlayerName(playerid, 1), text);
		    ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

		    if(PegarSinalCelular(falandocom) < 40.0) FalhasDeSinal(text);
		    format(str, sizeof(str), "[ORELHÃO] %s diz: %s", PlayerName(playerid, 1), text);
		    SendClientMessage(falandocom, COLOR_LINHATELEFONICA, str);
			return 0;
		}
		else if(CelularData[playerid][UsandoCelOrOre] == 1 && CelularData[playerid][AtendeuOrelhao] != 999 && CelularData[playerid][LigandoOrelhaoAtendido] == 1)
		{
		    new falandocom = TelPublico[CelularData[playerid][AtendeuOrelhao]][orLigou];

		    format(str, sizeof(str), "%s diz (celular): %s", PlayerName(playerid, 1), text);
		    ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

		    if(PegarSinalCelular(playerid) < 40.0 || PegarSinalCelular(falandocom) < 40.0) FalhasDeSinal(text);
		    if(CelularData[falandocom][VivaVoz] == 0)
			{
				format(str, sizeof(str), "[CELULAR] %s diz: %s", PlayerName(playerid, 1), text);
		    	SendClientMessage(falandocom, COLOR_LINHATELEFONICA, str);
			}
			else
			{
	  			format(str, sizeof(str), "[VIVA VOZ] %s diz: %s", PlayerName(playerid, 1), text);
				ProxDetectorJanela(RANGE_VIVAVOZ, falandocom, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
			}
			return 0;
		}
		else if(CelularData[playerid][UsandoCelOrOre] == 2 && CelularData[playerid][AtendeuOrelhao] != 999 && CelularData[playerid][LigandoOrelhaoAtendido] == 1)
		{
		    new falandocom = TelPublico[CelularData[playerid][AtendeuOrelhao]][orLigou];

		    format(str, sizeof(str), "%s diz (orelhão): %s", PlayerName(playerid, 1), text);
		    ProxDetectorJanela(DISTANCIA_CHAT, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

		    if(PegarSinalCelular(playerid) < 40.0 || PegarSinalCelular(falandocom) < 40.0) FalhasDeSinal(text);
		    format(str, sizeof(str), "[ORELHÃO] %s diz: %s", PlayerName(playerid, 1), text);
		    SendClientMessage(falandocom, COLOR_LINHATELEFONICA, str);
			return 0;
		}
		else
		{
			new chatstr[256];
		   	if(PlayerInfo[playerid][pMorto] == 1)
			{
				format(chatstr,sizeof(chatstr)," %s [baixo] diz: %s", PlayerName(playerid,1), text);
			}
			else
			{
	 			format(chatstr,sizeof(chatstr),"%s diz: %s", PlayerName(playerid,1), text);
			}
			ProxDetectorJanela(DISTANCIA_CHAT, playerid, chatstr,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		}

        if(PlayerInfo[playerid][pMorto] == 0 && !IsPlayerInAnyVehicle(playerid))
		{
		    if(ComAnim[playerid] == 0)
		    {
				if(OutrasInfos[playerid][oAlgemado] == 0 || OutrasInfos[playerid][oAmarrado] == 0)
				{
				    if(PlayerInfo[playerid][pChatStyle] > 0)
				    {
						switch(PlayerInfo[playerid][pChatStyle])
			 			{
			 				case 1: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 3.1,0,1,1,1,1,1);
			   				case 2: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkB", 3.1,0,1,1,1,1,1);
			      			case 3: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkC", 3.1,0,1,1,1,1,1);
			        		case 4: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkD", 3.1,0,1,1,1,1,1);
			         		case 5: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 3.1,0,1,1,1,1,1);
			          		case 6: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkF", 3.1,0,1,1,1,1,1);
			            	case 7: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkG", 3.1,0,1,1,1,1,1);
			             	case 8: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkH", 3.1,0,1,1,1,1,1);
						}
					}
				}
			}
		}
		return 0;
	}
	else
	{
		if(PlayerInfo[playerid][pMorto] > 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está muito ferido para falar!");
			return 0;
		}
	}
	return 0;
}

stock IsAWindowCar(playerid)
{
    new pveh = GetVehicleModel(GetPlayerVehicleID(playerid));
    if(pveh >= 400 && pveh <= 423 || pveh >= 425 && pveh <= 429 || pveh >= 431 && pveh <= 434 || pveh >= 436 && pveh <= 438
	|| pveh >= 440 && pveh <= 445 || pveh == 451 || pveh >= 455 && pveh <= 456 || pveh >= 458 && pveh <= 459
	|| pveh >= 466 && pveh <= 467 || pveh >= 469 && pveh <= 470 || pveh >= 474 && pveh <= 475 || pveh >= 477 && pveh <= 479
	|| pveh >= 482 && pveh <= 483 || pveh >= 487 && pveh <= 492 || pveh >= 494 && pveh <= 508 || pveh >= 514 && pveh <= 520
	|| pveh >= 524 && pveh <= 529 || pveh >= 534 && pveh <= 538 || pveh >= 540 && pveh <= 566 || pveh >= 576 && pveh <= 580
	|| pveh == 585 || pveh >= 587 && pveh <= 589 || pveh >= 596 && pveh <= 605)
    {
        return true;
    }
	return false;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	switch(success)
	{
		case 0:
		{
		    /*new strings[128];
	        format(strings, sizeof(strings),"{adc3e7}ERRO:{FFFFFF} O comando {adc3e7}'%s' não existe, utilize {adc3e7}/ajuda {FFFFFF}ou {adc3e7}/sos.", cmdtext);
	        return SendClientMessage(playerid,COLOR_WHITE,strings);*/
	        GameTextForPlayer(playerid, "~r~Comando invalido", 1000, 1);
	        return 1;
		}
		case 1:
		{
   			if(GetPVarInt(playerid, "Mute") == 0 && GetPVarInt(playerid, "CommandTime") == 0)
			{
   				SetPVarInt(playerid, "CommandSpam", GetPVarInt(playerid, "CommandSpam")+1);
   			 	if(GetPVarInt(playerid, "CommandSpam") >= 5)
	    		{
     			   	SetPVarInt(playerid, "Mute", 1);
		       		SetPVarInt(playerid, "CommandTime", 5);
		       		//SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você foi mutado de utilizar comandos por cinco segundos por spam !");
		        	return true;
		    	}
		    }
		}
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	new vid = GetVehicleSlot(vehicleid);
	if(vid > -1)
	{
	    if(ispassenger == 0) VehicleInfo[vid][vLastDriver] = playerid;

	    VehicleInfo[vid][vSemUso] = 3600;
	    if(VehicleInfo[vid][vLocked]) RemovePlayerFromVehicle(playerid);
		if(IsPushbike(VehicleInfo[vid][vModel]))
		{
		    new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(VehicleInfo[vid][vVehicle],engine,lights,alarm,doors,bonnet,boot,objective);

  			SetVehicleHealth(VehicleInfo[vid][vVehicle], 1000);
			SetVehicleParamsEx(VehicleInfo[vid][vVehicle],1,lights,alarm,doors,bonnet,boot,objective);
		}
	}
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if (Bit_Get(g_VehicleDriveBy, playerid)) removeDriveBy(playerid);
	else
	{
	    new vid = GetVehicleSlot(vehicleid);
		if(vid > -1) VehicleInfo[vid][vSemUso] = 3600;
	}

 	if(GetVehicleModel(vehicleid) == 457)
	{
		new modelid = ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaModelo];
 		if(modelid != 2) RemovePlayerWeapon(playerid, 2);
	}
	return 1;
}

stock RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12];
	new plyAmmo[12];

	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);

		if(wep != weaponid)
		{
			GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
		}
	}

	ResetPlayerWeapons(playerid);
	for(new slot = 0; slot != 12; slot++)
	{
		GivePlayerWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
	}
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(IsPlayerNPC(playerid)) return 1;

	if(newstate == PLAYER_STATE_ONFOOT)
	{
	    if(PlayerInfo[playerid][pJob] == JOB_TAXISTA && TransportDuty[playerid] > 0)
		{
		    if(TransportDuty[playerid] == 1) {
		        TaxiDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "Você está fora de serviço e ganhou R$%d.", TransportMoney[playerid]);
			SendClientMessage(playerid, COLOR_GREEN, string);
			PlayerInfo[playerid][pGrana] += TransportMoney[playerid];
			TransportValue[playerid] = 0;
			TransportMoney[playerid] = 0;
		}
		if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
		{
		    if(IsPlayerConnected(TransportDriver[playerid]))
			{
				if(PlayerInfo[playerid][pGrana] >= TransportCost[playerid]) {
				    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
				    TransportTime[TransportDriver[playerid]] = 0;
				    TransportCost[TransportDriver[playerid]] = 0;
				    format(string, sizeof(string), "~w~A corrida custou~n~~r~R$%d",TransportCost[playerid]);
				    GameTextForPlayer(playerid, string, 5000, 1);
				    format(string, sizeof(string), "~w~Passageiro saiu do taxi~n~~g~Ganhou R$%d",TransportCost[playerid]);
				    GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
					PlayerInfo[playerid][pGrana] -= TransportCost[playerid];
					TransportCost[playerid] = 0;
					TransportTime[playerid] = 0;
					TransportDriver[playerid] = 999;
				}
				else {
				    TransportMoney[TransportDriver[playerid]] += PlayerInfo[playerid][pGrana];
				    TransportTime[TransportDriver[playerid]] = 0;
				    TransportCost[TransportDriver[playerid]] = 0;
				    format(string, sizeof(string), "~w~A corrida custou~n~~r~R$%d", TransportCost[playerid]);
				    GameTextForPlayer(playerid, string, 5000, 1);
				    format(string, sizeof(string), "~w~Passageiro saiu do taxi~n~~g~Ganhou R$%d", PlayerInfo[playerid][pGrana]);
				    GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
					PlayerInfo[playerid][pGrana] = 0;

					format(string, sizeof string, "O passageiro não tem R$%d para paga-lo, e pagou-lhe apenas R$%d.", TransportCost[playerid], PlayerInfo[playerid][pGrana]);
					SCM(TransportDriver[playerid], COLOR_LIGHTRED, string);
					format(string, sizeof string, "A corrida custou R$%d, mas você só tinha R$%d para pagar ao taxista.", TransportCost[playerid], PlayerInfo[playerid][pGrana]);
					SCM(playerid, COLOR_LIGHTRED, string);

					TransportCost[playerid] = 0;
					TransportTime[playerid] = 0;
					TransportDriver[playerid] = 999;
				}
			}
		}
	}
	if(newstate == PLAYER_STATE_PASSENGER) // TAXI & BUSSES
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
        for(new i = 0; i <= MAX_PLAYERS; ++i)
	    {
	        if(IsPlayerConnected(i))
	        {
	            if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TransportDuty[i] > 0)
	            {
	                if(GetPlayerMoney(playerid) < TransportValue[i])
	                {
	                    format(string, sizeof(string), " Você precisa de R$%d para entrar.", TransportValue[i]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						RemovePlayerFromVehicle(playerid);
	                }
	                else
	                {
	                    if(TransportDuty[i] == 1)
	                    {
	                        if(PlayerInfo[playerid][pGrana] >= TransportValue[i])
	                        {
		                        format(string, sizeof(string), " Você pagou R$%d para o Taxista.", TransportValue[i]);
								SendClientMessage(playerid, COLOR_YELLOW, string);
								format(string, sizeof(string), " Passageiro %s entrou o seu Taxi.", PlayerName(playerid,1));
								SendClientMessage(i, COLOR_YELLOW, string);
								TransportTime[i] = 1;
		                    	TransportTime[playerid] = 1;
		                    	TransportCost[playerid] = TransportValue[i];
		                    	TransportCost[i] = TransportValue[i];
		                    	TransportDriver[playerid] = i;

		                    	PlayerInfo[playerid][pGrana] -= TransportValue[i];
								TransportMoney[i] += TransportValue[i];
							}
							else
							{
							    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro para entrar no taxi.");
							    RemovePlayerFromVehicle(playerid);
							}
	                    }
	                }
	            }
	        }
	    }
	}

	if(newstate == PLAYER_STATE_DRIVER) // PlAYER_STATE_DRIVER = 2
    {
        new idcar = GetPlayerVehicleID(playerid);
        if(idcar == Trem && !IsPlayerNPC(playerid))
    	/*{
			RemovePlayerFromVehicle(playerid);
			RemovePlayerFromVehicle(IsBot("Trainbot"));
			return PutPlayerInVehicle(IsBot("Trainbot"),Trem,0);
  		}*/
        if(PlayerInfo[playerid][pMorto] > 0)
        {
            SendClientMessage(playerid, COLOR_LIGHTRED,"Você está ferido demais para dirigir um veículo.");
        	RemovePlayerFromVehicle(playerid);
		}
		if (OutrasInfos[playerid][oAlgemado]) RemovePlayerFromVehicle(playerid);


		if(InGarbage(playerid))
		{
			if(PlayerInfo[playerid][pJob] != JOB_LIXEIRO)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid,COLOR_LIGHTRED," Apenas coletores de lixo podem usar este veículo.");
				return 1;
		    }
		    else
		    {
		        if(garbage_run[playerid] == -1)
		        {
					SendClientMessage(playerid,COLOR_LIGHTGREEN,"USE: /comecarcoleta para iniciar o trabalho.");
				}
		    }
		}

    }
    new vehicleid=GetPlayerVehicleID(playerid);
 	if(newstate == PLAYER_STATE_PASSENGER || newstate == PLAYER_STATE_DRIVER)
 	{
	 	lastcar[playerid] = GetPlayerVehicleID(playerid);

        new slot = GetVehicleSlot(vehicleid);
		if(slot > -1)
		{
			if(strlen(VehicleInfo[slot][vXMR]))
  			{
  			    if(ouvindoxmradio[playerid] == 0)
  			    {
					PlayAudioStreamForPlayer(playerid, VehicleInfo[slot][vXMR]);
					ouvindoxmradio[playerid] = 4;
				}
			}
		}
		else
		{
			StopAudioStreamForPlayer(playerid);
			ouvindoxmradio[playerid] = 0;
			ouvindoxmradioID[playerid] = 0;
		}
	}
   	if(oldstate == PLAYER_STATE_PASSENGER || oldstate == PLAYER_STATE_DRIVER)
   	{
   	    PlayerTextDrawHide(playerid, Speedo[playerid]);

		if(GetPVarInt(playerid, "CintoVeicular") == 1)
		{
		    SetPVarInt(playerid, "CintoVeicular", 0);
		}
   	}

   	if(newstate == PLAYER_STATE_PASSENGER || newstate == PLAYER_STATE_DRIVER)
   	{
   	    if(GetPVarInt(playerid, "TogHud") == 0)
	  	{
			PlayerTextDrawShow(playerid, Speedo[playerid]);
		}
   	}
	return 1;
}

CMD:loadgetway(playerid, params[]) {
	LoadGetWayFRZ(playerid);
	return 1;
}

stock IsVehicleRental(vehicleid)
{
	for(new c=0;c<sizeof(CarRent);c++) if(vehicleid == CarRent[c]) return 1;
	return 0;
}

stock GetVehicleRentalPrice(model)
{
	switch(model)
	{
	    case 492: return 100;
	    case 422: return 300;
	}
	return 0;
}

stock IsVehicleRented(vehicleid)
{
	foreach (new i : Player)
	{
		if(RentCarKey[i] == vehicleid) return 1;
	}
	return 0;
}


stock IsSeatTaken(vehicleid, seatid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == seatid) return 1;
	}
	return 0;
}
CMD:iniciarviagem(playerid)
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
 	if(PlayerInfo[playerid][pJob] != JOB_MOTORISTA) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um motorista de onibus."); 
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 437) return SCM(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você tem que estar em um ônibus (Coach) para começar a rota!");
	if(IsPlayerInRangeOfPoint(playerid, 5, 1737.5643,-1859.1648,13.4141))
    {
        SendClientMessage(playerid, COLOR_WHITE,"Serviço iniciado com sucesso! Siga o ícone vermelho no mapa para chegar ao primeiro ponto de ônibus!");
        if(BusJob[playerid] == 0)
        {
            BusJob[playerid] = 1;
            SetPlayerCheckpoint(playerid,1807.4921,-1859.1929,13.4141, 3.0);
            TimerBus[playerid] = SetTimerEx("RotaBus", TEMPO, false, "i",playerid);
        }
    }
    return 1;
}
 
forward RotaBus(playerid);
public RotaBus(playerid)
{
    TimerBus[playerid] = SetTimerEx("MsgBus", 100, false, "i",playerid);
    TogglePlayerControllable(playerid,1);
    return 1;
}
 
forward MsgBus(playerid);
public MsgBus(playerid)
{
    new quantia = 80;
    new msg[256];
    format(msg, sizeof(msg),"INFO: Você recebeu R$%d! Siga o checkpoint no mapa para chegar ao próximo ponto de ônibus [ %d / 23]", quantia, BusJob[playerid]);
    SendClientMessage(playerid, COLOR_WHITE, msg);
	PlayerInfo[playerid][pGrana] += 80;
    return 1;
}

CMD:ifood(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
 	if(PlayerInfo[playerid][pJob] != JOB_MOTOBOY) return SCM(playerid, COLOR_LIGHTRED, "Você não é um entregador do ifood.");
    AppLigado[playerid] = 0;
    iFood[playerid] = 1;
    SendClientMessage(playerid, COLOR_LIGHTRED, "{ffffff} Comandos: /ifood - /ligarapp - /desligarapp");
    return 1;
}

CMD:ligarapp(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
 	if(PlayerInfo[playerid][pJob] != JOB_MOTOBOY) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um entregador do ifood.");
	if(AppLigado[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{ffffff} Você já está conectado");
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
		SendClientMessage(playerid, COLOR_YELLOW, "O aplicativo foi habilitado para que você possa receber novas demandas de entrega.");
		AppLigado[playerid] = 1;
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta em um veiculo.");
	return 1;
}

/*CMD:ligarapp(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
 	if(PlayerInfo[playerid][pJob] != JOB_MOTOBOY) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um entregador do ifood.");
    if(IsPlayerInAnyVehicle(playerid))
    if(AppLigado[playerid] == 1)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "[IFOOD]{ffffff} Você já está conectado");
    else
    {
        if(iFood[playerid] == 1)
        {
            if(GetVehicleModel(GetPlayerVehicleID(playerid)) == ID_MOTOCA)
            {
                SendClientMessage(playerid, COLOR_LIGHTRED, "[IFOOD]{ffffff} Aplicativo habilitado para receber entregas!");
                AppLigado[playerid] = 1;
            }
            else
            {
                SendClientMessage(playerid,COLOR_LIGHTRED, "[IFOOD]{ffffff} Desculpe, você não está em um veículo.");
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "[IFOOD]{ffffff} Falha na autenticação.");
        }
    }
    return 1;
}*/
CMD:desligarapp(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
 	if(PlayerInfo[playerid][pJob] != JOB_MOTOBOY) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um entregador do ifood.");

    if(AppLigado[playerid] != 1)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "[IFOOD]{ffffff} Você já está offline.");
    else
    {
        AppLigado[playerid] = 0;
        Entregando[playerid] = 0;
        Retiroupedido[playerid] = 0;
        KillTimer(buscandocorridas[playerid]);
        DisablePlayerCheckpoint(playerid);
        SendClientMessage(playerid, COLOR_YELLOW, "[IFOOD]{ffffff} Obrigado pelas entregas, até breve!");
    }
    return 1;
}
CMD:aceitarentrega(playerid, params[])
{
	if(Entregando[playerid] == 1 && AppLigado[playerid] == 1 && TemCorrida[playerid] == 1)
	{
	    KillTimer(TempoDeResposta[playerid]);
		KillTimer(buscandocorridas[playerid]);
		TemCorrida[playerid] = 0;
		StopAudioStreamForPlayer(playerid);
		SendClientMessage(playerid,COLOR_YELLOW, "[IFOOD]{ffffff} Pedido aceito com sucesso. Siga para o checkpoint para recolher o pedido.");
		new rand = random(sizeof(Restaurantes));
		SetPlayerCheckpoint(playerid,Restaurantes[rand][BrX],Restaurantes[rand][BrY],Restaurantes[rand][BrZ], 5);
	}
    return 1;
}
forward SigaEntrega(playerid);
public SigaEntrega(playerid)
{
    new rand = random(sizeof(Entregas_ifood));
    Retiroupedido[playerid] = 1;
    SetPlayerCheckpoint(playerid,Entregas_ifood[rand][0],Entregas_ifood[rand][1],Entregas_ifood[rand][2], 5);
    SendClientMessage(playerid, COLOR_YELLOW, "[IFOOD]{ffffff} Siga para a entrega.");
    SetPlayerAttachedObject(playerid,0,-2701,1,0.160999,-0.170999,0.018000,-9.199999,88.400009,8.500000,1.000000,1.000000,1.000000);
    TogglePlayerControllable(playerid, true);
    return 1;
}
forward FinalizandoEntrega(playerid);
public FinalizandoEntrega(playerid)
{
    SendClientMessage(playerid, COLOR_YELLOW, "[IFOOD]{ffffff} Entrega realizada com sucesso.");
	PlayerInfo[playerid][pGrana] += randomEspecial(GANHO_MIN, GANHO_MAX);
	//new pagou = RandomEspecial(GANHO_MIN, GANHO_MAX);
	//SendClientMessage(playerid,COLOR_LIGHTRED, "[IFOOD]{ffffff} Você recebeu R$%d pela entrega.", pagou);

    Entregando[playerid] = 0;
    Retiroupedido[playerid] = 0;
    TemCorrida[playerid] = 0;
    AppLigado[playerid] = 1;
    TogglePlayerControllable(playerid, true);
    return 1;
}

forward ChamarEntrega(playerid);
public ChamarEntrega(playerid)
{
    TempoDeResposta[playerid] = SetTimerEx("PerdeuEntrega", 15000,false,"i",playerid);
    TemCorrida[playerid] = 1;
    PlayAudioStreamForPlayer(playerid, "https://cp-frp.com.br.com/midia/ifood.mp3");
 
    SendClientMessage(playerid,COLOR_YELLOW, "[IFOOD]{ffffff} Nova entrega recebida, você possui 15 segundos para aceitar.");
    SendClientMessage(playerid,COLOR_YELLOW, "[IFOOD]{ffffff} Digite /aceitarentrega.");
    return 1;
}
 
forward PerdeuEntrega(playerid);
public PerdeuEntrega(playerid)
{
    DisablePlayerCheckpoint(playerid);
    Entregando[playerid] = 0;
    TemCorrida[playerid] = 0;
    StopAudioStreamForPlayer(playerid);
    SendClientMessage(playerid,COLOR_LIGHTRED, "[IFOOD]{ffffff} Você perdeu a entrega.");
    KillTimer(TempoDeResposta[playerid]);
    return 1;
}
 
stock randomEspecial(minimo,maximo)
{
    new valor = random(maximo-minimo)+minimo;
    return valor;
}

CMD:hacker(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
 	if(PlayerInfo[playerid][pJob] != JOB_HACK) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um hacker.");
	new complexid = PlayerInfo[playerid][pEntrouComplexo];
	if(complexid == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em um complexo.");
	{
		HackerJob[playerid] = 1;
    	SendClientMessage(playerid,COLOR_WHITE,"Você iniciou um trabalho de hacker.");
        HJLimitTimer = SetTimerEx("HJTimeLimit", 300000, 0, "d", playerid);
        HackerSetup(playerid);
   	}
	return 1;
}

forward HJTimeLimit(playerid);
public HJTimeLimit(playerid)
{
    
	ShowPlayerDialog(playerid,-1,0,"","","","");
	HackerJob[playerid] = 0;
	PlayerInfo[playerid][pArrombarDNV_C] = 2400;
	SendClientMessage(playerid,COLOR_WHITE,"O tempo de trabalho acabou e você não terminou.");
	return 1;
}
forward HackerSetup(playerid);
public HackerSetup(playerid)
{
    SetPlayerVirtualWorld(playerid, playerid+1);
    SetPlayerInterior(playerid,1);
    SetPlayerPos(playerid, 2164.7,1601.9,999.9);
	SetPlayerFacingAngle(playerid, 263.0);
	SetPlayerCameraPos(playerid, 2163.5,1601.9,1000.8);
	SetPlayerCameraLookAt(playerid, 2172.7,1601.9,999.9);
    ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Type_Loop", 4.0, 1, 0, 0, 0, 0);
	SetTimerEx("HackerOne", 3000, 0, "d", playerid);
}
 
forward HackerOne(playerid);
public HackerOne(playerid)
{
    PlayerPlaySound( playerid, 1058, 0, 0, 0 );
    SetPlayerCameraLookAt(playerid, 2172.1,1601.7,999.9);
	ShowPlayerDialog(playerid, 1998, DIALOG_STYLE_INPUT, "root@localhost:~", "Login as: root\nO sistema está pronto para invadir um centro importante\nDigite 'BEGAN' para lançar ataques", "Enviar", "Cancelar");
}
 
forward HackerTwo(playerid);
public HackerTwo(playerid)
{
    PlayerPlaySound( playerid, 1058, 0, 0, 0 );
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
    GameTextForPlayer(playerid,"~p~SUCESSO",1000,6);
	ShowPlayerDialog(playerid, 1999, DIALOG_STYLE_INPUT, "root@localhost:~", "Login as: root\nO sistema está pronto para invadir um centro importante\nDigite 'KEYGEN' para lançar ataques", "Enviar", "Cancelar");
}
 
forward HackerThree(playerid);
public HackerThree(playerid)
{
    PlayerPlaySound( playerid, 1058, 0, 0, 0 );
    GameTextForPlayer(playerid,"~p~SUCESSO",1000,6);
	ShowPlayerDialog(playerid, 2000, DIALOG_STYLE_INPUT, "root@localhost:~", "Login as: root\nO sistema está pronto para invadir um centro importante\nDigite 'CRACKED' para lançar ataques", "Enviar", "Cancelar");
}
forward HackerFour(playerid);
public HackerFour(playerid)
{
    PlayerPlaySound( playerid, 1058, 0, 0, 0 );
    GameTextForPlayer(playerid,"~p~SUCESSO",1000,6);
	ShowPlayerDialog(playerid, 2001, DIALOG_STYLE_INPUT, "root@localhost:~", "Login as: root\nO sistema está pronto para invadir um centro importante\nDigite 'WORN' para lançar ataques", "Enviar", "Cancelar");
}
forward HackerFive(playerid);
public HackerFive(playerid)
{
    PlayerPlaySound( playerid, 1058, 0, 0, 0 );
    GameTextForPlayer(playerid,"~p~SUCESSO",1000,6);
	ShowPlayerDialog(playerid, 2002, DIALOG_STYLE_INPUT, "root@localhost:~", "Login as: root\nO sistema está pronto para invadir um centro importante\nTDigite 'VIRUS' para lançar ataques", "Enviar", "Cancelar");
}
 
forward HackerSix(playerid);
public HackerSix(playerid)
{
    PlayerPlaySound( playerid, 1058, 0, 0, 0 );
    GameTextForPlayer(playerid,"~p~SUCESSO",1000,6);
	ShowPlayerDialog(playerid, 2003, DIALOG_STYLE_INPUT, "root@localhost:~", "Login as: root\nO sistema está pronto para invadir um centro importante\nDigite 'TROJAN' para lançar ataques", "Enviar", "Cancelar");
}
 
forward HackerSeven(playerid);
public HackerSeven(playerid)
{
    KillTimer(HJLimitTimer);
    PlayerPlaySound( playerid, 1058, 0, 0, 0 );
    SetPlayerVirtualWorld(playerid, playerid+1);
    SetPlayerInterior(playerid,1);
    SetPlayerPos(playerid, 2164.7,1601.9,999.9);
	SetPlayerFacingAngle(playerid, 263.0);
	SetPlayerCameraPos(playerid, 2163.5,1601.9,1000.8);
	SetPlayerCameraLookAt(playerid, 2172.7,1601.9,999.9);
	ApplyAnimation(playerid,"CASINO","Roulette_win", 4.0, 1, 0, 0, 0, 0);
    GameTextForPlayer(playerid,"~p~SUCESSO",2000,6);
	SendClientMessage(playerid,COLOR_WHITE,"Você ganhou 760 reais pelo serviço.");
    PlayerInfo[playerid][pGrana] += 760;
    SetTimerEx("HackerSuccesed", 3000, 0, "d", playerid);
 
}
 
forward HackerSuccesed(playerid);
public HackerSuccesed(playerid)
{
    TogglePlayerControllable(playerid,true);
	HackerJob[playerid] = 0;
    return 1;
}


CMD:taxi(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em um veículo.");
 	if(PlayerInfo[playerid][pJob] != JOB_TAXISTA)  return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um taxista.");

    new vehicleid = GetPlayerVehicleID(playerid);
    new modelo = GetVehicleModel(vehicleid);
    if(modelo == 560 || modelo == 420 || modelo == 438 || modelo == 418 || modelo == 405 || modelo == 426 || modelo == 445 || modelo == 516 || modelo == 540 || modelo == 546 || modelo == 547) {
		new type;
	    if(sscanf(params, "d(99)", type)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /taxi [modelo(1-4)]");
	    if(isTaxi[GetPlayerVehicleID(playerid)]) {
		   	isTaxi[GetPlayerVehicleID(playerid)]=false;
			if(IsValidDynamicObject(objTaxi[vehicleid])) DestroyDynamicObject(objTaxi[vehicleid]);
			SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /taxi [modelo(1-4)]");
		   	return 1;
		}
		else {
		    if(type >= 1 && type < 5) {
		        new model;
				switch(type) {
					case 1: model = 19308;
					case 2: model = 19309;
					case 3: model = 19310;
					case 4: model = 19311;
	    		}
				objTaxi[vehicleid] = CreateDynamicObject(model, 10.0, 10.0, 10.0, 0.0, 0.0, 0.0);
				isTaxi[GetPlayerVehicleID(playerid)]=true;
		  		switch(modelo) {
		 			case 560: { AttachDynamicObjectToVehicle(objTaxi[vehicleid], vehicleid, -0.0, -0.30, attInfo[GetVehicleModel(vehicleid) - 400][_attPos] + 0.04, 0.0, 0.0, 0.0); }
			    	case 418: { AttachDynamicObjectToVehicle(objTaxi[vehicleid], vehicleid, -0.0, -0.30, attInfo[GetVehicleModel(vehicleid) - 400][_attPos] + 0.03, 0.0, 0.0, 0.0); }
			   		case 405: { AttachDynamicObjectToVehicle(objTaxi[vehicleid], vehicleid, -0.0, -0.30, attInfo[GetVehicleModel(vehicleid) - 400][_attPos] + 0.12, 0.0, 0.0, 0.0); }
		    		case 426: { AttachDynamicObjectToVehicle(objTaxi[vehicleid], vehicleid, -0.0, -0.30, attInfo[GetVehicleModel(vehicleid) - 400][_attPos] + 0.08, 0.0, 0.0, 0.0); }
			    	case 445: { AttachDynamicObjectToVehicle(objTaxi[vehicleid], vehicleid, -0.0, -0.30, attInfo[GetVehicleModel(vehicleid) - 400][_attPos] + 0.06, 0.0, 0.0, 0.0); }
		    		case 516: { AttachDynamicObjectToVehicle(objTaxi[vehicleid], vehicleid, -0.0, -0.30, attInfo[GetVehicleModel(vehicleid) - 400][_attPos] + 0.08, 0.0, 0.0, 0.0); }
		    		case 540: { AttachDynamicObjectToVehicle(objTaxi[vehicleid], vehicleid, -0.0, -0.30, attInfo[GetVehicleModel(vehicleid) - 400][_attPos] + 0.08, 0.0, 0.0, 0.0); }
			    	case 546: { AttachDynamicObjectToVehicle(objTaxi[vehicleid], vehicleid, -0.0, -0.30, attInfo[GetVehicleModel(vehicleid) - 400][_attPos] + 0.08, 0.0, 0.0, 0.0); }
			    	case 547: { AttachDynamicObjectToVehicle(objTaxi[vehicleid], vehicleid, -0.0, -0.30, attInfo[GetVehicleModel(vehicleid) - 400][_attPos] + 0.08, 0.0, 0.0, 0.0); }
				}
				Streamer_Update(playerid);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "USO: /taxi [modelo(1-4)]");
		}
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não pode ser usado neste emprego.");

	return 1;
}

stock IsBot(name[])
{
	new sendername[MAX_PLAYER_NAME];
    for(new i=0; i<MAX_PLAYERS; i++)
    {
	    if(IsPlayerNPC(i))
        {
            format(sendername, sizeof(sendername), "%s", PlayerName(i,0));
            if(strcmp(sendername,name,true) == 0) return i;
        }
    }
    return INVALID_PLAYER_ID;
}

stock static removeDriveBy(playerid)
{
    new iVehicleID = GetPlayerVehicleID(playerid),
  		iSeatID = GetPlayerVehicleSeat(playerid),
    	Float:fX,
    	Float:fY,
	    Float:fZ;

	GetPlayerPos(playerid, fX, fY, fZ);
	SetPlayerPos(playerid, fX, fY, floatadd(fZ, 2.0));

	Bit_Vet(g_VehicleDriveBy, playerid);
	SetTimerEx("placeVehicle", 200, false, "dddd", playerid, iVehicleID, iSeatID, GetPlayerWeapon(playerid));
}

forward placeVehicle(playerid, iVehicleID, iSeatID, iWeaponID);
public placeVehicle(playerid, iVehicleID, iSeatID, iWeaponID)
{
	if (!IsPlayerConnected(playerid) || GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	    return 0;

	PutPlayerInVehicle(playerid, iVehicleID, iSeatID);
	SetPlayerArmedWeapon(playerid, iWeaponID);
	return 1;
}



public OnPlayerEnterCheckpoint(playerid)
{
    if(Entregando[playerid] == 1 && Retiroupedido[playerid] != 1)
    {
        DisablePlayerCheckpoint(playerid);
        SetTimerEx("SigaEntrega",2000,false,"i",playerid);
        TogglePlayerControllable(playerid,false);
    }
    if(Entregando[playerid] == 1 && Retiroupedido[playerid] == 1)
    {
        DisablePlayerCheckpoint(playerid);
        SetTimerEx("FinalizandoEntrega",2000,false,"i",playerid);
        TogglePlayerControllable(playerid,false);
    }
    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 437)
    {
        if(BusJob[playerid] == 1)
        {
            BusJob[playerid] = 2;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,1807.4921,-1859.1929,13.4141,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 2)
        {
            BusJob[playerid] = 3;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,1906.4702,-1935.8694,13.1099,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 3)
        {
            BusJob[playerid] = 4;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,2058.6682,-1939.0070,13.0451,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 4)
        {
            BusJob[playerid] = 5;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,2156.0032,-1898.0280,13.0985,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 5)
        {
            BusJob[playerid] = 6;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,2219.6997,-1779.6831,12.9757,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 6)
        {
            BusJob[playerid] = 7;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,2283.7405,-1752.4850,13.1099,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 7)
        {
            BusJob[playerid] = 8;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,2434.5039,-1568.2855,23.5553,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 8)
        {
            BusJob[playerid] = 9;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,2366.5237,-1520.7024,23.5552,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 9)
        {
            BusJob[playerid] = 10;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,2345.7146,-1426.2017,23.5552,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 10)
        {
            BusJob[playerid] = 11;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,2305.9175,-1261.5817,23.5697,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 11)
        {
            BusJob[playerid] = 12;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,2187.7815,-1118.8282,24.4024,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 12)
        {
            BusJob[playerid] = 13;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,1863.4495,-1086.9812,23.3889,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 13)
        {
            BusJob[playerid] = 14;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,1843.0739,-1345.6334,13.1194,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 14)
        {
            BusJob[playerid] = 15;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,1828.5979,-1546.1628,13.1060,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 15)
        {
            BusJob[playerid] = 16;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,1621.3351,-1589.4988,13.2760,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 16)
        {
            BusJob[playerid] = 17;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,1526.1556,-1679.4670,13.1099,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 17)
        {
            BusJob[playerid] = 18;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,1565.6974,-1817.3195,13.1099,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 18)
        {
            BusJob[playerid] = 19;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,1620.3062,-1876.3380,13.1100,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 19)
        {
            BusJob[playerid] = 20;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,1684.6907,-1863.2953,13.1157,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 20)
        {
            BusJob[playerid] = 21;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,1693.3604,-1836.2633,13.1099,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 21)
        {
            BusJob[playerid] = 22;
            TogglePlayerControllable(playerid,0);
            SetPlayerCheckpoint(playerid,1776.3927,-1894.6635,13.1145,10);
            SendClientMessage(playerid, COLOR_WHITE,"Os passageiros estão saindo e/ou entrando no ônibus! Aguarde...");
            TimerBus[playerid] = SetTimerEx("RotaBus", 1000, false, "i",playerid);
            return 1;
        }
        if(BusJob[playerid] == 22)
        {
            BusJob[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
            SendClientMessage(playerid, COLOR_WHITE,"Serviço finalizado! Você recebeu R$300 por ter completado todo o percurso!");
            SendClientMessage(playerid, COLOR_WHITE,"Volte ao spawn da profissão e inicie o serviço para fazer o percurso novamente!");
			PlayerInfo[playerid][pGrana] += 300;
        }
    }
    if (PlayerInfo[playerid][pWaypoint])
	{
 		PlayerInfo[playerid][pWaypoint] = 0;

		DisablePlayerCheckpoint(playerid);
  		PlayerTextDrawHide(playerid, PlayerInfo[playerid][pTextdraws]);
	}
    if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
	{
	    TaxiAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Chegou ao cliente.", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	if(MecCallTime[playerid] > 0 && MecAccepted[playerid] < 999)
	{
	    MecAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Chegou ao cliente.", 5000, 1);
		MecCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
    if(garbage_run[playerid] > -1)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
	    	if(garbage_run_state[playerid] == 0)
			{
				OnPlayerPickupGarbage(playerid);
			}
		    else if(garbage_run_state[playerid] > 0 && garbage_run_state[playerid] != 3)
			{
				OnPlayerDropGarbage(playerid);
			}
		}
		else if(garbage_run_state[playerid] == 3)
		{
  			GameTextForPlayer(playerid,"~g~Você completou o trabalho",5000,5);
     		OnPlayerEndGarbage(playerid);
       		SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você concluiu a coleta e recebeu R$135.");
          	GivePlayerMoneyCA(playerid, 135);
		}
		else
		{
		    SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Saia do veículo primeiro.");
		}
	}
    if(OutrasInfos[playerid][oEntrouCheckPointTraf] == 1)
    {
        OutrasInfos[playerid][oEntrouCheckPointTraf] = 0;
        DisablePlayerCheckpoint(playerid);
        return 1;
    }
    //Entrega de Malotes
    if(GetPVarInt(playerid, "PegarDinheiro") == 1)
	{
	    if(company_work_stage[playerid] == 1)
	    {
	    	SendClientMessage(playerid, COLOR_WHITE, "Entre no banco e fale com o segurança (NPC).");
	    	DisablePlayerCheckpoint(playerid);
	    	company_work_stage[playerid] = 2;
	    	DisablePlayerCheckpoint(playerid);
	    	return 1;
		}
	}
	//Entrou checkpoint
	if(OutrasInfos[playerid][oCPcarro] == 1)
	{
	    OutrasInfos[playerid][oCPcarro] = 0;
	    DisablePlayerCheckpoint(playerid);
	    return 1;
	}

	if(cp_target[playerid] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    cp_target[playerid] = 0;
	}
	if(cp_target[playerid] == 2)
	{
	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Utilize /v remontar [Slot ID]");

        DisablePlayerCheckpoint(playerid);
	    cp_target[playerid] = 0;
	}
	if(going_to_scrap[playerid] == 1)
	{
	    DisablePlayerCheckpoint(playerid);
	    going_to_scrap[playerid] = 0;
	}

	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid) {

	/*SCM(playerid, -1, "OnPlayerRequestSpawn chamou");
    if(IsPlayerNPC(playerid)) return 1;
    if(!PlayerInfo[playerid][pLogado])
        return 1;
    if(!PlayerInfo[playerid][pTutorial])
        return 1;
	SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	return 1;*/
	return 0;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;

}
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	//new str[256];

	//for (new i = 0; i != 2; i ++) if (DollaPickup[i] == pickupid)
	//{

	//}
	if(pickupid == L_a_Pickup[0] || pickupid == L_a_Pickup[1] || pickupid == L_a_Pickup[2] || pickupid == L_a_Pickup[3] || pickupid == L_a_Pickup[4] || pickupid == L_a_Pickup[5] || pickupid == L_a_Pickup[6] || pickupid == L_a_Pickup[7] || pickupid == L_a_Pickup[8] || pickupid == L_a_Pickup[9])
	{
		if(!PlayerInfo[playerid][pEmServico])
		{
			SendClientMessage(playerid, COLOR_WHITE, "Guarda Geraldo, diz: Olá, deseja passar?");
			SendClientMessage(playerid, COLOR_ESPECIAL1, "Use \"/abrirpedagio\" Para abrir a barreira.");
			return 1;
		}
		new szCostString[56];
		format(szCostString, sizeof(szCostString), "Guarda Nunes: Olá, tem que pagar %d reais para passar.", TollCost);
		SendClientMessage(playerid, COLOR_WHITE, szCostString);
		SendClientMessage(playerid, COLOR_ESPECIAL1, "Use \"/abrirpedagio\" para pagar o guarda.");
	}
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(OutrasInfos[playerid][oModRod] == 0 && OutrasInfos[playerid][oModShop] == 0)
	{
	    TogglePlayerControllable(playerid, false);
	    format(string, sizeof(string), "{A30013}[ANTI-CHEAT]: %s [%d] foi banido por Vehicle Mod Hack.", PlayerName(playerid,0), playerid);
		SendAdminMessage(-1,string);
		PlayerInfo[playerid][pBanido] = 1;

        Banir(PrintPlayerIP(playerid),GetUserName(playerid),PlayerInfo[playerid][pID], "Anti Cheat","Vehicle Mod");
        SetTimerEx("TimerKick", 500, 0, "d", playerid);
	}
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    if(OutrasInfos[playerid][oModRod] == 0 && OutrasInfos[playerid][oModShop] == 0)
	{
	    TogglePlayerControllable(playerid, false);
	    format(string, sizeof(string), "{A30013}[ANTI-CHEAT]: %s [%d] foi banido por Vehicle Mod Hack.", PlayerName(playerid,0), playerid);
		SendAdminMessage(-1,string);
		PlayerInfo[playerid][pBanido] = 1;

		Banir(PrintPlayerIP(playerid),GetUserName(playerid),PlayerInfo[playerid][pID], "Anti Cheat","Vehicle Mod");
        SetTimerEx("TimerKick", 500, 0, "d", playerid);
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys) {
    new keys, updown, leftright;
	GetPlayerKeys(playerid, keys, updown, leftright);
	//===============================================
	switch(keys)
	{
	    case 65536:
		{
		    if(GetPVarInt(playerid, "SettingGraffiti") == 1)
			{
			    if(KeyPressed[playerid] == 1) return 1;
				if(KeyForPress[playerid] == 1)
				{
            		KeyPressed[playerid] = 1;
            		PlayerTextDrawHide(playerid, ClickTD[playerid]);
				}
				else
					GraffitiFailed(playerid);
			}
			else if(GetPVarInt(playerid, "Arrombando") > 0)
			{
			    if(KeyPressed[playerid] == 1) return 1;
				if(KeyForPress[playerid] == 1)
				{
            		KeyPressed[playerid] = 1;
            		PlayerTextDrawHide(playerid, ClickTD[playerid]);
				}
				else
			 		FalhouArrombar(playerid);
			}
		}
	    case 131072:
		{
			if(GetPVarInt(playerid, "SettingGraffiti") == 1)
			{
			    if(KeyPressed[playerid] == 1) return 1;
				if(KeyForPress[playerid] == 3)
				{
            		KeyPressed[playerid] = 1;
            		PlayerTextDrawHide(playerid, ClickTD[playerid]);
				}
				else
				    GraffitiFailed(playerid);
			}
			else if(GetPVarInt(playerid, "Arrombando") > 0)
			{
			    if(KeyPressed[playerid] == 1) return 1;
				if(KeyForPress[playerid] == 3)
				{
            		KeyPressed[playerid] = 1;
            		PlayerTextDrawHide(playerid, ClickTD[playerid]);
				}
				else
					FalhouArrombar(playerid);
			}
		}
		case 262144:
		{
			if(GetPVarInt(playerid, "SettingGraffiti") == 1)
			{
			    if(KeyPressed[playerid] == 1) return 1;
				if(KeyForPress[playerid] == 2)
				{
            		KeyPressed[playerid] = 1;
            		PlayerTextDrawHide(playerid, ClickTD[playerid]);
				}
				else
					GraffitiFailed(playerid);
			}
			else if(GetPVarInt(playerid, "Arrombando") > 0)
			{
			    if(KeyPressed[playerid] == 1) return 1;
				if(KeyForPress[playerid] == 2)
				{
            		KeyPressed[playerid] = 1;
            		PlayerTextDrawHide(playerid, ClickTD[playerid]);
				}
				else
					FalhouArrombar(playerid);
			}
		}
	}
	//===============================================
    new iState = GetPlayerState(playerid);
	if(filling[playerid])
	{
	    if(newkeys == KEY_HANDBRAKE)
	    {
	        filling_started[playerid] = 1;
	    }
	}
	if (iState == PLAYER_STATE_PASSENGER && newkeys & KEY_CROUCH)
	{
	    if (22 <= GetPlayerWeapon(playerid) <= 38)
	    {
		    Bit_Let(g_VehicleDriveBy, playerid);
	    }
	}
	else if ((newkeys & KEY_SECONDARY_ATTACK || newkeys & KEY_CROUCH) && iState == PLAYER_STATE_PASSENGER && Bit_Get(g_VehicleDriveBy, playerid))
	{
		removeDriveBy(playerid);
	}

	if((newkeys & KEY_RIGHT) && !IsPlayerInAnyVehicle(playerid))
	{
	    new armaid = GetPlayerWeapon(playerid);
	    switch(armaid)
		{
			case 34: RemovePlayerAttachedObject(playerid, 0);
	    	case 43: RemovePlayerAttachedObject(playerid, 0);
		}
	}
	if((oldkeys & KEY_RIGHT) && !IsPlayerInAnyVehicle(playerid))
	{
	    new armaid = GetPlayerWeapon(playerid);
	    switch(armaid)
	    {
	    	case 34: SetPlayerAttachedObject(playerid, 0, GunObjects[34], 6);
	     	case 43: SetPlayerAttachedObject(playerid, 0, GunObjects[43], 6);
		}
	}
	//==========================================================================
/*	if (newkeys & KEY_FIRE && PlayerInfo[playerid][pMining] && IsPlayerNearMine(playerid))
	{
	    if (PlayerInfo[playerid][pMineTime] > 0 || PlayerInfo[playerid][pMinedRock])
	        return 1;

		new id = Job_NearestPoint(playerid);

		if (id != -1)
		{
		    PlayerInfo[playerid][pMineTime] = 1;
		    SetTimerEx("MineTime", 400, false, "d", playerid);

		    if (PlayerInfo[playerid][pMineCount] < 7)
	    	{
	    	    PlayerInfo[playerid][pMineCount]++;

	        	ApplyAnimation(playerid, "BASEBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
            	ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.0, 0, 1, 1, 0, 0, 1);
			}
			else
			{
			    new ouroprata = random(20)+1;

			    PlayerInfo[playerid][pMinedRock] = 1;
			    PlayerInfo[playerid][pMineCount] = 0;

			    RemovePlayerAttachedObject(playerid, 4);

			    ApplyAnimation(playerid, "BSKTBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
            	ApplyAnimation(playerid, "BSKTBALL", "BBALL_pickup", 4.0, 0, 1, 1, 0, 0, 1);

			    SetPlayerAttachedObject(playerid, 4, 2936, 5, 0.044377, 0.029049, 0.161334, 265.922912, 9.904896, 21.765972, 0.500000, 0.500000, 0.500000);
				SendClientMessage(playerid, "Você minerou alguma coisa, leve a pedra até o local para receber o pagamento.");

                switch(ouroprata)
			    {
			    	case 0,4,6:
			    	{
			        	Inventory_Add(playerid, "Prata", 1575,1);
			        	SendClientMessage(playerid, "Você encontrou prata!");
			    	}
			    	case 3,5:
			    	{
			        	Inventory_Add(playerid, "Ouro", 1577,1);
			        	SendClientMessage(playerid, "Você encontrou ouro!");
			    	}
				SetPlayerCheckpoint(playerid, JobData[id][jobDeliver][0], JobData[id][jobDeliver][1], JobData[id][jobDeliver][2], 2.5);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	}*/
	//==========================================================================

	if(iState == PLAYER_STATE_PASSENGER && newkeys & KEY_CTRL_BACK)
	{
	    new Arma = ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaModelo];
	    if(Arma == 24)
	    {
	    	removeDriveBy(playerid);
		}
	}
	//==========================================================================

	if(newkeys & KEY_WALK)
 	{
  		if (PlayerInfo[playerid][pMorto] == 0 && OutrasInfos[playerid][oAlgemado] == 0 && OutrasInfos[playerid][oAmarrado] == 0)
    	{
     		if(GetPlayerWalkStyle(playerid) > 0)
       		{
         		switch(GetPlayerWalkStyle(playerid))
			    {
       				case WALKSTYLE_GANG1: 	ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1,1);
       				case WALKSTYLE_GANG2: 	ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1,1);
        			case WALKSTYLE_NORMAL: 	ApplyAnimation(playerid,"ped","WALK_player",4.1,1,1,1,1,1,1);
  	        		case WALKSTYLE_SEXY: 	ApplyAnimation(playerid,"ped","WOMAN_walksexy",4.1,1,1,1,1,1,1);
    	        	case WALKSTYLE_OLD: 	ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1,1);
	    	        case WALKSTYLE_SNEAK: 	ApplyAnimation(playerid,"PED","Player_Sneak",4.1,1,1,1,1,1,1);
	    	        case WALKSTYLE_BLIND: 	ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1,1);
	    	        case WALKSTYLE_ARMED: 	ApplyAnimation(playerid,"PED","WALK_armed",4.1,1,1,1,1,1,1);
	    	        case WALKSTYLE_POLICE: 	ApplyAnimation(playerid,"POLICE","Cop_move_FWD",4.1,1,1,1,1,1,1);
			    }
       		}
	    }
    }

 	if(oldkeys & KEY_WALK)
 	{
  		if (PlayerInfo[playerid][pMorto] == 0 && OutrasInfos[playerid][oAlgemado] == 0 && OutrasInfos[playerid][oAmarrado] == 0)
    	{
     		if(GetPlayerWalkStyle(playerid) > 0)
       		{
         		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
		    }
	    }
	}

	if(IsPlayerInAnyVehicle(playerid))
	{
	    if(PlayerCruiseSpeed[playerid] > 0)
	    {
	    	if((newkeys & KEY_SPRINT) || (newkeys & KEY_JUMP) || (leftright > 0) || (leftright < 0) || (updown > 0) || (updown < 0))
	    	{
				PlayerCruiseSpeed[playerid] = 0.00;
			}
	    }
	}

	if ((oldkeys & KEY_FIRE) && (newkeys & KEY_CROUCH))
	{
		new weapon = GetPlayerWeapon(playerid);
		if(weapon == 24) // weapon == 24 este deagle , daca vreti sa se blocheze c-bugul si la alte arme faceti in felul urmator: if(weapon == 24 || weapon == id la arma )
		{
			ApplyAnimation(playerid,"GYMNASIUM","gym_tread_falloff",1.0,0,0,0,0,0);
			GameTextForPlayer(playerid, "~r~C-BUG DETECTADO!", 5000, 1); // in loc de Stop C-bug , scrieti ce vreti voi.
		}
	}

	if((newkeys & KEY_JUMP) && !IsPlayerInAnyVehicle(playerid))
	{
	    if(PlayerInfo[playerid][pMancando] == 1)
	    {
	 		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
			ComAnim[playerid] = 0;
			ClearAnimations(playerid, 1);
			FazendoAnimDeMancar[playerid] = 1;

			ApplyAnimation(playerid, "Ped", "FALL_collapse", 3.0, 0, 1, 1, 0, 0, 1);
			ApplyAnimation(playerid, "Ped", "FALL_collapse", 3.0, 0, 1, 1, 0, 0, 1);
			return 1;
		}
	}

	if((newkeys & KEY_SPRINT) && !IsPlayerInAnyVehicle(playerid))
	{
	    if(ComAnim[playerid] == 1){
    		if(PlayerInfo[playerid][pMorto] == 0 && TomouTazer[playerid] == 0){
				if(IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
    			ComAnim[playerid] = 0;
    			ClearAnimations(playerid, 1);
    			FumandoMaconha[playerid] = 0;
			}
	    }
	    if(PlayerInfo[playerid][pMancando] == 1)
	    {
	 		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
			ComAnim[playerid] = 0;
			ClearAnimations(playerid, 1);
			FazendoAnimDeMancar[playerid] = 1;

			ApplyAnimation(playerid, "Ped", "FALL_collapse", 3.0, 0, 1, 1, 0, 0, 1);
			ApplyAnimation(playerid, "Ped", "FALL_collapse", 3.0, 0, 1, 1, 0, 0, 1);
			return 1;
		}
	}

	//Basket
	if(newkeys & KEY_FIRE && !IsPlayerInAnyVehicle(playerid)) {
	    KeyStateChangeBasket(playerid, newkeys, oldkeys);
	}
	//GM
	if (!IsPlayerInAnyVehicle(playerid) && (newkeys & KEY_YES))
	{
		new Float:pos[3];
	 	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	  	if (pos[1] > (Y_ELEVATOR_POS - 1.8) && pos[1] < (Y_ELEVATOR_POS + 1.8) && pos[0] < (X_ELEVATOR_POS + 1.8) && pos[0] > (X_ELEVATOR_POS - 1.8))
	   	{
	    	ShowElevatorDialog(playerid);
	    	return 1;
	    }
		else if(pos[1] < (Y_ELEVATOR_POS - 1.81) && pos[1] > (Y_ELEVATOR_POS - 3.8) && pos[0] > (X_ELEVATOR_POS - 3.8) && pos[0] < (X_ELEVATOR_POS - 1.81))
		{
				new i = 10;
				while(pos[2] < GetDoorsZCoordForFloor(i) + 3.5 && i > 0)
				    i --;

				if(i == 0 && pos[2] < GetDoorsZCoordForFloor(0) + 2.0)
				    i = -1;

				if (i <= 9)
				{
				    if (ElevatorState != ELEVATOR_STATE_MOVING)
				    {
				        if (ElevatorFloor == i + 1)
				        {
							SendClientMessage(playerid, COLOR_LIGHTRED, "O elevador já está neste andar.");
							Floor_OpenDoors(0);
							Elevator_OpenDoors();
	                        return 1;
				        }
				    }
					CallElevator(playerid, i + 1);
					GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~g~~h~Elevador~n~~g~~h~Chamado...~n~~w~Aguarde", 3000, 3);
					new strTempString[100];
					if (ElevatorState == ELEVATOR_STATE_MOVING)
					{
						format(strTempString, sizeof(strTempString), " Elevador chamado... Atualmente ele está no %s.", FloorNames[ElevatorFloor]);
					}
					else
					{
					    if (ElevatorFloor == 0)
					    {
							format(strTempString, sizeof(strTempString), " Elevador chamado... Atualmente ele está no %s.", FloorNames[ElevatorFloor]);
						}
						else
						{
							format(strTempString, sizeof(strTempString), " Elevador chamado... Atualmente ele está no %s.", FloorNames[ElevatorFloor]);
						}
					}
					SendClientMessage(playerid, COLOR_MESSAGE_YELLOW, strTempString);
					return 1;
				}
		}
	    else if(pos[1] < -1301.4 && pos[1] > -1303.2417 && pos[0] < 1786.2131 && pos[0] > 1784.1555)
		{
			ShowElevatorDialog1(playerid);
			return 1;
		}
		else if(pos[1] > -1301.4 && pos[1] < -1299.1447 && pos[0] < 1785.6147 && pos[0] > 1781.9902)
  		{
		        // He is most likely using it, check floor:
				new i=20;
				while(pos[2] < GetDoorsZCoordForFloor1(i) + 3.5 && i > 0)
				    i --;

				if(i == 0 && pos[2] < GetDoorsZCoordForFloor1(0) + 2.0)
				    i = -1;

				if(i <= 19)
				{
					if (ElevatorState1 != ELEVATOR_STATE_MOVING)
				    {
				        if (ElevatorFloor1 == i + 1)
				        {
							SendClientMessage(playerid, COLOR_LIGHTRED, "O elevador já está neste andar.");
							Floor_OpenDoors1(0);
							Elevator_OpenDoors1();
	                        return 1;
				        }
				    }
					CallElevator1(playerid, i + 1);
					GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~g~~h~Elevador~n~~g~~h~Chamado...~n~~w~Aguarde", 3000, 3);
					new strTempString[100];
					if (ElevatorState1 == ELEVATOR_STATE_MOVING)
					{
						format(strTempString, sizeof(strTempString), "Elevador chamado... Atualmente ele está no %s.", FloorNames1[ElevatorFloor]);
					}
					else
					{
					    if (ElevatorFloor1 == 0)
					    {
							format(strTempString, sizeof(strTempString), "Elevador chamado... Atualmente ele está no %s.", FloorNames1[ElevatorFloor]);
						}
						else
						{
							format(strTempString, sizeof(strTempString), "Elevador chamado... Atualmente ele está no %s.", FloorNames1[ElevatorFloor]);
						}
					}
					SendClientMessage(playerid, COLOR_MESSAGE_YELLOW, strTempString);
					return 1;
				}
		}
		//
		else if (pos[1] > (Y_ELEVATOR_POS2 - 1.8) && pos[1] < (Y_ELEVATOR_POS2 + 1.8) && pos[0] < (X_ELEVATOR_POS2 + 1.8) && pos[0] > (X_ELEVATOR_POS2 - 1.8))
	   	{
	    	ShowElevatorDialog2(playerid);
	    	return 1;
	    }
		else if( IsPlayerInRangeOfPoint(playerid, 2, 2485.8555, -1510.3236, 852.7059) || IsPlayerInRangeOfPoint(playerid, 3, 2485.7844, -1510.4736, 844.0852) || IsPlayerInRangeOfPoint(playerid, 3, 2486.0454,-1510.0991,860.9069) )
		{
				new i = 1;
				while(pos[2] < GetDoorsZCoordForFloor2(i) + 3.5 && i > 0)
				    i --;

				if(i == 0 && pos[2] < GetDoorsZCoordForFloor2(0) + 2.0)
				    i = -1;

				if (i <= 0)
				{
				    if (ElevatorState2 != ELEVATOR_STATE_MOVING)
				    {
				        if (ElevatorFloor2 == i + 1)
				        {
							SendClientMessage(playerid, COLOR_LIGHTRED, "O elevador já está neste andar.");
							Floor_OpenDoors2(0);
							Elevator_OpenDoors2();
	                        return 1;
				        }
				    }
					CallElevator2(playerid, i + 1);
					GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~g~~h~Elevador~n~~g~~h~Chamado...~n~~w~Aguarde", 3000, 3);
					new strTempString[100];
					if (ElevatorState2 == ELEVATOR_STATE_MOVING)
					{
						format(strTempString, sizeof(strTempString), "Elevador chamado... Atualmente ele está no %s.", FloorNames2[ElevatorFloor2]);
					}
					else
					{
					    if (ElevatorFloor2 == 0)
					    {
							format(strTempString, sizeof(strTempString), "Elevador chamado... Atualmente ele está no %s.", FloorNames2[ElevatorFloor2]);
						}
						else
						{
							format(strTempString, sizeof(strTempString), "Elevador chamado... Atualmente ele está no %s.", FloorNames2[ElevatorFloor2]);
						}
					}
					SendClientMessage(playerid, COLOR_MESSAGE_YELLOW, strTempString);
					return 1;
				}
		}
		else if (pos[1] > (Y_ELEVATOR_POS3 - 1.8) && pos[1] < (Y_ELEVATOR_POS3 + 1.8) && pos[0] < (X_ELEVATOR_POS3 + 1.8) && pos[0] > (X_ELEVATOR_POS3 - 1.8))
	    {
	        ShowElevatorDialog3(playerid);
	        return 1;
	    }
        else if(IsPlayerInRangeOfPoint(playerid, 2, 289.8655,-1612.3893,96.4978) || IsPlayerInRangeOfPoint(playerid, 2, 289.8644,-1612.3932,91.9967) || IsPlayerInRangeOfPoint(playerid, 2, 289.8646,-1612.3898,87.4956)
		|| IsPlayerInRangeOfPoint(playerid, 2, 289.8637,-1612.3929,82.9945) || IsPlayerInRangeOfPoint(playerid, 2, 289.8631,-1612.3942,78.4934) || IsPlayerInRangeOfPoint(playerid, 2, 289.8632,-1612.3912,73.9923)
		|| IsPlayerInRangeOfPoint(playerid, 2, 289.8626,-1612.3925,69.5069) || IsPlayerInRangeOfPoint(playerid, 2, 289.8623,-1612.3916,65.0058) || IsPlayerInRangeOfPoint(playerid, 2, 289.8624,-1612.3895,60.5047)
		|| IsPlayerInRangeOfPoint(playerid, 2, 289.8621,-1612.3888,56.0036) || IsPlayerInRangeOfPoint(playerid, 2, 289.8615,-1612.3899,51.5025) || IsPlayerInRangeOfPoint(playerid, 2, 289.8613,-1612.3892,47.0014)
		|| IsPlayerInRangeOfPoint(playerid, 2, 290.0255,-1612.2723,32.9821) || IsPlayerInRangeOfPoint(playerid, 2, 289.9485,-1612.3932,17.8593))
		{
				new i = 13;
				while(pos[2] < GetDoorsZCoordForFloor3(i) + 3.5 && i > 0)
				    i --;

				if(i == 0 && pos[2] < GetDoorsZCoordForFloor3(0) + 2.0)
				    i = -1;

				if (i <= 12)
				{
				    if (ElevatorState3 != ELEVATOR_STATE_MOVING)
				    {
				        if (ElevatorFloor3 == i + 1)
				        {
	                        SendClientMessage(playerid, COLOR_LIGHTRED, "O elevador já está neste andar.");
	                        Floor_OpenDoors3(0);
							Elevator_OpenDoors3();
	                        return 1;
				        }
				    }
					CallElevator3(playerid, i + 1);
					GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~g~~h~Elevador~n~~g~~h~Chamado...~n~~w~Aguarde", 3000, 3);
					new strTempString[100];

					if (ElevatorState3 == ELEVATOR_STATE_MOVING)
					{
						format(strTempString, sizeof(strTempString), "Elevador chamado... Atualmente ele está no %s.", FloorNames3[ElevatorFloor3]);
					}
					else
					{
					    if (ElevatorFloor == 0)
					    {
							format(strTempString, sizeof(strTempString), "Elevador chamado... Atualmente ele está no %s.", FloorNames3[ElevatorFloor3]);
						}
						else
						{
							format(strTempString, sizeof(strTempString), "Elevador chamado... Atualmente ele está no %s.", FloorNames3[ElevatorFloor3]);
						}
					}
					SendClientMessage(playerid, COLOR_MESSAGE_YELLOW, strTempString);
					return 1;
				}
		}
		//
	}
    if ((newkeys & KEY_YES) && PlayerInfo[playerid][pEnchendoBomba] == 0 && PlayerInfo[playerid][pComprandoGas] == 0)
	{
	    if(keys & KEY_AIM) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode recarregar em quanto mira.");
	    if(gettime() < FloodCMD[playerid]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Aguarde um segundo antes de usar um comando novamente.");
	    if(OutrasInfos[playerid][oModShop] == 0)
	    {
	        if(PlayerInfo[playerid][pArmaMao] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está com uma arma em mãos.");
		    if(PlayerInfo[playerid][pMorto] > 0)  return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está muito ferido para recarregar.");
			if(IsPlayerInAnyVehicle(playerid) && GetPlayerAmmo(playerid) > 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve gastar toda a munição antes de recarregar a arma dentro do veículo.");

			new Arma = ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaModelo],
		        MuniArma,
		        BalasFaltam;

			//Taser
            if(TazerPlayer[playerid] == 1) {
                if(GetPlayerWeapon(playerid) > 0 && GetPlayerWeapon(playerid) != 23 && GetPlayerWeapon(playerid) != 25) ResetPlayerWeapons(playerid);
                if(GetPVarInt(playerid, "TempoTaser") == 0) {
				    SCM(playerid, COLOR_LIGHTGREEN, "-> Recarregando taser/Calibre 12.");
				    SetPVarInt(playerid, "TempoTaser", 5);
					ResetPlayerWeapons(playerid);
				    GivePlayerWeapon(playerid, 23, 1);
				}
			    return 1;
			}

			//Anti Bug
			ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = GetPlayerAmmo(playerid);
			if(ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] > MaxAmmoWep(Arma)) ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MaxAmmoWep(Arma);
		    if(ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] < 0) ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0;

		    if(Arma == 1)
		    {
		        ResetPlayerWeapons(playerid);
		        GivePlayerWeapon(playerid,1,1);
		    }
		    if(Arma == 2)
		    {
		        ResetPlayerWeapons(playerid);
		        GivePlayerWeapon(playerid,2,1);
		    }
		    if(Arma == 3)
		    {
		        ResetPlayerWeapons(playerid);
		        GivePlayerWeapon(playerid,3,1);
		    }
		    if(Arma == 4)
		    {
		        ResetPlayerWeapons(playerid);
		        GivePlayerWeapon(playerid,4,1);
		    }
		    if(Arma == 5)
		    {
		        ResetPlayerWeapons(playerid);
		        GivePlayerWeapon(playerid,5,1);
		    }
		    if(Arma == 6)
		    {
		        ResetPlayerWeapons(playerid);
		        GivePlayerWeapon(playerid,6,1);
		    }
		    if(Arma == 7)
		    {
		        ResetPlayerWeapons(playerid);
		        GivePlayerWeapon(playerid,7,1);
		    }
		    if(Arma == 15)
		    {
		        ResetPlayerWeapons(playerid);
		        GivePlayerWeapon(playerid,15,1);
		    }
		    if(Arma == 16)
		    {
		        ResetPlayerWeapons(playerid);
		        GivePlayerWeapon(playerid,16,20);
		    }
		    if(Arma == 17)
		    {
		        ResetPlayerWeapons(playerid);
		        GivePlayerWeapon(playerid,17,20);
		    }
			if(Arma == 22)
			{
			    if(GetPlayerAmmo(playerid) >= 7) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode jogar um pente cheio fora, gaste algumas balas antes.");
				if(PlayerInfo[playerid][pMun9mm] >= 1)
				{
				    MuniArma = 15;

				    if(GetPlayerInterior(playerid) > 0)
						BalasFaltam = (MuniArma-GetPlayerAmmo(playerid));
				    else
			    		BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
			    	if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

				    if(PlayerInfo[playerid][pMun9mm] >= BalasFaltam)
				    {
					    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-BalasFaltam;
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,22,MuniArma);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
					    if(!IsPlayerInAnyVehicle(playerid)) {
							ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					else
					{
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,22,PlayerInfo[playerid][pMun9mm]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun9mm];

					    PlayerInfo[playerid][pMun9mm] = 0;
					    if(!IsPlayerInAnyVehicle(playerid)) {
							ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					PlayerPlaySoundEx(playerid, 36401);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição.");
			}
			if(Arma == 23)
			{
			    if(GetPlayerAmmo(playerid) >= 15) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode jogar um pente cheio fora, gaste algumas balas antes.");
				if(PlayerInfo[playerid][pMun9mm] >= 1)
				{
				    MuniArma = 15;
			    	if(GetPlayerInterior(playerid) > 0)
						BalasFaltam = (MuniArma-GetPlayerAmmo(playerid));
				    else
			    		BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
			    	if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

				    if(PlayerInfo[playerid][pMun9mm] >= BalasFaltam)
				    {
					    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-BalasFaltam;
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,23,MuniArma);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
					    if(!IsPlayerInAnyVehicle(playerid)) {
							ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					else
					{
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,23,PlayerInfo[playerid][pMun9mm]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun9mm];

					    PlayerInfo[playerid][pMun9mm] = 0;
					    if(!IsPlayerInAnyVehicle(playerid)) {
							ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					PlayerPlaySoundEx(playerid, 36401);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição.");
			}
			if(Arma == 24)
			{
			    if(GetPlayerAmmo(playerid) >= 6) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode jogar um pente cheio fora, gaste algumas balas antes.");
				if(PlayerInfo[playerid][pMun9mm] >= 1)
				{
				    MuniArma = 15;
			    	if(GetPlayerInterior(playerid) > 0)
						BalasFaltam = (MuniArma-GetPlayerAmmo(playerid));
				    else
			    		BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
			    	if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

				    if(PlayerInfo[playerid][pMun9mm] >= BalasFaltam)
				    {
					    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-BalasFaltam;
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,24,MuniArma);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
					    if(!IsPlayerInAnyVehicle(playerid)) {
							ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					else
					{
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,24,PlayerInfo[playerid][pMun9mm]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun9mm];

					    PlayerInfo[playerid][pMun9mm] = 0;
					    if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					PlayerPlaySoundEx(playerid, 36401);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição.");
			}
			if(Arma == 25)
			{
			    if(GetPlayerAmmo(playerid) >= 5) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode jogar um pente cheio fora, gaste algumas balas antes.");
			    if(PlayerInfo[playerid][pMunCart] >= 1)
				{
				    MuniArma = 10;
			    	if(GetPlayerInterior(playerid) > 0)
						BalasFaltam = (MuniArma-GetPlayerAmmo(playerid));
				    else
			    		BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
			    	if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

					if(PlayerInfo[playerid][pMunCart] >= BalasFaltam)
					{
		   				PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-BalasFaltam;
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,25,MuniArma);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
					    if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					else
					{
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,25,PlayerInfo[playerid][pMunCart]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMunCart];
					    PlayerInfo[playerid][pMunCart] = 0;
					    if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
    				PlayerPlaySoundEx(playerid, 36401);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição.");
			}
			if(Arma == 28)
			{
			    if(GetPlayerAmmo(playerid) >= 28) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode jogar um pente cheio fora, gaste algumas balas antes.");
				if(PlayerInfo[playerid][pMun9mm] >= 1)
				{
				    MuniArma = 30;
			    	if(GetPlayerInterior(playerid) > 0)
						BalasFaltam = (MuniArma-GetPlayerAmmo(playerid));
				    else
			    		BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
			    	if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

				    if(PlayerInfo[playerid][pMun9mm] >= BalasFaltam)
				    {
					    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-BalasFaltam;
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,28,MuniArma);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
					    if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimation(playerid, "UZI", "UZI_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					else
					{
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,28,PlayerInfo[playerid][pMun9mm]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun9mm];

					    PlayerInfo[playerid][pMun9mm] = 0;
					    if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimation(playerid, "UZI", "UZI_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					PlayerPlaySoundEx(playerid, 36401);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição.");
			}
			if(Arma == 29)
			{
			    if(GetPlayerAmmo(playerid) >= 28) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode jogar um pente cheio fora, gaste algumas balas antes.");
				if(PlayerInfo[playerid][pMun9mm] >= 1)
				{
				    MuniArma = 30;
			    	if(GetPlayerInterior(playerid) > 0)
						BalasFaltam = (MuniArma-GetPlayerAmmo(playerid));
				    else
			    		BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
			    	if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

				    if(PlayerInfo[playerid][pMun9mm] >= BalasFaltam)
				    {
					    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-BalasFaltam;
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,29,MuniArma);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
					    if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					else
					{
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,29,PlayerInfo[playerid][pMun9mm]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun9mm];

					    PlayerInfo[playerid][pMun9mm] = 0;
					    if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					PlayerPlaySoundEx(playerid, 36401);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição.");
			}
			if(Arma == 30)
			{
			    if(GetPlayerAmmo(playerid) >= 28) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode jogar um pente cheio fora, gaste algumas balas antes.");
				if(PlayerInfo[playerid][pMun556] >= 1)
				{
				    MuniArma = 30;
			    	if(GetPlayerInterior(playerid) > 0)
						BalasFaltam = (MuniArma-GetPlayerAmmo(playerid));
				    else
			    		BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
			    	if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

				    if(PlayerInfo[playerid][pMun556] >= BalasFaltam)
				    {
					    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-BalasFaltam;
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,30,MuniArma);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
					    if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					else
					{
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,30,PlayerInfo[playerid][pMun556]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun556];

					    PlayerInfo[playerid][pMun556] = 0;
					    if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					PlayerPlaySoundEx(playerid, 36401);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição.");
			}
			if(Arma == 31)
			{
			    if(GetPlayerAmmo(playerid) >= 28) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode jogar um pente cheio fora, gaste algumas balas antes.");
				if(PlayerInfo[playerid][pMun556] >= 1)
				{
				    MuniArma = 30;
			    	if(GetPlayerInterior(playerid) > 0)
						BalasFaltam = (MuniArma-GetPlayerAmmo(playerid));
				    else
			    		BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
			    	if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

				    if(PlayerInfo[playerid][pMun556] >= BalasFaltam)
				    {
					    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-BalasFaltam;
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,31,MuniArma);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
					    if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					else
					{
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,31,PlayerInfo[playerid][pMun556]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun556];

					    PlayerInfo[playerid][pMun556] = 0;
					    if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					PlayerPlaySoundEx(playerid, 36401);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição.");
			}
			if(Arma == 32)
			{
			    if(GetPlayerAmmo(playerid) >= 28) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode jogar um pente cheio fora, gaste algumas balas antes.");
				if(PlayerInfo[playerid][pMun9mm] >= 1)
				{
				    MuniArma = 45;
			    	if(GetPlayerInterior(playerid) > 0)
						BalasFaltam = (MuniArma-GetPlayerAmmo(playerid));
				    else
			    		BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
			    	if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

				    if(PlayerInfo[playerid][pMun9mm] >= BalasFaltam)
				    {
					    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-BalasFaltam;
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,32,MuniArma);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
					    if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimation(playerid, "TEC", "TEC_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					else
					{
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,32,PlayerInfo[playerid][pMun9mm]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun9mm];

					    PlayerInfo[playerid][pMun9mm] = 0;
					    if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimation(playerid, "TEC", "TEC_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					PlayerPlaySoundEx(playerid, 36401);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição.");
			}
			if(Arma == 33)
			{
			    if(GetPlayerAmmo(playerid) >= 7) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode jogar um pente cheio fora, gaste algumas balas antes.");
				if(PlayerInfo[playerid][pMun556] >= 1)
				{
				    MuniArma = 10;
			    	if(GetPlayerInterior(playerid) > 0)
						BalasFaltam = (MuniArma-GetPlayerAmmo(playerid));
				    else
			    		BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
			    	if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

				    if(PlayerInfo[playerid][pMun556] >= BalasFaltam)
				    {
					    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-BalasFaltam;
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,33,MuniArma);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;

					    if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					else
					{
					    ResetPlayerWeapons(playerid);
					    GivePlayerWeapon(playerid,33,PlayerInfo[playerid][pMun556]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
					    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun556];

					    PlayerInfo[playerid][pMun556] = 0;
					    if(!IsPlayerInAnyVehicle(playerid))
						{
							ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
							SetTimerEx("StopTalk", 1000, false, "i", playerid);
						}
					}
					PlayerPlaySoundEx(playerid, 36401);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição.");
			}
			if(Arma == 34)
			{
			    if(GetPlayerAmmo(playerid) >= 10) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode jogar um pente cheio fora, gaste algumas balas antes.");
				if(PlayerInfo[playerid][pMun127] >= 1)
				{
	   				PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-1;
				    ResetPlayerWeapons(playerid);
				    GivePlayerWeapon(playerid,34,1);
				    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 1;
				    if(!IsPlayerInAnyVehicle(playerid))
					{
						ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 0, 1, 1, 1, 1, 1);
						SetTimerEx("StopTalk", 1000, false, "i", playerid);
					}
					PlayerPlaySoundEx(playerid, 36401);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição.");
			}
			if(Arma == 43)
			{
   				ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,43,25);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 25;
			}
			FloodCMD[playerid] = gettime()+2;
		}
	}
	return 1;
}

stock MaxAmmoWep(Arma){
	new MuniArma = 0;
    if(Arma == 22) MuniArma = 15;
	else if(Arma == 23) MuniArma = 15;
	else if(Arma == 24) MuniArma = 15;
	else if(Arma == 25) MuniArma = 25;
	else if(Arma == 28) MuniArma = 30;
	else if(Arma == 29) MuniArma = 30;
	else if(Arma == 30) MuniArma = 30;
	else if(Arma == 31) MuniArma = 30;
	else if(Arma == 32) MuniArma = 35;
	else if(Arma == 33) MuniArma = 10;
	else if(Arma == 34) MuniArma = 10;
	else MuniArma = 0;
	return MuniArma;
}

DistanceFlat(Float:ax, Float:ay, Float:bx,Float:by, &Float:distance)
{
	distance = floatsqroot(floatpower(bx-ax,2)+floatpower(by-ay,2));
 	return floatround(distance);
}

public CruiseControl(playerid)
{
    new vid = GetPlayerVehicleID(playerid);
    new Float:x, Float:y, Float:z;
    GetVehicleVelocity(vid, x, y, z);

	new keys, ud, lr;
 	GetPlayerKeys(playerid, keys, ud, lr);

	new Float:angle, Float:heading, Float:speed;
 	GetVehicleZAngle(vid, angle);
  	GetVehicleHeadingAngle(vid, heading);
   	DistanceFlat(0, 0, x, y, speed);

	new params[7];
	GetVehicleParamsEx(vid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
	if (PlayerCruiseSpeed[playerid] == 0.00 || GetPlayerState(playerid) != PLAYER_STATE_DRIVER || (speed < 0.2 * PlayerCruiseSpeed[playerid]) || z > 1 || params[0] == 0)
	{                                   //Cruise control will turn off:
  		PlayerCruiseSpeed[playerid] = 0.00;
    	SendClientMessage(playerid, COLOR_GREY, "* Cruse control desativado."); // === Remove this if not needed ===
    	return false;
	}
  	GetVehicleZAngle(vid, PlayerHeadingAngle[playerid]);
  	GetXYVelocity(vid, x, y, PlayerCruiseSpeed[playerid]);
  	SetVehicleVelocity(vid, x, y, z);

  	if(PlayerCruiseSpeed[playerid] < 0.2) return SetTimerEx("CruiseControl", 200, false, "d", playerid);
  	else return SetTimerEx("CruiseControl", 500, false, "d", playerid);
}

GetXYVelocity(vehicleid, &Float:x, &Float:y, Float:speed)
{
        new Float:a;
        x = 0.0;
        y = 0.0;
        GetVehicleZAngle(vehicleid, a);
        x += (speed * floatsin(-a, degrees));
        y += (speed * floatcos(-a, degrees));
}

GetAngleToXY(Float:X, Float:Y, Float:CurrentX, Float:CurrentY, &Float:Angle)
{
    Angle = atan2(Y-CurrentY, X-CurrentX);
    Angle = floatsub(Angle, 90.0);
    if(Angle < 0.0) Angle = floatadd(Angle, 360.0);
}

GetVehicleHeadingAngle(vehicleid, &Float:a)
{
        new Float:x, Float:y, Float:z;
        GetVehicleVelocity(vehicleid, x, y, z);
        GetAngleToXY(x, y, 0, 0, a);
}

public OnRconLoginAttempt(ip[], password[], success)
{
    new pip[16];
    if(!success)
    {
        for(new i = GetPlayerPoolSize(); i != -1; --i) //Loop through all players
        {
            GetPlayerIp(i, pip, sizeof(pip));
            if(!strcmp(ip, pip, true)) //If a player's IP is the IP that failed the login
            {
                if(PlayerInfo[i][pAdmin] < 5) {
                	Ban(i); //They are now banned.
				}
            }
        }
    }
    else {
        for(new i = GetPlayerPoolSize(); i != -1; --i) //Loop through all players
        {
            GetPlayerIp(i, pip, sizeof(pip));
            if(!strcmp(ip, pip, true)) //If a player's IP is the IP that failed the login
            {
                if(PlayerInfo[i][pAdmin] < 5) {
                    Ban(i); //They are now banned.
				}
			}
		}
    }
	return 1;
}

stock Porcentagem(Amount,Porcento)
{
	new valor = (Amount*Porcento)/100;
	return valor;
}

COMMAND:cc(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new Float:velocidade;
	if(sscanf(params, "f", velocidade)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /cc [Velocidade (10~30)]");
	else
	{
	    if(velocidade == 0)
	    {
	        PlayerCruiseSpeed[playerid] = 0.00;
	        SendClientMessage(playerid, COLOR_GREY, "[!]O Cruise Control foi desativado.");
	        return 1;
	    }
		if(velocidade < 10 || velocidade > 30) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O Cruise Control funciona apenas entre 10km/h e 30km/h.");

        if (PlayerCruiseSpeed[playerid] == 0.00)
    	{
   			new vid = GetPlayerVehicleID(playerid);
     		//if (GetVehicleSpeed(vid) == 0) return false;
      		//new Float:x, Float:y, Float:z;
       		//GetVehicleVelocity(vid, x, y, z);
       		GetVehicleZAngle(vid, PlayerHeadingAngle[playerid]);
			//DistanceFlat(0, 0, x, y, PlayerCruiseSpeed[playerid]);

			new Float:Velo = velocidade/100;
			PlayerCruiseSpeed[playerid] = Velo;
			if(PlayerCruiseSpeed[playerid] < 0.2) SetTimerEx("CruiseControl", 200, false, "d", playerid);
    		else SetTimerEx("CruiseControl", 500, false, "d", playerid);
      		SendClientMessage(playerid, COLOR_GREY, "[!]O Cruise control ativado."); // === Remove this if not needed ===
 		}
 		else
  		{
  			PlayerCruiseSpeed[playerid] = 0.00;
		}
	}
	return 1;
}

stock IsVehicleValid(id)
{
	new type=GetVehicleModel(id);
	new blocked[]={ 548, 425, 417, 487, 488, 497, 563, 447, 469, 520 };
	for(new i;i<sizeof(blocked);i++)
	{
		if(type == blocked[i])
		{
			return 0;
		}
	}
	return 1;
}

stock IsPlayerInArea(playerid, Float:max_x, Float:min_x, Float:max_y, Float:min_y)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	if(X <= max_x && X >= min_x && Y <= max_y && Y >= min_y) return 1;
	return 0;
}

stock GetPlayerSpeed_HACK(playerid)
{
        if(playerid != INVALID_PLAYER_ID)
        {
                new Float:Pos[3],Float:PS;
                GetPlayerVelocity(playerid, Pos[0], Pos[1], Pos[2]);
                PS = floatsqroot(Pos[0]*Pos[0] + Pos[1]*Pos[1] + Pos[2]*Pos[2])*200;
                return floatround(PS,floatround_round);
        }
        return INVALID_PLAYER_ID;
}
stock GetVehicleSpeed_HACK(vehicleid)
{
        if(vehicleid != INVALID_VEHICLE_ID)
        {
                new Float:Pos[3],Float:VS ;
                GetVehicleVelocity(vehicleid, Pos[0], Pos[1], Pos[2]);
                VS = floatsqroot(Pos[0]*Pos[0] + Pos[1]*Pos[1] + Pos[2]*Pos[2])*200;
                return floatround(VS,floatround_round);
        }
        return INVALID_VEHICLE_ID;
}

public OnPlayerUpdate(playerid)
{
	return 1;
}

forward OnPlayerUpdate_Timer();
public OnPlayerUpdate_Timer()
{
	for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
	    new str1[64];
	    if (PlayerInfo[playerid][pWaypoint])
		{
	    	format(str1, sizeof(str1), "~b~GPS:~w~ %s (%.2f metros)", PlayerInfo[playerid][pLocation], GetPlayerDistanceFromPoint(playerid, PlayerInfo[playerid][pWaypointPos][0], PlayerInfo[playerid][pWaypointPos][1], PlayerInfo[playerid][pWaypointPos][2]));
			PlayerTextDrawSetString(playerid, PlayerInfo[playerid][pTextdraws], str1);
		}
	    new keys, updown, leftright;
		if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid))
		{
	 		if(PlayerInfo[playerid][pLogado])
	   		{
				GetPlayerKeys(playerid,keys,updown,leftright);
	   			//======================== [ Corrigir Skin ]
	    		if(GetPlayerSkin(playerid) <= 0) SetPlayerSkin(playerid, 29);
	    		//========================

	    		if((updown & KEY_RIGHT) && !IsPlayerInAnyVehicle(playerid))
				{
				    new armaid = GetPlayerWeapon(playerid);
				    switch(armaid)
					{
						case 34: RemovePlayerAttachedObject(playerid, 0);
				    	case 43: RemovePlayerAttachedObject(playerid, 0);
					}
				}

	    		if(IsPlayerInAnyVehicle(playerid))
	      		{
	      		    new sspeed[126];
	      		    new Veiculo_ID = GetPlayerVehicleID(playerid);

	      		    static Float:s_fVX,
						   Float:s_fVY,
						   Float:s_fVZ;
	      		    GetVehicleVelocity(GetPlayerVehicleID(playerid), s_fVX, s_fVY, s_fVZ);

	    			// Velocimetro
					new Float:final_speed = floatsqroot(((s_fVX*s_fVX)+(s_fVY*s_fVY))+(s_fVZ*s_fVZ))*120.555558; // 250.666667 = kmph  // 199,4166672 = mph // 99.4166672
	     			new vid = GetVehicleSlot(Veiculo_ID);
	   				if(vid != -1)
		           	{
						new Float:Cruise = PlayerCruiseSpeed[playerid];
		           	   	if(PlayerCruiseSpeed[playerid] != 0.0)
		               	{
		    				format(sspeed, sizeof(sspeed), "%.0f km/h~n~~r~%d ~w~L", Cruise, VehicleInfo[vid][vFuel]);
       						PlayerTextDrawSetString(playerid, Speedo[playerid], sspeed);
	         		  	}
	                	else
	           		    {
	                		format(sspeed, sizeof(sspeed), "%.0f km/h~n~~r~%d ~w~L", final_speed, VehicleInfo[vid][vFuel]);
	               			PlayerTextDrawSetString(playerid, Speedo[playerid], sspeed);
						}
					}
					else
	    			{
      					format(sspeed, sizeof(sspeed), "%.0f km/h", final_speed);
     					PlayerTextDrawSetString(playerid, Speedo[playerid], sspeed);
					}
					if(final_speed > 150.0)
				   	{
				  		TogglePlayerControllable(playerid, false);
					   	format(string, sizeof(string), "AdmWarn: O ANTI-CHEAT detectou que %s(%d) pode estar de Speed Hack.", PlayerName(playerid,0), playerid);
						SendAdminMessage(COLOR_YELLOW,string);
				   	}
	    			/**************SPIKES*************/
					if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			  		{
		     			for(new s = 0; s < sizeof(SpikeInfo); s++)
			  	    	{
	  	       				if(IsPlayerInRangeOfPoint(playerid, 3.0, SpikeInfo[s][sX], SpikeInfo[s][sY], SpikeInfo[s][sZ]))
			            	{
	  	            			if(SpikeInfo[s][sCreated] == 1)
				  	            {
	  	               				new panels, doors, lights, tires;
				            		GetVehicleDamageStatus(Veiculo_ID, panels, doors, lights, tires);
						            tires = encode_tires(1, 1, 1, 1);
						            UpdateVehicleDamageStatus(Veiculo_ID, panels, doors, lights, tires);
			  	            	}
				  	        }
				  	    }
				  	}
					if(AppLigado[playerid] == 1 && Entregando[playerid] != 1 && TemCorrida[playerid] == 0)
					{
						Entregando[playerid] = 1;
						new pseudorand = random(sizeof(Temporizador));
						buscandocorridas[playerid] = SetTimerEx("ChamarEntrega", Temporizador[pseudorand][0], false,"i", playerid);
					}
	  				/***********END SPIKES************/
				  	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	      			{
			 			SetPlayerArmedWeapon(playerid, 0);
					}
					if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER && GetPlayerWeapon(playerid) == 24)
	      			{
			 			SetPlayerArmedWeapon(playerid, 0);
					}
					//==== [ Combustivel ]
					if (keys == KEY_YES)
					{
						if(PlayerInfo[playerid][pComprandoGas] > 1)
						{
		    				new Trailer = GetVehicleTrailer(Veiculo_ID);
	 				    	if(Trailer != 0)
	      					{
	           					if(PontoEntrega[PlayerInfo[playerid][pComprandoGas]][emStock] > 0)
		    					{
	 					    		if(VehicleInfo[Trailer][vCargaGas] < 1000)
						    		{
			    	    				new dimFinal = PlayerInfo[playerid][pGrana]-PontoEntrega[PlayerInfo[playerid][pComprandoGas]][emCobraProd];
							    	    if(dimFinal > 0)
										{
						    				PontoEntrega[PlayerInfo[playerid][pComprandoGas]][emStock]-=20;
											VehicleInfo[Trailer][vCargaGas]+=20;
											PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-PontoEntrega[PlayerInfo[playerid][pComprandoGas]][emCobraProd];

											format(StringBarco,sizeof(StringBarco), "%d/1000 litros.", VehicleInfo[Trailer][vCargaGas]);
									   		UpdateDynamic3DTextLabelText(VehicleInfo[Trailer][vTrailerInfo], 0xFFFFFF80, StringBarco);

									   		format(StringBarco,sizeof(StringBarco), "%s\n%d/%d litros.\n{00D67B}R$%d por litro{FFFFFF}\n'/carga comprar'", PontoEntrega[PlayerInfo[playerid][pComprandoGas]][emNome], PontoEntrega[PlayerInfo[playerid][pComprandoGas]][emStock],PontoEntrega[PlayerInfo[playerid][pComprandoGas]][emStockMax],PontoEntrega[PlayerInfo[playerid][pComprandoGas]][emCobraProd]);
									   		UpdateDynamic3DTextLabelText(PontoEntrega[PlayerInfo[playerid][pComprandoGas]][emLabel], 0xFFFFDECF, StringBarco);
										}
										else
										{
											SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro o suficiente.");
											PlayerInfo[playerid][pComprandoGas] = 0;
								           	TogglePlayerControllable(playerid,1);
										}
									}
									else
									{
										SendClientMessage(playerid, COLOR_WHITE, "O tanque já está cheio.");
										PlayerInfo[playerid][pComprandoGas] = 0;
							           	TogglePlayerControllable(playerid,1);
									}
			    				}
			    				else
			    				{
			    					SendClientMessage(playerid, COLOR_WHITE, "Oh não, parece que acabou o estoque desta industria.");
									PlayerInfo[playerid][pComprandoGas] = 0;
	   								TogglePlayerControllable(playerid,1);
								}
					   		}
	   					}
					 	else if(PlayerInfo[playerid][pEnchendoBomba] == 1)
						{
						    new TrailerR = GetVehicleTrailer(PlayerInfo[playerid][pCargaGas]);
						    if(VehicleInfo[TrailerR][vCargaTipo] == 1)
							{
						   		if (PlayerInfo[playerid][pCargaGas] != INVALID_VEHICLE_ID && PlayerInfo[playerid][pGasPump] != -1)
								{
								    new empID = PumpData[PlayerInfo[playerid][pGasPump]][pumpBusiness];
								    if(EmpInfo[empID][eReqFuel] > 0)
							      	{
							       		if(PumpData[PlayerInfo[playerid][pGasPump]][pumpFuel] <= 5000)
							        	{
											if(EmpInfo[empID][eBank] >= EmpInfo[empID][eReqFuelPay])
											{
								   				if (VehicleInfo[TrailerR][vCargaGas] > 0)
												{
												    if (VehicleInfo[TrailerR][vCargaGas] < 0)
									   				{
									       				Pump_Save(PlayerInfo[playerid][pGasPump]);

										        		PlayerInfo[playerid][pGasPump] = -1;
							    						PlayerInfo[playerid][pGasStation] = -1;
														PlayerInfo[playerid][pEnchendoBomba] = 0;
														VehicleInfo[TrailerR][vCargaTipo] = 0;
											           	TogglePlayerControllable(playerid,1);
											           	SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem mais combustivel em sua carreta!");
											           	SendClientMessage(playerid, COLOR_LIGHTRED, "[ENTREGA] Você parou de abastecer a bomba de combustivel.");
											   		}

											   		if(EmpInfo[empID][eReqFuel] >= 20) {
											   		    if(VehicleInfo[TrailerR][vCargaGas] >= 20){
															VehicleInfo[TrailerR][vCargaGas]-=20;
															EmpInfo[empID][eReqFuel]-=20;
															PumpData[PlayerInfo[playerid][pGasPump]][pumpFuel]+=20;
														}
														else {
												    		EmpInfo[empID][eReqFuel]-=VehicleInfo[TrailerR][vCargaGas];
												    		PumpData[PlayerInfo[playerid][pGasPump]][pumpFuel]+=VehicleInfo[TrailerR][vCargaGas];
												    		VehicleInfo[TrailerR][vCargaGas] = 0;
														}
													}
												    else{
												        if(VehicleInfo[TrailerR][vCargaGas] >= EmpInfo[empID][eReqFuel]){
															VehicleInfo[TrailerR][vCargaGas]-=EmpInfo[empID][eReqFuel];
															EmpInfo[empID][eReqFuel]-=EmpInfo[empID][eReqFuel];
															PumpData[PlayerInfo[playerid][pGasPump]][pumpFuel]+=EmpInfo[empID][eReqFuel];
														}
														else {
												    		EmpInfo[empID][eReqFuel]-=VehicleInfo[TrailerR][vCargaGas];
												    		PumpData[PlayerInfo[playerid][pGasPump]][pumpFuel]+=VehicleInfo[TrailerR][vCargaGas];
												    		VehicleInfo[TrailerR][vCargaGas] = 0;
														}
												    }

												    if(VehicleInfo[TrailerR][vCargaGas] < 0) VehicleInfo[TrailerR][vCargaGas] = 0;
												    if(EmpInfo[empID][eReqFuel] < 0) EmpInfo[empID][eReqFuel] = 0;

										   			format(string, sizeof(string), "[%d]\n{FFFFFF} %d litros", PlayerInfo[playerid][pGasPump], PumpData[PlayerInfo[playerid][pGasPump]][pumpFuel]);
										   			UpdateDynamic3DTextLabelText(PumpData[PlayerInfo[playerid][pGasPump]][pumpText3D], 0xB9FFBC54, string);

             										format(StringBarco,sizeof(StringBarco), "%d/1000 litros.", VehicleInfo[TrailerR][vCargaGas]);
									   				UpdateDynamic3DTextLabelText(VehicleInfo[TrailerR][vTrailerInfo], 0xFFFFFF80, StringBarco);
										    		PlayerInfo[playerid][pGrana] += EmpInfo[empID][eReqFuelPay];
										    		EmpInfo[empID][eBank] = EmpInfo[empID][eBank]-EmpInfo[empID][eReqFuelPay];
												}
												else
												{
									   				if(PlayerInfo[playerid][pEnchendoBomba] == 1)
													{
										   				Pump_Save(PlayerInfo[playerid][pGasPump]);

										        		PlayerInfo[playerid][pGasPump] = -1;
							    						PlayerInfo[playerid][pGasStation] = -1;
														PlayerInfo[playerid][pEnchendoBomba] = 0;
											           	TogglePlayerControllable(playerid,1);
											           	if (IsValidDynamic3DTextLabel(VehicleInfo[TrailerR][vTrailerInfo])) DestroyDynamic3DTextLabel(VehicleInfo[TrailerR][vTrailerInfo]);
											           	SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem mais combustivel em sua carreta!");
											           	SendClientMessage(playerid, COLOR_WHITE, "{00CDD8}[ENTREGA]{FFFFFF} Você parou de abastecer a bomba de combustivel.");
													}
												}
											}
											else
											{
											    if(PlayerInfo[playerid][pEnchendoBomba] == 1)
												{
												    Pump_Save(PlayerInfo[playerid][pGasPump]);

													EmpInfo[empID][eReqFuel] = 0;
									        		PlayerInfo[playerid][pGasPump] = -1;
						    						PlayerInfo[playerid][pGasStation] = -1;
												    PlayerInfo[playerid][pEnchendoBomba] = 0;
										           	TogglePlayerControllable(playerid,1);
										           	SendClientMessage(playerid, COLOR_WHITE, "O dinheiro da empresa é insuficiente para pagar por sua carga!");
										           	SendClientMessage(playerid, COLOR_WHITE, "{00CDD8}[ENTREGA]{FFFFFF} Você parou de abastecer a bomba de combustivel.");
												}
											}
										}
										else
										{
										    if(PlayerInfo[playerid][pEnchendoBomba] == 1)
											{
											    Pump_Save(PlayerInfo[playerid][pGasPump]);
											    EmpInfo[empID][eReqFuel] = 0;
											    PlayerInfo[playerid][pEnchendoBomba] = 0;
											    PlayerInfo[playerid][pGasPump] = -1;
						    					PlayerInfo[playerid][pGasStation] = -1;
									           	TogglePlayerControllable(playerid,1);
									           	SendClientMessage(playerid, COLOR_WHITE, "A bomba já está cheia!");
									           	SendClientMessage(playerid, COLOR_WHITE, "{00CDD8}[ENTREGA]{FFFFFF} Você parou de abastecer a bomba de combustivel.");
											}
										}
									}
									else
									{
									    if(PlayerInfo[playerid][pEnchendoBomba] == 1)
										{
						    				PlayerInfo[playerid][pEnchendoBomba] = 0;
									    	PlayerInfo[playerid][pGasPump] = -1;
						   				 	PlayerInfo[playerid][pGasStation] = -1;
						       		     	TogglePlayerControllable(playerid,1);
						       		     	SendClientMessage(playerid, COLOR_WHITE, "{00CDD8}[EMPRESA]{FFFFFF} Nós não estamos mais comprando no momento.");
						       		     	SendClientMessage(playerid, COLOR_WHITE, "{00CDD8}[ENTREGA]{FFFFFF} Você parou de abastecer a bomba de combustivel.");
						       		     	Pump_Save(PlayerInfo[playerid][pGasPump]);
										}
									}
								}
								else
								{
								    if(PlayerInfo[playerid][pEnchendoBomba] == 1)
									{
									    PlayerInfo[playerid][pEnchendoBomba] = 0;
							           	TogglePlayerControllable(playerid,1);
							           	SendClientMessage(playerid, COLOR_WHITE, "{00CDD8}[POSTO]{FFFFFF} Você parou de abastecer a bomba de combustivel.");
							           	Pump_Save(PlayerInfo[playerid][pGasPump]);
							           	PlayerInfo[playerid][pGasPump] = -1;
						    			PlayerInfo[playerid][pGasStation] = -1;
									}
								}
							}
						}
					}
					if (keys == KEY_CTRL_BACK)
			  		{
			  		    new TrailerR = GetVehicleTrailer(PlayerInfo[playerid][pCargaGas]);
			    		if(VehicleInfo[TrailerR][vCargaTipo] == 1)
						{
						   	if(PlayerInfo[playerid][pComprandoGas] == 1)
							{
		     					PlayerInfo[playerid][pComprandoGas] = 0;
		          				TogglePlayerControllable(playerid,1);
				            	SendClientMessage(playerid, COLOR_WHITE, "{00CDD8}[POSTO]{FFFFFF} Você parou de comprar combustivel. Agora vá a um posto e use '/abastecerbomba'.");
					            Pump_Save(PlayerInfo[playerid][pGasPump]);
							}
							if(PlayerInfo[playerid][pComprandoGas] > 1)
							{
		     					TogglePlayerControllable(playerid,1);
				           		SendClientMessage(playerid, COLOR_WHITE, "{00CDD8}[POSTO]{FFFFFF} Você parou de comprar combustivel. Agora vá a um posto e use '/abastecerbomba'.");
					            SalvarPontoEntrega(PlayerInfo[playerid][pComprandoGas]);
					            PlayerInfo[playerid][pComprandoGas] = 0;
					            PlayerInfo[playerid][pGasPump] = -1;
							}
							else if(PlayerInfo[playerid][pEnchendoBomba] == 1)
							{
					            PlayerInfo[playerid][pEnchendoBomba] = 0;
					            TogglePlayerControllable(playerid,1);
					            SendClientMessage(playerid, COLOR_WHITE, "{00CDD8}[Porto]{FFFFFF} Você parou de abastecer a bomba de combustivel.");
					            PlayerInfo[playerid][pGasPump] = -1;
					    		PlayerInfo[playerid][pGasStation] = -1;
							}
						}
					}
					//Abastecendo
					if(filling[playerid] && filling_started[playerid])
					{
					    new id = Pump_Nearest(playerid);
					    new biz = PumpData[id][pumpBusiness];
				   		if(biz == filling_biz[playerid] && IsPlayerInAnyVehicle(playerid))
				    	{
				     		new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
				      		GetPlayerKeys(playerid,keys,updown,leftright);
				      		if(keys == KEY_HANDBRAKE && (VehicleInfo[slot][vFuel] + filling_amount[playerid]) < 100 && PlayerInfo[playerid][pGrana] > (EmpInfo[biz][eFuelPrice] * filling_amount[playerid]))
				        	{
								new str[256];
								filling_amount[playerid] ++;

								new vehid = GetPlayerVehicleID(playerid);
								if(GetVehicleModel(vehid) == 416 || GetVehicleModel(vehid) == 523 || GetVehicleModel(vehid) == 427 || GetVehicleModel(vehid) == 490 || GetVehicleModel(vehid) == 528 ||
								GetVehicleModel(vehid) == 407 || GetVehicleModel(vehid) == 544 || GetVehicleModel(vehid) == 596 || GetVehicleModel(vehid) == 597 || GetVehicleModel(vehid) == 598 ||
								GetVehicleModel(vehid) == 599)
								{

								}
								else
								{
									PumpData[id][pumpFuel]--;
									Pump_Refresh_Abastecendo(id);
								}
								new newamount = (VehicleInfo[slot][vFuel] + filling_amount[playerid]);
								new newprice = (EmpInfo[biz][eFuelPrice] * filling_amount[playerid]);
								format(str,sizeof(str),"~g~Abastecendo~n~Quantia atual: ~w~%d/100~n~~g~Preco atual: ~w~R$%d~n~Aperte ~g~~k~~VEHICLE_HANDBRAKE~~w~ para parar",newamount,newprice);
								GameTextForPlayer(playerid,str,5000,5);
								PlayerPlaySound(playerid,1150,0.0,0.0,0.0);
				    		}
				      		else
				      		{
				        		new newprice = (EmpInfo[biz][eFuelPrice] * filling_amount[playerid]);
				          		new str[256];
				          		format(str,sizeof(str),"~g~Veiculo abastecido~n~~w~Valor: ~r~R$%d",newprice);
				            	GameTextForPlayer(playerid,str,5000,5);
				            	format(string, sizeof(string), "[POSTO] Veículo abastecido. Valor: %d.", newprice);
								SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

								new vehid = GetPlayerVehicleID(playerid);
								if(GetVehicleModel(vehid) == 416 || GetVehicleModel(vehid) == 523 || GetVehicleModel(vehid) == 427 || GetVehicleModel(vehid) == 490 || GetVehicleModel(vehid) == 528 ||
								GetVehicleModel(vehid) == 407 || GetVehicleModel(vehid) == 544 || GetVehicleModel(vehid) == 596 || GetVehicleModel(vehid) == 597 || GetVehicleModel(vehid) == 598 ||
								GetVehicleModel(vehid) == 599)
								{
								    SendClientMessage(playerid, COLOR_LIGHTGREEN, "O abastecimento foi pago pelo governo.");
								}
								else
								{
				            		PlayerInfo[playerid][pGrana] -= newprice;
				            		EmpInfo[biz][eBank] += newprice;
								}
				            	VehicleInfo[slot][vFuel] += filling_amount[playerid];
				            	filling_amount[playerid] = 0;
								filling_biz[playerid] = -1;
								filling[playerid] = 0;
								filling_started[playerid] = 0;
								PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
				    		}
						}
						else
						{
				  			SendClientMessage(playerid, COLOR_WHITE, "{FF6347}Você saiu do posto de combustivel!");
				     		filling_amount[playerid] = 0;
							filling_biz[playerid] = -1;
							filling[playerid] = 0;
							filling_started[playerid] = 0;
						}
					}
					//============
					//Anti Cheat
			 		if(GetPlayerVehicleID(playerid) != 0)
					{
						if(GetPlayerVehicleID(playerid) != GetPVarInt(playerid, "Veiculo_Anterior"))
						{
							if(GetPVarInt(playerid, "Troca_Veiculo") > gettime())
							{
								TogglePlayerControllable(playerid, false);
						  		format(string, sizeof(string), "[ANTI-CHEAT]: %s [%d] foi banido por car spam.", PlayerName(playerid, 0), playerid);
								SendAdminMessage(COLOR_LIGHTRED,string);
								SendClientMessage(playerid, COLOR_WHITE, "<!> O anti-cheat de veículos está ATIVO.");
						        PlayerInfo[playerid][pBanido] = 1;

								print(string);
								//========================================
							  	/*DesarmandoPlayer[playerid] = 2;
								ResetPlayerWeapons(playerid);
								//SetPlayerAmmo(playerid, weaponid, 0);
								PlayerInfo[playerid][pArmaMao] = 0;
								RemovePlayerAttachedObject(playerid, 0);*/
								//=======================================

								Banir(PrintPlayerIP(playerid),GetUserName(playerid),PlayerInfo[playerid][pID], "Anti Cheat","Car Spam");
        						SetTimerEx("TimerKick", 500, 0, "d", playerid);
							}
							SetPVarInt(playerid, "Veiculo_Anterior", GetPlayerVehicleID(playerid));
							SetPVarInt(playerid, "Troca_Veiculo", gettime() + 2);
						}
					}
					//============
				}
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					//==== [ Armas]
				    new IdArma = PlayerInfo[playerid][pArmaMao];
					new armanamao = GetPlayerWeapon(playerid);
	    			if(armanamao != ArmaData[IdArma][ArmaModelo])
	    			{
	    			    if(OutrasInfos[playerid][oAlgemado] == 0 && OutrasInfos[playerid][oAmarrado] == 0)
	    			    {
	 				      	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    		    		{
	    		    		    new weapons[13][2];
	    		    		    if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	    		    		    {
	    		    		        if(ArmaData[IdArma][ArmaModelo] != 24)
	    		    		        {
										for (new p = 0; p < 13; p++)
										{
					 						GetPlayerWeaponData(playerid, p, weapons[p][0], weapons[p][1]);
											if(weapons[p][0] != 0 && weapons[p][1] != 0)
											{
					        					SetPlayerArmedWeapon(playerid, weapons[p][0]);
											}
										}
									}
	    		    		    }
	    		    		    else
	    		    		    {
									for (new p = 0; p < 13; p++)
									{
				 						GetPlayerWeaponData(playerid, p, weapons[p][0], weapons[p][1]);
										if(weapons[p][0] != 0 && weapons[p][1] != 0)
										{
				        					SetPlayerArmedWeapon(playerid, weapons[p][0]);
										}
									}
								}
							}
						}
	        		}
	        		//==== [ Poker ]
	     			if(GetPVarType(playerid, "tmpPlacePokerTable")) // Place Poker Table
				 	{
						if(keys == KEY_SPRINT)
						{
							DeletePVar(playerid, "tmpPlacePokerTable");

							new Float:x, Float:y, Float:z;
							GetPlayerPos(playerid, x, y, z);
							new int = GetPlayerInterior(playerid);
							new vw = GetPlayerVirtualWorld(playerid);

							new tableid = PlacePokerTable(OutrasInfos[playerid][oEditandoMesaPoker]-1, 0, x, y, z+2.0, 0.0, 0.0, 0.0, vw, int);

							SetPVarFloat(playerid, "tmpPkrX", PokerTable[tableid][pkrX]);
							SetPVarFloat(playerid, "tmpPkrY", PokerTable[tableid][pkrY]);
							SetPVarFloat(playerid, "tmpPkrZ", PokerTable[tableid][pkrZ]);
							SetPVarFloat(playerid, "tmpPkrRX", PokerTable[tableid][pkrRX]);
							SetPVarFloat(playerid, "tmpPkrRY", PokerTable[tableid][pkrRY]);
							SetPVarFloat(playerid, "tmpPkrRZ", PokerTable[tableid][pkrRZ]);

							EditDynamicObject(playerid, PokerTable[tableid][pkrObjectID]);

							new szString[128];
							format(szString, sizeof(szString), "Você colocou a Mesa de Poker %d.", tableid);
							SendClientMessage(playerid, COLOR_WHITE, szString);
						}
					}

     				//==== [ Fogo ]
	    			new Float:health;
					GetPlayerHealth(playerid,health);
					if(IsAroundFire(playerid, 1, 4.0))
					{
					    if(GetPlayerSkin(playerid) != 277  && GetPlayerSkin(playerid) != 278 && GetPlayerSkin(playerid) != 279)
					    	if(health > 20) SetPlayerHealth(playerid, health-0.8);

						new id = IsAroundFire(playerid,2,4.0);
						if(keys & KEY_FIRE && GetPlayerWeapon(playerid) == 42 && IsPlayerAimObjectID(playerid, FDInfo[id][fObject]))
						{
							FDInfo[id][fHealth]--;
							if(FDInfo[id][fHealth] <= 0)
						    {
				  				if(IsValidDynamicObject(FDInfo[id][fObject])) DestroyDynamicObject(FDInfo[id][fObject]);
				   				FDInfo[id][fObject]=0;
					  			FDInfo[id][fdX]=0.0;
				   				FDInfo[id][fdY]=0.0;
				   				FDInfo[id][fdZ]=0.0;
		      					FDInfo[id][fWorld]=0;
		      					FDInfo[id][fInt]=0;
		      					FDInfo[id][fTime]=0;
		      					FDInfo[id][fHealth]=0;
						    }
						}
					}
					//==========================================================
					new Float:x,Float:y,Float:NewPos_Z;
					GetPlayerPos(playerid, x, y, NewPos_Z);

	    			new c = -1;
				    if(PlayerInfo[playerid][pEntrouCasa] != -1) c = PlayerInfo[playerid][pEntrouCasa];
				    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) c = PlayerInfo[playerid][pEntrouEmpresa];
				    else if(PlayerInfo[playerid][pEntrouComplexo] != -1) c = PlayerInfo[playerid][pEntrouComplexo];
				    else if(PlayerInfo[playerid][pEntrouGaragem] != -1) c = PlayerInfo[playerid][pEntrouGaragem];


				   	new surf = GetPlayerSurfingVehicleID(playerid);
					if(surf == INVALID_VEHICLE_ID)
					{
				  		if(GetPlayerSpeed_HACK(playerid) > 100.0)
				   		{
				     	    if(AvisoDeSpeed[playerid] == 0)
				     	    {
				     	        if(c != -1 && Pos_Z_Old_AV[playerid] < 2)
						   	    {
						   	        Pos_Z_Old_AV[playerid]++;
						   	    }
						   	    else
						   	    {
						   	        if(c != -1 && NewPos_Z < (Pos_Z_Old[playerid]-40))
					     	  		{
							   		    AvisoDeSpeed[playerid] = 10;
							   			TogglePlayerControllable(playerid, false);
							       		format(string, sizeof(string), "AdmWarn: O ANTI-CHEAT detectou que %s(%d) pode estar de Speed Hack/AirBreak.", PlayerName(playerid,0), playerid);
										SendAdminMessage(COLOR_YELLOW,string);
									}
									else
									{
									    if(GetPlayerInterior(playerid) != 0)
									    {
										    if(CaindoInt_Av[playerid] == 0)
										    {
											    CaindoInt[playerid] = 1;
											    CaindoInt_Av[playerid] = 1;
											    Pos_Z_Old_AV[playerid] = 0;
											    TogglePlayerControllable(playerid, false);
							                    format(string, sizeof(string), "AdmWarn: O ANTI-BUG detectou que %s(%d) pode estar caindo do céu, na entrada de um interior.", PlayerName(playerid,0), playerid);
												SendAdminMessage(COLOR_YELLOW,string);
											    SendClientMessage(playerid, COLOR_LIGHTRED, "Possivelmente você estava caindo de um interior e foi congelado. Use ( /corrigirpos )");
											}
										}
									}
								}
							}
				   		}
					}
					//==========================================================
					//AntiWeaponHack
					if(TempoResetIsso[playerid] > 0) TempoResetIsso[playerid]--;
					if(TempoResetIsso[playerid] == 1)
					{
				        WeaponHackAvs[playerid] = 0;
	    				TempoResetIsso[playerid] = 0;
					}

					if(armanamao > 0)
					{
					    if(TazerPlayer[playerid] == 0)
					    {
						  	if(DesarmandoPlayer[playerid] == 0)
						   	{
						   	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
						    	{
							   	    if(PlayerInfo[playerid][pArmaMao] == 0)
									{
									    if(armanamao != 46 && armanamao != 43)
									    {
											if(WeaponHackAvs[playerid] < 3)
											{
												if(WeaponHackAvs[playerid] == 1) TempoResetIsso[playerid] = 10000;
						               			WeaponHackAvs[playerid]++;
											}
			        						else
									        {
									            if(armanamao > 21)
								            	{
													format(string, sizeof(string), "AdmWarn: O ANTI-CHEAT %s[%d] pode estar de Weapon Hack. (1) [Arma Mão: 0]", PlayerName(playerid,0), playerid);
													SendAdminMessage(COLOR_YELLOW,string);
												}
												RemovePlayerWeapon(playerid, armanamao);
											}
										}
									}
									else
									{
										if(ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaModelo] != armanamao)
										{
								    		if(armanamao != 46 && armanamao != 43)
							   				{
								      			if(WeaponHackAvs[playerid] < 3)
										       	{
						            				if(WeaponHackAvs[playerid] == 1) TempoResetIsso[playerid] = 10000;
		                    						WeaponHackAvs[playerid]++;
										        }
										        else
										        {
										            if(armanamao > 21)
									            	{
													   	format(string, sizeof(string), "AdmWarn: O ANTI-CHEAT %s[%d] pode estar de Weapon Hack. (2) [Arma Mão != Arma]", PlayerName(playerid,0), playerid);
														SendAdminMessage(COLOR_YELLOW,string);
													}
													RemovePlayerWeapon(playerid, armanamao);
												}
											}
										}
									}
								}
							}
						}
					}
					//==========================================================
				}
				//Anti RT
				new Float:loss;
				loss = NetStats_PacketLossPercent(playerid);
				if(loss >= 20.0)
				{
					if(AvisoRT[playerid] == 0)
					{
				  		//format(string, sizeof(string), "AdmWarn: %s[%d] pode estar com o tempo travado(relógio travado, RT)", PlayerName(playerid,0), playerid);
						//SendAdminMessage(COLOR_YELLOW,string);
					    GameTextForPlayer(playerid, "Voce pode estar dessincronizado (RT).", 8000, 6);
						AvisoRT[playerid] = 1;
					}
				}
				//======================================
			}
		}
	}
	return 1;
}

stock IsPlayerAimObjectID(playerid, objectid)
{
	new Float:X1, Float:Y1, Float:Z1, Float:X2, Float:Y2, Float:Z2;
	GetPlayerPos(playerid, X1, Y1, Z1);
	GetDynamicObjectPos(objectid, X2, Y2, Z2);
	new Float:Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
	new Float:A;
	GetPlayerFacingAngle(playerid, A);
    X1 += (Distance * floatsin(-A, degrees));
    Y1 += (Distance * floatcos(-A, degrees));
	Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
	if(Distance < 1.5) return true;
	return false;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    new stringTipo[256];
	if(HackerJob[playerid] == 1)
	{
	    if(!response)
   		{
   		    KillTimer(HJLimitTimer);
   		    ShowPlayerDialog(playerid,-1,0,"","","","");
      		
			HackerJob[playerid] = 0;
			SendClientMessage(playerid, COLOR_LIGHTRED, "Você falhou como hacker.");
			return 1;
		}
	    if(dialogid == 1998)
		{
       		if(strfind(inputtext,"began") != -1)
       		{

		   			TogglePlayerControllable(playerid,false);
				 	GameTextForPlayer(playerid,"~p~Enviando...",6000,6);
				 	return SetTimerEx("HackerTwo", 6000, 0, "d", playerid);
   			}
			else
			{
		   		    KillTimer(HJLimitTimer);
					HackerJob[playerid] = 0;
					ShowPlayerDialog(playerid,-1,0,"","","","");
					SendClientMessage(playerid, COLOR_LIGHTRED, "Você falhou como hacker.");
					return 1;
			}
		}
	    if(dialogid == 1999)
		{
			if(strfind(inputtext,"keygen") != -1)
       		{
		 			GameTextForPlayer(playerid,"~p~Enviando...",6000,6);
				 	return SetTimerEx("HackerThree", 6000, 0, "d", playerid);
  	 		}
			else
			{
		   		    KillTimer(HJLimitTimer);
					HackerJob[playerid] = 0;
					ShowPlayerDialog(playerid,-1,0,"","","","");
					SendClientMessage(playerid, COLOR_LIGHTRED, "Você falhou como hacker.");
					return 1;
			}
		}
	    if(dialogid == 2000)
		{
			if(strfind(inputtext,"cracked") != -1)
       		{
				   	GameTextForPlayer(playerid,"~p~Enviando...",6000,6);
				 	return SetTimerEx("HackerFour", 6000, 0, "d", playerid);
   			}
			else
			{
		   		    KillTimer(HJLimitTimer);
					HackerJob[playerid] = 0;
					ShowPlayerDialog(playerid,-1,0,"","","","");
					SendClientMessage(playerid, COLOR_LIGHTRED, "Você falhou como hacker.");
					return 1;
			}
		}
	    if(dialogid == 2001)
		{
			if(strfind(inputtext,"worm") != -1)
			{
	  				GameTextForPlayer(playerid,"~p~Enviando...",6000,6);
				 	return SetTimerEx("HackerFive", 6000, 0, "d", playerid);
     		}
			else
			{
		   		    KillTimer(HJLimitTimer);
					HackerJob[playerid] = 0;
					ShowPlayerDialog(playerid,-1,0,"","","","");
					SendClientMessage(playerid, COLOR_LIGHTRED, "Você falhou como hacker.");
					return 1;
			}
		}
		if(dialogid == 2002)
		{
 			if(strfind(inputtext,"virus") != -1)
  			{
				 	GameTextForPlayer(playerid,"~p~Enviando...",6000,6);
	 				return SetTimerEx("HackerSix", 6000, 0, "d", playerid);
   			}
 			else
 			{
		   		    KillTimer(HJLimitTimer);
		   		    ShowPlayerDialog(playerid,-1,0,"","","","");
					HackerJob[playerid] = 0;
					SendClientMessage(playerid, COLOR_LIGHTRED, "Você falhou como hacker.");
					return 1;
			}
		}
		if(dialogid == 2003)
		{
	  		for(new i = 0; i < strlen(inputtext); i++)
	        {
	        	if(strfind(inputtext,"trojan") != -1)
	       		{
				 	GameTextForPlayer(playerid,"~p~Enviando...",6000,6);
	 				return SetTimerEx("HackerSeven", 6000, 0, "d", playerid);
	     		}
    	 		else
	  			{

		   		    KillTimer(HJLimitTimer);
		   		    ShowPlayerDialog(playerid,-1,0,"","","","");
					HackerJob[playerid] = 0;
					SendClientMessage(playerid, COLOR_LIGHTRED, "Você falhou como hacker.");
					return 1;
				}
	      	}
		}
		return 1;
	}
	switch(dialogid)
	{
		case DIALOG_JOGODoBichoMenu: 
		{
			if(!response) return 1;
			switch(listitem) 
			{
				case 0: MostrarMenuTipoAposta(playerid);
				case 1: MostrarMenuTabela(playerid);
			}
		}
		case DIALOG_JOGODoBichoTabela: 
		{
			if(!response) return MostrarMenuBicho(playerid);
		}
		case DIALOG_JOGODoBichoTipoAposta: 
		{
			if(!response) return MostrarMenuBicho(playerid);
			new lista[2048];
			format(lista, sizeof(lista), "Grupo\tAnimal\tDezenas\n");
			for(new i = 1; i < sizeof(TabelaBichos);i++) 
			{
				format(lista, sizeof(lista), "%s{FCB876}%d\t{a9c4e4}%s\t%d-%d-%d-%d\n", lista, i, TabelaBichos[i][Bicho], TabelaBichos[i][Dezenas][0], TabelaBichos[i][Dezenas][1], TabelaBichos[i][Dezenas][2], TabelaBichos[i][Dezenas][3]);
			}
			return ShowPlayerDialog(playerid, DIALOG_JOGODoBichoApostar, DIALOG_STYLE_TABLIST_HEADERS, "{ffff00}#{ffffff}Bicho | Selecione um animal", lista, "OK", "Voltar");
		}
		case DIALOG_JOGODoBichoApostar: 
		{
			if(!response) return MostrarMenuTipoAposta(playerid);
			new animal = (listitem+1), stringBB[1024];
			SetPVarInt(playerid, "apostando_bicho", animal);
			format(stringBB, sizeof(stringBB), "Você está apostando em:\n\n\
				Animal: %s\n\
				Grupo: %d\n\
				Dezenas: %d-%d-%d-%d\n\nDigite o valor que deseja apostar:\
				", TabelaBichos[animal][Bicho], animal, TabelaBichos[animal][Dezenas][0], TabelaBichos[animal][Dezenas][1], TabelaBichos[animal][Dezenas][2], TabelaBichos[animal][Dezenas][3]);
			ShowPlayerDialog(playerid, DIALOG_JOGODoBichoApostarValor, DIALOG_STYLE_INPUT, "{ffff00}#{ffffff}Bicho | Valor da aposta", stringBB, "OK", "Voltar");
			return 1;
		}
		case DIALOG_JOGODoBichoApostarValor: 
		{
			if(!response) {
				new lista[2048];
				format(lista, sizeof(lista), "Grupo\tAnimal\tDezenas\n");
				for(new i = 1; i < sizeof(TabelaBichos);i++) {
					format(lista, sizeof(lista), "%s{FCB876}%d\t{a9c4e4}%s\t%d-%d-%d-%d\n", lista, i, TabelaBichos[i][Bicho], TabelaBichos[i][Dezenas][0], TabelaBichos[i][Dezenas][1], TabelaBichos[i][Dezenas][2], TabelaBichos[i][Dezenas][3]);
				}
				return ShowPlayerDialog(playerid, DIALOG_JOGODoBichoApostar, DIALOG_STYLE_TABLIST_HEADERS, "{ffff00}#{ffffff}Bicho | Selecione um animal", lista, "OK", "Voltar");
			} 
			else 
			{
				new valor = strval(inputtext), animal = GetPVarInt(playerid, "apostando_bicho"), stringB2[128];
				if(valor <= 0 || valor < 100) 
				{
					if((PlayerInfo[playerid][pGrana] -= valor) > 0) 
					//if(PlayerInfo[playerid][pGrana] <= 100)
					{
						SendClientMessage(playerid, -1, "{FCB876}[Jogo Do Bicho] {a9c4e4}Você precisa apostar no mínimo R$100.");
					} 
					else 
					{
						SendClientMessage(playerid, -1, "{FCB876}[Jogo Do Bicho] {a9c4e4}Você não tem dinheiro suficiente para essa aposta, coloque um valor menor.");
					}
					format(stringB2, sizeof(stringB2), "Você está apostando em:\n\n\
						Animal: %s\n\
						Grupo: %d\n\
						Dezenas: %d-%d-%d-%d\n\nDigite o valor que deseja apostar:\
						", TabelaBichos[animal][Bicho], animal, TabelaBichos[animal][Dezenas][0], TabelaBichos[animal][Dezenas][1], TabelaBichos[animal][Dezenas][2], TabelaBichos[animal][Dezenas][3]);
					return ShowPlayerDialog(playerid, DIALOG_JOGODoBichoApostarValor, DIALOG_STYLE_INPUT, "{ffff00}#{ffffff}Bicho | Valor da aposta", stringB2, "OK", "Voltar");
				}
				Apostadores[playerid][Animal] = animal;
				Apostadores[playerid][TipoAposta] = 0;
				Apostadores[playerid][Aposta] = valor;
				PlayerInfo[playerid][pGrana] -= valor;
				PlayerInfo[playerid][pApostouBicho] = 1;
				Apostadores[playerid][Apostando] = true;
				format(stringB2, sizeof(stringB2), "{FCB876}[Jogo Do Bicho] {a9c4e4}Você apostou R$%d no animal %s(Grupo %d)", valor, TabelaBichos[animal][Bicho], animal);
				return SendClientMessage(playerid, -1, stringB2);
			}
		}
		case DIALOG_PAINELSENHA:
		{
			new str[144];
			format(str, 144, "password %s", inputtext);
			SendRconCommand(str);
			if(!strlen(inputtext)) { str = "AdmCmd:{FFFFFF} Senha para entrar no servidor removida."; }
			else { format(str, 144, "AdmCmd:{FFFFFF} Senha para entrar no servidor modificada para: %s", inputtext); }
			SendClientMessage(playerid, COLOR_LIGHTRED, str);
			return 1;
		}
		case DIALOG_PAINELNOME:
		{
			if(!strlen(inputtext)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: {FFFFFF}Nome inválido.");
			new str[144];
			format(str, 144, "hostname %s", inputtext);
			SendRconCommand(str);
			format(str, 144, "AdmCmd:{FFFFFF} Nome do servidor modificado para: %s", inputtext);
			SendClientMessage(playerid, COLOR_LIGHTRED, str);
			return 1;
		}
	    case DIALOG_GRAFITE_1:
	    {
	        if(response)
	        {
         		if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_GRAFITE_1,DIALOG_STYLE_INPUT,"{DAA520}Graffiti","{FFFFFF}Digite o texto.\n\nMáximo de caracteres: {ff0000}18","Ok","Cancelar");
	            if(strlen(inputtext) > 18)
				{
					SendClientMessage(playerid,0xFF6800FF,"Proibido escrever mais de 18 caracteres.");
					ShowPlayerDialog(playerid,DIALOG_GRAFITE_1,DIALOG_STYLE_INPUT,"{DAA520}Graffiti","{FFFFFF}Entre com o texto.\n\nMáximo de caracteres: {ff0000}18","Ok","Cancelar");
				 	return 1;
				}
				if(strfind(inputtext, "'") != -1)
				{
				    ShowPlayerDialog(playerid,DIALOG_GRAFITE_1,DIALOG_STYLE_INPUT,"{DAA520}Graffiti","{FFFFFF}Entre com o texto.\n\nMáximo de caracteres: {ff0000}18","Ok","Cancelar");
				    SendClientMessage(playerid,0xFF6800FF,"Você não pode colocar caracteres especiais como este: '  em seu pixe.");
			     	return 1;
				}
				GraffitiSize[playerid] = 0;
	  			format(GraffitiText[playerid], 128, inputtext);
     			ShowPlayerDialog(playerid,DIALOG_GRAFITE_11,DIALOG_STYLE_INPUT,"{DAA520}Entre com o tamanho da fonte","Coloque o tamanho da fonte.\nMinimo: 12 \nMáximo 40","Ok","Voltar");
			}
			else
			{
       			SendClientMessage(playerid,0xFF6800FF,"Grafite Cancelado.");
			    ResetVariables(playerid);
			}
		}
		case DIALOG_GRAFITE_11:
	    {
	        if(response)
	        {
	            new TamanhoDaFonte = strval(inputtext);
	            if(12 > TamanhoDaFonte > 40)
				{
					SendClientMessage(playerid,0xFF6800FF,"Tamanho inválido.");
					ShowPlayerDialog(playerid,DIALOG_GRAFITE_11,DIALOG_STYLE_INPUT,"{DAA520}Entre com o tamanho da fonte","Coloque o tamanho da fonte.\nMinimo: 12 \nMáximo 40","Ok","Voltar");
				 	return 1;
				}
				GraffitiSize[playerid] = TamanhoDaFonte;
     			ShowPlayerDialog(playerid,DIALOG_GRAFITE_2,DIALOG_STYLE_LIST,"{DAA520}Selecione a cor do Grafite","{ffffff}Cor da Lista\nCor manual(HEX)","Ok","Voltar");
			}
			else
			{
       			SendClientMessage(playerid,0xFF6800FF,"Grafite Cancelado.");
			    ResetVariables(playerid);
			}
		}
		case DIALOG_GRAFITE_2:
		{
		    if(response)
		    {
		    	switch(listitem)
		    	{
		        	case 0: ShowPlayerDialog(playerid,DIALOG_GRAFITE_3,DIALOG_STYLE_LIST,"{DAA520}Selecione a cor do Grafite","{ffffff}Branco\n{ff0000}Vermelho\n{228B22}Verde\n{FFFF00}Amarelo\n{104E8B}Azul\n{009ACD}Azul Claro\n{696969}Cinza","Ok","Voltar");
		        	case 1: ShowPlayerDialog(playerid,DIALOG_GRAFITE_4,DIALOG_STYLE_INPUT,"{DAA520}Entre com uma cor em HEX code","{ffffff}Entre com uma cor em HEX Code\n\nLista de HEX Codes - {DAA520}http://en.wikipedia.org/wiki/Help:Using_colours","Ok","Voltar");
				}
			}
			else
			{
                ShowPlayerDialog(playerid,DIALOG_GRAFITE_1,DIALOG_STYLE_INPUT,"{DAA520}Graffiti","{FFFFFF}Digite o Texto.\n\nMáximo de caracteres: {ff0000}18","Ok","Cancelar");
			}
		}
		case DIALOG_GRAFITE_3:
		{
		    if(response)
		    {
				if(listitem == 0) { Color = "FFFFFF"; }
				else if(listitem == 1) { Color = "FF0000"; }
				else if(listitem == 2) { Color = "228B22"; }
				else if(listitem == 3) { Color = "FFFF00"; }
				else if(listitem == 4) { Color = "104E8B"; }
				else if(listitem == 5) { Color = "009ACD"; }
				else if(listitem == 6) { Color = "696969"; }
				format(GraffitiColor[playerid], 32, Color);
				ShowPlayerDialog(playerid,DIALOG_GRAFITE_5,DIALOG_STYLE_LIST,"{DAA520}Escolha uma fonte para o Grafite","{ffffff}Fonte 1 {4682B4}[Urban Riot]\n{ffffff}Fonte 2 {4682B4}[Bombing]\n{ffffff}Fonte 3 {4682B4}[Impact]\n{ffffff}Fonte 4 {4682B4}[Los Santos]\n{ffffff}Fonte 5 {4682B4}[Gangland Style]\n{ffffff}Fonte 6 {4682B4}[Arial]","Ok","Voltar");
			}
			else
			{
			    ShowPlayerDialog(playerid,DIALOG_GRAFITE_2,DIALOG_STYLE_LIST,"{DAA520}Selecione a cor do Grafite","{ffffff}Cor da Lista\nCor manual(HEX)","Ok","Voltar");
			}
		}
		case DIALOG_GRAFITE_4:
		{
		    if(response)
		    {
		        if(!strlen(inputtext)) return ShowPlayerDialog(playerid,2,DIALOG_STYLE_LIST,"{DAA520}Selects how to display color","{ffffff}Enter from list\nEnter HEX code manually","Ok","Voltar");
		        if(strlen(inputtext) != 6)
				{
					SendClientMessage(playerid,0xFF6800FF,"You entered incorrect HEX code.");
					ShowPlayerDialog(playerid,DIALOG_GRAFITE_2,DIALOG_STYLE_LIST,"{DAA520}Selecione a cor do Grafite","{ffffff}Cor da Lista\nCor manual(HEX)","Ok","Voltar");
					return 1;
				}
                format(GraffitiColor[playerid], 32, inputtext);
                ShowPlayerDialog(playerid,DIALOG_GRAFITE_5,DIALOG_STYLE_LIST,"{DAA520}Escolha uma fonte para o Grafite","{ffffff}Fonte 1 {4682B4}[Urban Riot]\n{ffffff}Fonte 2 {4682B4}[Bombing]\n{ffffff}Fonte 3 {4682B4}[Impact]\n{ffffff}Fonte 4 {4682B4}[Los Santos]\n{ffffff}Fonte 5 {4682B4}[Gangland Style]\n{ffffff}Fonte 6 {4682B4}[Arial]","Ok","Voltar");
		    }
		    else
			{
			    ShowPlayerDialog(playerid,DIALOG_GRAFITE_2,DIALOG_STYLE_LIST,"{DAA520}Selecione a cor do Grafite","{ffffff}Cor da Lista\nCor manual(HEX)","Ok","Voltar");
			}
		}
		case DIALOG_GRAFITE_5:
		{
		    if(response)
		    {
		        if(listitem == 0) { Font = "Urban Riot"; /*GraffitiSize[playerid]+= 40;*/ }
				else if(listitem == 1) { Font = "Bombing"; /*GraffitiSize[playerid]+= 48;*/ }
				else if(listitem == 2) { Font = "Impact"; /*GraffitiSize[playerid]+= 48;*/ }
				else if(listitem == 3) { Font = "Los Santos"; /*GraffitiSize[playerid]+= 36;*/ }
				else if(listitem == 4) { Font = "Gangland Style"; /*GraffitiSize[playerid]+= 18;*/ }
				else if(listitem == 5) { Font = "Arial"; /*GraffitiSize[playerid]+= 40;*/ }
				format(GraffitiFont[playerid], 32, Font);
                ShowPlayerDialog(playerid,DIALOG_GRAFITE_6,DIALOG_STYLE_LIST,"{DAA520}Fonte","Ver Fonte\nEscolher esta Fonte","Ok","Voltar");
		    }
		    else
			{
			    ShowPlayerDialog(playerid,DIALOG_GRAFITE_2,DIALOG_STYLE_LIST,"{DAA520}Selecione a cor do Grafite","{ffffff}Cor da Lista\nCor manual(HEX)","Ok","Voltar");
			}
		}
		case DIALOG_GRAFITE_6:
		{
		    switch(listitem)
		    {
		        case 0:
				{
				    if(response)
				    {
				    	new Float:x, Float:y, Float:z;
				    	format(string, 128, "{%s}%s", GraffitiColor[playerid], GraffitiText[playerid]);
						GetPlayerPos(playerid, x,y,z);
				    	ShowFont[playerid] = CreateDynamicObject(19482, x+0.5, y, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid, 200);
						SetDynamicObjectMaterialText(ShowFont[playerid], 0, string, OBJECT_MATERIAL_SIZE_256x256, GraffitiFont[playerid], GraffitiSize[playerid], 0, 0xFFFFFFFF, 0, 1);
						SendClientMessage(playerid,-1,"Pré vizualizando fonte, ela sumirá em 5 segundos.");
						SetPlayerPos(playerid, x+0.1,y,z);
						DeleteObjectTimer[playerid] = SetTimerEx("DeleteObject",5000,false,"i",playerid);
					}
					else
					{
						ShowPlayerDialog(playerid,DIALOG_GRAFITE_5,DIALOG_STYLE_LIST,"{DAA520}Escolha uma fonte para o Grafite","{ffffff}Fonte 1 {4682B4}[Urban Riot]\n{ffffff}Fonte 2 {4682B4}[Bombing]\n{ffffff}Fonte 3 {4682B4}[Impact]\n{ffffff}Fonte 4 {4682B4}[Los Santos]\n{ffffff}Fonte 5 {4682B4}[Gangland Style]\n{ffffff}Fonte 6 {4682B4}[Arial]","Ok","Voltar");
		    		}
				}
		        case 1: { CreateGraffiti(playerid); }
			}
		}
     	case DIALOG_LOGIN:
		{
			if (!response)
			{
				/*Kick(playerid);
				GameTextForPlayer(playerid, "~R~Kickado", 4000, 4);*/
			}
			if(response)
			{
	  			if(strlen(inputtext))
	  			{
	    			new query[100], pass[150];
					//HashingPassword(pass, sizeof (pass), inputtext);
					WP_Hash(pass, sizeof (pass), inputtext);
	  				if(!strcmp(pass, PlayerInfo[playerid][pPassword]))
					{
						PlayerInfo[playerid][pLogado] = 1;
						/*if(LoginTimer[playerid])
						{
						    TelaDeLogin[playerid] = 0;
						    KillTimer(LoginTimer[playerid]);
						}*/
						new escapedPlayerName[MAX_PLAYER_NAME];
		    			mysql_real_escape_string(GetName(playerid), escapedPlayerName);
						TelaDeLogin[playerid] = 0;
					 	mysql_format(Pipeline, query, sizeof(query), "SELECT * FROM `accounts` WHERE `Username` = '%s' LIMIT 1", escapedPlayerName);
	                	mysql_tquery(Pipeline, query, "LoadAccountInfo", "i", playerid);
					}
					else
		  			{
		  			    SenhaErrada[playerid]++;
		  			    if(SenhaErrada[playerid] >= 3)
		  			    {
		  			        SCM(playerid, COLOR_LIGHTRED, "SERVER: Você foi excedeu o limite de tentativas de login.");
		  			        SetTimerEx("TimerKick", 1000, 0, "d", playerid);
		  			    }
		  			    else
		  			    {
			  			    new str[250];
							format(str, sizeof(str), "SERVER: Você só pode errar sua senha três (3) vezes.\n\nDigite sua senha novamente:");
							ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Capital Paulista Full Roleplay", str, "Autenticar", "Cancelar");
						}
					}
	  			}
	  			else
	  			{
	  			    new str[250];
					format(str, sizeof(str), "SERVER: Você só pode errar sua senha três vezes.\n INFO: Nosso FÓRUM é o https://forum.cp-frp.com.br.com\n acesse-o para mais informações sobre sua conta.\n\n        Digite sua senha novamente:");
					ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Capital Paulista Full Roleplay", str, "Autenticar", "Cancelar");

				}
			}
		}
		case DIALOG_REGISTER:
		{
			if (!response)
			{
				Kick(playerid);
				GameTextForPlayer(playerid, "~R~Kickado", 4000, 4);
			}
			if(response)
			{
	  			if(strlen(inputtext))
	  			{
	  			    new query[1000], pass[150];
					WP_Hash(pass, sizeof (pass), inputtext);
					mysql_format(Pipeline, query, sizeof(query), "INSERT INTO `accounts` ( `Username`, `Password`) VALUES ('%s', '%s')", GetName(playerid), pass);
					mysql_tquery(Pipeline, query, "CreateUser", "i", playerid);
	  			}
	  			else
				{
				    new str[126];
					format(str, sizeof(str), "Olá %s.\nBem-vindo ao Capital Paulista Full Roleplay. Por favor entre com uma senha para registrar-se.\nEntre com uma senha.", GetName(playerid));
  					ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_INPUT, "Registrar", str, "Registrar", "Sair");
				}

			}
		}
		case DIALOG_NOVASENHA:
		{
			if(!response) return 1;
			if(strlen(inputtext) < 10)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "A sua senha deve ter pelo menos 10 caracters.");
		        ShowPlayerDialog(playerid, DIALOG_NOVASENHA, DIALOG_STYLE_PASSWORD, "Alterar Senha", "\nAlteração da senha.\n\nSua senha deve conter no minimo 10 caracters\n.", "Alterar", "Cancelar");
		        return 1;
			}
			if(response)
			{
			    if(strfind(inputtext, "'") != -1)
				{
				    ShowPlayerDialog(playerid, DIALOG_NOVASENHA, DIALOG_STYLE_PASSWORD, "Alterar Senha", "\nAlteração da senha.\n\nSua senha deve conter no minimo 10 caracters\n.", "Alterar", "Cancelar");
    				SendClientMessage(playerid, COLOR_LIGHTGREEN, "ERRO:{FFFFFF} Você não pode colocar caracteres especiais em sua senha.");
				    return 1;
				}

			    WP_Hash(PlayerInfo[playerid][pPassword], 129, inputtext);

				format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `Password` = '%s' WHERE `ID` = '%d'",
					PlayerInfo[playerid][pPassword],
				    PlayerInfo[playerid][pID]
				);
				mysql_function_query(Pipeline, szQuery, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Você alterou sua senha com sucesso.");
			}
		}
        case DIALOG_DBANCO:
	    {
	        if(!response) return 1;
	        new valor = strval(inputtext);
	        if(valor < 1 || valor > 1000000) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Quantia inválida.");
	        if(PlayerInfo[playerid][pGrana] >= valor)
	        {
		        PlayerInfo[playerid][pBanco] += valor;
		        PlayerInfo[playerid][pGrana] -= valor;
		        ATMs[TaNaATM[playerid]][aGrana] += valor;
	    		return 1;
			}
			else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem todo este dinheiro.");
	    }
	    case DIALOG_SBANCO:
	    {
	        if(!response) return 1;
	        new valor = strval(inputtext);
	        if(valor < 1 || valor > 5000) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Quantia inválida (Min: 1 | Max: 5000).");
	        if(PlayerInfo[playerid][pBanco] >= valor)
	        {
	           // new str[126];//total = 0;//Porcentagem(valor,taxa), str[126];

		        PlayerInfo[playerid][pBanco] -= valor;
		        ATMs[TaNaATM[playerid]][aGrana] -= valor;
		        PlayerInfo[playerid][pGrana] += valor;

		        SendClientMessage(playerid,COLOR_WHITE,"|-----Extrato Bancário-----|");
				format(string,sizeof(string),"Quantia sacada: R$%d.",valor);
				SendClientMessage(playerid,COLOR_WHITE,string);
				//format(string,sizeof(string),"Taxa: %d% | Taxa liquida: %d",taxa, total);
			    //SendClientMessage(playerid, COLOR_WHITE, string);
				//format(string,sizeof(string),"Taxas: R$%d",total);
				//SendClientMessage(playerid,COLOR_WHITE,string);
				format(string,sizeof(string),"Novo saldo: R$%d.",PlayerInfo[playerid][pBanco]);
				SendClientMessage(playerid,COLOR_WHITE,string);
				SendClientMessage(playerid,COLOR_WHITE,"|-----Extrato Bancário-----|");
                return 1;
			}
			else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem todo este dinheiro.");
	    }
		case DIALOG_COMPLEXO_MENU:
        {
            if(response)
			{
                new arrayid = listitem;
                SetPlayerPosFreeze(playerid, ComplexoDialogData[arrayid][0], ComplexoDialogData[arrayid][1], ComplexoDialogData[arrayid][2],1);
                SetPlayerInterior(playerid, InteriorDialogComplexo[arrayid][0]);
                SetPlayerFacingAngle(playerid, ComplexoDialogData[arrayid][3]);
                format(string, sizeof(string), "Você teleportou para: '%s'.", ComplexoDialogNames[arrayid][0]);
                SendClientMessage(playerid, 0xADD8E6FF, string);
            }
        }
		case DIALOG_AGE:
		{
		    if(!response) return ShowPlayerDialog(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, "Idade", "Entre com a idade de seu personagem.", "Confirmar", "Cancelar");
		    if(response)
		    {
		    	if(strval(inputtext) < 5 || strval(inputtext) > 99) return ShowPlayerDialog(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, "Idade", "ERRO!\n Idade minima: 5\n Idade máxima: 99.\n Entre com uma idade válida.", "Confirmar", "Cancelar");
				format(szQuery, sizeof(szQuery), "[Personagem] Seu personagem tem %d anos.", strval(inputtext));
				SendClientMessage(playerid, COLOR_LIGHTGREEN, szQuery);
				PlayerInfo[playerid][pAge] = strval(inputtext);

				ShowPlayerDialog(playerid, DIALOG_OOCREG, DIALOG_STYLE_INPUT, "Nome OOC", "Qual o seu nome OOC?", "Próximo", "Cancelar");
			}
		}
		case DIALOG_OOCREG:
		{
		    if(!response) return ShowPlayerDialog(playerid, DIALOG_OOCREG, DIALOG_STYLE_INPUT, "Nome OOC", "Qual o seu nome OOC?", "Avançar", "Cancelar");
		    if(response)
		    {
		        if(strfind(inputtext, "'") != -1)
				{
				    ShowPlayerDialog(playerid, DIALOG_OOCREG, DIALOG_STYLE_INPUT, "Nome OOC", "Qual o seu nome OOC?", "Avançar", "Cancelar");
    				SendClientMessage(playerid, COLOR_LIGHTGREEN, "ERRO: {FFFFFF}Você não pode colocar caracteres especiais no nome da empresa.");
				    return 1;
				}

		    	format(szQuery, sizeof(szQuery), "[Personagem] Seu nome OOC é %s.", inputtext);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, szQuery);
				format(PlayerInfo[playerid][pNomeOOC], 50, "%s", inputtext);

				switch (PlayerInfo[playerid][pGender])
    			{
       				case 1: ShowModelSelectionMenu(playerid, "Escolha sua skin", MODEL_SELECTION_SKIN, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);
				   	case 2: ShowModelSelectionMenu(playerid, "Escolha sua skin", MODEL_SELECTION_SKIN, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
        		}
			}
		}
        case DIALOG_EMPRESAS_MENU:
        {
            if(response)
			{
                new arrayid = listitem;
                SetPlayerPosFreeze(playerid, EmpresaDialogData[arrayid][0], EmpresaDialogData[arrayid][1], EmpresaDialogData[arrayid][2],1);
                SetPlayerInterior(playerid, InteriorDialogEmpresa[arrayid][0]);
                SetPlayerFacingAngle(playerid, EmpresaDialogData[arrayid][3]);
                format(string, sizeof(string), "Você teleportou para: '%s'.", EmpresaDialogNames[arrayid][0]);
                SendClientMessage(playerid, 0xADD8E6FF, string);
            }
        }
        case DIALOG_EMP1_MENU:
        {
            if(response)
			{
                new arrayid = listitem;
                SetPlayerPosFreeze(playerid, EmpresasIntDialogData[arrayid][0], EmpresasIntDialogData[arrayid][1], EmpresasIntDialogData[arrayid][2],1);
                SetPlayerInterior(playerid, InteriorDialogEmpresasInt[arrayid][0]);
                SetPlayerFacingAngle(playerid, EmpresasIntDialogData[arrayid][3]);
                format(string, sizeof(string), "Você teleportou para: '%s'.", EmpresasIntDialogNames[arrayid][0]);
                SendClientMessage(playerid, 0xADD8E6FF, string);
            }
        }
        case DIALOG_EMP2_MENU:
        {
            if(response)
			{
                new arrayid = listitem;
                SetPlayerPosFreeze(playerid, EmpresasIntDialogData2[arrayid][0], EmpresasIntDialogData2[arrayid][1], EmpresasIntDialogData2[arrayid][2],1);
                SetPlayerInterior(playerid, InteriorDialogEmpresasInt2[arrayid][0]);
                SetPlayerFacingAngle(playerid, EmpresasIntDialogData2[arrayid][3]);
                format(string, sizeof(string), "Você teleportou para: '%s'.", EmpresasIntDialogNames2[arrayid][0]);
                SendClientMessage(playerid, 0xADD8E6FF, string);
            }
        }
        case DIALOG_EMPRESASV_MENU:
        {
            if(response)
			{
                new arrayid = listitem;
                SetPlayerPosFreeze(playerid, EmpresaVDialogData[arrayid][0], EmpresaVDialogData[arrayid][1], EmpresaVDialogData[arrayid][2],1);
                SetPlayerInterior(playerid, InteriorDialogEmpresaV[arrayid][0]);
                SetPlayerFacingAngle(playerid, EmpresaVDialogData[arrayid][3]);
                format(string, sizeof(string), "Você teleportou para: ' %s '.", EmpresaVDialogNames[arrayid][0]);
                SendClientMessage(playerid, 0xADD8E6FF, string);
            }
        }
        case DIALOG_CASAS_MENU:
        {
            if(response)
			{
                new arrayid = listitem;
                SetPlayerPosFreeze(playerid, HouseDialogData[arrayid][0], HouseDialogData[arrayid][1], HouseDialogData[arrayid][2],1);
                SetPlayerInterior(playerid, InteriorDialogHouse[arrayid][0]);
                SetPlayerFacingAngle(playerid, HouseDialogData[arrayid][3]);
                format(string, sizeof(string), "Você teleportou para: ' %s '.", HouseDialogNames[arrayid][0]);
                SendClientMessage(playerid, 0xADD8E6FF, string);
            }
        }
        case DIALOG_CASAS1_MENU:
        {
            if(response)
			{
                new arrayid = listitem;
                SetPlayerPosFreeze(playerid, CasasIntDialogData[arrayid][0], CasasIntDialogData[arrayid][1], CasasIntDialogData[arrayid][2],1);
                SetPlayerInterior(playerid, InteriorDialogCasasInt[arrayid][0]);
                SetPlayerFacingAngle(playerid, CasasIntDialogData[arrayid][3]);
                format(string, sizeof(string), "Você teleportou para: ' %s '.", CasasIntDialogNames[arrayid][0]);
                SendClientMessage(playerid, 0xADD8E6FF, string);
            }
        }
        case DIALOG_CASAS2_MENU:
        {
            if(response)
			{
                new arrayid = listitem;
                SetPlayerPosFreeze(playerid, CasasIntDialogData1[arrayid][0], CasasIntDialogData1[arrayid][1], CasasIntDialogData1[arrayid][2],1);
                SetPlayerInterior(playerid, InteriorDialogCasasInt1[arrayid][0]);
                SetPlayerFacingAngle(playerid, CasasIntDialogData1[arrayid][3]);
                format(string, sizeof(string), "Você teleportou para: ' %s '.", CasasIntDialogNames1[arrayid][0]);
                SendClientMessage(playerid, 0xADD8E6FF, string);
            }
        }
        case DIALOG_SELLCAR:
		{
		    new other2 = vehicle_sell_sender[playerid];
		    new sellprice = vehicle_sell_price[playerid];
		    new slot = vehicle_sell_offer[playerid];
		    new str2[256];
		    if(response == 1)
		    {
				if(GetDistanceBetweenPlayers(playerid,other2) < 7.5)
				{
				    if(PlayerInfo[playerid][pGrana] >= sellprice)
				    {
						format(str2,sizeof(str2),"Você aceitou a oferta de %s.",PlayerName(other2,1));
						SendClientMessage(playerid,COLOR_LIGHTGREEN,str2);
						format(str2,sizeof(str2),"%s aceitou sua oferta.",PlayerName(playerid,1));
						SendClientMessage(other2,COLOR_LIGHTGREEN,str2);
						VehicleInfo[slot][vOwner] = PlayerInfo[playerid][pID];
						format(VehicleInfo[slot][vOwnerName],MAX_PLAYER_NAME,"%s",PlayerName(playerid,1));
						PlayerInfo[playerid][pGrana] -= sellprice;
						PlayerInfo[other2][pGrana] += sellprice;
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
						PlayerPlaySound(other2,1054,0.0,0.0,0.0);
						SaveVehicle(slot);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tanto dinheiro.");
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar perto do jogador.");
		    }
		    else
		    {
				format(str2,sizeof(str2),"[!] %s recusou sua oferta.",PlayerName(playerid,1));
				SendClientMessage(other2,COLOR_LIGHTRED,str2);
				format(str2,sizeof(str2),"[!] Você recusou a oferta de %s.",PlayerName(other2,1));
				SendClientMessage(playerid,COLOR_LIGHTRED,str2);
		    }
			vehicle_sell_offer[playerid] = -1;
			vehicle_sell_sender[playerid] = -1;
			vehicle_sell_price[playerid] = 0;
		}
		case DIALOG_BUYNEON:
		{
		    if(response == 1)
		    {
		        new vname[126], str[326];
	            for (new i = 1; i != MAX_VEHICLES; i ++) if (IsPlayerNearHood(playerid, i))
				{
		            new slot = GetVehicleSlot(i);
		            if(slot > -1)
		            {
						switch(listitem)
						{
						    case 0:
						    {
								if(PlayerInfo[playerid][pPecasMecanicas][1] >= 1)
								{
								    GetVehicleNameByModel(VehicleInfo[slot][vModel],vname,24);
							        VehicleInfo[slot][vNeon] = NEON_RED;
							        PlayerInfo[playerid][pPecasMecanicas][1]--;
							        format(str,sizeof(str),"** %s após alguns minutos instala um jogo de neon vermelho no veiculo %s.", PlayerName(playerid,1), vname);
									ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							        RefreshNeon(slot);
							        SaveVehicle(slot);
							  	}
							  	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma peça do tipo 'neon' para instalar.");
						    }
						    case 1:
						    {
								if(PlayerInfo[playerid][pPecasMecanicas][1] >= 1)
								{
								    GetVehicleNameByModel(VehicleInfo[slot][vModel],vname,26);
							        VehicleInfo[slot][vNeon] = NEON_BLUE;
							        PlayerInfo[playerid][pPecasMecanicas][1]--;
							        format(str,sizeof(str),"** %s após alguns minutos instala um jogo de neon azul no veiculo %s.", PlayerName(playerid,1), vname);
									ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							        RefreshNeon(slot);
							        SaveVehicle(slot);
							  	}
							  	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma peça do tipo 'neon' para instalar.");
						    }
						    case 2:
						    {
								if(PlayerInfo[playerid][pPecasMecanicas][1] >= 1)
								{
								    GetVehicleNameByModel(VehicleInfo[slot][vModel],vname,26);
							        VehicleInfo[slot][vNeon] = NEON_GREEN;
							        PlayerInfo[playerid][pPecasMecanicas][1]--;
							        format(str,sizeof(str),"** %s após alguns minutos instala um jogo de neon verde no veiculo %s.", PlayerName(playerid,1), vname);
									ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							        RefreshNeon(slot);
							        SaveVehicle(slot);
							  	}
							  	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma peça do tipo 'neon' para instalar.");
						    }
						    case 3:
						    {
								if(PlayerInfo[playerid][pPecasMecanicas][1] >= 1)
								{
								    GetVehicleNameByModel(VehicleInfo[slot][vModel],vname,26);
							        VehicleInfo[slot][vNeon] = NEON_YELLOW;
							        PlayerInfo[playerid][pPecasMecanicas][1]--;
							        format(str,sizeof(str),"** %s após alguns minutos  instala um jogo de neon amarelo no veiculo %s.", PlayerName(playerid,1), vname);
									ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							        RefreshNeon(slot);
							        SaveVehicle(slot);
							  	}
							  	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma peça do tipo 'neon' para instalar.");
						    }
						    case 4:
						    {
								if(PlayerInfo[playerid][pPecasMecanicas][1] >= 1)
								{
								    GetVehicleNameByModel(VehicleInfo[slot][vModel],vname,26);
							        VehicleInfo[slot][vNeon] = NEON_PINK;
							        PlayerInfo[playerid][pPecasMecanicas][1]--;
							        format(str,sizeof(str),"** %s após alguns minutos instala um jogo de neon rosa no veiculo %s.", PlayerName(playerid,1), vname);
									ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							        RefreshNeon(slot);
							        SaveVehicle(slot);
							  	}
							  	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma peça do tipo 'neon' para instalar.");
						    }
						    case 5:
						    {
								if(PlayerInfo[playerid][pPecasMecanicas][1] >= 1)
								{
								    GetVehicleNameByModel(VehicleInfo[slot][vModel],vname,26);
							        VehicleInfo[slot][vNeon] = NEON_WHITE;
							        PlayerInfo[playerid][pPecasMecanicas][1]--;
							        format(str,sizeof(str),"** %s após alguns minutos instala um jogo de neon branco no veiculo %s.", PlayerName(playerid,1), vname);
									ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							        RefreshNeon(slot);
							        SaveVehicle(slot);
							  	}
							  	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma peça do tipo 'neon' para instalar.");
						    }
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode comprar para este veículo.");
				}
				SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo ao capo do veículo.");
			}
		}
		case DIALOG_SCRAPCAR:
		{
		    if(response == 1)
		    {
		        new veh = GetPlayerVehicleID(playerid);
		        new slot = GetVehicleSlot(veh);
		        if(slot > -1)
		        {
		            if(VehicleInfo[slot][vOwner] == PlayerInfo[playerid][pID])
		            {
		            	new price = floatround(GetVehiclePrice(VehicleInfo[slot][vModel]) * 0.30);

						if(VehicleInfo[slot][vAjudaIni] != 1)
						{
		            	    PlayerInfo[playerid][pGrana] += price;
		            	}
		                VehicleInfo[slot][vOwner] = 0;
		                VehicleInfo[slot][vModel] = 0;
		                VehicleInfo[slot][vTuned] = false;

						DestroyVehicle(VehicleInfo[slot][vVehicle]);
						VehicleInfo[slot][vModel] = 0;
						VehicleInfo[slot][vVehicle] = -1;
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
						new str[256];
						format(str,sizeof(str),"UPDATE rp_vehicles SET truncated = 1 WHERE id = '%d'",VehicleInfo[slot][vID]);
						mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
		            }
					else
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} não foi possível sucatear esse veículo (Veículo da ajuda nicial).");
					}
		        }
		        else
		        {
		            SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} não foi possível sucatear esse veículo.");
		        }
		    } else { SendClientMessage(playerid,COLOR_LIGHTGREEN,"Demolicao cancelada com sucesso."); }
		}
		case DIALOG_INSURANCE:
		{
		    if(response == 1)
      		{
				new price = confirm_dialog_extra[playerid];
				if(price > 0)
				{
					new vehicleid=GetPlayerVehicleID(playerid);
					new slot = GetVehicleSlot(vehicleid);
					if(slot > -1) {
	    				VehicleInfo[slot][vInsurance] = 4;
					    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você contratou um seguro para o seu veículo.");
						PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
     					SaveVehicle(slot);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é o dono deste veículo.");
				}
		    }
		}
		case DIALOG_APAGARFURNITURE:
		{
		    if(!response) return 1;

            new extra_c = confirm_dialog_extra[playerid];

			switch(extra_c)
			{
			    case 1: ZerarFurniture(playerid, 1, PlayerInfo[playerid][pEntrouCasa]);
			    case 2: ZerarFurniture(playerid, 2, PlayerInfo[playerid][pEntrouEmpresa]);
			    case 3: ZerarFurniture(playerid, 3, PlayerInfo[playerid][pEntrouComplexo]);
			    case 4: ZerarFurniture(playerid, 4, PlayerInfo[playerid][pEntrouGaragem]);
			}
		}
		case DIALOG_TESTCONCEN:
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "AVISO: Apenas teste.");
		    return 1;
		}
        case EMP_TIPO_EMP_CELULAR:
        {
            if(!response) return 1;

            switch(listitem)
            {
                case 0:
                {
                    if(PlayerInfo[playerid][pGrana] >= 50)
                    {
                        CelularData[playerid][celModelo] = 330;
                        PlayerInfo[playerid][pGrana] -= 50;
                        SendClientMessage(playerid, COLOR_GREEN, "Você comprou um novo modelo de celular.");
                        return 1;
                    }
                }
                case 1:
                {
                    if(PlayerInfo[playerid][pGrana] >= 100)
                    {
                        CelularData[playerid][celModelo] = 18874;
                        PlayerInfo[playerid][pGrana] -= 100;
                        SendClientMessage(playerid, COLOR_GREEN, "Você comprou um novo modelo de celular.");
                        return 1;
                    }
                }
                case 2:
                {
                    if(PlayerInfo[playerid][pGrana] >= 100)
                    {
                        CelularData[playerid][celModelo] = 18873;
                        PlayerInfo[playerid][pGrana] -= 100;
                        SendClientMessage(playerid, COLOR_GREEN, "Você comprou um novo modelo de celular.");
                        return 1;
                    }
                }
                case 3:
                {
                    if(PlayerInfo[playerid][pGrana] >= 100)
                    {
                        CelularData[playerid][celModelo] = 18872;
                        PlayerInfo[playerid][pGrana] -= 100;
                        SendClientMessage(playerid, COLOR_GREEN, "Você comprou um novo modelo de celular.");
                        return 1;
                    }
                }
                case 4:
                {
                    if(PlayerInfo[playerid][pGrana] >= 100)
                    {
                        CelularData[playerid][celModelo] = 18871;
                        PlayerInfo[playerid][pGrana] -= 100;
                        SendClientMessage(playerid, COLOR_GREEN, "Você comprou um novo modelo de celular.");
                        return 1;
                    }
                }
                case 5:
                {
                    if(PlayerInfo[playerid][pGrana] >= 100)
                    {
                        CelularData[playerid][celModelo] = 18870;
                        PlayerInfo[playerid][pGrana] -= 100;
                        SendClientMessage(playerid, COLOR_GREEN, "Você comprou um novo modelo de celular.");
                        return 1;
                    }
                }
                case 6:
                {
                    if(PlayerInfo[playerid][pGrana] >= 100)
                    {
                        CelularData[playerid][celModelo] = 18869;
                        PlayerInfo[playerid][pGrana] -= 100;
                        SendClientMessage(playerid, COLOR_GREEN, "Você comprou um novo modelo de celular.");
                        return 1;
                    }
                }
                case 7:
                {
                    if(PlayerInfo[playerid][pGrana] >= 100)
                    {
                        CelularData[playerid][celModelo] = 18868;
                        PlayerInfo[playerid][pGrana] -= 100;
                        SendClientMessage(playerid, COLOR_GREEN, "Você comprou um novo modelo de celular.");
                        return 1;
                    }
                }
                case 8:
                {
                    if(PlayerInfo[playerid][pGrana] >= 100)
                    {
                        CelularData[playerid][celModelo] = 18867;
                        PlayerInfo[playerid][pGrana] -= 100;
                        SendClientMessage(playerid, COLOR_GREEN, "Você comprou um novo modelo de celular.");
                        return 1;
                    }
                }
                case 9:
                {
                    if(PlayerInfo[playerid][pGrana] >= 100)
                    {
                        CelularData[playerid][celModelo] = 18866;
                        PlayerInfo[playerid][pGrana] -= 100;
                        SendClientMessage(playerid, COLOR_GREEN, "Você comprou um novo modelo de celular.");
                        return 1;
                    }
                }
                case 10:
                {
                    if(PlayerInfo[playerid][pGrana] >= 100)
                    {
                        CelularData[playerid][celModelo] = 19513;
                        PlayerInfo[playerid][pGrana] -= 100;
                        SendClientMessage(playerid, COLOR_GREEN, "Você comprou um novo modelo de celular.");
                        return 1;
                    }
                }
                case 11:
                {
                    if(PlayerInfo[playerid][pGrana] >= 150)
                    {
                        CelularData[playerid][celModelo] = 18865;
                        PlayerInfo[playerid][pGrana] -= 150;
                        SendClientMessage(playerid, COLOR_GREEN, "Você comprou um novo modelo de celular.");
                        return 1;
                    }
                }
            }
        }
		case DIALOG_CARGA1:
		{
		    if(!response) return 1;

            new vehicleid = -1;
			if(!PlayerToCar(playerid,1,4.0)) return SendClientMessage(playerid, COLOR_LIGHTRED, "AVISO: Você não está próximo de nenhum veículo.");
			vehicleid = PlayerToCar(playerid,2,4.0);
			new tipo = CaixaInfo[CargaInfo[vehicleid][cSlot][listitem]][cTipo];
			format(stringTipo,sizeof(stringTipo), "Selecionado: %s", GetCaixaTipo(tipo));

			if(tipo != 0) {
				PlayerInfo[playerid][pCaixaSelect] = listitem;
				ShowPlayerDialog(playerid, DIALOG_CARGA2, DIALOG_STYLE_MSGBOX, stringTipo, "Você deseja pegar a caixa?", "Sim", "Não");
			}
			else {
  				format(stringTipo,sizeof(stringTipo), "Selecionado: Slot %d Vazio", listitem);
			  	ShowPlayerDialog(playerid, 999999, DIALOG_STYLE_MSGBOX, stringTipo, "Nenhuma ação disponivel", "Fechar", "");
			}
		}
		case DIALOG_CARGA2:
		{
		    if(!response)
		    {
		        PlayerInfo[playerid][pCaixaSelect] = -1;
		        return 1;
			}
			else
			{
			    if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa estar fora do veiculo.");
			    new vehicleid = -1;
			    if(!PlayerToCar(playerid,1,4.0)) return SendClientMessage(playerid, COLOR_LIGHTRED, "AVISO: Você não está próximo de nenhum veículo.");
				vehicleid = PlayerToCar(playerid,2,4.0);

			/*
			    if (IsVehicleImpounded(VehicleInfo[vehicleid][vVehicle]))
			        return SendClientMessage(playerid, COLOR_WHITE, "Este veiculo está apreendido.");

		        if (!IsDoorVehicle(VehicleInfo[vehicleid][vVehicle]))
				    return SendClientMessage(playerid, COLOR_WHITE, "Este veiculo não tem portamalas.");

				if (VehicleInfo[vehicleid][vLocked])
				    return SendClientMessage(playerid, COLOR_WHITE, "Este veiculo está trancado.");
			*/

			    if(CargaInfo[vehicleid][cSlot][PlayerInfo[playerid][pCaixaSelect]] != 0)
       			{
                    format(string, sizeof(string), "[!] Você retirou a caixa do veiculo! (%d)", CargaInfo[vehicleid][cSlot][PlayerInfo[playerid][pCaixaSelect]]); SendClientMessage(playerid, COLOR_WHITE, string);
					PlayerInfo[playerid][pLoadCrate] = CargaInfo[vehicleid][cSlot][PlayerInfo[playerid][pCaixaSelect]];
					ObjetoCaixa(playerid,vehicleid,PlayerInfo[playerid][pCaixaSelect],2);

                    new objid;
			  		if(CaixaInfo[CargaInfo[vehicleid][cSlot][PlayerInfo[playerid][pCaixaSelect]]][cTipo] == 56) objid = 19772;
			  		else objid = 1271;

 					SetPlayerAttachedObject(playerid, 0, objid, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
  					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
  					CargaInfo[vehicleid][cSlot][PlayerInfo[playerid][pCaixaSelect]] = 0;
  					PlayerInfo[playerid][pCaixaSelect] = -1;
  					return 1;
				}
			}
		}
		case DIALOG_CGAMESADMINMENU:
        {
  			if(response)
  			{
     			switch(listitem)
     			{
        			case 0:
           			{
              			ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSELECTPOKER);
                 	}
                    case 2:
                    {
                    	ShowCasinoGamesMenu(playerid, DIALOG_CGAMESCREDITS);
                    }
				}
			}
        }
        case DIALOG_CGAMESSELECTPOKER:
        {
        	if(response)
			{
   				OutrasInfos[playerid][oEditandoMesaPoker] = listitem+1;
       			ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPOKER);
          	}
	  		else
	  		{
     			ShowCasinoGamesMenu(playerid, DIALOG_CGAMESADMINMENU);
        	}
        }
        case DIALOG_CGAMESSETUPPOKER:
        {
        	if(response)
			{
   				new tableid = OutrasInfos[playerid][oEditandoMesaPoker]-1;
				if(PokerTable[tableid][pkrPlaced] == 0)
				{
    				switch(listitem)
        			{
           				case 0: // Place Poker Table
               			{
                   			new szString[128];
                          	format(szString, sizeof(szString), "Pressione '{3399FF}~k~~PED_SPRINT~{FFFFFF}' para colocar a mesa de Poker.");
                       		SendClientMessage(playerid, COLOR_WHITE, szString);
							SetPVarInt(playerid, "tmpPlacePokerTable", 1);
                 		}
       				}
        		}
				else
				{
    				switch(listitem)
        			{
           				case 0: // Edit Poker Table
               			{
                    		SetPVarFloat(playerid, "tmpPkrX", PokerTable[tableid][pkrX]);
                        	SetPVarFloat(playerid, "tmpPkrY", PokerTable[tableid][pkrY]);
                      		SetPVarFloat(playerid, "tmpPkrZ", PokerTable[tableid][pkrZ]);
                         	SetPVarFloat(playerid, "tmpPkrRX", PokerTable[tableid][pkrRX]);
                         	SetPVarFloat(playerid, "tmpPkrRY", PokerTable[tableid][pkrRY]);
                         	SetPVarFloat(playerid, "tmpPkrRZ", PokerTable[tableid][pkrRZ]);
							EditDynamicObject(playerid, PokerTable[tableid][pkrObjectID]);
							new szString[128];
       						format(szString, sizeof(szString), "You have selected Poker Table %d, You may now customize it's position/rotation.", tableid);
             				SendClientMessage(playerid, COLOR_WHITE, szString);
                 		}
                   		case 1: // Destroy Poker Table
                     	{
                      		DestroyPokerTable(tableid);
							new szString[64];
       						format(szString, sizeof(szString), "You have deleted Poker Table %d.", tableid);
             				SendClientMessage(playerid, COLOR_WHITE, szString);

							ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSELECTPOKER);
						}
      				}
          		}
            }
			else
			{
   				ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSELECTPOKER);
       		}
        }
        case DIALOG_CGAMESCREDITS:
        {
        	ShowCasinoGamesMenu(playerid, DIALOG_CGAMESADMINMENU);
        }
        case DIALOG_CGAMESSETUPPGAME:
        {
        	if(response)
			{
   				switch(listitem)
       			{
          			case 0: // Buy-In Max
             		{
               			ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME2);
               		}
                 	case 1: // Buy-In Min
                  	{
                   		ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME3);
                   	}
                    case 2: // Blind
                    {
                    	ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME4);
                    }
                    case 3: // Limit
                    {
                    	ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME5);
                    }
                    case 4: // Password
                    {
                    	ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME6);
                    }
                    case 5: // Round Delay
                    {
                    	ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME7);
                    }
                    case 6: // Start Game
                    {
                    	ShowCasinoGamesMenu(playerid, DIALOG_CGAMESBUYINPOKER);
                    }
				}
			}
			else
			{
 				LeavePokerTable(playerid);
			}
        }
        case DIALOG_CGAMESSETUPPGAME2:
        {
        	if(response)
			{
   				if(strval(inputtext) < 1 || strval(inputtext) > 500000000)
   				{
       				return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME2);
           		}
				if(strval(inputtext) <= PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrBuyInMin])
				{
    				return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME2);
     			}
			 	PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrBuyInMax] = strval(inputtext);
  				return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME);
     		}
		 	else
		 	{
    			return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME);
       		}
        }
        case DIALOG_CGAMESSETUPPGAME3:
        {
        	if(response)
			{
   				if(strval(inputtext) < 1 || strval(inputtext) > 500000000)
   				{
       				return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME3);
           		}
				if(strval(inputtext) >= PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrBuyInMax])
				{
    				return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME3);
     			}
				PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrBuyInMin] = strval(inputtext);
    			return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME);
       		}
	   		else
	   		{
    			return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME);
        	}
        }
        case DIALOG_CGAMESSETUPPGAME4:
        {
        	if(response)
			{
   				if(strval(inputtext) < 1 || strval(inputtext) > 500000000)
   				{
       				return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME4);
           		}
				PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrBlind] = strval(inputtext);
    			return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME);
       		}
	   		else
	   		{
      			return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME);
         	}
        }
        case DIALOG_CGAMESSETUPPGAME5:
        {
        	if(response)
			{
  				if(strval(inputtext) < 2 || strval(inputtext) > 6)
	  			{
   					return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME5);
        		}
				PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrLimit] = strval(inputtext);
    			return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME);
       		}
	   		else
	   		{
      			return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME);
        	}
        }
        case DIALOG_CGAMESSETUPPGAME6:
        {
        	if(response)
			{
  				new tableid = GetPVarInt(playerid, "pkrTableID")-1;
      			strmid(PokerTable[tableid][pkrPass], inputtext, 0, strlen(inputtext), 32);
         		return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME);
           	}
   			else
   			{
      			ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME);
       		}
        }
        case DIALOG_CGAMESSETUPPGAME7:
        {
        	if(response)
			{
   				if(strval(inputtext) < 15 || strval(inputtext) > 120)
   				{
       				return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME7);
           		}
				PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrSetDelay] = strval(inputtext);
				return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME);
 			}
		 	else
	 		{
    			return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME);
       		}
        }
        case DIALOG_CGAMESBUYINPOKER:
        {
        	if(response)
			{
   				if(strval(inputtext) < PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrBuyInMin] || strval(inputtext) > PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrBuyInMax] || strval(inputtext) > PlayerInfo[playerid][pGrana])
   				{
       				return ShowCasinoGamesMenu(playerid, DIALOG_CGAMESBUYINPOKER);
          		}
				PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrActivePlayers]++;
	   			SetPVarInt(playerid, "pkrChips", GetPVarInt(playerid, "pkrChips")+strval(inputtext));
	      		PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-strval(inputtext);
				if(PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrActive] == 3 && PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrRound] == 0 && PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrDelay] >= 6)
				{
   					SetPVarInt(playerid, "pkrStatus", 1);
     			}
           		else if(PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrActive] < 3)
	   			{
       				SetPVarInt(playerid, "pkrStatus", 1);
           		}
				if(PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrActive] == 1 && GetPVarInt(playerid, "pkrRoomLeader"))
				{
    				PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrActive] = 2;
       				SelectTextDraw(playerid, COLOR_GOLD);
           		}
			}
			else
			{
   				return LeavePokerTable(playerid);
       		}
        }
        case DIALOG_CGAMESCALLPOKER:
        {
        	if(response)
			{
   				new tableid = GetPVarInt(playerid, "pkrTableID")-1;
   				//new actualBet = PokerTable[tableid][pkrActiveBet]-GetPVarInt(playerid, "pkrCurrentBet");
   				new actualBet = PokerTable[tableid][pkrActiveBet];
				if(actualBet > GetPVarInt(playerid, "pkrChips"))
				{
    				PokerTable[tableid][pkrPot] += GetPVarInt(playerid, "pkrChips");
        			SetPVarInt(playerid, "pkrChips", 0);
           			SetPVarInt(playerid, "pkrCurrentBet", PokerTable[tableid][pkrActiveBet]);
              	}
		  		else
		  		{
      				PokerTable[tableid][pkrPot] += actualBet;
          			SetPVarInt(playerid, "pkrChips", GetPVarInt(playerid, "pkrChips")-actualBet);
             		SetPVarInt(playerid, "pkrCurrentBet", PokerTable[tableid][pkrActiveBet]);
               	}
				SetPVarString(playerid, "pkrStatusString", "Call");
    			PokerRotateActivePlayer(tableid);
				ApplyAnimation(playerid, "CASINO", "cards_raise", 4.1, 0, 1, 1, 1, 1, 1);
 			}
			DeletePVar(playerid, "pkrActionChoice");
        }
        case DIALOG_CGAMESRAISEPOKER:
        {
        	if(response)
			{
   				new tableid = GetPVarInt(playerid, "pkrTableID")-1;
				//new actualRaise = strval(inputtext)-GetPVarInt(playerid, "pkrCurrentBet");
				new actualRaise = strval(inputtext);
				if(strval(inputtext) >= PokerTable[tableid][pkrActiveBet]+PokerTable[tableid][pkrBlind]/2 && strval(inputtext) <= GetPVarInt(playerid, "pkrCurrentBet")+GetPVarInt(playerid, "pkrChips"))
				{
    				PokerTable[tableid][pkrPot] += actualRaise;
        			PokerTable[tableid][pkrActiveBet] = strval(inputtext);
           			SetPVarInt(playerid, "pkrChips", GetPVarInt(playerid, "pkrChips")-actualRaise);
              		SetPVarInt(playerid, "pkrCurrentBet", PokerTable[tableid][pkrActiveBet]);
					SetPVarString(playerid, "pkrStatusString", "Raise");
					PokerTable[tableid][pkrRotations] = 0;
     				PokerRotateActivePlayer(tableid);
					ApplyAnimation(playerid, "CASINO", "cards_raise", 4.1, 0, 1, 1, 1, 1, 1);
     			}
			 	else
			 	{
     				ShowCasinoGamesMenu(playerid, DIALOG_CGAMESRAISEPOKER);
         		}
           	}
			DeletePVar(playerid, "pkrActionChoice");
   		}
   		case DIALOG_ID:
	    {
	        if(!response) return 0;

	        if(FloorRequestedBy[listitem] != INVALID_PLAYER_ID || IsFloorInQueue(listitem)) GameTextForPlayer(playerid, "~r~Este andar ja foi pressionado, aguarde.", 3500, 4);
			else if(DidPlayerRequestElevator(playerid)) GameTextForPlayer(playerid, "~r~Você já chamou o elevador, aguarde.", 3500, 4);
			else CallElevator(playerid, listitem);
			return 1;
	    }
	    case DIALOG_ID1:
	    {
	        if(!response) return 0;
 			if(FloorRequestedBy1[listitem] != INVALID_PLAYER_ID || IsFloorInQueue1(listitem)) GameTextForPlayer(playerid, "~r~Este andar ja foi pressionado, aguarde.", 3500, 4);
			else if(DidPlayerRequestElevator1(playerid)) GameTextForPlayer(playerid, "~r~Você já chamou o elevador, aguarde.", 3500, 4);
			else CallElevator1(playerid, listitem);
			return 1;
	    }
	    case DIALOG_ID2:
	    {
	        if(!response) return 0;

	        if(FloorRequestedBy2[listitem] != INVALID_PLAYER_ID || IsFloorInQueue2(listitem)) GameTextForPlayer(playerid, "~r~Este andar ja foi pressionado, aguarde.", 3500, 4);
			else if(DidPlayerRequestElevator2(playerid)) GameTextForPlayer(playerid, "~r~Você já chamou o elevador, aguarde.", 3500, 4);
			else CallElevator2(playerid, listitem);
			return 1;
	    }
	    case DIALOG_ID3:
	    {
	        if(!response) return 0;
	        if(FloorRequestedBy3[listitem] != INVALID_PLAYER_ID || IsFloorInQueue3(listitem))
	            GameTextForPlayer(playerid, "~r~Este andar já foi pressionado, aguarde.", 3500, 4);
			else if(DidPlayerRequestElevator(playerid))
			    GameTextForPlayer(playerid, "~r~Você já chamou o elevador, aguarde.", 3500, 4);
			else
		        CallElevator3(playerid, listitem);

			return 1;
	    }
    	case dialog_TUNING:
		{
  			if( response )
  			{
     			if( !IsPlayerInAnyVehicle( playerid ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em um veículo." );
        		if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está é o motorista de um veículo." );
        		new vehicleid = GetPlayerVehicleID( playerid ), Float:Pos[ 6 ];
				TPInfo[ playerid ][ tID ] = -1;
				switch( listitem )
				{
    				case 0:
					{
						for( new i = 0; i < NUMBER_TYPE_PAINTJOB; i++ )
						{
      						if( pjInfo[ i ][ vehID ] == GetVehicleModel( vehicleid ) )
				  			{
         						TPInfo[ playerid ][ tID ] = i;
         						break;
               				}
                   		}
                     	if( TPInfo[ playerid ][ tID ] == -1 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma modificação compativel com seu veículo." );
						new pid = TPInfo[ playerid ][ tID ];
      					TPInfo[ playerid ][ tPaintjob ] = true;
						GetVehicleColor( vehicleid, TPInfo[ playerid ][ PJColor ][ 0 ], TPInfo[ playerid ][ PJColor ][ 1 ] );
						TogglePlayerControllable( playerid, false );
      					TuningTDControl( playerid, true );
                        ChangeVehicleColor( vehicleid, 1, 1 );
                        ChangeVehiclePaintjob( vehicleid, pjInfo[ pid ][ pNumber ] );
                        format( globalstring, sizeof( globalstring ), "%s", pjInfo[ pid ][ pName ] );
                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                        format( globalstring, sizeof( globalstring ), "pecas: ~w~%d", pjInfo[ pid ][ pPrice ] );
                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 5 );
      					SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
      					GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
           				SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SelectTextDraw( playerid, COLOR_ORANGE );
      				}
          			case 1:
				  	{
       					SPD( playerid, dialog_TUNING_2, DSI, D_TOP, "ERRO:{FFFFFF} Entre com o ID da Cor 1 e da Cor 2.\nExemplo: 0 1", D_OK, D_CANCEL );
       				}
           			case 2:
				   	{
						for( new i = 0; i < MAX_COMPONENTS; i++ )
						{
      						if( cInfo[ i ][ cType ] == CARMODTYPE_EXHAUST )
				  			{
         						if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
					 			{
         							TPInfo[ playerid ][ tID ] = i;
         							break;
         						}
               				}
                   		}
                     	if( TPInfo[ playerid ][ tID ] == -1 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma modificação compativel com seu veículo." );
                      	new cid = TPInfo[ playerid ][ tID ];
                      	TPInfo[ playerid ][ tType ] = CARMODTYPE_EXHAUST;
                      	TPInfo[ playerid ][ tPaintjob ] = false;
						TogglePlayerControllable( playerid, false );
      					TuningTDControl( playerid, true );
           				format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
               			PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
               			format( globalstring, sizeof( globalstring ), "pecas: ~w~%d", cInfo[ cid ][ cPrice ] );
               			PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );
                        GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], -2, -5, 0 );
                        SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
                        GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SelectTextDraw( playerid, COLOR_ORANGE );
                  	}
					case 3:
  					{
       					for( new i = 0; i < MAX_COMPONENTS; i++ )
				   		{
         					if( cInfo[ i ][ cType ] == CARMODTYPE_FRONT_BUMPER )
						 	{
        						if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
								{
       								TPInfo[ playerid ][ tID ] = i;
               						break;
                     			}
                      		}
              			}
                 		if( TPInfo[ playerid ][ tID ] == -1 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma modificação compativel com seu veículo." );
                   		new cid = TPInfo[ playerid ][ tID ];
                   		TPInfo[ playerid ][ tType ] = CARMODTYPE_FRONT_BUMPER;
                   		TPInfo[ playerid ][ tPaintjob ] = false;
                     	TogglePlayerControllable( playerid, false );
                      	TuningTDControl( playerid, true );
                       	format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                        format( globalstring, sizeof( globalstring ), "pecas: ~w~%dR$", cInfo[ cid ][ cPrice ] );
                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );
                        GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 0.5 ); // done
                        SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
                        GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SelectTextDraw( playerid, COLOR_ORANGE );
					}
     				case 4:
				 	{
      					for( new i = 0; i < MAX_COMPONENTS; i++ )
				  		{
        					if( cInfo[ i ][ cType ] == CARMODTYPE_REAR_BUMPER )
							{
       							if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
				   				{
           							TPInfo[ playerid ][ tID ] = i;
                  					break;
                       			}
                          	}
  						}
        				if( TPInfo[ playerid ][ tID ] == -1 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma modificação compativel com seu veículo." );
        				new cid = TPInfo[ playerid ][ tID ];
            			TPInfo[ playerid ][ tType ] = CARMODTYPE_REAR_BUMPER;
            			TPInfo[ playerid ][ tPaintjob ] = false;
               			TogglePlayerControllable( playerid, false );
                  		TuningTDControl( playerid, true );
                  		format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                    	PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                    	format( globalstring, sizeof( globalstring ), "pecas: ~w~%dR$", cInfo[ cid ][ cPrice ] );
                    	PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );
                        GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 0.5 ); // done
                        SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
      					SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
           				SelectTextDraw( playerid, COLOR_ORANGE );
               		}
                 	case 5:
				 	{
						for( new i = 0; i < MAX_COMPONENTS; i++ )
						{
                        	if( cInfo[ i ][ cType ] == CARMODTYPE_ROOF )
							{
                        		if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
								{
                                	TPInfo[ playerid ][ tID ] = i;
                                  	break;
                           		}
                       		}
                     	}
        				if( TPInfo[ playerid ][ tID ] == -1 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma modificação compativel com seu veículo." );
            			new cid = TPInfo[ playerid ][ tID ];
            			TPInfo[ playerid ][ tType ] = CARMODTYPE_ROOF;
            			TPInfo[ playerid ][ tPaintjob ] = false;
           				TogglePlayerControllable( playerid, false );
               			TuningTDControl( playerid, true );
                  		format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                    	PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                    	format( globalstring, sizeof( globalstring ), "pecas: ~w~%d", cInfo[ cid ][ cPrice ] );
                    	PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );
                        GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 ); // done
                        SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
                        GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SelectTextDraw( playerid, COLOR_ORANGE );
					}
     				case 6:
				 	{
      					for( new i = 0; i < MAX_COMPONENTS; i++ )
				  		{
        					if( cInfo[ i ][ cType ] == CARMODTYPE_SPOILER )
							{
       							if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
				   				{
           							TPInfo[ playerid ][ tID ] = i;
                  					break;
                       			}
                          	}
  						}
        				if( TPInfo[ playerid ][ tID ] == -1 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma modificação compativel com seu veículo." );
            			new cid = TPInfo[ playerid ][ tID ];
               			TPInfo[ playerid ][ tType ] = CARMODTYPE_SPOILER;
                  		TPInfo[ playerid ][ tPaintjob ] = false;
                  		TogglePlayerControllable( playerid, false );
                      	TuningTDControl( playerid, true );
                       	format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                        format( globalstring, sizeof( globalstring ), "pecas: ~w~%d", cInfo[ cid ][ cPrice ] );
                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );
                        GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 ); // done
                        SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
                        GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SelectTextDraw( playerid, COLOR_ORANGE );
					}
     				case 7:
				 	{
						for( new i = 0; i < MAX_COMPONENTS; i++ )
						{
      						if( cInfo[ i ][ cType ] == CARMODTYPE_SIDESKIRT )
				  			{
         						if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
					 			{
         							TPInfo[ playerid ][ tID ] = i;
                					break;
                     			}
                        	}
 						}
       					if( TPInfo[ playerid ][ tID ] == -1 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma modificação compativel com seu veículo." );
			            new cid = TPInfo[ playerid ][ tID ];
			            TPInfo[ playerid ][ tType ] = CARMODTYPE_SIDESKIRT;
			            TPInfo[ playerid ][ tPaintjob ] = false;
               			TogglePlayerControllable( playerid, false );
                  		TuningTDControl( playerid, true );
                    	format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                     	PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                     	format( globalstring, sizeof( globalstring ), "pecas: ~w~%d", cInfo[ cid ][ cPrice ] );
                     	PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );
                        GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 0.5 );
                        SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
                        GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SelectTextDraw( playerid, COLOR_ORANGE );
					}
     				case 8:
				 	{
						for( new i = 0; i < MAX_COMPONENTS; i++ ) {
      						if( cInfo[ i ][ cType ] == CARMODTYPE_WHEELS ) {
            					if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
                 					TPInfo[ playerid ][ tID ] = i;
                      				break;
                      			}
                       		}
                      	}
                      	if( TPInfo[ playerid ][ tID ] == -1 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma modificação compativel com seu veículo." );
                      	new cid = TPInfo[ playerid ][ tID ];
                      	TPInfo[ playerid ][ tType ] = CARMODTYPE_WHEELS;
						TPInfo[ playerid ][ tPaintjob ] = false;
                        TogglePlayerControllable( playerid, false );
                        TuningTDControl( playerid, true );
                        format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                        format( globalstring, sizeof( globalstring ), "pecas: ~w~%d", cInfo[ cid ][ cPrice ] );
                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
					 	AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );
 					 	GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 0.5 ); // done
                        SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
					 	GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
					 	SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
					 	SelectTextDraw( playerid, COLOR_ORANGE );
					}
					case 9:
					{
     					for( new i = 0; i < MAX_COMPONENTS; i++ )
				 		{
       						if( cInfo[ i ][ cType ] == CARMODTYPE_STEREO )
				   			{
          						if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
					  			{
          							TPInfo[ playerid ][ tID ] = i;
                 					break;
                 				}
                 			}
                 		}
                   		if( TPInfo[ playerid ][ tID ] == -1 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma modificação compativel com seu veículo." );
                     	new cid = TPInfo[ playerid ][ tID ];
                      	TPInfo[ playerid ][ tType ] = CARMODTYPE_STEREO;
                       	TPInfo[ playerid ][ tPaintjob ] = false;
                        TogglePlayerControllable( playerid, false );
                        TuningTDControl( playerid, true );
                        format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                        format( globalstring, sizeof( globalstring ), "pecas: ~w~%d", cInfo[ cid ][ cPrice ] );
                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );
                        GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 );
                        SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
                        GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SelectTextDraw( playerid, COLOR_ORANGE );
					}
     				case 10:
		 			{
      					for( new i = 0; i < MAX_COMPONENTS; i++ )
				  		{
        					if( cInfo[ i ][ cType ] == CARMODTYPE_HYDRAULICS )
							{
       							if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
				   				{
           							TPInfo[ playerid ][ tID ] = i;
                  					break;
                       			}
                          	}
						}
						if( TPInfo[ playerid ][ tID ] == -1 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma modificação compativel com seu veículo." );
      					new cid = TPInfo[ playerid ][ tID ];
           				TPInfo[ playerid ][ tType ] = CARMODTYPE_HYDRAULICS;
               			TPInfo[ playerid ][ tPaintjob ] = false;
                  		TogglePlayerControllable( playerid, false );
                    	TuningTDControl( playerid, true );
                     	format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                      	PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                       	format( globalstring, sizeof( globalstring ), "pecas: ~w~%d", cInfo[ cid ][ cPrice ] );
                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );
                        GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 2, 2, 2 );
                        SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
                        GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SelectTextDraw( playerid, COLOR_ORANGE );
					}
     				case 11:
				 	{
      					for( new i = 0; i < MAX_COMPONENTS; i++ )
				  		{
        					if( cInfo[ i ][ cType ] == CARMODTYPE_NITRO )
							{
       							if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) )
				   				{
           							TPInfo[ playerid ][ tID ] = i;
                  					break;
                       			}
                          	}
       					}
            			if( TPInfo[ playerid ][ tID ] == -1 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma modificação compativel com seu veículo." );
               			new cid = TPInfo[ playerid ][ tID ];
                  		TPInfo[ playerid ][ tType ] = CARMODTYPE_NITRO;
                    	TPInfo[ playerid ][ tPaintjob ] = false;
                     	TogglePlayerControllable( playerid, false );
                     	TuningTDControl( playerid, true );
                      	format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
                       	PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
                        format( globalstring, sizeof( globalstring ), "pecas: ~w~%d", cInfo[ cid ][ cPrice ] );
                        PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
                        AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );
                        GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 ); // done
                        SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
                        GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                        SelectTextDraw( playerid, COLOR_ORANGE );
					}
				}
			}
   			else if( !response )
   			{
      			SetCameraBehindPlayer( playerid );
	  			OutrasInfos[playerid][oModShop] = 0;
         	}
		}
  		case dialog_TUNING_2:
  		{
    		if( !response )
			{
				OutrasInfos[playerid][oModShop] = 0;
				return 1;
			}
      		if( response )
		  	{
     			if( !IsPlayerInAnyVehicle( playerid ) ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em um veículo." );
        		if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é o motorista de um veículo." );
          		new vehicleid = GetPlayerVehicleID( playerid );
            	if( PlayerInfo[playerid][pGrana] < COLOR_PRICE ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro o suficiente." );
             	new b1, b2;
              	if( sscanf( inputtext, "ii", b1, b2 ) ) return SPD( playerid, dialog_TUNING_2, DSI, D_TOP, "ERRO:{FFFFFF} Entre com o ID da Cor 1 e da Cor 2.\nExemplo: 0 1", D_OK, D_CANCEL );
               	if( b1 < 0 || b2 < 0 || b1 > 255 || b2 > 255 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A cor não pode ser maior que 255 ou menor que 0!");

                new slot = GetVehicleSlot(vehicleid);
       			if(slot > -1)
         		{
					ChangeVehicleColor( vehicleid, b1, b2 );
	    			PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-COLOR_PRICE;

    				VehicleInfo[slot][vColor1] = b1;
    				VehicleInfo[slot][vColor2] = b2;

    				SaveVehicle(slot);

					SPD( playerid, dialog_TUNING, DSL, D_TOP, D_TEXT, D_OK, D_CANCEL );
				}
    		}
      	}
	}
	return 1;
}

forward CreateUser(playerid);
public CreateUser(playerid)
{
    PlayerInfo[playerid][pID] = cache_insert_id();
    printf("[NEW] Novo player registrado: %s (%d) | DB ID: %d", PlayerName(playerid,0), playerid, PlayerInfo[playerid][pID]);

	new strl[126];
	format(strl, sizeof(strl), "%s registrou-se no servidor. [DB: %d]", PlayerName(playerid,0), PlayerInfo[playerid][pID]);
	RegLog(strl);

    PlayerInfo[playerid][pLogado] = 1;
    PlayerInfo[playerid][pLogouAgr] = 1;//Alterar
    PlayerInfo[playerid][pPos][0] = 1742.2247; //Alterar para spawn em Los Santos
    PlayerInfo[playerid][pPos][1] = -1858.8806;
    PlayerInfo[playerid][pPos][2] = 13.4140;
    PlayerInfo[playerid][pInterior] = 0;
    PlayerInfo[playerid][pWorld] = 0;
    PlayerInfo[playerid][pPayDay] = 60;
    PlayerInfo[playerid][pGrana] = 2500;
	PlayerInfo[playerid][pBanco] = 5000;
	PlayerInfo[playerid][pLevel] = 0;

    TogSQLstatus(playerid, 1);

    StopAudioStreamForPlayer(playerid);

	SetPlayerPos(playerid, 1742.2247,-1858.8806,13.4140);
	TogglePlayerControllable(playerid, 0);
	SetPlayerCameraPos(playerid, 1808.8971, -1754.5114, 56.6778);
	SetPlayerCameraLookAt(playerid, 1809.8999, -1754.5228, 56.3977);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	Dialog_Show(playerid, Dialog_Genero, DIALOG_STYLE_LIST, "Selecione seu genêro", "Masculino\nFeminino", "Selecionar", "");
	return 1;
}



public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

public OnModelSelectionResponse(playerid, extraid, index, modelid, response)
{
	if(!response)
	{
        if(GetPVarType(playerid, "TaNaConce") != 0) { CancelSelectTextDraw(playerid); SetPVarInt(playerid, "TaNaConce", 0); }
	}
	else
	{
		if (extraid == MODEL_SELECTION_SKIN)
		{
		    PlayerInfo[playerid][pLevel] = 0;
		    PlayerInfo[playerid][pLogado] = 1;
		    PlayerInfo[playerid][pRegistrado] = 1;
		    PlayerInfo[playerid][pTutorial] = 1;
		    PlayerInfo[playerid][pHealthMax] = 100;
		    PlayerInfo[playerid][pHealth] = 100;
			SetPlayerHealth(playerid, 100);
			P_Health[playerid] = 100;
			God_VidaAnterior2[playerid] = 100;
			God_Aviso2[playerid] = 0;
			SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
		    PlayerInfo[playerid][pSkin] = modelid;
			PlayerInfo[playerid][pPos][0] = 1743.7053; //Alterar para spawn em Los Santos
			PlayerInfo[playerid][pPos][1] = -1863.2133;
			PlayerInfo[playerid][pPos][2] = 13.5959;
		    StopAudioStreamForPlayer(playerid);

    		PlayerInfo[playerid][pLogouAgr] = 1;
    		PlayerInfo[playerid][pInterior] = 0;
    		PlayerInfo[playerid][pWorld] = 0;
    		PlayerInfo[playerid][pPayDay] = 60;
    		PlayerInfo[playerid][pGrana] = 1200;
    		PlayerInfo[playerid][pBanco] = 5000;
			PlayerInfo[playerid][pGranaSuja] = 0;

			PlayerInfo[playerid][pOuro] = 0;
			PlayerInfo[playerid][pPrata] = 0;
			PlayerInfo[playerid][pBronze] = 0;

			PlayerInfo[playerid][pOlhos] = 0;
			PlayerInfo[playerid][pAltura] = 0;
			PlayerInfo[playerid][pCabelo] = 0;
			PlayerInfo[playerid][pEtnia] = 0;
			PlayerInfo[playerid][pPeso] = 0;

			PlayerInfo[playerid][pFome] = 100;
			PlayerInfo[playerid][pSede] = 100;
			PlayerInfo[playerid][pApostouBicho] = 0;

            PlayerInfo[playerid][pFactionTeam] = 0;
            PlayerInfo[playerid][pBanTeam] = 0;
            PlayerInfo[playerid][pRefundTeam] = 0;
            PlayerInfo[playerid][pPropertyTeam] = 0;
            PetData[playerid][petModelID] = 0;
			PlayerInfo[playerid][pExecComando] = 0;

			//==================================================================
            TogglePlayerSpectating(playerid,0);
    		SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pSkin], 1805.9271, -1746.1440, 51.4588, 0, 0, 0, 0, 0, 0, 0);
		 	SpawnPlayer(playerid);
			TogglePlayerControllable(playerid, 0);
			SetCameraBehindPlayer(playerid);
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);

			if(PlayerInfo[playerid][pHealthMax] < 50) PlayerInfo[playerid][pHealthMax] = 100;
			P_Health[playerid] = PlayerInfo[playerid][pHealthMax];
			SetPlayerHealth(playerid, PlayerInfo[playerid][pHealthMax]);

			PlayerInfo[playerid][pMorto] = 0;
 			PlayerInfo[playerid][pMancando] = 0;

			God_Aviso2[playerid] = 0;
			God_VidaAnterior2[playerid] = PlayerInfo[playerid][pHealthMax];
			TogglePlayerControllable(playerid, 1);
			ZerarDamages(playerid);
			PlayerInfo[playerid][pTomouAlgumTiro] = 0;
			PlayerInfo[playerid][pTomouTiroPesado] = 0;
 			PlayerInfo[playerid][pTomouTiroBrancas] = 0;

			if (IsValidDynamic3DTextLabel(TextMorto[playerid])) DestroyDynamic3DTextLabel(TextMorto[playerid]);
			TempoDesistir[playerid] = 0;
			PlayerInfo[playerid][pTempoMorto] = 0;
			TextDrawHideForPlayer(playerid,Telinha);

			SocosMorto[playerid] = 0;
			//==================================================================

		    new pnames[24];
			GetPlayerName(playerid, pnames, sizeof(pnames));
	 		format(PlayerInfo[playerid][pNomeP],24,"%s",pnames);

		    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			SetPlayerPos(playerid, 1741.3394, -1875.1597, 13.5859);
			SetPlayerFacingAngle( playerid, 180);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			new str[1800];
			for(new sms_id= 0; sms_id < 40; sms_id++) {
				format(str,sizeof(str),"INSERT INTO sms (id,dono) VALUES ('%d','%d')",sms_id,PlayerInfo[playerid][pID]);
 				mysql_function_query(Pipeline, str, false, "", "");
			}
			for(new c_id= 0; c_id < 40; c_id++) {
  				format(ContatoInfo[playerid][c_id][ContatoNome], 256, "Contato_%d",c_id+1);

				format(str,sizeof(str),"INSERT INTO contatoscel (id,nome,dono) VALUES ('%d','%s','%d')",c_id,ContatoInfo[playerid][c_id][ContatoNome],PlayerInfo[playerid][pID]);
				mysql_function_query(Pipeline, str, false, "", "");
			}


		}
		if(extraid == MODEL_PMERJ_SKINS)
		{
		    PlayerInfo[playerid][pDutySkin] = modelid;
		    SetPlayerSkin(playerid, PlayerInfo[playerid][pDutySkin]);
		}
		if(extraid == MODEL_VITOR_SKINS)
		{
		    PlayerInfo[playerid][pSkin] = modelid;
		    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		}
		if(extraid == MODEL_EB_SKINS)
		{
		    PlayerInfo[playerid][pDutySkin] = modelid;
		    SetPlayerSkin(playerid, PlayerInfo[playerid][pDutySkin]);
		}
		if(extraid == MODEL_PMERJ_BARREIRAS)
		{
	 		new Float:X,Float:Y,Float:Z,Float:A;
	 		GetPlayerPos(playerid, X, Y, Z);
	 		GetPlayerFacingAngle(playerid,A);
			new BarrID = 999, world =  GetPlayerVirtualWorld(playerid);
	 		for(new i; i < MAX_PMERJ_BARREIRAS; i++)
	 		{
	 		    if(!BarreiraInfo[i][BlockObj])
	 		    {
	 		        BarrID = i;
	 		        break;
	 		    }
	 		}
	 		if(BarrID == 999) return SCM(playerid, COLOR_LIGHTRED, "O limite de barreiras foi atingido");
	 		BarreiraInfo[BarrID][BlockModel] = modelid;
		    BarreiraInfo[BarrID][BlockObj] = CreateDynamicObject(modelid, X, Y+1, Z, 0, 0, A, world);
			BarreiraInfo[BarrID][BlockX] = X;
			BarreiraInfo[BarrID][BlockY] = Y+1;
			BarreiraInfo[BarrID][BlockZ] = Z;
			BarreiraInfo[BarrID][BlockW] = world;
		    PlayerInfo[playerid][pEditandoBareira] = BarrID;
			EditDynamicObject(playerid, BarreiraInfo[BarrID][BlockObj]);
		}
		if(extraid == MODEL_SELECTION_ELETROS) ComprandoMovel(playerid, modelid, 0, 1);
		if(extraid == MODEL_SELECTION_CONFORTO) ComprandoMovel(playerid, modelid, 0, 2);
		if(extraid == MODEL_SELECTION_DECORACAO) ComprandoMovel(playerid, modelid, 0, 3);
		if(extraid == MODEL_SELECTION_ENTRERT) ComprandoMovel(playerid, modelid, 0, 4);
		if(extraid == MODEL_SELECTION_ILUMINA) ComprandoMovel(playerid, modelid, 0, 5);
		if(extraid == MODEL_SELECTION_BANHEIRO) ComprandoMovel(playerid, modelid, 0, 6);
		if(extraid == MODEL_SELECTION_ARMAZEM) ComprandoMovel(playerid, modelid, 0, 7);
		if(extraid == MODEL_SELECTION_SUPERF) ComprandoMovel(playerid, modelid, 0, 8);
		if(extraid == MODEL_SELECTION_DIVERSOS) ComprandoMovel(playerid, modelid, 0, 9);
		if(extraid == MODEL_SELECTION_ESPECIAL) ComprandoMovel(playerid, modelid, 0, 10);
		if(extraid == MODEL_SELECTION_PORTAS) ComprandoMovel(playerid, modelid, 0, 11);
		if(extraid == MODEL_SELECTION_TVS) ComprandoMovel(playerid, modelid, 0, 12);
		if(extraid == MODEL_SELECTION_COMP) ComprandoMovel(playerid, modelid, 0, 13);



		if(extraid == MODEL_SELECTION_CONCE_0 || extraid == MODEL_SELECTION_CONCE_1 || extraid == MODEL_SELECTION_CONCE_2 || extraid == MODEL_SELECTION_CONCE_3 || extraid == MODEL_SELECTION_CONCE_5 || extraid == MODEL_SELECTION_CONCE_4  || extraid == MODEL_SELECTION_CONCE_6 )
		{
		    MostrarConce2(playerid, modelid, extraid);
		}
		if(extraid == MODEL_SELECTION_AJUDA_INI)
		{
		    MostrarConce2_AI(playerid, modelid, extraid);
		}

		/*if(extraid == MODEL_SELECTION_OCULOS) ComprandoItemSQL(playerid, modelid, 9, 1);
		if(extraid == MODEL_SELECTION_CHAPEUS) ComprandoItemSQL(playerid, modelid, 8, 2);
		if(extraid == MODEL_SELECTION_MASCARAS) ComprandoItemSQL(playerid, modelid, 7, 3);
		if(extraid == MODEL_SELECTION_OUTROS) ComprandoItemSQL(playerid, modelid, 6, 4);
		if(extraid == MODEL_SELECTION_RELOGIOS) ComprandoItemSQL(playerid, modelid, 6, 5);

		if(extraid == MODEL_SELECTION_OCULOS_PMERJ) ComprandoItemSQL(playerid, modelid, 9, 1);
		if(extraid == MODEL_SELECTION_CHAPEU_PMERJ) ComprandoItemSQL(playerid, modelid, 8, 2);
		if(extraid == MODEL_SELECTION_OUTROS_PMERJ) ComprandoItemSQL(playerid, modelid, 6, 4);*/

	    if(extraid == MODEL_SELECTION_OCULOS) OutrasInfos[playerid][oTipoCItem] = 1, OutrasInfos[playerid][oModelidCItem] = modelid, BoneItemComprado(playerid);
		if(extraid == MODEL_SELECTION_CHAPEUS) OutrasInfos[playerid][oTipoCItem] = 2, OutrasInfos[playerid][oModelidCItem] = modelid, BoneItemComprado(playerid);
		if(extraid == MODEL_SELECTION_MASCARAS) OutrasInfos[playerid][oTipoCItem] = 3, OutrasInfos[playerid][oModelidCItem] = modelid, BoneItemComprado(playerid);
		if(extraid == MODEL_SELECTION_OUTROS) OutrasInfos[playerid][oTipoCItem] = 4, OutrasInfos[playerid][oModelidCItem] = modelid, BoneItemComprado(playerid);
		if(extraid == MODEL_SELECTION_RELOGIOS) OutrasInfos[playerid][oTipoCItem] = 5, OutrasInfos[playerid][oModelidCItem] = modelid, BoneItemComprado(playerid);

		if(extraid == MODEL_SELECTION_OCULOS_PMERJ) OutrasInfos[playerid][oTipoCItem] = 1, OutrasInfos[playerid][oModelidCItem] = modelid, BoneItemComprado(playerid);
		if(extraid == MODEL_SELECTION_CHAPEU_PMERJ) OutrasInfos[playerid][oTipoCItem] = 2, OutrasInfos[playerid][oModelidCItem] = modelid, BoneItemComprado(playerid);
		if(extraid == MODEL_SELECTION_OUTROS_PMERJ) OutrasInfos[playerid][oTipoCItem] = 4, OutrasInfos[playerid][oModelidCItem] = modelid, BoneItemComprado(playerid);

        if(extraid == MODEL_SELECTION_OCULOS_PCERJ) OutrasInfos[playerid][oTipoCItem] = 1, OutrasInfos[playerid][oModelidCItem] = modelid, BoneItemComprado(playerid);
        if(extraid == MODEL_SELECTION_CHAPEU_PCERJ) OutrasInfos[playerid][oTipoCItem] = 2, OutrasInfos[playerid][oModelidCItem] = modelid, BoneItemComprado(playerid);
        if(extraid == MODEL_SELECTION_OUTROS_PCERJ) OutrasInfos[playerid][oTipoCItem] = 4, OutrasInfos[playerid][oModelidCItem] = modelid, BoneItemComprado(playerid);

		if(extraid == MODEL_SELECTION_OUTROS_PROTEGE)  OutrasInfos[playerid][oTipoCItem] = 1, OutrasInfos[playerid][oModelidCItem] = modelid, BoneItemComprado(playerid);
		
        if(extraid == MODEL_SELECTION_OCULOS_EB) OutrasInfos[playerid][oTipoCItem] = 1, OutrasInfos[playerid][oModelidCItem] = modelid, BoneItemComprado(playerid);
        if(extraid == MODEL_SELECTION_CHAPEU_EB) OutrasInfos[playerid][oTipoCItem] = 2, OutrasInfos[playerid][oModelidCItem] = modelid, BoneItemComprado(playerid);
        if(extraid == MODEL_SELECTION_OUTROS_EB) OutrasInfos[playerid][oTipoCItem] = 4, OutrasInfos[playerid][oModelidCItem] = modelid, BoneItemComprado(playerid);


		if(extraid == MODEL_SELECTION_BINCO)
		{
		    if(PlayerInfo[playerid][pGrana] >= 50) {
				new EmpresaID = PlayerInfo[playerid][pEntrouEmpresa];
			    SCM(playerid, COLOR_LIGHTGREEN, "Você comprou uma nova skin por R$50.");
			    PlayerInfo[playerid][pSkin] = modelid;
			    SetPlayerSkin(playerid, modelid);

				PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-50;
			    EmpInfo[EmpresaID][eBank] += 50;
			    ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 3.0, 0, 0, 0, 0, 0, 1);
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem R$50.");
		}
	}
	return 1;
}

stock BoneItemComprado(playerid)
{
    Dialog_Show(playerid, DIALOG_CITEM_BONE, DIALOG_STYLE_LIST, "Selecione a Bone", "Espinha\nCabeça\nBraço Esquerdo\nBraço Direito\nMão Esquerda\nMão Direita\nCoxa Esquerda\nCoxa Direta\nPé Esquerdo\nPé Direito\nPanturrilha Direta\nPanturrilha Esquerda\nAntebraço Direito\nAntebraço Direito\nClavicula Esquerda\nClavicula Direta\nPescoço\nMandibula", "Selecionar", "Cancelar");
	return 1;
}

Dialog:DIALOG_CITEM_BONE(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
		Dialog_Show(playerid, DIALOG_CITEM_INDEX, DIALOG_STYLE_LIST, "Selecione a Index", "1\n2\n3\n4", "Selecionar", "Cancelar");
	    OutrasInfos[playerid][oBoneCItem] = listitem+1;
	}
	return 1;
}

Dialog:DIALOG_CITEM_INDEX(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
	    OutrasInfos[playerid][oIndexCItem] = listitem+1;
	    ComprandoItemSQL(playerid, OutrasInfos[playerid][oModelidCItem], OutrasInfos[playerid][oIndexCItem], OutrasInfos[playerid][oBoneCItem], OutrasInfos[playerid][oTipoCItem]);
	}
	return 1;
}

stock MostrarConce2(playerid,carid,conce)
{
	new PriceReal = GetVehiclePrice(carid);
 	new Price = PriceReal;
	/*new PriceDesconto = (PriceReal/10)*3;
	new Price = PriceReal-PriceDesconto;*/

    ComprandoCarro[playerid][0] = carid;
    ComprandoCarro[playerid][1] = Price;
    ComprandoCarro[playerid][2] = -1; // Cor
    ComprandoCarro[playerid][3] = conce; // Conce
    ComprandoCarro[playerid][4] = 0;

    new NomeDoMovel[124];
    format(NomeDoMovel,sizeof(NomeDoMovel),"Informações do Veículo:\nVeiculo %s\nPreço: R$%d\n", VehicleNames[(carid-400)], Price);
    Dialog_Show(playerid, CONCE_Dialog, DIALOG_STYLE_MSGBOX, "Concessionárîa", NomeDoMovel, "Comprar", "Voltar");
	return 1;
}

stock MostrarConce2_AI(playerid,carid,conce)
{
    ComprandoCarro[playerid][0] = carid;
    ComprandoCarro[playerid][1] = 0;
    ComprandoCarro[playerid][2] = -1; // Cor
    ComprandoCarro[playerid][3] = conce; // Conce
    ComprandoCarro[playerid][4] = 1;

    new NomeDoMovel[124];
    format(NomeDoMovel,sizeof(NomeDoMovel),"Informações do Veículo:\nVeiculo %s\nPreço: R$0\n", VehicleNames[(carid-400)]);
    Dialog_Show(playerid, CONCE_Dialog, DIALOG_STYLE_MSGBOX, "AjudaInicial", NomeDoMovel, "Comprar", "Voltar");
	return 1;
}

Dialog:CONCE_Dialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    for(new i; i < sizeof(ChangeColor); i++)
     	{
      		TextDrawShowForPlayer(playerid, ChangeColor[i]);
        }
        SelectTextDraw(playerid, 0xFFFFFF66) ;
        return 1;
	}
	else
	{
	    CancelSelectTextDraw(playerid);

		if(ComprandoCarro[playerid][4] == 1)
		{
		    ShowModelSelectionMenu(playerid, "AJUDA INICIAL", MODEL_SELECTION_AJUDA_INI, CARROS_AJUDAINI, sizeof(CARROS_AJUDAINI), -16.0, 0.0, -55.0);
		}
		else
		{
		    switch(ComprandoCarro[playerid][3])
			{
			    case MODEL_SELECTION_CONCE_0: ShowModelSelectionMenu(playerid, "CONCESSIONÁRIA", MODEL_SELECTION_CONCE_0, CONCE_UTILITARIOS, sizeof(CONCE_UTILITARIOS), -16.0, 0.0, -55.0);
				case MODEL_SELECTION_CONCE_1: ShowModelSelectionMenu(playerid, "CONCESSIONÁRIA", MODEL_SELECTION_CONCE_1, CONCE_SALLON, sizeof(CONCE_SALLON), -16.0, 0.0, -55.0);
				case MODEL_SELECTION_CONCE_2: ShowModelSelectionMenu(playerid, "CONCESSIONÁRIA", MODEL_SELECTION_CONCE_2, CONCE_TRAILERS, sizeof(CONCE_TRAILERS), -16.0, 0.0, -55.0);
				case MODEL_SELECTION_CONCE_3: ShowModelSelectionMenu(playerid, "CONCESSIONÁRIA", MODEL_SELECTION_CONCE_3, CONCE_LUXO, sizeof(CONCE_LUXO), -16.0, 0.0, -55.0);
				case MODEL_SELECTION_CONCE_4: ShowModelSelectionMenu(playerid, "CONCESSIONÁRIA", MODEL_SELECTION_CONCE_4, CONCE_MOTOS, sizeof(CONCE_MOTOS), -16.0, 0.0, -55.0);
				case MODEL_SELECTION_CONCE_5: ShowModelSelectionMenu(playerid, "CONCESSIONÁRIA", MODEL_SELECTION_CONCE_5, CONCE_PUB, sizeof(CONCE_PUB), -16.0, 0.0, -55.0);
				case MODEL_SELECTION_CONCE_6: ShowModelSelectionMenu(playerid, "CONCESSIONÁRIA", MODEL_SELECTION_CONCE_6, CONCE_BARCOS, sizeof(CONCE_BARCOS), -16.0, 0.0, -55.0);
			}
		}
	}
	return 1;
}

forward IsABoatModel(modelid);
public IsABoatModel(modelid)
{
	if(modelid == 430 || modelid == 446 || modelid == 452 || modelid == 453 || modelid == 454 || modelid == 472 || modelid == 473 || modelid == 484 || modelid == 493 || modelid == 595)
	{
		return 1;
	}
	return 0;
}

Terminar_Compra(playerid,vehicle_model, price, parafac)
{
	if(!vehicle_creating)
	{
		new biz = PlayerInfo[playerid][pEntrouEmpresa];
		new slot = FetchNextVehicleSlot();
		if(purchasing_vehicle[playerid] == -1)
		{
			if(slot > -1)
			{
			    new Float:BarcoX = 2308.7019,
			    	Float:BarcoY = -2428.2788,
				    Float:BarcoZ = -0.6629,
				    Float:BarcoR = 73.1893;

   				if(PlayerInfo[playerid][pLevel] >= 0)
  				{
  				    if(ComprandoCarro[playerid][4] == 1)
					{
					            PlayerInfo[playerid][pAjudaInicial] = 2;
					    		vehicle_creating = 1;
								VehicleInfo[slot][vOwner] = PlayerInfo[playerid][pID];
								VehicleInfo[slot][vModel] = vehicle_model;
								VehicleInfo[slot][vColor1] = ComprandoCarro[playerid][2];
								VehicleInfo[slot][vColor2] = ComprandoCarro[playerid][2];
								VehicleInfo[slot][vFuel] = 100;
								if(IsABoatModel(vehicle_model))
								{
								    VehicleInfo[slot][vSpawnX] = BarcoX;
							 		VehicleInfo[slot][vSpawnY] = BarcoY;
							 		VehicleInfo[slot][vSpawnZ] = BarcoZ;
								    VehicleInfo[slot][vSpawnR] = BarcoR;
								}
								else
								{
									VehicleInfo[slot][vSpawnX] = EmpInfo[biz][eVX];
									VehicleInfo[slot][vSpawnY] = EmpInfo[biz][eVY];
									VehicleInfo[slot][vSpawnZ] = EmpInfo[biz][eVZ];
									VehicleInfo[slot][vSpawnR] = EmpInfo[biz][eVR];
								}

								VehicleInfo[slot][vInsurance] = 0;
								VehicleInfo[slot][vDestroyed] = 0;
								VehicleInfo[slot][vLock] = 0;

								VehicleInfo[slot][vMileage] = 0;
								VehicleInfo[slot][vFaction] = 0;
								VehicleInfo[slot][vGps] = 0;
								VehicleInfo[slot][vCompany] = 0;
			     				VehicleInfo[slot][vSelling] = -1;
								VehicleInfo[slot][vHealth] = 1000.0;
								VehicleInfo[slot][vSemUso] = 3600;
								VehicleInfo[slot][vVehicle] = CreateVehicle(VehicleInfo[slot][vModel],VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],VehicleInfo[slot][vSpawnR],VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2],-1);
								VehicleInfo[slot][vDeathTime] = 0;
								VehicleInfo[slot][vWorld] = 0;
								VehicleInfo[slot][vInterior] = 0;
								VehicleInfo[slot][vAjudaIni] = 1;
								VehicleInfo[slot][vBateria] = 100.0;
								cp_target[playerid] = 1;
								SetPlayerCheckpoint(playerid,VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],5.0);
								cp_target[playerid] = 1;
								FetchVehiclePlate(slot,VehicleInfo[slot][vPlate]);
								SetVehicleNumberPlate(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vPlate]);
								SetVehicleParamsEx(VehicleInfo[slot][vVehicle], false, false, false, false, false, false, false);
								strdel(VehicleInfo[slot][vMods],0,strlen(VehicleInfo[slot][vMods]));
								SendClientMessage(playerid,COLOR_LIGHTRED,"[!] O seu veículo está spawnando na concessionária.");
  								SendClientMessage(playerid,COLOR_LIGHTRED,"Não se esqueça de instalar um GPS no mesmo para utilizar '/v encontrar' caso você não saiba onde ele está.");
								vehicle_creating = 0;
			     				LockVehicle(VehicleInfo[slot][vVehicle]);
								format(VehicleInfo[slot][vOwnerName],MAX_PLAYER_NAME,"%s",PlayerName(playerid,0));
								StopEngine(VehicleInfo[slot][vVehicle]);
								new str[256];
								purchasing_vehicle[playerid] = slot;
								format(str,sizeof(str),"INSERT INTO rp_vehicles (model,owning_character,color1,color2,spawn_x,spawn_y,spawn_z,spawn_r,insurance,bateria,hp,plate) VALUES ('%d','%d','%d','%d','%f','%f','%f','%f', '%d','%d','%f','%s')",
								VehicleInfo[slot][vModel],
								VehicleInfo[slot][vOwner],
								VehicleInfo[slot][vColor1],
								VehicleInfo[slot][vColor2],
								VehicleInfo[slot][vSpawnX],
								VehicleInfo[slot][vSpawnY],
								VehicleInfo[slot][vSpawnZ],
								VehicleInfo[slot][vSpawnR],
								VehicleInfo[slot][vInsurance],
								VehicleInfo[slot][vBateria],
								VehicleInfo[slot][vHealth],
								VehicleInfo[slot][vPlate]);
								mysql_function_query(Pipeline, str, true, "QUERY_PURCHASE_VEHICLE", "d", playerid);
					}
					else
					{
	  				    if(parafac == 0)
						{
						    if(PlayerInfo[playerid][pGrana] >= price)
	  						{
					    		vehicle_creating = 1;
					 			PlayerInfo[playerid][pGrana] -= price;
								EmpInfo[biz][eBank] += price; // Conce ganhar o dim
								VehicleInfo[slot][vOwner] = PlayerInfo[playerid][pID];
								VehicleInfo[slot][vModel] = vehicle_model;
								VehicleInfo[slot][vColor1] = ComprandoCarro[playerid][2];
								VehicleInfo[slot][vColor2] = ComprandoCarro[playerid][2];
								VehicleInfo[slot][vFuel] = 100;
								VehicleInfo[slot][vBateria] = 100.0;
								if(IsABoatModel(vehicle_model))
								{
								    VehicleInfo[slot][vSpawnX] = BarcoX;
							 		VehicleInfo[slot][vSpawnY] = BarcoY;
							 		VehicleInfo[slot][vSpawnZ] = BarcoZ;
								    VehicleInfo[slot][vSpawnR] = BarcoR;
								}
								else
								{
									VehicleInfo[slot][vSpawnX] = EmpInfo[biz][eVX];
									VehicleInfo[slot][vSpawnY] = EmpInfo[biz][eVY];
									VehicleInfo[slot][vSpawnZ] = EmpInfo[biz][eVZ];
									VehicleInfo[slot][vSpawnR] = EmpInfo[biz][eVR];
								}

								VehicleInfo[slot][vInsurance] = 0;
								VehicleInfo[slot][vDestroyed] = 0;
								VehicleInfo[slot][vLock] = 0;
								VehicleInfo[slot][vMileage] = 0;
								VehicleInfo[slot][vFaction] = 0;
								VehicleInfo[slot][vGps] = 0;
								VehicleInfo[slot][vCompany] = 0;
			     				VehicleInfo[slot][vSelling] = -1;
								VehicleInfo[slot][vHealth] = 1000.0;
								VehicleInfo[slot][vSemUso] = 3600;
								VehicleInfo[slot][vBateria] = 100.0;
								VehicleInfo[slot][vVehicle] = CreateVehicle(VehicleInfo[slot][vModel],VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],VehicleInfo[slot][vSpawnR],VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2],-1);
								VehicleInfo[slot][vDeathTime] = 0;
								VehicleInfo[slot][vWorld] = 0;
								VehicleInfo[slot][vInterior] = 0;
								VehicleInfo[slot][vAjudaIni] = 0;
								cp_target[playerid] = 1;
								SetPlayerCheckpoint(playerid,VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],5.0);
								cp_target[playerid] = 1;
								FetchVehiclePlate(slot,VehicleInfo[slot][vPlate]);
								SetVehicleNumberPlate(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vPlate]);
								SetVehicleParamsEx(VehicleInfo[slot][vVehicle], false, false, false, false, false, false, false);
								strdel(VehicleInfo[slot][vMods],0,strlen(VehicleInfo[slot][vMods]));
								SendClientMessage(playerid,COLOR_LIGHTRED,"[!] O seu veículo esta spawnando na concessionária.");
  								SendClientMessage(playerid,COLOR_LIGHTRED,"Não se esqueça de instalar um GPS no mesmo para utilizar '/v encontrar' caso você não saiba onde ele está.");
								vehicle_creating = 0;
			     				LockVehicle(VehicleInfo[slot][vVehicle]);
								format(VehicleInfo[slot][vOwnerName],MAX_PLAYER_NAME,"%s",PlayerName(playerid,0));
								StopEngine(VehicleInfo[slot][vVehicle]);
								new str[256];
								purchasing_vehicle[playerid] = slot;
								format(str,sizeof(str),"INSERT INTO rp_vehicles (model,owning_character,color1,color2,spawn_x,spawn_y,spawn_z,spawn_r,insurance,bateria,hp,plate) VALUES ('%d','%d','%d','%d','%f','%f','%f','%f','%d','%d','%f','%s')",
								VehicleInfo[slot][vModel],
								VehicleInfo[slot][vOwner],
								VehicleInfo[slot][vColor1],
								VehicleInfo[slot][vColor2],
								VehicleInfo[slot][vSpawnX],
								VehicleInfo[slot][vSpawnY],
								VehicleInfo[slot][vSpawnZ],
								VehicleInfo[slot][vSpawnR],
								VehicleInfo[slot][vInsurance],
								VehicleInfo[slot][vBateria],
								VehicleInfo[slot][vHealth],
								VehicleInfo[slot][vPlate]);
								mysql_function_query(Pipeline, str, true, "QUERY_PURCHASE_VEHICLE", "d", playerid);
							}
						}
						else if(parafac == 1)
						{
							printf("Chegou no parafac 1");
							vehicle_creating = 1;
							PlayerInfo[playerid][pGrana] -= price;
							EmpInfo[biz][eBank] += price; // Conce ganhar o dim
							VehicleInfo[slot][vOwner] = 0;
							VehicleInfo[slot][vModel] = vehicle_model;
							VehicleInfo[slot][vColor1] = ComprandoCarro[playerid][2];
							VehicleInfo[slot][vColor2] = ComprandoCarro[playerid][2];
							VehicleInfo[slot][vFuel] = 100;
							VehicleInfo[slot][vSpawnX] = EmpInfo[biz][eVX];
							VehicleInfo[slot][vSpawnY] = EmpInfo[biz][eVY];
							VehicleInfo[slot][vSpawnZ] = EmpInfo[biz][eVZ];
							VehicleInfo[slot][vSpawnR] = EmpInfo[biz][eVR];
							VehicleInfo[slot][vMileage] = 0;
							VehicleInfo[slot][vInsurance] = 0;
							VehicleInfo[slot][vLock] = 0;
							VehicleInfo[slot][vGps] = 0;
							VehicleInfo[slot][vSelling] = -1;
							VehicleInfo[slot][vCompany] = 0;
							VehicleInfo[slot][vDeathTime] = 0;
							VehicleInfo[slot][vHealth] = 1000.0;
							VehicleInfo[slot][vWorld] = 0;
							VehicleInfo[slot][vInterior] = 0;
							VehicleInfo[slot][vAjudaIni] = 0;
							VehicleInfo[slot][vBateria] = 100.0;
							FetchVehiclePlate(slot,VehicleInfo[slot][vPlate]);
							strdel(VehicleInfo[slot][vMods],0,strlen(VehicleInfo[slot][vMods]));
							VehicleInfo[slot][vSemUso] = 3600;
							VehicleInfo[slot][vVehicle] = CreateVehicle(VehicleInfo[slot][vModel],VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],VehicleInfo[slot][vSpawnR],VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2],-1);
							SetPlayerCheckpoint(playerid,VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],5.0);
							cp_target[playerid] = 1;
							VehicleInfo[slot][vFaction] = PlayerInfo[playerid][pFac];
							FetchVehiclePlate(slot,VehicleInfo[slot][vPlate]);
							SetVehicleNumberPlate(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vPlate]);
							SetVehicleParamsEx(VehicleInfo[slot][vVehicle], false, false, false, false, false, false, false);
							strdel(VehicleInfo[slot][vMods],0,strlen(VehicleInfo[slot][vMods]));
							GameTextForPlayer(playerid,"~g~Você comprou este veiculo",5000,5);
							SendClientMessage(playerid,COLOR_LIGHTRED,"[!] O seu veículo está spawnando na concessionária.");
  							SendClientMessage(playerid,COLOR_LIGHTRED,"Não se esqueça de instalar um GPS no mesmo para utilizar '/v encontrar' caso você não saiba onde ele está.");
							vehicle_creating = 0;
							LockVehicle(VehicleInfo[slot][vVehicle]);
							StopEngine(VehicleInfo[slot][vVehicle]);
							format(VehicleInfo[slot][vOwnerName],MAX_PLAYER_NAME,"Faction Vehicle");
							new str[256];
							purchasing_vehicle[playerid] = slot;
							format(str,sizeof(str),"INSERT INTO rp_vehicles (model,owning_character,color1,color2,spawn_x,spawn_y,spawn_z,spawn_r,insurance,hp,faction,plate) VALUES ('%d','%d','%d','%d','%f','%f','%f','%f','%d','%d','%f','%d','%s')",
							VehicleInfo[slot][vModel],
							VehicleInfo[slot][vOwner],
							VehicleInfo[slot][vColor1],
							VehicleInfo[slot][vColor2],
							VehicleInfo[slot][vSpawnX],
							VehicleInfo[slot][vSpawnY],
							VehicleInfo[slot][vSpawnZ],
							VehicleInfo[slot][vSpawnR],
							VehicleInfo[slot][vInsurance],
							VehicleInfo[slot][vBateria],
							VehicleInfo[slot][vHealth],
							VehicleInfo[slot][vFaction],
							VehicleInfo[slot][vPlate]);
							printf("Query: %s", str);
							mysql_function_query(Pipeline, str, true, "QUERY_PURCHASE_VEHICLE", "d", playerid);
						}
							else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem todo este dinheiro.");
					}
				}
				else
 				{
	    			SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa ser level 1 para comprar um veículo.");
				}
			}
			else
			{
			    SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode ter mais nenhum veículo.");
			}
		}
		else
		{
		    SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Tente novamente. Erro #1 - Caso persista, Relogue.");
		}
 	}
 	else
 	{
 	    SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Sistema de veículos sobrecarregado, tente novamente.");
 	}
 	return 1;
}
//==============================================================================
forward ComprandoMovel(playerid, modelid, preco, tipo);
public ComprandoMovel(playerid, modelid, preco, tipo)
{
    new WorldCasa = -1;

	if(PlayerInfo[playerid][pEntrouCasa] != -1)
	{
	    if(HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hTipo] == 0)
		{
			WorldCasa = 100+PlayerInfo[playerid][pEntrouCasa];
		}
		else
		{
		    WorldCasa = 0;
		}
	}
	else if(PlayerInfo[playerid][pEntrouGaragem] != -1) WorldCasa = 10000+PlayerInfo[playerid][pEntrouGaragem];
	else if(PlayerInfo[playerid][pEntrouComplexo] != -1) WorldCasa = 1000+PlayerInfo[playerid][pEntrouComplexo];
	else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) WorldCasa = 100+PlayerInfo[playerid][pEntrouEmpresa];
	else return SendClientMessage(playerid,COLOR_LIGHTRED,"Ocorreu um erro.. Reentre no local para utilizar o furniture.");

	if(WorldCasa == -1) return SendClientMessage(playerid,COLOR_LIGHTRED,"Ocorreu um erro.. Reentre no local para utilizar o furniture.");
	else if(GetPlayerVirtualWorld(playerid) != WorldCasa) return SendClientMessage(playerid,COLOR_LIGHTRED,"Ocorreu um erro... Reentre no local para utilizar o furniture.");

	new NomeDoMovel[24];

	if(tipo == 1) format(NomeDoMovel,sizeof(NomeDoMovel),"Eletronicos");
	else if(tipo == 2) format(NomeDoMovel,sizeof(NomeDoMovel),"Conforto");
	else if(tipo == 3) format(NomeDoMovel,sizeof(NomeDoMovel),"Decoracao");
	else if(tipo == 4) format(NomeDoMovel,sizeof(NomeDoMovel),"Entreterimento");
	else if(tipo == 5) format(NomeDoMovel,sizeof(NomeDoMovel),"Iluminacao");
	else if(tipo == 6) format(NomeDoMovel,sizeof(NomeDoMovel),"Banheiro");
	else if(tipo == 7) format(NomeDoMovel,sizeof(NomeDoMovel),"Armazenamento");
	else if(tipo == 8) format(NomeDoMovel,sizeof(NomeDoMovel),"Superficie");
	else if(tipo == 9) format(NomeDoMovel,sizeof(NomeDoMovel),"Diversos");
	else if(tipo == 10) format(NomeDoMovel,sizeof(NomeDoMovel),"Especial");
	else if(tipo == 11) format(NomeDoMovel,sizeof(NomeDoMovel),"Porta");
	else format(NomeDoMovel,sizeof(NomeDoMovel),"Outro");
	PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-preco;

    new query[520];
   	mysql_format(Pipeline, query, sizeof(query), "INSERT INTO `furniture` ( `mModelo`, `mFurniNome`) VALUES ('%d', '%s')",modelid,NomeDoMovel);
	mysql_tquery(Pipeline, query, "MovelCompradoComSucesso", "iiis",playerid,modelid,WorldCasa,NomeDoMovel);

   	return 1;
}

forward MovelCompradoComSucesso(playerid,modelid,World,StrNome[]);
public MovelCompradoComSucesso(playerid,modelid,World,StrNome[])
{
    new id = cache_insert_id();
    FurniInfo[id][mID] = id;

    FurniInfo[id][mCriado] = 1;

    new Float:maX, Float:maY, Float:maZ;
	GetPlayerPos(playerid, maX, maY, maZ);

 	new Interior = GetPlayerInterior(playerid);

	if(PlayerInfo[playerid][pEntrouCasa] != -1)
	{
		FurniInfo[id][mNaCasa] = PlayerInfo[playerid][pEntrouCasa];
    	FurniInfo[id][mNaEmpresa] = -1;
    	FurniInfo[id][mNoComplexo] = -1;
    	FurniInfo[id][mNaGaragem] = -1;
	}
	else if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
	{
		FurniInfo[id][mNaCasa] = -1;
    	FurniInfo[id][mNaEmpresa] = PlayerInfo[playerid][pEntrouEmpresa];
    	FurniInfo[id][mNoComplexo] = -1;
    	FurniInfo[id][mNaGaragem] = -1;
	}
	else if(PlayerInfo[playerid][pEntrouComplexo] != -1)
	{
		FurniInfo[id][mNaCasa] = -1;
    	FurniInfo[id][mNaEmpresa] = -1;
    	FurniInfo[id][mNoComplexo] = PlayerInfo[playerid][pEntrouComplexo];
    	FurniInfo[id][mNaGaragem] = -1;
	}
	else if(PlayerInfo[playerid][pEntrouGaragem] != -1)
	{
		FurniInfo[id][mNaCasa] = -1;
    	FurniInfo[id][mNaEmpresa] = -1;
    	FurniInfo[id][mNoComplexo] = -1;
    	FurniInfo[id][mNaGaragem] = PlayerInfo[playerid][pEntrouGaragem];
	}

	format(FurniInfo[id][mFurniNome], 24, StrNome);

	FurniInfo[id][mModelo] = modelid;
    FurniInfo[id][mTextura] = 0;
    FurniInfo[id][mCor] = 0;
    FurniInfo[id][mWorld] = World;
	FurniInfo[id][mInt] = Interior;
	FurniInfo[id][mIndex] = 0;

	if(ObjetoEPorta(FurniInfo[id][mModelo]))
	{
		PlayerInfo[playerid][pEditPorta][0] = id;
	}
	else
	{
	    PlayerInfo[playerid][pEditMovel] = id;
	}


	FurniInfo[id][mObjeto] = CreateDynamicObject(modelid, maX+1, maY, maZ+1, 0.0, 0.0, 0.0, World, Interior);

    SetPVarInt(playerid, "ComprandoNovoMovel", 1);
    EditDynamicObject(playerid, FurniInfo[id][mObjeto]);
	SalvarMovel(id);
	return 1;
}

Movel_Refresh(playerid, movelid)
{
	if (movelid != -1 && FurniInfo[movelid][mCriado])
	{
		if (IsValidDynamicObject(FurniInfo[movelid][mObjeto])) DestroyDynamicObject(FurniInfo[movelid][mObjeto]);

        if(ObjetoEPorta(FurniInfo[movelid][mModelo]))
		{
  			if(FurniInfo[movelid][mPAberta] == 0)
    		{
				FurniInfo[movelid][mObjeto] = CreateDynamicObject(FurniInfo[movelid][mModelo], FurniInfo[movelid][mX], FurniInfo[movelid][mY], FurniInfo[movelid][mZ], FurniInfo[movelid][mRX], FurniInfo[movelid][mRY], FurniInfo[movelid][mRZ] ,FurniInfo[movelid][mWorld], FurniInfo[movelid][mInt]);
			}
			else
			{
			    FurniInfo[movelid][mObjeto] = CreateDynamicObject(FurniInfo[movelid][mModelo], FurniInfo[movelid][mX], FurniInfo[movelid][mY], FurniInfo[movelid][mZ], FurniInfo[movelid][mRX], FurniInfo[movelid][mRY], FurniInfo[movelid][mARZ] ,FurniInfo[movelid][mWorld], FurniInfo[movelid][mInt]);
			}
		}
		else
		{
			FurniInfo[movelid][mObjeto] = CreateDynamicObject(FurniInfo[movelid][mModelo], FurniInfo[movelid][mX], FurniInfo[movelid][mY], FurniInfo[movelid][mZ], FurniInfo[movelid][mRX], FurniInfo[movelid][mRY], FurniInfo[movelid][mRZ] ,FurniInfo[movelid][mWorld], FurniInfo[movelid][mInt]);
		}

        Movel_AplicarTextura(movelid);

		if(playerid != 9999) Streamer_Update(playerid);

		SalvarMovel(movelid);
	}
	return 1;
}

forward ZerarFurniture(playerid, tipo, id_need);
public ZerarFurniture(playerid, tipo, id_need)
{
	new TotalMoveis = 0;
	new str2[520];
    for(new m = 0; m < MAX_MOVEIS; m++)
    {
        if(FurniInfo[m][mCriado] != 0)
   		{
   		    switch(tipo)
   		    {
				case 1: // Casa
				{
				    if(FurniInfo[m][mNaCasa] == id_need)
					{
					    if (IsValidDynamicObject(FurniInfo[m][mObjeto]))
					    	DestroyDynamicObject(FurniInfo[m][mObjeto]);

					    FurniInfo[m][mObjeto] = 0;

					    FurniInfo[m][mCriado] = 0;
					    FurniInfo[m][mModelo] = 0;
					    FurniInfo[m][mTextura] = 0;
					    FurniInfo[m][mCor] = 0;
					    FurniInfo[m][mWorld] = 0;
						FurniInfo[m][mInt] = 0;
						FurniInfo[m][mNaCasa] = -1;
						FurniInfo[m][mNaEmpresa] = -1;
						FurniInfo[m][mNoComplexo] = -1;
						FurniInfo[m][mIndex] = 0;
						FurniInfo[m][mNaGaragem] = -1;

					   	format(str2,sizeof(str2),"DELETE FROM `furniture` WHERE `mID` = '%d'", FurniInfo[m][mID]);
					   	mysql_function_query(Pipeline, str2, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

					   	TotalMoveis++;
					}
				}
				case 2: //Empresa
				{
				    if(FurniInfo[m][mNaEmpresa] == id_need)
					{
					    if (IsValidDynamicObject(FurniInfo[m][mObjeto]))
					    	DestroyDynamicObject(FurniInfo[m][mObjeto]);

					    FurniInfo[m][mObjeto] = 0;

					    FurniInfo[m][mCriado] = 0;
					    FurniInfo[m][mModelo] = 0;
					    FurniInfo[m][mTextura] = 0;
					    FurniInfo[m][mCor] = 0;
					    FurniInfo[m][mWorld] = 0;
						FurniInfo[m][mInt] = 0;
						FurniInfo[m][mNaCasa] = -1;
						FurniInfo[m][mNaEmpresa] = -1;
						FurniInfo[m][mNoComplexo] = -1;
						FurniInfo[m][mIndex] = 0;
						FurniInfo[m][mNaGaragem] = -1;

					   	format(str2,sizeof(str2),"DELETE FROM `furniture` WHERE `mID` = '%d'", FurniInfo[m][mID]);
					   	mysql_function_query(Pipeline, str2, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

					   	TotalMoveis++;
					}
				}
				case 3: //Complexo
				{
				    if(FurniInfo[m][mNoComplexo] == id_need)
					{
					    if (IsValidDynamicObject(FurniInfo[m][mObjeto]))
					    	DestroyDynamicObject(FurniInfo[m][mObjeto]);

					    FurniInfo[m][mObjeto] = 0;

					    FurniInfo[m][mCriado] = 0;
					    FurniInfo[m][mModelo] = 0;
					    FurniInfo[m][mTextura] = 0;
					    FurniInfo[m][mCor] = 0;
					    FurniInfo[m][mWorld] = 0;
						FurniInfo[m][mInt] = 0;
						FurniInfo[m][mNaCasa] = -1;
						FurniInfo[m][mNaEmpresa] = -1;
						FurniInfo[m][mNoComplexo] = -1;
						FurniInfo[m][mIndex] = 0;
						FurniInfo[m][mNaGaragem] = -1;

					   	format(str2,sizeof(str2),"DELETE FROM `furniture` WHERE `mID` = '%d'", FurniInfo[m][mID]);
					   	mysql_function_query(Pipeline, str2, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

					   	TotalMoveis++;
					}
				}
				case 4: //Garagem
				{
				    if(FurniInfo[m][mNaGaragem] == id_need)
					{
					    if (IsValidDynamicObject(FurniInfo[m][mObjeto]))
					    	DestroyDynamicObject(FurniInfo[m][mObjeto]);

					    FurniInfo[m][mObjeto] = 0;

					    FurniInfo[m][mCriado] = 0;
					    FurniInfo[m][mModelo] = 0;
					    FurniInfo[m][mTextura] = 0;
					    FurniInfo[m][mCor] = 0;
					    FurniInfo[m][mWorld] = 0;
						FurniInfo[m][mInt] = 0;
						FurniInfo[m][mNaCasa] = -1;
						FurniInfo[m][mNaEmpresa] = -1;
						FurniInfo[m][mNoComplexo] = -1;
						FurniInfo[m][mIndex] = 0;
						FurniInfo[m][mNaGaragem] = -1;

					   	format(str2,sizeof(str2),"DELETE FROM `furniture` WHERE `mID` = '%d'", FurniInfo[m][mID]);
					   	mysql_function_query(Pipeline, str2, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

					   	TotalMoveis++;
					}
				}
			}
		}
	}

	if(TotalMoveis == 0) return SCM(playerid, -1, "ERRO:{FFFFFF} Não há nenhum movel para ser deletado aqui.");
	else
	{
		format(string,sizeof(string),"Você deletou todos os moveis da casa. (%d)", TotalMoveis);
	    SCM(playerid, -1, string);
		return 1;
	}
}

forward DeletandoMovel(playerid, MovelID);
public DeletandoMovel(playerid, MovelID)
{
    FurniInfo[MovelID][mObjeto] = 0;

    FurniInfo[MovelID][mCriado] = 0;
    FurniInfo[MovelID][mModelo] = 0;
    FurniInfo[MovelID][mTextura] = 0;
    FurniInfo[MovelID][mCor] = 0;
    FurniInfo[MovelID][mWorld] = 0;
	FurniInfo[MovelID][mInt] = 0;
	FurniInfo[MovelID][mNaCasa] = -1;
	FurniInfo[MovelID][mNaEmpresa] = -1;
	FurniInfo[MovelID][mNoComplexo] = -1;
	FurniInfo[MovelID][mIndex] = 0;
	FurniInfo[MovelID][mNaGaragem] = -1;

    new sttr[64];
    format(sttr,sizeof(sttr),"* Móvel %s deletado com sucesso.", FurniInfo[MovelID][mFurniNome]);
    SCM(playerid, COLOR_LIGHTRED, sttr);

    new str2[520];
   	format(str2,sizeof(str2),"DELETE FROM `furniture` WHERE `mID` = '%d'", FurniInfo[MovelID][mID]);
   	mysql_function_query(Pipeline, str2, true, "OnQueryFinish", "i", THREAD_NO_RESULT);
   	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle){

    printf("[ERROR]: ID: %i - Error: %s - Callback: %s - Query: %s - Connection: %i", errorid, error, callback, query, connectionHandle);
    return 1;
}

forward OnQueryFinish(resultid, extraid, ConnectionHandle);
public OnQueryFinish(resultid, extraid, ConnectionHandle)
{
	new Rows, Fields;

    new tmp[130], strMot[256], strdat[126], stringadm[24];

	if(resultid != THREAD_NO_RESULT)
	{
		cache_get_data(Rows, Fields);
	}
	switch(resultid)
	{
		case THREAD_LOAD_BANIDO:
		{
		    if(Rows)
		    {

		        cache_get_field_content(0, "Motivo", tmp);
	        	format(strMot, 256, "%s", tmp);

    			cache_get_field_content(0, "Admin", tmp);
				format(stringadm, 24, "%s", tmp);

				cache_get_field_content(0, "Data", tmp);
	        	format(strdat, 24, "%s", tmp);

				Dialog_Show(extraid, ShowBan, DIALOG_STYLE_MSGBOX, "Informativo de banimento", "Lamentamos informar que sua conta foi banida do Capital Paulista Full Roleplay.\n\nNome: %s\nAdministrador: %s\nMotivo: %s\nData e hora: %s\n\nCaso queira recorrer, poste seu Ban Appeal em nosso fórum.", "Fechar", "", PlayerName(extraid,0), stringadm, strMot, strdat);
				
				SetTimerEx("TimerKick", 1000, 0, "d", extraid);
			}
			else
			{
		    	Dialog_Show(extraid, ShowBan, DIALOG_STYLE_MSGBOX, "Informativo de banimento", "Lamentamos informar que sua conta foi banida do Capital Paulista Full Roleplay.\n\nNome: %s\nAdministrador: Desconhecido\nMotivo: Deconhecido\nData e hora: Desconhecida\n\nCaso queira recorrer, poste seu Ban Appeal em nosso fórum.", "Fechar", "", PlayerName(extraid,0), stringadm, strMot, strdat);
				SetTimerEx("TimerKick", 1000, 0, "d", extraid);
			}
		}
	}
	return 1;
}


forward SalvarPlayer(playerid);
public SalvarPlayer(playerid)
{
	if (PlayerInfo[playerid][pLogado] == 1 && PlayerInfo[playerid][pRegistrado] == 1 && (gettime() > AcabouDeLogar[playerid]))
	{
	    SalvandoConta[playerid] = 1;
		static query[1026];

		if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && TrocandoInterior[playerid] == 9999)
		{
		    PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
		    PlayerInfo[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

		    GetPlayerPos(playerid, PlayerInfo[playerid][pPos][0], PlayerInfo[playerid][pPos][1], PlayerInfo[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos][3]);

		    GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
		    GetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);
		}

		new hour, mins, sec;
		new d,m,y;
		new DataSalvar[32];
		getdate(y,m,d);
		gettime(hour,mins,sec);

        new strh[24], hourstr[4], minstr[4], secstr[4];

		if(hour < 10) { format(hourstr,sizeof(hourstr),"0%d",hour); } else { format(hourstr,sizeof(hourstr),"%d",hour); }
		if(mins < 10) { format(minstr,sizeof(minstr),"0%d",mins); } else { format(minstr,sizeof(minstr),"%d",mins); }
		if(sec < 10) { format(secstr,sizeof(secstr),"0%d",sec); } else { format(secstr,sizeof(secstr),"%d",sec); }
		format(strh,sizeof(strh),"%s:%s:%s",hourstr,minstr,secstr);
		format(DataSalvar,sizeof(DataSalvar),"%d-%d-%d - %s",d,m,y,strh);

		format(PlayerInfo[playerid][pUltimoLogin], 50, "%s", DataSalvar);

		new biz = PlayerInfo[playerid][pEntrouEmpresa];
		if(biz != -1)
		{
			if( EmpInfo[biz][eTipo] == EMP_TIPO_CONCE_5 || EmpInfo[biz][eTipo] == EMP_TIPO_CONCE_0 || EmpInfo[biz][eTipo] == EMP_TIPO_CONCE_1 || EmpInfo[biz][eTipo] == EMP_TIPO_CONCE_2 || EmpInfo[biz][eTipo] == EMP_TIPO_CONCE_3 || EmpInfo[biz][eTipo] == EMP_TIPO_CONCE_4 || EmpInfo[biz][eTipo] == EMP_TIPO_CONCE_3)
		 	{
		 	    PlayerInfo[playerid][pInterior] = 0;
		 	    PlayerInfo[playerid][pWorld] = 0;
		 	    PlayerInfo[playerid][pPos][0] = EmpInfo[biz][eExX];
		 	    PlayerInfo[playerid][pPos][1] = EmpInfo[biz][eExY];
		 	    PlayerInfo[playerid][pPos][2] = EmpInfo[biz][eExZ];
		   	}
		}

		format(query, sizeof(query), "UPDATE `accounts` SET `Level` = '%d', `Gender` = '%d', `Birthdate` = '%s', `Admin` = '%d', `Skin` = '%d', `Interior` = '%d', `World` = '%d', `registrado` = '%d', `Tutorial` = '%d' WHERE `ID` = '%d'",
   			PlayerInfo[playerid][pLevel],
			PlayerInfo[playerid][pGender],
			PlayerInfo[playerid][pAge],
			PlayerInfo[playerid][pAdmin],
			PlayerInfo[playerid][pSkin],
			PlayerInfo[playerid][pInterior],
			PlayerInfo[playerid][pWorld],
   			PlayerInfo[playerid][pRegistrado],
			PlayerInfo[playerid][pTutorial],
		    PlayerInfo[playerid][pID]
		);
		mysql_function_query(Pipeline, query, false, "", "");

		format(query, sizeof(query), "UPDATE `accounts` SET `EntrouCasa` = '%d', `Grana` = '%d', `GranaSuja` = '%d', `Ouro` = '%d', `Prata` = '%d', `Bronze` = '%d', `Morto` = '%d', `UltimoLogin` = '%s', `EntrouComplexo` = '%d', `EntrouEmpresa` = '%d', `pEntrouGaragem` = '%d' WHERE `ID` = '%d'",
			PlayerInfo[playerid][pEntrouCasa],
			PlayerInfo[playerid][pGrana],
			PlayerInfo[playerid][pGranaSuja],
			PlayerInfo[playerid][pOuro],
			PlayerInfo[playerid][pPrata],
			PlayerInfo[playerid][pBronze],
			PlayerInfo[playerid][pMorto],
			PlayerInfo[playerid][pUltimoLogin],
			PlayerInfo[playerid][pEntrouComplexo],
			PlayerInfo[playerid][pEntrouEmpresa],
			PlayerInfo[playerid][pEntrouGaragem],
		    PlayerInfo[playerid][pID]
		);
		mysql_function_query(Pipeline, query, false, "", "");

		format(query, sizeof(query), "UPDATE `accounts` SET `PosX` = '%.4f', `PosY` = '%.4f', `PosZ` = '%.4f', `PosA` = '%.4f', `Health` = '%.4f', `Armour` = '%.4f' WHERE `ID` = '%d'",
			PlayerInfo[playerid][pPos][0],
			PlayerInfo[playerid][pPos][1],
			PlayerInfo[playerid][pPos][2],
			PlayerInfo[playerid][pPos][3],
			PlayerInfo[playerid][pHealth],
			PlayerInfo[playerid][pArmour],
		    PlayerInfo[playerid][pID]
		);
		mysql_function_query(Pipeline, query, false, "", "");

		format(query, sizeof(query), "UPDATE `accounts` SET `Job`='%d',`PecasMecanicas0`='%d',`PecasMecanicas1`='%d',`PecasMecanicas2`='%d',`PecasMecanicas3`='%d',`PecasMecanicas4`='%d',`PecasMecanicas5`='%d',`PecasMecanicas6`='%d',`TempoPLD`='%d',`ToolKit`='%d',`ArrombarDNV`='%d',`Galao`='%d',`ArmaMao`= '%d',`ChaveEmprestada`='%d', `Fac` = '%d',`pExecComando` = '%d', `pBanco` = '%d', `pHealthMax` = '%0.4f', `pChatStyle` = '%d', `pPontos` = '%d', `pKickAll`='%d', `pArrombarDNV_C`='%d' WHERE `ID` = '%d'",
            PlayerInfo[playerid][pJob],
			PlayerInfo[playerid][pPecasMecanicas][0],
			PlayerInfo[playerid][pPecasMecanicas][1],
			PlayerInfo[playerid][pPecasMecanicas][2],
			PlayerInfo[playerid][pPecasMecanicas][3],
			PlayerInfo[playerid][pPecasMecanicas][4],
			PlayerInfo[playerid][pPecasMecanicas][5],
			PlayerInfo[playerid][pPecasMecanicas][6],
			PlayerInfo[playerid][pTempoPLD],
			PlayerInfo[playerid][pToolKit],
			PlayerInfo[playerid][pArrombarDNV],
			PlayerInfo[playerid][pGalao],
			PlayerInfo[playerid][pArmaMao],
			PlayerInfo[playerid][pChaveEmprestada],
			PlayerInfo[playerid][pFac],
			PlayerInfo[playerid][pExecComando],
			PlayerInfo[playerid][pBanco],
			PlayerInfo[playerid][pHealthMax],
			PlayerInfo[playerid][pChatStyle],
			PlayerInfo[playerid][pPontos],
			PlayerInfo[playerid][pKickAll],
			PlayerInfo[playerid][pArrombarDNV_C],
		    PlayerInfo[playerid][pID]
		);
		mysql_function_query(Pipeline, query, false, "", "");

		format(query, sizeof(query), "UPDATE `accounts` SET `Mun9mm`='%d', `Bomba`='%d', `C4`='%d', `TNT`='%d', `Mun556`='%d', `MunCart`='%d', `Mun127`='%d', `pSlot1`='%d', `pSlot2`='%d', `pSlot3`='%d', `pSlot4`='%d', `pSlot5`='%d', `pSlot1a`='%d', `pSlot2a`='%d', `pSlot3a`='%d', `pSlot4a`='%d', `pSlot5a`='%d', `FacCargo`='%d', `pEmServico`='%d', `pBanAll`='%d', `pBanido`='%d', `pWalkStyle`='%d', `pDoador`='%d' WHERE `ID` = '%d'",
            PlayerInfo[playerid][pMun9mm],
			PlayerInfo[playerid][pBomba],
			PlayerInfo[playerid][pC4],
			PlayerInfo[playerid][pTNT],
			PlayerInfo[playerid][pMun556],
			PlayerInfo[playerid][pMunCart],
			PlayerInfo[playerid][pMun127],
			PlayerInfo[playerid][pSlot1],
			PlayerInfo[playerid][pSlot2],
			PlayerInfo[playerid][pSlot3],
			PlayerInfo[playerid][pSlot4],
			PlayerInfo[playerid][pSlot5],
			PlayerInfo[playerid][pSlot1a],
			PlayerInfo[playerid][pSlot2a],
			PlayerInfo[playerid][pSlot3a],
			PlayerInfo[playerid][pSlot4a],
			PlayerInfo[playerid][pSlot5a],
			PlayerInfo[playerid][pFacCargo],
			PlayerInfo[playerid][pEmServico],
			PlayerInfo[playerid][pBanAll],
			PlayerInfo[playerid][pBanido],
			PlayerInfo[playerid][pWalkStyle],
			PlayerInfo[playerid][pDoador],
		    PlayerInfo[playerid][pID]
			
		);
	    mysql_function_query(Pipeline, query, false, "", "");

        format(query, sizeof(query), "UPDATE `accounts` SET `pPayDay` = '%d', `pDutySkin` = '%d', `pColde` = '%d', `pColdreA` = '%d', `pArmario1` = '%d', `pArmario2` = '%d', `pArmario3` = '%d', `pArmario4` = '%d', `pArmario5` = '%d' WHERE `ID` = '%d'",
			PlayerInfo[playerid][pPayDay],
			PlayerInfo[playerid][pDutySkin],
			PlayerInfo[playerid][pColde],
			PlayerInfo[playerid][pColdreA],
			PlayerInfo[playerid][pArmario1],
			PlayerInfo[playerid][pArmario2],
			PlayerInfo[playerid][pArmario3],
			PlayerInfo[playerid][pArmario4],
			PlayerInfo[playerid][pArmario5],
		    PlayerInfo[playerid][pID]
		);
		mysql_function_query(Pipeline, query, false, "", "");

    	format(query, sizeof(query), "UPDATE `accounts` SET `pArmario6` = '%d', `pArmario7` = '%d', `pArmario8` = '%d', `pArmario9` = '%d', `pArmario10` = '%d', `baterias` = '%d' WHERE `ID` = '%d'",
			PlayerInfo[playerid][pArmario6],
			PlayerInfo[playerid][pArmario7],
			PlayerInfo[playerid][pArmario8],
			PlayerInfo[playerid][pArmario9],
			PlayerInfo[playerid][pArmario10],
			PlayerInfo[playerid][pBateria],
		    PlayerInfo[playerid][pID]
		);
		mysql_function_query(Pipeline, query, false, "", "");

		format(query, sizeof(query), "UPDATE `accounts` SET `pArm9mm` = '%d', `pArm556` = '%d', `pArmCart` = '%d', `pArm127` = '%d', `pPrisao` = '%d', `pTemPreso` = '%d', `pTester` = '%d', `pAceitoSos` = '%d', `pNomeOOC` = '%s', `pSalarios` = '%d' WHERE `ID` = '%d'",
   			PlayerInfo[playerid][pArm9mm],
			PlayerInfo[playerid][pArm556],
			PlayerInfo[playerid][pArmCart],
			PlayerInfo[playerid][pArm127],
			PlayerInfo[playerid][pPrisao],
			PlayerInfo[playerid][pTemPreso],
			PlayerInfo[playerid][pTester],
			PlayerInfo[playerid][pAceitoSos],
			PlayerInfo[playerid][pNomeOOC],
			PlayerInfo[playerid][pSalarios],
		    PlayerInfo[playerid][pID]
		);
		mysql_function_query(Pipeline, query, false, "", "");

        format(query, sizeof(query), "UPDATE `accounts` SET `pDamage0` = '%s', `pDamage1` = '%s', `pDamage2` = '%s', `pDamage3` = '%s', `pDamage4` = '%s' WHERE `ID` = '%d'",
			PlayerInfo[playerid][pDamage0],
			PlayerInfo[playerid][pDamage1],
			PlayerInfo[playerid][pDamage2],
			PlayerInfo[playerid][pDamage3],
			PlayerInfo[playerid][pDamage4],
			PlayerInfo[playerid][pID]
		);
		mysql_function_query(Pipeline, query, false, "", "");

		format(query, sizeof(query), "UPDATE `accounts` SET `pDamage5` = '%s', `pDamage6` = '%s', `pDamage7` = '%s', `pDamage8` = '%s', `pDamage9` = '%s' WHERE `ID` = '%d'",
			PlayerInfo[playerid][pDamage5],
			PlayerInfo[playerid][pDamage6],
			PlayerInfo[playerid][pDamage7],
			PlayerInfo[playerid][pDamage8],
			PlayerInfo[playerid][pDamage9],
			PlayerInfo[playerid][pID]
		);
		mysql_function_query(Pipeline, query, false, "", "");

		format(query, sizeof(query), "UPDATE `accounts` SET `pDamage15` = '%s', `pDamage16` = '%s', `pDamage17` = '%s', `pDamage18` = '%s', `pDamage19` = '%s' WHERE `ID` = '%d'",
			PlayerInfo[playerid][pDamage15],
			PlayerInfo[playerid][pDamage16],
			PlayerInfo[playerid][pDamage17],
			PlayerInfo[playerid][pDamage18],
			PlayerInfo[playerid][pDamage19],
			PlayerInfo[playerid][pID]
		);
		mysql_function_query(Pipeline, query, false, "", "");

		format(query, sizeof(query), "UPDATE `accounts` SET `pDamage15` = '%s', `pDamage16` = '%s', `pDamage17` = '%s', `pDamage18` = '%s', `pDamage19` = '%s' WHERE `ID` = '%d'",
			PlayerInfo[playerid][pDamage15],
			PlayerInfo[playerid][pDamage16],
			PlayerInfo[playerid][pDamage17],
			PlayerInfo[playerid][pDamage18],
			PlayerInfo[playerid][pDamage19],
			PlayerInfo[playerid][pID]
		);
		mysql_function_query(Pipeline, query, false, "", "");

		/*format(query,sizeof(query),"UPDATE `accounts` SET `pDoadorTempo`='%d' WHERE `ID` = '%d'",
			PlayerInfo[playerid][pDoadorTempo],
			PlayerInfo[playerid][pID]);
		mysql_function_query(Pipeline, query, false, "", "");*/

		format(query,sizeof(query),"UPDATE `accounts` SET `pChangeNames`='%d', `pSavings`='%d', `pForca`='%d', `pRadio`='%d', `pRadioChan`='%d', `pRadioChan2`='%d', `pMascara`='%d', `pMascaraU`='%d', `pMascID`='%d',`pNomeP`='%s',`pAvisos`='%d',`pAviso1`='%s',`pAviso2`='%s',`pAviso2`='%s',`pMenosDanoTiro`='%d',`pDrogaTime`='%d',`pTremorAtirar`='%d',`pUsouDroga`='%d',`pSkillTiro`='%d',`pDoadorTempo`='%d' WHERE `ID` = '%d'",
		    PlayerInfo[playerid][pChangeNames],
		    PlayerInfo[playerid][pSavings],
		    PlayerInfo[playerid][pForca],
		    PlayerInfo[playerid][pRadio],
		    PlayerInfo[playerid][pRadioChan],
            PlayerInfo[playerid][pRadioChan2],
		    PlayerInfo[playerid][pMascara],
		    PlayerInfo[playerid][pMascaraU],
		    PlayerInfo[playerid][pMascID],
		    PlayerInfo[playerid][pNomeP],
  			PlayerInfo[playerid][pAvisos],
			PlayerInfo[playerid][pAviso1],
			PlayerInfo[playerid][pAviso2],
			PlayerInfo[playerid][pAviso3],
			PlayerInfo[playerid][pMenosDanoTiro],
			PlayerInfo[playerid][pDrogaTime],
			PlayerInfo[playerid][pTremorAtirar],
			PlayerInfo[playerid][pUsouDroga],
			PlayerInfo[playerid][pSkillTiro],
			PlayerInfo[playerid][pDoadorTempo],
			PlayerInfo[playerid][pID]);
		mysql_function_query(Pipeline, query, false, "", "");

		format(query,sizeof(query),"UPDATE `accounts` SET `pColdreX`='%f', `pColdreY`='%f', `pColdreZ`='%f', `pColdreRX`='%f', `pColdreRY`='%f', `pColdreRZ`='%f',`pColdreBone`='%d',`pDriveLic`='%d',`pWepLic`='%d',`pFlyLic`='%d',`pTruckLic`='%d', `pCigarros`='%d', `pSavingsGerando`='%d', `pLutaStyle`='%d', `pBoombox`='%d', `pCasasDeletadas`='%d', `pJobTempo`='%d', `pPlacas`='%d',`pRaspador`='%d', `pJobInPd`='%d' WHERE `ID` = '%d'",
			PlayerInfo[playerid][pColdreX],
			PlayerInfo[playerid][pColdreY],
			PlayerInfo[playerid][pColdreZ],
			PlayerInfo[playerid][pColdreRX],
			PlayerInfo[playerid][pColdreRY],
			PlayerInfo[playerid][pColdreRZ],
			PlayerInfo[playerid][pColdreBone],
			PlayerInfo[playerid][pDriveLic],
			PlayerInfo[playerid][pWepLic],
			PlayerInfo[playerid][pFlyLic],
			PlayerInfo[playerid][pTruckLic],
			PlayerInfo[playerid][pCigarros],
			PlayerInfo[playerid][pSavingsGerando],
			PlayerInfo[playerid][pLutaStyle],
			PlayerInfo[playerid][pBoombox],
			PlayerInfo[playerid][pCasasDeletadas],
			PlayerInfo[playerid][pJobTempo],
			PlayerInfo[playerid][pPlacas],
			PlayerInfo[playerid][pRaspador],
			PlayerInfo[playerid][pJobInPd],
			PlayerInfo[playerid][pID]);
		mysql_function_query(Pipeline, query, false, "", "");

		format(query,sizeof(query),"UPDATE `accounts` SET `pCelularModel`='%d', `Celular`='%d', `CelularL`='%d', `CelularRing`='%d', `CelularPlano`='%d', `CelularTPlano`='%d', `CelMinutos`='%d', `CelSMSs`='%d', `CelTotalPD`='%d' WHERE `ID` = '%d'",
			CelularData[playerid][celModelo],
			CelularData[playerid][celNumero],
			CelularData[playerid][celModo],
			CelularData[playerid][celRingTone],
			CelularData[playerid][celPlano],
			CelularData[playerid][celTPlano],
			CelularData[playerid][celMinutos],
			CelularData[playerid][celSMSs],
			CelularData[playerid][celTotalPD],
			PlayerInfo[playerid][pID]);
	    mysql_function_query(Pipeline, query, false, "", "");

		format(query,sizeof(query),"UPDATE `accounts` SET `pHabDrug`='%d',`pArmasResetadas`='%d', `AjudaInicial`='%d', `pTomouAlgumTiro`='%d', `pTomouTiroPesado`='%d', `pTomouTiroBrancas`='%d', `pConvenio`='%d', `pTempoMorto`='%d', `tempodesman`='%d',`pAjudaInicialDim`='%d', `FabricouDroga`='%d' WHERE `ID` = '%d'",
			PlayerInfo[playerid][pHabDrug],
			PlayerInfo[playerid][pArmasResetadas],
			PlayerInfo[playerid][pAjudaInicial],
			PlayerInfo[playerid][pTomouAlgumTiro],
			PlayerInfo[playerid][pTomouTiroPesado],
    		PlayerInfo[playerid][pTomouTiroBrancas],
    		PlayerInfo[playerid][pConvenio],
			PlayerInfo[playerid][pTempoMorto],
			OutrasInfos[playerid][oDesmancheTime],
			PlayerInfo[playerid][pAjudaInicialDim],
			PlayerInfo[playerid][pFabricouD],
			PlayerInfo[playerid][pID]);
		mysql_function_query(Pipeline, query, false, "", "");

		format(query,sizeof(query),"UPDATE `accounts` SET `Etnia` = '%d', `Olhos` = '%d', `Peso` = '%d', `Altura` = '%d', `Cabelo` = '%d', `Fome` = '%d', `Sede` = '%d', `FactionTeam` = '%d', `BanTeam` = '%d', `RefundTeam` = '%d', `PropertyTeam` = '%d', `CortaRem` = '%d', `pAlgemado` = '%d', `trafico`='%d', `dog`='%d' WHERE `ID` = '%d'",
			PlayerInfo[playerid][pEtnia],
			PlayerInfo[playerid][pOlhos],
			PlayerInfo[playerid][pPeso],
			PlayerInfo[playerid][pAltura],
			PlayerInfo[playerid][pCabelo],
			PlayerInfo[playerid][pFome],
			PlayerInfo[playerid][pSede],
            PlayerInfo[playerid][pFactionTeam],
            PlayerInfo[playerid][pBanTeam],
            PlayerInfo[playerid][pRefundTeam],
            PlayerInfo[playerid][pPropertyTeam],
			PlayerInfo[playerid][pCortaRem],
			OutrasInfos[playerid][oAlgemado],
			PlayerInfo[playerid][pTrafico],
			PetData[playerid][petModelID],
            PlayerInfo[playerid][pID]);
		mysql_function_query(Pipeline, query, false, "", "");


		dd_Drogas(playerid);

		TempoParaSalvar[playerid] = 0;
  		SalvandoConta[playerid] = 0;
  		printf("Jogador %s - Personagem salvo com sucesso.", GetName(playerid));
	}
	else {

		SCM(playerid, -1, "ERRO #44444 - Poste bug report");
		format(string, sizeof string, "Logado: %d | Registrado: %d | Acabou de Logar: %d / Gettime: %d", PlayerInfo[playerid][pLogado], PlayerInfo[playerid][pRegistrado], AcabouDeLogar[playerid], gettime());
  		SCM(playerid, -1, string);

	}
	return 1;
}

forward TogSQLstatus(playerid, status);
public TogSQLstatus(playerid, status)
{
	new query[256];
	if(status == 1)
	{
		format(query,sizeof(query),"UPDATE `accounts` SET `pLogado`='1' WHERE `ID` = '%d'", PlayerInfo[playerid][pID]);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);
	}
	else
	{
	    format(query,sizeof(query),"UPDATE `accounts` SET `pLogado`='0' WHERE `ID` = '%d'", PlayerInfo[playerid][pID]);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);
	}
	return 1;
}

CMD:forum(playerid, params[])
{
    SCM(playerid, COLOR_LIGHTRED, "[CP:RPP] Fórum do servidor: https://forum.cp-frp.com.br.com");
	return 1;
}

CMD:verstats(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 1) return 1;
    new target;
    if( sscanf( params, "d", target ) ) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /verstats [playerid]");
    else
    {
    	VerStats(target, playerid);
    	return 1;
	}
}

CMD:fomesede(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    VerFome(playerid, playerid);
    return 1;
}

CMD:stats(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    VerStats(playerid, playerid);
	return 1;
}

forward VerStats(playerid, targetid);
public VerStats(playerid, targetid)
{
    if(!PlayerInfo[targetid][pLogado]) return 1;
	new str_gen[32];
	if(PlayerInfo[playerid][pGender] == 1) format(str_gen, 32, "Masculino");
	else format(str_gen, 32, "Feminino");
	new str_job[32],str_Fac[32], Float:Health, donate[32], radio[16], boombox[16], galao[16], numeracao1[32];
	GetPlayerHealth(playerid, Health);

	switch(PlayerInfo[playerid][pJob])
	{
	    case JOB_MECANICO: format(str_job, 32, "Mêcanico");
		case JOB_CAMINHONEIRO: format(str_job, 32, "Caminhoneiro");
		case JOB_TREINADOR: format(str_job, 32, "Treinador");
		case JOB_TAXISTA: format(str_job, 32, "Taxista");
		case JOB_FALSIFICADOR: format(str_job, 32, "Falsificador");
		case JOB_LIXEIRO: format(str_job, 32, "Lixeiro");
		case JOB_HOTDOG: format(str_job, 32, "Vendedor de HotDog");
		case JOB_DESMANCHE: format(str_job, 32, "Mêcanico Ilegal");
		case JOB_PESCADOR: format(str_job, 32, "Pescador");
		case JOB_MOTOBOY: format(str_job, 32, "Motoboy");
		case JOB_LAVAGEM: format(str_job, 32, "Lavador de dinheiro");
		case JOB_HACK: format(str_job, 32, "Hacker");
		case JOB_MOTORISTA: format(str_job, 32, "Motorista de onibus");

	    default: format(str_job, 32, "Desempregado");
	}

	switch(PlayerInfo[playerid][pDoador])
	{
	    case 1: format(donate, 32, "Bronze");
		case 2: format(donate, 32, "Prata");
		case 3: format(donate, 32, "Ouro");
	    default: format(donate, 32, "Nenhum");
	}

	switch(PlayerInfo[playerid][pRadio])
	{
	    case 0: format(radio, 16, "Não");
	    case 1: format(radio, 16, "Sim");
	    default: format(radio, 16, "Não");
	}

	switch(PlayerInfo[playerid][pBoombox])
	{
	    case 0: format(boombox, 16, "Não");
	    case 1: format(boombox, 16, "Sim");
	    default: format(boombox, 16, "Não");
	}

	switch(PlayerInfo[playerid][pGalao])
	{
	    case 0: format(galao, 16, "Não");
	    case 1: format(galao, 16, "Sim");
	    default: format(galao, 16, "Não");
	}
	if(ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaRaspada] == 0)
		format(numeracao1, 16, "%s",ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaNumeracao]);
  	else
	  	format(numeracao1, 16, "Raspada");

	new faccao = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	if(faccao == 0) format(str_Fac, 32, "Civil");
	else format(str_Fac, 32, "%s", FacInfo[faccao][fNome]);

	format(string, 256, "|____________________%s (PERSONAGEM ID: %d)____________________|", PlayerName(playerid,0), PlayerInfo[playerid][pID]);
	SendClientMessage(targetid, COLOR_LIGHTGREEN, string);
	format(string, 256, "| Personagem | Facção: [%d][%s] Cargo: [%s] Emprego: [%s] Celular: [%d]", faccao, str_Fac, GetPlayerCargo(playerid), str_job, CelularData[playerid][celNumero]);
    SendClientMessage(targetid, COLOR_ESPECIAL1, string);
	format(string, 256, "| Inventário | Rádio: [%s] Boombox: [%s] Galão: [%s]", radio, boombox, galao);
	SendClientMessage(targetid, COLOR_ESPECIAL2, string);
	format(string, 256, "| Armas | Arma primária: [%s] Munição: [%d] Numeração: [%d] | No corpo: [%s] Munição: [%d] Numeração: [%d]", GunNames[ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo], numeracao1, GunNames[ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo]], PlayerInfo[playerid][pColdreA], ArmaData[PlayerInfo[playerid][pColde]][ArmaNumeracao]);
	SendClientMessage(targetid, COLOR_ESPECIAL1, string);
	format(string, 256, "| Level | Level: [%d] Paycheck: [%d/60 min] Conta Premium: [%s]", PlayerInfo[playerid][pLevel], 60-PlayerInfo[playerid][pPayDay], donate);
	SendClientMessage(targetid, COLOR_ESPECIAL2, string);
	format(string, 256, "| Skill | Vida: [%.2f/%.2f] Colete: [%.2f/100] Força: [%d]", Health, PlayerInfo[playerid][pHealthMax], PlayerInfo[playerid][pArmour], PlayerInfo[playerid][pForca]);
	SendClientMessage(targetid, COLOR_ESPECIAL1, string);
	format(string, 256, "| Financeiro | Dinheiro: [R$%d] Dinheiro Sujo: [R$%d] Banco: [R$%d] Savings: [R$%d] Rendimento dos Savings: [R$%d]", PlayerInfo[playerid][pGrana], PlayerInfo[playerid][pGranaSuja], PlayerInfo[playerid][pBanco], PlayerInfo[playerid][pSavings], PlayerInfo[playerid][pSavingsGerando]);
	SendClientMessage(targetid, COLOR_ESPECIAL2, string);
	format(string, 256, "| Outro | Genero: [%s]  D. de Nascimento: [%s] Admin: [%d] Nome OOC: [%s]", str_gen, PlayerInfo[playerid][pAge], PlayerInfo[playerid][pAdmin], PlayerInfo[playerid][pNomeOOC]);
	SendClientMessage(targetid, COLOR_ESPECIAL1, string);
	format(string, 256, "|____________________%s____________________|", PlayerName(playerid,0));
	SendClientMessage(targetid, COLOR_LIGHTGREEN, string);
	return 1;
}

forward createHudRadio(playerid);
public createHudRadio(playerid)
{
	RadioComunicador[playerid][0] = CreatePlayerTextDraw(playerid, 471.000, 333.000, "mdl-2007:radio");
	PlayerTextDrawTextSize(playerid, RadioComunicador[playerid][0], 53.000, 117.000);
	PlayerTextDrawAlignment(playerid, RadioComunicador[playerid][0], 1);
	PlayerTextDrawColor(playerid, RadioComunicador[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, RadioComunicador[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, RadioComunicador[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, RadioComunicador[playerid][0], 255);
	PlayerTextDrawFont(playerid, RadioComunicador[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, RadioComunicador[playerid][0], 1);


	new RadioString[32];
	format(RadioString, sizeof(RadioString), "%d", PlayerInfo[playerid][pRadioChan]);
	RadioComunicador[playerid][1] = CreatePlayerTextDraw(playerid, 487.000, 420.000, RadioString);
    PlayerTextDrawLetterSize(playerid, RadioComunicador[playerid][1], 0.300, 1.500);
    PlayerTextDrawAlignment(playerid, RadioComunicador[playerid][1], 1);
    PlayerTextDrawColor(playerid, RadioComunicador[playerid][1], -1);
    PlayerTextDrawSetShadow(playerid, RadioComunicador[playerid][1], 1);
    PlayerTextDrawSetOutline(playerid, RadioComunicador[playerid][1], 1);
    PlayerTextDrawBackgroundColor(playerid, RadioComunicador[playerid][1], 150);
    PlayerTextDrawFont(playerid, RadioComunicador[playerid][1], 2);
    PlayerTextDrawSetProportional(playerid, RadioComunicador[playerid][1], 1);

}

forward updateTextDrawCanalRadio(playerid);
public updateTextDrawCanalRadio(playerid){
	new RadioString[126];
	format(RadioString, sizeof(RadioString), "%d", PlayerInfo[playerid][pRadioChan]);

	PlayerTextDrawSetString(playerid, RadioComunicador[playerid][1], RadioString); 

}
forward updateTextDrawFomeSede(playerid);
public updateTextDrawFomeSede(playerid){
	new fomeString[32];
	new sedeString[32];

	format(fomeString, sizeof(fomeString), "%d", PlayerInfo[playerid][pFome]);
	format(sedeString, sizeof(sedeString), "%d", PlayerInfo[playerid][pSede]);

	PlayerTextDrawSetString (playerid, FomeSede[playerid][2], fomeString) ; 
	PlayerTextDrawSetString (playerid, FomeSede[playerid][3], sedeString) ; 
}

stock createDisplayFomeSede(playerid){
		FomeSede[playerid][0] = CreatePlayerTextDraw(playerid, -34.000, 170.000, "mdl-2007:fome");
		PlayerTextDrawTextSize(playerid, FomeSede[playerid][0], 90.000, 90.000);
		PlayerTextDrawAlignment(playerid, FomeSede[playerid][0], 1);
		PlayerTextDrawColor(playerid, FomeSede[playerid][0], -1);
		PlayerTextDrawSetShadow(playerid, FomeSede[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, FomeSede[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, FomeSede[playerid][0], 255);
		PlayerTextDrawFont(playerid, FomeSede[playerid][0], 4);
		PlayerTextDrawSetProportional(playerid, FomeSede[playerid][0], 1);

		FomeSede[playerid][1] = CreatePlayerTextDraw(playerid, -34.000, 205.000, "mdl-2007:sede");
		PlayerTextDrawTextSize(playerid, FomeSede[playerid][1], 90.000, 90.000);
		PlayerTextDrawAlignment(playerid, FomeSede[playerid][1], 1);
		PlayerTextDrawColor(playerid, FomeSede[playerid][1], -1);
		PlayerTextDrawSetShadow(playerid, FomeSede[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, FomeSede[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, FomeSede[playerid][1], 255);
		PlayerTextDrawFont(playerid, FomeSede[playerid][1], 4);
		PlayerTextDrawSetProportional(playerid, FomeSede[playerid][1], 1);

		new fomeString[32];
		format(fomeString, sizeof(fomeString), "%d", PlayerInfo[playerid][pFome]);
		FomeSede[playerid][2] = CreatePlayerTextDraw(playerid, 5.000, 185.000, fomeString);
		PlayerTextDrawLetterSize(playerid, FomeSede[playerid][2], 0.240, 0.999);
		PlayerTextDrawAlignment(playerid, FomeSede[playerid][2], 1);
		PlayerTextDrawColor(playerid, FomeSede[playerid][2], -1);
		PlayerTextDrawSetShadow(playerid, FomeSede[playerid][2], 1);
		PlayerTextDrawSetOutline(playerid, FomeSede[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, FomeSede[playerid][2], 150);
		PlayerTextDrawFont(playerid, FomeSede[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, FomeSede[playerid][2], 1);

		new sedeString[32];
		format(sedeString, sizeof(sedeString), "%d", PlayerInfo[playerid][pSede]);
		FomeSede[playerid][3] = CreatePlayerTextDraw(playerid, 4.000, 221.000, sedeString);
		PlayerTextDrawLetterSize(playerid, FomeSede[playerid][3], 0.240, 0.999);
		PlayerTextDrawAlignment(playerid, FomeSede[playerid][3], 1);
		PlayerTextDrawColor(playerid, FomeSede[playerid][3], -1);
		PlayerTextDrawSetShadow(playerid, FomeSede[playerid][3], 1);
		PlayerTextDrawSetOutline(playerid, FomeSede[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, FomeSede[playerid][3], 150);
		PlayerTextDrawFont(playerid, FomeSede[playerid][3], 1);
		PlayerTextDrawSetProportional(playerid, FomeSede[playerid][3], 1);

}

forward VerFome(playerid, targetid);
public VerFome(playerid, targetid)
{
    if(!PlayerInfo[targetid][pLogado]) return 1;

    new str4[64];

    format(str4, 256, "|________________Fome e Sede________________|");
    SendClientMessage(targetid, COLOR_LIGHTGREEN, str4);
    format(str4, 256, "Fome: [%d] Sede: [%d]", PlayerInfo[playerid][pFome], PlayerInfo[playerid][pSede]);
    SendClientMessage(targetid, COLOR_ESPECIAL1, str4);
    format(str4, 256, "|________________________________|");
    SendClientMessage(targetid, COLOR_LIGHTGREEN, str4);
    return 1;
}

CMD:inv(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new StrArm[562];
	Menu_Armas[playerid][0] = 0;
	format(StrArm, sizeof(StrArm), "{007B00}Ver municões >>{FFFFFF}\nArmas:");
	if(PlayerInfo[playerid][pSlot1] > 0) format(StrArm, sizeof(StrArm), "%s\n1. %s [Munição:%d] [%d]", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo]], PlayerInfo[playerid][pSlot1a], ArmaData[PlayerInfo[playerid][pSlot1]][ArmaNumeracao]);
	    else format(StrArm, sizeof(StrArm), "%s\n1. Vazio", StrArm);
	if(PlayerInfo[playerid][pSlot2] > 0) format(StrArm, sizeof(StrArm), "%s\n2. %s [Munição:%d] [%d]", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo]], PlayerInfo[playerid][pSlot2a], ArmaData[PlayerInfo[playerid][pSlot2]][ArmaNumeracao]);
	    else format(StrArm, sizeof(StrArm), "%s\n2. Vazio", StrArm);
	if(PlayerInfo[playerid][pSlot3] > 0) format(StrArm, sizeof(StrArm), "%s\n3. %s [Munição:%d] [%d]", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo]], PlayerInfo[playerid][pSlot3a], ArmaData[PlayerInfo[playerid][pSlot3]][ArmaNumeracao]);
	    else format(StrArm, sizeof(StrArm), "%s\n3. Vazio", StrArm);
	if(PlayerInfo[playerid][pSlot4] > 0) format(StrArm, sizeof(StrArm), "%s\n4. %s [Munição:%d] [%d]", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo]], PlayerInfo[playerid][pSlot4a], ArmaData[PlayerInfo[playerid][pSlot4]][ArmaNumeracao]);
	    else format(StrArm, sizeof(StrArm), "%s\n4. Vazio", StrArm);
	if(PlayerInfo[playerid][pSlot5] > 0) format(StrArm, sizeof(StrArm), "%s\n5. %s [Munição:%d] [%d]", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo]], PlayerInfo[playerid][pSlot5a], ArmaData[PlayerInfo[playerid][pSlot5]][ArmaNumeracao]);
	    else format(StrArm, sizeof(StrArm), "%s\n5. Vazio", StrArm);
	Dialog_Show(playerid, Dialog_My_Armas, DIALOG_STYLE_LIST, "Minhas Armas", StrArm, "Selecionar", "Cancelar");
	return 1;
}

CMD:arma(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
	if(gettime() < FloodCMD[playerid]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Aguarde um segundo antes de usar um comando novamente.");
	if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");

    FloodCMD[playerid] = gettime()+2;

    new option[11], InvId;
	if(sscanf(params,"s[22]I(99)",option, InvId))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}SINTAXE:{FFFFFF}/arma [Opçõe: corpo / bone / pos(icionar)]");
		return 1;
	}
	else
	{
	    if(strcmp(option, "corpo", true) == 0)
		{
			if(PlayerInfo[playerid][pColde] == 0)
			{
			    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando em um veículo.");

			    if(PlayerInfo[playerid][pColdreBone] == 0) PlayerInfo[playerid][pColdreBone] = 1;

			    if(PlayerInfo[playerid][pArmaMao] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma em mãos.");

			    format(string, sizeof(string), "[Arma Corpo] Você colocou a sua %s com %d balas em seu corpo. (%d)", GunNames[ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaModelo]], GetPlayerAmmo(playerid),ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaNumeracao]);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

	  		  	PlayerInfo[playerid][pColdreA] = GetPlayerAmmo(playerid);
	    		PlayerInfo[playerid][pColde] = PlayerInfo[playerid][pArmaMao];
		    	AttachArmaCorpo(playerid, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaModelo], PlayerInfo[playerid][pColdreBone]);
		    	RemovePlayerAttachedObject(playerid, 0);
			    //========================================
			    DesarmandoPlayer[playerid] = 2;
				ResetPlayerWeapons(playerid);
				PlayerInfo[playerid][pArmaMao] = 0;
				RemovePlayerAttachedObject(playerid, 0);
				//========================================
			}
			else
			{
				if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando em um veículo.");

				if(PlayerInfo[playerid][pArmaMao] != 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
			    PlayerInfo[playerid][pArmaMao] = PlayerInfo[playerid][pColde];

			    format(string, sizeof(string), "[Arma Corpo] Você retirou a sua %s com %d balas em seu corpo. (%d)", GunNames[ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaModelo]], PlayerInfo[playerid][pColdreA],ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaNumeracao]);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

			    if(ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaExtra] != 0) SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaRGB]);
			    else SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaModelo]], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaRGB]);

			    GivePlayerWeapon(playerid, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaModelo], PlayerInfo[playerid][pColdreA]);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pColdreA];
			    RemovePlayerAttachedObject(playerid, 2);
			    PlayerInfo[playerid][pColde] = 0;
			    PlayerInfo[playerid][pColdreA] = 0;
			}
		}
		else if(strcmp(option, "bone", true) == 0)
		{
			if(PlayerInfo[playerid][pColde] != 0)
			{
			    Dialog_Show(playerid, DIALOG_BONE_ARMAC, DIALOG_STYLE_LIST, "Editar Bone", "Espinha\nCabeça\nBraço Esquerdo\nBraço Direito\nMão Esquerda\nMão Direita\nCoxa Esquerda\nCoxa Direta\nPé Esquerdo\nPé Direito\nPanturrilha Direta\nPanturrilha Esquerda\nAntebraço Direito\nAntebraço Direito\nClavicula Esquerda\nClavicula Direta\nPescoço\nMandibula", "Salvar", "Cancelar");
			}
			else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma no corpo.");
		}
		else if(strcmp(option, "pos", true) == 0 || strcmp(option, "posicionar", true) == 0)
		{
			if(PlayerInfo[playerid][pColde] != 0)
			{
			    OutrasInfos[playerid][oEditandoArmaC] = 1;
				EditAttachedObject(playerid, 2);
			}
			else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma no corpo.");
		}
	}
	return 1;
}

Dialog:DIALOG_BONE_ARMAC(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
	    RemovePlayerAttachedObject(playerid, PlayerInfo[playerid][pColdreBone]);

        PlayerInfo[playerid][pColdreBone] = (listitem+1);
        SCM(playerid, COLOR_LIGHTGREEN, "Você alterou o bone de sua arma.");

		AttachArmaCorpo(playerid, ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo], PlayerInfo[playerid][pColdreBone]);
	}
	return 1;
}

forward AttachArmaCorpo(playerid, armaid, bone);
public AttachArmaCorpo(playerid, armaid, bone)
{
	if(PlayerInfo[playerid][pColdreX] != 0 && PlayerInfo[playerid][pColdreY] != 0 && PlayerInfo[playerid][pColdreZ] != 0)
	{
	    SetPlayerAttachedObject(playerid, 2, GunObjects[armaid], bone, PlayerInfo[playerid][pColdreX], PlayerInfo[playerid][pColdreY], PlayerInfo[playerid][pColdreZ], PlayerInfo[playerid][pColdreRX], PlayerInfo[playerid][pColdreRY], PlayerInfo[playerid][pColdreRZ]);
	}
	else
	{
		switch(armaid)
		{
		    case 3:
			{
			    if(ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaExtra] != 0) SetPlayerAttachedObject(playerid, 2, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaExtra], bone, -0.1500, 0.1239, 0.0859, 0, 0, 0.0000, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaRGB]);
		    	else SetPlayerAttachedObject(playerid, 2, GunObjects[armaid], bone, -0.1500, 0.1239, 0.0859, -99.8999, 68.2999, 0.0000, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaRGB]);
			}
		    case 22: SetPlayerAttachedObject(playerid, 2, GunObjects[armaid], bone, -0.1790, -0.0349, 0.1049, -101.1000, 0.0000, 0.0000, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaRGB]);
		    case 23: SetPlayerAttachedObject(playerid, 2, GunObjects[armaid], bone, -0.1790, -0.0349, 0.1049, -101.1000, 0.0000, 0.0000, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaRGB]);
		    case 24: SetPlayerAttachedObject(playerid, 2, GunObjects[armaid], bone, -0.1790, -0.0349, 0.1049, -101.1000, 0.0000, 0.0000, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaRGB]);
			case 25: SetPlayerAttachedObject(playerid, 2, GunObjects[armaid], bone, -0.2539, -0.1229, 0.0000, 0.0000, 0.0000, 3.1000, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaRGB]);
			case 28: SetPlayerAttachedObject(playerid, 2, GunObjects[armaid], bone, -0.1790, -0.0349, 0.1049, -101.1000, 0.0000, 0.0000, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaRGB]);
			//case 29: SetPlayerAttachedObject(playerid, 2, GunObjects[armaid], bone, 0.1040, 0.1069, 0.1740, 4.2999, 145.4999, 23.5000);
			case 29: SetPlayerAttachedObject(playerid, 2, GunObjects[armaid], bone, -0.2539, -0.1229, 0.0000, 0.0000, 0.0000, 3.1000, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaRGB]);
			case 30: SetPlayerAttachedObject(playerid, 2, GunObjects[armaid], bone, 0.1649, 0.1449, 0.1650, -24.1000, 141.8999, 30.9000, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaRGB]);
			//case 31: SetPlayerAttachedObject(playerid, 2, GunObjects[armaid], bone, 0.1649, 0.1449, 0.1650, -24.1000, 141.8999, 30.9000); // No Peito
			case 31: SetPlayerAttachedObject(playerid, 2, GunObjects[armaid], bone, -0.2539, -0.1229, 0.0000, 0.0000, 0.0000, 3.1000, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaRGB]); // Nas costas
			case 32: SetPlayerAttachedObject(playerid, 2, GunObjects[armaid], bone, 0.1040, 0.1069, 0.1740, 4.2999, 145.4999, 23.5000, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaRGB]);
			case 33: SetPlayerAttachedObject(playerid, 2, GunObjects[armaid], bone, -0.2539, -0.1229, 0.0000, 0.0000, 0.0000, 3.1000, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaRGB]);
			case 34: SetPlayerAttachedObject(playerid, 2, GunObjects[armaid], bone, -0.2539, -0.1229, 0.0000, 0.0000, 0.0000, 3.1000, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaRGB]);
		}
	}
	return 1;
}

ALTCOMMAND:pa->pegararma;
CMD:pegararma(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando dentro de um veículo.");
    if(PlayerInfo[playerid][pArmaMao] != 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
    if(gettime() < FloodCMD[playerid]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Aguarde um segundo antes de usar um comando novamente.");
    if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");

    new SlotID;
	if(sscanf(params,"i",SlotID))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "SINTAXE:{FFFFFF} /pegararma [slot 1-5].");
		return 1;
	}
	else
	{
	    new StrArm[256];
		if(SlotID == 1)
		{
			if(PlayerInfo[playerid][pSlot1] > 0)
			{
   				if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");

				new ArmaModel = ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo];
	    		new IdPahSalva = PlayerInfo[playerid][pSlot1];

			    GivePlayerWeapon(playerid,ArmaModel, PlayerInfo[playerid][pSlot1a]);

			    if(ArmaData[PlayerInfo[playerid][pSlot1]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6);
   				else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pSlot1]][ArmaExtra], 6);

                format(StrArm, sizeof(StrArm), "[Inventário] Você pegou uma %s com %d balas do slot 1, pressione a tecla 'Y' para carrega-la.",GunNames[ArmaModel], PlayerInfo[playerid][pSlot1a]);
	    		SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
			    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
			    PlayerInfo[playerid][pSlot1] = 0;
			    PlayerInfo[playerid][pSlot1a] = 0;
			    FloodCMD[playerid] = gettime()+2;

	    		SalvarArma(IdPahSalva);
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 1.");
		}
		else if(SlotID == 2)
		{
			if(PlayerInfo[playerid][pSlot2] > 0)
			{
			    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa largar a caixa para realizar essa ação.");

	   			new ArmaModel = ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo];
				new IdPahSalva = PlayerInfo[playerid][pSlot2];

			    GivePlayerWeapon(playerid,ArmaModel, PlayerInfo[playerid][pSlot2a]);
			    if(ArmaData[PlayerInfo[playerid][pSlot2]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6);
   				else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pSlot2]][ArmaExtra], 6);

			    format(StrArm, sizeof(StrArm), "[Inventário] Você pegou uma %s com %d balas do slot 2, pressione a tecla 'Y' para carrega-la.",GunNames[ArmaModel], PlayerInfo[playerid][pSlot2a]);
	    		SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
			    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
			    PlayerInfo[playerid][pSlot2] = 0;
			    PlayerInfo[playerid][pSlot2a] = 0;
			    FloodCMD[playerid] = gettime()+2;

	    		SalvarArma(IdPahSalva);
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 2.");
		}
		else if(SlotID == 3)
		{
			if(PlayerInfo[playerid][pSlot3] > 0)
			{
			    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    		new ArmaModel = ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo];
				new IdPahSalva = PlayerInfo[playerid][pSlot3];

			    GivePlayerWeapon(playerid,ArmaModel, PlayerInfo[playerid][pSlot3a]);
			    if(ArmaData[PlayerInfo[playerid][pSlot3]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6);
   				else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pSlot3]][ArmaExtra], 6);

			    format(StrArm, sizeof(StrArm), "[Inventário] Você pegou uma %s com %d balas do slot 3, pressione a tecla 'Y' para carrega-la.",GunNames[ArmaModel], PlayerInfo[playerid][pSlot3a]);
	    		SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
			    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
			    PlayerInfo[playerid][pSlot3] = 0;
			    PlayerInfo[playerid][pSlot3a] = 0;
			    FloodCMD[playerid] = gettime()+2;

	    		SalvarArma(IdPahSalva);
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 3.");
		}
		else if(SlotID == 4)
		{
			if(PlayerInfo[playerid][pSlot4] > 0)
			{
			    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa largar a caixa para realizar essa ação.");

	    		new ArmaModel = ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo];
				new IdPahSalva = PlayerInfo[playerid][pSlot4];

			    GivePlayerWeapon(playerid,ArmaModel, PlayerInfo[playerid][pSlot4a]);
			    if(ArmaData[PlayerInfo[playerid][pSlot4]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6);
   				else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pSlot4]][ArmaExtra], 6);

			    format(StrArm, sizeof(StrArm), "[Inventário] Você pegou uma %s com %d balas do Slot 4, pressione a tecla 'Y' para carrega-la.",GunNames[ArmaModel], PlayerInfo[playerid][pSlot4a]);
	    		SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
			    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
			    PlayerInfo[playerid][pSlot4] = 0;
			    PlayerInfo[playerid][pSlot4a] = 0;
			    FloodCMD[playerid] = gettime()+2;

	    		SalvarArma(IdPahSalva);
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 4.");
		}
		else if(SlotID == 5)
		{
			if(PlayerInfo[playerid][pSlot5] > 0)
			{
			    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa largar a caixa para realizar essa ação.");

	    		new ArmaModel = ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo];
				new IdPahSalva = PlayerInfo[playerid][pSlot5];

			    GivePlayerWeapon(playerid,ArmaModel, PlayerInfo[playerid][pSlot5a]);
			    if(ArmaData[PlayerInfo[playerid][pSlot5]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6);
   				else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pSlot5]][ArmaExtra], 6);

			    format(StrArm, sizeof(StrArm), "[Inventário] Você pegou uma %s com %d balas do Slot 5, pressione a tecla 'Y' para carrega-la.",GunNames[ArmaModel], PlayerInfo[playerid][pSlot5a]);
	    		SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
			    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
			    PlayerInfo[playerid][pSlot5] = 0;
			    PlayerInfo[playerid][pSlot5a] = 0;
			    FloodCMD[playerid] = gettime()+2;

	    		SalvarArma(IdPahSalva);
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 5.");
		}
	}
	return 1;
}

ALTCOMMAND:ga->guardararma;
CMD:guardararma(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando dentro de um veículo.");
    if(PlayerInfo[playerid][pArmaMao] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma em mãos");
    if(gettime() < FloodCMD[playerid]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Aguarde um segundo antes de usar um comando novamente.");
    if(PlayerInfo[playerid][pMorto] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} VocÊ está muito ferido para isso.");
    if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");

	new armaid = PlayerInfo[playerid][pArmaMao];
    new modelo = ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaModelo];

    new InvId = 9999;
	if(sscanf(params,"i",InvId))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "SINTAXE:{FFFFFF} /guardararma ou /ga [slot 1-5]");
		return 1;
	}
	else
	{
	    if(modelo == 1 || modelo == 3 || modelo == 4 || modelo == 16 || modelo == 17 || modelo == 22|| modelo == 22 || modelo == 23 || modelo == 24 || modelo == 28 || modelo == 41 || modelo == 43)
	    {
	        if(InvId == 1)
	        {
		    	if(PlayerInfo[playerid][pSlot1] == 0)
			    {
			        PlayerInfo[playerid][pSlot1] = PlayerInfo[playerid][pArmaMao];
			        PlayerInfo[playerid][pSlot1a] = GetPlayerAmmo(playerid);
                    format(string, sizeof(string), "[Inventário] Você guardou uma %s com %d munições no slot 1 (%d)", GunNames[ArmaData[armaid][ArmaModelo]], GetPlayerAmmo(playerid),ArmaData[armaid][ArmaNumeracao]);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

			        ArmaData[armaid][ArmaCom] = 0;
			        FloodCMD[playerid] = gettime()+2;
				    RemovePlayerAttachedObject(playerid, 0);
				    //========================================
				    DesarmandoPlayer[playerid] = 2;
					ResetPlayerWeapons(playerid);
					PlayerInfo[playerid][pArmaMao] = 0;
					RemovePlayerAttachedObject(playerid, 0);
					//========================================
					SalvarArma(armaid);
					return 1;
			    }
			    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 1.");
			}
			else if(InvId == 2)
			{
				if(PlayerInfo[playerid][pSlot2] == 0)
			    {
			        PlayerInfo[playerid][pSlot2] = PlayerInfo[playerid][pArmaMao];
			        PlayerInfo[playerid][pSlot2a] = GetPlayerAmmo(playerid);
			        format(string, sizeof(string), "[Inventário] Você guardou uma %s com %d munições no slot 2 (%d)", GunNames[ArmaData[armaid][ArmaModelo]], GetPlayerAmmo(playerid),ArmaData[armaid][ArmaNumeracao]);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			        ArmaData[armaid][ArmaCom] = 0;
			        FloodCMD[playerid] = gettime()+2;
				    RemovePlayerAttachedObject(playerid, 0);
				    //========================================
				    DesarmandoPlayer[playerid] = 2;
					ResetPlayerWeapons(playerid);
					PlayerInfo[playerid][pArmaMao] = 0;
					RemovePlayerAttachedObject(playerid, 0);
					//========================================
					SalvarArma(armaid);
					return 1;
			    }
			    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 2.");
			}
			else if(InvId == 3)
			{
			    if(PlayerInfo[playerid][pSlot3] == 0)
			    {
			        PlayerInfo[playerid][pSlot3] = PlayerInfo[playerid][pArmaMao];
			        PlayerInfo[playerid][pSlot3a] = GetPlayerAmmo(playerid);
			        format(string, sizeof(string), "[Inventário] Você guardou uma %s com %d munições no slot 3 (%d)", GunNames[ArmaData[armaid][ArmaModelo]], GetPlayerAmmo(playerid),ArmaData[armaid][ArmaNumeracao]);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			        ArmaData[armaid][ArmaCom] = 0;
			        FloodCMD[playerid] = gettime()+2;
				    RemovePlayerAttachedObject(playerid, 0);
				    //========================================
				    DesarmandoPlayer[playerid] = 2;
					ResetPlayerWeapons(playerid);
					PlayerInfo[playerid][pArmaMao] = 0;
					RemovePlayerAttachedObject(playerid, 0);
					//========================================
					SalvarArma(armaid);
					return 1;
			    }
			    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no slot 3.");
			}
			else if(InvId == 4)
			{
			    if(PlayerInfo[playerid][pSlot4] == 0)
			    {
			        PlayerInfo[playerid][pSlot4] = PlayerInfo[playerid][pArmaMao];
			        PlayerInfo[playerid][pSlot4a] = GetPlayerAmmo(playerid);
			        format(string, sizeof(string), "[Inventário] Você guardou uma %s com %d munições no slot 4 (%d)", GunNames[ArmaData[armaid][ArmaModelo]], GetPlayerAmmo(playerid),ArmaData[armaid][ArmaNumeracao]);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			        ArmaData[armaid][ArmaCom] = 0;
			        FloodCMD[playerid] = gettime()+2;
				    RemovePlayerAttachedObject(playerid, 0);
				    //========================================
				    DesarmandoPlayer[playerid] = 2;
					ResetPlayerWeapons(playerid);
					PlayerInfo[playerid][pArmaMao] = 0;
					RemovePlayerAttachedObject(playerid, 0);
					//========================================
					SalvarArma(armaid);
					return 1;
			    }
			    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no slot 4.");
			}
			else if(InvId == 5)
			{
				if(PlayerInfo[playerid][pSlot5] == 0)
			    {
			        PlayerInfo[playerid][pSlot5] = PlayerInfo[playerid][pArmaMao];
			        PlayerInfo[playerid][pSlot5a] = GetPlayerAmmo(playerid);
			        format(string, sizeof(string), "[Inventário] {FFFFFF}Você guardou uma %s com %d munições no slot 5 (%d)", GunNames[ArmaData[armaid][ArmaModelo]], GetPlayerAmmo(playerid),ArmaData[armaid][ArmaNumeracao]);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			        ArmaData[armaid][ArmaCom] = 0;
			        FloodCMD[playerid] = gettime()+2;
				    RemovePlayerAttachedObject(playerid, 0);
				    //========================================
				    DesarmandoPlayer[playerid] = 2;
					ResetPlayerWeapons(playerid);
					PlayerInfo[playerid][pArmaMao] = 0;
					RemovePlayerAttachedObject(playerid, 0);
					//========================================
					SalvarArma(armaid);
					return 1;
			    }
			    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no slot 5.");
			}
		}
		else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Essa arma é muito grande e não pode ser posta no inventário.");
	}
	return 1;
}

COMMAND:larma(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando dentro de um veículo.");
	if(TaEmUmElevador(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode dropar algo dentro de um elevador.");
    if(gettime() < FloodCMD[playerid]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Aguarde um segundo antes de usar um comando novamente.");
    if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");

    if(PlayerInfo[playerid][pArmaMao] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma em mãos");
	if(GetPVarInt(playerid, "EditandoArmaNoChao") == 1) return 1;
	new InvId;
	if(sscanf(params,"I(99)", InvId))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} /dropar arma [1 - Editar Posição | 2 - Automático]");
		return 1;
	}
	if(InvId == 99)
	{
   		SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} /dropar arma [1 - Editar Posição | 2 - Automático]");
		return 1;
	}
	else if(InvId == 1)
	{
   		if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
	    if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando estando em serviço.");
    	if(PlayerInfo[playerid][pArmaMao] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma em mãos");
		if(GetPVarInt(playerid, "EditandoArmaNoChao") == 1) return 1;

		new WorldCasa = -1;
		if(PlayerInfo[playerid][pEntrouCasa] != -1) WorldCasa = 100+PlayerInfo[playerid][pEntrouCasa];
		else if(PlayerInfo[playerid][pEntrouComplexo] != -1) WorldCasa = 1000+PlayerInfo[playerid][pEntrouComplexo];
		else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) WorldCasa = 100+PlayerInfo[playerid][pEntrouEmpresa];
		else if(PlayerInfo[playerid][pEntrouGaragem] != -1) WorldCasa = 10000+PlayerInfo[playerid][pEntrouGaragem];
		else if(EntrouInt[playerid] > -1) WorldCasa = GetPlayerVirtualWorld(playerid);
		else WorldCasa = 0;

   		new armaid = PlayerInfo[playerid][pArmaMao];
      	new Int = GetPlayerInterior(playerid);
		FloodCMD[playerid] = gettime()+2;

		SetPVarInt(playerid, "EditandoArmaNoChao", 1);

		ArmaData[armaid][ArmaInt] = Int;
		ArmaData[armaid][ArmaWorld] = WorldCasa;
		ArmaData[armaid][ArmaEditando] = 1;
   		GetPlayerPos(playerid, ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]);
   		ArmaData[armaid][ArmaZ] = ArmaData[armaid][ArmaZ]-1;

   		if(GetPlayerInterior(playerid) > 0) {
				ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
		}

      	if(ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaExtra] == 0) ArmaData[armaid][ArmaObj] = CreateDynamicObject(GunObjects[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ], 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);
   		else ArmaData[armaid][ArmaObj] = CreateDynamicObject(ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaExtra], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ], 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);

		EditDynamicObject(playerid,ArmaData[armaid][ArmaObj]);
        new strl[126];
		if(PlayerInfo[playerid][pEmServico] == 1)
			format(strl, sizeof(strl), "[EM SERVIÇO] %s dropou uma %s com %d balas [ Numeração: %d ]", PlayerName(playerid,0), GunNames[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaAmmo], ArmaData[armaid][ArmaNumeracao]);
		else
			format(strl, sizeof(strl), "%s dropou uma %s com %d balas. [ Numeração: %d ]", PlayerName(playerid,0), GunNames[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaAmmo], ArmaData[armaid][ArmaNumeracao]);
		LogCMD_Dropar(strl);
	}
 	else if(InvId == 2)
 	{
	   	new armaid = PlayerInfo[playerid][pArmaMao];
	  	//new GunAmmo = GetPlayerAmmo(playerid);
		new Int = GetPlayerInterior(playerid);
		new World = GetPlayerVirtualWorld(playerid);
		FloodCMD[playerid] = gettime()+2;

		//========================================
	    DesarmandoPlayer[playerid] = 2;
		ResetPlayerWeapons(playerid);
		PlayerInfo[playerid][pArmaMao] = 0;
		RemovePlayerAttachedObject(playerid, 0);
		//========================================
		RemovePlayerAttachedObject(playerid, 0);
		ArmaData[armaid][ArmaInt] = Int;
		ArmaData[armaid][ArmaWorld] = World;
		//ArmaData[armaid][ArmaAmmo] = GunAmmo;
		ArmaData[armaid][ArmaNoChao] = 1;
		ArmaData[armaid][ArmaCom] = 0;
		ArmaData[armaid][ArmaEditando] = 0;
		GetPlayerPos(playerid, ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]);
		ArmaData[armaid][ArmaRX] = 93.7;
		ArmaData[armaid][ArmaRY] = 120.0;
		ArmaData[armaid][ArmaRZ] = 120.0;
		ArmaData[armaid][ArmaZ] = ArmaData[armaid][ArmaZ]-1;

		format(string, sizeof(string), "[Arma Primária] Você jogou uma %s com %d no chão.", GunNames[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaAmmo]);
		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

        if(ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaExtra] == 0) ArmaData[armaid][ArmaObj] = CreateDynamicObject(GunObjects[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ], 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);
    	else ArmaData[armaid][ArmaObj] = CreateDynamicObject(ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaExtra], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]-1, 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);

		SalvarArma(armaid);
	}
	return 1;
}

COMMAND:dropar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando dentro de um veículo.");
	if(TaEmUmElevador(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode dropar algo dentro de um elevador.");
    if(gettime() < FloodCMD[playerid]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Aguarde um segundo antes de usar um comando novamente.");
    if(PlayerInfo[playerid][pEmServico] == 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando em serviço.");
	if(PlayerInfo[playerid][pLevel] < 3) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 3 ou mais para dropar algo.");
	if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");

	new option[11], InvId, StrArm[526];
	if(sscanf(params,"s[11]I(99)",option, InvId))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /dropar [arma / municao / droga]");
		return 1;
	}
    if(strcmp(option, "arma", true) == 0)
	{
	    if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
	    if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando estando em serviço.");
    	if(PlayerInfo[playerid][pArmaMao] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma em mãos");
		if(GetPVarInt(playerid, "EditandoArmaNoChao") == 1) return 1;

		new WorldCasa = GetPlayerVirtualWorld(playerid);

 		new armaid = PlayerInfo[playerid][pArmaMao];
		new Int = GetPlayerInterior(playerid);
		FloodCMD[playerid] = gettime()+2;

		//========================================
  		DesarmandoPlayer[playerid] = 2;
		ResetPlayerWeapons(playerid);
		PlayerInfo[playerid][pArmaMao] = 0;
		RemovePlayerAttachedObject(playerid, 0);
		//========================================
		RemovePlayerAttachedObject(playerid, 0);
		ArmaData[armaid][ArmaInt] = Int;
		ArmaData[armaid][ArmaWorld] = WorldCasa;

		ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
		ArmaData[armaid][ArmaNoChao] = 1;
		ArmaData[armaid][ArmaCom] = 0;
		ArmaData[armaid][ArmaEditando] = 0;
		GetPlayerPos(playerid, ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]);
		ArmaData[armaid][ArmaRX] = 93.7;
		ArmaData[armaid][ArmaRY] = 120.0;
		ArmaData[armaid][ArmaRZ] = 120.0;
		ArmaData[armaid][ArmaZ] = ArmaData[armaid][ArmaZ]-1;

		format(string, sizeof(string), "[Arma Primária] Você jogou uma %s com %d munições no chão. (%d)", GunNames[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaAmmo],ArmaData[armaid][ArmaNumeracao]);
		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		SendClientMessage(playerid, COLOR_GREY, "(Você pode usar /dropare para editar a pos da arma no chão)");

		if(ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaExtra] == 0) ArmaData[armaid][ArmaObj] = CreateDynamicObject(GunObjects[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ], 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);
		else ArmaData[armaid][ArmaObj] = CreateDynamicObject(ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaExtra], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ], 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);

        if(PlayerInfo[playerid][pEmServico] == 1)
		{
  			new strl[126];
			format(strl, sizeof(strl), "[EM SERVIÇO] %s dropou uma %s com %d balas [ Numeração: %d ]", PlayerName(playerid,0), GunNames[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaAmmo], ArmaData[armaid][ArmaNumeracao]);
			LogCMD_Dropar(strl);
		}
		else
		{
		    new strl[126];
			format(strl, sizeof(strl), "%s dropou uma %s com %d balas. [ Numeração: %d ]", PlayerName(playerid,0), GunNames[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaAmmo], ArmaData[armaid][ArmaNumeracao]);
			LogCMD_Dropar(strl);
		}

		SalvarArma(armaid);
	}
	else if(strcmp(option, "municao", true) == 0)
	{
	    if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando estando em serviço.");

        format(StrArm, sizeof(StrArm), "9mm: %d",PlayerInfo[playerid][pMun9mm]);
		format(StrArm, sizeof(StrArm), "%s\n5x56mm: %d",StrArm,PlayerInfo[playerid][pMun556]);
		format(StrArm, sizeof(StrArm), "%s\nCartucho: %d",StrArm,PlayerInfo[playerid][pMunCart]);
		format(StrArm, sizeof(StrArm), "%s\n12.7x106mm: %d",StrArm,PlayerInfo[playerid][pMun127]);
		Dialog_Show(playerid, Dialog_DropAmmo, DIALOG_STYLE_LIST, "Dropar Munições", StrArm, "Selecionar", "Cancelar");
	}
	else if(strcmp(option, "droga", true) == 0)
	{
        format(StrArm, sizeof(StrArm), "Maconha(ruim): %d",PlayerDroga[playerid][MaconhaR]);
        format(StrArm, sizeof(StrArm), "%s\nMaconha(boa): %d",StrArm,PlayerDroga[playerid][MaconhaB]);
		format(StrArm, sizeof(StrArm), "%s\nMaconha(excelente): %d",StrArm,PlayerDroga[playerid][MaconhaE]);
		format(StrArm, sizeof(StrArm), "%s\nCocaina(ruim): %d",StrArm,PlayerDroga[playerid][CocaR]);
		format(StrArm, sizeof(StrArm), "%s\nCocaina(boa): %d",StrArm,PlayerDroga[playerid][CocaB]);
		format(StrArm, sizeof(StrArm), "%s\nCocaina(excelente): %d",StrArm,PlayerDroga[playerid][CocaE]);
		format(StrArm, sizeof(StrArm), "%s\nCrack(ruim): %d",StrArm,PlayerDroga[playerid][CrackR]);
		format(StrArm, sizeof(StrArm), "%s\nCrack(bom): %d",StrArm,PlayerDroga[playerid][CrackB]);
		format(StrArm, sizeof(StrArm), "%s\nCrack(excelente): %d",StrArm,PlayerDroga[playerid][CrackE]);
		format(StrArm, sizeof(StrArm), "%s\nLSD(ruim): %d",StrArm,PlayerDroga[playerid][LSDR]);
		format(StrArm, sizeof(StrArm), "%s\nLSD(bom): %d",StrArm,PlayerDroga[playerid][LSDB]);
		format(StrArm, sizeof(StrArm), "%s\nLSD(excelente): %d",StrArm,PlayerDroga[playerid][LSDE]);
		format(StrArm, sizeof(StrArm), "%s\nMetanfetamina(ruim): %d",StrArm,PlayerDroga[playerid][MetR]);
		format(StrArm, sizeof(StrArm), "%s\nMetanfetamina(bom): %d",StrArm,PlayerDroga[playerid][MetB]);
		format(StrArm, sizeof(StrArm), "%s\nMetanfetamina(excelente): %d",StrArm,PlayerDroga[playerid][MetE]);
		format(StrArm, sizeof(StrArm), "%s\nLança Perfume: %d",StrArm,PlayerDroga[playerid][LancaPer]);
		format(StrArm, sizeof(StrArm), "%s\nPasta base: %d",StrArm,PlayerDroga[playerid][PBC]);
		format(StrArm, sizeof(StrArm), "%s\nSementes: %d",StrArm,PlayerDroga[playerid][Sementes]);
		Dialog_Show(playerid, Dialog_DropDrug, DIALOG_STYLE_LIST, "Dropar Droga", StrArm, "Selecionar", "Cancelar");
	}
	return 1;
}

COMMAND:largarchave(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pChaveEmprestada] != 0)
	    PlayerInfo[playerid][pChaveEmprestada] = 0;
    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você largou a chave emprestada.");
	return 1;
}

COMMAND:dropare(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando dentro de um veículo.");
	if(TaEmUmElevador(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode dropar algo dentro de um elevador.");
    if(gettime() < FloodCMD[playerid]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Aguarde um segundo antes de usar um comando novamente.");
    if(PlayerInfo[playerid][pEmServico] == 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando em serviço.");
    if(PlayerInfo[playerid][pMorto] > 0)  return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está muito ferido, utilize /dropar.");
	if(PlayerInfo[playerid][pLevel] < 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 1 ou mais para dropar algo.");
    if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");

	new option[11], InvId, StrArm[526];
	if(sscanf(params,"s[11]",option, InvId))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /dropar [arma / municao / droga]");
		return 1;
	}
    if(strcmp(option, "arma", true) == 0)
	{
	    if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
	    if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando estando em serviço.");
    	if(PlayerInfo[playerid][pArmaMao] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma em mãos");
		if(GetPVarInt(playerid, "EditandoArmaNoChao") == 1) return 1;

		new WorldCasa = -1;
		if(PlayerInfo[playerid][pEntrouCasa] != -1) WorldCasa = 100+PlayerInfo[playerid][pEntrouCasa];
		else if(PlayerInfo[playerid][pEntrouComplexo] != -1) WorldCasa = 1000+PlayerInfo[playerid][pEntrouComplexo];
		else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) WorldCasa = 100+PlayerInfo[playerid][pEntrouEmpresa];
		else if(PlayerInfo[playerid][pEntrouGaragem] != -1) WorldCasa = 10000+PlayerInfo[playerid][pEntrouGaragem];
		else if(EntrouInt[playerid] > -1) WorldCasa = GetPlayerVirtualWorld(playerid);
		else WorldCasa = 0;

   		new armaid = PlayerInfo[playerid][pArmaMao];
      	new Int = GetPlayerInterior(playerid);
		FloodCMD[playerid] = gettime()+2;

		SetPVarInt(playerid, "EditandoArmaNoChao", 1);

		ArmaData[armaid][ArmaInt] = Int;
		ArmaData[armaid][ArmaWorld] = WorldCasa;
		ArmaData[armaid][ArmaEditando] = 1;
   		GetPlayerPos(playerid, ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]);
   		ArmaData[armaid][ArmaZ] = ArmaData[armaid][ArmaZ]-1;

   		if(GetPlayerInterior(playerid) > 0) {
				ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
		}

      	if(ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaExtra] == 0) ArmaData[armaid][ArmaObj] = CreateDynamicObject(GunObjects[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ], 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);
   		else ArmaData[armaid][ArmaObj] = CreateDynamicObject(ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaExtra], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ], 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);

		EditDynamicObject(playerid,ArmaData[armaid][ArmaObj]);
        new strl[126];
		if(PlayerInfo[playerid][pEmServico] == 1)
			format(strl, sizeof(strl), "[EM SERVIÇO] %s dropou uma %s com %d balas [ Numeração: %d ]", PlayerName(playerid,0), GunNames[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaAmmo], ArmaData[armaid][ArmaNumeracao]);
		else
			format(strl, sizeof(strl), "%s dropou uma %s com %d balas. [ Numeração: %d ]", PlayerName(playerid,0), GunNames[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaAmmo], ArmaData[armaid][ArmaNumeracao]);
		LogCMD_Dropar(strl);
	}
	else if(strcmp(option, "municao", true) == 0)
	{
	    if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando estando em serviço.");

        format(StrArm, sizeof(StrArm), "9mm: %d",PlayerInfo[playerid][pMun9mm]);
		format(StrArm, sizeof(StrArm), "%s\n5x56mm: %d",StrArm,PlayerInfo[playerid][pMun556]);
		format(StrArm, sizeof(StrArm), "%s\nCartucho: %d",StrArm,PlayerInfo[playerid][pMunCart]);
		format(StrArm, sizeof(StrArm), "%s\n12.7x106mm: %d",StrArm,PlayerInfo[playerid][pMun127]);
		Dialog_Show(playerid, Dialog_DropAmmo, DIALOG_STYLE_LIST, "Dropar Munições", StrArm, "Selecionar", "Cancelar");
	}
	else if(strcmp(option, "droga", true) == 0)
	{
        format(StrArm, sizeof(StrArm), "Maconha(ruim): %d",PlayerDroga[playerid][MaconhaR]);
        format(StrArm, sizeof(StrArm), "%s\nMaconha(boa): %d",StrArm,PlayerDroga[playerid][MaconhaB]);
		format(StrArm, sizeof(StrArm), "%s\nMaconha(excelente): %d",StrArm,PlayerDroga[playerid][MaconhaE]);
		format(StrArm, sizeof(StrArm), "%s\nCocaina(ruim): %d",StrArm,PlayerDroga[playerid][CocaR]);
		format(StrArm, sizeof(StrArm), "%s\nCocaina(boa): %d",StrArm,PlayerDroga[playerid][CocaB]);
		format(StrArm, sizeof(StrArm), "%s\nCocaina(excelente): %d",StrArm,PlayerDroga[playerid][CocaE]);
		format(StrArm, sizeof(StrArm), "%s\nCrack(ruim): %d",StrArm,PlayerDroga[playerid][CrackR]);
		format(StrArm, sizeof(StrArm), "%s\nCrack(bom): %d",StrArm,PlayerDroga[playerid][CrackB]);
		format(StrArm, sizeof(StrArm), "%s\nCrack(excelente): %d",StrArm,PlayerDroga[playerid][CrackE]);
		format(StrArm, sizeof(StrArm), "%s\nLSD(ruim): %d",StrArm,PlayerDroga[playerid][LSDR]);
		format(StrArm, sizeof(StrArm), "%s\nLSD(bom): %d",StrArm,PlayerDroga[playerid][LSDB]);
		format(StrArm, sizeof(StrArm), "%s\nLSD(excelente): %d",StrArm,PlayerDroga[playerid][LSDE]);
		format(StrArm, sizeof(StrArm), "%s\nMetanfetamina(ruim): %d",StrArm,PlayerDroga[playerid][MetR]);
		format(StrArm, sizeof(StrArm), "%s\nMetanfetamina(bom): %d",StrArm,PlayerDroga[playerid][MetB]);
		format(StrArm, sizeof(StrArm), "%s\nMetanfetamina(excelente): %d",StrArm,PlayerDroga[playerid][MetE]);
		format(StrArm, sizeof(StrArm), "%s\nLança Perfume: %d",StrArm,PlayerDroga[playerid][LancaPer]);
		format(StrArm, sizeof(StrArm), "%s\nPasta base: %d",StrArm,PlayerDroga[playerid][PBC]);
		format(StrArm, sizeof(StrArm), "%s\nSementes: %d",StrArm,PlayerDroga[playerid][Sementes]);
		Dialog_Show(playerid, Dialog_DropDrug, DIALOG_STYLE_LIST, "Dropar Droga", StrArm, "Selecionar", "Cancelar");
	}
	return 1;
}

Dialog:Dialog_DropDrug(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

 	DropandoDrug[playerid] = listitem;
 	Dialog_Show(playerid, Dialog_DropDrug2, DIALOG_STYLE_INPUT, "Dropar Droga", "Digite a quantidade a ser dropada.\n(Min: 2 / Max: 5000)", "Dropar", "Cancelar");
	return 1;
}

Dialog:Dialog_DropDrug2(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;

    new Quant = strval(inputtext);
	if(Quant > 1 && Quant < 5001)
	{
	    new str2[526];
	    new Tipp = (DropandoDrug[playerid]+1);
		switch(DropandoDrug[playerid])
		{
		    case 0:
		    {
				if(PlayerDroga[playerid][MaconhaR] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de maconha (ruim).");
			}
			case 1:
		    {
				if(PlayerDroga[playerid][MaconhaB] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de maconha (boa).");
			}
			case 2:
		    {
				if(PlayerDroga[playerid][MaconhaE] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de maconha (excelente).");
			}
			case 3:
		    {
				if(PlayerDroga[playerid][CocaR] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de cocaina (ruim).");
			}
			case 4:
		    {
				if(PlayerDroga[playerid][CocaB] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de cocaina (boa).");
			}
			case 5:
		    {
				if(PlayerDroga[playerid][CocaE] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de cocaina (excelente).");
			}
			case 6:
		    {
				if(PlayerDroga[playerid][CrackR] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de crack (ruim).");
			}
			case 7:
		    {
				if(PlayerDroga[playerid][CrackB] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de crack (bom).");
			}
			case 8:
		    {
				if(PlayerDroga[playerid][CrackE] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de crack (excelente).");
			}
			case 9:
		    {
				if(PlayerDroga[playerid][LSDR] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de LSD (ruim).");
			}
			case 10:
		    {
				if(PlayerDroga[playerid][LSDB] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de LSD (bom).");
			}
			case 11:
		    {
				if(PlayerDroga[playerid][LSDE] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de LSD (excelente).");
			}
			case 12:
		    {
				if(PlayerDroga[playerid][MetR] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de metanfetamina (ruim).");
			}
			case 13:
		    {
				if(PlayerDroga[playerid][MetB] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de metanfetamina (boa).");
			}
			case 14:
		    {
				if(PlayerDroga[playerid][MetE] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de metanfetamina (excelente).");
			}
			case 15:
		    {
				if(PlayerDroga[playerid][LancaPer] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Lança Perfume.");
			}
			case 16:
		    {
				if(PlayerDroga[playerid][PBC] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Pasta base.");
			}
			case 17:
		    {
				if(PlayerDroga[playerid][Sementes] >= Quant)
				{
					format(str2,sizeof(str2),"INSERT INTO drop_drug (dType) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoDroga", "iii",playerid,Quant,Tipp);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Sementes.");
			}
		}
	}
	else
	{
	    Dialog_Show(playerid, Dialog_DropDrug2, DIALOG_STYLE_INPUT, "Dropar Droga", "Digite a quantidade a ser dropada.\n(Min: 10 / Max: 5000)", "Dropar", "Cancelar");
	}
	return 1;
}

forward DropandoDroga(playerid,Ammo,Tipp);
public DropandoDroga(playerid,Ammo,Tipp)
{
    new i = cache_insert_id();

    DropInfo[i][dID] = i;
	new NomeAmmo[126];

	new WorldCasa = -1;
	if(PlayerInfo[playerid][pEntrouCasa] != -1) { WorldCasa = 100+PlayerInfo[playerid][pEntrouCasa]; SCM(playerid, -1, "Casa"); }
	else if(PlayerInfo[playerid][pEntrouComplexo] != -1) { WorldCasa = 1000+PlayerInfo[playerid][pEntrouComplexo]; SCM(playerid, -1, "Complexo"); }
	else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) { WorldCasa = 100+PlayerInfo[playerid][pEntrouEmpresa]; SCM(playerid, -1, "Empresa"); }
	else if(PlayerInfo[playerid][pEntrouGaragem] != -1) { WorldCasa = 10000+PlayerInfo[playerid][pEntrouGaragem]; SCM(playerid, -1, "Garagem"); }
	else if(EntrouInt[playerid] > -1) WorldCasa = GetPlayerVirtualWorld(playerid);
	else { WorldCasa = 0; SCM(playerid, -1, "Exterior"); }

	GetPlayerPos(playerid, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]);
 	strmid(DropInfo[i][dDropou], PlayerName(playerid, 0), 0, strlen(PlayerName(playerid, 0)), 255);
  	DropInfo[i][dAmmo] = Ammo;
    DropInfo[i][dWorld] = WorldCasa;
    DropInfo[i][dInt] = GetPlayerInterior(playerid);
    DropInfo[i][dType] = Tipp;


    switch(DropInfo[i][dType])
    {
    	case 1:
		{
		    DropInfo[i][dObject] = CreateDynamicObject(-2301, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
			format(NomeAmmo, sizeof(NomeAmmo), "Maconha (ruim)");
			PlayerDroga[playerid][MaconhaR] -= Ammo;
		}
    	case 2:
		{
		    DropInfo[i][dObject] = CreateDynamicObject(-2300, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
    		format(NomeAmmo, sizeof(NomeAmmo), "Maconha (boa)");
    		PlayerDroga[playerid][MaconhaB] -= Ammo;
		}
    	case 3:
    	{
    	    DropInfo[i][dObject] = CreateDynamicObject(-2300, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
    		format(NomeAmmo, sizeof(NomeAmmo), "Maconha (excelente)");
    		PlayerDroga[playerid][MaconhaE] -= Ammo;
		}
    	//======================================================================
    	case 4:
		{
		    DropInfo[i][dObject] = CreateDynamicObject(-2302, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
			format(NomeAmmo, sizeof(NomeAmmo), "Cocaina (ruim)");
			PlayerDroga[playerid][CocaR] -= Ammo;
		}
    	case 5:
		{
		    DropInfo[i][dObject] = CreateDynamicObject(-2302, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
			format(NomeAmmo, sizeof(NomeAmmo), "Cocaina (boa)");
			PlayerDroga[playerid][CocaB] -= Ammo;
		}
    	case 6:
		{
		    DropInfo[i][dObject] = CreateDynamicObject(-2302, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
			format(NomeAmmo, sizeof(NomeAmmo), "Cocaina (excelente)");
			PlayerDroga[playerid][CocaE] -= Ammo;
		}
    	//======================================================================
    	case 7:
		{
  			DropInfo[i][dObject] = CreateDynamicObject(-2303, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
			format(NomeAmmo, sizeof(NomeAmmo), "Crack (ruim)");
			PlayerDroga[playerid][CrackR] -= Ammo;
		}
    	case 8:
		{
		    DropInfo[i][dObject] = CreateDynamicObject(-2304, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
    		format(NomeAmmo, sizeof(NomeAmmo), "Crack (bom)");
    		PlayerDroga[playerid][CrackB] -= Ammo;
		}
    	case 9:
		{
		    DropInfo[i][dObject] = CreateDynamicObject(-2304, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
    		format(NomeAmmo, sizeof(NomeAmmo), "Crack (excelente)");
    		PlayerDroga[playerid][CrackE] -= Ammo;
		}
    	//======================================================================
    	case 10:
		{
		    DropInfo[i][dObject] = CreateDynamicObject(-2305, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
    	    format(NomeAmmo, sizeof(NomeAmmo), "LSD (ruim)");
    	    PlayerDroga[playerid][LSDR] -= Ammo;
		}
    	case 11:
		{
		    DropInfo[i][dObject] = CreateDynamicObject(-2305, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
    		format(NomeAmmo, sizeof(NomeAmmo), "LSD (bom)");
    		PlayerDroga[playerid][LSDB] -= Ammo;
		}
    	case 12:
		{
		    DropInfo[i][dObject] = CreateDynamicObject(-2305, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
    		format(NomeAmmo, sizeof(NomeAmmo), "LSD (excelente)");
    		PlayerDroga[playerid][LSDE] -= Ammo;
		}
    	//======================================================================
    	case 13:
		{
		    DropInfo[i][dObject] = CreateDynamicObject(-2303, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
    		format(NomeAmmo, sizeof(NomeAmmo), "Metanfetamina (ruim)");
    		PlayerDroga[playerid][MetR] -= Ammo;
		}
    	case 14:
		{
		    DropInfo[i][dObject] = CreateDynamicObject(-2303, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
    		format(NomeAmmo, sizeof(NomeAmmo), "Metanfetamina (bom)");
    		PlayerDroga[playerid][MetB] -= Ammo;
		}
    	case 15:
		{
		    DropInfo[i][dObject] = CreateDynamicObject(-2303, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
    		format(NomeAmmo, sizeof(NomeAmmo), "Metanfetamina (excelente)");
    		PlayerDroga[playerid][MetE] -= Ammo;
		}
		//======================================================================
    	case 16:
		{
		    DropInfo[i][dObject] = CreateDynamicObject(-2306, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
    		format(NomeAmmo, sizeof(NomeAmmo), "Lança Perfume");
    		PlayerDroga[playerid][LancaPer] -= Ammo;
		}
    	case 17:
		{
		    DropInfo[i][dObject] = CreateDynamicObject(-2302, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
    		format(NomeAmmo, sizeof(NomeAmmo), "Pasta base");
    		PlayerDroga[playerid][PBC] -= Ammo;
		}
    	case 18:
		{
		    DropInfo[i][dObject] = CreateDynamicObject(-2301, DropInfo[i][dX], DropInfo[i][dY], DropInfo[i][dZ]-1, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid));
    		format(NomeAmmo, sizeof(NomeAmmo), "Sementes");
    		PlayerDroga[playerid][Sementes] -= Ammo;
		}
    }
    //==========================================================================

    DropInfo[i][dEditando] = 1;

	SetPVarInt(playerid, "EditandoDrogaNoChao", i);
	SaveDrogas(playerid);

    format(string, sizeof(string), "[DROGAS] Você dropou um pacote com %dg/ml de %s no chão.", Ammo, NomeAmmo);
	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);


	if(PlayerInfo[playerid][pEmServico] == 1)
	{
  		new strl[126];
		format(strl, sizeof(strl), "[EM SERVIÇO] %s dropou um pacote com %dg/ml de %s no chão.", PlayerName(playerid,0), Ammo, NomeAmmo);
		LogCMD_Dropar(strl);
	}
	else
	{
	    new strl[126];
		format(strl, sizeof(strl), "%s dropou um pacote com %dg/ml de %s no chão.", PlayerName(playerid,0), Ammo, NomeAmmo);
		LogCMD_Dropar(strl);
	}

	EditDynamicObject(playerid,DropInfo[i][dObject]);
	return 1;
}

Dialog:Dialog_DropAmmo(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

 	DropandoAmmo[playerid] = listitem;
 	Dialog_Show(playerid, Dialog_DropAmmo2, DIALOG_STYLE_INPUT, "Minhas Munições", "Digite a quantidade a ser dropada.\n(Min: 1 / Max: 2000)", "Dropar", "Cancelar");
	return 1;
}

Dialog:Dialog_DropAmmo2(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;

    new Ammo = strval(inputtext);
	if(Ammo > 0 && Ammo < 2001)
	{
	    new str2[526];
	    new Tipp = (DropandoAmmo[playerid]+1);
		switch(DropandoAmmo[playerid])
		{
		    case 0:
		    {
				if(PlayerInfo[playerid][pMun9mm] >= Ammo)
				{
					format(str2,sizeof(str2),"INSERT INTO cartuxo (CartuxoTipo) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoCartuxo", "dd",playerid,Ammo);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Você não tem munições de 9mm o suficiente.");
			}
			case 1:
			{
			    if(PlayerInfo[playerid][pMun556] >= Ammo)
			    {
					format(str2,sizeof(str2),"INSERT INTO cartuxo (CartuxoTipo) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoCartuxo", "dd",playerid,Ammo);
			    }
			    else return SCM(playerid, COLOR_LIGHTRED, "Você não tem munições de 5.56mm o suficiente.");
			}
			case 2:
			{
			    if(PlayerInfo[playerid][pMunCart] >= Ammo)
			    {
					format(str2,sizeof(str2),"INSERT INTO cartuxo (CartuxoTipo) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoCartuxo", "dd",playerid,Ammo);
			    }
			    else return SCM(playerid, COLOR_LIGHTRED, "Você não tem Cartuchos o suficiente.");
			}
			case 3:
			{
			    if(PlayerInfo[playerid][pMun127] >= Ammo)
			    {
					format(str2,sizeof(str2),"INSERT INTO cartuxo (CartuxoTipo) VALUES ('%d')", Tipp);
					mysql_function_query(Pipeline, str2, true, "DropandoCartuxo", "dd",playerid,Ammo);
			    }
			    else return SCM(playerid, COLOR_LIGHTRED, "Você não tem munições de 127.7x106mm o suficiente.");
			}
		}
	}
	else
	{
	    Dialog_Show(playerid, Dialog_DropAmmo2, DIALOG_STYLE_INPUT, "Minhas Munições", "Digite a quantidade a ser dropada.\n(Min: 1 / Max: 500)", "Selecionar", "Cancelar");
	}
	return 1;
}

forward DropandoCartuxo(playerid,Ammo);
public DropandoCartuxo(playerid,Ammo)
{
    new i = cache_insert_id();
    CartuxoData[i][CartuxoID] = i;
    CartuxoData[i][CartuxoTipo] = DropandoAmmo[playerid]+1;
	GetPlayerPos(playerid, CartuxoData[i][cartuxoX], CartuxoData[i][cartuxoY], CartuxoData[i][cartuxoZ]);
	CartuxoData[i][cartuxoRX] = 0.0;
	CartuxoData[i][cartuxoRY] = 0.0;
	CartuxoData[i][cartuxoRZ] = 0.0;
	CartuxoData[i][cartuxoQnt] = Ammo;

	new Int = GetPlayerInterior(playerid);

	new WorldCasa = -1;
	if(PlayerInfo[playerid][pEntrouCasa] != -1)
	{
		WorldCasa = 100+PlayerInfo[playerid][pEntrouCasa];
	}
	else if(PlayerInfo[playerid][pEntrouComplexo] != -1) WorldCasa = 1000+PlayerInfo[playerid][pEntrouComplexo];
	else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) WorldCasa = 100+PlayerInfo[playerid][pEntrouEmpresa];
	else if(PlayerInfo[playerid][pEntrouGaragem] != -1) WorldCasa = 10000+PlayerInfo[playerid][pEntrouGaragem];
	else WorldCasa = 0;


	SetPVarInt(playerid, "EditandoAmmoNoChao", i);

	new NomeAmmo[24];
	if(CartuxoData[i][CartuxoTipo] == 1)
	{
		format(NomeAmmo, sizeof(NomeAmmo), "9mm");
		PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-Ammo;
	}
	else if(CartuxoData[i][CartuxoTipo] == 2)
	{
		format(NomeAmmo, sizeof(NomeAmmo), "5.56mm");
		PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-Ammo;
	}
	else if(CartuxoData[i][CartuxoTipo] == 3)
	{
		format(NomeAmmo, sizeof(NomeAmmo), "Cartuchos");
  		PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-Ammo;
	}
	else if(CartuxoData[i][CartuxoTipo] == 4)
	{
		format(NomeAmmo, sizeof(NomeAmmo), "12.7x106mm");
		PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-Ammo;
	}
    format(string, sizeof(string), "[Munições] Você jogou uma caixa com %d balas de %s no chão.", Ammo, NomeAmmo);
	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

	if(PlayerInfo[playerid][pEmServico] == 1)
	{
  		new strl[126];
		format(strl, sizeof(strl), "[EM SERVIÇO] %s jogou uma caixa com %d balas de %s no chão.", PlayerName(playerid,0), Ammo, NomeAmmo);
		LogCMD_Dropar(strl);
	}
	else
	{
	    new strl[126];
		format(strl, sizeof(strl), "%s jogou uma caixa com %d balas de %s no chão.", PlayerName(playerid,0), Ammo, NomeAmmo);
		LogCMD_Dropar(strl);
	}

	CartuxoData[i][cartuxoInt] = Int;
	CartuxoData[i][cartuxoWorld] = WorldCasa;
	GetPlayerPos(playerid, CartuxoData[i][cartuxoX], CartuxoData[i][cartuxoY], CartuxoData[i][cartuxoZ]);
    CartuxoData[i][cartuxoEditando] = 1;

	CartuxoData[i][cartuxoObj] = CreateDynamicObject(2040, CartuxoData[i][cartuxoX], CartuxoData[i][cartuxoY], CartuxoData[i][cartuxoZ]-0.6, 0, 0, 0,CartuxoData[i][cartuxoWorld],CartuxoData[i][cartuxoInt]);

	EditDynamicObject(playerid,CartuxoData[i][cartuxoObj]);
	return 1;
}

CMD:apegar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando.");

	new AchouAlgo = 0;
	new Linha1[1024], LinhaAtt[256];
	format(Linha1, sizeof(Linha1), "");

	new i = 0, f = 0;
	for(new a = 0; a < MAX_CARTUXO; a++)
	{
	    if(CartuxoData[a][cartuxoEditando] == 0)
	    {
			if(AchouAlgo < 30)
			{
		 		if(IsPlayerInRangeOfPoint(playerid, 5.0, CartuxoData[a][cartuxoX], CartuxoData[a][cartuxoY], CartuxoData[a][cartuxoZ]))
		   		{
		   		    //if(CartuxoData[a][cartuxoWorld] == World)
		   		    //{
		     			i = a;
		     			if(CartuxoData[i][CartuxoTipo] == 1)
						{
							format(LinhaAtt, 126, "Caixa de munição: 9mm (%d) [VW: %d]\n", CartuxoData[a][cartuxoQnt], CartuxoData[a][cartuxoWorld]); strcat(Linha1, LinhaAtt);
							VendoListaPegar[playerid][AchouAlgo] = i;
							VendoListaPegarT[playerid][AchouAlgo] = 1;
						}
						else if(CartuxoData[i][CartuxoTipo] == 2)
						{
							format(LinhaAtt, 126, "Caixa de munição: 5.56mm (%d) [VW: %d]\n", CartuxoData[a][cartuxoQnt], CartuxoData[a][cartuxoWorld]); strcat(Linha1, LinhaAtt);
							VendoListaPegar[playerid][AchouAlgo] = i;
							VendoListaPegarT[playerid][AchouAlgo] = 1;
					 	}
						else if(CartuxoData[i][CartuxoTipo] == 3)
						{
							format(LinhaAtt, 126, "Caixa de munição: Cartuchos (%d) [VW: %d]\n", CartuxoData[a][cartuxoQnt], CartuxoData[a][cartuxoWorld]); strcat(Linha1, LinhaAtt);
							VendoListaPegar[playerid][AchouAlgo] = i;
							VendoListaPegarT[playerid][AchouAlgo] = 1;
						}
						else if(CartuxoData[i][CartuxoTipo] == 4)
						{
						    format(LinhaAtt, 126, "Caixa de munição: 12.7x106mm (%d) [VW: %d]\n", CartuxoData[a][cartuxoQnt], CartuxoData[a][cartuxoWorld]); strcat(Linha1, LinhaAtt);
							VendoListaPegar[playerid][AchouAlgo] = i;
							VendoListaPegarT[playerid][AchouAlgo] = 1;
						}
						AchouAlgo++;
					//}
				}
			}
		}
	}
	for(new a = 0; a < MAX_ARMAS; a++)
	{
		if(AchouAlgo < 30)
		{
	 		if(IsPlayerInRangeOfPoint(playerid, 5.0, ArmaData[a][ArmaX], ArmaData[a][ArmaY], ArmaData[a][ArmaZ]))
	   		{
	   		    if(ArmaData[a][ArmaNoChao] == 1)//ArmaData[a][ArmaWorld] == World)
	   		    {
	     			f = a;
					format(LinhaAtt, 126, "Arma: %s, %d balas (%d) [VW: %d]\n", GunNames[ArmaData[a][ArmaModelo]], ArmaData[a][ArmaAmmo], ArmaData[a][ArmaNumeracao], ArmaData[a][ArmaWorld]); strcat(Linha1, LinhaAtt);
					VendoListaPegar[playerid][AchouAlgo] = f;
					VendoListaPegarT[playerid][AchouAlgo] = 2;
					AchouAlgo++;
				}
			}
		}
	}
	for(new dr = 0; dr < MAX_DRUGDROP; dr++)
	{
	    if(AchouAlgo < 30)
		{
	 		if(IsPlayerInRangeOfPoint(playerid, 5.0, DropInfo[dr][dX], DropInfo[dr][dY], DropInfo[dr][dZ]))
	   		{
	   		    if(DropInfo[dr][dEditando] == 0)
	   		    {
		   		    //if(DropInfo[dr][dWorld] == World)
		   		    //{
		   		        new NomeDrug[56];
		   		        switch(DropInfo[dr][dType])
		   		        {
		   		            case 1: format(NomeDrug,sizeof(NomeDrug),"Pacote de maconha (ruim) [%dg] [VW: %d]\n", DropInfo[dr][dAmmo],DropInfo[dr][dWorld]);
		   		            case 2: format(NomeDrug,sizeof(NomeDrug),"Pacote de maconha (boa) [%dg] [VW: %d]\n", DropInfo[dr][dAmmo],DropInfo[dr][dWorld]);
		   		            case 3: format(NomeDrug,sizeof(NomeDrug),"Pacote de maconha (excelente) [%dg] [VW: %d]\n", DropInfo[dr][dAmmo],DropInfo[dr][dWorld]);

		   		            case 4: format(NomeDrug,sizeof(NomeDrug),"Pacote de cocaina (ruim) [%dg] [VW: %d]\n", DropInfo[dr][dAmmo],DropInfo[dr][dWorld]);
		   		            case 5: format(NomeDrug,sizeof(NomeDrug),"Pacote de cocaina (boa) [%dg] [VW: %d]\n", DropInfo[dr][dAmmo],DropInfo[dr][dWorld]);
		   		            case 6: format(NomeDrug,sizeof(NomeDrug),"Pacote de cocaina (excelente) [%dg] [VW: %d]\n", DropInfo[dr][dAmmo],DropInfo[dr][dWorld]);

		   		            case 7: format(NomeDrug,sizeof(NomeDrug),"Pacote de crack (ruim) [%dg] [VW: %d]\n", DropInfo[dr][dAmmo],DropInfo[dr][dWorld]);
		   		            case 8: format(NomeDrug,sizeof(NomeDrug),"Pacote de crack (boa) [%dg] [VW: %d]\n", DropInfo[dr][dAmmo],DropInfo[dr][dWorld]);
		   		            case 9: format(NomeDrug,sizeof(NomeDrug),"Pacote de crack (excelente) [%dg] [VW: %d]\n", DropInfo[dr][dAmmo],DropInfo[dr][dWorld]);

		   		            case 10: format(NomeDrug,sizeof(NomeDrug),"Pacote de LSD (ruim) [%dg] [VW: %d]\n", DropInfo[dr][dAmmo],DropInfo[dr][dWorld]);
		   		            case 11: format(NomeDrug,sizeof(NomeDrug),"Pacote de LSD (boa) [%dg] [VW: %d]\n", DropInfo[dr][dAmmo],DropInfo[dr][dWorld]);
		   		            case 12: format(NomeDrug,sizeof(NomeDrug),"Pacote de LSD (excelente) [%dg] [VW: %d]\n", DropInfo[dr][dAmmo],DropInfo[dr][dWorld]);

		   		            case 13: format(NomeDrug,sizeof(NomeDrug),"Pacote de Metanfetamina (ruim) [%dg] [VW: %d]\n", DropInfo[dr][dAmmo],DropInfo[dr][dWorld]);
		   		            case 14: format(NomeDrug,sizeof(NomeDrug),"Pacote de Metanfetamina (boa) [%dg] [VW: %d]\n", DropInfo[dr][dAmmo],DropInfo[dr][dWorld]);
		   		            case 15: format(NomeDrug,sizeof(NomeDrug),"Pacote de Metanfetamina (excelente) [%dg] [VW: %d]\n", DropInfo[dr][dAmmo],DropInfo[dr][dWorld]);
						}
						strcat(Linha1, NomeDrug);
						VendoListaPegar[playerid][AchouAlgo] = dr;
						VendoListaPegarT[playerid][AchouAlgo] = 3;
						AchouAlgo++;
					//}
				}
			}
		}
	}
	Dialog_Show(playerid, Dialog_PegarItem, DIALOG_STYLE_LIST, "[ADMIN] Itens próximos", Linha1, "Pegar", "Cancelar");

	if(AchouAlgo == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Não há nada para pegar por aqui.");
	return 1;
}

CMD:pegar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando dentro de um veículo.");
    if(OutrasInfos[playerid][oAlgemado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode realizar essa ação estando algemado.");
	if(PlayerInfo[playerid][pLevel] < 3) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 3 ou mais para dropar algo.");
 	if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode realizar essa ação estando morto.");
	if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;

	new AchouAlgo = 0;
	new Linha1[1024], LinhaAtt[256];
	format(Linha1, sizeof(Linha1), "");

	new i = 0, f = 0, d = 0;
    new World = GetPlayerVirtualWorld(playerid);
	for(new a = 0; a < MAX_CARTUXO; a++)
	{
	    if(CartuxoData[a][cartuxoEditando] == 0)
	    {
			if(AchouAlgo < 30)
			{
		 		if(IsPlayerInRangeOfPoint(playerid, 2.0, CartuxoData[a][cartuxoX], CartuxoData[a][cartuxoY], CartuxoData[a][cartuxoZ]))
		   		{
		   		    if(CartuxoData[a][cartuxoWorld] == World)
		   		    {
		     			i = a;
		     			if(CartuxoData[i][CartuxoTipo] == 1)
						{
							format(LinhaAtt, 126, "Caixa de munição: 9mm (%d)\n", CartuxoData[a][cartuxoQnt]); strcat(Linha1, LinhaAtt);
							VendoListaPegar[playerid][AchouAlgo] = i;
							VendoListaPegarT[playerid][AchouAlgo] = 1;
						}
						else if(CartuxoData[i][CartuxoTipo] == 2)
						{
							format(LinhaAtt, 126, "Caixa de munição: 5.56mm (%d)\n", CartuxoData[a][cartuxoQnt]); strcat(Linha1, LinhaAtt);
							VendoListaPegar[playerid][AchouAlgo] = i;
							VendoListaPegarT[playerid][AchouAlgo] = 1;
					 	}
						else if(CartuxoData[i][CartuxoTipo] == 3)
						{
							format(LinhaAtt, 126, "Caixa de munição: Cartuchos (%d)\n", CartuxoData[a][cartuxoQnt]); strcat(Linha1, LinhaAtt);
							VendoListaPegar[playerid][AchouAlgo] = i;
							VendoListaPegarT[playerid][AchouAlgo] = 1;
						}
						else if(CartuxoData[i][CartuxoTipo] == 4)
						{
						    format(LinhaAtt, 126, "Caixa de munição: 12.7x106mm (%d)\n", CartuxoData[a][cartuxoQnt]); strcat(Linha1, LinhaAtt);
							VendoListaPegar[playerid][AchouAlgo] = i;
							VendoListaPegarT[playerid][AchouAlgo] = 1;
						}
						AchouAlgo++;
					}
				}
			}
		}
	}
	for(new a = 0; a < MAX_ARMAS; a++)
	{
		if(AchouAlgo < 30)
		{
	 		if(IsPlayerInRangeOfPoint(playerid, 2.0, ArmaData[a][ArmaX], ArmaData[a][ArmaY], ArmaData[a][ArmaZ]))
	   		{
	   		    if(ArmaData[a][ArmaWorld] == World && ArmaData[a][ArmaNoChao] == 1 && ArmaData[a][ArmaEditando] != 1)
	   		    {
	     			f = a;
					format(LinhaAtt, 126, "Arma: %s, %d balas (%d)\n", GunNames[ArmaData[a][ArmaModelo]], ArmaData[a][ArmaAmmo], ArmaData[a][ArmaNumeracao]); strcat(Linha1, LinhaAtt);
					VendoListaPegar[playerid][AchouAlgo] = f;
					VendoListaPegarT[playerid][AchouAlgo] = 2;
					AchouAlgo++;
				}
			}
		}
	}
	for(new dr = 0; dr < MAX_DRUGDROP; dr++)
	{
	    if(AchouAlgo < 30)
		{
	 		if(IsPlayerInRangeOfPoint(playerid, 2.0, DropInfo[dr][dX], DropInfo[dr][dY], DropInfo[dr][dZ]))
	   		{
	   		    if(DropInfo[dr][dEditando] == 0)
	   		    {
		   		    if(DropInfo[dr][dWorld] == World)
		   		    {
		   		        new NomeDrug[56];
		   		        switch(DropInfo[dr][dType])
		   		        {
		   		            case 1: format(NomeDrug,sizeof(NomeDrug),"Pacote de maconha (ruim) [%dg]\n", DropInfo[dr][dAmmo]);
		   		            case 2: format(NomeDrug,sizeof(NomeDrug),"Pacote de maconha (boa) [%dg]\n", DropInfo[dr][dAmmo]);
		   		            case 3: format(NomeDrug,sizeof(NomeDrug),"Pacote de maconha (excelente) [%dg]\n", DropInfo[dr][dAmmo]);

		   		            case 4: format(NomeDrug,sizeof(NomeDrug),"Pacote de cocaina (ruim) [%dg]\n", DropInfo[dr][dAmmo]);
		   		            case 5: format(NomeDrug,sizeof(NomeDrug),"Pacote de cocaina (boa) [%dg]\n", DropInfo[dr][dAmmo]);
		   		            case 6: format(NomeDrug,sizeof(NomeDrug),"Pacote de cocaina (excelente) [%dg]\n", DropInfo[dr][dAmmo]);

		   		            case 7: format(NomeDrug,sizeof(NomeDrug),"Pacote de crack (ruim) [%dg]\n", DropInfo[dr][dAmmo]);
		   		            case 8: format(NomeDrug,sizeof(NomeDrug),"Pacote de crack (boa) [%dg]\n", DropInfo[dr][dAmmo]);
		   		            case 9: format(NomeDrug,sizeof(NomeDrug),"Pacote de crack (excelente) [%dg]\n", DropInfo[dr][dAmmo]);

		   		            case 10: format(NomeDrug,sizeof(NomeDrug),"Pacote de LSD (ruim) [%dg]\n", DropInfo[dr][dAmmo]);
		   		            case 11: format(NomeDrug,sizeof(NomeDrug),"Pacote de LSD (boa) [%dg]\n", DropInfo[dr][dAmmo]);
		   		            case 12: format(NomeDrug,sizeof(NomeDrug),"Pacote de LSD (excelente) [%dg]\n", DropInfo[dr][dAmmo]);

		   		            case 13: format(NomeDrug,sizeof(NomeDrug),"Pacote de Metanfetamina (ruim) [%dg]\n", DropInfo[dr][dAmmo]);
		   		            case 14: format(NomeDrug,sizeof(NomeDrug),"Pacote de Metanfetamina (boa) [%dg]\n", DropInfo[dr][dAmmo]);
		   		            case 15: format(NomeDrug,sizeof(NomeDrug),"Pacote de Metanfetamina (excelente) [%dg]\n", DropInfo[dr][dAmmo]);
						}
						strcat(Linha1, NomeDrug);
						d = dr;
						VendoListaPegar[playerid][AchouAlgo] = dr;
						VendoListaPegarT[playerid][AchouAlgo] = 3;
						AchouAlgo++;
					}
				}
			}
		}
	}
	//===============================================================================
	if(AchouAlgo == 1 && i != 0)
	{
	    if(CartuxoData[i][cartuxoX] == 0.0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta caixa de munição não está mais no chão.");
	    if(CartuxoData[i][cartuxoEditando] == 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta caixa de munição ainda não está disponivel.");

	    if(IsValidDynamicObject(CartuxoData[i][cartuxoObj])) DestroyDynamicObject(CartuxoData[i][cartuxoObj]);

		new NomeAmmo[24];
		if(CartuxoData[i][CartuxoTipo] == 1)
		{
			format(NomeAmmo, sizeof(NomeAmmo), "9mm");
			PlayerInfo[playerid][pMun9mm] += CartuxoData[i][cartuxoQnt];
		}
		else if(CartuxoData[i][CartuxoTipo] == 2)
		{
			format(NomeAmmo, sizeof(NomeAmmo), "5.56mm");
			PlayerInfo[playerid][pMun556] += CartuxoData[i][cartuxoQnt];
	 	}
		else if(CartuxoData[i][CartuxoTipo] == 3)
		{
			format(NomeAmmo, sizeof(NomeAmmo), "Cartuchos");
			PlayerInfo[playerid][pMunCart] += CartuxoData[i][cartuxoQnt];
		}
		else if(CartuxoData[i][CartuxoTipo] == 4)
		{
			format(NomeAmmo, sizeof(NomeAmmo), "12.7x106mm");
			PlayerInfo[playerid][pMun127] += CartuxoData[i][cartuxoQnt];
		}
	    format(string, sizeof(string), "[Munição] Você pegou uma caixa com %d balas de %s no chão.", CartuxoData[i][cartuxoQnt], NomeAmmo);
		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

	    CartuxoData[i][cartuxoX] = 0.0;
		CartuxoData[i][cartuxoY] = 0.0;
		CartuxoData[i][cartuxoZ] = 0.0;
		CartuxoData[i][cartuxoRX] = 0.0;
		CartuxoData[i][cartuxoRY] = 0.0;
		CartuxoData[i][cartuxoRZ] = 0.0;
		CartuxoData[i][cartuxoWorld] = 0;
		CartuxoData[i][cartuxoInt] = 0;
		CartuxoData[i][cartuxoQnt] = 0;
		SalvarAmmos(i);

		if(PlayerInfo[playerid][pEmServico] == 1)
		{
	  		new strl[126];
			format(strl, sizeof(strl), "[EM SERVIÇO] %s pegou uma caixa com %d balas de %s no chão.", PlayerName(playerid,0), CartuxoData[i][cartuxoQnt], NomeAmmo);
			LogCMD_Pegar(strl);
		}
		else
		{
		    new strl[126];
			format(strl, sizeof(strl), "%s pegou uma caixa com %d balas de %s no chão.", PlayerName(playerid,0), CartuxoData[i][cartuxoQnt], NomeAmmo);
			LogCMD_Pegar(strl);
		}

		return 1;
	}
	//
	if(AchouAlgo == 1 && f != 0)
	{
	    if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve guardar o taser antes de pegar uma arma.");
	    if(PlayerInfo[playerid][pArmaMao] != 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem alguma arma em mãos");
    	if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa largar a caixa para realizar essa ação.");

        if(ArmaData[f][ArmaNoChao] != 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta arma não está mais no chão.");
        if(ArmaData[f][ArmaEditando] == 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta arma ainda está sendo editada.");

	    if(IsValidDynamicObject(ArmaData[f][ArmaObj])) DestroyDynamicObject(ArmaData[f][ArmaObj]);

	    //SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaData[f][ArmaModelo]], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[f][ArmaRGB]);
	    if(ArmaData[f][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaData[f][ArmaModelo]], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[f][ArmaRGB]);
	    else SetPlayerAttachedObject(playerid, 0, ArmaData[f][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[f][ArmaRGB]);


		if(ArmaData[f][ArmaModelo] == 42)
		    GivePlayerWeapon(playerid,ArmaData[f][ArmaModelo], 999999);
		else
			GivePlayerWeapon(playerid,ArmaData[f][ArmaModelo],ArmaData[f][ArmaAmmo]);

		format(string, sizeof(string), "[Arma Primária] Você pegou uma %s com %d de munição do chão. (%d)", GunNames[ArmaData[f][ArmaModelo]], ArmaData[f][ArmaAmmo], ArmaData[f][ArmaNumeracao]);
		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

	    PlayerInfo[playerid][pArmaMao] = f;
	    ArmaData[f][ArmaX] = 0.0;
		ArmaData[f][ArmaY] = 0.0;
		ArmaData[f][ArmaZ] = 0.0;
		ArmaData[f][ArmaNoChao] = 0;
		ArmaData[f][ArmaCom] = PlayerInfo[playerid][pID];
		ArmaData[f][ArmaWorld] = 0;
		ArmaData[f][ArmaInt] = 0;
		ArmaData[f][ArmaEditando] = 0;
		SalvarArma(f);
		AchouAlgo= 1;

		if(PlayerInfo[playerid][pEmServico] == 1)
		{
	  		new strl[126];
			format(strl, sizeof(strl), "[EM SERVIÇO] %s pegou uma %s com %d do chão. [ %d ]", PlayerName(playerid,0), GunNames[ArmaData[f][ArmaModelo]], ArmaData[f][ArmaAmmo], ArmaData[f][ArmaNumeracao]);
			LogCMD_Pegar(strl);
		}
		else
		{
		    new strl[126];
			format(strl, sizeof(strl), "%s pegou uma %s com %d do chão. [ %d ]", PlayerName(playerid,0), GunNames[ArmaData[f][ArmaModelo]], ArmaData[f][ArmaAmmo], ArmaData[f][ArmaNumeracao]);
			LogCMD_Pegar(strl);
		}

		return 1;
	}
	if(AchouAlgo == 1 && d != 0)
	{
        if(DropInfo[d][dAmmo] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este pacote de drogas não está mais no chão.");
        if(DropInfo[d][dEditando] == 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este pacote de drogas ainda não está no chão.");

    	new NomeDrug[56];
     	switch(DropInfo[d][dType])
      	{
       		case 1: format(NomeDrug,sizeof(NomeDrug),"Pacote de maconha (ruim) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][MaconhaR] += DropInfo[d][dAmmo];
         	case 2: format(NomeDrug,sizeof(NomeDrug),"Pacote de maconha (boa) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][MaconhaB] += DropInfo[d][dAmmo];
          	case 3: format(NomeDrug,sizeof(NomeDrug),"Pacote de maconha (excelente) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][MaconhaE] += DropInfo[d][dAmmo];

			case 4: format(NomeDrug,sizeof(NomeDrug),"Pacote de cocaina (ruim) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][CocaR] += DropInfo[d][dAmmo];
   			case 5: format(NomeDrug,sizeof(NomeDrug),"Pacote de cocaina (boa) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][CocaB] += DropInfo[d][dAmmo];
      		case 6: format(NomeDrug,sizeof(NomeDrug),"Pacote de cocaina (excelente) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][CocaE] += DropInfo[d][dAmmo];

			case 7: format(NomeDrug,sizeof(NomeDrug),"Pacote de crack (ruim) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][CrackR] += DropInfo[d][dAmmo];
   			case 8: format(NomeDrug,sizeof(NomeDrug),"Pacote de crack (boa) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][CrackB] += DropInfo[d][dAmmo];
      		case 9: format(NomeDrug,sizeof(NomeDrug),"Pacote de crack (excelente) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][CrackE] += DropInfo[d][dAmmo];

			case 10: format(NomeDrug,sizeof(NomeDrug),"Pacote de LSD (ruim) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][LSDR] += DropInfo[d][dAmmo];
   			case 11: format(NomeDrug,sizeof(NomeDrug),"Pacote de LSD (boa) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][LSDB] += DropInfo[d][dAmmo];
      		case 12: format(NomeDrug,sizeof(NomeDrug),"Pacote de LSD (excelente) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][LSDE] += DropInfo[d][dAmmo];

			case 13: format(NomeDrug,sizeof(NomeDrug),"Pacote de Metanfetamina (ruim) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][MetR] += DropInfo[d][dAmmo];
   			case 14: format(NomeDrug,sizeof(NomeDrug),"Pacote de Metanfetamina (boa) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][MetB] += DropInfo[d][dAmmo];
   			case 15: format(NomeDrug,sizeof(NomeDrug),"Pacote de Metanfetamina (excelente) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][MetE] += DropInfo[d][dAmmo];
			
			case 16: format(NomeDrug,sizeof(NomeDrug),"Tubo de lança perfume com %dml.", DropInfo[d][dAmmo]), PlayerDroga[playerid][LancaPer] += DropInfo[d][dAmmo];
			case 17: format(NomeDrug,sizeof(NomeDrug),"Pasta base de cocaina %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][PBC] += DropInfo[d][dAmmo];
			case 18: format(NomeDrug,sizeof(NomeDrug),"Sementes de maconha %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][Sementes] += DropInfo[d][dAmmo];
		}

		format(string, sizeof(string), "[DROGAS] Você pegou um %s do chão.", NomeDrug);
		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

        if(IsValidDynamicObject(DropInfo[d][dObject])) DestroyDynamicObject(DropInfo[d][dObject]);

	    DropInfo[d][dX] = 0.0;
		DropInfo[d][dY] = 0.0;
		DropInfo[d][dZ] = 0.0;
		DropInfo[d][dType] = 0;
		DropInfo[d][dAmmo] = 0;
		DropInfo[d][dWorld] = 0;
		DropInfo[d][dInt] = 0;

		new str2[520];
   		format(str2,sizeof(str2),"DELETE FROM `drop_drug` WHERE `dID` = '%d'", DropInfo[d][dID]);
   		mysql_function_query(Pipeline, str2, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

		SaveDrogas(playerid);
		AchouAlgo= 1;

		if(PlayerInfo[playerid][pEmServico] == 1)
		{
	  		new strl[126];
			format(strl, sizeof(strl), "[EM SERVIÇO] %s pegou um %s do chão", PlayerName(playerid,0), NomeDrug);
			LogCMD_Pegar(strl);
		}
		else
		{
		    new strl[126];
			format(strl, sizeof(strl), "%s pegou um %s do chão", PlayerName(playerid,0), NomeDrug);
			LogCMD_Pegar(strl);
		}
		return 1;
	}
	if(AchouAlgo > 1)
	{
	    Dialog_Show(playerid, Dialog_PegarItem, DIALOG_STYLE_LIST, "Itens próximos", Linha1, "Pegar", "Cancelar");
	}
	if(AchouAlgo == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Não há nada para pegar por aqui.");
	return 1;
}

Dialog:Dialog_PegarItem(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
        if(VendoListaPegarT[playerid][listitem] == 1)
        {
            new i = VendoListaPegar[playerid][listitem];

            if(CartuxoData[i][cartuxoX] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta caixa de munição não está mais no chão.");
            if(CartuxoData[i][cartuxoEditando] == 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta caixa de munição está sendo editada.");

            if(IsValidDynamicObject(CartuxoData[i][cartuxoObj])) DestroyDynamicObject(CartuxoData[i][cartuxoObj]);

			new NomeAmmo[24];
			if(CartuxoData[i][CartuxoTipo] == 1)
			{
				format(NomeAmmo, sizeof(NomeAmmo), "9mm");
				PlayerInfo[playerid][pMun9mm] += CartuxoData[i][cartuxoQnt];
			}
			else if(CartuxoData[i][CartuxoTipo] == 2)
			{
				format(NomeAmmo, sizeof(NomeAmmo), "5.56mm");
				PlayerInfo[playerid][pMun556] += CartuxoData[i][cartuxoQnt];
		 	}
			else if(CartuxoData[i][CartuxoTipo] == 3)
			{
				format(NomeAmmo, sizeof(NomeAmmo), "Cartuchos");
				PlayerInfo[playerid][pMunCart] += CartuxoData[i][cartuxoQnt];
			}
			else if(CartuxoData[i][CartuxoTipo] == 4)
			{
				format(NomeAmmo, sizeof(NomeAmmo), "12.7x106mm");
				PlayerInfo[playerid][pMun127] += CartuxoData[i][cartuxoQnt];
			}
		    format(string, sizeof(string), "[Munição] Você pegou uma caixa com %d balas de %s no chão.", CartuxoData[i][cartuxoQnt], NomeAmmo);
			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

		    CartuxoData[i][cartuxoX] = 0.0;
			CartuxoData[i][cartuxoY] = 0.0;
			CartuxoData[i][cartuxoZ] = 0.0;
			CartuxoData[i][cartuxoRX] = 0.0;
			CartuxoData[i][cartuxoRY] = 0.0;
			CartuxoData[i][cartuxoRZ] = 0.0;
			CartuxoData[i][cartuxoWorld] = 0;
			CartuxoData[i][cartuxoInt] = 0;
			CartuxoData[i][cartuxoQnt] = 0;
			SalvarAmmos(i);

			if(PlayerInfo[playerid][pEmServico] == 1)
			{
		  		new strl[126];
				format(strl, sizeof(strl), "[EM SERVIÇO] %s pegou uma caixa com %d balas de %s no chão.", PlayerName(playerid,0), CartuxoData[i][cartuxoQnt], NomeAmmo);
				LogCMD_Pegar(strl);
			}
			else
			{
			    new strl[126];
				format(strl, sizeof(strl), "%s pegou uma caixa com %d balas de %s no chão.", PlayerName(playerid,0), CartuxoData[i][cartuxoQnt], NomeAmmo);
				LogCMD_Pegar(strl);
			}
			return 1;
        }
        if(VendoListaPegarT[playerid][listitem] == 2)
        {
            if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve guardar o taser antes de pegar uma arma.");
            if(PlayerInfo[playerid][pArmaMao] != 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem alguma arma em mãos");
    		if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa largar a caixa para realizar essa ação.");

            new f = VendoListaPegar[playerid][listitem];

    		if(ArmaData[f][ArmaNoChao] != 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta arma não está mais no chão.");
    		if(ArmaData[f][ArmaEditando] == 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta arma está sendo editada.");

            if(IsValidDynamicObject(ArmaData[f][ArmaObj])) DestroyDynamicObject(ArmaData[f][ArmaObj]);

		    if(ArmaData[f][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaData[f][ArmaModelo]], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[f][ArmaRGB]);
		    else SetPlayerAttachedObject(playerid, 0, ArmaData[f][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[f][ArmaRGB]);

			if(ArmaData[f][ArmaModelo] == 42)
				GivePlayerWeapon(playerid,ArmaData[f][ArmaModelo],999999999);
			else
				GivePlayerWeapon(playerid,ArmaData[f][ArmaModelo],ArmaData[f][ArmaAmmo]);

			format(string, sizeof(string), "[Arma Primária] Você pegou uma %s com %d de munição do chão. (%d)", GunNames[ArmaData[f][ArmaModelo]], ArmaData[f][ArmaAmmo], ArmaData[f][ArmaNumeracao]);
			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

		    PlayerInfo[playerid][pArmaMao] = f;
		    ArmaData[f][ArmaX] = 0.0;
			ArmaData[f][ArmaY] = 0.0;
			ArmaData[f][ArmaZ] = 0.0;
			ArmaData[f][ArmaNoChao] = 0;
			ArmaData[f][ArmaCom] = PlayerInfo[playerid][pID];
			ArmaData[f][ArmaWorld] = 0;
			ArmaData[f][ArmaInt] = 0;
			ArmaData[f][ArmaEditando] = 0;
			SalvarArma(f);

			if(PlayerInfo[playerid][pEmServico] == 1)
			{
		  		new strl[126];
				format(strl, sizeof(strl), "[EM SERVIÇO] %s pegou uma %s com %d do chão. [ %d ]", PlayerName(playerid,0), GunNames[ArmaData[f][ArmaModelo]], ArmaData[f][ArmaAmmo], ArmaData[f][ArmaNumeracao]);
				LogCMD_Pegar(strl);
			}
			else
			{
			    new strl[126];
				format(strl, sizeof(strl), "%s pegou uma %s com %d do chão. [ %d ]", PlayerName(playerid,0), GunNames[ArmaData[f][ArmaModelo]], ArmaData[f][ArmaAmmo], ArmaData[f][ArmaNumeracao]);
				LogCMD_Pegar(strl);
			}
			return 1;
        }
        if(VendoListaPegarT[playerid][listitem] == 3)
        {
            new d = VendoListaPegar[playerid][listitem];

            if(DropInfo[d][dAmmo] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este pacote de drogas não está mais no chão.");
            if(DropInfo[d][dEditando] == 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este pacote de drogas ainda não está no chão.");

	    	new NomeDrug[56];
	     	switch(DropInfo[d][dType])
	      	{
	       		case 1: format(NomeDrug,sizeof(NomeDrug),"Pacote de maconha (ruim) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][MaconhaR] += DropInfo[d][dAmmo];
	         	case 2: format(NomeDrug,sizeof(NomeDrug),"Pacote de maconha (boa) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][MaconhaB] += DropInfo[d][dAmmo];
	          	case 3: format(NomeDrug,sizeof(NomeDrug),"Pacote de maconha (excelente) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][MaconhaE] += DropInfo[d][dAmmo];

				case 4: format(NomeDrug,sizeof(NomeDrug),"Pacote de cocaina (ruim) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][CocaR] += DropInfo[d][dAmmo];
	   			case 5: format(NomeDrug,sizeof(NomeDrug),"Pacote de cocaina (boa) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][CocaB] += DropInfo[d][dAmmo];
	      		case 6: format(NomeDrug,sizeof(NomeDrug),"Pacote de cocaina (excelente) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][CocaE] += DropInfo[d][dAmmo];

				case 7: format(NomeDrug,sizeof(NomeDrug),"Pacote de crack (ruim) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][CrackR] += DropInfo[d][dAmmo];
	   			case 8: format(NomeDrug,sizeof(NomeDrug),"Pacote de crack (boa) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][CrackB] += DropInfo[d][dAmmo];
	      		case 9: format(NomeDrug,sizeof(NomeDrug),"Pacote de crack (excelente) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][CrackE] += DropInfo[d][dAmmo];

				case 10: format(NomeDrug,sizeof(NomeDrug),"Pacote de LSD (ruim) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][LSDR] += DropInfo[d][dAmmo];
	   			case 11: format(NomeDrug,sizeof(NomeDrug),"Pacote de LSD (boa) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][LSDB] += DropInfo[d][dAmmo];
	      		case 12: format(NomeDrug,sizeof(NomeDrug),"Pacote de LSD (excelente) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][LSDE] += DropInfo[d][dAmmo];

				case 13: format(NomeDrug,sizeof(NomeDrug),"Pacote de Metanfetamina (ruim) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][MetR] += DropInfo[d][dAmmo];
	   			case 14: format(NomeDrug,sizeof(NomeDrug),"Pacote de Metanfetamina (boa) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][MetB] += DropInfo[d][dAmmo];
	   			case 15: format(NomeDrug,sizeof(NomeDrug),"Pacote de Metanfetamina (excelente) com %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][MetE] += DropInfo[d][dAmmo];
				
				case 16: format(NomeDrug,sizeof(NomeDrug),"Tubo de lança perfume com %dml.", DropInfo[d][dAmmo]), PlayerDroga[playerid][LancaPer] += DropInfo[d][dAmmo];
				case 17: format(NomeDrug,sizeof(NomeDrug),"Pasta base de cocaina %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][PBC] += DropInfo[d][dAmmo];
				case 18: format(NomeDrug,sizeof(NomeDrug),"Sementes de maconha %dg.", DropInfo[d][dAmmo]), PlayerDroga[playerid][Sementes] += DropInfo[d][dAmmo];
			}

			format(string, sizeof(string), "{FF6347}[DROGAS]{FFFFFF} Você pegou um %s do chão.", NomeDrug);
			SendClientMessage(playerid, COLOR_WHITE, string);

			if(IsValidDynamicObject(DropInfo[d][dObject])) DestroyDynamicObject(DropInfo[d][dObject]);

		    DropInfo[d][dX] = 0.0;
			DropInfo[d][dY] = 0.0;
			DropInfo[d][dZ] = 0.0;
			DropInfo[d][dType] = 0;
			DropInfo[d][dAmmo] = 0;
			DropInfo[d][dWorld] = 0;
			DropInfo[d][dInt] = 0;

			new str2[520];
   			format(str2,sizeof(str2),"DELETE FROM `drop_drug` WHERE `dID` = '%d'", DropInfo[d][dID]);
   			mysql_function_query(Pipeline, str2, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

			SaveDrogas(playerid);

			if(PlayerInfo[playerid][pEmServico] == 1)
			{
		  		new strl[126];
				format(strl, sizeof(strl), "[EM SERVIÇO] %s pegou um %s do chão.", PlayerName(playerid,0), NomeDrug);
				LogCMD_Pegar(strl);
			}
			else
			{
			    new strl[126];
				format(strl, sizeof(strl), "%s pegou um %s do chão.", PlayerName(playerid,0), NomeDrug);
				LogCMD_Pegar(strl);
			}
			return 1;
        }
	}
	return 1;
}
Dialog:Dialog_My_Ammos(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    new StrArm[562];
     	switch(listitem)
	    {
	    	case 0:
	    	{
				Menu_Armas[playerid][0] = 0;
				format(StrArm, sizeof(StrArm), "{007B00}Ver municões >>{FFFFFF}\nArmas:");
				if(PlayerInfo[playerid][pSlot1] > 0) format(StrArm, sizeof(StrArm), "%s\n1. %s [Munição:%d] [%d]", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo]], PlayerInfo[playerid][pSlot1a], ArmaData[PlayerInfo[playerid][pSlot1]][ArmaNumeracao]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 1 - Vazio", StrArm);
				if(PlayerInfo[playerid][pSlot2] > 0) format(StrArm, sizeof(StrArm), "%s\n2. %s [Munição:%d] [%d]", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo]], PlayerInfo[playerid][pSlot2a], ArmaData[PlayerInfo[playerid][pSlot2]][ArmaNumeracao]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 2 - Vazio", StrArm);
				if(PlayerInfo[playerid][pSlot3] > 0) format(StrArm, sizeof(StrArm), "%s\n3. %s [Munição:%d] [%d]", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo]], PlayerInfo[playerid][pSlot3a], ArmaData[PlayerInfo[playerid][pSlot3]][ArmaNumeracao]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 3 - Vazio", StrArm);
				if(PlayerInfo[playerid][pSlot4] > 0) format(StrArm, sizeof(StrArm), "%s\n4. %s [Munição:%d] [%d]", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo]], PlayerInfo[playerid][pSlot4a], ArmaData[PlayerInfo[playerid][pSlot4]][ArmaNumeracao]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 4 - Vazio", StrArm);
				if(PlayerInfo[playerid][pSlot5] > 0) format(StrArm, sizeof(StrArm), "%s\n5. %s [Munição:%d] [%d]", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo]], PlayerInfo[playerid][pSlot5a], ArmaData[PlayerInfo[playerid][pSlot5]][ArmaNumeracao]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
				Dialog_Show(playerid, Dialog_My_Armas, DIALOG_STYLE_LIST, "Minhas Armas", StrArm, "Selecionar", "Cancelar");
			}
			case 1:
			{
       			format(StrArm, sizeof(StrArm), "{FFFFFF}<< Ver Armas\n[1. 9mm: (%d) ]",PlayerInfo[playerid][pMun9mm]);
				format(StrArm, sizeof(StrArm), "%s\n[2. 5x56mm: (%d)]",StrArm,PlayerInfo[playerid][pMun556]);
				format(StrArm, sizeof(StrArm), "%s\n[3. Cartucho: (%d)]",StrArm,PlayerInfo[playerid][pMunCart]);
				format(StrArm, sizeof(StrArm), "%s\n[4. 12.7x106mm: (%d)]",StrArm,PlayerInfo[playerid][pMun127]);
				Dialog_Show(playerid, Dialog_My_Ammos, DIALOG_STYLE_LIST, "Minhas Munições", StrArm, "Selecionar", "Cancelar");
			}
			default: return 1;
		}
	}
	return 1;
}

Dialog:Dialog_My_Armas(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new StrArm[562];
	    switch(listitem)
	    {
	        case 0:
	        {
	            format(StrArm, sizeof(StrArm), "{FFFFFF}<< Ver Armas\n[ 1. 9mm: (%d) ]",PlayerInfo[playerid][pMun9mm]);
				format(StrArm, sizeof(StrArm), "%s\n[ 2. 5x56mm: (%d) ]",StrArm,PlayerInfo[playerid][pMun556]);
				format(StrArm, sizeof(StrArm), "%s\n[ 3. Cartucho: (%d) ]",StrArm,PlayerInfo[playerid][pMunCart]);
				format(StrArm, sizeof(StrArm), "%s\n[ 4. 12.7x106mm: (%d) ]",StrArm,PlayerInfo[playerid][pMun127]);
				Dialog_Show(playerid, Dialog_My_Ammos, DIALOG_STYLE_LIST, "Minhas Munições", StrArm, "Selecionar", "Cancelar");
	        }
	        case 1:
	        {
				Menu_Armas[playerid][0] = 0;
				format(StrArm, sizeof(StrArm), "{FFFFFF}Ver municões >>");
				format(StrArm, sizeof(StrArm), "%s[ 1. %s (%d) ]", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo]]);
				format(StrArm, sizeof(StrArm), "%s[ 2. %s (%d) ]", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo]]);
				format(StrArm, sizeof(StrArm), "%s[ 3. %s (%d) ]", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo]]);
				format(StrArm, sizeof(StrArm), "%s[ 4. %s (%d) ]", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo]]);
				format(StrArm, sizeof(StrArm), "%s[ 5. %s (%d) ]", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo]]);
				Dialog_Show(playerid, Dialog_My_Armas, DIALOG_STYLE_LIST, "Minhas Armas", StrArm, "Selecionar", "Cancelar");
	        }
	    	case 2:
	    	{
	    	    Menu_Armas[playerid][0] = 1;
	    	    format(StrArm, sizeof(StrArm), "Pegar\nGuardar");
                Dialog_Show(playerid, Dialog_My_Armas2, DIALOG_STYLE_LIST, "Minhas Armas", StrArm, "Selecionar", "Cancelar");
			}
			case 3:
			{
                Menu_Armas[playerid][0] = 2;
	    	    format(StrArm, sizeof(StrArm), "Pegar\nGuardar");
                Dialog_Show(playerid, Dialog_My_Armas2, DIALOG_STYLE_LIST, "Minhas Armas", StrArm, "Selecionar", "Cancelar");
			}
			case 4:
			{
                Menu_Armas[playerid][0] = 3;
	    	    format(StrArm, sizeof(StrArm), "Pegar\nGuardar");
                Dialog_Show(playerid, Dialog_My_Armas2, DIALOG_STYLE_LIST, "Minhas Armas", StrArm, "Selecionar", "Cancelar");
			}
			case 5:
			{
                Menu_Armas[playerid][0] = 4;
	    	    format(StrArm, sizeof(StrArm), "Pegar\nGuardar");
                Dialog_Show(playerid, Dialog_My_Armas2, DIALOG_STYLE_LIST, "Minhas Armas", StrArm, "Selecionar", "Cancelar");
			}
			case 6:
			{
                Menu_Armas[playerid][0] = 5;
	    	    format(StrArm, sizeof(StrArm), "Pegar\nGuardar");
                Dialog_Show(playerid, Dialog_My_Armas2, DIALOG_STYLE_LIST, "Minhas Armas", StrArm, "Selecionar", "Cancelar");
			}
		}
	}
	return 1;
}

Dialog:Dialog_My_Armas2(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new StrArm[256];
	    switch(listitem)
	    {
	    	case 0:
	    	{
	    	    new SlotID = Menu_Armas[playerid][0];
 	   			if(SlotID == 1)
				{
					if(PlayerInfo[playerid][pSlot1] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo];
	    				new IdPahSalva = PlayerInfo[playerid][pSlot1];

					    GivePlayerWeapon(playerid,ArmaModel, PlayerInfo[playerid][pSlot1a]);

					    if(ArmaData[PlayerInfo[playerid][pSlot1]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pSlot1]][ArmaExtra], 6);

					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pSlot1] = 0;
					    format(StrArm, sizeof(StrArm), "Você pegou uma %s, pressione a tecla 'Y' para carrega-la.",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 1.");
				}
				else if(SlotID == 2)
				{
					if(PlayerInfo[playerid][pSlot2] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pSlot2];

					    GivePlayerWeapon(playerid,ArmaModel, PlayerInfo[playerid][pSlot2a]);
					    if(ArmaData[PlayerInfo[playerid][pSlot2]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pSlot2]][ArmaExtra], 6);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pSlot2] = 0;
                        format(StrArm, sizeof(StrArm), "Você pegou uma %s, pressione a tecla 'Y' para carrega-la.",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 2.");
				}
				else if(SlotID == 3)
				{
					if(PlayerInfo[playerid][pSlot3] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pSlot3];

					    GivePlayerWeapon(playerid,ArmaModel, PlayerInfo[playerid][pSlot3a]);
					    if(ArmaData[PlayerInfo[playerid][pSlot3]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pSlot3]][ArmaExtra], 6);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pSlot3] = 0;
					    format(StrArm, sizeof(StrArm), "Você pegou uma %s, pressione a tecla 'Y' para carrega-la.",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 3.");
				}
				else if(SlotID == 4)
				{
					if(PlayerInfo[playerid][pSlot4] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pSlot4];

					    GivePlayerWeapon(playerid,ArmaModel, PlayerInfo[playerid][pSlot4a]);
					    if(ArmaData[PlayerInfo[playerid][pSlot4]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pSlot4]][ArmaExtra], 6);

					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pSlot4] = 0;
					    format(StrArm, sizeof(StrArm), "Você pegou uma %s, pressione a tecla 'Y' para carrega-la.",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 4.");
				}
				else if(SlotID == 5)
				{
					if(PlayerInfo[playerid][pSlot5] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pSlot5];

					    GivePlayerWeapon(playerid,ArmaModel, PlayerInfo[playerid][pSlot5a]);
					    if(ArmaData[PlayerInfo[playerid][pSlot5]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pSlot5]][ArmaExtra], 6);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pSlot5] = 0;
					    format(StrArm, sizeof(StrArm), "Você pegou uma %s, pressione a tecla 'Y' para carrega-la.",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 5.");
				}
			}
			case 1:
			{
			    new modelo = ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaModelo];
				if(modelo != 1 && modelo != 3 && modelo != 4 && modelo != 22 && modelo != 23 && modelo != 24 && modelo != 28 && modelo != 41 && modelo != 43) return SendClientMessage(playerid,COLOR_LIGHTRED,"Essa arma é muito grande para guardar.");

			    new armaid = PlayerInfo[playerid][pArmaMao];
			    new SlotID = Menu_Armas[playerid][0];
 	   			if(SlotID == 1)
				{
					if(PlayerInfo[playerid][pSlot1] == 0)
					{
					    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem uma arma em mãos.");

	    				PlayerInfo[playerid][pSlot1] = PlayerInfo[playerid][pArmaMao];
				        PlayerInfo[playerid][pSlot1a] = GetPlayerAmmo(playerid);
	                    SCM(playerid, COLOR_LIGHTGREEN, "Arma guardada no Slot 1.");
				        ArmaData[armaid][ArmaCom] = 0;
					    RemovePlayerAttachedObject(playerid, 0);
					    //========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Já existe alguma arma no slot 1.");
				}
				if(SlotID == 2)
				{
					if(PlayerInfo[playerid][pSlot2] == 0)
					{
					    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem uma arma em mãos.");

	    				PlayerInfo[playerid][pSlot2] = PlayerInfo[playerid][pArmaMao];
				        PlayerInfo[playerid][pSlot2a] = GetPlayerAmmo(playerid);
	                    SCM(playerid, COLOR_LIGHTGREEN, "Arma guardada no Slot 2.");
				        ArmaData[armaid][ArmaCom] = 0;
					    RemovePlayerAttachedObject(playerid, 0);
					    //========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Já existe algumar arma no slot 1.");
				}
				if(SlotID == 3)
				{
					if(PlayerInfo[playerid][pSlot3] == 0)
					{
					    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem uma arma em mãos.");

	    				PlayerInfo[playerid][pSlot3] = PlayerInfo[playerid][pArmaMao];
				        PlayerInfo[playerid][pSlot3a] = GetPlayerAmmo(playerid);
	                    SCM(playerid, COLOR_LIGHTGREEN, "Arma guardada no Slot 3.");
				        ArmaData[armaid][ArmaCom] = 0;
					    RemovePlayerAttachedObject(playerid, 0);
					    //========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Já existe algumar arma no slot 1.");
				}
				if(SlotID == 4)
				{
					if(PlayerInfo[playerid][pSlot4] == 0)
					{
					    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem uma arma em mãos.");

	    				PlayerInfo[playerid][pSlot4] = PlayerInfo[playerid][pArmaMao];
				        PlayerInfo[playerid][pSlot4a] = GetPlayerAmmo(playerid);
	                    SCM(playerid, COLOR_LIGHTGREEN, "Arma guardada no Slot 4.");
				        ArmaData[armaid][ArmaCom] = 0;
					    RemovePlayerAttachedObject(playerid, 0);
					    //========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Já existe algumar arma no slot 1.");
				}
				if(SlotID == 5)
				{
					if(PlayerInfo[playerid][pSlot5] == 0)
					{
					    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem uma arma em mãos.");

	    				PlayerInfo[playerid][pSlot5] = PlayerInfo[playerid][pArmaMao];
				        PlayerInfo[playerid][pSlot5a] = GetPlayerAmmo(playerid);
	                    SCM(playerid, COLOR_LIGHTGREEN, "Arma guardada no Slot 5.");
				        ArmaData[armaid][ArmaCom] = 0;
					    RemovePlayerAttachedObject(playerid, 0);
					    //========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Já existe algumar arma no slot 1.");
				}
   			}
		}
	}
	return 1;
}

ALTCOMMAND:comprarlic->comprarlicenca;
CMD:comprarlicenca(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");

	new biz = PlayerInfo[playerid][pEntrouEmpresa];
	if(biz != -1)
	{
		if( EmpInfo[biz][eTipo] == EMP_TIPO_LIC_CENTER)
 			return Dialog_Show(playerid, DIALOG_CLICS, DIALOG_STYLE_TABLIST_HEADERS, "Comprar Licenças", "Categoria\tPreço\nMotorista\tR$150\nCaminhoneiro\tR$250", "Comprar", "Cancelar");
	}
	SetPlayerCheckpoint(playerid, 1991.5050,-1991.8192,13.5469, 3.0);
	cp_target[playerid] = 1;
	SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está no centro de Licenças, o mesmo foi marcado em seu mapa.");
	return 1;
}

Dialog:DIALOG_CLICS(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    switch(listitem)
	    {
	    	case 0: //Motorista
	    	{
	    	    if(PlayerInfo[playerid][pDriveLic] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você já tem uma licença de motorista.");
				if(PlayerInfo[playerid][pGrana] < 150) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem R$150 para comprar a licença de motorista.");
				PlayerInfo[playerid][pDriveLic] = 1;
				PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-150;
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Parabéns, você acaba de adquirir uma carteira de motorista.");
			}
			case 1: //Caminhoneiro
	    	{
	    	    if(PlayerInfo[playerid][pTruckLic] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você já tem uma licença de Caminhoneiro.");
				if(PlayerInfo[playerid][pGrana] < 250) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem R$250 para comprar a licença de Caminhoneiro.");
				PlayerInfo[playerid][pTruckLic] = 1;
				PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-250;
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Parabéns, você acaba de adquirir uma licença de Caminhoneiro.");
			}
		}
	}
	return 1;
}

stock IsPlayerAimings(playerid, aimid)
{
	new Float:X1, Float:Y1, Float:Z1, Float:X2, Float:Y2, Float:Z2;
	GetPlayerPos(playerid, X1, Y1, Z1);
	GetPlayerPos(aimid, X2, Y2, Z2);
	new Float:Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
	if(IsPlayerStreamedIn(playerid, aimid))
	{
		new Float:A;
	 	GetPlayerFacingAngle(playerid, A);
	 	X1 += (Distance * floatsin(-A, degrees));
	 	Y1 += (Distance * floatcos(-A, degrees));
	 	Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
		if(Distance < 1.0) return true;
	}
	return false;
}

CMD:ajuda(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");
    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________cp-frp.com.br.com______________");
    SendClientMessage(playerid, COLOR_ESPECIAL1, "[CONTA] /stats /upgrade /itens /inv(entario) /minhasdrogas /comprarlicenca /pegaremprego /mudarsenha /refundos");
    SendClientMessage(playerid, COLOR_ESPECIAL2, "[GERAL] /pagar /horas /relogio /comprar /id /bater /screen /pegar /removercp /cinto /tempopremium");
    SendClientMessage(playerid, COLOR_ESPECIAL1, "[GERAL] (/an)uncio /licencas /sos /limparchat /derrubar /corrigirvw /subir /darpeca /fomesede");
    SendClientMessage(playerid, COLOR_ESPECIAL2, "[CHAT] (/s)ussurar (/g)ritar (/l)ocal /me /b(OOC) /do /baixo /pm(OOC) (/r)adio /cw");
    SendClientMessage(playerid, COLOR_ESPECIAL1, "[BANCO] /sacar /depositar /transferir /savings /caixa");
    SendClientMessage(playerid, COLOR_ESPECIAL2, "[AJUDA] /ajudacelular /ajudacasa (/v)eiculo /ajudaempresa /ajudaemprego /ajudafaccao /ajudapesca");
    SendClientMessage(playerid, COLOR_ESPECIAL1, "[AJUDA] /ajudaradio /ajudadrogas /ajudaarma /ajudajogo /levantar /documentos /itensp /multas");
    SendClientMessage(playerid, COLOR_ESPECIAL2, "[TOG/ESTILOS/OUTROS] /tog /estilochat /estilocaminhada /afk /passarcigarro /passarbeck");
    if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pTester] > 0) SendClientMessage(playerid, COLOR_ESPECIAL1, "[ADMIN] /ajudaadmin(/aa) /ajudateam");
    SendClientMessage(playerid, COLOR_LIGHTGREEN, "____________________________________________");

	return 1;
}

CMD:refundos(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    Dialog_Show(playerid, RFPrincipal, DIALOG_STYLE_LIST, "Refundo", "Armas\nDinheiro\nDrogas e Munições", "Selecionar", "Cancelar");
	return 1;
}



Dialog:RFPrincipal(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
			switch (listitem)
			{
			    case 0:
			    {
			         Dialog_Show(playerid, RFArma, DIALOG_STYLE_INPUT, "Refundos", "Digite abaixo sua chave de refundo:", "Confirmar", "Cancelar");
			    }
			    case 1:
			    {
			         Dialog_Show(playerid, RFGrana, DIALOG_STYLE_INPUT, "Refundos", "Digite abaixo sua chave de refundo:", "Confirmar", "Cancelar");
			    }
			    case 2:
			    {
			         Dialog_Show(playerid, RFItem, DIALOG_STYLE_INPUT, "Refundos", "Digite abaixo sua chave de refundo:", "Confirmar", "Cancelar");
			    }
			}
	}
	return 1;
}

forward RefundoPendente(playerid);
public RefundoPendente(playerid)
{
	new b[256];
	new rows,fields;
	cache_get_data(rows, fields);
	new totalrefundos  = rows;
	if(totalrefundos > 0)
	{
	    format(b, 256, "[REFUNDO] Você tem %d refundo(s) aceito(s). Use '/refundos' para recebe-lo.", totalrefundos);
	    SendClientMessage(playerid, COLOR_LIGHTGREEN, b);
	}
}

forward ChecandoRefundo(playerid);
public ChecandoRefundo(playerid)
{
	new b[256];
	new rows,fields;
	cache_get_data(rows, fields);
	new totalrefundos  = rows;

	new strref[128], strRefundo[1028];

	if(totalrefundos > 0)
	{
	 	for(new i; i < totalrefundos; i++)
	  	{
	  	    cache_get_field_content(i,"rID",b);                 new refundoID = strval(b);
			//cache_get_field_content(i,"rTipo",b);				new refundoTipo = strval(b);
			cache_get_field_content(i,"rGrana",b);				new refundoGrana = strval(b);
			cache_get_field_content(i,"rArmaModel",b);			new refundoArma = strval(b);
			cache_get_field_content(i,"rArmaAmmo",b);			new refundoAmmo = strval(b);
			cache_get_field_content(i,"rDrugQnt",b);			new refundoDrugQnt = strval(b);

			if(refundoGrana > 0)
			{
			    PlayerInfo[playerid][pBanco] += refundoGrana;
			    format(strref, 128, "[REFUNDO]: {FFFFFF}Foi depositado em seu banco R$%d referente a um refundo.",refundoGrana);
			    SCM(playerid, COLOR_LIGHTGREEN, strref);
			    format(strRefundo, 256, "UPDATE `refundo` SET `rUsado` = '1' WHERE `rID`='%d'",refundoID);
				mysql_function_query(Pipeline, strRefundo, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);
			}
			if(refundoArma > 0)
			{
			    if(PlayerInfo[playerid][pLoadCrate] != -1) SendClientMessage(playerid, COLOR_WHITE, "[REFUNDO]: {FFFFFF}Você precisa largar a caixa para realizar essa ação, largue-a e use '/refundos'.");
				else if(PlayerInfo[playerid][pArmaMao] != 0) SendClientMessage(playerid, COLOR_LIGHTRED, "[REFUNDO]: {FFFFFF}Você já tem uma arma em mãos, guarde-a e use novamente '/refundos'.");
				else
				{
				    EntregandoArmaSQL(playerid, refundoArma, 0, 0, 0);
			    	format(strref, 128, "[REFUNDO]: {FFFFFF}Você recebeu uma %s referente a seu refundo.",GunNames[refundoArma]);
			    	SCM(playerid, COLOR_LIGHTGREEN, strref);
			    	format(strRefundo, 256, "UPDATE `refundo` SET `rUsado` = '1' WHERE `rID`='%d'",refundoID);
					mysql_function_query(Pipeline, strRefundo, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);
				}
			}
			if(refundoAmmo > 0)
			{
			    switch(refundoAmmo)
			    {
			        case 1:
					{
						PlayerInfo[playerid][pMun9mm] += refundoDrugQnt;
						format(strref, 128, "[REFUNDO]: {FFFFFF}Você recebeu %d munições de 9mm referente a seu refundo, estão em seu /inv.",refundoDrugQnt);
			    		SCM(playerid, COLOR_LIGHTGREEN, strref);
			    		format(strRefundo, 256, "UPDATE `refundo` SET `rUsado` = '1' WHERE `rID`='%d'",refundoID);
						mysql_function_query(Pipeline, strRefundo, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);
					}
					case 2:
					{
						PlayerInfo[playerid][pMun556] += refundoDrugQnt;
						format(strref, 128, "[REFUNDO]: {FFFFFF}Você recebeu %d munições de 5.56mm referente a seu refundo, estão em seu /inv.",refundoDrugQnt);
			    		SCM(playerid, COLOR_LIGHTGREEN, strref);
			    		format(strRefundo, 256, "UPDATE `refundo` SET `rUsado` = '1' WHERE `rID`='%d'",refundoID);
						mysql_function_query(Pipeline, strRefundo, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);
					}
					case 3:
					{
						PlayerInfo[playerid][pMunCart] += refundoDrugQnt;
						format(strref, 128, "[REFUNDO]: {FFFFFF}Você recebeu %d cartuchos referente a seu refundo, estão em seu /inv.",refundoDrugQnt);
			    		SCM(playerid, COLOR_LIGHTGREEN, strref);
			    		format(strRefundo, 256, "UPDATE `refundo` SET `rUsado` = '1' WHERE `rID`='%d'",refundoID);
						mysql_function_query(Pipeline, strRefundo, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);
					}
					case 4:
					{
						PlayerInfo[playerid][pMun127] += refundoDrugQnt;
						format(strref, 128, "[REFUNDO]: {FFFFFF}Você recebeu %d munições 12.7x106mm referente a seu refundo, estão em seu /inv.",refundoDrugQnt);
			    		SCM(playerid, COLOR_LIGHTGREEN, strref);
			    		format(strRefundo, 256, "UPDATE `refundo` SET `rUsado` = '1' WHERE `rID`='%d'",refundoID);
						mysql_function_query(Pipeline, strRefundo, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);
					}
			    }
			}
		}
	}
	else
	{
	    SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhum refundo pendente.");
	}
	return 1;
}

CMD:mudarsenha(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;

 	ShowPlayerDialog(playerid, DIALOG_NOVASENHA, DIALOG_STYLE_PASSWORD, "Alterar Senha", "\nAlteração da senha.\n\nSua senha deve conter no minimo 6 caracters\n", "Alterar", "Cancelar");
	return 1;
}

CMD:corrigirpos(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(CaindoInt[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está entrando em lugar nenhum.");

	if(PlayerInfo[playerid][pTemPreso] > 0)
	{
	    if(PlayerInfo[playerid][pPrisao] == 10)
		{
		    format(string, sizeof(string), "AVISO: Você está na prisão administrativa por %d minuto(s)", PlayerInfo[playerid][pTemPreso]);
			SendClientMessage(playerid, COLOR_LIGHTRED, string);

			SetPlayerPos(playerid,2523.9197,-1673.8944,14.8589);
  			TogglePlayerControllable(playerid, false);
    		SetPlayerInterior(playerid, 0);
     		SetPlayerVirtualWorld(playerid, playerid);
      		PlayerInfo[playerid][pEntrouEmpresa] = -1;
   			PlayerInfo[playerid][pEntrouCasa] = -1;
    		PlayerInfo[playerid][pEntrouComplexo] = -1;
    		PlayerInfo[playerid][pEntrouGaragem] = -1;

    		TogglePlayerControllable(playerid, 0);
		    CaindoInt[playerid] = 0;
		    CaindoInt_Av[playerid] = 0;
    		return 1;
		}
	    else if(PlayerInfo[playerid][pPrisao] == 1)
		{
			format(string, sizeof(string), "AVISO: Você está na prisão por %d minuto(s)", PlayerInfo[playerid][pTemPreso]);
			SendClientMessage(playerid, COLOR_LIGHTRED, string);
			SetPlayerPos(playerid, 264.6407,77.6321,1001.0391);

			SetPlayerVirtualWorld(playerid, 1052);
			SetPlayerInterior(playerid, 1);

			PlayerInfo[playerid][pEntrouEmpresa] = -1;
   			PlayerInfo[playerid][pEntrouCasa] = -1;
    		PlayerInfo[playerid][pEntrouComplexo] = 52;
    		PlayerInfo[playerid][pEntrouGaragem] = -1;

    		TogglePlayerControllable(playerid, 1);
		    CaindoInt[playerid] = 0;
		    CaindoInt_Av[playerid] = 0;
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Ocorreu um erro... Chame um Administrador.");
	}
    if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
   	{
   	    new EmpresID = PlayerInfo[playerid][pEntrouEmpresa];

	   	SetPlayerPos(playerid, EmpInfo[EmpresID][eInX],EmpInfo[EmpresID][eInY],EmpInfo[EmpresID][eInZ]);
		SetPlayerInterior(playerid, EmpInfo[EmpresID][eInt]);
		SetPlayerVirtualWorld(playerid,100+EmpresID);

		TogglePlayerControllable(playerid, 1);
	    CaindoInt[playerid] = 0;
	    CaindoInt_Av[playerid] = 0;
	    SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: Você corrigiu sua posição.");
		return 1;
	}
    if(PlayerInfo[playerid][pEntrouCasa] != -1)
    {
        new HousID = PlayerInfo[playerid][pEntrouCasa];

		SetPlayerPos(playerid, HouseInfo[HousID][hInX],HouseInfo[HousID][hInY],HouseInfo[HousID][hInZ]);
        SetPlayerInterior(playerid, HouseInfo[HousID][hInt]);
   	    if(HouseInfo[HousID][hTipo] == 0)
			SetPlayerVirtualWorld(playerid,100+HousID);
  		else
			SetPlayerVirtualWorld(playerid,0);

        TogglePlayerControllable(playerid, 1);
	    CaindoInt[playerid] = 0;
	    CaindoInt_Av[playerid] = 0;
	    SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: Você corrigiu sua posição.");
        return 1;
	}
	if(PlayerInfo[playerid][pEntrouComplexo] != -1)
	{
	    new ComplexID = PlayerInfo[playerid][pEntrouComplexo];

    	SetPlayerPos(playerid, ComplexoInfo[ComplexID][cInX],ComplexoInfo[ComplexID][cInY],ComplexoInfo[ComplexID][cInZ]);

		if(ComplexoInfo[ComplexID][complexTipo] == 5)
		{
   			SetPlayerInterior(playerid, ComplexoInfo[ComplexID][cInt]);
  			SetPlayerVirtualWorld(playerid,0);
		}
		else if(ComplexoInfo[ComplexID][complexTipo] == 10)
		{
  			SetPlayerInterior(playerid, ComplexoInfo[ComplexID][cInt]);
    		SetPlayerVirtualWorld(playerid, 10);
		}
		else
		{
  			SetPlayerInterior(playerid, ComplexoInfo[ComplexID][cInt]);
  			SetPlayerVirtualWorld(playerid,1000+ComplexID);
		}
		TogglePlayerControllable(playerid, 1);
	    CaindoInt[playerid] = 0;
	    CaindoInt_Av[playerid] = 0;
	    SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: Você corrigiu sua posição.");
		return 1;
	}
	if(PlayerInfo[playerid][pEntrouGaragem] != -1)
    {
        new HousID = PlayerInfo[playerid][pEntrouGaragem];

		SetPlayerPos(playerid, GaragemInfo[HousID][hInX],GaragemInfo[HousID][hInY],GaragemInfo[HousID][hInZ]);
        SetPlayerInterior(playerid, GaragemInfo[HousID][hInt]);
   	    SetPlayerVirtualWorld(playerid,10000+HousID);

        TogglePlayerControllable(playerid, 1);
	    CaindoInt[playerid] = 0;
	    CaindoInt_Av[playerid] = 0;
	    SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: Você corrigiu sua posição.");
        return 1;
	}
    return 1;
}

CMD:subir(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(SetandoPos[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está entrando em algum lugar.");

    new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	SetandoPos[playerid] = 0;
	SetPlayerPos(playerid, x, y, z+2.5);
	SendClientMessage(playerid, COLOR_LIGHTRED,"-- Você subiu.");
	return 1;
}

CMD:documentos(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pMorto] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está muito ferido.");

    new var,var2,tipo[128];
	if (sscanf(params, "sI(9999)I(9999)",tipo,var,var2))
	{
		SendClientMessage(playerid, COLOR_WHITE,"ERRO:{FFFFFF} /documentos [pessoal/veiculo]");
		return 1;
	}
	else
	{
	    if(strcmp(tipo, "pessoal", true) == 0)
	    {
	        if(var == 9999)
	        {
				SendClientMessage(playerid,COLOR_GREEN,"--------------------------------");
				SendClientMessage(playerid,COLOR_GREEN,"Identificação");
	            format(string,sizeof(string),"Nome: %s",PlayerName(playerid, 1));
	   			SendClientMessage(playerid, COLOR_WHITE, string);
	   			format(string,sizeof(string),"Data de Nascimento: %s",PlayerInfo[playerid][pAge]);
	   			SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid,COLOR_GREEN,"--------------------------------");
	   			SendClientMessage(playerid, COLOR_WHITE,"Você pode usar '/documentos pessoal [id]' para mostrar a alguém.");
	        }
	        else
	        {
	            if(GetDistanceBetweenPlayers(playerid,var) < 5.0)
				{
		            SendClientMessage(playerid,COLOR_GREEN,"--------------------------------");
					SendClientMessage(var,COLOR_GREEN,"Identificação");
		            format(string,sizeof(string),"Nome: %s",PlayerName(playerid, 1));
		   			SendClientMessage(var, COLOR_WHITE, string);
		   			format(string,sizeof(string),"Data de Nascimento: %s",PlayerInfo[playerid][pAge]);
		   			SendClientMessage(var, COLOR_WHITE, string);
					SendClientMessage(playerid,COLOR_GREEN,"--------------------------------");

		   			format(string,sizeof(string),"Você mostrou seus documentos pessoais para %s.",PlayerName(var, 1));
		   			SendClientMessage(playerid, COLOR_WHITE, string);
		   			format(string,sizeof(string),"%s lhe mostrou seus documentos.",PlayerName(playerid, 1));
		   			SendClientMessage(var, COLOR_WHITE, string);
				}
				else return SCM(playerid,COLOR_LIGHTRED, "Você não está próximo a este player");
			}
	    }
	    else if(strcmp(tipo, "veiculo", true) == 0)
	    {
	        if(var == 9999)
	        {
	            SendClientMessage(playerid, COLOR_WHITE,"ERRO:{FFFFFF} /documentos veiculo [veiculoid] [playerid]");
	            return 1;
	        }
	        else
	        {
	            if(var2 == 9999)
	        	{
	        	    new vname[256];
		            SendClientMessage(playerid,COLOR_GREEN,"DETRAN-RJ - IPVA");

		            new slot = GetVehicleSlot(var);
		            if(slot > -1)
		            {
		                if(VehicleInfo[slot][vOwner] == PlayerInfo[playerid][pID])
		                {
							GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
				            format(string,sizeof(string),"Modelo: %s", vname);
				   			SendClientMessage(playerid, COLOR_WHITE, string);

				   			format(string,sizeof(string),"Placa: %s", VehicleInfo[slot][vPlate]);
				   			SendClientMessage(playerid, COLOR_WHITE, string);

				   			format(string,sizeof(string),"Proprietario: %s", VehicleInfo[slot][vOwnerName]);
				   			SendClientMessage(playerid, COLOR_WHITE, string);

				   			SendClientMessage(playerid, COLOR_WHITE,"Você pode usar '/documentos veiculo veiculoid [id]' para mostrar a alguém.");
						}
						else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem os documentos deste veículo.");
		   			}
				}
				else
	        	{
	        	    if(GetDistanceBetweenPlayers(playerid,var2) < 8.0)
					{
		        	    new vname[256];
						SendClientMessage(var2,COLOR_GREEN,"DETRAN-RJ - IPVA");

			            new slot = GetVehicleSlot(var);
			            if(slot > -1)
			            {
			                if(VehicleInfo[slot][vOwner] == PlayerInfo[playerid][pID])
			                {
								GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
					            format(string,sizeof(string),"Modelo: %s", vname);
					   			SendClientMessage(var2, COLOR_WHITE, string);

					   			format(string,sizeof(string),"Placa: %s", VehicleInfo[slot][vPlate]);
					   			SendClientMessage(var2, COLOR_WHITE, string);

					   			format(string,sizeof(string),"Proprietário: %s", VehicleInfo[slot][vOwnerName]);
					   			SendClientMessage(var2, COLOR_WHITE, string);

					   			format(string,sizeof(string),"Você mostrou os documentos de seu %s para %s.",vname, PlayerName(var2, 1));
					   			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
					   			format(string,sizeof(string),"%s lhe mostrou os documentos de seu %s.",PlayerName(playerid, 1), vname);
					   			SendClientMessage(var2, COLOR_LIGHTGREEN, string);
							}
							else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem os documentos deste veículo.");
			   			}
	   				}
					else return SCM(playerid,COLOR_LIGHTRED, "Você não está próximo a este jogador.");
				}
			}
	    }
	}
	return 1;
}
ALTCOMMAND:passarbeck->passarcigarro;
ALTCOMMAND:passarcig->passarcigarro;
CMD:passarcigarro(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pMorto] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está muito ferido.");
	if(FumandoMaconha[playerid] != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está segurando um cigarro de maconha.");

	new var;
	if (sscanf(params, "I(9999)",var))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /passarcigarro [ID]");
		return 1;
	}
	else
	{
	    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID invalido.");
	    if(GetDistanceBetweenPlayers(playerid,var) < 5.0)
		{
		    if(PlayerInfo[var][pUsouDroga] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador já está sob o efeito de alguma droga.");
		    if(FumandoMaconhaQ[playerid] == 1)
		    {
		    	UsarDroga(var,1, 1);
				//SetPlayerWeather(var, -22);
				//SetPlayerTime( var, 10, 0);
				FumandoMaconha[var] = 1;
				FumandoMaconhaQ[var] = 1;
				SetPlayerSpecialAction(var,SPECIAL_ACTION_SMOKE_CIGGY);

				SetPlayerSpecialAction(playerid, 0);
				FumandoMaconha[playerid] = 0;

				format(string,sizeof(string),"Você passou para %s o baseado.",PlayerName(var, 1));
		   		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		   		format(string,sizeof(string),"%s lhe passou um baseado.",PlayerName(playerid, 1));
		   		SendClientMessage(var, COLOR_LIGHTGREEN, string);
			}
			else if(FumandoMaconhaQ[playerid] == 2)
		    {
		        UsarDroga(var,1, 2);
				//SetPlayerWeather(var, -22);
				//SetPlayerTime( var, 10, 0);
				FumandoMaconha[var] = 1;
				FumandoMaconhaQ[var] = 2;
				SetPlayerSpecialAction(var,SPECIAL_ACTION_SMOKE_CIGGY);

				SetPlayerSpecialAction(playerid, 0);
				FumandoMaconha[playerid] = 0;

				format(string,sizeof(string),"Você passou para %s o baseado.",PlayerName(var, 1));
		   		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		   		format(string,sizeof(string),"%s lhe passou um baseado.",PlayerName(playerid, 1));
		   		SendClientMessage(var, COLOR_LIGHTGREEN, string);
			}
			else if(FumandoMaconhaQ[playerid] == 3)
		    {
		        UsarDroga(var,1, 3);
				//SetPlayerWeather(var, -22);
				//SetPlayerTime( var, 10, 0);
				FumandoMaconha[var] = 1;
				FumandoMaconhaQ[var] = 3;
				SetPlayerSpecialAction(var,SPECIAL_ACTION_SMOKE_CIGGY);

				SetPlayerSpecialAction(playerid, 0);
				FumandoMaconha[playerid] = 0;

				format(string,sizeof(string),"Você passou um baseado para %s.",PlayerName(var, 1));
		   		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		   		format(string,sizeof(string),"%s lhe passou um baseado.",PlayerName(playerid, 1));
		   		SendClientMessage(var, COLOR_LIGHTGREEN, string);
		 	}
		}
		else return SendClientMessage(var, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a este jogador.");
	}
    return 1;
}

CMD:levantar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pMorto] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está muito ferido.");

	new var;
	if (sscanf(params, "I(9999)",var))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /levantar [ID]");
		return 1;
	}
	else
	{
 		if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /levantar [ID]");
 		if(var == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode se levantar.");
		if(!IsPlayerConnected(var)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido.");
    	if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido.");
    	if(!PlayerInfo[var][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido.");
    	if(PlayerInfo[var][pMorto] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não precisa de ajuda para levantar-se.");
		if(PlayerInfo[var][pTomouAlgumTiro] != 0 || PlayerInfo[var][pMorto] > 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador está ferido demais.");
		if(GetPVarInt(var, "TempoParaSerLevantado") < 400) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador ainda não pode ser levantado.");

  		format(string,sizeof(string),"Você ajudou %s a se levantar.",PlayerName(var, 1));
   		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
   		format(string,sizeof(string),"%s lhe ajudou a levantar.",PlayerName(playerid, 1));
   		SendClientMessage(var, COLOR_LIGHTGREEN, string);

		PlayerInfo[var][pMorto] = 0;
		SocosMorto[var] = 0;

		God_Aviso2[var] = 0;
		God_VidaAnterior2[var] = (PlayerInfo[var][pHealthMax]/2);
		P_Health[var] = (PlayerInfo[var][pHealthMax]/2);

		SetPlayerHealth(var, PlayerInfo[var][pHealthMax]/2);
		TogglePlayerControllable(var, 1);
		ZerarDamages(var);
		PlayerInfo[var][pTomouAlgumTiro] = 0;
		PlayerInfo[var][pTomouTiroPesado] = 0;
    	PlayerInfo[var][pTomouTiroBrancas] = 0;
		SetCameraBehindPlayer(var);

		if (IsValidDynamic3DTextLabel(TextMorto[var])) DestroyDynamic3DTextLabel(TextMorto[var]);
		TempoDesistir[var] = 0;
		TextDrawHideForPlayer(var,Telinha);
		return 1;
	}
}
CMD:desbugarmouse(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	CancelSelectTextDraw(playerid);
	return 1;
}

CMD:tempopreso(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
	if(PlayerInfo[playerid][pTemPreso] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está preso.");

	format(string, 126, "Tempo preso: %d minutos.",PlayerInfo[playerid][pTemPreso]);
    SendClientMessage(playerid, COLOR_LIGHTRED, string);

	return 1;
}

CMD:tempomorto(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
	if(PlayerInfo[playerid][pTempoMorto] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está no hospital.");

    new temporestante = (PlayerInfo[playerid][pTempoMorto]-gettime());

	format(string, 126, "Tempo para se recuperar: %d segundos.",temporestante);
    SendClientMessage(playerid, COLOR_LIGHTRED, string);

	return 1;
}

CMD:meuvw(playerid, params[]) {
	format(string, 126, "Virtual World: %d.",GetPlayerVirtualWorld(playerid));
    SendClientMessage(playerid, COLOR_LIGHTRED, string);
	return 1;
}

CMD:vervw(playerid, params[]) {
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
    if(!PlayerInfo[playerid][pAdmin]) return 1;
    new var;
	if (sscanf(params, "i",var))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /vervw [ID]");
		return 1;
	}
	else
	{
		format(string, 126, "Virtual World de %s: %d.",PlayerName(var, 1), GetPlayerVirtualWorld(var));
	    SendClientMessage(playerid, COLOR_LIGHTRED, string);
	}
	return 1;
}

CMD:corrigirvw(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
	if(PlayerInfo[playerid][pTemPreso] > 0) return 1;
	if(PlayerInfo[playerid][pTempoMorto] > 0) return 1;
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando dentro de um veículo.");
	if(PlayerInfo[playerid][pEntrouEmpresa] != -1 || PlayerInfo[playerid][pEntrouCasa] != -1 || PlayerInfo[playerid][pEntrouGaragem] != -1 || PlayerInfo[playerid][pEntrouComplexo] != -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando aqui.");

	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);

    CaindoInt[playerid] = 0;
    CaindoInt_Av[playerid] = 0;
    SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: Você corrigiu seu VW.");
	return 1;
}

COMMAND:usar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(FumandoCigarro[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode pegar um item em quanto fuma. ('/apagarcigarro')");

    if(isnull(params)) {
        SendClientMessage(playerid, COLOR_LIGHTGREEN, "___________________________Objetos Disponíveis (Temporário)___________________________");
        SendClientMessage(playerid, COLOR_WHITE, "USO: Utilize /usar [item] para utilizar o objeto desejado, /usar nenhum para retirar.");
        SendClientMessage(playerid, COLOR_GREY, "caixapizza, fatiapizza, sacoburguer, copoburguer, copoverde, coposprunk");
	    SendClientMessage(playerid, COLOR_GREY, "cerveja, cerveja2, cerveja3, latasprunk, grana, cadeirarodas, bud, bud2, corona, heineken, pubweissen");
        SendClientMessage(playerid, COLOR_GREY, "nenhum");
        return 1;
    }
    if(strcmp(params,"Nenhum",true) == 0)
	{
	    FumandoCigarro[playerid] = 0;
 		RemovePlayerAttachedObject(playerid, 5);
    }
    else
    {
        if(IsPlayerAttachedObjectSlotUsed(playerid, 5))
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Você já está usando um item do /usar. ( '/usar nenhum' para remover )");
            return 1;
        }

	    if(strcmp(params, "caixapizza", true) == 0) return SetPlayerAttachedObject( playerid, 5, 2814, 6, 0.321266, 0.057534, 0.057859, 97.888328, 0.880973, 190.630813, 1.000000, 1.000000, 1.000000 ); // GB_takeaway01 - Caixa de Pizza
		else if(strcmp(params, "fatiapizza", true) == 0) return SetPlayerAttachedObject( playerid, 5, 2702, 5, 0.177787, 0.098733, -0.008552, 142.440948, 201.057891, 94.765419, 1.000000, 1.000000, 1.000000 ); // CJ_PIZZA_1 - Fatia de pizza
		else if(strcmp(params, "sacoburguer", true) == 0) return SetPlayerAttachedObject( playerid, 5, 2663, 6, 0.265127, 0.015637, 0.053388, 355.166931, 262.028015, 1.171746, 1.000000, 1.000000, 1.000000 ); // CJ_BS_BAG - Saco de Hamburguers
		else if(strcmp(params, "copoburguer", true) == 0) return SetPlayerAttachedObject( playerid, 5, 2647, 6, 0.210432, 0.008932, 0.040378, 0.000000, 261.249572, 189.423721, 1.000000, 1.000000, 1.000000 ); // CJ_BS_CUP - Copo Burguer Shot
		else if(strcmp(params, "copoverde", true) == 0) return SetPlayerAttachedObject( playerid, 5, 1455, 6, 0.141407, 0.023757, 0.014947, 0.000000, 258.703643, 358.777435, 1.000000, 1.000000, 1.000000 ); // DYN_GLASS - Copo Verde de Bar
		else if(strcmp(params, "coposprunk", true) == 0) return SetPlayerAttachedObject( playerid, 5, 1546, 6, 0.129205, 0.029906, 0.000000, 0.000000, 262.837097, 0.000000, 1.000000, 1.000000, 1.000000 ); // CJ_PINT_GLASS - Copo de Sprunk
		else if(strcmp(params, "cerveja", true) == 0) return SetPlayerAttachedObject( playerid, 5, 1484, 6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // CJ_BEAR_BOTTLE - Garrafa branca de cerveja R*
		else if(strcmp(params, "cerveja2", true) == 0) return SetPlayerAttachedObject( playerid, 5, 1543, 6, 0.045896, 0.027469, -0.270195, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // CJ_BEER_B_2 - Cerveja Pissh
        else if(strcmp(params, "latasprunk", true) == 0) return SetPlayerAttachedObject( playerid, 5, 2601, 6, 0.056758, 0.054710, 0.022383, 358.989624, 319.544830, 174.580841, 1.000000, 1.000000, 1.000000 ); // CJ_JUICE_CAN - Lata de Sprunk
		else if(strcmp(params, "grana", true) == 0) return SetPlayerAttachedObject( playerid, 5, -2030, 6, 0.056758, 0.054710, 0.022383, 358.989624, 319.544830, 174.580841, 1.000000, 1.000000, 1.000000 ); // Money - Dinheiro na mÃ£o
        else if(strcmp(params, "cadeirarodas", true) == 0) return SetPlayerAttachedObject(playerid, 5, 932, 1, -0.780373, 0.043744, 0.089657, 188.440246, 92.957847, 355.417968, 1.000000, 1.000000, 1.000000);
		else if(strcmp(params, "bud", true) == 0) return SetPlayerAttachedObject( playerid, 5, -2043, 6, 0.056758, 0.054710, 0.022383, 358.989624, 319.544830, 174.580841, 1.000000, 1.000000, 1.000000 );

		else if(strcmp(params, "bud2", true) == 0) return SetPlayerAttachedObject( playerid, 5, -2056, 6, 0.045896, 0.027469, -0.270195, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
		else if(strcmp(params, "corona", true) == 0) return SetPlayerAttachedObject( playerid, 5, -2057, 6, 0.045896, 0.027469, -0.270195, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
		else if(strcmp(params, "heineken", true) == 0) return SetPlayerAttachedObject( playerid, 5, -2058, 6, 0.045896, 0.027469, -0.270195, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
		else if(strcmp(params, "pubweissen", true) == 0) return SetPlayerAttachedObject( playerid, 5, -2059, 6, 0.045896, 0.027469, -0.270195, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
	}

	return 1;
}

COMMAND:recarregar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(gettime() < FloodCMD[playerid]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Aguarde um segundo antes de usar um comando novamente.");
  	if(PlayerInfo[playerid][pMorto] > 0)  return SendClientMessage(playerid, COLOR_LIGHTRED, "Você está muito ferido para recarregar.");
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerAmmo(playerid) > 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve gastar toda a munição antes de recarregar a arma dentro do veículo.");
	if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Aguarde, o seu taser recarrega sozinho em alguns segundos.");

	new BalasFaltam,
	    MuniArma,
 		Arma = ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaModelo];
	if(Arma == 22)
	{
		if(PlayerInfo[playerid][pMun9mm] >= 1)
		{
		    MuniArma = 15;
		    BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
		    if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

  			if(PlayerInfo[playerid][pMun9mm] >= BalasFaltam)
	    	{
		    	PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-BalasFaltam;
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,22,MuniArma);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
			else
			{
   				ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,22,PlayerInfo[playerid][pMun9mm]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun9mm];

				PlayerInfo[playerid][pMun9mm] = 0;
    			if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição!");
	}
	if(Arma == 23)
	{
		if(PlayerInfo[playerid][pMun9mm] >= 1)
		{
		    MuniArma = 15;
		    BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
		    if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

		    if(PlayerInfo[playerid][pMun9mm] >= BalasFaltam)
		    {
			    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-BalasFaltam;
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,23,MuniArma);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
			else
			{
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,23,PlayerInfo[playerid][pMun9mm]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun9mm];

			    PlayerInfo[playerid][pMun9mm] = 0;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição!");
	}
	if(Arma == 24)
	{
		if(PlayerInfo[playerid][pMun9mm] >= 1)
		{
		    MuniArma = 15;
		    BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
		    if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

		    if(PlayerInfo[playerid][pMun9mm] >= BalasFaltam)
  			{
  				PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-BalasFaltam;
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,24,MuniArma);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
			else
			{
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,24,PlayerInfo[playerid][pMun9mm]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun9mm];

			    PlayerInfo[playerid][pMun9mm] = 0;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição!");
	}
	if(Arma == 25)
	{
	    if(PlayerInfo[playerid][pMunCart] >= 1)
		{
		    MuniArma = 25;
		    BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
		    if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

			if(PlayerInfo[playerid][pMunCart] >= BalasFaltam)
			{
		   		PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-BalasFaltam;
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,25,4);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
			else
			{
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,25,PlayerInfo[playerid][pMunCart]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMunCart];
			    PlayerInfo[playerid][pMunCart] = 0;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição!");
	}
	if(Arma == 28)
	{
		if(PlayerInfo[playerid][pMun9mm] >= 1)
		{
		    MuniArma = 30;
		    BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
		    if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

		    if(PlayerInfo[playerid][pMun9mm] >= BalasFaltam)
		    {
			    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-BalasFaltam;
				ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,28,MuniArma);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "UZI", "UZI_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
			else
			{
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,28,PlayerInfo[playerid][pMun9mm]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun9mm];

			    PlayerInfo[playerid][pMun9mm] = 0;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "UZI", "UZI_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição!");
	}
	if(Arma == 29)
	{
		if(PlayerInfo[playerid][pMun9mm] >= 1)
		{
		    MuniArma = 30;
		    BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
		    if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

		    if(PlayerInfo[playerid][pMun9mm] >= BalasFaltam)
		    {
			    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-BalasFaltam;
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,29,MuniArma);
			  	ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
			else
			{
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,29,PlayerInfo[playerid][pMun9mm]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun9mm];

			    PlayerInfo[playerid][pMun9mm] = 0;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição!");
	}
	if(Arma == 30)
	{
		if(PlayerInfo[playerid][pMun556] >= 1)
		{
		    MuniArma = 30;
		    BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
		    if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

		    if(PlayerInfo[playerid][pMun556] >= BalasFaltam)
		    {
			    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-BalasFaltam;
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,30,MuniArma);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
			else
			{
			    ResetPlayerWeapons(playerid);
   				GivePlayerWeapon(playerid,30,PlayerInfo[playerid][pMun556]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
   				ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun556];

			   	PlayerInfo[playerid][pMun556] = 0;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição!");
	}
	if(Arma == 31)
	{
		if(PlayerInfo[playerid][pMun556] >= 1)
		{
		    MuniArma = 31;
		    BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
		    if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

			if(PlayerInfo[playerid][pMun556] >= BalasFaltam)
			{
			    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-BalasFaltam;
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,31,MuniArma);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
			else
			{
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,31,PlayerInfo[playerid][pMun556]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun556];

			    PlayerInfo[playerid][pMun556] = 0;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição!");
	}
	if(Arma == 32)
	{
		if(PlayerInfo[playerid][pMun9mm] >= 1)
		{
		    MuniArma = 31;
		    BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
		    if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

		    if(PlayerInfo[playerid][pMun9mm] >= BalasFaltam)
		    {
			    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-BalasFaltam;
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,32,MuniArma);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "TEC", "TEC_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
			else
			{
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,32,PlayerInfo[playerid][pMun9mm]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun9mm];

			    PlayerInfo[playerid][pMun9mm] = 0;
			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "TEC", "TEC_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição!");
	}
	if(Arma == 33)
	{
		if(PlayerInfo[playerid][pMun556] >= 1)
		{
		    MuniArma = 10;
		    BalasFaltam = (MuniArma-ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			if(BalasFaltam < 0) { ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 0; BalasFaltam = MuniArma; }
		    if(BalasFaltam == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Sua arma já está carregada.");

		    if(PlayerInfo[playerid][pMun556] >= BalasFaltam)
		    {
			    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-BalasFaltam;
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,33,MuniArma);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = MuniArma;

			    if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
			else
			{
			    ResetPlayerWeapons(playerid);
			    GivePlayerWeapon(playerid,33,PlayerInfo[playerid][pMun556]+ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo]);
			    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = PlayerInfo[playerid][pMun556];

			    PlayerInfo[playerid][pMun556] = 0;
				if(!IsPlayerInAnyVehicle(playerid))
				{
					ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 1, 1, 1, 1, 1);
					SetTimerEx("StopTalk", 1000, false, "i", playerid);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está sem munição!");
	}
	if(Arma == 34)
	{
		if(PlayerInfo[playerid][pMun127] >= 5)
		{
	   		PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-1;
		    ResetPlayerWeapons(playerid);
  			GivePlayerWeapon(playerid,34,1);
		   	ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo] = 1;
		    if(!IsPlayerInAnyVehicle(playerid))
			{
				ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 0, 1, 1, 1, 1, 1);
				SetTimerEx("StopTalk", 1000, false, "i", playerid);
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você está sem munição!");
	}
	FloodCMD[playerid] = gettime()+2;
	return 1;
}

COMMAND:rebocar(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(IsPlayerConnected(playerid)) {
 		if(IsPlayerInAnyVehicle(playerid)) {
     		new m = GetVehicleModel(GetPlayerVehicleID(playerid));
    		if (m == 525 || m == 443) {
  	    		if(GetPlayerState(playerid)==2) {
	   	    	    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
    					DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
    				else {
						new currentveh;
						if (sscanf(params, "i", currentveh)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /rebocar [ID do veículo]");
     					else {
         				    new Float:vehx, Float:vehy, Float:vehz;
          					GetVehiclePos(currentveh, vehx, vehy, vehz);
          					if(IsPlayerInRangeOfPoint(playerid, 10, vehx, vehy, vehz)) {
    							if(FrenodeMano[currentveh] == 1) FrenodeMano[currentveh] = 0;
								AttachTrailerToVehicle(currentveh,GetPlayerVehicleID(playerid));
							}
							else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a este veículo.");
 						}
					}
				}
      			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa ser o condutor do guincho.");
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em um guincho.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em um guincho.");
	}
	return 1;
}


COMMAND:tentar(playerid,params[])
{
	if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
 	if(IsPlayerConnected(playerid))
	{
 		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em um carro.");

 		new str[126];
		if (sscanf(params, "s[126]", str))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /tentar [ação]");
			return 1;
		}
		new randa = random(3)+1;
		if(randa == 1) format(string, sizeof(string), "-> %s tenta %s e consegue.", PlayerName(playerid,1), str);
		else format(string, sizeof(string), "-> %s tenta %s, mas falha.", PlayerName(playerid,1), str);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

ALTCOMMAND:cwhisper->carwhisper;
ALTCOMMAND:cw->carwhisper;
COMMAND:carwhisper(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
 	if(IsPlayerConnected(playerid))
	{
 		if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em um carro.");

 		new str[126];
		if (sscanf(params, "s[126]", str))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "USE: (/cw)hisper [texto]");
			return 1;
		}
		new vehicle = GetPlayerVehicleID(playerid);
		for( new i = 0; i != MAX_PLAYERS; ++i )
		{
  			if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i))
	    	{
      			if(GetPlayerVehicleID(i) == vehicle)
       			{
       				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		           	{
      					format(string, sizeof(string), "Motorista %s sussurra: %s", PlayerName(playerid, 1), str);
     					SendClientMessage(i,  COLOR_YELLOW, string);
					}
					else
					{
 						format(string, sizeof(string), "Passageiro %s sussurra: %s", PlayerName(playerid, 1), str);
					  	SendClientMessage(i,  COLOR_YELLOW, string);
					}
			    }
			}
		}
	}
	return 1;
}

COMMAND:removercp(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	DisablePlayerCheckpoint(playerid);
	SendClientMessage(playerid,COLOR_LIGHTGREEN,"Checkpoint removido.");
	return 1;
}

COMMAND:boombox(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
 	if(IsPlayerConnected(playerid))
	{
 		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando de dentro de um veículo.");

 		new option[126],tmp2[256];
		if(sscanf(params, "s[126]S(nada)[256]", option, tmp2))
		{
			SendClientMessage(playerid,COLOR_LIGHTRED,"USO: /boombox [colocar / radio / url /desligar / pos(ição) / volume]");
			return 1;
		}
		if(strcmp(option, "colocar", true) == 0)
		{
		    new box = GetClosestBoomBox(playerid,20.0);
		    if(box == -1)
			{
				if(PlayerInfo[playerid][pBoombox] == 1)
			 	{
					if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][pMorto] == 0)
					{
			  			if(!HasPlacedBoomBox(playerid))
						{
							new Float:X, Float:Y, Float:Z, Float:R;
			    			new World = GetPlayerVirtualWorld(playerid);
						    GetPlayerPos(playerid,X,Y,Z);
						    GetPosInFrontOfPlayer(playerid, X, Y, 1.5);
						    GetPlayerFacingAngle(playerid,R);
						    CreateBoomBox(playerid,X,Y,Z,R,World);
						    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você colocou uma boombox.");
							return 1;
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Remova sua boombox antes de colocar outra.");
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode colocar uma boombox estando em um veículo ou morto.");
				}
				else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem uma boombox.");
			}
			else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já existe uma boombox próxima de você.");
		}
		else if(strcmp(option, "radio", true) == 0)
		{
		    new box = GetClosestBoomBox(playerid,5.0);
			if(box > -1)
			{
			    changing_boombox[playerid] = box;
			    mysql_function_query(Pipeline, "SELECT * FROM rp_radio_stations ORDER BY radioID", true, "QUERY_REQ_STATIONS_R", "d", playerid);
			}
			else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está perto de uma boombox.");
		}
		else if(strcmp(option, "url", true) == 0)
		{
		    new box = GetClosestBoomBox(playerid,5.0);
			if(box > -1)
			{
				format(BoomBoxInfo[box][boStream],sizeof(tmp2),"%s",tmp2);
 				RefreshBoomBoxListeners(box);
			    return 1;
			}
			else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está perto de uma boombox.");
		}
		else if(strcmp(option, "desligar", true) == 0)
		{
		    if(PlayerInfo[playerid][pBoombox] == 0)
		 	{
		        new box = GetClosestBoomBox(playerid,5.0);
		        if(box > -1)
		        {
		            BoomBoxInfo[box][boUsed] = 0;
		            BoomBoxInfo[box][boX] = 0.0;
		            BoomBoxInfo[box][boY] = 0.0;
		            BoomBoxInfo[box][boZ] = 0.0;
					strdel(BoomBoxInfo[box][boStream],0,strlen(BoomBoxInfo[box][boStream]));
					BoomBoxInfo[box][boPlacer] = 0;
					if(IsValidDynamicObject(BoomBoxInfo[box][boObject])) DestroyDynamicObject(BoomBoxInfo[box][boObject]);
					PlayerInfo[playerid][pBoombox] = 1;
		            RefreshBoomBoxListeners(box);
		            return 1;
		        }
		        else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está perto de uma boombox.");
		    }
		    else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode carregar mais que 1 boombox.");
		}
		else if(strcmp(option, "destruir", true) == 0)
		{
		    if(PlayerInfo[playerid][pAdmin] > 1)
		 	{
		        new box = GetClosestBoomBox(playerid,5.0);
		        if(box > -1)
		        {
		            BoomBoxInfo[box][boUsed] = 0;
		            BoomBoxInfo[box][boX] = 0.0;
		            BoomBoxInfo[box][boY] = 0.0;
		            BoomBoxInfo[box][boZ] = 0.0;
					strdel(BoomBoxInfo[box][boStream],0,strlen(BoomBoxInfo[box][boStream]));
					BoomBoxInfo[box][boPlacer] = 0;
					if(IsValidDynamicObject(BoomBoxInfo[box][boObject])) DestroyDynamicObject(BoomBoxInfo[box][boObject]);
		            RefreshBoomBoxListeners(box);
		            return 1;
		        }
		        else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está perto de uma boombox.");
		    }
		}
		else if(strcmp(option, "pos", true) == 0)
		{
  			new box = GetClosestBoomBox(playerid,5.0);
		  	if(box > -1)
		   	{
		   	    if(BoomBoxInfo[box][boPlacer] == PlayerInfo[playerid][pID])
		   	    {
		   	    	SetPVarInt(playerid, "EditandoBoomboxPos", box);
					EditDynamicObject(playerid, BoomBoxInfo[box][boObject]);
		       		return 1;
				}
				else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode mudar a posição de uma boombox que não foi você quem colocou.");
     		}
     		else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está perto de uma boombox.");
		}
		else if(strcmp(option, "volume", true) == 0)
		{
  			new box = GetClosestBoomBox(playerid,5.0);
		  	if(box > -1)
		   	{
			    new valum = strval(tmp2);
			    if( valum < 1 || valum > 50)
				{
				    format(string,sizeof(string),"ERRO:{FFFFFF} Volume inválido. [%d]",valum);
					SendClientMessage(playerid,COLOR_LIGHTRED, string);
					return 1;
				}
				format(string,sizeof(string),"Você alterou o volume da boombox para %d.",valum);
				SendClientMessage(playerid,COLOR_LIGHTGREEN,string);
                BoomBoxInfo[box][boVolume] = valum;
                RefreshBoomBoxListeners(box);
		       	return 1;
     		}
     		else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está perto de uma boombox.");
		}
	}
	return 1;
}

COMMAND:estacoesradio(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	mysql_function_query(Pipeline, "SELECT * FROM rp_radio_stations ORDER BY radioID", true, "QUERY_REQ_STATIONS", "");
 	return 1;
}

forward QUERY_REQ_STATIONS(playerid);
public QUERY_REQ_STATIONS(playerid)
{
	SendClientMessage(playerid,COLOR_LIGHTGREEN,"|________Estações de Rádio________|");
 	new b[64];
  	new b2[64];
   	new str3[128];
    new rows, fields;
	cache_get_data(rows, fields);

	for(new i; i < rows; i++)
    {
		cache_get_field_content(i,"radioID",b);
  		cache_get_field_content(i,"Station",b2);
		format(str3,sizeof(str3),"RadioID: %s | Nome: %s: %s",b,b2);
		SendClientMessage(playerid,COLOR_WHITE,str3);
	}
 	SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_________________________________|");
}

forward QUERY_REQ_STATIONS_R(playerid);
public QUERY_REQ_STATIONS_R(playerid)
{
 	new b[64];
  	new b2[64];
	new Linha1[1024];
   	new LinhaAtt[124];
    new rows, fields;
    new numdavez = 0;
	cache_get_data(rows, fields);

	for(new i; i < rows; i++)
    {
		cache_get_field_content(i,"radioID",b);
  		cache_get_field_content(i,"Station",b2);

  		VendoListaRadios[playerid][numdavez] = strval(b);

		format(LinhaAtt, 124, "%d: %s\n", strval(b), b2); strcat(Linha1, LinhaAtt);
		numdavez++;
	}
	Dialog_Show(playerid, DIALOG_Radio_S, DIALOG_STYLE_LIST, "Rádios", Linha1, "Mudar Estação", "Cancelar");
	return 1;
}

Dialog:DIALOG_Radio_S(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
		new str[256];
		format(str,sizeof(str),"SELECT URL FROM rp_radio_stations WHERE radioID = '%d' LIMIT 1",VendoListaRadios[playerid][listitem]);
    	mysql_function_query(Pipeline, str, true, "QUERY_TUNE_BOOMBOX", "d",playerid);
	}
	return 1;
}

COMMAND:derrubar(playerid, params[])
{
	    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você deve estar logado para utilizar este comando.");
		new Float:X, Float:Y, Float:Z;
	    new other;
		if (sscanf(params, "i(999)", other))
		{
		    for(new i = 0; i < MAX_PLAYERS; i++)
		 	{
				if(i != playerid && !IsPlayerInAnyVehicle(i) && IsPlayerAimings(playerid,i) && GetPVarInt(i, "PlayerSpectate") == 0)
				{
				    if(GetDistanceBetweenPlayers(playerid,i) < 5.0)
					{
						if(PlayerInfo[i][pMorto] > 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não pode derrubar pessoas mortas.");
						if(GetPlayerWeapon(i) >= 25 && GetPlayerWeapon(i) <= 38) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não pode derrubar alguém com uma arma longa na mão.");
						if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode utilizar este comando na água!");
						GetPlayerPos(i, X, Y, Z);
					  	new rand = random(4);
					  	switch(rand)
			    		{
			    			case 0:
			     			{
			     				format(string, sizeof(string), "** %s executa um pequeno salto em direção de %s, derrubando-o no chão.", PlayerName(playerid, 1), PlayerName(i, 1));
			 	    			ProxDetector(20.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			  	    			SetPVarInt(i, "Cuffed", 1);
								SetPVarInt(i, "CuffedTime", 10);
								SetPVarInt(playerid, "Cuffed", 1);
								SetPVarInt(playerid, "CuffedTime", 3);
								TogglePlayerControllable(playerid, false);
								TogglePlayerControllable(i,false);
								SetPlayerPos(playerid, X, Y+0.5, Z);
								ApplyAnimation(i, "PARACHUTE", "FALL_skyDive_DIE", 4.0, 0, 1, 1, 1, -1);
								ApplyAnimation(playerid,"ped","EV_dive",4.0,0,1,1,0,0);
			   				}
				    		case 1:
				    		{
			   					format(string, sizeof(string), "** %s executa um pequeno salto em direção de %s, mas falha, caindo no chão.", PlayerName(playerid, 1), PlayerName(i, 1));
				    			ProxDetector(20.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    			ApplyAnimation(playerid,"ped","EV_dive",4.0,0,1,1,0,0);
				    			SetPVarInt(playerid, "CuffedTime", 10);
							}
							case 2:
							{
								format(string, sizeof(string), "** %s executa um pequeno salto em direção de %s, mas falha, caindo no chão.", PlayerName(playerid, 1), PlayerName(i, 1));
			 					ProxDetector(20.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			 					ApplyAnimation(playerid,"ped","EV_dive",4.0,0,1,1,0,0);
			 					SetPVarInt(playerid, "CuffedTime", 10);
							}
							case 3:
							{
			 					format(string, sizeof(string), "** %s executa um pequeno salto em direção de %s, derrubando-o no chão.", PlayerName(playerid, 1), PlayerName(i, 1));
			   					ProxDetector(20.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			 	    			SetPVarInt(i, "Cuffed", 1);
								SetPVarInt(i, "CuffedTime", 10);
								SetPVarInt(playerid, "Cuffed", 1);
								SetPVarInt(playerid, "CuffedTime", 3);
								TogglePlayerControllable(playerid, false);
								TogglePlayerControllable(i,false);
								SetPlayerPos(playerid, X, Y+0.5, Z);
								ApplyAnimation(i, "PARACHUTE", "FALL_skyDive_DIE", 4.0, 0, 1, 1, 1, -1);
								ApplyAnimation(playerid,"ped","EV_dive",4.0,0,1,1,0,0);
							}
						}
					}
		  			return 1;
		    	}
			}
		}
		else
		{
		    if(other != playerid && !IsPlayerInAnyVehicle(other) && IsPlayerAimings(playerid,other) && GetPVarInt(other, "PlayerSpectate") == 0)
			{
   				if(GetDistanceBetweenPlayers(playerid,other) < 5.0)
				{
					if(PlayerInfo[other][pMorto] > 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não pode derrubar pessoas mortas.");
					if(GetPlayerWeapon(other) >= 25 && GetPlayerWeapon(other) <= 38) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não pode derrubar alguém com uma arma longa na mão.");
					if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode utilizar este comando na água!");
					GetPlayerPos(other, X, Y, Z);
		  			new rand = random(4);
		  			switch(rand)
			    	{
			    		case 0:
			     		{
			     			format(string, sizeof(string), "** %s executa um pequeno salto em direção de %s, derrubando-o no chão.", PlayerName(playerid, 1), PlayerName(other, 1));
			 	    		ProxDetector(20.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			  	    		SetPVarInt(other, "Cuffed", 1);
							SetPVarInt(other, "CuffedTime", 10);
							SetPVarInt(playerid, "Cuffed", 1);
							SetPVarInt(playerid, "CuffedTime", 3);
							TogglePlayerControllable(playerid, false);
							TogglePlayerControllable(other,false);
							SetPlayerPos(playerid, X, Y+0.5, Z);
							ApplyAnimation(other, "PARACHUTE", "FALL_skyDive_DIE", 4.0, 0, 1, 1, 1, -1);
							ApplyAnimation(playerid,"ped","EV_dive",4.0,0,1,1,0,0);
			   			}
				    	case 1:
				    	{
			   				format(string, sizeof(string), "** %s executa um pequeno salto em direção de %s, mas falha, caindo no chão.", PlayerName(playerid, 1), PlayerName(other, 1));
				    		ProxDetector(20.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    		ApplyAnimation(playerid,"ped","EV_dive",4.0,0,1,1,0,0);
				    		SetPVarInt(playerid, "CuffedTime", 10);
						}
						case 2:
						{
							format(string, sizeof(string), "** %s executa um pequeno salto em direção de %s, mas falha, caindo no chão.", PlayerName(playerid, 1), PlayerName(other, 1));
			 				ProxDetector(20.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			 				ApplyAnimation(playerid,"ped","EV_dive",4.0,0,1,1,0,0);
			 				SetPVarInt(playerid, "CuffedTime", 10);
						}
						case 3:
						{
			 				format(string, sizeof(string), "** %s executa um pequeno salto em direção de %s, derrubando-o no chão.", PlayerName(playerid, 1), PlayerName(other, 1));
			   				ProxDetector(20.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			 	    		SetPVarInt(other, "Cuffed", 1);
							SetPVarInt(other, "CuffedTime", 10);
							SetPVarInt(playerid, "Cuffed", 1);
							SetPVarInt(playerid, "CuffedTime", 3);
							TogglePlayerControllable(playerid, false);
							TogglePlayerControllable(other,false);
							SetPlayerPos(playerid, X, Y+0.5, Z);
							ApplyAnimation(other, "PARACHUTE", "FALL_skyDive_DIE", 4.0, 0, 1, 1, 1, -1);
							ApplyAnimation(playerid,"ped","EV_dive",4.0,0,1,1,0,0);
						}
					}
				}
			}
		}
		return 1;
}

ALTCOMMAND:licencas->licenca;
ALTCOMMAND:lic->licenca;
ALTCOMMAND:mostrarlicencas->licenca;
CMD:licenca(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
    new other, str[126];
	if (sscanf(params, "i", other)) return SendClientMessage(playerid, COLOR_CINZA,"USE: /licenca [ID]");
	else
	{
	    if(!IsPlayerConnected(other)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player não está logado.");
	    if(playerid != other){
	    	format(str,sizeof(str),"* %s mostra suas licenças para %s", PlayerName(playerid, 0), PlayerName(other, 1));
			ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	    SendClientMessage(other, COLOR_LIGHTGREEN,"________São Paulo ID_________");
		//==========================================================================
		format(string, sizeof(string), "Nome: %s", PlayerName(playerid, 0));
		SendClientMessage(other, COLOR_WHITE, string);
	    //==========================================================================
	    if(PlayerInfo[playerid][pDriveLic] > 0)
		{
			format(string, sizeof(string), "Licença de Motorista: Possui.");
			SendClientMessage(other, COLOR_WHITE, string);
		}
		else
		{
		    format(string, sizeof(string), "Licença de Motorista: Não possui.");
			SendClientMessage(other, COLOR_LIGHTRED, string);
		}
		//==========================================================================
		if(PlayerInfo[playerid][pFlyLic] > 0)
		{
			format(string, sizeof(string), "Licença de Voo: Possui.");
			SendClientMessage(other, COLOR_WHITE, string);
		}
		else
		{
		    format(string, sizeof(string), "Licença de Voo: Não possui");
			SendClientMessage(other, COLOR_LIGHTRED, string);
		}
		//==========================================================================
		if(PlayerInfo[playerid][pTruckLic] > 0)
		{
			format(string, sizeof(string), "Licença de Caminhoneiro: Possui.");
			SendClientMessage(other, COLOR_WHITE, string);
		}
		else
		{
		    format(string, sizeof(string), "Licença de Caminhoneiro: Não possui.");
			SendClientMessage(other, COLOR_LIGHTRED, string);
		}
		//==========================================================================
		if(PlayerInfo[playerid][pWepLic] > 0)
		{
			format(string, sizeof(string), "Porte de Armas: Possui.");
			SendClientMessage(other, COLOR_WHITE, string);
		}
		else
		{
		    format(string, sizeof(string), "Porte de Armas: Não possui.");
			SendClientMessage(other, COLOR_LIGHTRED, string);
		}
	}
	return 1;
}

/*CMD:guardachuva(playerid, params[])
{

	if(!PlayerInfo[playerid][pUmbrella])
	{
	    PlayerInfo[playerid][pUmbrella] = 1;

		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você pegou seu guarda-chuva.");

		SetPlayerAttachedObject(playerid,HOLDOBJECT_UMBRELLA,-2001,6,0.050000,0.049999,0.067999,16.699996,-20.099998,21.099996,1.000000,1.000000,1.000000);

		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
		ApplyAnimation(playerid,"ROCKET","idle_rocket",4.1,0,1,1,1,1,1);
	}
	else
	{
		PlayerInfo[playerid][pUmbrella] = 0;

		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
		RemovePlayerAttachedObject(playerid, HOLDOBJECT_UMBRELLA);

		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você guardou seu guarda-chuva.");
	}
	return 1;
}*/

ALTCOMMAND:an->anuncio;
CMD:anuncio(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
	if(CelularData[playerid][celNumero] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um telefone celular.");
	if(PlayerInfo[playerid][pLevel] < 6) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 6 ou mais para anunciar.");
	//if(Anuncio != 1)  return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Algum anúncio foi enviado nos ultimos 15 segundos, aguarde até enviar outro...");
	if(!IsPlayerInRangeOfPoint(playerid,10.0,1166.6110,-1473.7046,15.7921)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está na área de anuncios, localizada no shopping.");

	new opt[256];
	if (sscanf(params, "s[256]",opt))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /anuncio [texto]");
		return 1;
	}
	else
	{
	    if(strlen(opt) > 100)
		{
			SendClientMessage(playerid,COLOR_LIGHTRED,"O tamanho do anúncio não pode exceder 100 caracteres.");
			return 1;
		}
		new price = (1 * strlen(opt)),
			stringan[256];
 		format(stringan, sizeof(stringan), "[Anúncio] %s, Telefone: %d", opt, CelularData[playerid][celNumero]);
		EnviarAnuncioDePlayer(COLOR_LIGHTGREEN, stringan);

		SendClientMessage(playerid,COLOR_WHITE,"|-----[Anúncio - São Paulo]-----|");
   		format(string,sizeof(string),"Número de Caracteres: %d.",strlen(opt));
   		SendClientMessage(playerid,COLOR_WHITE,string);
   		SendClientMessage(playerid,COLOR_WHITE,"Taxa: R$1 por caractere.");
		format(string,sizeof(string),"Total: R$%d.",price);
		SendClientMessage(playerid,COLOR_WHITE,string);
		GivePlayerMoneyCA(playerid, -price);
		Anuncio = 15;

		new strl[326];
	   	format(strl, sizeof(strl), "%s anunciou: %s", PlayerName(playerid,0), opt);
	  	LogCMD_Anuncio(strl);

	  	format(strl, sizeof(strl), "AdmCmd: o anunciante é %s.", PlayerName(playerid,0));
	  	SendAdminMessage(COLOR_LIGHTRED,strl);
		return 1;
	}
}

ALTCOMMAND:anemp->anuncioemp;
CMD:anuncioemp(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
	//if(Anuncio != 1)  return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Algum anúncio foi enviado nos ultimos 15 segundos, aguarde até enviar outro...");
	if(PlayerInfo[playerid][pLevel] < 6) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 6 ou mais para anunciar.");
	if(!IsPlayerInRangeOfPoint(playerid,10.0,1166.6110,-1473.7046,15.7921)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está na área de anuncios, localizada no Shopping.");

	new opt[256];
	if (sscanf(params, "s[256]",opt))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /anemp [texto]");
		return 1;
	}
	else
	{
	    if(strlen(opt) > 100)
		{
			SendClientMessage(playerid,COLOR_LIGHTRED,"O tamanho do anúncio não pode exceder 100 caracteres.");
			return 1;
		}
		new price = (1 * strlen(opt));
 		format(string, sizeof(string), "[Anúncio] %s", opt);
		EnviarAnuncioDePlayer(COLOR_LIGHTGREEN, string);


		SendClientMessage(playerid,COLOR_WHITE,"|-----[Anúncio - São Paulo]-----|");
   		format(string,sizeof(string),"Número de Caracteres: %d.",strlen(opt));
   		SendClientMessage(playerid,COLOR_WHITE,string);
   		SendClientMessage(playerid,COLOR_WHITE,"Taxa: R$1 por caractere.");
		format(string,sizeof(string),"Total: R$%d.",price);
		SendClientMessage(playerid,COLOR_WHITE,string);
		GivePlayerMoneyCA(playerid, -price);
		Anuncio = 15;

		new strl[326];
	   	format(strl, sizeof(strl), "%s anunciou: %s", PlayerName(playerid,0), opt);
	  	LogCMD_AnuncioEmp(strl);
	  	format(strl, sizeof(strl), "AdmCmd: o anunciante é %s.", PlayerName(playerid,0));
	  	SendAdminMessage(COLOR_LIGHTRED,strl);
		return 1;
	}
}
CMD:horas(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
	format(string, 256, "%d/60 para receber o paycheck", 60-PlayerInfo[playerid][pPayDay]);
	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

	static
	    stringh[128],
		month[12],
		date[6];

	getdate(date[2], date[1], date[0]); // Ano - Mês, Dia
	gettime(date[3], date[4], date[5]); //Horas - Minutos - Segs

	switch (date[1]) {
	    case 1: month = "Janeiro";
	    case 2: month = "Fevereiro";
	    case 3: month = "Março";
	    case 4: month = "Abriç";
	    case 5: month = "Maio";
	    case 6: month = "Junho";
	    case 7: month = "Julho";
	    case 8: month = "Agosto";
	    case 9: month = "Setembro";
	    case 10: month = "Outubrp";
	    case 11: month = "Novembro";
	    case 12: month = "Dezembro";
	}
	format(stringh, sizeof(stringh), "~w~%02d %s %d~n~%02d:%02d:%02d", date[0], month, date[2], date[3], date[4], date[5]);
	GameTextForPlayer(playerid, stringh, 3000, 1);
	return 1;

}
CMD:relogio(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");

    if(GetPVarInt(playerid, "VendoHora") == 0)
    {
    	SetPVarInt(playerid, "VendoHora", 1);
		TextDrawShowForPlayer(playerid,gTime);
	}
	else
	{
	    SetPVarInt(playerid, "VendoHora", 0);
		TextDrawHideForPlayer(playerid,gTime);
	}
	return 1;
}

CMD:mascara(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
	if(!PlayerInfo[playerid][pMascara]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem uma mascara.");
	if(PlayerInfo[playerid][pMascaraU] == 0)
	{
 		new randid = 1000 + random(9999);
		PlayerInfo[playerid][pMascaraU] = 1;
		PlayerInfo[playerid][pMascID] = randid;
 		GameTextForPlayer(playerid, "~p~Mascara colocada", 5000, 4);

		new stringname[24];
		format(stringname,sizeof(stringname),"Mascarado_%d",PlayerInfo[playerid][pMascID]);
		SetPlayerName(playerid, stringname);

		new strl[126];
		format(strl, sizeof(strl), "%s colocou uma mascara ID: %d", PlayerName(playerid,0), randid);
		LogCMD_Mascara(strl);
	}
	else
	{
 		PlayerInfo[playerid][pMascID] = 0;
   		PlayerInfo[playerid][pMascaraU] = 0;
	    new stringname[24];
		format(stringname,sizeof(stringname),"%s",PlayerInfo[playerid][pNomeP]);
		SetPlayerName(playerid, stringname);
  		GameTextForPlayer(playerid, "~p~Mascara removida", 5000, 4);
	}
	return 1;
}

CMD:nidentidade(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
	if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] != FAC_TIPO_PCERJ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissão de utilizar este comando.");

	new newnome[24], TC;
	if(sscanf(params,"s[24]d",newnome, TC))
	{
		SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /nidentidade [Nome_Sobrenome] [TC]");
		return 1;
	}

	switch(PlayerInfo[playerid][pMascaraU])
	{
		case 0:
		{
		    PlayerInfo[playerid][pMascaraU] = 2;

			new stringname[24];
			format(stringname,sizeof(stringname),"%s",newnome);
			SetPlayerName(playerid, stringname);
            format(PlayerInfo[playerid][pNomeF], 24,"%s",newnome);
            SetPlayerScore(playerid, TC);

			new strl[126];
	   		format(strl, sizeof(strl), "%s colocou uma nova identidade: %s", PlayerName(playerid,0), newnome);
	   		LogCMD_Mascara(strl);
		}
		case 2:
		{
		    PlayerInfo[playerid][pMascID] = 0;
		    PlayerInfo[playerid][pMascaraU] = 0;
		    new stringname[24];
			format(stringname,sizeof(stringname),"%s",PlayerInfo[playerid][pNomeP]);
			SetPlayerName(playerid, stringname);
			SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
		}
	}
	return 1;
}

COMMAND:moeda(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");

	new coin = random(2)+1, coinname[20];
	if(coin == 1) { coinname = "cara"; }
	else { coinname = "coroa"; }
    format(string, sizeof(string), "* %s joga uma moeda para cima e ela cai em %s", PlayerName(playerid,1),coinname);
	ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

COMMAND:cigarro(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_SMOKE_CIGGY) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um cigarro em mãos.");
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
    if(IsPlayerAttachedObjectSlotUsed(playerid, 5)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando em quanto segura algo. ('/usar nenhum')");

    if(PlayerInfo[playerid][pCigarros] > 0)
	{
	    PlayerInfo[playerid][pCigarros] = PlayerInfo[playerid][pCigarros]-1;
        SetPlayerAttachedObject(playerid, 5, 3027, 2, 0.010787, 0.106843, -0.008274, 278.041687, 0.000000, 0.000000, 0.684760, 1.000000, 0.585120);
        FumandoCigarro[playerid] = 1;
        SendClientMessage(playerid, COLOR_GREY, "Você pode usar '/apagarcigarro' quando desejar apaga-lo.");
    }
    else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não possui nenhum cigarro.");
	return 1;
}
CMD:apagarcigarro(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(IsPlayerConnected(playerid))
 	{
  		if(PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Logue-se primeiro. ");
    	if(FumandoMaconha[playerid] > 0)
     	{
      		FumandoMaconha[playerid] = 0;
        	format(string, sizeof(string), "* %s joga um baseado no chão.", PlayerName(playerid,1));
         	ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
        }
        if(FumandoCigarro[playerid] > 0)
     	{
     	    RemovePlayerAttachedObject(playerid, 5);
      		FumandoCigarro[playerid] = 0;
        	format(string, sizeof(string), "* %s joga um cigarro no chão.", PlayerName(playerid,1));
         	ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
        }
        else
        {
        	SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está fumando.");
         	return 1;
        }
	}
	return 1;
}

forward IsPlayerEditandoAlgo(playerid);
public IsPlayerEditandoAlgo(playerid){

    if(GetPVarInt(playerid, "EditandoArmaNoChao") == 1 || GetPVarInt(playerid, "EditandoAmmoNoChao") != -1 ||
       GetPVarInt(playerid, "EditandoDrogaNoChao") != -1 || GetPVarInt(playerid, "ObjPortaMalas") != -1)
		return 1;
	else
	    return 0;
}

forward PlayerDeslogouEditandoAlgo(playerid);
public PlayerDeslogouEditandoAlgo(playerid) {

    if(PlayerInfo[playerid][pEditandoPlaca] != -1)
    {
    	if(IsValidDynamicObject(HouseInfo[PlayerInfo[playerid][pEditandoPlaca]][ObjPlaca]))
			DestroyDynamicObject(HouseInfo[PlayerInfo[playerid][pEditandoPlaca]][ObjPlaca]);
	}
	if(PlayerInfo[playerid][pEditandoPlacaC] != -1)
	{
	    if(IsValidDynamicObject(ComplexoInfo[PlayerInfo[playerid][pEditandoPlacaC]][cObjPlaca]))
			DestroyDynamicObject(ComplexoInfo[PlayerInfo[playerid][pEditandoPlacaC]][cObjPlaca]);
	}
	if(PlayerInfo[playerid][pEditandoPlacaE] != -1)
	{
	    if(IsValidDynamicObject(EmpInfo[PlayerInfo[playerid][pEditandoPlacaE]][eObjPlaca]))
			DestroyDynamicObject(EmpInfo[PlayerInfo[playerid][pEditandoPlacaE]][eObjPlaca]);
	}
	if(PlayerInfo[playerid][pEditandoPlacaG] != -1)
	{
	    if(IsValidDynamicObject(GaragemInfo[PlayerInfo[playerid][pEditandoPlacaG]][ObjPlaca]))
			DestroyDynamicObject(GaragemInfo[PlayerInfo[playerid][pEditandoPlacaG]][ObjPlaca]);
	}
	if (PlayerInfo[playerid][pEditPump] != -1)
	{
		Pump_Refresh(PlayerInfo[playerid][pEditPump]);
		PlayerInfo[playerid][pEditPump] = -1;
	}
	if(GetPVarInt(playerid, "SettingGraffiti") == 1)
	{
		if(IsValidDynamicObject(GraffitiObject[playerid]))
			DestroyDynamicObject(GraffitiObject[playerid]);

		ResetVariables(playerid);
		SendClientMessage(playerid,0xFF6800FF,"Pixação cancelada.");
	}
	if( GetPVarInt(playerid, "EditandoAmmoNoChao") != -1 )
	{
		new id = GetPVarInt(playerid, "EditandoAmmoNoChao");

		if(CartuxoData[id][CartuxoTipo] == 1) PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]+CartuxoData[id][cartuxoQnt];
		else if(CartuxoData[id][CartuxoTipo] == 2) PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]+CartuxoData[id][cartuxoQnt];
		else if(CartuxoData[id][CartuxoTipo] == 3) PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]+CartuxoData[id][cartuxoQnt];
		else if(CartuxoData[id][CartuxoTipo] == 4) PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]+CartuxoData[id][cartuxoQnt];
  		CartuxoData[id][cartuxoEditando] = 0;

		CartuxoData[id][cartuxoX] = 0.0;
		CartuxoData[id][cartuxoY] = 0.0;
		CartuxoData[id][cartuxoZ] = 0.0;
		CartuxoData[id][cartuxoRX] = 0.0;
		CartuxoData[id][cartuxoRY] = 0.0;
		CartuxoData[id][cartuxoRZ] = 0.0;
		CartuxoData[id][cartuxoWorld] = 0;
		CartuxoData[id][cartuxoInt] = 0;
		CartuxoData[id][cartuxoQnt] = 0;

		if(IsValidDynamicObject(CartuxoData[id][cartuxoObj]))
			DestroyDynamicObject(CartuxoData[id][cartuxoObj]);

		SetPVarInt(playerid, "EditandoAmmoNoChao", -1);
	}
 	if( GetPVarInt(playerid, "EditandoArmaNoChao") == 1 )
	{
 		new armaid = PlayerInfo[playerid][pArmaMao];
		ArmaData[armaid][ArmaNoChao] = 0;
		ArmaData[armaid][ArmaEditando] = 0;

		if(IsValidDynamicObject(ArmaData[armaid][ArmaObj]))
			DestroyDynamicObject(ArmaData[armaid][ArmaObj]);

		SetPVarInt(playerid, "EditandoArmaNoChao", 0);
	}
	if( GetPVarInt(playerid, "EditandoDrogaNoChao") != -1 )
	{
		new id = GetPVarInt(playerid, "EditandoDrogaNoChao");

		if(IsValidDynamicObject(DropInfo[id][dObject]))
			DestroyDynamicObject(DropInfo[id][dObject]);

		switch(DropInfo[id][dType])
  		{
			case 1: PlayerDroga[playerid][MaconhaR] += DropInfo[id][dAmmo];
  			case 2: PlayerDroga[playerid][MaconhaB] += DropInfo[id][dAmmo];
    		case 3: PlayerDroga[playerid][MaconhaE] += DropInfo[id][dAmmo];
	    	//======================================================================
	    	case 4: PlayerDroga[playerid][CocaR] += DropInfo[id][dAmmo];
	    	case 5: PlayerDroga[playerid][CocaB] += DropInfo[id][dAmmo];
	    	case 6: PlayerDroga[playerid][CocaE] += DropInfo[id][dAmmo];
	    	//======================================================================
	    	case 7: PlayerDroga[playerid][CrackR] += DropInfo[id][dAmmo];
	    	case 8: PlayerDroga[playerid][CrackB] += DropInfo[id][dAmmo];
	    	case 9: PlayerDroga[playerid][CrackE] += DropInfo[id][dAmmo];
	    	//======================================================================
	    	case 10: PlayerDroga[playerid][LSDR] += DropInfo[id][dAmmo];
	    	case 11: PlayerDroga[playerid][LSDB] += DropInfo[id][dAmmo];
	    	case 12: PlayerDroga[playerid][LSDE] += DropInfo[id][dAmmo];
	    	//======================================================================
	    	case 13: PlayerDroga[playerid][MetR] += DropInfo[id][dAmmo];
   			case 14: PlayerDroga[playerid][MetB] += DropInfo[id][dAmmo];
   			case 15: PlayerDroga[playerid][MetE] += DropInfo[id][dAmmo];
	    	//======================================================================
			case 16: PlayerDroga[playerid][LancaPer] += DropInfo[id][dAmmo];
			case 17: PlayerDroga[playerid][PBC] += DropInfo[id][dAmmo];
			case 18: PlayerDroga[playerid][Sementes] += DropInfo[id][dAmmo];

    	}

		DropInfo[id][dX] = 0.0;
		DropInfo[id][dY] = 0.0;
		DropInfo[id][dZ] = 0.0;
		DropInfo[id][dType] = 0;
		DropInfo[id][dAmmo] = 0;
		DropInfo[id][dWorld] = 0;
		DropInfo[id][dInt] = 0;

	 	SetPVarInt(playerid, "EditandoDrogaNoChao", -1);
	}
	if(PlayerInfo[playerid][pEditMovel] != -1)
	{
 		new id = PlayerInfo[playerid][pEditMovel];
		if(GetPVarInt(playerid, "ComprandoNovoMovel") == 1)
		{
  			if (IsValidDynamicObject(FurniInfo[id][mObjeto]))
  				DestroyDynamicObject(FurniInfo[id][mObjeto]);

			DeletandoMovel(playerid, PlayerInfo[playerid][pEditMovel]);

			SetPVarInt(playerid, "ComprandoNovoMovel", 0);
		}
		else
  			Movel_Refresh(playerid,id);

        Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
		PlayerInfo[playerid][pEditMovel] = -1;
	}
	if(PlayerInfo[playerid][pEditPorta][0] != -1)
	{
 		new id = PlayerInfo[playerid][pEditMovel];
		if (IsValidDynamicObject(FurniInfo[id][mObjeto]))
			DestroyDynamicObject(FurniInfo[id][mObjeto]);

		DeletandoMovel(playerid, PlayerInfo[playerid][pEditPorta][0]);
		PlayerInfo[playerid][pEditMovel] = -1;
  		PlayerInfo[playerid][pEditPorta][0] = -1;
	}
	if(PlayerInfo[playerid][pEditPorta][1] != -1)
	{
 		new id = PlayerInfo[playerid][pEditMovel];
		if (IsValidDynamicObject(FurniInfo[id][mObjeto]))
			DestroyDynamicObject(FurniInfo[id][mObjeto]);
		DeletandoMovel(playerid, PlayerInfo[playerid][pEditPorta][1]);
		PlayerInfo[playerid][pEditMovel] = -1;
  		PlayerInfo[playerid][pEditPorta][1] = -1;
	}
	if(PlayerInfo[playerid][pEditandoBareira] != -1)
	{
	    new id = PlayerInfo[playerid][pEditandoBareira];
	    if(IsValidDynamicObject(BarreiraInfo[id][BlockObj]))
			DestroyDynamicObject(BarreiraInfo[id][BlockObj]);

        BarreiraInfo[id][BlockX] = 0.0;
		BarreiraInfo[id][BlockY] = 0.0;
		BarreiraInfo[id][BlockZ] = 0.0;
		BarreiraInfo[id][BlockW] = 0;

   		PlayerInfo[playerid][pEditandoBareira] = -1;
	}
	if(OutrasInfos[playerid][oEditandoMesaPoker] != -1)
	{
 		new tableid = OutrasInfos[playerid][oEditandoMesaPoker]-1;
		OutrasInfos[playerid][oEditandoMesaPoker] = -1;
		DestroyPokerTable(tableid);
		PlacePokerTable(tableid, 0, GetPVarFloat(playerid, "tmpPkrX"), GetPVarFloat(playerid, "tmpPkrY"), GetPVarFloat(playerid, "tmpPkrZ"), GetPVarFloat(playerid, "tmpPkrRX"), GetPVarFloat(playerid, "tmpPkrRY"), GetPVarFloat(playerid, "tmpPkrRZ"), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		DeletePVar(playerid, "tmpPkrX");
		DeletePVar(playerid, "tmpPkrY");
		DeletePVar(playerid, "tmpPkrZ");
		DeletePVar(playerid, "tmpPkrRX");
		DeletePVar(playerid, "tmpPkrRY");
		DeletePVar(playerid, "tmpPkrRZ");
	}
	if(GetPVarInt(playerid, "EditandoBoomboxPos") != -1)
 	{
  		new box = GetPVarInt(playerid, "EditandoBoomboxPos");
    	BoomBoxInfo[box][boUsed] = 0;
     	BoomBoxInfo[box][boX] = 0.0;
      	BoomBoxInfo[box][boY] = 0.0;
      	BoomBoxInfo[box][boZ] = 0.0;
		strdel(BoomBoxInfo[box][boStream],0,strlen(BoomBoxInfo[box][boStream]));
		BoomBoxInfo[box][boPlacer] = 0;
		if(IsValidDynamicObject(BoomBoxInfo[box][boObject])) DestroyDynamicObject(BoomBoxInfo[box][boObject]);
		PlayerInfo[playerid][pBoombox] = 1;
  		RefreshBoomBoxListeners(box);
		SetPVarInt(playerid, "EditandoBoomboxPos", -1);
	}
	return 1;
}

ALTCOMMAND:dar->entregar;
CMD:entregar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pLevel] < 3) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 3 ou mais para dropar algo.");
    if(gettime() < FloodCMD[playerid]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Aguarde um segundo antes de usar um comando novamente.");
	if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");

	new idx = 0;
 	new opt[256];
	opt = strtok(params,idx);
	if(!strlen(opt))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /entregar [opção]");
        SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}Opções:{FFFFFF} arma, 9mm, 556, cartucho, 127, cigarro, cerveja");
		return 1;
	}
	else
	{
	   	if(strcmp(opt, "arma", true) == 0)
		{
		    if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando estando em serviço.");
            if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");

		    new tmp4[256];
			tmp4 = strtok(params,idx);
			if(!strlen(tmp4))
			{
				SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /entregar arma [PlayerID]");
				return 1;
			}
			else
			{
			    if(PlayerInfo[playerid][pArmaMao] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma em mãos");
			    new armaid = PlayerInfo[playerid][pArmaMao];

				new playa = strval(tmp4);
			    if(GetDistanceBetweenPlayers(playerid,playa) < 7.5)
		        {
		            if(PlayerInfo[playerid][pFac] > 0 && PlayerInfo[playerid][pEmServico] == 1)
				    {
				        if(FacInfo[PlayerInfo[playa][pFac]][fTipo] != FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode entregar uma arma estando em serviço, para uma pessoa de outra fac.");
						if(FacInfo[PlayerInfo[playa][pFac]][fTipo] == FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] && PlayerInfo[playa][pEmServico] != 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode entregar uma arma a um oficial fora de serviço.");
				    }

		            if(PlayerInfo[playa][pArmaMao] != 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player já tem uma arma em mãos");
					PlayerInfo[playa][pArmaMao] = PlayerInfo[playerid][pArmaMao];

		   			GivePlayerWeapon(playerid,ArmaData[armaid][ArmaModelo],ArmaData[armaid][ArmaAmmo]);
					if(ArmaData[armaid][ArmaExtra] != 0) SetPlayerAttachedObject(playa, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[armaid][ArmaRGB]);
					else SetPlayerAttachedObject(playa, 0, GunObjects[ArmaData[armaid][ArmaModelo]], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[armaid][ArmaRGB]);

		   			format(string,sizeof(string),"[Arma Primária] Você entregou à %s uma %s com %d balas. (%d)",PlayerName(playa,1),GunNames[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaAmmo], ArmaData[armaid][ArmaNumeracao]); SendClientMessage(playerid, COLOR_LIGHTGREEN,string);
		   			format(string,sizeof(string),"[Arma Primária] %s entregou à você uma %s com %d balas. (%d)",PlayerName(playerid,1),GunNames[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaAmmo], ArmaData[armaid][ArmaNumeracao]); SendClientMessage(playa, COLOR_LIGHTGREEN,string);
		   			ArmaData[armaid][ArmaCom] = playa;
		   			FloodCMD[playerid] = gettime()+2;
				    RemovePlayerAttachedObject(playerid, 0);
				    //========================================
				    DesarmandoPlayer[playerid] = 2;
					ResetPlayerWeapons(playerid);
					PlayerInfo[playerid][pArmaMao] = 0;
					RemovePlayerAttachedObject(playerid, 0);
					//========================================
					SalvarArma(armaid);
					ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

					if(PlayerInfo[playerid][pEmServico] == 1)
					{
					    new strl[126];
	   					format(strl, sizeof(strl), "[EM SERVIÇO] %s entregou para %s uma %s com %d balas de calibre 9mm. [ Numeração: %d ]", PlayerName(playerid,0), PlayerName(playa,0), GunNames[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaAmmo], ArmaData[armaid][ArmaNumeracao]);
	   					LogCMD_EntregarA(strl);
					}
					else
					{
						new strl[126];
	   					format(strl, sizeof(strl), "%s entregou para %s uma %s com %d balas de calibre 9mm. [ Numeração: %d ]", PlayerName(playerid,0), PlayerName(playa,0), GunNames[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaAmmo], ArmaData[armaid][ArmaNumeracao]);
	   					LogCMD_EntregarA(strl);
					}
					return 1;
				}
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a este player.");
			}
		}
  		else if(strcmp(opt, "cigarro", true) == 0)
		{
		    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_SMOKE_CIGGY) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um cigarro em mãos.");
		    new tmp4[256];
			tmp4 = strtok(params,idx);
			if(!strlen(tmp4)) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /entregar cigarro [PlayerID]");
			else
			{
				new playa = strval(tmp4);
			    if(GetDistanceBetweenPlayers(playerid,playa) < 7.5)
		        {
		            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
		    		SetPlayerSpecialAction(playa,SPECIAL_ACTION_SMOKE_CIGGY);

		    		format(string,sizeof(string),"Você entregou um cigarro á %s.", PlayerName(playa,1)); SendClientMessage(playerid, COLOR_LIGHTGREEN,string);
		   			format(string,sizeof(string),"%s lhe entregou um cigarro.", PlayerName(playerid,1)); SendClientMessage(playa, COLOR_LIGHTGREEN,string);
		   			return 1;
				}
				else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está próximo a este player.");
			}
		}
		else if(strcmp(opt, "cerveja", true) == 0)
		{
		    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_BEER) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem uma cerveja em mãos.");
		    new tmp4[256];
			tmp4 = strtok(params,idx);
			if(!strlen(tmp4)) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /entregar cerveja [PlayerID]");
			else
			{
				new playa = strval(tmp4);
			    if(GetDistanceBetweenPlayers(playerid,playa) < 7.5)
		        {
		            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
		    		SetPlayerSpecialAction(playa,SPECIAL_ACTION_DRINK_BEER);

		    		format(string,sizeof(string),"Você entregou uma cerveja á %s.", PlayerName(playa,1)); SendClientMessage(playerid, COLOR_LIGHTGREEN,string);
		   			format(string,sizeof(string),"%s lhe entregou uma cerveja.", PlayerName(playerid,1)); SendClientMessage(playa, COLOR_LIGHTGREEN,string);
		   			return 1;
				}
				else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está próximo a este player.");
			}
		}
		else if(strcmp(opt, "9mm", true) == 0)
		{
		    if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando estando em serviço.");

		    new tmp4[256];
			tmp4 = strtok(params,idx);
			if(!strlen(tmp4)) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /entregar 9mm [PlayerID] [Quantidade]");
			else
			{
				new playa = strval(tmp4);
			    if(GetDistanceBetweenPlayers(playerid,playa) < 7.5)
		        {
		            new tmp5[256];
					tmp5 = strtok(params,idx);
					if(!strlen(tmp5)) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /entregar 9mm [PlayerID] [Quantidade]");
					else
					{
     					if(PlayerInfo[playerid][pFac] > 0 && PlayerInfo[playerid][pEmServico] == 1)
					    {
					        if(FacInfo[PlayerInfo[playa][pFac]][fTipo] != FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode entregar uma arma estando em serviço, para uma pessoa de outra fac.");
							if(FacInfo[PlayerInfo[playa][pFac]][fTipo] == FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] && PlayerInfo[playa][pEmServico] != 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode entregar uma arma a um oficial fora de serviço.");
					    }
						new ammo = strval(tmp5);

						if(PlayerInfo[playerid][pMun9mm] < ammo) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de munição calibre 9mm.");

			   			format(string,sizeof(string),"[Munições] Você entregou à %s %d balas de calibre 9mm.",PlayerName(playa,1), ammo); SendClientMessage(playerid, COLOR_LIGHTGREEN,string);
			   			format(string,sizeof(string),"[Munições] %s entregou à você %d balas de calibre 9mm.",PlayerName(playerid,1), ammo); SendClientMessage(playa, COLOR_LIGHTGREEN,string);
			   			PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-ammo;
			   			PlayerInfo[playa][pMun9mm] += ammo;

						ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

						new strl[126];
	   					format(strl, sizeof(strl), "%s entregou à %s %d balas de calibre 9mm.", PlayerName(playerid,0), PlayerName(playa,0), ammo);
	   					LogCMD_EntregarA(strl);
						return 1;
					}
				}
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a este player.");
			}
		}
		else if(strcmp(opt, "556", true) == 0)
		{

		    new tmp4[256];
			tmp4 = strtok(params,idx);
			if(!strlen(tmp4)) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /entregar 556 [PlayerID] [Quantidade]");
			else
			{
				new playa = strval(tmp4);
			    if(GetDistanceBetweenPlayers(playerid,playa) < 7.5)
		        {
		            new tmp5[256];
					tmp5 = strtok(params,idx);
					if(!strlen(tmp5)) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /entregar 556 [PlayerID] [Quantidade]");
					else
					{
						new ammo = strval(tmp5);
						if(PlayerInfo[playerid][pFac] > 0 && PlayerInfo[playerid][pEmServico] == 1)
					    {
					        if(FacInfo[PlayerInfo[playa][pFac]][fTipo] != FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode entregar uma arma estando em serviço, para uma pessoa de outra fac.");
							if(FacInfo[PlayerInfo[playa][pFac]][fTipo] == FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] && PlayerInfo[playa][pEmServico] != 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode entregar uma arma a um oficial fora de serviço.");
					    }
						if(PlayerInfo[playerid][pMun556] < ammo) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de munição calibre 5.56mm.");

			   			format(string,sizeof(string),"[Munições]Você entregou à %s %d balas de calibre 5.56mm.",PlayerName(playa,1), ammo); SendClientMessage(playerid, COLOR_LIGHTGREEN,string);
			   			format(string,sizeof(string),"[Munições]%s entregou à você %d balas de calibre 5.56mm.",PlayerName(playerid,1), ammo); SendClientMessage(playa, COLOR_LIGHTGREEN,string);
			   			PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-ammo;
			   			PlayerInfo[playa][pMun556] += ammo;
						ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

						new strl[126];
	   					format(strl, sizeof(strl), "%s entregou à %s %d balas de calibre 5.56mm...", PlayerName(playerid,0), PlayerName(playa,0), ammo);
	   					LogCMD_EntregarA(strl);
						return 1;
					}
				}
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a este player.");
			}
		}
		else if(strcmp(opt, "cartucho", true) == 0)
		{
		    if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando estando em serviço.");

		    new tmp4[256];
			tmp4 = strtok(params,idx);
			if(!strlen(tmp4)) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /entregar cartucho [PlayerID] [Quantidade]");
			else
			{
				new playa = strval(tmp4);
			    if(GetDistanceBetweenPlayers(playerid,playa) < 7.5)
		        {
		            new tmp5[256];
					tmp5 = strtok(params,idx);
					if(!strlen(tmp5)) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /entregar cartucho [PlayerID] [Quantidade]");
					else
					{
						new ammo = strval(tmp5);
						if(PlayerInfo[playerid][pFac] > 0 && PlayerInfo[playerid][pEmServico] == 1)
					    {
					        if(FacInfo[PlayerInfo[playa][pFac]][fTipo] != FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode entregar uma arma estando em serviço, para uma pessoa de outra fac.");
							if(FacInfo[PlayerInfo[playa][pFac]][fTipo] == FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] && PlayerInfo[playa][pEmServico] != 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode entregar uma arma a um oficial fora de serviço.");
					    }

						if(PlayerInfo[playerid][pMunCart] < ammo) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cartuchos.");

			   			format(string,sizeof(string),"[Munições]Você entregou à %s %d cartuchos.",PlayerName(playa,1), ammo); SendClientMessage(playerid, COLOR_LIGHTGREEN,string);
			   			format(string,sizeof(string),"[Munições]%s entregou à você %d cartuchos.",PlayerName(playerid,1), ammo); SendClientMessage(playa, COLOR_LIGHTGREEN,string);
			   			PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-ammo;
			   			PlayerInfo[playa][pMunCart] += ammo;

						ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

						new strl[126];
	   					format(strl, sizeof(strl), "%s entregou à %s %d cartuchos.", PlayerName(playerid,0), PlayerName(playa,0), ammo);
	   					LogCMD_EntregarA(strl);
						return 1;
					}
				}
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a este player.");
			}
		}
		else if(strcmp(opt, "127", true) == 0)
		{
		    if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando estando em serviço.");

		    new tmp4[256];
			tmp4 = strtok(params,idx);
			if(!strlen(tmp4)) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /entregar 127 [PlayerID] [Quantidade]");
			else
			{
				new playa = strval(tmp4);
			    if(GetDistanceBetweenPlayers(playerid,playa) < 7.5)
		        {
		            new tmp5[256];
					tmp5 = strtok(params,idx);
					if(!strlen(tmp5)) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /entregar 127 [PlayerID] [Quantidade]");
					else
					{
						new ammo = strval(tmp5);
						if(PlayerInfo[playerid][pFac] > 0 && PlayerInfo[playerid][pEmServico] == 1)
					    {
					        if(FacInfo[PlayerInfo[playa][pFac]][fTipo] != FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode entregar uma arma estando em serviço, para uma pessoa de outra fac.");
							if(FacInfo[PlayerInfo[playa][pFac]][fTipo] == FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] && PlayerInfo[playa][pEmServico] != 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode entregar uma arma a um oficial fora de serviço.");
					    }
						if(PlayerInfo[playerid][pMun127] < ammo) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de munição calibre 12.7x106mm.");

			   			format(string,sizeof(string),"[Munições]Você entregou à %s %d balas de calibre 12.7x106mm.",PlayerName(playa,1), ammo); SendClientMessage(playerid, COLOR_LIGHTGREEN,string);
			   			format(string,sizeof(string),"[Munições]%s entregou à você %d balas de calibre 12.7x106mm.",PlayerName(playerid,1), ammo); SendClientMessage(playa, COLOR_LIGHTGREEN,string);
			   			PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-ammo;
			   			PlayerInfo[playa][pMun127] += ammo;
						ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

						new strl[126];
	   					format(strl, sizeof(strl), "[Munições] %s entregou à %s %d balas de calibre 12.7x106mm.", PlayerName(playerid,0), PlayerName(playa,0), ammo);
	   					LogCMD_EntregarA(strl);
						return 1;
					}
				}
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a este player.");
			}
		}
	}
	return 1;
}

CMD:passargrana(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new qnt, var;
	if (sscanf(params, "I(9999)i",var, qnt)) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /pagar [ID/Mascara id] [Valor]");
	else
	{
	    if(var > 1000)
	    {
	    	for(new o = 0; o < MAX_PLAYERS; o++)
	    	{
	        	if(IsPlayerConnected(o))
	        	{
	                if(var == PlayerInfo[o][pMascID])
	                {
	                    var = o;
	                    break;
	                }
	        	}
	    	}
		}
 		if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /passargrana [ID] [Valor]");
 		if(var == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode pagar algo para sí mesmo.");
		if(!IsPlayerConnected(var)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido.");
    	if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido.");
    	if(qnt < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar valores negativos.");
    	if(PlayerInfo[playerid][pGranaSuja] < qnt) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de dinheiro sujo.");

    	new ip1[126], ip2[126], targetid;
    	format(ip1, sizeof(ip1), "%s", PrintPlayerIP(playerid));
    	format(ip2, sizeof(ip2), "%s", PrintPlayerIP(var));

    	if(strcmp(ip1,ip2,true) == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode passar para uma conta no mesmo IP.");

        if(GetDistanceBetweenPlayers(playerid,var) < 7.5)
        {
            if(GetPVarInt(var, "PlayerSpectate") == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a este player.");
            if(PlayerInfo[playerid][pLevel] == 20)
            {
                if(qnt > 1500)
                {
                    format(string, sizeof(string), "AdmWarn: ANTI-MF, %s[%d] pode estar fazendo money farm. [TC: %d, Entrgou R$%d, para: %s]", PlayerName(playerid,0), playerid, PlayerInfo[targetid][pLevel], qnt, PlayerName(var,0));
					SendAdminMessage(COLOR_YELLOW,string);

					new strl[126];
					format(strl, sizeof(strl), "[ Possivel Money Farm] %s pagou para %s a quantidade de R$%d.", PlayerName(playerid,0), PlayerName(var,0), qnt);
	   				LogCMD_PAGAR(strl);
                }
            }

            PlayerInfo[playerid][pGranaSuja] = PlayerInfo[playerid][pGranaSuja]-qnt;
            PlayerInfo[var][pGranaSuja] = PlayerInfo[var][pGranaSuja]+qnt;
			format(string,sizeof(string)," Você deu para %s, R$%d sujo.",PlayerName(var,1), qnt);
	 		SendClientMessage(playerid, COLOR_CINZA,string);
	 		format(string,sizeof(string)," Você recebeu R$%d sujo de %s.", qnt, PlayerName(playerid,1));
	 		SendClientMessage(var, COLOR_CINZA,string);

	 		if(PlayerInfo[playerid][pMorto] == 0) ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

			new strl[126];
	   		format(strl, sizeof(strl), "%s pagou para %s a quantidade de dinheiro sujo R$%d.", PlayerName(playerid,0), PlayerName(var,0), qnt);
	   		LogCMD_PAGAR(strl);
	   		return 1;
		}
		else
		{	SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a este player."); }
	}
	return 1;
}

CMD:pagar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new qnt, var;
	if (sscanf(params, "I(9999)i",var, qnt)) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /pagar [ID/Mascara id] [Valor]");
	else
	{
	    if(var > 1000)
	    {
	    	for(new o = 0; o < MAX_PLAYERS; o++)
	    	{
	        	if(IsPlayerConnected(o))
	        	{
	                if(var == PlayerInfo[o][pMascID])
	                {
	                    var = o;
	                    break;
	                }
	        	}
	    	}
		}
 		if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /pagar [ID] [Valor]");
 		if(var == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode pagar algo para sí mesmo.");
		if(!IsPlayerConnected(var)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido.");
    	if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido.");
    	if(qnt < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar valores negativos.");
    	if(PlayerInfo[playerid][pGrana] < qnt) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso.");

    	new ip1[126], ip2[126], targetid;
    	format(ip1, sizeof(ip1), "%s", PrintPlayerIP(playerid));
    	format(ip2, sizeof(ip2), "%s", PrintPlayerIP(var));

    	if(strcmp(ip1,ip2,true) == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode pagar para uma conta no mesmo IP.");

        if(GetDistanceBetweenPlayers(playerid,var) < 7.5)
        {
            if(GetPVarInt(var, "PlayerSpectate") == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a este player.");
            if(PlayerInfo[playerid][pLevel] == 20)
            {
                if(qnt > 1500)
                {
                    format(string, sizeof(string), "AdmWarn: ANTI-MF, %s[%d] pode estar fazendo money farm. [TC: %d, Entrgou R$%d, para: %s]", PlayerName(playerid,0), playerid, PlayerInfo[targetid][pLevel], qnt, PlayerName(var,0));
					SendAdminMessage(COLOR_YELLOW,string);

					new strl[126];
					format(strl, sizeof(strl), "[ Possivel Money Farm ] %s pagou para %s a quantidade de R$%d.", PlayerName(playerid,0), PlayerName(var,0), qnt);
	   				LogCMD_PAGAR(strl);
                }
            }

            PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-qnt;
            PlayerInfo[var][pGrana] = PlayerInfo[var][pGrana]+qnt;
			format(string,sizeof(string)," Você deu para %s, R$%d.",PlayerName(var,1), qnt);
	 		SendClientMessage(playerid, COLOR_CINZA,string);
	 		format(string,sizeof(string)," Você recebeu R$%d de %s.", qnt, PlayerName(playerid,1));
	 		SendClientMessage(var, COLOR_CINZA,string);

	 		if(PlayerInfo[playerid][pMorto] == 0) ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

			new strl[126];
	   		format(strl, sizeof(strl), "%s pagou para %s a quantidade de R$%d.", PlayerName(playerid,0), PlayerName(var,0), qnt);
	   		LogCMD_PAGAR(strl);
	   		return 1;
		}
		else
		{	SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a este player."); }
	}
	return 1;
}

COMMAND:savings(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");

    if(PlayerInfo[playerid][pEntrouEmpresa] == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está no banco.");
    if(EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eTipo] == EMP_TIPO_BANCO)
	{
		new idx = 0;
	 	new opt[256];
		opt = strtok(params,idx);
		if(!strlen(opt))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /savings [depositar / sacar]");
			return 1;
		}
		else
		{
		   	if(strcmp(opt, "depositar", true) == 0)
			{
			    new tmp4[256], chatstr[256];
				tmp4 = strtok(params,idx);
				if(!strlen(tmp4))
				{
					SendClientMessage(playerid,COLOR_LIGHTRED,"Para criar uma conta nos savings utilize: /savings depositar [valor](10000 ~ 20000)");
					return 1;
				}
				else
				{
					new qnt = strval(tmp4);
					if(PlayerInfo[playerid][pGrana] < qnt) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de dinheiro.");

					if(qnt < 10000) return SendClientMessage(playerid, COLOR_LIGHTRED, "O valor minimo de depósito é de R$10,000.");
					if(qnt > 500000) return SendClientMessage(playerid, COLOR_LIGHTRED, "O valor máximo de depósito é de R$500,000.");
					if(PlayerInfo[playerid][pSavings] == 0)
					{
					    PlayerInfo[playerid][pSavings] = qnt;
	                    PlayerInfo[playerid][pSavingsGerando] = 1;
	                    PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-qnt;

					    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
		    			SendClientMessage(playerid, COLOR_WHITE, "Caixa Ecônomica Federal");
		    			format(chatstr,sizeof(chatstr),"Você investiu R$%d e só poderá ser retirado quando você atingir R$500,000.", qnt); SendClientMessage(playerid, COLOR_WHITE, chatstr);
		    			SendClientMessage(playerid, COLOR_WHITE, "O seu investimento aumentará até que chegue em R$500,000.");
		    			SendClientMessage(playerid, COLOR_WHITE, "Você não terá acesso as suas funções bancárias em quanto houver um saving ativo.");
		    			SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");

		    			new strl[126];
		   				format(strl, sizeof(strl), "%s depositou %d [Savings].", PlayerName(playerid,0), qnt);
		   				LogCMD_Savings(strl);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você já tem um depósito em ativo gerando juros.");
				}
			}
			if(strcmp(opt, "sacar", true) == 0)
			{
			    new chatstr[124];
				if(PlayerInfo[playerid][pSavings] >= 500000)
				{
				    new savings = PlayerInfo[playerid][pSavings];
	                PlayerInfo[playerid][pBanco] = PlayerInfo[playerid][pBanco]+PlayerInfo[playerid][pSavings];

				    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
	    			SendClientMessage(playerid, COLOR_WHITE, "Caixa Ecônomica Federal");
	    			format(chatstr,sizeof(chatstr),"Você sacou seus investimentos, um total de R$%d.", savings);
	    			SendClientMessage(playerid, COLOR_WHITE, chatstr);
	    			SendClientMessage(playerid, COLOR_WHITE, "Suas funções bancárias foram reativadas.");
	    			format(chatstr,sizeof(chatstr),"Saldo Atual: R$%d.", PlayerInfo[playerid][pBanco]);
	    			SendClientMessage(playerid, COLOR_WHITE, chatstr);
	    			SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");

	    			PlayerInfo[playerid][pSavings] = 0;
	    			PlayerInfo[playerid][pSavingsGerando] = 0;

	    			new strl[126];
		   			format(strl, sizeof(strl), "%s sacou %d.", PlayerName(playerid,0), savings);
		   			LogCMD_Savings(strl);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "Seus investimentos ainda não atingiram o valor de R$500,000.");
			}
		}
	}
	return 1;
}

ALTCOMMAND:sussurrar->whisper;
ALTCOMMAND:s->whisper;
ALTCOMMAND:w->whisper;
COMMAND:whisper(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new opcao[256], var;
	if (sscanf(params, "I(9999)s[256]",var, opcao))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} (/s)ussurrar [ID] [mensagem]");
		return 1;
	}
	else
	{
 		if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /sussurrar [ID] [Mensagem]");
 		if(!strlen(opcao)) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /sussurrar [ID] [Mensagem]");
 		if(var == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode sussurrar para sí mesmo.");
		if(!IsPlayerConnected(var)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido.");
    	if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido.");

        format(string,sizeof(string),"%s sussurra: %s",PlayerName(playerid, 1), opcao);
		SendClientMessage(playerid, COLOR_YELLOW,string);

        if(GetDistanceBetweenPlayers(playerid,var) < 7.5)
        {
        	if(GetPVarInt(var, "PlayerSpectate") == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a este player.");

            format(string, sizeof(string), "* %s sussurou algo.", PlayerName(playerid, 1));
    	    SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 10000);

 			format(string,sizeof(string),"%s sussurra: %s",PlayerName(playerid, 1), opcao);
 			SendClientMessage(var, COLOR_YELLOW,string);
 			return 1;
		}
 		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a este player.");
	}
}

COMMAND:sacar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");

	new chatstr[256], qnt;
	if(sscanf(params, "d", qnt))
	{
	    if(PlayerInfo[playerid][pEntrouCasa] != -1)
	    {
	        if(HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hDono] == PlayerInfo[playerid][pID])
			{
          		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /sacar [quantia]");
				format(string, 256, "[Casa %d] Você tem R$%d guardado em sua casa.", PlayerInfo[playerid][pEntrouCasa], HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hBank]);
				SendClientMessage(playerid, COLOR_CINZA, string);
				return 1;
			}
	    }
	    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
		{
		    if(EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eDono] == PlayerInfo[playerid][pID])
			{
   				SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /sacar [quantia]");
				format(string, 256, "[Empresa %d] Você tem R$%d guardado em sua empresa.", PlayerInfo[playerid][pEntrouEmpresa], EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eBank]);
				SendClientMessage(playerid, COLOR_CINZA, string);
				return 1;
			}
			else if(EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eTipo] == EMP_TIPO_BANCO)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /sacar [quantia]");
				format(string, 256, " Você tem R$%d em sua conta", PlayerInfo[playerid][pBanco]);
				SendClientMessage(playerid, COLOR_CINZA, string);
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Essa empresa não é um banco ou você não tem acesso ao cofre da mesma.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode guardar dinheiro por aqui, apenas em propriedades suas.");
	}
	else
	{
	    if(qnt > 0)
	    {
		    if(PlayerInfo[playerid][pEntrouCasa] != -1)
		    {
				if(HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hDono] == PlayerInfo[playerid][pID])
				{
				    if(HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hBank] < qnt) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tudo isso no cofre da casa.");

                    PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]+qnt;
                    HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hBank] = HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hBank]-qnt;
                    format(string, 256, "[Casa %d] Você retirou R$%d em sua casa.", PlayerInfo[playerid][pEntrouCasa], qnt);
					SendClientMessage(playerid, COLOR_CINZA, string);
					SalvarCasa(PlayerInfo[playerid][pEntrouCasa]);

					new strl[126];
					format(strl, sizeof(strl), "%s sacou R$%d da casa %d.", PlayerName(playerid,0), qnt, PlayerInfo[playerid][pEntrouCasa]);
	   				LogCMD_sacar(strl);
					return 1;
				}
			}
			else if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
			{
			    if(EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eDono] == PlayerInfo[playerid][pID])
				{
				    if(EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eBank] < qnt) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tudo isso no cofre da empresa.");
                    new total = EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eReqProd]*EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][ePagaProd];
					if(total > (EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eBank]-qnt)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode tirar o dinheiro destinado a compra de carga da empresa.");

                    PlayerInfo[playerid][pGrana]+=qnt;
                    EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eBank]-=qnt;
                    format(string, 256, "[Empresa %d] Você retirou R$%d em sua empresa.", PlayerInfo[playerid][pEntrouEmpresa], qnt);
					SendClientMessage(playerid, COLOR_CINZA, string);

					SalvarEmpresa(PlayerInfo[playerid][pEntrouEmpresa]);

					new strl[126];
					format(strl, sizeof(strl), "%s sacou R$%d da empresa %d.", PlayerName(playerid,0), qnt, PlayerInfo[playerid][pEntrouEmpresa]);
	   				LogCMD_sacar(strl);
					return 1;
				}
				else if(EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eTipo] == EMP_TIPO_BANCO)
				{
	    			//if(PlayerInfo[playerid][pSavings] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar essa função do banco em quanto tiver Savings ativo.");
					if(PlayerInfo[playerid][pBanco] < qnt) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tudo isso no banco.");
	      			PlayerInfo[playerid][pBanco] = PlayerInfo[playerid][pBanco]-qnt;
			        PlayerInfo[playerid][pGrana] += qnt;

		    		format(chatstr,sizeof(chatstr),"Você sacou R$%d da sua conta, total: R$%d, taxa: R$0", qnt, PlayerInfo[playerid][pBanco]);
		    		SendClientMessage(playerid, COLOR_YELLOW, chatstr);
		    		new strl[126];
					format(strl, sizeof(strl), "%s sacou R$%d do banco %d.", PlayerName(playerid,0), qnt);
					LogCMD_sacar(strl);
			    	return 1;
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Essa empresa não é um banco ou você não tem acesso ao cofre da mesma.");
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode guardar dinheiro por aqui, apenas em propriedades suas.");
		}
	}
	return 1;
}

COMMAND:depositar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");

	new chatstr[256], qnt;
	if(sscanf(params, "d", qnt))
	{
	    if(PlayerInfo[playerid][pEntrouCasa] != -1)
	    {
	        if(HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hDono] == PlayerInfo[playerid][pID])
			{
          		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /depositar [quantia]");
				format(string, 256, "[Casa %d] Você tem R$%d guardado em sua casa.", PlayerInfo[playerid][pEntrouCasa], HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hBank]);
				SendClientMessage(playerid, COLOR_CINZA, string);
				return 1;
			}
	    }
	    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
		{
		    if(EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eDono] == PlayerInfo[playerid][pID])
			{
   				SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /depositar [quantia]");
				format(string, 256, "[Empresa %d] Você tem R$%d guardado em sua empresa.", PlayerInfo[playerid][pEntrouEmpresa], EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eBank]);
				SendClientMessage(playerid, COLOR_CINZA, string);
				return 1;
			}
            else if(EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eTipo] == EMP_TIPO_BANCO)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /depositar [quantia]");
				format(string, 256, " Você tem R$%d em sua conta", PlayerInfo[playerid][pBanco]);
				SendClientMessage(playerid, COLOR_CINZA, string);
				return 1;
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode guardar dinheiro por aqui, apenas em propriedades suas.");
	}
	else
	{
	    if(qnt > 0)
	    {
	        if(qnt == 99876524) return SendBankErrorMessage(playerid);
	        if(qnt > PlayerInfo[playerid][pGrana]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem essa quantia.");
		    if(PlayerInfo[playerid][pEntrouCasa] != -1)
		    {
				if(HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hDono] == PlayerInfo[playerid][pID])
				{
                    PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-qnt;
                    HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hBank] = HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hBank]+qnt;
                    format(string, 256, "[Casa %d] Você guardou R$%d em sua casa.", PlayerInfo[playerid][pEntrouCasa], qnt);
					SendClientMessage(playerid, COLOR_CINZA, string);
					SalvarCasa(PlayerInfo[playerid][pEntrouCasa]);

					new strl[126];
					format(strl, sizeof(strl), "%s depositou R$%d na casa %d.", PlayerName(playerid,0), qnt, PlayerInfo[playerid][pEntrouCasa]);
					LogCMD_deposito(strl);
					return 1;
				}
			}
			else if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
			{
			    if(EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eDono] == PlayerInfo[playerid][pID])
				{
                    PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-qnt;
                    EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eBank] = EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eBank]+qnt;
                    format(string, 256, "[Empresa %d] Você guardou R$%d em sua empresa.", PlayerInfo[playerid][pEntrouEmpresa], qnt);
					SendClientMessage(playerid, COLOR_CINZA, string);

					SalvarEmpresa(PlayerInfo[playerid][pEntrouEmpresa]);

					new strl[126];
					format(strl, sizeof(strl), "%s depositou R$%d na empresa %d.", PlayerName(playerid,0), qnt, PlayerInfo[playerid][pEntrouEmpresa]);
					LogCMD_deposito(strl);
					return 1;
				}
				else if(EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eTipo] == EMP_TIPO_BANCO)
				{
	    			//if(PlayerInfo[playerid][pSavings] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode usar essa função do banco em quanto tiver Savings ativo.");

	      			new saldoAntigo = PlayerInfo[playerid][pBanco];
					PlayerInfo[playerid][pBanco] += qnt;
		        	PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-qnt;
					
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "|___ EXTRATO BANCÁRIO ___|");
					format(chatstr,sizeof(chatstr)," Balanço antigo: R$ %d.", saldoAntigo);
			    	SendClientMessage(playerid, COLOR_ADMDUTYOFF, chatstr);
			    	format(chatstr,sizeof(chatstr)," Depósito: R$ %d.", qnt);
			    	SendClientMessage(playerid, COLOR_PD2, chatstr);
			    	SendClientMessage(playerid, COLOR_FINALDEPOSIT, "|-----------------------------------------|");
			    	format(chatstr,sizeof(chatstr)," Novo balanço: R$ %d.", PlayerInfo[playerid][pBanco]);
			    	SendClientMessage(playerid, COLOR_WHITE, chatstr);

			    	new strl[126];
					format(strl, sizeof(strl), "%s depositou R$%d no banco.", PlayerName(playerid,0), qnt);
					LogCMD_deposito(strl);
			    	return 1;
				}
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode guardar dinheiro por aqui, apenas em propriedades suas.");
		}
	}
	return 1;
}

COMMAND:pix(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
	{
		new chatstr[256], qnt, playa;
		if(sscanf(params, "dd", playa, qnt)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /pix [id] [quantia]");
		else
		{
		    if(qnt <= 0) return 1;
		    if(playa == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode fazer PIX para si mesmo.");
		    if(!PlayerInfo[playa][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O destinatário não está logado.");
		    if(PlayerInfo[playerid][pBanco] >= qnt)
		    {
		        PlayerInfo[playa][pBanco] += qnt;
		        PlayerInfo[playerid][pBanco] = PlayerInfo[playerid][pBanco]-qnt;

	    		SendClientMessage(playerid, COLOR_WHITE, "Caixa Ecônomica Federal");
	    		format(chatstr,sizeof(chatstr)," Você efetuou um PIX de R$%d, para a conta de %s.", qnt, PlayerName(playa, 0));

	    		format(chatstr, sizeof(chatstr), "SMS: Você recebeu um PIX de %s no valor: R$%d, Ag: 3557 C:579847-2", PlayerName(playerid, 0), qnt);
				SCM(playa, COLOR_YELLOW, chatstr);
				PlayAudioStreamForPlayer(playerid, "https://cp-frp.com.br.com/midia/pix.mp3");

				new strl[126];
				format(strl, sizeof(strl), "%s fez um pix R$%d para %s.", PlayerName(playerid,0), qnt, PlayerName(playa,0));
				LogCMD_transf(strl);
			}
		}
	}
	return 1;
}

COMMAND:transferir(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
    //if(PlayerInfo[playerid][pSavings] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar essa função do banco em quanto tiver Savings ativo.");
    if(PlayerInfo[playerid][pEntrouEmpresa] == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está no banco.");
    if(EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eTipo] == EMP_TIPO_BANCO)
	{
		new chatstr[256], qnt, playa;
		if(sscanf(params, "dd", playa, qnt)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /transferir [id] [quantia]");
		else
		{
		    if(qnt <= 0) return 1;
		    if(playa == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode transferir para si mesmo.");
		    if(!PlayerInfo[playa][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O destinatário não está logado.");
		    if(PlayerInfo[playerid][pBanco] >= qnt)
		    {
		        PlayerInfo[playa][pBanco] += qnt;
		        PlayerInfo[playerid][pBanco] = PlayerInfo[playerid][pBanco]-qnt;

	    		SendClientMessage(playerid, COLOR_WHITE, "Caixa Ecônomica Federal");
	    		format(chatstr,sizeof(chatstr)," Você transferiu R$%d, para a conta de %s", qnt, PlayerName(playa, 0));
				SCM(playa, COLOR_YELLOW, chatstr);

	    		format(chatstr, sizeof(chatstr), "SMS: Você recebeu uma transferencia bancária de %s no valor: R$%d, remetente: Caixa Ecônomica Federal", PlayerName(playerid, 0), qnt);
				SCM(playa, COLOR_YELLOW, chatstr);

				new strl[126];
				format(strl, sizeof(strl), "%s transferiu R$%d para %s.", PlayerName(playerid,0), qnt, PlayerName(playa,0));
				LogCMD_transf(strl);
			}
		}
	}
	return 1;
}

ALTCOMMAND:l->local;
COMMAND:local(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");

	new chatstr[256], text[256];
	if(sscanf(params, "s[256]", text)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} (/l)ocal [texto]");
	else
	{
		format(chatstr,sizeof(chatstr),"%s diz: %s", PlayerName(playerid, 1), params);
		ProxDetector(DISTANCIA_CHAT, playerid, chatstr,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	}
	return 1;
}

COMMAND:baixo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");

	new chatstr[256], text[256];
	if(sscanf(params, "s[256]", text)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /baixo [texto]");
	else
	{
		format(chatstr,sizeof(chatstr),"%s [baixo] diz: %s", PlayerName(playerid, 1), text);
		ProxDetector(6.0, playerid, chatstr,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	}
	return 1;
}

ALTCOMMAND:mb->muitobaixo;
COMMAND:muitobaixo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");

	new chatstr[256], text[256];
	if(sscanf(params, "s[256]", text)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /mb [texto]");
	else
	{
		format(chatstr,sizeof(chatstr),"%s [baixo] diz: %s", PlayerName(playerid, 1), text);
		ProxDetector(3.0, playerid, chatstr,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	}
	return 1;
}

forward RemovePlayerWalkStyle(playerid);
public RemovePlayerWalkStyle(playerid)
{
    SendClientMessage(playerid,COLOR_CINZA,"Estilo de caminhar removido.");
    PlayerInfo[playerid][pWalkStyle] = 0;
	return 1;
}

forward GetPlayerWalkStyle(playerid);
public GetPlayerWalkStyle(playerid)
{
	return PlayerInfo[playerid][pWalkStyle];
}

ALTCOMMAND:ec->estilocaminhada;
COMMAND:estilocaminhada(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");
	Dialog_Show(playerid, Dialog_EstiloCaminhada, DIALOG_STYLE_LIST, "{FFFFFF}Estilo de Caminhada","{FFFFFF}Gang 1\n{FFFFFF}Gang 2\n{FFFFFF}Normal\n{FFFFFF}Sexy\n{FFFFFF}Idoso\n{FFFFFF}Sorrateiro\n{FFFFFF}Cego\n{FFFFFF}Armado\n{FFFFFF}Policial\n{FFFFFF}Remover","Selecionar", "Sair");
	return 1;
}

Dialog:Dialog_EstiloCaminhada(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
		switch(listitem)
		{
  			case 0: SetPlayerWalkStyle(playerid,WALKSTYLE_GANG1);
    		case 1: SetPlayerWalkStyle(playerid,WALKSTYLE_GANG2);
	     	case 2: SetPlayerWalkStyle(playerid,WALKSTYLE_NORMAL);
     		case 3: SetPlayerWalkStyle(playerid,WALKSTYLE_SEXY);
	     	case 4: SetPlayerWalkStyle(playerid,WALKSTYLE_OLD);
	     	case 5: SetPlayerWalkStyle(playerid,WALKSTYLE_SNEAK);
	     	case 6: SetPlayerWalkStyle(playerid,WALKSTYLE_BLIND);
	     	case 7: SetPlayerWalkStyle(playerid,WALKSTYLE_ARMED);
	     	case 8: SetPlayerWalkStyle(playerid,WALKSTYLE_POLICE);
	     	case 9: RemovePlayerWalkStyle(playerid);
		}
	}
	return 1;
}

forward SetPlayerWalkStyle(playerid,style);
public SetPlayerWalkStyle(playerid,style)
{
	SendClientMessage(playerid,COLOR_WHITE,"O seu estilo de caminhar foi mudado.");
	PlayerInfo[playerid][pWalkStyle] = style;
	return 1;
}

COMMAND:upgrade(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");

	new option[32];
	if(sscanf(params,"s[32]",option))
	{
	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
	    SendClientMessage(playerid, COLOR_WHITE, "*** UPGRADES ***");
        format(string, 256, "SINTAXE: /upgrade [nome do upgrade (Você tem %d pontos de upgrade)]", PlayerInfo[playerid][pPontos]);
     	SendClientMessage(playerid, COLOR_CINZA, string);
	    SendClientMessage(playerid, COLOR_WHITE, "{DDDDDD}Vida Extra: vida.");
	    SendClientMessage(playerid, COLOR_WHITE, "{DDDDDD}Força Extra: forca");

	    //Habilidade Criação de Drogas
	    // pHabDrug

	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");

		return 1;
	}
    if(strcmp(option, "vida", true) == 0)
	{
	    if(PlayerInfo[playerid][pPontos] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem pontos de Upgrade.");
        if(PlayerInfo[playerid][pUsouDroga] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando sob o efeito de drogas...");

		if(PlayerInfo[playerid][pHealthMax] < 130)
		{
        	PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+5.0;
        	PlayerInfo[playerid][pPontos]--;
        	format(string,sizeof(string),"{FFFFFF} Você aumentou sua vida máxima para %.2f.", PlayerInfo[playerid][pHealthMax]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
		else if(PlayerInfo[playerid][pHealthMax] < 140)
		{
		    if(PlayerInfo[playerid][pPontos] < 2) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 2 pontos de Upgrade para melhorar sua vida.");
		    PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+5.0;
        	PlayerInfo[playerid][pPontos] = PlayerInfo[playerid][pPontos]-2;
        	format(string,sizeof(string),"{FFFFFF} Você aumentou sua vida máxima para %.2f.", PlayerInfo[playerid][pHealthMax]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
		else if(PlayerInfo[playerid][pHealthMax] < 150)
		{
		    if(PlayerInfo[playerid][pPontos] < 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 3 pontos de upgrade para melhorar sua vida.");
		    PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+5.0;
        	PlayerInfo[playerid][pPontos] = PlayerInfo[playerid][pPontos]-3;
        	format(string,sizeof(string),"{FFFFFF} Você aumentou sua vida máxima para %.2f.", PlayerInfo[playerid][pHealthMax]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
        else if(PlayerInfo[playerid][pHealthMax] < 160)
        {
            if(PlayerInfo[playerid][pPontos] < 4) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 4 pontos de upgrade para melhorar sua vida.");
            PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+5.0;
            PlayerInfo[playerid][pPontos] = PlayerInfo[playerid][pPontos]-4;
            format(string,sizeof(string),"{FFFFFF} Você aumentou sua vida máxima para %.2f.", PlayerInfo[playerid][pHealthMax]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            return 1;
        }
	}
	else if(strcmp(option, "forca", true) == 0)
	{
	    if(PlayerInfo[playerid][pPontos] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem pontos de upgrade.");
		if(PlayerInfo[playerid][pForca] < 100)
		{
        	if(PlayerInfo[playerid][pForca] <= 40)
			{
				PlayerInfo[playerid][pForca] = PlayerInfo[playerid][pForca]+10;
				PlayerInfo[playerid][pPontos]--;
			}
			else if(PlayerInfo[playerid][pForca] < 80)
			{
			    if(PlayerInfo[playerid][pPontos] >= 2)
			    {
					PlayerInfo[playerid][pForca] = PlayerInfo[playerid][pForca]+10;
					PlayerInfo[playerid][pPontos] = PlayerInfo[playerid][pPontos]-2;
				}
			 	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 2 pontos de upgrade.");
			}
			else if(PlayerInfo[playerid][pForca] < 100)
			{
			    if(PlayerInfo[playerid][pPontos] >= 3)
			    {
					PlayerInfo[playerid][pForca] = PlayerInfo[playerid][pForca]+10;
					PlayerInfo[playerid][pPontos] = PlayerInfo[playerid][pPontos]-3;
				}
			 	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 3 pontos de upgrade.");
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você atingiu a força máxima.");

        	format(string,sizeof(string),"Você aumentou sua força para %d.", PlayerInfo[playerid][pForca]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
	}
	return 1;
}

ALTCOMMAND:tp->telapreta;
COMMAND:telapreta(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");

    switch(GetPVarInt(playerid, "ScreenTelinha"))
    {
		case 0:
		{
			TextDrawShowForPlayer(playerid,ScreenTelinha);
			SetPVarInt(playerid, "ScreenTelinha", 1);
		}
		case 1:
		{
		    TextDrawHideForPlayer(playerid,ScreenTelinha);
			SetPVarInt(playerid, "ScreenTelinha", 0);
		}
	}
	return 1;
}

ALTCOMMAND:tc->telacinza;
COMMAND:telacinza(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");

    switch(GetPVarInt(playerid, "TelinhaPretaa"))
    {
		case 0:
		{
			TextDrawShowForPlayer(playerid,TelinhaPreta);
			SetPVarInt(playerid, "TelinhaPretaa", 1);
		}
		case 1:
		{
		    TextDrawHideForPlayer(playerid,TelinhaPreta);
			SetPVarInt(playerid, "TelinhaPretaa", 0);
		}
	}
	return 1;
}


COMMAND:estilochat(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /estilochat [0-8]");
	else
	{
		switch(aimid)
		{
		    case 0:
		    {
		        PlayerInfo[playerid][pChatStyle] = 0;
		        SendClientMessage(playerid,COLOR_WHITE,"ERRO:{FFFFFF}Estilo de Chat removido.");
		        SetTimer("StopTalking",7000,0);
		    }
            case 1 .. 8:
            {
                PlayerInfo[playerid][pChatStyle] = aimid;
		        SendClientMessage(playerid,COLOR_WHITE,"ERRO:{FFFFFF}Estilo de Chat setado.");
            }
            default: SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /estilochat [0-8]");
		}
	}
	return 1;
}

forward StopTalking(playerid);
public StopTalking(playerid)
{
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 3.1, 0, 1, 1, 1, 1, 1);
    ComAnim[playerid] = 0;
    ClearAnimations(playerid, 1);
	return 1;
}
//Sistema de misturar drogas - Yur$
COMMAND:misturar(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new idx = 0;
	new tmp[256];
	tmp = strtok(params,idx);
	if(!strlen(tmp))
	{
        SendClientMessage(playerid, COLOR_VEICULO,"____________________________________________________");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: /misturar [ação]");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: cocaina - Aqui você usuará pasta base de cocaína e irá fazer a cocaína excelente.");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: cocainaE - Aqui você usuará cocaina excelente e passará para a qualidade boa.");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: cocainaB - Aqui você usuará cocaina boa e passará para a qualidade ruim.");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: crack - Aqui você usuará pasta base de cocaína para criar o crack excelente.");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: crackE - Aqui você usuará crack excelente e passará para a qualidade boa.");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: crackB - Aqui você usuará crack bom e passará para a qualidade ruim.");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: metaE - Aqui você usuará Metanfetamina excelente e passará para a qualidade boa.");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: metaB - Aqui você usuará Metanfetamina boa e passará para a qualidade ruim.");
		SendClientMessage(playerid, COLOR_VEICULO,"____________________________________________________");
		return 1;
	}

	if(strcmp(tmp,"cocaina",true) == 0)
	{
		if(PlayerInfo[playerid][pCortaRem] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um cortador de remédio.");
		if(PlayerDroga[playerid][PBC] < 999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de pelo menos 1000g de pasta base de cocaína.");
		if(PlayerDroga[playerid][LDC] < 499) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 500g de lidocaína.");
		if(PlayerDroga[playerid][HDZ] < 199) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 200g de hidroxizina.");
		if(PlayerDroga[playerid][BZC] < 99) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 100g de benzocaína.");
		if(PlayerInfo[playerid][pFabricouD] > 6) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já fabricou droga o bastante neste PayDay, volte após seu payday.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você nãopode utilizar este comando enquanto estiver amarrado.");

		for(new i = 0; i < MAX_LABO; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,10.5,LaboDrug[i][ldposX], LaboDrug[i][ldposY], LaboDrug[i][ldposZ]))
			{

				SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você começou o processo de criação da cocaina.");	
				SetTimerEx("FazendoCoca", 10000, false, "d", playerid);

				new stringvendeu[256];
				format(stringvendeu,sizeof(stringvendeu),"** %s se aproxima da bancada, pega um triturador grande de comprimidos e coloca os remédios no pote. Começa a tritura-la.", PlayerName(playerid, 1));
				ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				new strl[126];
				format(strl, 126, "%s criou a cocaina. [/misturar cocaina]", PlayerName(playerid, 0));
				LogCMD_venderdroga(strl);
			}
		}
	}
	if(strcmp(tmp,"crack",true) == 0)
	{
		if(PlayerInfo[playerid][pCortaRem] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um cortador de remédio.");
		if(PlayerDroga[playerid][PBC] < 999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de pelo menos 1000g de pasta base de cocaína.");
		if(PlayerDroga[playerid][BDS] < 499) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 500g de bicarbonato de sódio.");
		if(PlayerInfo[playerid][pFabricouD] > 6) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já fabricou droga o bastante neste PayDay, volte após seu payday.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você nãopode utilizar este comando enquanto estiver amarrado.");

		for(new i = 0; i < MAX_LABO; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,10.5,LaboDrug[i][ldposX], LaboDrug[i][ldposY], LaboDrug[i][ldposZ]))
			{

				SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você começou o processo de criação do crack.");	
				SetTimerEx("FazendoCrack", 10000, false, "d", playerid);

				new stringvendeu[256];
				format(stringvendeu,sizeof(stringvendeu),"** %s se aproxima da bancada, pega um triturador grande de comprimidos e coloca o bicarbonato no pote. Começa a tritura-la.", PlayerName(playerid, 1));
				ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				new strl[126];
				format(strl, 126, "%s criou o crack. [/misturar pasta base]", PlayerName(playerid, 0));
				LogCMD_venderdroga(strl);
			}
		}
	}
	if(strcmp(tmp,"cocainaE",true) == 0)
	{
		if(PlayerInfo[playerid][pCortaRem] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um cortador de remédio.");
		if(PlayerDroga[playerid][CocaE] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de pelo menos 10g de cocaina Excelente.");
		if(PlayerInfo[playerid][pFabricouD] > 6) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já fabricou droga o bastante neste PayDay, volte após seu payday.");
		if(PlayerDroga[playerid][LDC] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 10g de Lidocaína.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você nãopode utilizar este comando enquanto estiver amarrado.");

		for(new i = 0; i < MAX_LABO; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,10.5,LaboDrug[i][ldposX], LaboDrug[i][ldposY], LaboDrug[i][ldposZ]))
			{

				SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você começou o processo de mistura de cocaina.");	
				SetTimerEx("MisturandoCocaB", 10000, false, "d", playerid);

				new stringvendeu[256];
				format(stringvendeu,sizeof(stringvendeu),"** %s se aproxima da bancada, pega um triturador de comprimidos e coloca a Efedrina no pote. Começa a tritura-la.", PlayerName(playerid, 1));
				ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				new strl[126];
				format(strl, 126, "%s Misturou a cocaina. [/misturar cocaina]", PlayerName(playerid, 0));
				LogCMD_venderdroga(strl);
			}
		}
	}
	if(strcmp(tmp,"cocainaB",true) == 0)
	{
		if(PlayerInfo[playerid][pCortaRem] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um cortador de remédio.");
		if(PlayerDroga[playerid][CocaB] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de pelo menos 10g de cocaina boa.");
		if(PlayerDroga[playerid][Efedrina] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 10mg de Efedrina.");
		if(PlayerDroga[playerid][LDC] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 10g de Lidocaína.");
		if(PlayerDroga[playerid][BDS] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 10g de Bicarbonato de sódio.");
		if(PlayerInfo[playerid][pFabricouD] > 6) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já fabricou droga o bastante neste PayDay, volte após seu payday.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você nãopode utilizar este comando enquanto estiver amarrado.");

		for(new i = 0; i < MAX_LABO; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,10.5,LaboDrug[i][ldposX], LaboDrug[i][ldposY], LaboDrug[i][ldposZ]))
			{

				SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você começou o processo de mistura de cocaina.");	
				SetTimerEx("MisturandoCocaR", 10000, false, "d", playerid);

				new stringvendeu[256];
				format(stringvendeu,sizeof(stringvendeu),"** %s se aproxima da bancada, pega um triturador de comprimidos e coloca a Efedrina no pote. Começa a tritura-la.", PlayerName(playerid, 1));
				ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				new strl[126];
				format(strl, 126, "%s Misturou a cocaina boa com ruim. [/misturar cocaina]", PlayerName(playerid, 0));
				LogCMD_venderdroga(strl);
			}
		}
	}
	if(strcmp(tmp,"crackE",true) == 0)
	{
		if(PlayerInfo[playerid][pCortaRem] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um cortador de remédio.");
		if(PlayerDroga[playerid][CrackE] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de pelo menos 10g de crack excelente.");
		if(PlayerDroga[playerid][Efedrina] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 10g de Efedrina.");
		if(PlayerDroga[playerid][Acloridrico] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 10ml de Acído Cloridrico.");
		if(PlayerDroga[playerid][BDS] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 10g de Bicarbonato de sódio.");
		if(PlayerInfo[playerid][pFabricouD] > 6) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já fabricou droga o bastante neste PayDay, volte após seu payday.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você nãopode utilizar este comando enquanto estiver amarrado.");

		for(new i = 0; i < MAX_LABO; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,10.5,LaboDrug[i][ldposX], LaboDrug[i][ldposY], LaboDrug[i][ldposZ]))
			{

				SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você começou o processo de mistura do crack.");	
				SetTimerEx("MisturandoCrackB", 10000, false, "d", playerid);

				new stringvendeu[256];
				format(stringvendeu,sizeof(stringvendeu),"** %s se aproxima da bancada, pega um triturador de comprimidos e coloca a Efedrina no pote. Começa a tritura-la.", PlayerName(playerid, 1));
				ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				new strl[126];
				format(strl, 126, "%s Misturou a cocaina bom. [/misturar crack]", PlayerName(playerid, 0));
				LogCMD_venderdroga(strl);
			}
		}
	}
	if(strcmp(tmp,"crackB",true) == 0)
	{
		if(PlayerInfo[playerid][pCortaRem] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um cortador de remédio.");
		if(PlayerDroga[playerid][CrackB] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de pelo menos 10g de crack bom.");
		if(PlayerDroga[playerid][Efedrina] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 10g de Efedrina.");
		if(PlayerDroga[playerid][Acloridrico] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 10ml de Acído Cloridrico.");
		if(PlayerDroga[playerid][BDS] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 10g de Bicarbonato de sódio.");
		if(PlayerInfo[playerid][pFabricouD] > 6) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já fabricou droga o bastante neste PayDay, volte após seu payday.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você nãopode utilizar este comando enquanto estiver amarrado.");

		for(new i = 0; i < MAX_LABO; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,10.5,LaboDrug[i][ldposX], LaboDrug[i][ldposY], LaboDrug[i][ldposZ]))
			{

				SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você começou o processo de mistura de crack.");	
				SetTimerEx("MisturandoCocaR", 10000, false, "d", playerid);

				new stringvendeu[256];
				format(stringvendeu,sizeof(stringvendeu),"** %s se aproxima da bancada, pega um triturador de comprimidos e coloca a Efedrina no pote. Começa a tritura-la.", PlayerName(playerid, 1));
				ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				new strl[126];
				format(strl, 126, "%s Misturou a cocaina boa com ruim. [/misturar]", PlayerName(playerid, 0));
				LogCMD_venderdroga(strl);
			}
		}
	}
	if(strcmp(tmp,"metaE",true) == 0)
	{
		if(PlayerInfo[playerid][pCortaRem] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um cortador de remédio.");
		if(PlayerDroga[playerid][MetE] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de pelo menos 10g de metanfetamina excelente.");
		if(PlayerDroga[playerid][Efedrina] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 10g de Efedrina.");
		if(PlayerDroga[playerid][Acloridrico] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 10ml de Acído Cloridrico.");
		if(PlayerInfo[playerid][pFabricouD] > 6) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já fabricou droga o bastante neste PayDay, volte após seu payday.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você nãopode utilizar este comando enquanto estiver amarrado.");

		for(new i = 0; i < MAX_LABO; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,10.5,LaboDrug[i][ldposX], LaboDrug[i][ldposY], LaboDrug[i][ldposZ]))
			{

				SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você começou o processo de mistura de Metanfetamina.");	
				SetTimerEx("MisturandoMetaB", 10000, false, "d", playerid);

				new stringvendeu[256];
				format(stringvendeu,sizeof(stringvendeu),"** %s se aproxima da bancada, pega um triturador de comprimidos e coloca a Efedrina no pote. Começa a tritura-la.", PlayerName(playerid, 1));
				ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				new strl[126];
				format(strl, 126, "%s Misturou a Metanfetamina excelente. [/misturar]", PlayerName(playerid, 0));
				LogCMD_venderdroga(strl);
			}
		}
	}
	if(strcmp(tmp,"metaB",true) == 0)
	{
		if(PlayerInfo[playerid][pCortaRem] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um cortador de remédio.");
		if(PlayerDroga[playerid][MetB] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de pelo menos 10g de metanfetamina boa.");
		if(PlayerDroga[playerid][Efedrina] < 14) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 15g de Efedrina.");
		if(PlayerDroga[playerid][Acloridrico] < 14) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 15ml de Acído Cloridrico.");
		if(PlayerInfo[playerid][pFabricouD] > 6) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já fabricou droga o bastante neste PayDay, volte após seu payday.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você nãopode utilizar este comando enquanto estiver amarrado.");

		for(new i = 0; i < MAX_LABO; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,10.5,LaboDrug[i][ldposX], LaboDrug[i][ldposY], LaboDrug[i][ldposZ]))
			{

				SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você começou o processo de mistura de Metanfetamina.");	
				SetTimerEx("MisturandoMetaR", 10000, false, "d", playerid);

				new stringvendeu[256];
				format(stringvendeu,sizeof(stringvendeu),"** %s se aproxima da bancada, pega um triturador de comprimidos e coloca a Efedrina no pote. Começa a tritura-la.", PlayerName(playerid, 1));
				ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				new strl[126];
				format(strl, 126, "%s Misturou a metanfetamina ruim excelente. [/misturar]", PlayerName(playerid, 0));
				LogCMD_venderdroga(strl);
			}
		}
	}
	return 1;
}
forward FazendoCoca(playerid);
public FazendoCoca(playerid)
{

	PlayerDroga[playerid][PBC] = PlayerDroga[playerid][PBC]-= 1000;
	PlayerDroga[playerid][BDS] -= 500;
	PlayerDroga[playerid][HDZ] -= 200;
	PlayerDroga[playerid][BZC] -= 100;

	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.0, 0, 1, 1, 1, -1, 1);

	SetTimerEx("FinalizandoCoca", 50000, false, "d", playerid);

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s Pega a mistura triturada, mistura os ingredientes no recipiente.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(stringvendeu,sizeof(stringvendeu),"** %s mistura todos os ingredientes, passa para a panela.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


    return 1;
}
forward FinalizandoCoca(playerid);
public FinalizandoCoca(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s deixa a panela alguns segundos no fogo e fica mexendo a mistura. Depois passa tudo para um pano e vai para a prensa, termina de secar a cocaina.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(stringvendeu,sizeof(stringvendeu),"** %s prensa o crack com 40kg de força e em seguida, remove-a da prensa.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("PegouCoca", 10000, false, "d", playerid);


    return 1;
}
forward PegouCoca(playerid);
public PegouCoca(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s retira o pano da prensa junto da droga. Começa a esfarelar a droga e embalar em um ziplock grande.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


	PlayerDroga[playerid][CocaE]+= 2000;
	PlayerInfo[playerid][pFabricouD]++;
	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você recebeu 2kg de cocaína excelente.");


    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);
    RemovePlayerAttachedObject(playerid, 6);

    return 1;
}
forward FazendoCrack(playerid);
public FazendoCrack(playerid)
{

	PlayerDroga[playerid][PBC] = PlayerDroga[playerid][PBC]-= 1000;
	PlayerDroga[playerid][BDS]-= 500;

	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.0, 0, 1, 1, 1, -1, 1);

	SetTimerEx("FinalizandoCrack", 50000, false, "d", playerid);

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s Pega a mistura triturada, mistura os ingredientes no recipiente.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(stringvendeu,sizeof(stringvendeu),"** %s mistura todos os ingredientes, passa para a panela.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


    return 1;
}
forward FinalizandoCrack(playerid);
public FinalizandoCrack(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s deixa a panela alguns segundos no fogo e fica mexendo a mistura. Depois passa tudo para um pano e vai para a prensa, termina de secar a cocaina.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(stringvendeu,sizeof(stringvendeu),"** %s prensa o crack com 40kg de força e em seguida, remove-a da prensa.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("PegouCrack", 10000, false, "d", playerid);


    return 1;
}
forward PegouCrack(playerid);
public PegouCrack(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s retira o pano da prensa junto da droga. Começa a esfarelar a droga e embalar em um ziplock grande.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


	PlayerDroga[playerid][CrackE]+= 1000;
	PlayerInfo[playerid][pFabricouD]++;
	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você recebeu 1kg de crack excelente.");


    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);
    RemovePlayerAttachedObject(playerid, 6);

    return 1;
}
forward MisturandoCocaB(playerid);
public MisturandoCocaB(playerid)
{

	PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]-= 10;
	PlayerDroga[playerid][Efedrina]-= 10;

	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.0, 0, 1, 1, 1, -1, 1);

	SetTimerEx("FinalizandoCocaB", 50000, false, "d", playerid);

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s Pega a Efedrina triturada e a cocaina, mistura os dois no recipiente.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(stringvendeu,sizeof(stringvendeu),"** %s mistura todos os ingredientes, passa para a panela.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


    return 1;
}
forward FinalizandoCocaB(playerid);
public FinalizandoCocaB(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s deixa a panela alguns segundos no fogo e fica mexendo a mistura. Depois passa tudo para um pano e vai para a prensa, termina de secar a cocaina.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(stringvendeu,sizeof(stringvendeu),"** %s prensa a cocaina com 25kg de força e em seguida, remove-a da prensa.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("PegouCocainaBoa", 10000, false, "d", playerid);


    return 1;
}
forward PegouCocainaBoa(playerid);
public PegouCocainaBoa(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s retira o pano da prensa junto da droga. Começa a esfarelar a droga e embalar em pinos.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


	PlayerDroga[playerid][CocaB]+= 45;
	PlayerInfo[playerid][pFabricouD]++;
	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você recebeu 35 gramas de cocaina boa.");


    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);
    RemovePlayerAttachedObject(playerid, 6);

    return 1;
}
forward MisturandoCocaR(playerid);
public MisturandoCocaR(playerid)
{

	PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]-= 10;
	PlayerDroga[playerid][Efedrina]-= 10;
	PlayerDroga[playerid][BDS]-= 10;
	PlayerDroga[playerid][LDC]-= 10;

	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.0, 0, 1, 1, 1, -1, 1);

	SetTimerEx("FinalizandoCocaR", 50000, false, "d", playerid);

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s Pega a Efedrina triturada, cocaina e bicarbonato, mistura os ingredientes no recipiente.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(stringvendeu,sizeof(stringvendeu),"** %s mistura todos os ingredientes, passa para a panela.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


    return 1;
}
forward FinalizandoCocaR(playerid);
public FinalizandoCocaR(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s deixa a panela alguns segundos no fogo e fica mexendo a mistura. Depois passa tudo para um pano e vai para a prensa, termina de secar a cocaina.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(stringvendeu,sizeof(stringvendeu),"** %s prensa a cocaina com 25kg de força e em seguida, remove-a da prensa.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("PegouCocainaRuim", 10000, false, "d", playerid);


    return 1;
}
forward PegouCocainaRuim(playerid);
public PegouCocainaRuim(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s retira o pano da prensa junto da droga. Começa a esfarelar a droga e embalar em pinos.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


	PlayerDroga[playerid][CocaR]+= 80;
	PlayerInfo[playerid][pFabricouD]++;
	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você recebeu 80 gramas de cocaina boa.");


    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);
    RemovePlayerAttachedObject(playerid, 6);

    return 1;
}
forward MisturandoCrackB(playerid);
public MisturandoCrackB(playerid)
{

	PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]-= 10;
	PlayerDroga[playerid][Efedrina]-= 10;
	PlayerDroga[playerid][Acloridrico]-= 10;
	PlayerDroga[playerid][BDS]-= 10;

	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.0, 0, 1, 1, 1, -1, 1);

	SetTimerEx("FinalizandoCrackB", 50000, false, "d", playerid);

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s Pega a Efedrina triturada, crack, bicarbonato e acido, mistura os ingredientes no recipiente.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(stringvendeu,sizeof(stringvendeu),"** %s mistura todos os ingredientes, passa para a panela.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


    return 1;
}
forward FinalizandoCrackB(playerid);
public FinalizandoCrackB(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s deixa a panela alguns segundos no fogo e fica mexendo a mistura. Depois passa tudo para um pano e vai para a prensa, termina de secar a cocaina.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(stringvendeu,sizeof(stringvendeu),"** %s prensa o crack com 25kg de força e em seguida, remove-a da prensa.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("PegouCrackB", 10000, false, "d", playerid);


    return 1;
}
forward PegouCrackB(playerid);
public PegouCrackB(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s retira o pano da prensa junto da droga. Começa a esfarelar a droga e embalar em ziplock.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


	PlayerDroga[playerid][CrackB]+= 70;
	PlayerInfo[playerid][pFabricouD]++;
	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você recebeu 70 gramas de crack bom.");


    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);
    RemovePlayerAttachedObject(playerid, 6);

    return 1;
}
forward MisturandoCrackR(playerid);
public MisturandoCrackR(playerid)
{

	PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]-= 10;
	PlayerDroga[playerid][Efedrina]-= 10;
	PlayerDroga[playerid][Acloridrico]-= 10;
	PlayerDroga[playerid][BDS]-= 10;

	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.0, 0, 1, 1, 1, -1, 1);

	SetTimerEx("FinalizandoCrackR", 50000, false, "d", playerid);

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s Pega a Efedrina triturada, crack, bicarbonato e acido, mistura os ingredientes no recipiente.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(stringvendeu,sizeof(stringvendeu),"** %s mistura todos os ingredientes, passa para a panela.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


    return 1;
}
forward FinalizandoCrackR(playerid);
public FinalizandoCrackR(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s deixa a panela alguns segundos no fogo e fica mexendo a mistura. Depois passa tudo para um pano e vai para a prensa, termina de secar a cocaina.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(stringvendeu,sizeof(stringvendeu),"** %s prensa o crack com 25kg de força e em seguida, remove-a da prensa.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("PegouCrackR", 10000, false, "d", playerid);


    return 1;
}
forward PegouCrackR(playerid);
public PegouCrackR(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s retira o pano da prensa junto da droga. Começa a esfarelar a droga e embalar em ziplock.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


	PlayerDroga[playerid][CrackB]+= 140;
	PlayerInfo[playerid][pFabricouD]++;
	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você recebeu 140 gramas de crack ruim.");


    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);
    RemovePlayerAttachedObject(playerid, 6);

    return 1;
}
forward MisturandoMetaB(playerid);
public MisturandoMetaB(playerid)
{

	PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]-= 10;
	PlayerDroga[playerid][Efedrina]-= 10;
	PlayerDroga[playerid][Acloridrico]-= 10;

	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.0, 0, 1, 1, 1, -1, 1);

	SetTimerEx("FinalizoMetaB", 50000, false, "d", playerid);

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s Pega a Efedrina triturada, acído e a metanfetamina, mistura os ingredientes no recipiente.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(stringvendeu,sizeof(stringvendeu),"** %s mistura todos os ingredientes, passa para a panela.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


    return 1;
}
forward FinalizoMetaB(playerid);
public FinalizoMetaB(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s deixa a panela alguns segundos no fogo e fica mexendo a mistura. Depois passa tudo para um pano e vai para a prensa, termina de secar a cocaina.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(stringvendeu,sizeof(stringvendeu),"** %s prensa a metanfetamina com 25kg de força e em seguida, remove-a da prensa.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("PegouMetaB", 10000, false, "d", playerid);


    return 1;
}
forward PegouMetaB(playerid);
public PegouMetaB(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s retira o pano da prensa junto da droga. Começa a esfarelar a droga e embalar em ziplocks.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


	PlayerDroga[playerid][MetB]+= 45;
	PlayerInfo[playerid][pFabricouD]++;
	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você recebeu 45 gramas de metanfetamina boa.");


    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);
    RemovePlayerAttachedObject(playerid, 6);

    return 1;
}
forward MisturandoMetaR(playerid);
public MisturandoMetaR(playerid)
{

	PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]-= 10;
	PlayerDroga[playerid][Efedrina]-= 15;
	PlayerDroga[playerid][Acloridrico]-= 15;

	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.0, 0, 1, 1, 1, -1, 1);

	SetTimerEx("FinalizoMetaR", 50000, false, "d", playerid);

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s Pega a Efedrina triturada, acído e a metanfetamina, mistura os ingredientes no recipiente.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(stringvendeu,sizeof(stringvendeu),"** %s mistura todos os ingredientes, passa para a panela.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


    return 1;
}
forward FinalizoMetaR(playerid);
public FinalizoMetaR(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s deixa a panela alguns segundos no fogo e fica mexendo a mistura. Depois passa tudo para um pano e vai para a prensa, termina de secar a cocaina.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(stringvendeu,sizeof(stringvendeu),"** %s prensa a metanfetamina com 25kg de força e em seguida, remove-a da prensa.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("PegouMetaR", 10000, false, "d", playerid);


    return 1;
}
forward PegouMetaR(playerid);
public PegouMetaR(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"** %s retira o pano da prensa junto da droga. Começa a esfarelar a droga e embalar em ziplocks.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


	PlayerDroga[playerid][MetR]+= 90;
	PlayerInfo[playerid][pFabricouD]++;
	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você recebeu 90 gramas de metanfetamina ruim.");


    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);
    RemovePlayerAttachedObject(playerid, 6);

    return 1;
}
/*forward BateriaCarro(playerid);
public BateriaCarro(playerid)
{
	new veh = GetPlayerVehicleID(playerid);
	VehicleInfo[veh][vBateria] -= 0.70;

    return 1;
}*/
/*forward BateriaCarro2(playerid);
public BateriaCarro2(playerid)
{
	PlayerInfo[playerid][pBateria] -= 1;

    return 1;
}*/
//Sistema de vender drogas npc - Yur$
COMMAND:traficar(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new idx = 0;
	new tmp[256];
	tmp = strtok(params,idx);
	if(!strlen(tmp))
	{
        SendClientMessage(playerid, COLOR_VEICULO,"____________________________________________________");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: /traficar [ação]");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: cocainaE - Para vender cocaína excelente para o actor.");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: cocainaB - Para vender cocaína boa para o actor.");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: maconhaE - Para vender maconha excelente para o actor.");
		SendClientMessage(playerid, COLOR_VEICULO,"____________________________________________________");
		return 1;
	}

	if(strcmp(tmp,"cocainaE",true) == 0)
	{
		if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
		if(PlayerInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 2 ou mais para vender drogas.");
		if(PlayerDroga[playerid][CocaE] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de pelo menos 1g de cocaina excelente.");
		if(PlayerInfo[playerid][pTrafico] > 6) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já traficou bastante neste PayDay, volte após seu payday.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você nãopode utilizar este comando enquanto estiver amarrado.");

		if(IsPlayerInRangeOfPoint(playerid,10.0,2573.5181,-1124.5466,65.3464) || IsPlayerInRangeOfPoint(playerid,10.0,2577.3850,-1130.1652,65.1935) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2595.5320,-1111.5963,67.4365) || IsPlayerInRangeOfPoint(playerid,10.0,2589.0232,-1112.6173,66.9152) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2595.9336,-962.2279,81.1852) || IsPlayerInRangeOfPoint(playerid,10.0,2585.7937,-955.1824,81.3715) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2557.9902,-956.3238,82.7591) || IsPlayerInRangeOfPoint(playerid,10.0,1850.6703,-2000.5491,14.1094) || 
		IsPlayerInRangeOfPoint(playerid,10.0,1846.1360,-2004.2552,13.5469) || IsPlayerInRangeOfPoint(playerid,10.0,1841.3813,-2008.3091,13.5469) || 
		IsPlayerInRangeOfPoint(playerid,10.0,1731.6779,-2123.5327,12.7954) || IsPlayerInRangeOfPoint(playerid,10.0,1727.1029,-2127.2014,12.7933) || 
		IsPlayerInRangeOfPoint(playerid,10.0,1726.0736,-2122.7458,12.7933) || IsPlayerInRangeOfPoint(playerid,10.0,2226.6240,-1458.6040,24.0754) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2222.3228,-1457.7727,24.0000) || IsPlayerInRangeOfPoint(playerid,10.0,2669.5825,-1460.8533,30.5523) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2671.0518,-1468.1061,30.5604) || IsPlayerInRangeOfPoint(playerid,10.0,2683.7068,-1471.5103,30.5612) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2687.3025,-1459.4653,30.6193) || IsPlayerInRangeOfPoint(playerid,10.0,2709.9211,-1447.3977,30.6297) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2056.5154,-1821.0952,13.5469) || IsPlayerInRangeOfPoint(playerid,10.0,1891.0433,-1785.9810,13.5544))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você está vendendo 2g de cocaina excelente para o noiado.");	
			SetTimerEx("VendendoCocainaE", 5000, false, "d", playerid);

			new stringvendeu[256];
			format(stringvendeu,sizeof(stringvendeu),"** %s se aproxima do Noiado e pronuncia algumas palavras.", PlayerName(playerid, 1));
			ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			format(stringvendeu,sizeof(stringvendeu),"%s diz: Da o papo, tu quer o que hoje?", PlayerName(playerid, 1));
			ProxDetector(20.0, playerid, stringvendeu,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);

			format(stringvendeu,sizeof(stringvendeu),"Noiado diz: Quero aquela que matou o chorão para cheirar.");
			ProxDetector(20.0, playerid, stringvendeu,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);

			new location[MAX_ZONE_NAME];
			GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
			new str[126];
			SendFacMessage(COLOR_LIGHTBLUE, 1, "|__________EMERGENCIA POLICIAL__________|");
			SendFacMessage(COLOR_LIGHTBLUE, 2, "|__________EMERGENCIA POLICIAL__________|");
			SendFacMessage(COLOR_LIGHTBLUE, 1, "Relator: Anonimo, Contato: Orelhão");
			SendFacMessage(COLOR_LIGHTBLUE, 2, "Relator: Anonimo, Contato: Orelhão");
			SendFacMessage(COLOR_LIGHTBLUE, 1, "Situação: Tem uma pessoa vendendo cocaína, possivelmente armada e drogada.");
			SendFacMessage(COLOR_LIGHTBLUE, 2, "Situação: Tem uma pessoa vendendo cocaína, possivelmente armada e drogada.");
			format(str, sizeof(str), "Local: %s",location);
			SendFacMessage(COLOR_LIGHTBLUE, 1, str);
			SendFacMessage(COLOR_LIGHTBLUE, 2, str);
		
			new strl[126];
			format(strl, 126, "%s vendeu droga pro Actor. [/traficar cocainaE]", PlayerName(playerid, 0));
			LogCMD_venderdroga(strl);
		}
	}
	if(strcmp(tmp,"cocainaB",true) == 0)
	{
		if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
		if(PlayerInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 2 ou mais para vender drogas.");
		if(PlayerDroga[playerid][CocaB] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de pelo menos 1g de cocaina boa.");
		if(PlayerInfo[playerid][pTrafico] > 6) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já traficou bastante neste PayDay, volte após seu payday.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você nãopode utilizar este comando enquanto estiver amarrado.");

		if(IsPlayerInRangeOfPoint(playerid,10.0,2573.5181,-1124.5466,65.3464) || IsPlayerInRangeOfPoint(playerid,10.0,2577.3850,-1130.1652,65.1935) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2595.5320,-1111.5963,67.4365) || IsPlayerInRangeOfPoint(playerid,10.0,2589.0232,-1112.6173,66.9152) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2595.9336,-962.2279,81.1852) || IsPlayerInRangeOfPoint(playerid,10.0,2585.7937,-955.1824,81.3715) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2557.9902,-956.3238,82.7591) || IsPlayerInRangeOfPoint(playerid,10.0,1850.6703,-2000.5491,14.1094) || 
		IsPlayerInRangeOfPoint(playerid,10.0,1846.1360,-2004.2552,13.5469) || IsPlayerInRangeOfPoint(playerid,10.0,1841.3813,-2008.3091,13.5469) || 
		IsPlayerInRangeOfPoint(playerid,10.0,1731.6779,-2123.5327,12.7954) || IsPlayerInRangeOfPoint(playerid,10.0,1727.1029,-2127.2014,12.7933) || 
		IsPlayerInRangeOfPoint(playerid,10.0,1726.0736,-2122.7458,12.7933) || IsPlayerInRangeOfPoint(playerid,10.0,2226.6240,-1458.6040,24.0754) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2222.3228,-1457.7727,24.0000) || IsPlayerInRangeOfPoint(playerid,10.0,2669.5825,-1460.8533,30.5523) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2671.0518,-1468.1061,30.5604) || IsPlayerInRangeOfPoint(playerid,10.0,2683.7068,-1471.5103,30.5612) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2687.3025,-1459.4653,30.6193) || IsPlayerInRangeOfPoint(playerid,10.0,2709.9211,-1447.3977,30.6297) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2056.5154,-1821.0952,13.5469) || IsPlayerInRangeOfPoint(playerid,10.0,1891.0433,-1785.9810,13.5544))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você está vendendo 1g de cocaina boa para o noiado.");	
			SetTimerEx("VendendoCocainaB", 5000, false, "d", playerid);

			new stringvendeu[256];
			format(stringvendeu,sizeof(stringvendeu),"** %s se aproxima do Noiado e pronuncia algumas palavras.", PlayerName(playerid, 1));
			ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			format(stringvendeu,sizeof(stringvendeu),"%s diz: Da o papo, tu quer o que hoje?", PlayerName(playerid, 1));
			ProxDetector(20.0, playerid, stringvendeu,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);

			format(stringvendeu,sizeof(stringvendeu),"Noiado diz: Quero um pino para cheirar.");
			ProxDetector(20.0, playerid, stringvendeu,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);

			new location[MAX_ZONE_NAME];
			GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
			new str[126];
			SendFacMessage(COLOR_LIGHTBLUE, 1, "|__________EMERGENCIA POLICIAL__________|");
			SendFacMessage(COLOR_LIGHTBLUE, 2, "|__________EMERGENCIA POLICIAL__________|");
			SendFacMessage(COLOR_LIGHTBLUE, 1, "Relator: Anonimo, Contato: Orelhão");
			SendFacMessage(COLOR_LIGHTBLUE, 2, "Relator: Anonimo, Contato: Orelhão");
			SendFacMessage(COLOR_LIGHTBLUE, 1, "Situação: Tem uma pessoa vendendo cocaína, possivelmente armada e drogada.");
			SendFacMessage(COLOR_LIGHTBLUE, 2, "Situação: Tem uma pessoa vendendo cocaína, possivelmente armada e drogada.");
			format(str, sizeof(str), "Local: %s",location);
			SendFacMessage(COLOR_LIGHTBLUE, 1, str);
			SendFacMessage(COLOR_LIGHTBLUE, 2, str);
		
			new strl[126];
			format(strl, 126, "%s vendeu droga pro Actor. [/traficar cocaina]", PlayerName(playerid, 0));
			LogCMD_venderdroga(strl);
		}
	}
	if(strcmp(tmp,"MaconhaE",true) == 0)
	{
		if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
		if(PlayerInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 2 ou mais para vender drogas.");
		if(PlayerDroga[playerid][MaconhaE] < 24) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de pelo menos 25g de maconha excelente.");
		if(PlayerInfo[playerid][pTrafico] > 6) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já traficou bastante neste PayDay, volte após seu payday.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você nãopode utilizar este comando enquanto estiver amarrado.");

		if(IsPlayerInRangeOfPoint(playerid,10.0,2573.5181,-1124.5466,65.3464) || IsPlayerInRangeOfPoint(playerid,10.0,2577.3850,-1130.1652,65.1935) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2595.5320,-1111.5963,67.4365) || IsPlayerInRangeOfPoint(playerid,10.0,2589.0232,-1112.6173,66.9152) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2595.9336,-962.2279,81.1852) || IsPlayerInRangeOfPoint(playerid,10.0,2585.7937,-955.1824,81.3715) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2557.9902,-956.3238,82.7591) || IsPlayerInRangeOfPoint(playerid,10.0,1850.6703,-2000.5491,14.1094) || 
		IsPlayerInRangeOfPoint(playerid,10.0,1846.1360,-2004.2552,13.5469) || IsPlayerInRangeOfPoint(playerid,10.0,1841.3813,-2008.3091,13.5469) || 
		IsPlayerInRangeOfPoint(playerid,10.0,1731.6779,-2123.5327,12.7954) || IsPlayerInRangeOfPoint(playerid,10.0,1727.1029,-2127.2014,12.7933) || 
		IsPlayerInRangeOfPoint(playerid,10.0,1726.0736,-2122.7458,12.7933) || IsPlayerInRangeOfPoint(playerid,10.0,2226.6240,-1458.6040,24.0754) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2222.3228,-1457.7727,24.0000) || IsPlayerInRangeOfPoint(playerid,10.0,2669.5825,-1460.8533,30.5523) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2671.0518,-1468.1061,30.5604) || IsPlayerInRangeOfPoint(playerid,10.0,2683.7068,-1471.5103,30.5612) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2687.3025,-1459.4653,30.6193) || IsPlayerInRangeOfPoint(playerid,10.0,2709.9211,-1447.3977,30.6297) || 
		IsPlayerInRangeOfPoint(playerid,10.0,2056.5154,-1821.0952,13.5469) || IsPlayerInRangeOfPoint(playerid,10.0,1891.0433,-1785.9810,13.5544))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você está vendendo 25g de maconha excelente para o noiado.");	
			SetTimerEx("VendendoMaconhaE", 5000, false, "d", playerid);

			new stringvendeu[256];
			format(stringvendeu,sizeof(stringvendeu),"** %s se aproxima do Noiado e pronuncia algumas palavras.", PlayerName(playerid, 1));
			ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			format(stringvendeu,sizeof(stringvendeu),"%s diz: Da o papo, tu quer o que hoje?", PlayerName(playerid, 1));
			ProxDetector(20.0, playerid, stringvendeu,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);

			format(stringvendeu,sizeof(stringvendeu),"Noiado diz: Quero o boldin do bom.");
			ProxDetector(20.0, playerid, stringvendeu,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);

			new location[MAX_ZONE_NAME];
			GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
			new str[126];
			SendFacMessage(COLOR_LIGHTBLUE, 1, "|__________EMERGENCIA POLICIAL__________|");
			SendFacMessage(COLOR_LIGHTBLUE, 2, "|__________EMERGENCIA POLICIAL__________|");
			SendFacMessage(COLOR_LIGHTBLUE, 1, "Relator: Anonimo, Contato: Orelhão");
			SendFacMessage(COLOR_LIGHTBLUE, 2, "Relator: Anonimo, Contato: Orelhão");
			SendFacMessage(COLOR_LIGHTBLUE, 1, "Situação: Tem uma pessoa vendendo maconha, possivelmente armada e drogada.");
			SendFacMessage(COLOR_LIGHTBLUE, 2, "Situação: Tem uma pessoa vendendo maconha, possivelmente armada e drogada.");
			format(str, sizeof(str), "Local: %s",location);
			SendFacMessage(COLOR_LIGHTBLUE, 1, str);
			SendFacMessage(COLOR_LIGHTBLUE, 2, str);
		
			new strl[126];
			format(strl, 126, "%s vendeu droga pro Actor. [/traficar MaconhaE]", PlayerName(playerid, 0));
			LogCMD_venderdroga(strl);
		}
	}
	return 1;
}

forward VendendoCocainaE(playerid);
public VendendoCocainaE(playerid)
{
			
	PlayerDroga[playerid][CocaE]--;

	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.0, 0, 1, 1, 1, -1, 1);

	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você receberá o dinheiro em alguns segundos.");

	SetTimerEx("PegandoGranaCocaETrf", 10000, false, "d", playerid);

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"> %s retira um pino de cocaina da bag e entrega ao usuário.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	format(stringvendeu, sizeof(stringvendeu), "* %s retira um pino de cocaina da bag e entrega ao usuário.", PlayerName(playerid, 1));
    SetPlayerChatBubble(playerid, stringvendeu, COLOR_PURPLE, 20.0, 10000);

	format(stringvendeu,sizeof(stringvendeu),"Noiado diz: Esse tá bem servido, hein? Gostei.");
	ProxDetector(20.0, playerid, stringvendeu,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
	format(stringvendeu,sizeof(stringvendeu),"** O Noiado sorri ao ver o pino de cocaína cheio.");
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

    return 1;
}

forward PegandoGranaCocaETrf(playerid);
public PegandoGranaCocaETrf(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"* O Noiado retira algumas notas e oferta a %s.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	
	format(stringvendeu,sizeof(stringvendeu),"Noiado diz: Amanhã eu volto pra entupir meu nariz mais uma vez.");
	ProxDetector(20.0, playerid, stringvendeu,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("PegouGranaCocaETrf", 3000, false, "d", playerid);


    return 1;
}

forward PegouGranaCocaETrf(playerid);
public PegouGranaCocaETrf(playerid)
{

	PlayerInfo[playerid][pGranaSuja] += 900;
	//PlayerInfo[playerid][pTrafico]++;
	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você recebeu 900 reais sujo pela cocaina excelente.");

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"%s diz: Fé. Tamo junto!", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);

    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);
    RemovePlayerAttachedObject(playerid, 6);

    return 1;
}

forward VendendoCocainaB(playerid);
public VendendoCocainaB(playerid)
{
			
	PlayerDroga[playerid][CocaB]-= 2;

	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.0, 0, 1, 1, 1, -1, 1);

	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você receberá o dinheiro em alguns segundos.");

	SetTimerEx("PegandoGranaCocaBTrf", 10000, false, "d", playerid);

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"> %s retira um pino de cocaina da bag e entrega ao usuário.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	format(stringvendeu, sizeof(stringvendeu), "* %s retira um pino de cocaina da bag e entrega ao usuário.", PlayerName(playerid, 1));
    SetPlayerChatBubble(playerid, stringvendeu, COLOR_PURPLE, 20.0, 10000);

	format(stringvendeu,sizeof(stringvendeu),"Noiado diz: Esse tá bem servido, hein? Gostei.");
	ProxDetector(20.0, playerid, stringvendeu,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
	format(stringvendeu,sizeof(stringvendeu),"** O Noiado sorri ao ver o pino de cocaína cheio.");
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

    return 1;
}

forward PegandoGranaCocaBTrf(playerid);
public PegandoGranaCocaBTrf(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"* O Noiado retira algumas notas e oferta a %s.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	
	format(stringvendeu,sizeof(stringvendeu),"Noiado diz: Amanhã eu volto pra entupir meu nariz mais uma vez.");
	ProxDetector(20.0, playerid, stringvendeu,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("PegouGranaCocaBTrf", 3000, false, "d", playerid);


    return 1;
}

forward PegouGranaCocaBTrf(playerid);
public PegouGranaCocaBTrf(playerid)
{

	PlayerInfo[playerid][pGranaSuja] += 300;
	//PlayerInfo[playerid][pTrafico]++;
	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você recebeu 300 reais sujo pela cocaina.");

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"%s diz: Fé. Tamo junto!", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);

    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);
    RemovePlayerAttachedObject(playerid, 6);

    return 1;
}

forward VendendoMaconhaE(playerid);
public VendendoMaconhaE(playerid)
{
			
	PlayerDroga[playerid][MaconhaE]-= 25;

	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.0, 0, 1, 1, 1, -1, 1);

	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você receberá o dinheiro em alguns segundos.");

	SetTimerEx("PegandoGranaErvaETrf", 10000, false, "d", playerid);

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"> %s retira um ziplock de maconha excelente e entrega ao usuário.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	format(stringvendeu, sizeof(stringvendeu), "* %s retira um ziplock de maconha excelente e entrega ao usuário.", PlayerName(playerid, 1));
    SetPlayerChatBubble(playerid, stringvendeu, COLOR_PURPLE, 20.0, 10000);

	format(stringvendeu,sizeof(stringvendeu),"Noiado diz: Esse tá bem servido, hein? Gostei.");
	ProxDetector(20.0, playerid, stringvendeu,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
	format(stringvendeu,sizeof(stringvendeu),"** O Noiado sorri ao ver o ziplock de 25g de maconha.");
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

    return 1;
}

forward PegandoGranaErvaETrf(playerid);
public PegandoGranaErvaETrf(playerid)
{

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"* O Noiado retira algumas notas e oferta a %s.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	
	format(stringvendeu,sizeof(stringvendeu),"Noiado diz: Amanhã eu volto para pegar mais.");
	ProxDetector(20.0, playerid, stringvendeu,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("PegouGranaErvaETrf", 3000, false, "d", playerid);


    return 1;
}

forward PegouGranaErvaETrf(playerid);
public PegouGranaErvaETrf(playerid)
{

	PlayerInfo[playerid][pGranaSuja] += 900;
	//PlayerInfo[playerid][pTrafico]++;
	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você recebeu 900 reais sujo pela cocaina excelente.");

	new stringvendeu[256];
	format(stringvendeu,sizeof(stringvendeu),"%s diz: Fé. Tamo junto!", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, stringvendeu,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);

    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);
    RemovePlayerAttachedObject(playerid, 6);

    return 1;
}
//==========[SISTEMA DE LAVAGEM DE DINHEIRO]========================
COMMAND:lavar(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new idx = 0;
	new tmp[256];
	tmp = strtok(params,idx);
	if(!strlen(tmp))
	{
        SendClientMessage(playerid, COLOR_VEICULO,"____________________________________________________");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: /lavar [ação]");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: dinheiro - Utilize o comando para lavar o dinheiro sujo.");
		SendClientMessage(playerid, COLOR_VEICULO,"____________________________________________________");
		return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid,OutrasInfos[playerid][oLavagemR], OutrasInfos[playerid][oLavagemX], OutrasInfos[playerid][oLavagemY], OutrasInfos[playerid][oLavagemZ]))
		return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está no seu ponto de lavagem.");
	{
		if(strcmp(tmp,"dinheiro",true) == 0)
		{
			if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");
			if(PlayerInfo[playerid][pLevel] < 15) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 15 ou mais para lavar o dinheiro..");
			if(PlayerInfo[playerid][pJob] != JOB_LAVAGEM) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem o emprego de lavar dinheiro");
			if(PlayerInfo[playerid][pGranaSuja] < 20000) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de pelo menos 20,000 sujo para limpar.");
			if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
			if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
			if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver amarrado.");


			PlayerInfo[playerid][pGranaSuja] = PlayerInfo[playerid][pGranaSuja] -= 20000;
			SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você está limpando 20 mil sujo, ganhará 15 mil reais limpo.");


			SetTimerEx("InicioLavagem", 120000, false, "d", playerid);
		}
	}
	return 1;
}

forward InicioLavagem(playerid);
public InicioLavagem(playerid)
{
	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.0, 0, 1, 1, 1, -1, 1);

	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você receberá o dinheiro em alguns minutos.");
	SetTimerEx("PegandoGranaSuja", 10000, false, "d", playerid);

    return 1;
}

forward PegandoGranaSuja(playerid);
public PegandoGranaSuja(playerid)
{
	PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana] += 15000;

	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Só mais alguns segundos.");

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("PegouGranaSuja", 3000, false, "d", playerid);

    return 1;
}

forward PegouGranaSuja(playerid);
public PegouGranaSuja(playerid)
{
	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você recebeu os 80 mil limpo.");

    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);
    RemovePlayerAttachedObject(playerid, 6);

    return 1;
}
//=============[SISTEMA DE PEDAGIO]=============//
forward TollUpdate();
public TollUpdate() // Needs to be called in the OnPlayerUpdate function
{
	for(new i = 0; i != MAX_TOLLS; ++i)
	{
		if(aTolls[i][E_tOpenTime] > 0)
		{
			aTolls[i][E_tOpenTime]--;
			if(aTolls[i][E_tOpenTime] == 1)
			{
				Toll_CloseToll(i);
			}
		}
	}
}

Toll_CloseToll(TollID)
{
	if(TollID == RichmanToll)
	{
		SetDynamicObjectRot(L_a_TollObject[0], 0.000000, -90.000000, 23.81982421875);
		SetDynamicObjectRot(L_a_TollObject[1], 0.000000, -90.000000, 214.37744140625);
	}
	else if(TollID == FlintToll)
	{
		SetDynamicObjectRot(L_a_TollObject[2], 0.000000, -90.000000, 270.67565917969);
		SetDynamicObjectRot(L_a_TollObject[3], 0.000000, -90.000000, 87.337799072266);
	}
	else if(TollID == LVToll)
	{
		SetDynamicObjectRot(L_a_TollObject[4], 0.000000, -90.000000, 348.10229492188);
		SetDynamicObjectRot(L_a_TollObject[5], 0.000000, -90.000000, 169.43664550781);
	}
	else if(TollID == BlueberryTollR)
	{
		SetDynamicObjectRot(L_a_TollObject[6], 0.00000, -90.00000, 35.00000);
		SetDynamicObjectRot(L_a_TollObject[7], 0.00000, -90.00000, 215.92000);
	}
	else if(TollID == BlueberryTollL)
	{
		SetDynamicObjectRot(L_a_TollObject[8], 0.00000, -90.00000, -14.94000);
		SetDynamicObjectRot(L_a_TollObject[9], 0.00000, -90.00000, -195.00000);
	}
	return 1;
}

Toll_OpenToll(TollID)
{
	if(TollID == RichmanToll)
	{
		aTolls[RichmanToll][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[0], 0.000000, 0.000000, 23.81982421875);
		SetDynamicObjectRot(L_a_TollObject[1], 0.000000, 0.000000, 214.37744140625);
	}
	else if(TollID == FlintToll)
	{
		aTolls[FlintToll][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[2], 0.000000, 0.000000, 270.67565917969);
		SetDynamicObjectRot(L_a_TollObject[3], 0.000000, 0.000000, 87.337799072266);
	}
	else if(TollID == LVToll)
	{
		aTolls[LVToll][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[4], 0.000000, 0.000000, 348.10229492188);
		SetDynamicObjectRot(L_a_TollObject[5], 0.000000, 0.000000, 169.43664550781);
	}
	else if(TollID == BlueberryTollR)
	{
		aTolls[BlueberryTollR][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[6], 0.000000, 0.000000, 35.00000);
		SetDynamicObjectRot(L_a_TollObject[7], 0.000000, 0.000000, 215.92000);
	}
	else if(TollID == BlueberryTollL)
	{
		aTolls[BlueberryTollL][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[8], 0.000000, 0.000000, -14.94000);
		SetDynamicObjectRot(L_a_TollObject[9], 0.000000, 0.000000, -195.00000);
	}
}

Toll_TimePassedCivil(TollID, playerid) // People have to wait <TollDelayCivilian> seconds between every /abrirpedagio on the same toll
{
	if(aTolls[TollID][E_tOpenTime] > 0)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "O pedágio está aberto, passe antes dela fechar!");
		return 0;
	}
	return 1;
}

Toll_TimePassedCops(playerid) // Cops have to wait for <TollDelayCop> seconds between every /toll (Global)
{
	new L_i_tick = gettime();
	if(L_a_RequestAllowedCop > L_i_tick && L_a_RequestAllowedCop != 0)
	{
		new TollString[256];
		format(TollString, 256, "Você terá que esperar pelo menos %d segundos entre cada pagamento de pedágio.", TollDelayCop);
		SendClientMessage(playerid, COLOR_LIGHTRED, TollString);
		return 0;
	}
	L_a_RequestAllowedCop = (L_i_tick + TollDelayCop);
	return 1;
}

CMD:pedagios(playerid, params[])
{

    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    
	new StrMsg[256];
	new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ)
 	{
	    if(PlayerInfo[playerid][pFacCargo] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem acesso a este comando.");

		new option[11];
		if(sscanf(params,"s[11]",option))
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Controle dos pedágios do Estado do São Paulo");
			SendClientMessage(playerid, COLOR_GREY, "Fechar/Liberar - Fechado / Aberto Check all");
			SendClientMessage(playerid, COLOR_GREY, "flint - Fechado / Aberto checkpoint Flint County");
			SendClientMessage(playerid, COLOR_GREY, "richman - Fechado / Aberto checkpoint Richman");
			SendClientMessage(playerid, COLOR_GREY, "lv - Fechado / Aberto checkpoint LS-LV");
			SendClientMessage(playerid, COLOR_GREY, "blueberryr - Fechado / Aberto checkpoint Blueberry(Direita)");
			SendClientMessage(playerid, COLOR_GREY, "blueberryl - Fechado / Aberto checkpoint Blueberry(Esquerda)");
			return 1;
		}
		if(!Toll_TimePassedCops(playerid))
			return 1;

		if(!strcmp(option, "Fechar", true))
		{
			aTolls[FlintToll][E_tLocked] = 1;
			aTolls[RichmanToll][E_tLocked] = 1;
			aTolls[LVToll][E_tLocked] = 1;
			aTolls[BlueberryTollR][E_tLocked] = 1;
			aTolls[BlueberryTollL][E_tLocked] = 1;

			Toll_CloseToll(FlintToll);
			Toll_CloseToll(RichmanToll);
			Toll_CloseToll(LVToll);
			Toll_CloseToll(BlueberryTollR);
			Toll_CloseToll(BlueberryTollL);

            format(StrMsg, sizeof(StrMsg), "** MARE 0: %s %s fechou todos os pedágios!**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
	  		SendFacMessage(0x6666CCFF,FacId,StrMsg);
		}
		else if(!strcmp(option, "Liberar", true))
		{
			aTolls[FlintToll][E_tLocked] = 0;
			aTolls[RichmanToll][E_tLocked] = 0;
			aTolls[LVToll][E_tLocked] = 0;
			aTolls[BlueberryTollR][E_tLocked] = 0;
			aTolls[BlueberryTollL][E_tLocked] = 0;

            format(StrMsg, sizeof(StrMsg), "** MARE 0: %s %s liberou todos os pedágios!**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
	  		SendFacMessage(0x6666CCFF,FacId,StrMsg);

		}
		else if(!strcmp(option, "flint", true))
		{
			if(aTolls[FlintToll][E_tLocked] == 0)
			{
				aTolls[FlintToll][E_tLocked] = 1;
				Toll_CloseToll(FlintToll);

            	format(StrMsg, sizeof(StrMsg), "** MARE 0: %s %s bloqueou o pedágio de Flint County.**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
	  			SendFacMessage(0x6666CCFF,FacId,StrMsg);
			
			}
			else
			{
				aTolls[FlintToll][E_tLocked] = 0;
				format(StrMsg, sizeof(StrMsg), "** MARE 0: %s %s liberou o pedágio de Flint County.**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
				SendFacMessage(0x6666CCFF,FacId,StrMsg);
			}
		}
		else if(!strcmp(option, "richman", true))
		{
			if(aTolls[RichmanToll][E_tLocked] == 0)
			{
				aTolls[RichmanToll][E_tLocked] = 1;
				Toll_CloseToll(RichmanToll);
				format(StrMsg, sizeof(StrMsg), "** MARE 0: %s %s bloqueou o pedágio de Richman.**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
				SendFacMessage(0x6666CCFF,FacId,StrMsg);
			}
			else
			{
				aTolls[RichmanToll][E_tLocked] = 0;
				format(StrMsg, sizeof(StrMsg), "** MARE 0: %s %s liberou o pedágio de Richman.**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
				SendFacMessage(0x6666CCFF,FacId,StrMsg);
			}
		}
		else if(!strcmp(option, "lv", true))
		{
			if(aTolls[LVToll][E_tLocked] == 0)
			{
				aTolls[LVToll][E_tLocked] = 1;
				Toll_CloseToll(LVToll);

				format(StrMsg, sizeof(StrMsg), "** MARE 0: %s %s fechou o pedágio LS-LV**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
				SendFacMessage(0x6666CCFF,FacId,StrMsg);
			}
			else
			{
				aTolls[LVToll][E_tLocked] = 0;
				format(StrMsg, sizeof(StrMsg), "** MARE 0: %s %s liberou o pedágio de LS-LV.**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
				SendFacMessage(0x6666CCFF,FacId,StrMsg);
			}
		}
		else if(!strcmp(option, "blueberryr", true))
		{
			if(aTolls[BlueberryTollR][E_tLocked] == 0)
			{
				aTolls[BlueberryTollR][E_tLocked] = 1;
				Toll_CloseToll(BlueberryTollR);
				format(StrMsg, sizeof(StrMsg), "** MARE 0: %s %s fechou o pedágio de Richman (Direita).**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
				SendFacMessage(0x6666CCFF,FacId,StrMsg);
			}
			else
			{
				aTolls[BlueberryTollR][E_tLocked] = 0;
				format(StrMsg, sizeof(StrMsg), "** MARE 0: %s %s liberou o pedágio de Richman (Direita).**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
				SendFacMessage(0x6666CCFF,FacId,StrMsg);
			}
		}
		else if(!strcmp(option, "blueberryl", true))
		{
			if(aTolls[BlueberryTollL][E_tLocked] == 0)//23914
			{
				aTolls[BlueberryTollL][E_tLocked] = 1;
				Toll_CloseToll(BlueberryTollL);
				format(StrMsg, sizeof(StrMsg), "** MARE 0: %s %s fechou o pedágio de blueberry (esquerda).**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
				SendFacMessage(0x6666CCFF,FacId,StrMsg);			
			}
			else
			{
				aTolls[BlueberryTollL][E_tLocked] = 0;
				format(StrMsg, sizeof(StrMsg), "** MARE 0: %s %s liberou o pedágio de blueberry (esquerda).**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
				SendFacMessage(0x6666CCFF,FacId,StrMsg);
			}
		}
	}
	return 1;
}


CMD:abrirpedagio(playerid, params[])
{
 	new L_i_TollID;
	if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 623.9500, -1183.9774, 19.2260) || IsPlayerInRangeOfPoint(playerid, 3.0, 607.9684, -1194.2866, 19.0043)) // Richman tolls
	{
		L_i_TollID = RichmanToll;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 39.7039, -1522.9891, 5.1995) || IsPlayerInRangeOfPoint(playerid, 3.0, 62.7378, -1539.9891, 5.0639)) // Flint tolls
	{
		L_i_TollID = FlintToll;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 1795.9447, 704.2550, 15.0006) || IsPlayerInRangeOfPoint(playerid, 3.0, 1778.9886, 702.6728, 15.2574)) // LV tolls
	{
		L_i_TollID = LVToll;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 612.53070, 346.59592, 17.92614) || IsPlayerInRangeOfPoint(playerid, 3.0, 604.37152, 346.88141, 17.92614)) // BlueberryR tolls
	{
		L_i_TollID = BlueberryTollR;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, -195.2768,252.2416,12.0781) || IsPlayerInRangeOfPoint(playerid, 3.0, -199.5153,260.3405,12.0781)) // BlueberryL tolls
	{
		L_i_TollID = BlueberryTollL;
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está perto o suficiente de uma cabine de pedágio!");
		return 1;
	}
	if(!Toll_TimePassedCivil(L_i_TollID, playerid))
		return 1;

    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	{
		if(aTolls[L_i_TollID][E_tLocked]) // If it's locked
		{
			new strlped2[256];
			format(strlped2, sizeof(strlped2), "%s", L_sz_TollStringLocked);
			SendClientMessage(playerid, COLOR_WHITE, strlped2);
			return 1;
		}
		if(PlayerInfo[playerid][pGrana] < TollCost)
		{
			new strlped22[256];
			format(strlped22, sizeof(strlped22), "%s", L_sz_TollStringNoMoney);
			SendClientMessage(playerid, COLOR_RED, strlped22);
			return 1;
		}
		PlayerInfo[playerid][pGrana] -= TollCost;
		new strl11[126];
	   	format(strl11, sizeof(strl11), "%s pagou R$%d para o guarda da cabine.", PlayerName(playerid,0), TollCost);
		SendClientMessage(playerid, COLOR_PURPLE, strl11);

		SetTimerEx("TollUpdate", 1500, false, "d", playerid);

	}
	new strl[126];
	format(strl, sizeof(strl), "%s", L_sz_TollStringBye);
	SendClientMessage(playerid, COLOR_WHITE, strl);
	new strlped[126];
	format(strlped, sizeof(strlped), "%s", L_sz_TollStringHurryUp);
	SendClientMessage(playerid, COLOR_LIGHTRED, strlped);

	Toll_OpenToll(L_i_TollID);
	return 1;
}
//==========[SISTEMA DE ROUBO]========================
COMMAND:explodir(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new idx = 0;
	new tmp[256];
	tmp = strtok(params,idx);
	if(!strlen(tmp))
	{
        SendClientMessage(playerid, COLOR_VEICULO,"____________________________________________________");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: /explodir [ação]");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: banco - Para explodir o banco.");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: loja - Para explodir a loja.");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: caixa - Para explodir o caixa eletronico.");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: joalheria - Para explodir a joalheria.");
		SendClientMessage(playerid, COLOR_VEICULO,"____________________________________________________");
		return 1;
	}

	if(strcmp(tmp,"joalheria",true) == 0)
	{
		if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você  precisa estar logado.");
		if(PlayerInfo[playerid][pLevel] < 5) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 5 ou mais para explodir o caixa.");
		if(PlayerInfo[playerid][pBomba] < 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 1 dinamite para explodir o caixa.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver amarrado.");
		if(PlayerInfo[playerid][pArrombarDNV_C] != 0)
		{
			new stringcofreroubo[128];
			format(stringcofreroubo, sizeof(stringcofreroubo),"Aguarde %d segundos antes de explodir um banco novamente.", PlayerInfo[playerid][pArrombarDNV_C]);
			SendClientMessage(playerid,COLOR_LIGHTRED, stringcofreroubo);
			return 1;
		}
		for(new i = 0; i < MAX_JOIA; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,1.5,joalheria[i][jlposX], joalheria[i][jlposY], joalheria[i][jlposZ])) 
			{

				new PolicesOnline = 0;
				for(new cops = 0; cops < MAX_PLAYERS; cops++)
				{
					if(IsPlayerConnected(cops))
					{
						if(PlayerInfo[cops][pLogado])
						{
							if(FacInfo[GetFactionBySqlId(PlayerInfo[cops][pFac])][fTipo] == FAC_TIPO_PMERJ)
							{
								if(PlayerInfo[cops][pEmServico] == 1)
								{
									PolicesOnline++;
								}
							}
						}
					}
					if(PolicesOnline < 6) return 
					SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} é preciso ter pelo menos 8 policiais em serviço para executar essa ação.");
					new location[MAX_ZONE_NAME];
					Get2DZone(location, TOTAL_ZONE_NAME, ATMs[i][aposX], ATMs[i][aposY], ATMs[i][aposZ]);

					TaNoJOALHERIA[playerid] = i;
					SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você armou uma dinamite.");
						
					TogglePlayerControllable(playerid, 0);
					ApplyAnimation(playerid, "PLAYIDLES", "shldr", 4.0,1,1,1,1,0,1);
					SetTimerEx("ExplodindoCaixa", 15000, false, "d", playerid);

					new stringCaixaF[256];
					format(stringCaixaF,sizeof(stringCaixaF),"** %s está armando uma dinamite no caixa eletronico.", PlayerName(playerid, 1));
					ProxDetector(20.0, playerid, stringCaixaF,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


					format(stringCaixaF, sizeof(stringCaixaF), "* Barulho de explosão são escutados nas proximidades *");
					ProxDetector(500.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new str[126];
					SendFacMessage(COLOR_LIGHTBLUE, 1, "|__________EMERGENCIA POLICIAL__________|");
					SendFacMessage(COLOR_LIGHTBLUE, 2, "|__________EMERGENCIA POLICIAL__________|");
					SendFacMessage(COLOR_LIGHTBLUE, 1, "Relator: Anonimo, Contato: Orelhão");
					SendFacMessage(COLOR_LIGHTBLUE, 2, "Relator: Anonimo, Contato: Orelhão");
					SendFacMessage(COLOR_LIGHTBLUE, 1, "Situação: Socorro, estão roubando a joalheria, venham rápido.");
					SendFacMessage(COLOR_LIGHTBLUE, 2, "Situação: Socorro, estão explodindo a joalheria venham rápido.");
					format(str, sizeof(str), "Local: %s",location);
					SendFacMessage(COLOR_LIGHTBLUE, 1, str);
					SendFacMessage(COLOR_LIGHTBLUE, 2, str);
					new Float:x, Float:y, Float:z, Float:Distance = 25.0;
    				GetPlayerPos(playerid, x, y, z);
 					PlayAudioStreamForPlayer(playerid, "https://cp-frp.com.br.com/midia/alarme_casa.mp3", x, y, z, Distance, 1);
					SendAdminAlert(COLOR_LIGHTRED, "AdmCmd:{FFFFFF} %s acaba de utilizar o comando /explodir banco.", PlayerName(playerid, 0));
						
					new strl[126];
					format(strl, 126, "%s explodiu um caixa eletronico. [/explodir banco]", PlayerName(playerid, 0));
					LogCMD_explodircaixa(strl);
				}
			}
		}
	}
	if(strcmp(tmp,"banco",true) == 0)
	{
		if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você  precisa estar logado.");
		if(PlayerInfo[playerid][pLevel] < 5) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 5 ou mais para explodir o caixa.");
		if(PlayerInfo[playerid][pBomba] < 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 1 dinamite para explodir o caixa.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver amarrado.");
		if(PlayerInfo[playerid][pArrombarDNV_C] != 0)
		{
			new stringcofreroubo[128];
			format(stringcofreroubo, sizeof(stringcofreroubo),"Aguarde %d segundos antes de explodir um banco novamente.", PlayerInfo[playerid][pArrombarDNV_C]);
			SendClientMessage(playerid,COLOR_LIGHTRED, stringcofreroubo);
			return 1;
		}

		for(new i = 0; i < MAX_COFREB; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,1.5,cbanco[i][cbposX], cbanco[i][cbposY], cbanco[i][cbposZ])) 
			{

				new PolicesOnline = 0;
				for(new cops = 0; cops < MAX_PLAYERS; cops++)
				{
					if(IsPlayerConnected(cops))
					{
						if(PlayerInfo[cops][pLogado])
						{
							if(FacInfo[GetFactionBySqlId(PlayerInfo[cops][pFac])][fTipo] == FAC_TIPO_PMERJ)
							{
								if(PlayerInfo[cops][pEmServico] == 1)
								{
									PolicesOnline++;
								}
							}
						}
					}
					if(PolicesOnline < 12) return 
					SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} é preciso ter pelo menos 12 policiais em serviço para executar essa ação.");
					new location[MAX_ZONE_NAME];
					Get2DZone(location, TOTAL_ZONE_NAME, ATMs[i][aposX], ATMs[i][aposY], ATMs[i][aposZ]);

					TaNoCOFREB[playerid] = i;
					SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você armou uma dinamite.");
						
					TogglePlayerControllable(playerid, 0);
					ApplyAnimation(playerid, "PLAYIDLES", "shldr", 4.0,1,1,1,1,0,1);
					SetTimerEx("ExplodindoCaixa", 15000, false, "d", playerid);
					new Float:x, Float:y, Float:z, Float:Distance = 25.0;
    				GetPlayerPos(playerid, x, y, z);
 					PlayAudioStreamForPlayer(playerid, "https://cp-frp.com.br.com/midia/alarme_casa.mp3", x, y, z, Distance, 1);
					new stringCaixaF[256];
					format(stringCaixaF,sizeof(stringCaixaF),"** %s está armando uma dinamite no caixa eletronico.", PlayerName(playerid, 1));
					ProxDetector(20.0, playerid, stringCaixaF,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


					format(stringCaixaF, sizeof(stringCaixaF), "* Barulho de explosão são escutados nas proximidades *");
					ProxDetector(500.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new str[126];
					SendFacMessage(COLOR_LIGHTBLUE, 1, "|__________EMERGENCIA POLICIAL__________|");
					SendFacMessage(COLOR_LIGHTBLUE, 2, "|__________EMERGENCIA POLICIAL__________|");
					SendFacMessage(COLOR_LIGHTBLUE, 1, "Relator: Anonimo, Contato: Orelhão");
					SendFacMessage(COLOR_LIGHTBLUE, 2, "Relator: Anonimo, Contato: Orelhão");
					SendFacMessage(COLOR_LIGHTBLUE, 1, "Situação: Socorro, estão roubando a Caixa Economica, venham rápido.");
					SendFacMessage(COLOR_LIGHTBLUE, 2, "Situação: Socorro, estão roubando a Caixa Economica, venham rápido.");
					format(str, sizeof(str), "Local: %s",location);
					SendFacMessage(COLOR_LIGHTBLUE, 1, str);
					SendFacMessage(COLOR_LIGHTBLUE, 2, str);

					SendAdminAlert(COLOR_LIGHTRED, "AdmCmd:{FFFFFF} %s acaba de utilizar o comando /explodir banco.", PlayerName(playerid, 0));
						
					new strl[126];
					format(strl, 126, "%s explodiu um caixa eletronico. [//explodir banco]", PlayerName(playerid, 0));
					LogCMD_explodircaixa(strl);
				}
			}
		}
	}
	if(strcmp(tmp,"loja",true) == 0)
	{
		if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
		if(PlayerInfo[playerid][pLevel] < 10) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 10 ou mais para explodir o caixa.");
		if(PlayerInfo[playerid][pC4] < 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 1 C4 para explodir o caixa.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver amarrado.");
		if(PlayerInfo[playerid][pArrombarDNV_C] != 0)
		{
			new stringcofreroubo[128];
			format(stringcofreroubo, sizeof(stringcofreroubo),"Aguarde %d segundos antes de explodir um cofre novamente.", PlayerInfo[playerid][pArrombarDNV_C]);
			SendClientMessage(playerid,COLOR_LIGHTRED, stringcofreroubo);
			return 1;
		}

		for(new i = 0; i < MAX_COFRE; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,1.5,cLoja[i][clposX], cLoja[i][clposY], cLoja[i][clposZ]))
			{

				new PolicesOnline = 0;
				for(new cops = 0; cops < MAX_PLAYERS; cops++)
				{
					if(IsPlayerConnected(cops))
					{
						if(PlayerInfo[cops][pLogado])
						{
							if(FacInfo[GetFactionBySqlId(PlayerInfo[cops][pFac])][fTipo] == FAC_TIPO_PMERJ)
							{
								if(PlayerInfo[cops][pEmServico] == 1)
								{
									PolicesOnline++;
								}
							}
						}
					}
					if(PolicesOnline < 8) return 
						SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} É preciso ter pelo menos 8 policiais em serviço para executar essa ação.");

					TaNoCOFREL[playerid] = i;
					SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você armou uma C4.");
						
					TogglePlayerControllable(playerid, 0);
					ApplyAnimation(playerid, "PLAYIDLES", "shldr", 4.0,1,1,1,1,0,1);
					SetTimerEx("ExplodindoCofreL", 15000, false, "d", playerid);
					new Float:x, Float:y, Float:z, Float:Distance = 25.0;
    				GetPlayerPos(playerid, x, y, z);
 					PlayAudioStreamForPlayer(playerid, "https://cp-frp.com.br.com/midia/alarme_casa.mp3", x, y, z, Distance, 1);
					new stringCaixaF[256];
					format(stringCaixaF,sizeof(stringCaixaF),"** %s posiciona-se perto do cofre e cola a C4.", PlayerName(playerid, 1));
					ProxDetector(20.0, playerid, stringCaixaF,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


					format(stringCaixaF, sizeof(stringCaixaF), "* Barulho de explosão são escutados nas próximidades *");
					ProxDetector(200.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


					SendFacMessage(COLOR_LIGHTBLUE, 1, "|__________EMERGENCIA POLICIAL__________|");
					SendFacMessage(COLOR_LIGHTBLUE, 2, "|__________EMERGENCIA POLICIAL__________|");
					SendFacMessage(COLOR_LIGHTBLUE, 1, "Relator: Anonimo, Contato: Orelhão");
					SendFacMessage(COLOR_LIGHTBLUE, 2, "Relator: Anonimo, Contato: Orelhão");
					SendFacMessage(COLOR_LIGHTBLUE, 1, "Situação: Socorro, estão explodindo o cofre da loja, venham rápido.");
					SendFacMessage(COLOR_LIGHTBLUE, 2, "Situação: Socorro, estão explodindo o cofre da loja, venham rápido.");

					new location[MAX_ZONE_NAME];
					Get2DZone(location, TOTAL_ZONE_NAME, cLoja[i][clposX], cLoja[i][clposY], cLoja[i][clposZ]);

					format(string, sizeof(string), "Local: %s",location);
					SendFacMessage(COLOR_LIGHTBLUE, 1, string);
					SendFacMessage(COLOR_LIGHTBLUE, 2, string);



					new stringvendeu[256];
					format(stringvendeu,sizeof(stringvendeu),"%s GRITA: VAI FILHA DA PUTA, NO CHÃO, OU ESTOURO SUA CABEÇA!", PlayerName(playerid, 1));
					ProxDetector(40.0, playerid, stringvendeu,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);

					SendAdminAlert(COLOR_LIGHTRED, "AdmCmd:{FFFFFF} %s acaba de utilizar o comando /explodir loja.", PlayerName(playerid, 0));
					
					new strl[126];
					format(strl, 126, "%s explodiu um cofre. [/explodir loja]", PlayerName(playerid, 0));
					LogCMD_explodircaixa(strl);
				}
			}
		}
	}


	if(strcmp(tmp,"caixa",true) == 0)
	{
		if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
		if(PlayerInfo[playerid][pLevel] < 5) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 5 ou mais para explodir o caixa.");
		if(PlayerInfo[playerid][pBomba] < 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 1 dinamite para explodir o caixa.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver amarrado.");
		if(PlayerInfo[playerid][pArrombarDNV_C] != 0)
		{
			new stringroubo2[128];
			format(stringroubo2, sizeof(stringroubo2),"Aguarde %d segundos antes de explodir um caixa novamente.", PlayerInfo[playerid][pArrombarDNV_C]);
			SendClientMessage(playerid,COLOR_LIGHTRED, stringroubo2);
			return 1;
		}

		for(new i = 0; i < MAX_ATM; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,1.5,ATMs[i][aposX], ATMs[i][aposY], ATMs[i][aposZ]))
			{

				new PolicesOnline = 0;
				for(new cops = 0; cops < MAX_PLAYERS; cops++)
				{
					if(IsPlayerConnected(cops))
					{
						if(PlayerInfo[cops][pLogado])
						{
							if(FacInfo[GetFactionBySqlId(PlayerInfo[cops][pFac])][fTipo] == FAC_TIPO_PMERJ)
							{
								if(PlayerInfo[cops][pEmServico] == 1)
								{
									PolicesOnline++;
								}
							}
						}
					}
				
					if(PolicesOnline < 5) return 
						SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} É preciso ter pelo menos 5 policiais em serviço para executar essa ação.");
				
					new location[MAX_ZONE_NAME];
					Get2DZone(location, TOTAL_ZONE_NAME, ATMs[i][aposX], ATMs[i][aposY], ATMs[i][aposZ]);

					TaNaATM[playerid] = i;
					SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você armou uma dinamite.");
						
					TogglePlayerControllable(playerid, 0);
					ApplyAnimation(playerid, "PLAYIDLES", "shldr", 4.0,1,1,1,1,0,1);
					SetTimerEx("ExplodindoCaixa", 15000, false, "d", playerid);
					new Float:x, Float:y, Float:z, Float:Distance = 25.0;
    				GetPlayerPos(playerid, x, y, z);
 					PlayAudioStreamForPlayer(playerid, "https://cp-frp.com.br.com/midia/alarme_casa.mp3", x, y, z, Distance, 1);
					new stringCaixaF[256];
					format(stringCaixaF,sizeof(stringCaixaF),"** %s está armando uma dinamite no caixa eletronico.", PlayerName(playerid, 1));
					ProxDetector(20.0, playerid, stringCaixaF,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


					format(stringCaixaF, sizeof(stringCaixaF), "* Barulho de explosão são escutados nas próximidades *");
					ProxDetector(500.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new str[126];
					SendFacMessage(COLOR_LIGHTBLUE, 1, "|__________EMERGENCIA POLICIAL__________|");
					SendFacMessage(COLOR_LIGHTBLUE, 2, "|__________EMERGENCIA POLICIAL__________|");
					SendFacMessage(COLOR_LIGHTBLUE, 1, "Relator: Anonimo, Contato: Orelhão");
					SendFacMessage(COLOR_LIGHTBLUE, 2, "Relator: Anonimo, Contato: Orelhão");
					SendFacMessage(COLOR_LIGHTBLUE, 1, "Situação: Socorro, estão explodindo um caixa eletronico, venham rápido.");
					SendFacMessage(COLOR_LIGHTBLUE, 2, "Situação: Socorro, estão explodindo um caixa eletronico, venham rápido.");
					format(str, sizeof(str), "Local: %s",location);
					SendFacMessage(COLOR_LIGHTBLUE, 1, str);
					SendFacMessage(COLOR_LIGHTBLUE, 2, str);

					SendAdminAlert(COLOR_LIGHTRED, "AdmCmd:{FFFFFF} %s acaba de utilizar o comando /explodir caixa.", PlayerName(playerid, 0));
						
					new strl[126];
					format(strl, 126, "%s explodiu um caixa eletronico. [/explodir caixa]", PlayerName(playerid, 0));
					LogCMD_explodircaixa(strl);
				}
			}
		}
	}
	return 1;
}

COMMAND:roubar(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new idx = 0;
	new tmp[256];
	tmp = strtok(params,idx);
	if(!strlen(tmp))
	{
        SendClientMessage(playerid, COLOR_VEICULO,"____________________________________________________");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: /roubar [ação]");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: banco - Utilize o comando após explodir o cofre do banco");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: loja - Utilize o comando após explodir o cofre da loja");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: caixa - Utilize o comando após explodir o caixa eletrônico");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: joias - Utilize o comando após explodir a joalheria.");
		SendClientMessage(playerid, COLOR_VEICULO,"____________________________________________________");
		return 1;
	}
	if(strcmp(tmp,"joias",true) == 0)
	{
		if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");
		if(PlayerInfo[playerid][pLevel] < 5) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 25 ou mais para pegar a grana.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver amarrado.");
		if(PlayerInfo[playerid][pArrombarDNV_C] != 0)

		for(new i = 0; i < MAX_JOIA; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,1.5,joalheria[i][jlposX], joalheria[i][jlposY], joalheria[i][jlposZ]) && joalheria[i][jlRrombado] == 1) 
			{

				new stringBCofre[256];	
				format(stringBCofre,sizeof(stringBCofre),"** %s se abaixa e começa a recolher os pertences.", PlayerName(playerid, 1));
				ProxDetector(20.0, playerid, stringBCofre,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				SetTimerEx("PegandoGranaJoalheria", 120000, false, "d", playerid);
				return 1;
			}
		}
	}
	if(strcmp(tmp,"banco",true) == 0)
	{
		if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");
		if(PlayerInfo[playerid][pLevel] < 25) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 25 ou mais para pegar a grana.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver amarrado.");
		if(PlayerInfo[playerid][pArrombarDNV_C] != 0)

		for(new i = 0; i < MAX_COFREB; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,1.5,cbanco[i][cbposX], cbanco[i][cbposY], cbanco[i][cbposZ]) && cbanco[i][cbRrombado] == 1) 
			{
				PlayerInfo[playerid][pGranaSuja] += 50000;
				SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você está colhetando 50 mil reais.");

				new stringBCofre[256];	
				format(stringBCofre,sizeof(stringBCofre),"** %s se abaixa e começa a recolher o dinheiro do cofre.", PlayerName(playerid, 1));
				ProxDetector(20.0, playerid, stringBCofre,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				SetTimerEx("PegandoGranaBanco", 120000, false, "d", playerid);
				return 1;
			}
		}
	}
	if(strcmp(tmp,"loja",true) == 0)
	{
		if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");
		if(PlayerInfo[playerid][pLevel] < 10) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 10 ou mais para pegar a grana.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver amarrado.");

		for(new i = 0; i < MAX_COFRE; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,1.5,cLoja[i][clposX], cLoja[i][clposY], cLoja[i][clposZ]) && cLoja[i][clRrombado] == 1) 
			{
				PlayerInfo[playerid][pGranaSuja] += 10000;
				SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você está colhetando 10 mil reais.");

				new location[MAX_ZONE_NAME];
				Get2DZone(location, TOTAL_ZONE_NAME, cLoja[i][clposX], cLoja[i][clposY], cLoja[i][clposZ]);
				format(string, sizeof(string), "** MARE 0: Um cofre explodiu em %s.**", location);
				SendFacMessage(0x6666CCFF,1,string);
				SendFacMessage(0x6666CCFF,2,string);

				new stringCaixaF[256];	
				format(stringCaixaF,sizeof(stringCaixaF),"** %s se abaixa e começa a recolher o dinheiro do cofre.", PlayerName(playerid, 1));
				ProxDetector(20.0, playerid, stringCaixaF,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				SetTimerEx("PegandoGranaCofreL", 10000, false, "d", playerid);
				return 1;
			}
		}
	}

	if(strcmp(tmp,"caixa",true) == 0)
	{
		if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");
		if(PlayerInfo[playerid][pLevel] < 5) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 5 ou mais para pegar a grana.");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
		if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver amarrado.");
		if(PlayerInfo[playerid][pArrombarDNV_C] != 0)

		for(new i = 0; i < MAX_ATM; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,1.5,ATMs[i][aposX], ATMs[i][aposY], ATMs[i][aposZ]) && ATMs[i][aRrombado] == 1) 
			{
				PlayerInfo[playerid][pGranaSuja] += 8000;
				SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você está colhetando 8 mil reais.");

				new stringCaixaF[256];	
				format(stringCaixaF,sizeof(stringCaixaF),"** %s se abaixa e começa a recolher o dinheiro do chão.", PlayerName(playerid, 1));
				ProxDetector(20.0, playerid, stringCaixaF,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				SetTimerEx("PegandoGrana", 1, false, "d", playerid);
				return 1;
			}
		}
	}
	return 1;
}

forward PegandoGranaJoalheria(playerid);
public PegandoGranaJoalheria(playerid)
{
	for(new i = 0; i < MAX_COFREB; i++)
 	{
  		if(IsPlayerInRangeOfPoint(playerid,1.5,joalheria[i][jlposX], joalheria[i][jlposY], joalheria[i][jlposZ]))
		{
            PlayerInfo[playerid][pGranaSuja] += 6000;
            PlayerInfo[playerid][pOuro] += 10;
            PlayerInfo[playerid][pPrata] += 5;
            PlayerInfo[playerid][pBronze] += 4;
			SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você está colhetando as joias e a grana.");
			joalheria[i][jlRrombado] = 0;


			TogglePlayerControllable(playerid, 0);
			SetTimerEx("AnimGranaJL", 120000, false, "d", playerid);
		}
	}

    return 1;
}


forward AnimGranaJL(playerid);
public AnimGranaJL(playerid)
{
	ApplyAnimation(playerid,"FAT","IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
	SetTimerEx("PegouGranaJL", 8000, false, "d", playerid);

    return 1;
}

forward PegouGranaJL(playerid);
public PegouGranaJL(playerid)
{

    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);

    return 1;
}

forward ExplodindoCaixa(playerid);
public ExplodindoCaixa(playerid)
{
	for(new i = 0; i < MAX_ATM; i++)
 	{
  		if(IsPlayerInRangeOfPoint(playerid,1.5,ATMs[i][aposX], ATMs[i][aposY], ATMs[i][aposZ]))
		{
			PlayerInfo[playerid][pArrombarDNV_C] = 1300;
			
			CreateExplosion(ATMs[i][aposX], ATMs[i][aposY], ATMs[i][aposZ], 13, 0);
			ATMs[i][aRrombado] = 1;
			PlayerInfo[playerid][pBomba]--;

            new location[MAX_ZONE_NAME];
            Get2DZone(location, TOTAL_ZONE_NAME, ATMs[i][aposX], ATMs[i][aposY], ATMs[i][aposZ]);

			new stringCaixaF[256];
			format(stringCaixaF, sizeof(stringCaixaF), "** MARE 0: Um caixa eletronico explodiu em %s.**", location);
   			SendFacMessage(0x6666CCFF,1,stringCaixaF);
   			SendFacMessage(0x6666CCFF,2,stringCaixaF);

			format(stringCaixaF, sizeof(stringCaixaF), "* O caixa eletronico explode e o dinheiro se espalha *");
			ProxDetector(500.0, playerid, stringCaixaF, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			SetTimerEx("RoubeAgora", 15000, false, "d", playerid);

		}
	}
    return 1;
}

forward PegandoGrana(playerid);
public PegandoGrana(playerid)
{
	for(new i = 0; i < MAX_ATM; i++)
 	{
  		if(IsPlayerInRangeOfPoint(playerid,1.5,ATMs[i][aposX], ATMs[i][aposY], ATMs[i][aposZ]))
		{
			ATMs[i][aRrombado] = 0;

			TogglePlayerControllable(playerid, 0);
			SetTimerEx("AnimGrana", 1, false, "d", playerid);
		}
	}

    return 1;
}


forward AnimGrana(playerid);
public AnimGrana(playerid)
{
	ApplyAnimation(playerid,"FAT","IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
	SetTimerEx("PegouGrana", 10000, false, "d", playerid);

    return 1;
}

forward PegouGrana(playerid);
public PegouGrana(playerid)
{

    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);

    return 1;
}
forward ExplodindoCofreL(playerid);
public ExplodindoCofreL(playerid)
{
	for(new i = 0; i < MAX_COFRE; i++)
 	{
  		if(IsPlayerInRangeOfPoint(playerid,1.5,cLoja[i][clposX], cLoja[i][clposY], cLoja[i][clposZ]))
		{
			PlayerInfo[playerid][pArrombarDNV_C] = 3600;
			
			CreateExplosion(cLoja[i][clposX], cLoja[i][clposY], cLoja[i][clposZ], 13, 0);
			cLoja[i][clRrombado] = 1;
			PlayerInfo[playerid][pC4]--;

			new stringCaixaF[256];
			format(stringCaixaF, sizeof(stringCaixaF), "* Um cofre é explodido na região *");
			ProxDetector(100.0, playerid, stringCaixaF, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			SetTimerEx("RoubeAgora", 15000, false, "d", playerid);

		}
	}
    return 1;
}

forward PegandoGranaCofreL(playerid);
public PegandoGranaCofreL(playerid)
{
	for(new i = 0; i < MAX_COFRE; i++)
 	{
  		if(IsPlayerInRangeOfPoint(playerid,1.5,cLoja[i][clposX], cLoja[i][clposY], cLoja[i][clposZ]))
		{
			cLoja[i][clRrombado] = 0;

			TogglePlayerControllable(playerid, 0);
			SetTimerEx("AnimGranaCofreL", 15000, false, "d", playerid);
		}
	}

    return 1;
}


forward AnimGranaCofreL(playerid);
public AnimGranaCofreL(playerid)
{
	ApplyAnimation(playerid,"FAT","IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
	SetTimerEx("PegouGranaCofreL", 8000, false, "d", playerid);

    return 1;
}

forward PegouGranaCofreL(playerid);
public PegouGranaCofreL(playerid)
{

    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);

    return 1;
}
forward ExplodindoBanco(playerid);
public ExplodindoBanco(playerid)
{
	for(new i = 0; i < MAX_COFREB; i++)
 	{
  		if(IsPlayerInRangeOfPoint(playerid,1.5,cbanco[i][cbposX], cbanco[i][cbposY], cbanco[i][cbposZ]))
		{
			PlayerInfo[playerid][pArrombarDNV_C] = 86400;
			
			CreateExplosion(cbanco[i][cbposX], cbanco[i][cbposY], cbanco[i][cbposZ], 13, 0);
			cbanco[i][cbRrombado] = 1;
			PlayerInfo[playerid][pTNT]--;

			SendFacMessage(COLOR_LIGHTBLUE, 1, "Maré-0: Uma explosão na Avenida da Ammu-Nation, caixa federal.");
			SendFacMessage(COLOR_LIGHTBLUE, 2, "Maré-0: Uma explosão na Avenida da Ammu-Nation, caixa federal.");

			new stringBCofre[256];
			format(stringBCofre, sizeof(stringBCofre), "* Uma grande explosão acontece no banco *");
			ProxDetector(100.0, playerid, stringBCofre, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			SetTimerEx("RoubeAgora", 15000, false, "d", playerid);

		}
	}
    return 1;
}

forward RoubeAgora(playerid);
public RoubeAgora(playerid)
{

	SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Use /roubar.");

    return 1;
}

forward PegandoGranaBanco(playerid);
public PegandoGranaBanco(playerid)
{
	for(new i = 0; i < MAX_COFREB; i++)
 	{
  		if(IsPlayerInRangeOfPoint(playerid,1.5,cbanco[i][cbposX], cbanco[i][cbposY], cbanco[i][cbposZ]))
		{
			cbanco[i][cbRrombado] = 0;

			TogglePlayerControllable(playerid, 0);
			SetTimerEx("AnimGranaBanco", 120000, false, "d", playerid);
		}
	}

    return 1;
}


forward AnimGranaBanco(playerid);
public AnimGranaBanco(playerid)
{
	ApplyAnimation(playerid,"FAT","IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
	SetTimerEx("PegouGranaBanco", 12000, false, "d", playerid);

    return 1;
}

forward PegouGranaBanco(playerid);
public PegouGranaBanco(playerid)
{

    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);

    return 1;
}

ALTCOMMAND:ce->caixa;
ALTCOMMAND:atm->caixa;
COMMAND:caixa(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar logado.");
	for(new i = 0; i < MAX_ATM; i++)
 	{
  		if(IsPlayerInRangeOfPoint(playerid,1.5,ATMs[i][aposX], ATMs[i][aposY], ATMs[i][aposZ]))
    	{
    		TaNaATM[playerid] = i;
			new str[126];
			format(str, sizeof(str), "Saldo: R$%d\n-------------\nSacar", PlayerInfo[playerid][pBanco]);
			Dialog_Show(playerid, ATM_Banco, DIALOG_STYLE_LIST, "Caixa Eletronico", str, "Selecionar", "Fechar");
			return 1;
		}
	}
	return 1;
}

Dialog:ATM_Banco(playerid, response, listitem, inputtext[]) {
	if(response)
	{
		if(listitem == 2)
		{
			ShowPlayerDialog(playerid, DIALOG_SBANCO, DIALOG_STYLE_INPUT, "Caixa Eletronico", "Digite o valor a ser sacado:", "Sacar","Cancelar");
			return 1;
		}
		else
		{
		    new str[126];
			format(str, sizeof(str), "Saldo: R$%d\n-------------\nSacar", PlayerInfo[playerid][pBanco]);
			Dialog_Show(playerid, ATM_Banco, DIALOG_STYLE_LIST, "Caixa eletronico", str, "Selecionar", "Fechar");
		}
	}
	return 1;
}

CMD:ferimentos(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new targetid, stringfer[1024], stringfera[24], string11[126];
	if (sscanf(params, "u", targetid)) return SendClientMessage(playerid, COLOR_WHITE,"{FF6347}[USE]:{FFFFFF} /ferimentos [ID]");
	else
	{
	    //if(PlayerInfo[targetid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player não está ferido ou morto!");

		if(playerid != targetid)
		{
			if(!IsPlayerNearPlayer(playerid, targetid, 5.0))  return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O jogador não está próximo a você!");
		}

		format(stringfer, sizeof(stringfer), "");
		format(string11, sizeof(string11), "Dano\tArma\tParte do Corpo\tColete-Hora\n%s", PlayerInfo[targetid][pDamage0]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage1]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage2]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage3]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage4]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage5]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage6]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage7]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage8]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage9]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage10]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage11]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage12]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage13]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage14]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage15]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage16]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage17]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage18]); strcat(stringfer, string11);
        format(string11, sizeof(string11), "\n%s", PlayerInfo[targetid][pDamage19]); strcat(stringfer, string11);

        format(stringfera, sizeof(stringfera), "%s", PlayerName(targetid, 1));
		Dialog_Show(playerid, 999999, DIALOG_STYLE_TABLIST_HEADERS, stringfera, stringfer, "Fechar", "");
	}
	return 1;
}
CMD:ado(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new opcao[256], str[256];
	if (sscanf(params, "s[256]", opcao)) return SendClientMessage(playerid, COLOR_WHITE,"{FF6347}[USE]:{FFFFFF} /ado [descrição]");
	else
	{
	    format(str,sizeof(str),"* %s (( %s ))", opcao, PlayerName(playerid, 1));
		SetPlayerChatBubble(playerid, str, COLOR_PURPLE, 20.0, 10000);
		format(str, sizeof(str), "> %s (( %s ))", opcao, PlayerName(playerid, 1));
    	SendClientMessage(playerid, COLOR_PURPLE, str);
	}
	return 1;
}

COMMAND:ame(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new text[128],stringa[256];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /ame [ação]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");


    	format(stringa, sizeof(stringa), "* %s %s", PlayerName(playerid, 1), text);
    	SetPlayerChatBubble(playerid, stringa, COLOR_PURPLE, 20.0, 10000);

    	format(stringa, sizeof(stringa), "> %s %s ", PlayerName(playerid, 1), text);
    	SendClientMessage(playerid, COLOR_PURPLE, stringa);
	}
	return 1;
}

ALTCOMMAND:g->gritar;
COMMAND:gritar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new text[128];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} (/g)ritar [texto]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if (PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_WHITE, "ERRO:{FFFFFF} Você está muito ferido para gritar.");

    	format(string, sizeof(string), "%s grita: %s!", PlayerName(playerid, 1), text);
    	ProxDetectorG(40.0, playerid, string, COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
    	SetPlayerChatBubble(playerid, string, COLOR_FADE1, 30.0, strlen(text)*100);

     	for(new h = 0; h < sizeof(HouseInfo); h++)
		{
  			if(IsPlayerInRangeOfPoint(playerid, 20.0, HouseInfo[h][hExX], HouseInfo[h][hExY], HouseInfo[h][hExZ]))
		  	{
     			for(new p = 0; p < MAX_PLAYERS; p++)
				{
  	              if(IsPlayerInRangeOfPoint(p,20.0,HouseInfo[h][hInX],HouseInfo[h][hInY],HouseInfo[h][hInZ]))
     	           {
						if(GetPlayerVirtualWorld(p) == 100+h)
						{
						    format(string, sizeof(string), "[GRITO NA PORTA DE FORA]: %s grita: %s!", PlayerName(playerid, 1), text);
				        	SendClientMessage(p, COLOR_WHITE, string);
				    	}
					}
		    	}
	    	}
	    	if(IsPlayerInRangeOfPoint(playerid,20.0,HouseInfo[h][hInX],HouseInfo[h][hInY],HouseInfo[h][hInZ]))
	    	{
	    	    if(100+h == GetPlayerVirtualWorld(playerid))
	    	    {
            	    for(new p = 0; p < MAX_PLAYERS; p++)
					{
                	    if(IsPlayerInRangeOfPoint(p,15.0,HouseInfo[h][hExX],HouseInfo[h][hExY],HouseInfo[h][hExZ]))
                	    {
						    if(GetPlayerVirtualWorld(p) == HouseInfo[h][hExWorld])
						    {
						        format(string, sizeof(string), "[GRITO NA PORTA POR DENTRO]: %s grita: %s!", PlayerName(playerid, 1), text);
				        	    SendClientMessage(p, COLOR_WHITE, string);
				    	    }
					    }
		    	    }
		    	}
	    	}
		}


		for(new h = 0; h < sizeof(GaragemInfo); h++)
		{
  			if(IsPlayerInRangeOfPoint(playerid, 20.0, GaragemInfo[h][hExX], GaragemInfo[h][hExY], GaragemInfo[h][hExZ]))
		  	{
     			for(new p = 0; p < MAX_PLAYERS; p++)
				{
  	              if(IsPlayerInRangeOfPoint(p,20.0,GaragemInfo[h][hInX],GaragemInfo[h][hInY],GaragemInfo[h][hInZ]))
     	           {
						if(GetPlayerVirtualWorld(p) == 10000+h)
						{
						    format(string, sizeof(string), "[GRITO NA GARAGEM DE FORA]: %s grita: %s!", PlayerName(playerid, 1), text);
				        	SendClientMessage(p, COLOR_WHITE, string);
				    	}
					}
		    	}
	    	}
	    	if(IsPlayerInRangeOfPoint(playerid,20.0,GaragemInfo[h][hInX],GaragemInfo[h][hInY],GaragemInfo[h][hInZ]))
	    	{
	    	    if(100+h == GetPlayerVirtualWorld(playerid))
	    	    {
            	    for(new p = 0; p < MAX_PLAYERS; p++)
					{
                	    if(IsPlayerInRangeOfPoint(p,15.0,GaragemInfo[h][hExX],GaragemInfo[h][hExY],GaragemInfo[h][hExZ]))
                	    {
						    if(GetPlayerVirtualWorld(p) == GaragemInfo[h][hExWorld])
						    {
						        format(string, sizeof(string), "[GRITO NA GARAGEM POR DENTRO]: %s grita: %s!", PlayerName(playerid, 1), text);
				        	    SendClientMessage(p, COLOR_WHITE, string);
				    	    }
					    }
		    	    }
		    	}
	    	}
		}
	}
	return 1;
}

ALTCOMMAND:porta_me->pme;
CMD:pme(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new opcao[256], str[256];
	if (sscanf(params, "s[256]", opcao)) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /pme [ação]");
	else
	{
	    format(str,sizeof(str),"* %s %s", PlayerName(playerid, 1), opcao);
		ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
  			if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[h][hExX], HouseInfo[h][hExY], HouseInfo[h][hExZ]))
		  	{
     			for(new p = 0; p < MAX_PLAYERS; p++)
				{
  	              if(IsPlayerInRangeOfPoint(p,20.0,HouseInfo[h][hInX],HouseInfo[h][hInY],HouseInfo[h][hInZ]))
     	           {
						if(GetPlayerVirtualWorld(p) == 100+h)
						{
						    format(string, sizeof(string), "%s %s", PlayerName(playerid, 1), opcao);
				        	SendClientMessage(p, COLOR_PURPLE, string);
				    	}
					}
		    	}
	    	}
	    	if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[h][hExX2], HouseInfo[h][hExY2], HouseInfo[h][hExZ2]))
		  	{
     			for(new p = 0; p < MAX_PLAYERS; p++)
				{
  	              if(IsPlayerInRangeOfPoint(p,20.0,HouseInfo[h][hInX2],HouseInfo[h][hInY2],HouseInfo[h][hInZ2]))
     	           {
						if(GetPlayerVirtualWorld(p) == 100+h)
						{
						    format(string, sizeof(string), "%s %s", PlayerName(playerid, 1), opcao);
				        	SendClientMessage(p, COLOR_PURPLE, string);
				    	}
					}
		    	}
	    	}
	    	if(IsPlayerInRangeOfPoint(playerid,20.0,HouseInfo[h][hInX],HouseInfo[h][hInY],HouseInfo[h][hInZ]))
	    	{
	    	    if(100+h == GetPlayerVirtualWorld(playerid))
	    	    {
            	    for(new p = 0; p < MAX_PLAYERS; p++)
					{
                	    if(IsPlayerInRangeOfPoint(p,5.0,HouseInfo[h][hExX],HouseInfo[h][hExY],HouseInfo[h][hExZ]))
                	    {
						    if(GetPlayerVirtualWorld(p) == HouseInfo[h][hExWorld])
						    {
						        format(string, sizeof(string), "%s %s", PlayerName(playerid, 1), opcao);
				        	    SendClientMessage(p, COLOR_PURPLE, string);
				    	    }
					    }
		    	    }
		    	}
	    	}
	    	if(IsPlayerInRangeOfPoint(playerid,20.0,HouseInfo[h][hInX2],HouseInfo[h][hInY2],HouseInfo[h][hInZ2]))
	    	{
	    	    if(100+h == GetPlayerVirtualWorld(playerid))
	    	    {
            	    for(new p = 0; p < MAX_PLAYERS; p++)
					{
                	    if(IsPlayerInRangeOfPoint(p,5.0,HouseInfo[h][hExX2],HouseInfo[h][hExY2],HouseInfo[h][hExZ2]))
                	    {
						    if(GetPlayerVirtualWorld(p) == HouseInfo[h][hExWorld])
						    {
						        format(string, sizeof(string), "%s %s", PlayerName(playerid, 1), opcao);
				        	    SendClientMessage(p, COLOR_PURPLE, string);
				    	    }
					    }
		    	    }
		    	}
	    	}
		}

		for(new h = 0; h < sizeof(GaragemInfo); h++)
		{
  			if(IsPlayerInRangeOfPoint(playerid, 5.0, GaragemInfo[h][hExX], GaragemInfo[h][hExY], GaragemInfo[h][hExZ]))
		  	{
     			for(new p = 0; p < MAX_PLAYERS; p++)
				{
  	              if(IsPlayerInRangeOfPoint(p,20.0,GaragemInfo[h][hInX],GaragemInfo[h][hInY],GaragemInfo[h][hInZ]))
     	           {
						if(GetPlayerVirtualWorld(p) == 10000+h)
						{
						    format(string, sizeof(string), "%s %s", PlayerName(playerid, 1), opcao);
				        	SendClientMessage(p, COLOR_PURPLE, string);
				    	}
					}
		    	}
	    	}
	    	if(IsPlayerInRangeOfPoint(playerid,20.0,GaragemInfo[h][hInX],GaragemInfo[h][hInY],GaragemInfo[h][hInZ]))
	    	{
	    	    if(100+h == GetPlayerVirtualWorld(playerid))
	    	    {
            	    for(new p = 0; p < MAX_PLAYERS; p++)
					{
                	    if(IsPlayerInRangeOfPoint(p,5.0,GaragemInfo[h][hExX],GaragemInfo[h][hExY],GaragemInfo[h][hExZ]))
                	    {
						    if(GetPlayerVirtualWorld(p) == GaragemInfo[h][hExWorld])
						    {
						        format(string, sizeof(string), "%s %s", PlayerName(playerid, 1), opcao);
				        	    SendClientMessage(p, COLOR_PURPLE, string);
				    	    }
					    }
		    	    }
		    	}
	    	}
		}
	}
	return 1;
}

ALTCOMMAND:porta_do->pdo;
CMD:pdo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new opcao[256], str[256];
	if (sscanf(params, "s[256]", opcao)) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /pdo [descrição]");
	else
	{
	    format(str,sizeof(str),"* %s (( %s ))", opcao, PlayerName(playerid, 1));
		ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
  			if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[h][hExX], HouseInfo[h][hExY], HouseInfo[h][hExZ]))
		  	{
     			for(new p = 0; p < MAX_PLAYERS; p++)
				{
  	              if(IsPlayerInRangeOfPoint(p,20.0,HouseInfo[h][hInX],HouseInfo[h][hInY],HouseInfo[h][hInZ]))
     	           {
						if(GetPlayerVirtualWorld(p) == 100+h)
						{
						    format(string, sizeof(string), "%s (( %s ))", opcao, PlayerName(playerid, 1));
				        	SendClientMessage(p, COLOR_PURPLE, string);
				    	}
					}
		    	}
	    	}
	    	if(IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[h][hExX2], HouseInfo[h][hExY2], HouseInfo[h][hExZ2]))
		  	{
     			for(new p = 0; p < MAX_PLAYERS; p++)
				{
  	              if(IsPlayerInRangeOfPoint(p,20.0,HouseInfo[h][hInX2],HouseInfo[h][hInY2],HouseInfo[h][hInZ2]))
     	           {
						if(GetPlayerVirtualWorld(p) == 100+h)
						{
						    format(string, sizeof(string), "%s (( %s ))", opcao, PlayerName(playerid, 1));
				        	SendClientMessage(p, COLOR_PURPLE, string);
				    	}
					}
		    	}
	    	}
	    	if(IsPlayerInRangeOfPoint(playerid,20.0,HouseInfo[h][hInX],HouseInfo[h][hInY],HouseInfo[h][hInZ]))
	    	{
	    	    if(100+h == GetPlayerVirtualWorld(playerid))
	    	    {
            	    for(new p = 0; p < MAX_PLAYERS; p++)
					{
                	    if(IsPlayerInRangeOfPoint(p,5.0,HouseInfo[h][hExX],HouseInfo[h][hExY],HouseInfo[h][hExZ]))
                	    {
						    if(GetPlayerVirtualWorld(p) == HouseInfo[h][hExWorld])
						    {
						        format(string, sizeof(string), "%s (( %s ))", opcao, PlayerName(playerid, 1));
				        	    SendClientMessage(p, COLOR_PURPLE, string);
				    	    }
					    }
		    	    }
		    	}
	    	}
	    	if(IsPlayerInRangeOfPoint(playerid,20.0,HouseInfo[h][hInX2],HouseInfo[h][hInY2],HouseInfo[h][hInZ2]))
	    	{
	    	    if(100+h == GetPlayerVirtualWorld(playerid))
	    	    {
            	    for(new p = 0; p < MAX_PLAYERS; p++)
					{
                	    if(IsPlayerInRangeOfPoint(p,5.0,HouseInfo[h][hExX2],HouseInfo[h][hExY2],HouseInfo[h][hExZ2]))
                	    {
						    if(GetPlayerVirtualWorld(p) == HouseInfo[h][hExWorld])
						    {
						        format(string, sizeof(string), "%s (( %s ))", opcao, PlayerName(playerid, 1));
				        	    SendClientMessage(p, COLOR_PURPLE, string);
				    	    }
					    }
		    	    }
		    	}
	    	}
		}

		for(new h = 0; h < sizeof(GaragemInfo); h++)
		{
  			if(IsPlayerInRangeOfPoint(playerid, 5.0, GaragemInfo[h][hExX], GaragemInfo[h][hExY], GaragemInfo[h][hExZ]))
		  	{
     			for(new p = 0; p < MAX_PLAYERS; p++)
				{
  	              if(IsPlayerInRangeOfPoint(p,20.0,GaragemInfo[h][hInX],GaragemInfo[h][hInY],GaragemInfo[h][hInZ]))
     	           {
						if(GetPlayerVirtualWorld(p) == 10000+h)
						{
						    format(string, sizeof(string), "%s (( %s ))", opcao, PlayerName(playerid, 1));
				        	SendClientMessage(p, COLOR_PURPLE, string);
				    	}
					}
		    	}
	    	}
	    	if(IsPlayerInRangeOfPoint(playerid,20.0,GaragemInfo[h][hInX],GaragemInfo[h][hInY],GaragemInfo[h][hInZ]))
	    	{
	    	    if(100+h == GetPlayerVirtualWorld(playerid))
	    	    {
            	    for(new p = 0; p < MAX_PLAYERS; p++)
					{
                	    if(IsPlayerInRangeOfPoint(p,5.0,GaragemInfo[h][hExX],GaragemInfo[h][hExY],GaragemInfo[h][hExZ]))
                	    {
						    if(GetPlayerVirtualWorld(p) == GaragemInfo[h][hExWorld])
						    {
						        format(string, sizeof(string), "%s (( %s ))", opcao, PlayerName(playerid, 1));
				        	    SendClientMessage(p, COLOR_PURPLE, string);
				    	    }
					    }
		    	    }
		    	}
	    	}
		}

	}
	return 1;
}

COMMAND:ir(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pTester] > 0)
	{
		new targetid;
		if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /ir [id]");
		else
		{
		    if((!OutrasInfos[playerid][oAdminOnDuty] && !OutrasInfos[playerid][oTesterOnDuty]) && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
		    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
		    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}ERRO:{FFFFFF} Este jogador não está conectado!");
			if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pTester] >= 1)
			{
			    if((!OutrasInfos[playerid][oAdminOnDuty] && !OutrasInfos[playerid][oTesterOnDuty]) && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
				new Float:x,Float:y,Float:z;
				GetPlayerPos(targetid,x,y,z);

                PlayerInfo[playerid][pInterior] = PlayerInfo[targetid][pInterior];
		    	PlayerInfo[playerid][pWorld] = PlayerInfo[targetid][pWorld];

				if(IsPlayerInAnyVehicle(playerid)) {
	                SetVehiclePos(GetPlayerVehicleID(playerid),x,y+4,z);
	      		    SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(targetid));
	      		    SetPlayerInterior(playerid,GetPlayerInterior(targetid));
	      		    LinkVehicleToInterior(GetPlayerVehicleID(playerid),GetPlayerInterior(targetid));
	      		    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),GetPlayerVirtualWorld(targetid));
		    	}
			    else {
			        SetPlayerPos(playerid,x,y+2,z);
	      		    SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(targetid));
	      		    SetPlayerInterior(playerid,GetPlayerInterior(targetid));
			    }
	      		SendClientMessage(playerid,0xADD8E6FF,"Você foi teleportado.");

	      		PlayerInfo[playerid][pEntrouCasa] = PlayerInfo[targetid][pEntrouCasa];
	    		PlayerInfo[playerid][pEntrouEmpresa] = PlayerInfo[targetid][pEntrouEmpresa];
	    		PlayerInfo[playerid][pEntrouComplexo] = PlayerInfo[targetid][pEntrouComplexo];
	    		PlayerInfo[playerid][pEntrouGaragem] = PlayerInfo[targetid][pEntrouGaragem];

	    		new strl[126];
				format(strl, 126, "%s foi até o player %s. [/ir]", PlayerName(playerid, 0), PlayerName(targetid, 0));
				LogCMD_A(playerid, strl);
			}
		}
	}
	return 1;
}

COMMAND:enviarjogador(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid, targetid2;
	if(sscanf(params, "uu", targetid,targetid2)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /enviarjogador [Id do Player a receber o player] [Id do Player a ser enviado]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "ERRO:{FFFFFF} O jogador a receber o player não está conectado!");
	    if (!IsPlayerConnected(targetid2)) return SendClientMessage(playerid, COLOR_WHITE, "ERRO:{FFFFFF} O jogador a ser enviado não está conectado!");
	    if(PlayerInfo[targetid][pPrisao] > 0) return SendClientMessage(playerid, COLOR_WHITE, "ERRO:{FFFFFF} O jogador a ser enviado está preso!");
		if(PlayerInfo[playerid][pAdmin] > 1)
		{
		    if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
			new Float:x,Float:y,Float:z;
			GetPlayerPos(targetid,x,y,z);
			if(IsPlayerInAnyVehicle(targetid2))
		    {
                SetVehiclePos(GetPlayerVehicleID(targetid2),x,y+4,z);
      		    SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(targetid));
      		    SetPlayerInterior(playerid,GetPlayerInterior(targetid));
      		    LinkVehicleToInterior(GetPlayerVehicleID(targetid2),GetPlayerInterior(targetid));
      		    SetVehicleVirtualWorld(GetPlayerVehicleID(targetid2),GetPlayerVirtualWorld(targetid));
	    	}
		    else
		    {
		        SetPlayerPos(targetid2,x,y+2,z);
      		    SetPlayerVirtualWorld(targetid2,GetPlayerVirtualWorld(targetid));
      		    SetPlayerInterior(targetid2,GetPlayerInterior(targetid));
		    }
		    if(ouvindoxmradio[targetid2] > 0)
		 	{
		        StopAudioStreamForPlayer(targetid2);
				ouvindoxmradio[targetid2] = 0;
				ouvindoxmradioID[targetid2] = 0;
			}
      		SendClientMessage(targetid2,COLOR_WHITE,"{FFFFFF}[INFO]:{ADADAD} Você foi teleportado.");

      		PlayerInfo[targetid][pEntrouCasa] = PlayerInfo[targetid2][pEntrouCasa];
    		PlayerInfo[targetid][pEntrouEmpresa] = PlayerInfo[targetid2][pEntrouEmpresa];
    		PlayerInfo[targetid][pEntrouComplexo] = PlayerInfo[targetid2][pEntrouComplexo];
    		PlayerInfo[targetid][pEntrouGaragem] = PlayerInfo[targetid2][pEntrouGaragem];

    		new strl[126];
			format(strl, 126, "%s enviou o player %s até o player %s. [/enviarjogador]", PlayerName(playerid, 0), PlayerName(targetid2, 0), PlayerName(targetid, 0));
			LogCMD_A(playerid, strl);
		}
	}
	return 1;
}

COMMAND:trazer(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /trazer [id]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}ERRO:{FFFFFF} Este jogador não está conectado!");
		if(PlayerInfo[playerid][pAdmin] > 0)
		{
		    if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");

            if(PlayerInfo[targetid][pPrisao] == 10)
			{
			    format(string, sizeof(string), "AVISO: Você está na prisão administrativa por %d minuto(s)", PlayerInfo[playerid][pTemPreso]);
				SendClientMessage(targetid, COLOR_LIGHTRED, string);

                PlayerInfo[targetid][pInterior] = PlayerInfo[playerid][pInterior];
		    	PlayerInfo[targetid][pWorld] = PlayerInfo[playerid][pWorld];

				SetPlayerPos(targetid,2523.9197,-1673.8944,14.8589);
	  			TogglePlayerControllable(targetid, false);
	    		SetPlayerInterior(targetid, 0);
	     		SetPlayerVirtualWorld(targetid, targetid);
	      		PlayerInfo[targetid][pEntrouEmpresa] = -1;
	   			PlayerInfo[targetid][pEntrouCasa] = -1;
	    		PlayerInfo[targetid][pEntrouComplexo] = -1;
	    		PlayerInfo[targetid][pEntrouGaragem] = -1;

	    		SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}[INFO]: {ADADAD}Você tentou puxar um player preso. Ele foi setado para dentro do presidio.");

	    		TogglePlayerControllable(targetid, 0);
			    CaindoInt[targetid] = 0;
			    CaindoInt_Av[targetid] = 0;

			    if(ouvindoxmradio[targetid] > 0)
			 	{
			        StopAudioStreamForPlayer(targetid);
					ouvindoxmradio[targetid] = 0;
					ouvindoxmradioID[targetid] = 0;
				}
	    		return 1;
			}
		    else if(PlayerInfo[targetid][pPrisao] == 1)
			{
				format(string, sizeof(string), "AVISO: Você está na prisão por %d minuto(s)", PlayerInfo[playerid][pTemPreso]);
				SendClientMessage(targetid, COLOR_LIGHTRED, string);
				SetPlayerPos(targetid, 1393.7780,-10.6594,1001.1442);

				SetPlayerVirtualWorld(targetid, 1052);

				PlayerInfo[targetid][pEntrouEmpresa] = -1;
	   			PlayerInfo[targetid][pEntrouCasa] = -1;
	    		PlayerInfo[targetid][pEntrouComplexo] = 52;
	    		PlayerInfo[targetid][pEntrouGaragem] = -1;

	    		SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}[INFO]: {ADADAD}Você tentou puxar um player preso.. Ele foi setado para dentro do presidio.");

	    		TogglePlayerControllable(targetid, 1);
			    CaindoInt[targetid] = 0;
			    CaindoInt_Av[targetid] = 0;

			    if(ouvindoxmradio[targetid] > 0)
			 	{
			        StopAudioStreamForPlayer(targetid);
					ouvindoxmradio[targetid] = 0;
					ouvindoxmradioID[targetid] = 0;
				}
				return 1;
			}
			else
			{
				new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid,x,y,z);
				if(IsPlayerInAnyVehicle(targetid))
			    {
	                SetVehiclePos(GetPlayerVehicleID(targetid),x,y+4,z);
	      		    SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(playerid));
	      		    SetPlayerInterior(playerid,GetPlayerInterior(playerid));
	      		    LinkVehicleToInterior(GetPlayerVehicleID(targetid),GetPlayerInterior(playerid));
	      		    SetVehicleVirtualWorld(GetPlayerVehicleID(targetid),GetPlayerVirtualWorld(playerid));
		    	}
			    else
			    {
			        SetPlayerPos(targetid,x,y+2,z);
	      		    SetPlayerVirtualWorld(targetid,GetPlayerVirtualWorld(playerid));
	      		    SetPlayerInterior(targetid,GetPlayerInterior(playerid));
			    }
	      		SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}[INFO]: {ADADAD}Você teleportou um jogador.");

	      		PlayerInfo[targetid][pEntrouCasa] = PlayerInfo[playerid][pEntrouCasa];
	    		PlayerInfo[targetid][pEntrouEmpresa] = PlayerInfo[playerid][pEntrouEmpresa];
	    		PlayerInfo[targetid][pEntrouComplexo] = PlayerInfo[playerid][pEntrouComplexo];
	    		PlayerInfo[targetid][pEntrouGaragem] = PlayerInfo[playerid][pEntrouGaragem];

	    		if(ouvindoxmradio[targetid] > 0)
			 	{
			        StopAudioStreamForPlayer(targetid);
					ouvindoxmradio[targetid] = 0;
					ouvindoxmradioID[targetid] = 0;
				}

	    		new strl[126];
				format(strl, 126, "%s puxou o jogador %s. [/trazer]", PlayerName(playerid, 0), PlayerName(targetid, 0));
				LogCMD_A(playerid, strl);
			}
		}
		if(PlayerInfo[playerid][pTester] >= 1)
		{
		    if(!OutrasInfos[playerid][oTesterOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
			new Float:x,Float:y,Float:z;
			GetPlayerPos(playerid,x,y,z);
			if(IsPlayerInAnyVehicle(targetid))
		    {
                SetVehiclePos(GetPlayerVehicleID(targetid),x,y+4,z);
      		    SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(playerid));
      		    SetPlayerInterior(playerid,GetPlayerInterior(playerid));
      		    LinkVehicleToInterior(GetPlayerVehicleID(targetid),GetPlayerInterior(playerid));
      		    SetVehicleVirtualWorld(GetPlayerVehicleID(targetid),GetPlayerVirtualWorld(playerid));
	    	}
		    else
		    {
		        SetPlayerPos(targetid,x,y+2,z);
      		    SetPlayerVirtualWorld(targetid,GetPlayerVirtualWorld(playerid));
      		    SetPlayerInterior(targetid,GetPlayerInterior(playerid));
		    }
      		SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}[INFO]: {ADADAD}Você teleportou um jogador.");

      		PlayerInfo[targetid][pEntrouCasa] = PlayerInfo[playerid][pEntrouCasa];
    		PlayerInfo[targetid][pEntrouEmpresa] = PlayerInfo[playerid][pEntrouEmpresa];
    		PlayerInfo[targetid][pEntrouComplexo] = PlayerInfo[playerid][pEntrouComplexo];
    		PlayerInfo[targetid][pEntrouGaragem] = PlayerInfo[playerid][pEntrouGaragem];

    		new strl[126];
			format(strl, 126, "%s puxou o jogador %s. [/trazer]", PlayerName(playerid, 0), PlayerName(targetid, 0));
			LogCMD_A(playerid, strl);
		}
	}
	return 1;
}

COMMAND:apagarpixe(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;

    if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pTester] > 0 || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_GOV || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ)
	{
		new id;
		if(sscanf(params, "i", id)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /apagarpixe [id] | /verpixes para ver os pixes próximos");
		else
		{
		    if(GrafiteSys[id][gX] > 0)
		    {
			    if(IsPlayerInRangeOfPoint(playerid, 200.0, GrafiteSys[id][gX], GrafiteSys[id][gY], GrafiteSys[id][gZ]))
			    {
			        new str2[520];
				   	format(str2,sizeof(str2),"DELETE FROM `pixes` WHERE `id` = '%d'", GrafiteSys[id][gID]);
				   	mysql_function_query(Pipeline, str2, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

				    format(string,sizeof(string),"~y~]~g~Pixe ~r~%d ~g~ removido!~y~]",id);
				    GameTextForPlayer(playerid, string,7000,3);
				    if(IsValidDynamicObject(GrafiteSys[id][gObj])) DestroyDynamicObject( GrafiteSys[id][gObj] );
				    GrafiteSys[id][gX] = 0;
				    GrafiteSys[id][gY] = 0;
				    GrafiteSys[id][gZ] = 0;

		   			return 1;
				}
				else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo ao pixe.");
			}
		}
	}
	return 1;
}

COMMAND:verpixes(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;

	if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pTester] > 0 || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_GOV || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ)
	{

	    for(new id = 0; id < MAX_PIXES; id++)
		{
			if(GrafiteSys[id][gX] > 0)
	    	{
			    if(IsPlayerInRangeOfPoint(playerid, 10.0, GrafiteSys[id][gX], GrafiteSys[id][gY], GrafiteSys[id][gZ]))
			    {
	 	    		format(string,sizeof(string),"Pixe id: %d | Escrita: %s | Criador: %s",id , GrafiteSys[id][gTexto], GrafiteSys[id][gPor]);
		   		    SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
		}
	}
	return 1;
}

CMD:ajudaemprego(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	switch(PlayerInfo[playerid][pJob])
	{
	    case JOB_MECANICO:
	    {
	        SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
	        SendClientMessage(playerid, COLOR_WHITE, "Seu atual emprego é:");
	        SendClientMessage(playerid, COLOR_GREY, " Mecânico");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/instalar {ffffff}para instalar alguma coisa em um veículo.");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/reparar {ffffff}para reparar um veículo.");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/minhaspecas {ffffff}para checar suas atuais peças.");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/comprarpecas {ffffff}para comprar peças.");
	        SendClientMessage(playerid, COLOR_YELLOW, "Informação: Para receber chamados, entre na frequencia 555 com seu rádio. ( /canalradio )");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
		}
		case JOB_CAMINHONEIRO:
		{
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
	        SendClientMessage(playerid, COLOR_WHITE, "Seu atual emprego é:");
	        SendClientMessage(playerid, COLOR_GREY, " Caminhoneiro");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/carga {ffffff}para ver a lista de ações disponíveis.");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/tpda {ffffff}para ver as informações do PDA dos caminhoneiros.");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/abastecerbomba {ffffff}para abastecer uma bomba de gasolina em um posto.");
	        SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
		}
		case JOB_TREINADOR:
		{
		    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
	        SendClientMessage(playerid, COLOR_WHITE, "Seu atual emprego é:");
	        SendClientMessage(playerid, COLOR_GREY, " Treinador");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/treinar {ffffff}para mudar o estilo de luta de alguém.");
		    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
		}
		case JOB_TAXISTA:
		{
		    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
	        SendClientMessage(playerid, COLOR_WHITE, "Seu atual emprego é:");
	        SendClientMessage(playerid, COLOR_GREY, " Taxista");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/taxi {ffffff}para colocar a placa de taxi em seu veículo. (Veículos 4 portas)");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/corrida {ffffff}para entrar em seviço.");
	        SendClientMessage(playerid, COLOR_YELLOW, "Informação:{ffffff} Para receber chamados, entre na frequencia 444 com seu rádio. ( /canalradio )");
		    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
		}
		case JOB_FALSIFICADOR:
		{
		    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
	        SendClientMessage(playerid, COLOR_WHITE, "Seu atual emprego é:");
	        SendClientMessage(playerid, COLOR_GREY, " Falsificador");
	        //SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/falsificar {ffffff}para falsificar documentos.");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/novaplaca {ffffff}para desmarcar a placa de procurada.");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/comprarplaca {ffffff}para comprar uma placa nova.");
	        format(string,sizeof(string),"[Placas (%d)] [Raspadores (%d)]", PlayerInfo[playerid][pPlacas], PlayerInfo[playerid][pRaspador]);
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/rasparnumeracao {ffffff}para raspar a numeração de uma arma.");
    		SendClientMessage(playerid,-1,string);
		    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
		}
		case JOB_LIXEIRO:
		{
		    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
	        SendClientMessage(playerid, COLOR_WHITE, "Seu atual emprego é:");
	        SendClientMessage(playerid, COLOR_GREY, " Lixeiro");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/comecarcoleta {ffffff}para iniciar uma coleta.");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/cancelarcoleta {ffffff}para cancelar uma coleta.");
	        SendClientMessage(playerid, COLOR_YELLOW, "Caminhões: Os caminhões de lixo ficam localizados próximos a Willowfield.");
		    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
		}
		case JOB_HOTDOG:
		{
		    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
	        SendClientMessage(playerid, COLOR_WHITE, "Seu atual emprego é:");
	        SendClientMessage(playerid, COLOR_GREY, " Vendedor de HotDog");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/hotdog {ffffff}para vender HotDog's.");
		    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
		}
		case JOB_DESMANCHE:
	    {
	        SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
	        SendClientMessage(playerid, COLOR_WHITE, "Seu atual emprego é:");
	        SendClientMessage(playerid, COLOR_GREY, " Mêcanico Ilegal");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/desmanchar {ffffff}para desmanchar um veículo.");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/minhaspecas {ffffff}para checar suas atuais peças.");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/parardemanche {ffffff}para parar de desmanchar.");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
		}
		case JOB_PESCADOR:
		{
		    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
	        SendClientMessage(playerid, COLOR_WHITE, "Seu atual emprego é:");
	        SendClientMessage(playerid, COLOR_GREY, " Pescador");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/pescar {ffffff}para pescar.");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/venderpeixes {ffffff}para vender seus peixes.");
	        SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/meuspeixes {ffffff}para checar seus peixes.");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
		}
		case JOB_LAVAGEM:
        {
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
            SendClientMessage(playerid, COLOR_WHITE, "Seu atual emprego é:");
            SendClientMessage(playerid, COLOR_GREY, " Lavador de dinheiro");
            SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/lavar dinheiro {ffffff}para iniciar a lavagem de dinheiro.");
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
        }
		case JOB_HACK:
		{
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
            SendClientMessage(playerid, COLOR_WHITE, "Seu atual emprego é:");
            SendClientMessage(playerid, COLOR_GREY, " Hacker");
            SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/hacker.");
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");			
		}
		case JOB_MOTORISTA:
		{
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
            SendClientMessage(playerid, COLOR_WHITE, "Seu atual emprego é:");
            SendClientMessage(playerid, COLOR_GREY, " Motorista de Onibus");
            SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}Utilize {FFFF00}/iniciarviagem.");
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");			
		}
		case JOB_MOTOBOY:
		{
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
            SendClientMessage(playerid, COLOR_WHITE, "Seu atual emprego é:");
            SendClientMessage(playerid, COLOR_GREY, " Entregador do Ifood");
            SendClientMessage(playerid, COLOR_YELLOW, "Comandos: {ffffff}/ifood - /ligarapp - /desligarapp - /aceitarentrega.");
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");			
		}
	}
	return 1;
}

CMD:removerplaca(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está logado!");
	if(PlayerInfo[playerid][pJob] != JOB_FALSIFICADOR) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um Falsificador.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você precisa estar fora do veículo.");
    if(OutrasInfos[playerid][oFalsis] > 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já está realizando alguma ação de falsificador.");

    for (new i = 1; i != MAX_VEHICLES; i ++)
	{
		if (IsPlayerNearHood(playerid, i))
		{
			new slot = GetVehicleSlot(i);
	 		if(slot > -1)
	  		{
	  		    if(VehicleInfo[slot][vFaction] == 0)
	  		    {
		   		   	new param[7], str[256], vname[64];
		        	GetVehicleParamsEx(i,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
		    		if(param[0] == 0)
				   	{
					    OutrasInfos[playerid][oFalsisT] = SetTimerEx("RemovendoPlacaV", 120000, false, "dd", playerid, slot);
					    format(str,sizeof(str),"** %s começa a retirar a placa do veículo %s.", PlayerName(playerid, 1), vname);
						ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

						OutrasInfos[playerid][oFalsis] = i;
						SendClientMessage(playerid,COLOR_LIGHTRED,"Removendo a Placa. Aguarde 2 minutos.");
						return 1;
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você precisa desligar o motor do veículo.");
				}
				else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} A placa deste veículo não pode ser alterada.");
	  		}
	  		else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Este veículo não pode ser reparado!");
		}
	}
	return 1;
}


forward RemovendoPlacaV(playerid, slot);
public RemovendoPlacaV(playerid, slot)
{
    if(!IsPlayerNearHood(playerid, VehicleInfo[slot][vVehicle]))
	{
	    OutrasInfos[playerid][oFalsis] = 0;
	    SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você se afastou do capo");
	    return 1;
	}

	if(OutrasInfos[playerid][oFalsis] != 0)
	{
	    new veh = OutrasInfos[playerid][oFalsis];
	    PlayerInfo[playerid][pPlacas]++;
	    VehicleInfo[slot][vPlacaProcurada] = 0;
	    format(VehicleInfo[slot][vPlate], 32, " ");
	    SetVehicleNumberPlate(veh," ");

	    OutrasInfos[playerid][oFalsis] = 0;
	    SendClientMessage(playerid, 0xFF7B30FF, "A placa do veículo foi removida.");

		PlayerInfo[playerid][pGranaSuja] += 900;
		SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você recebeu 900 reais sujo pela remoção da placa.");

	}
    return 1;
}

CMD:novaplaca(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está logado!");
	if(PlayerInfo[playerid][pJob] != JOB_FALSIFICADOR) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um Falsificador.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você precisa estar fora do veículo.");
    if(PlayerInfo[playerid][pPlacas] < 1) return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você não tem mais placas... Use /comprarplaca");
	if(OutrasInfos[playerid][oFalsis] > 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já está realizando alguma ação de falsificador.");

    for (new i = 1; i != MAX_VEHICLES; i ++){
		if (IsPlayerNearHood(playerid, i)){
			new slot = GetVehicleSlot(i);
	 		if(slot > -1){
	  		    if(VehicleInfo[slot][vFaction] == 0){
		   		   	new param[7], str[256], vname[64];
		        	GetVehicleParamsEx(i,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
		    		if(param[0] == 0){
					    OutrasInfos[playerid][oFalsisT] = SetTimerEx("TrocandoPlacaV", 120000, false, "dd", playerid, slot);
					    format(str,sizeof(str),"** %s começa a trocar a placa do veículo %s.", PlayerName(playerid, 1), vname);
						ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

						OutrasInfos[playerid][oFalsis] = i;
						SendClientMessage(playerid,COLOR_LIGHTRED,"Instalando a nova Placa, fique próximo ao capô, a troca irá demorar 2 minutos.");
						return 1;
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você precisa desligar o motor do veículo.");
				}
				else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} A placa deste veículo não pode ser alterada.");
	  		}
	  		else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Este veículo não pode ser reparado!");
		}
	}
 	SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está perto de um veículo!");
	return 1;
}

forward TrocandoPlacaV(playerid, slot);
public TrocandoPlacaV(playerid, slot)
{
    if(!IsPlayerNearHood(playerid, VehicleInfo[slot][vVehicle]))
	{
	    OutrasInfos[playerid][oFalsis] = 0;
	    SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você se afastou do capo.");
	    return 1;
	}

    if(OutrasInfos[playerid][oFalsis] != 0)
    {
		new veh = OutrasInfos[playerid][oFalsis];

        OutrasInfos[playerid][oFalsis] = 0;
	    VehicleInfo[slot][vPlacaProcurada] = 0;
	    PlayerInfo[playerid][pPlacas]--;
	    FetchVehiclePlate(slot,VehicleInfo[slot][vPlate]);

		PlayerInfo[playerid][pGranaSuja] += 900;
		SendClientMessage(playerid, COLOR_LIGHTRED, "INFO:{FFFFFF} Você recebeu 900 reais sujo pela troca da placa.");

	    SetVehicleNumberPlate(veh,VehicleInfo[slot][vPlate]);
	    SendClientMessage(playerid, 0xFF7B30FF, "A placa do veículo foi trocada. (Veículo removido de procurado)");
	}
    return 1;
}

COMMAND:treinar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pJob] != JOB_TREINADOR) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um treinador.");

	new targetid, lutaid;
	if(sscanf(params,"ii",targetid,lutaid))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /treinar [playerid] [lutaid]");
		SendClientMessage(playerid, COLOR_WHITE, "Tipos de Lutas: (1)Normal (2)Boxing (3)Kungfu (4)Grabkick");
		return 1;
	}
	else
	{
        if(GetDistanceBetweenPlayers(playerid,targetid) < 4.0)
		{
		    new LutaFinal, strluta[32];
		    switch(lutaid)
		    {
		        case 1: { LutaFinal = 4; format(strluta, sizeof(strluta), "Normal"); }
		        case 2: { LutaFinal = 5; format(strluta, sizeof(strluta), "Boxing"); }
		        case 3: { LutaFinal = 6; format(strluta, sizeof(strluta), "Kungfu"); }
		        case 4: { LutaFinal = 15; format(strluta, sizeof(strluta), "Grabkick"); }
		    }

		    format(string, sizeof(string), "Você ofereceu à %s aprender a lutar '%s'.", PlayerName(targetid, 1), strluta);
		    SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		    format(string, sizeof(string), "%s ofereceu-lhe aprender a luta '%s'(/aceitar luta)", PlayerName(playerid, 1), strluta);
		    SendClientMessage(targetid, COLOR_YELLOW, string);

	    	SetPVarInt(targetid, "OfereceLuta", playerid);
	    	SetPVarInt(targetid, "OfereceuLuta", LutaFinal);
    	}
		else return SendClientMessage(playerid,COLOR_GREY,"Você não está próximo deste jogador!");
	}
	return 1;
}

CMD:ajudapoker(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	SendClientMessage(playerid, COLOR_LIGHTGREEN, "____________________Ajuda Poker____________________");
	SendClientMessage(playerid, COLOR_WHITE, "/sentarmesa, /sairmesa");
	SendClientMessage(playerid, COLOR_WHITE, "/leavetable, /debugsound, /debugtextsize, /debugcamera, /leavedebugcamera, /debugseat");
	return 1;
}
COMMAND:portao(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new pport = 0;
 	for(new i; i < MAX_PORTOES; i++)
  	{
  		if(IsPlayerInRangeOfPoint(playerid, PortaoInfo[i][ptRange], PortaoInfo[i][ptX], PortaoInfo[i][ptY], PortaoInfo[i][ptZ]) && GetPlayerVirtualWorld(playerid) == PortaoInfo[i][ptWorld] && GetPlayerInterior(playerid) == PortaoInfo[i][ptInt])
   		{
   		    if(!ObjetoEPorta(PortaoInfo[i][ptModelo]))
   		    {
          		if(PortaoInfo[i][ptFac] > 0 && PortaoInfo[i][ptFac] == PlayerInfo[playerid][pFac])
	   		    {
		   		    if(!PortaoInfo[i][ptAberto])
		   		    {
		   		        MoveDynamicObject(PortaoInfo[i][ptObjeto], PortaoInfo[i][ptAX], PortaoInfo[i][ptAY], PortaoInfo[i][ptAZ],4.0, PortaoInfo[i][ptRAX], PortaoInfo[i][ptRAY], PortaoInfo[i][ptRAZ]);
		   		        PortaoInfo[i][ptAberto] = 1;
		   		        SendClientMessage(playerid, COLOR_LIGHTRED, "AVISO: Portão aberto.");
		   		        if(PortaoInfo[i][ptTempo] != 0)
		   		        {
		   		        	new tempo = (PortaoInfo[i][ptTempo]*1000);
		   		        	if(tempo == 0) tempo = 2000;
		   		        	PortaoInfo[i][ptTimer] = SetTimerEx("FecharPortao", tempo, 0, "i", i);
						}
		   		        pport++;
		   		    }
		   		    else
		   		    {
		   		        MoveDynamicObject(PortaoInfo[i][ptObjeto], PortaoInfo[i][ptX], PortaoInfo[i][ptY], PortaoInfo[i][ptZ],4.0, PortaoInfo[i][ptRX], PortaoInfo[i][ptRY], PortaoInfo[i][ptRZ]);
		   		        PortaoInfo[i][ptAberto] = 0;
		   		        SendClientMessage(playerid, COLOR_LIGHTRED, "AVISO: Portão fechado.");
		   		        if(PortaoInfo[i][ptTempo] != 0)
		   		        {
		   		        	KillTimer(PortaoInfo[i][ptTimer]);
						}
		   		        pport++;
		   		    }
				}
				else if(PortaoInfo[i][ptFac] == 190 && IsLaw(playerid))
	   		    {
		   		    if(!PortaoInfo[i][ptAberto])
		   		    {
		   		        MoveDynamicObject(PortaoInfo[i][ptObjeto], PortaoInfo[i][ptAX], PortaoInfo[i][ptAY], PortaoInfo[i][ptAZ],4.0, PortaoInfo[i][ptRAX], PortaoInfo[i][ptRAY], PortaoInfo[i][ptRAZ]);
		   		        PortaoInfo[i][ptAberto] = 1;
		   		        SendClientMessage(playerid, COLOR_LIGHTRED, "AVISO: Portão aberto [1].");
		   		        if(PortaoInfo[i][ptTempo] != 0)
		   		        {
		   		        	new tempo = (PortaoInfo[i][ptTempo]*1000);
		   		        	if(tempo == 0) tempo = 2000;
		   		        	PortaoInfo[i][ptTimer] = SetTimerEx("FecharPortao", tempo, 0, "i", i);
						}
		   		        pport++;
		   		    }
		   		    else
		   		    {
		   		        MoveDynamicObject(PortaoInfo[i][ptObjeto], PortaoInfo[i][ptX], PortaoInfo[i][ptY], PortaoInfo[i][ptZ],4.0, PortaoInfo[i][ptRX], PortaoInfo[i][ptRY], PortaoInfo[i][ptRZ]);
		   		        PortaoInfo[i][ptAberto] = 0;
		   		        SendClientMessage(playerid, COLOR_LIGHTRED, "AVISO: Portão fechado [1].");
		   		        if(PortaoInfo[i][ptTempo] != 0)
		   		        {
		   		        	KillTimer(PortaoInfo[i][ptTimer]);
						}
		   		        pport++;
		   		    }
				}
				else if(PortaoInfo[i][ptEmpresa] > 0)
				{
				    new c = PortaoInfo[i][ptEmpresa];

					if(EmpInfo[c][eDono] == PlayerInfo[playerid][pID]
					|| !strcmp(EmpInfo[c][ePerm1], PlayerName(playerid, 0), false)
					|| !strcmp(EmpInfo[c][ePerm2], PlayerName(playerid, 0), false)
					|| !strcmp(EmpInfo[c][ePerm3], PlayerName(playerid, 0), false))
					{
					    if(!PortaoInfo[i][ptAberto])
			   		    {
			   		        MoveDynamicObject(PortaoInfo[i][ptObjeto], PortaoInfo[i][ptAX], PortaoInfo[i][ptAY], PortaoInfo[i][ptAZ],4.0, PortaoInfo[i][ptRAX], PortaoInfo[i][ptRAY], PortaoInfo[i][ptRAZ]);
			   		        PortaoInfo[i][ptAberto] = 1;
			   		        SendClientMessage(playerid, COLOR_LIGHTRED, "AVISO: Portão aberto.");
			   		        if(PortaoInfo[i][ptTempo] != 0)
			   		        {
			   		        	new tempo = (PortaoInfo[i][ptTempo]*1000);
			   		        	if(tempo == 0) tempo = 2000;
			   		        	PortaoInfo[i][ptTimer] = SetTimerEx("FecharPortao", tempo, 0, "i", i);
							}
			   		        pport++;
			   		    }
			   		    else
			   		    {
			   		        MoveDynamicObject(PortaoInfo[i][ptObjeto], PortaoInfo[i][ptX], PortaoInfo[i][ptY], PortaoInfo[i][ptZ],4.0, PortaoInfo[i][ptRX], PortaoInfo[i][ptRY], PortaoInfo[i][ptRZ]);
			   		        PortaoInfo[i][ptAberto] = 0;
			   		        SendClientMessage(playerid, COLOR_LIGHTRED, "AVISO: Portão fechado.");
			   		        if(PortaoInfo[i][ptTempo] != 0)
			   		        {
			   		        	KillTimer(PortaoInfo[i][ptTimer]);
							}
			   		        pport++;
			   		    }
					}
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso a este portão.");
			}
   		}
	}
	if(pport == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está perto de nenhum portão");
	return 1;
}

forward FecharPortao(i);
public FecharPortao(i)
{
    MoveDynamicObject(PortaoInfo[i][ptObjeto], PortaoInfo[i][ptX], PortaoInfo[i][ptY], PortaoInfo[i][ptZ],4.0, PortaoInfo[i][ptRX], PortaoInfo[i][ptRY], PortaoInfo[i][ptRZ]);
    PortaoInfo[i][ptAberto] = 0;
    return 1;
}

stock temCaixa(vehicleid){
	new total = 0;
	new MaxCarga = MaxCargaModelo(vehicleid);
    for( new i = 0; i < MaxCarga; i++) {
		if(CargaInfo[vehicleid][cSlot][i] > 0) total++;
	}
	return total;
}

COMMAND:carga(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pJob] != JOB_CAMINHONEIRO) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um caminhoneiro.");

    new engine,lights,alarm,doors,bonnet,boot,objective;
	new option[11], StringPCar[24];
	new vehicleid = -1;
	if(sscanf(params,"s[11]",option))
	{
		SendClientMessage(playerid, COLOR_ADMDUTYOFF, "Comandos disponíveis:");
		SendClientMessage(playerid, COLOR_YELLOW, " /carga lista {FFFFFF}- mostra a lista de cargas de um veículo/trailer próximo");
		SendClientMessage(playerid, COLOR_YELLOW, " /carga colocar {FFFFFF}- coloca a carga que você esta segurando no veículo/trailer mais próximo");
		SendClientMessage(playerid, COLOR_YELLOW, " /carga dropar {FFFFFF}- Larga a carga que você esta segurando");
		SendClientMessage(playerid, COLOR_YELLOW, " /carga pegar {FFFFFF}- Pega uma carga do chão");
		SendClientMessage(playerid, COLOR_YELLOW, " /carga comprar {FFFFFF}- Permite que você compre a carga de uma industria");
		SendClientMessage(playerid, COLOR_YELLOW, " /carga vender {FFFFFF}- Vende uma carga para uma industria / empresa / porto");
		return 1;
	}
    if(strcmp(option, "lista", true) == 0)
	{
 		if(!PlayerToCar(playerid,1,4.0)) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF}  Você não está próximo de nenhum veículo.");
		vehicleid = PlayerToCar(playerid,2,4.0);
		if(vehicleid != INVALID_VEHICLE_ID)
		{
		    GetVehicleParamsEx(vehicleid, engine, lights, alarm,doors,bonnet,boot,objective);
			if(boot != 0)
 			{
			    new tipp;
			    new totall = 0;
				new MaxCarga = MaxCargaModelo(vehicleid), stringTipo[64], StringListaB[2054];
			    format(StringListaB,sizeof(StringListaB), "");
			    for( new i = 0; i < MaxCarga; i++)
			    {
			        new slot = CargaInfo[vehicleid][cSlot][i];
		   			tipp = CaixaInfo[slot][cTipo];
					if(slot > 0)
					{
					    if(slot == 10056) format(stringTipo,sizeof(stringTipo), "Veículo Prensado");
		     			else format(stringTipo,sizeof(stringTipo), "%s", GetCaixaTipo(tipp));
		     			totall++;
					}
					else
					{
					    format(stringTipo,sizeof(stringTipo), "Slot %d Vazio", i);
					}

					if(i == 0)
		   			{
						format(StringListaB,sizeof(StringListaB), "%s", stringTipo);
					}
					else
					{
						format(StringListaB,sizeof(StringListaB), "%s\n%s",StringListaB, stringTipo);
					}
		   		}
		   		format(StringPCar,sizeof(StringPCar), "Carga no veículo %d",vehicleid);
		   		ShowPlayerDialog(playerid, DIALOG_CARGA1, DIALOG_STYLE_LIST, StringPCar, StringListaB, "Selecionar", "Fechar");
		   		return 1;
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} O portamalas deste veículo está fechado.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Você não está próximo de nenhum veículo.");
	}
	else if(strcmp(option, "comprar", true) == 0)
	{
		//===================== [ Empresas Secundárias ]
		new Float:distanciaaa;
		for(new i = 0; i < MAX_EMPCARGA; i++)
		{
		    if(PontoEntrega[i][emFabrica] == 3 || PontoEntrega[i][emFabrica] == 6 || PontoEntrega[i][emFabrica] == 14 || PontoEntrega[i][emFabrica] == 15) distanciaaa = 10.0;
		    else distanciaaa = 3.0;

			if(IsPlayerInRangeOfPoint(playerid,distanciaaa,PontoEntrega[i][emX],PontoEntrega[i][emY],PontoEntrega[i][emZ]))
			{
			    if(PontoEntrega[i][emTipo] == 1 || PontoEntrega[i][emTipo] == 2 )
			    {
			        if(PontoEntrega[i][emStatus] == 1)
			        {
			            if(PontoEntrega[i][emStock] > 0)
		        		{
							if(PontoEntrega[i][emFabrica] == 3 || PontoEntrega[i][emFabrica] == 6)
							{
	                            new Vehicle = GetPlayerVehicleID(playerid);
							    new Trailer = GetVehicleTrailer(Vehicle);

							    if(VehicleInfo[Trailer][vCargaTipo] != 0) {
								    if((PontoEntrega[i][emFabrica] == 3 && VehicleInfo[Trailer][vCargaTipo] != 1) ||
										(PontoEntrega[i][emFabrica] == 6 && VehicleInfo[Trailer][vCargaTipo] != 2) ||
										VehicleInfo[Trailer][vCargaTipo] == 3)
											return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Seu trailer já está carregado com outro tipo produto.");
								}

								if(GetVehicleModel(GetVehicleTrailer(Vehicle)) == 584)
					   			{
									//if(PontoEntrega[i][nGasolina] > 0)
									//{
									    if(VehicleInfo[Trailer][vCargaGas] < 1000)
									    {
									        if(PontoEntrega[i][emFabrica] == 3){
											    SendClientMessage(playerid, COLOR_WHITE, "{00CDD8}[GASOLINA]{FFFFFF} segure {BC0000}'Y'{FFFFFF} para comprar gasolina ou aperte {BC0000}'H'{FFFFFF} para parar de comprar!");
	           									VehicleInfo[Trailer][vCargaTipo] = 1;
	           									PlayerInfo[playerid][pComprandoGas] = i;
											}
											else if(PontoEntrega[i][emFabrica] == 6){
                                                PontoEntrega[i][emStock] = PontoEntrega[i][emStock]-500;

                                                VehicleInfo[Trailer][vCargaGas] += 500;
					                			PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-PontoEntrega[i][emCobraProd];
	           									VehicleInfo[Trailer][vCargaTipo] = 2;
	           									SendClientMessage(playerid, COLOR_LIGHTGREEN, "Aguarde em quanto carregamos sua carga.");

	           									Atualizar_PontoEntrega(i);
 												SalvarPontoEntrega(i);

                                				SetTimerEx("DescongelarCarregando", 12000, false, "ii", playerid, PontoEntrega[i][emCobraProd]);
											}
						                    TogglePlayerControllable(playerid,0);

					                        if (IsValidDynamic3DTextLabel(VehicleInfo[Trailer][vTrailerInfo]))
							    				DestroyDynamic3DTextLabel(VehicleInfo[Trailer][vTrailerInfo]);

						                    format(StringBarco,sizeof(StringBarco), "%d/1000 litros.", VehicleInfo[Trailer][vCargaGas]);
						                    VehicleInfo[Trailer][vTrailerInfo] = CreateDynamic3DTextLabel(StringBarco, 0xFFFFFF80, 0.0, 0.0, 0.0, 15.0, INVALID_PLAYER_ID, Trailer, 1);

											for(new p = 0; p < MAX_PLAYERS; p++)
											{
											    if(IsPlayerConnected(p) && !IsPlayerNPC(p))
											    {
													if(IsPlayerInRangeOfPoint(p,6.0,PontoEntrega[i][emX],PontoEntrega[i][emY],PontoEntrega[i][emZ]))
													{
														Streamer_Update(p);
													}
												}
											}
											return 1;
										}
										else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O tanque já está cheio.");
									//}
								}
								else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar com uma carreta tanque.");
							}
							if(PontoEntrega[i][emFabrica] == 14) {
							    if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar dentro de um caminhão com carreta fechada.");

							    new Vehicle = GetPlayerVehicleID(playerid);
							    new Trailer = GetVehicleTrailer(Vehicle);

								if(temCaixa(Trailer)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este trailer já está carrega com alguma caixa.");
								if(VehicleInfo[Trailer][vCargaTipo] == 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem um transformador em sua carreta.");
								if(VehicleInfo[Trailer][vCargaTipo] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Seu trailer já está carregado com outro tipo produto.");

							    if(GetVehicleModel(GetVehicleTrailer(Vehicle)) == 435 || GetVehicleModel(GetVehicleTrailer(Vehicle)) == 591)
					   			{
					   			    if(PlayerInfo[playerid][pGrana] >= PontoEntrega[i][emCobraProd])
							    	{
							    	    VehicleInfo[Trailer][vCargaTipo] = 3;
							    	    PontoEntrega[i][emStock] = PontoEntrega[i][emStock]-1;
              							PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-PontoEntrega[i][emCobraProd];

										SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Industria] Você comprou um transformador.");

										Atualizar_PontoEntrega(i);
 										SalvarPontoEntrega(i);
							    	}
							    	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro o suficiente.");
					   			}
					   			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar com uma carreta fechada.");
							}
							if(PontoEntrega[i][emFabrica] == 15) {
							    if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar em um caminhão cegonha.");

							    new Vehicle = GetPlayerVehicleID(playerid);

							    if(VehicleInfo[Vehicle][vCargaTipo] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Seu caminhão já está carregado com outro tipo produto.");

							    if(GetVehicleModel(Vehicle) == 443)
					   			{
					   			    if(PlayerInfo[playerid][pGrana] >= PontoEntrega[i][emCobraProd])
							    	{
							    	    VehicleInfo[Vehicle][vCargaTipo] = 4;
							    	    PontoEntrega[i][emStock] = PontoEntrega[i][emStock]-4;
              							PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-PontoEntrega[i][emCobraProd];

										SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Industria] Você carregou seu caminhão com veículos.");

										Atualizar_PontoEntrega(i);
 										SalvarPontoEntrega(i);
							    	}
							    	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro o suficiente.");
					   			}
					   			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar com uma carreta fechada.");
							}
							if(PontoEntrega[i][emFabrica] == 1 || PontoEntrega[i][emFabrica] == 2 || PontoEntrega[i][emFabrica] == 4 || PontoEntrega[i][emFabrica] == 5
						 	|| PontoEntrega[i][emFabrica] == 6 || PontoEntrega[i][emFabrica] == 7 || PontoEntrega[i][emFabrica] == 8 || PontoEntrega[i][emFabrica] == 10
						 	|| PontoEntrega[i][emFabrica] == 11 || PontoEntrega[i][emFabrica] == 12 || PontoEntrega[i][emFabrica] == 13 || PontoEntrega[i][emFabrica] == 20
						    || PontoEntrega[i][emFabrica] == 21)
							{
							    if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar fora do veiculo.");
						    	if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já está carregando uma caixa.");
						    	if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa guardar sua arma antes.");

							    if(PlayerInfo[playerid][pGrana] >= PontoEntrega[i][emCobraProd])
							    {
							        for(new c = 1; c < MAX_CAIXAS; c++)
							        {
							            if(CaixaInfo[c][cTipo] == 0)
							            {
							                PontoEntrega[i][emStock] = PontoEntrega[i][emStock]-10;
					                		PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-PontoEntrega[i][emCobraProd];

							                SendClientMessage(playerid, COLOR_LIGHTGREEN, "[INDUSTRIA] Você comprou uma caixa!");

							                PlayerInfo[playerid][pLoadCrate] = c;
							                CaixaInfo[c][cID] = c;
							                CaixaInfo[c][cTipo] = PontoEntrega[i][emFabrica];
						    				SetPlayerAttachedObject(playerid, 0, 1271, 1, 0.038192, 0.451544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
						    				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

					    					Atualizar_PontoEntrega(i);
		  									SalvarPontoEntrega(i);
						    				return 1;
										}
									}
								}
								else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro o suficiente.");
							}
							if(PontoEntrega[i][emFabrica] == 9)
							{
	                            new Vehicle = GetPlayerVehicleID(playerid);
								if(GetVehicleModel(Vehicle) == 578)
					   			{
							    	if(VehicleInfo[Vehicle][vCargaGas] == 0)
								    {
										TogglePlayerControllable(playerid,0);
										VehicleInfo[Vehicle][vCargaGas] = 1;
									}
								}
								else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar em um DFT-30.");
							}
        					if(PontoEntrega[i][emFabrica] == 56)
							{
		                        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar em um veículo.");
		                        if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não é o motorista do veículo.");

		        				vehicleid = GetPlayerVehicleID(playerid);

					    		if(PlayerInfo[playerid][pGrana] >= PontoEntrega[i][emCobraProd])
							    {
		            				new MaxCarga = MaxPrensadosModelo(vehicleid);
						  			new tem_espaco = 0, tempspc = 0;
							  		if(MaxCarga == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Não há espaço neste veiculo para carregar mais um prensado!");
						    		for( new tpc = 0; tpc <= MaxCarga; tpc++)
							    	{
				        				if(CargaInfo[vehicleid][cSlot][tpc] != 0 && CargaInfo[vehicleid][cSlot][tpc] != 10056)
				     					{
              								tempspc = 1;
											break;
									   	}
									   	if(CargaInfo[vehicleid][cSlot][tpc] == 0)
										{
											tem_espaco = tpc;
											tempspc = 2;
											break;
										}
									}
						    		if(tempspc == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há mais espaço no veiculo!");
									else if(tempspc == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve retirar as caixas antes de comprar algum prensado!");
									else
							    	{
								  	    format(string, sizeof(string), "Você comprou um veículo prensado, ele foi posto em seu veículo! (i: %d)", tem_espaco);
							     		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
								       	CargaInfo[vehicleid][cSlot][tem_espaco] = 10056;

								       	PontoEntrega[i][emStock]--;
         								PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-PontoEntrega[i][emCobraProd];

										ObjetoPrensado(playerid,vehicleid,tem_espaco,1);

										Atualizar_PontoEntrega(i);
 										SalvarPontoEntrega(i);
								   	}
								}
							}
      					}
						else return SendClientMessage(playerid, COLOR_LIGHTRED, "Desculpe, estamos sem Stock no momento.");
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "Desculpe, mas estamso fechados agora, volte em outro horário.");
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "Nós não produzimos nada, apenas compramos!.");
			}
		}
		//=======================
	}
	else if(strcmp(option, "vender", true) == 0)
	{
        for(new i = 0; i < MAX_EMPRESAS; i++)
		{
		    new Float:distanceee = 3.0;
		    if(EmpInfo[i][eCompraTipo] == 15) distanceee = 15.0;

		    if(IsPlayerInRangeOfPoint(playerid, distanceee, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
	    	{
			    if(PlayerInfo[playerid][pLoadCrate] != -1)
				{
				    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa guardar sua arma antes.");
		    		if(OutrasInfos[playerid][oAlgemado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode realizar essa ação estando algemado.");
                    if(GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
			        {
					    if(EmpInfo[i][eCompraTipo] == CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cTipo])
					    {
				            if(EmpInfo[i][eReqProd] > 0)
				            {
					            if(EmpInfo[i][eProdutos] < 300)
					            {
					                if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar fora do veiculo.");
									if(EmpInfo[i][eBank] >= EmpInfo[i][ePagaProd])
									{
						            	EmpInfo[i][eProdutos]+=5;
						            	EmpInfo[i][eReqProd] = EmpInfo[i][eReqProd]-5;
					            		if(EmpInfo[i][eProdutos] > 300) EmpInfo[i][eProdutos] = 300;
					            		PlayerInfo[playerid][pGrana] += EmpInfo[i][ePagaProd];
					            		EmpInfo[i][eBank] -= EmpInfo[i][ePagaProd];

					            		SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Empresa] Obrigado pela entrega, ai está seu dinheiro.");
					            		CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cTipo] = 0;
										PlayerInfo[playerid][pLoadCrate] = -1;
			 							ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
										RemovePlayerAttachedObject(playerid, 0);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

										SalvarEmpresa(i);
						            	return 1;
									}
									else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Empresa] Desculpe, nós estamos sem dinheiro no cofre da empresa.");
								}
								else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Empresa] Desculpe, nós estamos com o stock cheio.");
							}
							else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Empresa] Desculpe, nós não estamos comprando no momento.");
						}
						else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Empresa] Desculpe, nós não compramos este tipo de carga no momento.");
					}
				}
				else if(EmpInfo[i][eCompraTipo] == 15){
    				if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar dentro de um caminhão cegonha.");
					new Vehicle = GetPlayerVehicleID(playerid);
			    	if(VehicleInfo[Vehicle][vCargaTipo] != 4) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Seu trailer não está carregado com veículos.");

					if(GetVehicleModel(Vehicle) == 443) {
					    if(GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt]) {
         					if(EmpInfo[i][eReqProd] > 0) {
		            			if(EmpInfo[i][eProdutos] < 300) {
									if(EmpInfo[i][eBank] >= EmpInfo[i][ePagaProd]) {
        								EmpInfo[i][eProdutos]+=4;
			            				EmpInfo[i][eReqProd] = EmpInfo[i][eReqProd]-4;
					            		if(EmpInfo[i][eProdutos] > 300) EmpInfo[i][eProdutos] = 300;
					            		PlayerInfo[playerid][pGrana] += EmpInfo[i][ePagaProd];
					            		EmpInfo[i][eBank] -= EmpInfo[i][ePagaProd];
                                        VehicleInfo[Vehicle][vCargaTipo] = 0;

										SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Empresa] Obrigado pela entrega, ai está seu dinheiro.");
										SalvarEmpresa(i);
							           	return 1;
									}
									else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Empresa] Desculpe, nós estamos sem dinheiro no cofre da empresa.");
								}
								else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Empresa] Desculpe, nós estamos com o stock cheio.");
							}
							else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Empresa] Desculpe, nós não estamos comprando no momento.");
						}
						else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Empresa] Desculpe, nós não compramos este tipo de carga no momento.");
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Industria] Desculpe, mas você não está com uma carreta fechada.");
				}
				else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está segurando uma caixa ou em um caminhão para entrega compatível.");
			}
		}
		for(new i = 0; i < MAX_EMPCARGA; i++)
		{
		    if(PlayerInfo[playerid][pLoadCrate] != -1)
			{
				if(IsPlayerInRangeOfPoint(playerid,3.0,PontoEntrega[i][emX],PontoEntrega[i][emY],PontoEntrega[i][emZ]))
				{
				    if(PontoEntrega[i][emCompra] == CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cTipo])
				    {
				    	if(PontoEntrega[i][emEmpresa] == 9999)
	       				{
						    if(PontoEntrega[i][emTipo] == 2 || PontoEntrega[i][emTipo] == 3)
						    {
						        if(PontoEntrega[i][emStatus] == 1)
	             				{
									if((PontoEntrega[i][emStockC]+10) <= PontoEntrega[i][emStockMaxC])
						        	{
						        	    new Vehicle = GetPlayerVehicleID(playerid);
							    		new Trailer = GetVehicleTrailer(Vehicle);

						                PontoEntrega[i][emStockC] = PontoEntrega[i][emStockC]+10;
						                PlayerInfo[playerid][pGrana] += PontoEntrega[i][emPagProd];
						                if(PontoEntrega[i][emStockC] > 300) PontoEntrega[i][emStock] = PontoEntrega[i][emStockMax];

						                VehicleInfo[Trailer][vCargaGas] += 500;
					                	VehicleInfo[Trailer][vCargaTipo] = 2;

						                SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Industria] Obrigado pela entrega, ai está seu dinheiro.");

						                CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cTipo] = 0;

										PlayerInfo[playerid][pLoadCrate] = -1;
			 							ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
										RemovePlayerAttachedObject(playerid, 0);
										SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

										Atualizar_PontoEntrega(i);
			  							SalvarPontoEntrega(i);
						                return 1;
						        	}
						        	else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Industria] Desculpe, nós estamos com o stock cheio.");
	       						}
								else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Industria] Desculpe, nós estamos fechados no momento.");
							}
							else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Industria] Desculpe, nós não compramos nenhum tipo de produto, apenas produzimos.");
						}
					}
				    else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Industria] Desculpe, nós não compramos este tipo de produto.");
				}
			}
			else
			{
				if(IsPlayerInRangeOfPoint(playerid, 10, PontoEntrega[i][emX],PontoEntrega[i][emY],PontoEntrega[i][emZ])) {
		    	    new TrailerR = GetVehicleTrailer(GetPlayerVehicleID(playerid));
		    	    if(PontoEntrega[i][emCompra] == 6 && VehicleInfo[TrailerR][vCargaTipo] == 2) {
						if(PontoEntrega[i][emStatus] == 1) {
							if((PontoEntrega[i][emStockC]+500) <= PontoEntrega[i][emStockMaxC]) {
							    VehicleInfo[TrailerR][vCargaGas] -= 500;
								if(VehicleInfo[TrailerR][vCargaGas] <= 0) VehicleInfo[TrailerR][vCargaTipo] = 0;

      						    PontoEntrega[i][emStockC] = PontoEntrega[i][emStockC]+500;
                				PlayerInfo[playerid][pGrana] += PontoEntrega[i][emPagProd];
				                if(PontoEntrega[i][emStockC] > PontoEntrega[i][emStockMax]) PontoEntrega[i][emStock] = PontoEntrega[i][emStockMax];
				                SendClientMessage(playerid, COLOR_LIGHTGREEN, "Obrigado pela entrega. Aguarde em quanto descarregamos sua carga.");

                                TogglePlayerControllable(playerid, 0);
                                SetTimerEx("DescongelarDescarregando", 12000, false, "ii", playerid, PontoEntrega[i][emPagProd]);

								Atualizar_PontoEntrega(i);
 								SalvarPontoEntrega(i);
         						return 1;
							}
							else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Industria] Desculpe, nós estamos com o stock cheio.");
						}
						else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Industria] Desculpe, nós não estamos trabalhando no momento.");
		    	    }
		    	    else if(PontoEntrega[i][emCompra] == 14) {
		    			if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar dentro de um caminhão com carreta fechada.");

						new Vehicle = GetPlayerVehicleID(playerid);
		    			new Trailer = GetVehicleTrailer(Vehicle);
					    if(VehicleInfo[Trailer][vCargaTipo] != 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Seu trailer não está carregado com um transformador.");

						if(GetVehicleModel(GetVehicleTrailer(Vehicle)) == 435 || GetVehicleModel(GetVehicleTrailer(Vehicle)) == 591) {
						    if(PontoEntrega[i][emStatus] == 1) {
								if((PontoEntrega[i][emStockC]+1) <= PontoEntrega[i][emStockMaxC]) {
		    						PlayerInfo[playerid][pGrana] += PontoEntrega[i][emPagProd];
			    	    			VehicleInfo[Trailer][vCargaTipo] = 0;
						    	    PontoEntrega[i][emStockC] = PontoEntrega[i][emStockC]+1;
									SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Industria] Você vendeu um transformador.");
									Atualizar_PontoEntrega(i);
 									SalvarPontoEntrega(i);
					    		}
							    else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Industria] Desculpe, nós estamos com o stock cheio.");
				   			}
				   			else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Industria] Desculpe, nós não estamos trabalhando no momento.");
						}
						else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Industria] Desculpe, mas você não está com uma carreta fechada.");
					}
					else if(PontoEntrega[i][emCompra] == 55) {
		 				if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está em um DFT.");
				 		if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não é o motorista do veículo.");
				 		new VehicleP = GetPlayerVehicleID(playerid);
	    				new m = GetVehicleModel(VehicleP);
   						if (m != 578) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está em um DFT.");

			   		   	new JaTemCarc = 0;
			   		   	for(new c = 0; c < MAX_CARCACAS; c++)
						{
				    		if(Carcaca[c] != -1)
							{
					    		if(CarcacaCar[c] == VehicleP)
					    		{
		   				   			JaTemCarc = c+1;
					    		    break;
				    			}
							}
						}
						if(JaTemCarc == 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Não há nenhuma Carcaça em seu DFT.");
      					if(PontoEntrega[i][emStatus] == 1)
       					{
							if((PontoEntrega[i][emStockC]+1) <= PontoEntrega[i][emStockMaxC])
      						{
      						    PontoEntrega[i][emStockC] = PontoEntrega[i][emStockC]+1;
                				PlayerInfo[playerid][pGrana] += PontoEntrega[i][emPagProd];
				                if(PontoEntrega[i][emStockC] > 300) PontoEntrega[i][emStock] = PontoEntrega[i][emStockMax];
				                SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Industria] Obrigado pela entrega, ai está seu dinheiro.");

                                if(IsValidDynamicObject(Carcaca[JaTemCarc-1])) DestroyDynamicObject(Carcaca[JaTemCarc-1]);
                                CarcacaCar[JaTemCarc-1] = 0;

								Atualizar_PontoEntrega(i);
 								SalvarPontoEntrega(i);
         						return 1;
							}
							else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Industria] Desculpe, nós estamos com o stock cheio.");
						}
						else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Industria] Desculpe, nós não estamos trabalhando no momento.");
					}
				    if(PontoEntrega[i][emCompra] == 56)
				    {
				        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está em um veículo.");
	 					if(GetPlayerState(playerid) != 2) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não é o motorista do veículo.");
				 		vehicleid = GetPlayerVehicleID(playerid);

                        new MaxCarga = MaxPrensadosModelo(vehicleid);
						new temprensado = 99;
			    		for( new tpr = 0; tpr <= MaxCarga; tpr++)
					    {
	        				if(CargaInfo[vehicleid][cSlot][tpr] == 10056)
	     					{
    			    			temprensado = tpr;
		     			    	break;
							}
		  				}
			    		if(temprensado == 99) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhum prensado no veiculo!");
				    	else
				    	{
				    	    if(PontoEntrega[i][emTipo] == 2)
						    {
                                if(PontoEntrega[i][emStatus] == 1)
	             				{
                                    if((PontoEntrega[i][emStockC]+1) <= PontoEntrega[i][emStockMaxC])
						        	{
                                        PontoEntrega[i][emStockC] = PontoEntrega[i][emStockC]+1;
                                        PlayerInfo[playerid][pGrana] += PontoEntrega[i][emPagProd];

                                        if(PontoEntrega[i][emStockC] > 300) PontoEntrega[i][emStock] = PontoEntrega[i][emStockMax];
                                        SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Industria] Obrigado pela entrega, ai está seu dinheiro.");
                                        CargaInfo[vehicleid][cSlot][temprensado] = 0;

                                        Atualizar_PontoEntrega(i);
			  							SalvarPontoEntrega(i);

										ObjetoPrensado(playerid,vehicleid,temprensado,0);

										return 1;
						        	}
						        	else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Industria] Desculpe, nós estamos com o stock cheio.");
	       						}
								else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Industria] Desculpe, nós estamos fechados no momento.");
							}
							else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Industria] Desculpe, nós não compramos nenhum tipo de produto, apenas produzimos.");
						}
					}
				    else return SendClientMessage(playerid, COLOR_LIGHTRED, "[Industria] Desculpe, nós não compramos este tipo de produto.");
				}
			}
		}
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está segurando uma caixa.");
	}
	else if(strcmp(option, "colocar", true) == 0)
	{
	    if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar fora do veiculo.");
	    if(PlayerInfo[playerid][pLoadCrate] == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está carregando uma caixa.");

        if(!PlayerToCar(playerid,1,4.0)) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF}  Você não está próximo de nenhum veículo.");
		vehicleid = PlayerToCar(playerid,2,4.0);

		GetVehicleParamsEx(vehicleid, engine, lights, alarm,doors,bonnet,boot,objective);
		if(boot != 0)
		{
	  		new MaxCarga = MaxCargaModelo(vehicleid);
  			new tem_espaco = 0, tempspc = 0;
	  		if(MaxCarga == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há espaço neste veiculo para carregar uma caixa!");
	    	for( new i = 0; i < MaxCarga; i++)
		    {
    			if(CargaInfo[vehicleid][cSlot][i] == 0)
     			{
					tem_espaco = i;
					tempspc = 1;
					break;
				}
	  		}
	    	if(tempspc == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há mais espaço no veiculo!");
	    	else
	    	{
	    	    format(string, sizeof(string), "Você colocou a caixa no veículo!");
	       		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	          	CargaInfo[vehicleid][cSlot][tem_espaco] = PlayerInfo[playerid][pLoadCrate];

				PlayerInfo[playerid][pLoadCrate] = -1;
				ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

				RemovePlayerAttachedObject(playerid, 0);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				ObjetoCaixa(playerid,vehicleid,tem_espaco,1);
	    	}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O portamalas deste veículo está fechado.");
	}
	else if(strcmp(option, "dropar", true) == 0)
	{
	    if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar fora do veiculo.");
	    if(PlayerInfo[playerid][pLoadCrate] == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está carregando uma caixa.");

		new Float:X,Float:Y,Float:Z,Float:A;
  		GetPlayerPos(playerid, X, Y, Z);
   		GetPlayerFacingAngle(playerid,A);

		X = X-1;
		Z = Z-0.65;
		format(string, sizeof(string), "Você largou a caixa!"); SendClientMessage(playerid, COLOR_WHITE, string);

  		ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

  		new objid;
  		if(CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cTipo] == 56) objid = 19772;
  		else objid = 1271;

    	CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cObj] = CreateDynamicObject(objid, X,Y,Z,   0.00000, 0.00000, A);
    	CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cPosX] = X;
    	CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cPosY] = Y;
    	CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cPosZ] = Z;

    	new Tipp = CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cTipo];
    	format(StringBarco,sizeof(StringBarco), "%s", GetCargaTipo(Tipp));
    	CaixaInfo[PlayerInfo[playerid][pLoadCrate]][TextTipo] = CreateDynamic3DTextLabel(StringBarco, 0xFFFFFFFF, X, Y, Z+0.6, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

		RemovePlayerAttachedObject(playerid, 0);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		PlayerInfo[playerid][pLoadCrate] = -1;
        return 1;
	}
	else if(strcmp(option, "pegar", true) == 0)
	{
	    if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar fora do veiculo.");
	    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já está carregando uma caixa.");
	    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa guardar sua arma antes.");

    	for(new c = 1; c < MAX_CAIXAS; c++)
     	{
     	    if(IsPlayerInRangeOfPoint(playerid,3.0,CaixaInfo[c][cPosX], CaixaInfo[c][cPosY], CaixaInfo[c][cPosZ]) && CaixaInfo[c][cTipo] != 0)
			{
			    new objid;
  				if(CaixaInfo[c][cTipo] == 56) objid = 19772;
  				else objid = 1271;

                format(string, sizeof(string), "Você pegou a caixa!"); SendClientMessage(playerid, COLOR_WHITE, string);

		        PlayerInfo[playerid][pLoadCrate] = c;
				SetPlayerAttachedObject(playerid, 0, objid, 1, 0.038192, 0.471544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

		    	CaixaInfo[c][cPosX] = 0;
		    	CaixaInfo[c][cPosY] = 0;
		    	CaixaInfo[c][cPosZ] = -100;
		    	if(IsValidDynamicObject(CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cObj])) DestroyDynamicObject(CaixaInfo[PlayerInfo[playerid][pLoadCrate]][cObj]);
		    	if (IsValidDynamic3DTextLabel(CaixaInfo[PlayerInfo[playerid][pLoadCrate]][TextTipo])) DestroyDynamic3DTextLabel(CaixaInfo[PlayerInfo[playerid][pLoadCrate]][TextTipo]);
		    	return 1;
			}
		}
	}
	return 1;
}

forward DescongelarDescarregando(playerid, valor);
public DescongelarDescarregando(playerid, valor){
	format(string, sizeof string, "Carga descarregada, você recebeu R$%d.",valor);
	SCM(playerid, COLOR_LIGHTGREEN, string);
    TogglePlayerControllable(playerid, 1);
	return 1;
}

forward DescongelarCarregando(playerid, valor);
public DescongelarCarregando(playerid, valor){
    format(string, sizeof string, "Carga carregada, você pagou R$%d.", valor);
    SCM(playerid, COLOR_LIGHTGREEN, string);
    TogglePlayerControllable(playerid, 1);
	return 1;
}

stock PlayerProxPorto(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,200,2784.2373, -2393.1516, 12.6437) || IsPlayerInRangeOfPoint(playerid,200,2789.9856, -2524.5674, 12.6307)) return true;
    else return false;
}
stock MaxCargaModelo(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 400: return 1;
		case 404: return 2;
		case 413: return 6;
		case 414: return 36;
		case 418: return 4;
		case 422: return 3;
		case 440: return 12;
		case 435: return 100; // Trailer
		case 455: return 18;
		case 456: return 45;
		case 458: return 2;
		case 459: return 12;
		case 478: return 6;
		case 479: return 1;
		case 482: return 12;
		case 489: return 2;
		case 499: return 17;
		case 505: return 2;
		case 543: return 3;
		case 554: return 3;
		case 579: return 2;
		case 591: return 90; // Trailer
		case 498: return 36; // BoxVille
		case 600: return 2;
		case 609: return 36; // BoxVille
	}
	return 0;
}

stock ObjetoCaixa(playerid,vehicleid,slot,tipo)
{
    new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	if(tipo == 1)
	{
	    if(GetVehicleModel(vehicleid) == 435 || GetVehicleModel(vehicleid) == 609 || GetVehicleModel(vehicleid) == 498 || GetVehicleModel(vehicleid) == 591) return 1;

	    new objid = 1271;

	    AttachedObjects[vehicleid][slot] = CreateDynamicObject(objid, X+2,Y+2,Z,   0.00000, 0.00000, 0.0);
    	switch(GetVehicleModel(vehicleid))
		{
	    	case 400:
			{
				if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.330567, -1.582483, 0.110780, 0.0, 0.0, 0.000000);
			}
			case 404:
			{
 	 			if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.395408, -1.768590, 0.281455, 0.0, 0.0, 0.000000);
			    if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.364626, -1.719580, 0.225226, 0.0, 0.0, 0.000000);
			}
			case 413:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.251775, 0.063898, 0.091011, 0.0, 0.0, 0.000000);
				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.441969, 0.008670, 0.120939, 0.0, 0.0, 0.000000);
				if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.442396, -0.744394, 0.100961, 0.0, 0.0, 0.000000);
				if(slot == 3) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.256497, -0.734594, 0.100944, 0.0, 0.0, 0.000000);
				if(slot == 4) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.431806, -1.633274, 0.111114, 0.0, 0.0, 0.000000);
				if(slot == 5) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.252982, -1.583714, 0.130916, 0.0, 0.0, 0.000000);
			}
			case 414:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.679199, 0.085978, 0.216421, 0.0, 0.0, 0.000000);
				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.024644, 0.081718, 0.216330, 0.0, 0.0, 0.000000);
				if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.671195, 0.069028, 0.226190, 0.0, 0.0, 0.000000);
				if(slot == 3) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.691670, 0.093023, 0.826287, 0.0, 0.0, 0.000000);
				if(slot == 4) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.007256, 0.062723, 0.846331, 0.0, 0.0, 0.000000);
				if(slot == 5) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.663549, 0.096595, 0.836346, 0.0, 0.0, 0.000000);
				if(slot == 6) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.703935, 0.113497, 1.456335, 0.0, 0.0, 0.000000);
				if(slot == 7) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.008788, 0.086401, 1.446352, 0.0, 0.0, 0.000000);
				if(slot == 8) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.673429, 0.055851, 1.446366, 0.0, 0.0, 0.000000);
				if(slot == 9) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.673247, -0.640814, 0.226325, 0.0, 0.0, 0.000000);
				if(slot == 10) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.024644, -0.640814, 0.216330, 0.0, 0.0, 0.000000);
				if(slot == 11) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.671195, -0.640814, 0.226190, 0.0, 0.0, 0.000000);
				if(slot == 12) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.691670, -0.640814, 0.826287, 0.0, 0.0, 0.000000);
				if(slot == 13) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.007256, -0.640814, 0.846331, 0.0, 0.0, 0.000000);
				if(slot == 14) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.663549, -0.640814, 0.836346, 0.0, 0.0, 0.000000);
				if(slot == 15) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.703935, -0.640814, 1.456335, 0.0, 0.0, 0.000000);
				if(slot == 16) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.008788, -0.640814, 1.446352, 0.0, 0.0, 0.000000);
				if(slot == 17) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.673429, -0.640814, 1.446366, 0.0, 0.0, 0.000000);
				if(slot == 18) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.691428, -1.380614, 0.206242, 0.0, 0.0, 0.000000);
                if(slot == 19) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.024644, -1.380614, 0.216330, 0.0, 0.0, 0.000000);
				if(slot == 20) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.671195, -1.380614, 0.226190, 0.0, 0.0, 0.000000);
				if(slot == 21) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.691670, -1.380614, 0.826287, 0.0, 0.0, 0.000000);
				if(slot == 22) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.007256, -1.380614, 0.846331, 0.0, 0.0, 0.000000);
				if(slot == 23) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.663549, -1.380614, 0.836346, 0.0, 0.0, 0.000000);
				if(slot == 24) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.703935, -1.380614, 1.456335, 0.0, 0.0, 0.000000);
				if(slot == 25) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.008788, -1.380614, 1.446352, 0.0, 0.0, 0.000000);
				if(slot == 26) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.673429, -1.380614, 1.446366, 0.0, 0.0, 0.000000);
				if(slot == 27) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.670893, -2.170598, 0.216277, 0.0, 0.0, 0.000000);
                if(slot == 28) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.024644, -2.170598, 0.216330, 0.0, 0.0, 0.000000);
				if(slot == 29) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.671195, -2.170598, 0.226190, 0.0, 0.0, 0.000000);
				if(slot == 30) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.691670, -2.170598, 0.826287, 0.0, 0.0, 0.000000);
				if(slot == 31) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.007256, -2.170598, 0.846331, 0.0, 0.0, 0.000000);
				if(slot == 32) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.663549, -2.170598, 0.836346, 0.0, 0.0, 0.000000);
				if(slot == 33) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.703935, -2.170598, 1.456335, 0.0, 0.0, 0.000000);
				if(slot == 34) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.008788, -2.170598, 1.446352, 0.0, 0.0, 0.000000);
				if(slot == 35) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.673429, -2.170598, 1.446366, 0.0, 0.0, 0.000000);
			}
			case 418:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.364121, -1.659498, -0.135794, 0.0, 0.0, 0.000000);
			    if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.389681, -1.671486, -0.116212, 0.0, 0.0, 0.000000);
			    if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.365472, -1.677082, 0.484029, 0.0, 0.0, 0.000000);
			    if(slot == 3) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.384481, -1.688238, 0.473966, 0.0, 0.0, 0.000000);
			}
			case 422:
			{
   				if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.465532, -0.751864, 0.036571, 0.0, 0.0, 0.000000);
   				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.362162, -0.768332, 0.046339, 0.0, 0.0, 0.000000);
   				if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.157812, -1.499390, 0.066222, 0.0, 0.0, 0.000000);
			}
			case 440:
			{
   				if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.431068, -0.034254, -0.102347, 0.0, 0.0, 0.000000);
   				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.422899, -0.017825, -0.112264, 0.0, 0.0, 0.000000);
   				if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.429013, -0.769438, -0.112491, 0.0, 0.0, 0.000000);
   				if(slot == 3) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.419556, -0.765575, -0.102498, 0.0, 0.0, 0.000000);
   				if(slot == 4) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.431219, -1.503689, -0.122579, 0.0, 0.0, 0.000000);
   				if(slot == 5) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.411713, -1.531227, -0.102511, 0.0, 0.0, 0.000000);
   				if(slot == 6) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.431068, -0.034254, 0.567580, 0.0, 0.0, 0.000000);
   				if(slot == 7) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.422899, -0.017825, 0.567580, 0.0, 0.0, 0.000000);
   				if(slot == 8) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.429013, -0.769438, 0.567580, 0.0, 0.0, 0.000000);
   				if(slot == 9) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.419556, -0.765575, 0.567580, 0.0, 0.0, 0.000000);
   				if(slot == 10) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.431219, -1.503689, 0.567580, 0.0, 0.0, 0.000000);
   				if(slot == 11) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.411713, -1.531227, 0.567580, 0.0, 0.0, 0.000000);
			}
			case 455:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.987683, 0.071777, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.969044, -0.756112, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.934593, -1.686459, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 3) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.839214, -2.501152, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 4) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.855240, -3.329748, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 5) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.796456, -4.164071, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 6) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.129135, 0.010733, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 7) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.129135, -0.756112, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 8) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.129135, -1.686459, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 9) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.129135, -2.501152, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 10) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.129135, -3.329748, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 11) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.129135, -4.164071, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 12) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.812106, -0.020641, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 13) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.812106, -0.756112, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 14) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.812106, -1.686459, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 15) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.812106, -2.501152, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 16) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.812106, -3.329748, 0.428395, 0.0, 0.0, 0.000000);
				if(slot == 17) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.812106, -4.164071, 0.428395, 0.0, 0.0, 0.000000);
			}
			case 456:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.876394, -0.099226, 0.365057, 0.0, 0.0, 0.000000);
				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.193653, -0.099226, 0.365056, 0.0, 0.0, 0.000000);
				if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.491973, -0.099226, 0.365260, 0.0, 0.0, 0.000000);
				if(slot == 3) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.875481, -0.099226, 0.995056, 0.0, 0.0, 0.000000);
				if(slot == 4) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.183579, -0.099226, 0.995100, 0.0, 0.0, 0.000000);
				if(slot == 5) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.494024, -0.099226, 0.985159, 0.0, 0.0, 0.000000);
				if(slot == 6) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.878075, -0.099226, 1.665120, 0.0, 0.0, 0.000000);
				if(slot == 7) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.167827, -0.099226, 1.655010, 0.0, 0.0, 0.000000);
				if(slot == 8) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.498528, -0.099226, 1.655119, 0.0, 0.0, 0.000000);
			    if(slot == 9) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.876394, -0.850138, 0.365057, 0.0, 0.0, 0.000000);
				if(slot == 10) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.193653, -0.850138, 0.365056, 0.0, 0.0, 0.000000);
				if(slot == 11) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.491973, -0.850138, 0.365260, 0.0, 0.0, 0.000000);
				if(slot == 12) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.875481, -0.850138, 0.995056, 0.0, 0.0, 0.000000);
				if(slot == 13) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.183579, -0.850138, 0.995100, 0.0, 0.0, 0.000000);
				if(slot == 14) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.494024, -0.850138, 0.985159, 0.0, 0.0, 0.000000);
				if(slot == 15) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.878075, -0.850138, 1.665120, 0.0, 0.0, 0.000000);
				if(slot == 16) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.167827, -0.850138, 1.655010, 0.0, 0.0, 0.000000);
				if(slot == 17) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.498528, -0.850138, 1.655119, 0.0, 0.0, 0.000000);
				if(slot == 18) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.876394, -1.688912, 0.365057, 0.0, 0.0, 0.000000);
				if(slot == 19) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.193653, -1.688912, 0.365056, 0.0, 0.0, 0.000000);
				if(slot == 20) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.491973, -1.688912, 0.365260, 0.0, 0.0, 0.000000);
				if(slot == 21) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.875481, -1.688912, 0.995056, 0.0, 0.0, 0.000000);
				if(slot == 22) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.183579, -1.688912, 0.995100, 0.0, 0.0, 0.000000);
				if(slot == 23) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.494024, -1.688912, 0.985159, 0.0, 0.0, 0.000000);
				if(slot == 24) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.878075, -1.688912, 1.665120, 0.0, 0.0, 0.000000);
				if(slot == 25) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.167827, -1.688912, 1.655010, 0.0, 0.0, 0.000000);
				if(slot == 26) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.498528, -1.688912, 1.655119, 0.0, 0.0, 0.000000);
				if(slot == 27) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.876394, -2.798295, 0.365057, 0.0, 0.0, 0.000000);
				if(slot == 28) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.193653, -2.798295, 0.365056, 0.0, 0.0, 0.000000);
				if(slot == 29) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.491973, -2.798295, 0.365260, 0.0, 0.0, 0.000000);
				if(slot == 30) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.875481, -2.798295, 0.995056, 0.0, 0.0, 0.000000);
				if(slot == 31) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.183579, -2.798295, 0.995100, 0.0, 0.0, 0.000000);
				if(slot == 32) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.494024, -2.798295, 0.985159, 0.0, 0.0, 0.000000);
				if(slot == 33) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.878075, -2.798295, 1.665120, 0.0, 0.0, 0.000000);
				if(slot == 34) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.167827, -2.798295, 1.655010, 0.0, 0.0, 0.000000);
				if(slot == 35) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.498528, -2.798295, 1.655119, 0.0, 0.0, 0.000000);
				if(slot == 36) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.876394, -3.594952, 0.365057, 0.0, 0.0, 0.000000);
				if(slot == 37) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.193653, -3.594952, 0.365056, 0.0, 0.0, 0.000000);
				if(slot == 38) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.491973, -3.594952, 0.365260, 0.0, 0.0, 0.000000);
				if(slot == 39) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.875481, -3.594952, 0.995056, 0.0, 0.0, 0.000000);
				if(slot == 40) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.183579, -3.594952, 0.995100, 0.0, 0.0, 0.000000);
				if(slot == 41) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.494024, -3.594952, 0.985159, 0.0, 0.0, 0.000000);
				if(slot == 42) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.878075, -3.594952, 1.665120, 0.0, 0.0, 0.000000);
				if(slot == 43) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.167827, -3.594952, 1.655010, 0.0, 0.0, 0.000000);
				if(slot == 44) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.498528, -3.594952, 1.655119, 0.0, 0.0, 0.000000);
			}
			case 458:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.442161, -1.827712, 0.077290, 0.0, 0.0, 0.000000);
				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.305413, -1.825544, 0.076663, 0.0, 0.0, 0.000000);
			}
			case 459:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.473492, 0.016190, -0.037268, 0.0, 0.0, 0.000000);
				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.301095, 0.006027, -0.037445, 0.0, 0.0, 0.000000);
				if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.472810, 0.066229, 0.612573, 0.0, 0.0, 0.000000);
				if(slot == 3) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.282827, -0.015603, 0.602686, 0.0, 0.0, 0.000000);
				if(slot == 4) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.266709, -0.774767, -0.037477, 0.0, 0.0, 0.000000);
				if(slot == 5) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.475951, -0.716096, -0.037401, 0.0, 0.0, 0.000000);
				if(slot == 6) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.456183, -0.694829, 0.602507, 0.0, 0.0, 0.000000);
				if(slot == 7) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.243053, -0.758631, 0.622241, 0.0, 0.0, 0.000000);
				if(slot == 8) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.254379, -1.509111, -0.037631, 0.0, 0.0, 0.000000);
				if(slot == 9) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.479937, -1.526179, -0.037765, 0.0, 0.0, 0.000000);
				if(slot == 10) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.475699, -1.547382, 0.632419, 0.0, 0.0, 0.000000);
				if(slot == 11) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.246834, -1.506807, 0.652247, 0.0, 0.0, 0.000000);
			}
			case 478:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.635721, -0.889648, 0.312452, 0.0, 0.0, 0.000000);
				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.060304, -0.902903, 0.292652, 0.0, 0.0, 0.000000);
				if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.640018, -0.935377, 0.282236, 0.0, 0.0, 0.000000);
				if(slot == 3) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.651258, -1.633273, 0.242272, 0.0, 0.0, 0.000000);
				if(slot == 4) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.011780, -1.637450, 0.272234, 0.0, 0.0, 0.000000);
				if(slot == 5) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.636104, -1.603235, 0.282255, 0.0, 0.0, 0.000000);
			}
			case 479:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.264323, -1.868540, 0.163262, 0.0, 0.0, 0.000000);
			}
			case 482:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.256841, -0.202099, -0.166551, 0.0, 0.0, 0.000000);
			    if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.472997, -0.204055, -0.178661, 0.0, 0.0, 0.000000);
			    if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.253089, -0.184005, 0.495959, 0.0, 0.0, 0.000000);
			    if(slot == 3) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.397130, -0.211282, 0.487703, 0.0, 0.0, 0.000000);
			    if(slot == 4) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.322529, -0.875532, -0.172117, 0.0, 0.0, 0.000000);
			    if(slot == 5) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.435719, -0.862488, -0.173952, 0.0, 0.0, 0.000000);
			    if(slot == 6) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.325300, -0.847086, 0.476878, 0.0, 0.0, 0.000000);
			    if(slot == 7) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.419477, -0.876477, 0.442481, 0.0, 0.0, 0.000000);
			    if(slot == 8) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.309200, -1.626669, -0.164218, 0.0, 0.0, 0.000000);
			    if(slot == 9) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.417781, -1.668679, -0.177547, 0.0, 0.0, 0.000000);
			    if(slot == 10) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.310136, -1.611806, 0.487974, 0.0, 0.0, 0.000000);
			    if(slot == 11) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.397359, -1.639632, 0.509901, 0.0, 0.0, 0.000000);
			}
			case 489:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.307601, -1.135699, 0.168763, 0.0, 0.0, 0.000000);
			    if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.315899, -1.875676, 0.158765, 0.0, 0.0, 0.000000);
			}
			case 499:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.611002, -0.072998, 1.371789, 0.0, 0.0, 0.000000);
				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.557465, -0.142360, 1.371788, 0.0, 0.0, 0.000000);

				if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.629780, -0.867819, 0.241791, 0.0, 0.0, 0.000000);
				if(slot == 3) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.648602, -0.898854, 0.241790, 0.0, 0.0, 0.000000);
				if(slot == 4) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.622310, -0.910906, 0.921791, 0.0, 0.0, 0.000000);

				if(slot == 5) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.652477, -0.862089, 1.491786, 0.0, 0.0, 0.000000);
				if(slot == 6) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.659501, -0.887051, 0.921792, 0.0, 0.0, 0.000000);
				if(slot == 7) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.627881, -0.833650, 1.521787, 0.0, 0.0, 0.000000);

				if(slot == 8) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.250228, -1.674361, 0.251787, 0.0, 0.0, 0.000000);
				if(slot == 9) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.271461, -1.649219, 0.901795, 0.0, 0.0, 0.000000);
				if(slot == 10) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.274579, -1.619106, 1.521787, 0.0, 0.0, 0.000000);

				if(slot == 11) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.615066, -2.894528, 0.271791, 0.0, 0.0, 0.000000);
				if(slot == 12) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.632103, -2.851967, 0.941792, 0.0, 0.0, 0.000000);
				if(slot == 13) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.640770, -2.831563, 1.521787, 0.0, 0.0, 0.000000);

				if(slot == 14) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.533224, -2.853460, 0.231787, 0.0, 0.0, 0.000000);
				if(slot == 15) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.515016, -2.881779, 0.886487, 0.0, 0.0, 0.000000);
				if(slot == 16) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.501813, -2.849353, 1.521787, 0.0, 0.0, 0.000000);
			}
			case 505:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.307601, -1.135699, 0.168763, 0.0, 0.0, 0.000000);
			    if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.315899, -1.875676, 0.158765, 0.0, 0.0, 0.000000);
			}
			case 543:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.559879, -0.921033, 0.126113, 0.0, 0.0, 0.000000);
				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.237588, -1.010514, 0.126113, 0.0, 0.0, 0.000000);
				if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.136691, -1.783895, 0.126113, 0.0, 0.0, 0.000000);
			}
			case 554:
			{
				if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.406143, -1.018809, 0.108724, 0.0, 0.0, 0.000000);
				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.274766, -1.038504, 0.088602, 0.0, 0.0, 0.000000);
				if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.175853, -1.743971, 0.028501, 0.0, 0.0, 0.000000);
			}
			case 579:
			{
				if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.140517, -1.943807, 0.292191, 0.0, 0.0, 0.000000);
				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.579529, -2.048031, 0.471959, 0.0, 0.0, 0.000000);
			}
			case 600:
			{
				if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.297193, -0.923923, 0.220259, 0.0, 0.0, 0.000000);
				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.303188, -1.644153, 0.172026, 0.0, 0.0, 0.000000);
				if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.470364, -1.264831, 0.396858, 0.0, 0.0, 0.000000);
			}
		}
	}
	else
	{
		if(IsValidDynamicObject(AttachedObjects[vehicleid][slot])) DestroyDynamicObject(AttachedObjects[vehicleid][slot]);
	}
	Streamer_Update(playerid);
	return 1;
}

stock MaxPrensadosModelo(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 413: return 1;
		case 414: return 7;
		case 422: return 1;
		case 440: return 1;
		case 455: return 5;
		case 456: return 11;
		case 459: return 1;
		case 478: return 1;
		case 482: return 1;
		case 499: return 1;
		case 543: return 1;
		case 554: return 1;
		case 600: return 1;
	}
	return 0;
}

stock ObjetoPrensado(playerid,vehicleid,slot,tipo)
{
    new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	if(tipo == 1)
	{
	    new objid = 19772;

	    AttachedObjects[vehicleid][slot] = CreateDynamicObject(objid, X+2,Y+2,Z,   0.00000, 0.00000, 0.0);
    	switch(GetVehicleModel(vehicleid))
		{
			case 413:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.014123, -1.069645, 0.275185, 0.0, 0.0, -357.053314);
			}
			case 414:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.512832, -0.625710, 0.430100, 0.000000, 0.000000, -360.338775);
				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.469725,-2.351036,0.470135,0.000000,0.000000,-359.338775);
				if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.537769,-0.646424,0.459568,0.000000,0.000000,-359.338775);
				if(slot == 3) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.484989,-2.314015,0.428738,0.000000,0.000000,-359.338775);
				if(slot == 4) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.416731,-0.426956,1.589428,0.000000,0.000000,-359.338775);
				if(slot == 5) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.470626,-2.336397,1.589513,0.000000,0.000000,-359.338775);
				if(slot == 6) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.506400,-0.530568,1.598008,0.000000, 0.000000,-359.338775);
				if(slot == 7) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.520976,-2.280028,1.578147,0.000000, 0.000000,-359.338775);
			}
			case 422:
			{
   				if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.009614, -1.508283, 0.278454, 0.000000, 0.000000, -359.875885);
			}
			case 440:
			{
   				if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.007568, -1.500854, 0.214119, 0.0, 0.0, -0.000000);
			}
			case 455:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.752731, -0.382909, 0.672734, 0.000000, 0.000000, -180.225128);
				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.788161, -1.881805, 0.682728, 0.000000, 0.000000, -180.225128);
				if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.801859, -3.628224, 0.672724, 0.000000, 0.000000, -180.225128);
				if(slot == 3) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.793317, -0.285712, 0.672732, 0.000000, 0.000000, -180.225128);
				if(slot == 4) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.777411, -1.848283, 0.652734, 0.000000, 0.000000, -180.225128);
				if(slot == 5) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.823351, -3.515347, 0.622724, 0.000000, 0.000000, -180.225128);
			}
			case 456:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.694801, -0.306114, 0.586551, 0.000000, 0.000000, -358.292724);
				if(slot == 1) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.670751, -2.104536, 0.535306, 0.000000, 0.000000, -358.292724);
				if(slot == 2) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.761961, -3.576046, 0.593679, 0.000000, 0.000000, -358.292724);
				if(slot == 3) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.694801, -0.306114, 0.586551, 0.000000, 0.000000, -358.292724);
				if(slot == 4) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.670751, -2.104536, 0.535306, 0.000000, 0.000000, -358.292724);
				if(slot == 5) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.761961, -3.576046, 0.593679, 0.000000, 0.000000, -358.292724);
			 	if(slot == 6) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.694801, -0.306114, 1.733993, 0.000000, 0.000000, -358.292724);
				if(slot == 7) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.670751, -2.104536, 1.733993, 0.000000, 0.000000, -358.292724);
				if(slot == 8) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.761961, -3.576046, 1.733993, 0.000000, 0.000000, -358.292724);
				if(slot == 9) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.694801, -0.306114, 1.733993, 0.000000, 0.000000, -358.292724);
				if(slot == 10) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.670751, -2.104536, 1.733993, 0.000000, 0.000000, -358.292724);
				if(slot == 11) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.761961, -3.576046, 1.733993, 0.000000, 0.000000, -358.292724);
			}
			case 459:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.023540, -1.498429, 0.313941, 0.0, 0.0, -0.985778);
			}
			case 478:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.194588, -1.426512, 0.531679, 0.000000, 0.000000, 7.399657);
			}
			case 482:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.030386, -1.038592, 0.262322, 0.000000, 0.000000, -0.034187);
			}
			case 499:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.006132, -1.372995, 0.459848, 0.000000, 0.000000, -358.003753);
			}
			case 543:
			{
			    if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.030517, -1.476196, 0.370860, 0.000000, 0.000000, -360.000000);
			}
			case 554:
			{
				if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, 0.089620, -1.440348, 0.344033, 0.000000, 0.000000, -0.251726);
			}
			case 600:
			{
				if(slot == 0) AttachDynamicObjectToVehicle(AttachedObjects[vehicleid][slot], vehicleid, -0.005603, -1.353881, 0.428314, 0.000000, 0.000000, -359.999511);
			}
		}
	}
	else
	{
		if(IsValidDynamicObject(AttachedObjects[vehicleid][slot])) DestroyDynamicObject(AttachedObjects[vehicleid][slot]);
	}
	Streamer_Update(playerid);
	return 1;
}

CMD:ajudacasa(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_BRANCO, "*** AJUDA CASA ***");
    SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA CASA *** /comprar /vender /entrar /sair /casas /sacar /depositar");
    SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA CASA *** /permitdos /darpermissao /mobilia /alarmecasa /curar");
    SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA CASA ***  /trancar /bater /xmradio /interruptor");
    SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FURNITURE *** Caso suma algum móvel da casa, use: /reloadint");

	return 1;
}

CMD:ajudagaragem(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_BRANCO, "*** AJUDA GARAGEM ***");
    SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA GARAGEM *** /comprar /vender /entrar /sair /garagens");
    SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA GARAGEM *** /permitdos /darpermissao /mobilia /alarmegaragem");
    SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA GARAGEM *** /trancar /bater /xmradio /interruptor");
    SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FURNITURE *** Caso suma algum móvel da casa, use: /reloadint");

	return 1;
}

CMD:interruptor(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está logado.");

	new casaid = -1, garagem = -1;

	if(PlayerInfo[playerid][pEntrouCasa] != -1) casaid = PlayerInfo[playerid][pEntrouCasa];
	else if(PlayerInfo[playerid][pEntrouGaragem] != -1) garagem = PlayerInfo[playerid][pEntrouGaragem];


	if(casaid != -1)
	{
	    new location[MAX_ZONE_NAME], strrs[256];
		Get2DZone(location, TOTAL_ZONE_NAME, HouseInfo[casaid][hExX], HouseInfo[casaid][hExY], HouseInfo[casaid][hExZ]);
		format(strrs,sizeof(strrs),"%s",location);
		if(strcmp(strrs,"Ganton", true ) == 0)
		{
			if(ApagaoEmGanton == 1)
			{
			    SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O bairro está sofrendo um apagão, não foi possivel acender a luz.");
			    return 1;
			}
		}

	    switch(HouseInfo[casaid][hInterruptor])
	    {
	        case 0:
	        {
	            HouseInfo[casaid][hInterruptor] = 1;
	            SCM(playerid, COLOR_LIGHTGREEN, "Você acendeu a luz da casa.");
	            return 1;
	        }
	        case 1:
	        {
	            HouseInfo[casaid][hInterruptor] = 0;
	            SCM(playerid, COLOR_LIGHTGREEN, "Você apagou a luz da casa.");
	            return 1;
	        }
	    }
	}
	else if(garagem != -1)
	{
	    new location[MAX_ZONE_NAME], strrs[256];
		Get2DZone(location, TOTAL_ZONE_NAME, GaragemInfo[garagem][hExX], GaragemInfo[garagem][hExY], GaragemInfo[garagem][hExZ]);
		format(strrs,sizeof(strrs),"%s",location);
		if(strcmp(strrs,"Ganton", true ) == 0)
		{
			if(ApagaoEmGanton == 1)
			{
			    SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O bairro está sofrendo um apagão, não foi possivel acender a luz.");
			    return 1;
			}
		}

	    switch(GaragemInfo[garagem][hInterruptor])
	    {
	        case 0:
	        {
	            GaragemInfo[garagem][hInterruptor] = 1;
	            SCM(playerid, COLOR_LIGHTGREEN, "Você acendeu a luz da garagem.");
	            return 1;
	        }
	        case 1:
	        {
	            GaragemInfo[garagem][hInterruptor] = 0;
	            SCM(playerid, COLOR_LIGHTGREEN, "Você apagou a luz da garagem.");
	            return 1;
	        }
	    }
	}
	else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma casa ou garagem.");
	return 1;
}

CMD:bater(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está logado.");

	new bateu = 0;
    for(new i; i < MAX_HOUSES; i++)
    {
   		if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
    	{
    	    if(GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
	        {
	            bateu = 1;
                for(new p = 0; p < MAX_PLAYERS; p++)
				{
		  			if(IsPlayerInRangeOfPoint(p,20.0,HouseInfo[i][hInX],HouseInfo[i][hInY],HouseInfo[i][hInZ]))
		     		{
						if(GetPlayerVirtualWorld(p) == 100+i)
						{
		       				SendClientMessage(p, COLOR_PURPLE, "* [PORTA] Batidas! Batidas!");
		   				}
					}
		 		}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[i][hExX2], HouseInfo[i][hExY2], HouseInfo[i][hExZ2]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
    	{
    	    if(GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
	        {
	            bateu = 1;
                for(new p = 0; p < MAX_PLAYERS; p++)
				{
		  			if(IsPlayerInRangeOfPoint(p,20.0,HouseInfo[i][hInX2],HouseInfo[i][hInY2],HouseInfo[i][hInZ2]))
		     		{
						if(GetPlayerVirtualWorld(p) == 100+i)
						{
		       				SendClientMessage(p, COLOR_PURPLE, "* [PORTA (2)] Batidas! Batidas!");
		   				}
					}
		 		}
			}
		}
	}
	for(new i; i < MAX_GARAGENS; i++)
    {
   		if(IsPlayerInRangeOfPoint(playerid, 2, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
    	{
    	    if(GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
	        {
	            bateu = 1;
                for(new p = 0; p < MAX_PLAYERS; p++)
				{
		  			if(IsPlayerInRangeOfPoint(p,20.0,GaragemInfo[i][hInX],GaragemInfo[i][hInY],GaragemInfo[i][hInZ]))
		     		{
						if(GetPlayerVirtualWorld(p) == 10000+i)
						{
		       				SendClientMessage(p, COLOR_PURPLE, "* [PORTA] Batidas! Batidas!");
		   				}
					}
		 		}
			}
		}
	}
	for(new i; i < MAX_COMPLEXOS; i++)
    {
   		if(IsPlayerInRangeOfPoint(playerid, 2, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
    	{
    	    if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
	        {
	            bateu = 2;
	        	for(new p = 0; p < MAX_PLAYERS; p++)
				{
 					if(IsPlayerInRangeOfPoint(p,20.0,ComplexoInfo[i][cInX],ComplexoInfo[i][cInY],ComplexoInfo[i][cInZ]))
    				{
						if(GetPlayerVirtualWorld(p) == 1000+i)
						{
  							SendClientMessage(p, COLOR_PURPLE, "* [PORTA] Batidas! Batidas!");
		   				}
					}
		 		}
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2, ComplexoInfo[i][cExX2], ComplexoInfo[i][cExY2], ComplexoInfo[i][cExZ2]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
    	{
    	    if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
	        {
	            bateu = 2;
	    	    for(new p = 0; p < MAX_PLAYERS; p++)
				{
 					if(IsPlayerInRangeOfPoint(p,20.0,ComplexoInfo[i][cInX2],ComplexoInfo[i][cInY2],ComplexoInfo[i][cInZ2]))
    				{
						if(GetPlayerVirtualWorld(p) == 1000+i)
						{
  							SendClientMessage(p, COLOR_PURPLE, "* [PORTA] Batidas! Batidas!");
		   				}
					}
		 		}
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2, ComplexoInfo[i][cExX3], ComplexoInfo[i][cExY3], ComplexoInfo[i][cExZ3]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
    	{
    	    if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
	        {
	            bateu = 2;
	    	    for(new p = 0; p < MAX_PLAYERS; p++)
				{
 					if(IsPlayerInRangeOfPoint(p,20.0,ComplexoInfo[i][cInX3],ComplexoInfo[i][cInY3],ComplexoInfo[i][cInZ3]))
    				{
						if(GetPlayerVirtualWorld(p) == 1000+i)
						{
  							SendClientMessage(p, COLOR_PURPLE, "* [PORTA] Batidas! Batidas!");
		   				}
					}
		 		}
			}
		}
	}
	for(new i; i < MAX_EMPRESAS; i++)
    {
   		if(IsPlayerInRangeOfPoint(playerid, 2, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
    	{
    	    if(GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
	        {
	            bateu = 3;
         		for(new p = 0; p < MAX_PLAYERS; p++)
				{
 					if(IsPlayerInRangeOfPoint(p,20.0,EmpInfo[i][eInX],EmpInfo[i][eInY],EmpInfo[i][eInZ]))
    				{
						if(GetPlayerVirtualWorld(p) == 100+i)
						{
  							SendClientMessage(p, COLOR_PURPLE, "* [PORTA] Batidas! Batidas!");
		   				}
					}
		 		}
			}
		}
	}

	if(bateu == 1) SendClientMessage(playerid, COLOR_WHITE, "Você bateu algumas vezes contra porta desta casa.");
	else if(bateu == 2) SendClientMessage(playerid, COLOR_WHITE, "Você bateu algumas vezes contra porta deste complexo.");
	else if(bateu == 3) SendClientMessage(playerid, COLOR_WHITE, "Você bateu algumas vezes contra porta desta empresa.");
	else if(bateu == 4) SendClientMessage(playerid, COLOR_WHITE, "Você bateu algumas vezes contra porta.");

	if(bateu > 0)
	{
		format(string,sizeof(string),"* %s bate algumas vezes em uma porta.", PlayerName(playerid, 1));
		ProxDetector(10.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else
	{
        SendClientMessage(playerid, COLOR_LIGHTRED, "Não há nenhuma porta para se bater por aqui.");
	}
	return 1;
}

COMMAND:apreender(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new faccao = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[faccao][fTipo] == FAC_TIPO_PMERJ || FacInfo[faccao][fTipo] == FAC_TIPO_PCERJ) // PMERJ
    {
        new veh;
        if(sscanf(params,"i",veh))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /apreender [Vehicleid]");
			return 1;
		}
		else
		{
 			static Float:fCoords[3];
			GetVehiclePos(veh, fCoords[0], fCoords[1], fCoords[2]);
			if(IsPlayerInRangeOfPoint(playerid,15.0,fCoords[0], fCoords[1], fCoords[2]))
   			{
	            new slot = GetVehicleSlot(veh);
	            if(slot > -1)
	            {
	                if(VehicleInfo[slot][vFaction] == 0 && VehicleInfo[slot][vOwner] > 0)
	                {
	                    if(IsPlayerInRangeOfPoint(playerid,40.0,2819.6492,-1203.3964,24.9792))
	                    {
							ImpoundVehicle(playerid,veh);
							return 1;
						}
						else
						{
							cp_target[playerid] = 1;
							SetPlayerCheckpoint(playerid,2819.6492,-1203.3964,24.9792,5.0);
							SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está no pátio de apreensão.");
							return 1;
						}
	                }
	                else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Este veículo não pode ser apreendido.");
	            }
	            else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Este veículo não pode ser apreendido.");
			}
			else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está próximo a este veículo.");
        }
	}
	return 1;
}

CMD:blockf(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new faccao = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(PlayerInfo[playerid][pFac] < 1) return 1;
    new StrMsg[256];
    if(FacInfo[faccao][fTipo] == FAC_TIPO_PMERJ || FacInfo[faccao][fTipo] == FAC_TIPO_PCERJ || FacInfo[faccao][fTipo] == FAC_TIPO_BANK)
    {
	    if(PlayerInfo[playerid][pFacCargo] >= 5)
		{
			if(FacInfo[faccao][fBlockf] == 0)
			{
				FacInfo[faccao][fBlockf] = 1;
				format(StrMsg, sizeof(StrMsg), "((%s %s: Bloqueou o chat da facção))", GetPlayerCargo(playerid), PlayerName(playerid, 0));
    			SendFacMessage(0x7BDDA5AA, faccao,StrMsg);
			}
			else
			{
			    FacInfo[faccao][fBlockf] = 0;
				format(StrMsg, sizeof(StrMsg), "((%s %s: desbloqueou o chat da facção))", GetPlayerCargo(playerid), PlayerName(playerid, 0));
    			SendFacMessage(0x7BDDA5AA, faccao, StrMsg);
			}
		}
	}
	else
	{
	    if(PlayerInfo[playerid][pFacCargo] >= 5)
		{
			if(FacInfo[faccao][fBlockf] == 0)
			{
				FacInfo[faccao][fBlockf] = 1;
				format(StrMsg, sizeof(StrMsg), "((%s %s: Bloqueou o chat da facção))", GetPlayerCargo(playerid), PlayerName(playerid, 0));
    			SendFacMessage(0x7BDDA5AA,faccao,StrMsg);
			}
			else
			{
			    FacInfo[faccao][fBlockf] = 0;
				format(StrMsg, sizeof(StrMsg), "((%s %s: desbloqueou o chat da facção))", GetPlayerCargo(playerid), PlayerName(playerid, 0));
    			SendFacMessage(0x7BDDA5AA,faccao,StrMsg);
			}
		}
	}
	return 1;
}

COMMAND:dados(playerid, params[])
{
    if (!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar logado para utilizar este comando.");
    new dice = random(6)+1;
    format(string, sizeof(string), "*** %s joga seus dados e eles caem em %d.", PlayerName(playerid,1),dice);
	ProxDetector(6.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:ajudafaccao(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
    new faccao = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[faccao][fTipo] == FAC_TIPO_PMERJ) // PMERJ
    {
        SendClientMessage(playerid, COLOR_WHITE, "*** AJUDA FACCAO ***");
		SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** Canal de rádio: 190");
		SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** (/r)adio /rbaixo (radio baixo) /algemar /f /distintivo");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** (/r2)adio /rbaixo2 (radio baixo 2) /nickbranco /nickazul");
		SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /deixarferido /blockf /prefixo /rprefixo /retirar");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /membros /equipar /trabalho /uniforme /revistar");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /cbarreira /rbarreira /armario /prender /sirene /mare");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /deter /tablet /apreender /tapeteprego /removerprego /retirar");
		if(PlayerInfo[playerid][pFacCargo] >= 9)
		{
            SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /limparpregos");
		}
        if(PlayerInfo[playerid][pFacCargo] >= 9)
        {
            SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /cargo /nomecargo /convidar /demitir");
        }
    }

    if(FacInfo[faccao][fTipo] == FAC_TIPO_PRIXY) // PRIXY
    {
        SendClientMessage(playerid, COLOR_WHITE, "*** AJUDA FACCAO ***");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** (/r)adio /rbaixo (radio baixo) /membros /f");
        if(PlayerInfo[playerid][pFacCargo] >= 4)
        {
            SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /cargo /nomecargo /convidar /demitir");
        }
    }
    if(FacInfo[faccao][fTipo] == FAC_TIPO_PCERJ) // PCERJ
    {
        SendClientMessage(playerid, COLOR_WHITE, "*** AJUDA FACCAO ***");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** Canal de rádio: 197");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** (/r)adio /rbaixo (radio baixo) /algemar /f /distintivo");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** (/r2)adio /rbaixo2 (radio baixo 2) /nickbranco /nickazul");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /deixarferido /blockf /gov /cecopol /prefixo /rprefixo");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /membros /equipar /trabalho /uniforme /revistar");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /cbarreira /rbarreira /prender");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /deter /tablet /apreender /retirar");
        if(PlayerInfo[playerid][pFacCargo] >= 9)
        {
            SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /limparpregos");
        }
        if(PlayerInfo[playerid][pFacCargo] >= 9)
        {
            SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /cargo /nomecargo /convidar /demitir");
        }
    }
  	if(FacInfo[faccao][fTipo] == FAC_TIPO_EB) // EB
    {
        SendClientMessage(playerid, COLOR_WHITE, "*** AJUDA FACCAO ***");
		SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** Canal de rádio: 180");
		SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** (/r)adio /rbaixo (radio baixo) /algemar /f /distintivo");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** (/r2)adio /rbaixo2 (radio baixo 2) /nickbranco /nickazul");
		SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /desfibrilador /deixarferido /blockf  /prefixo /rprefixo");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /membros /equipar /trabalho /uniforme /revistar");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /cbarreira /rbarreira /armario /prender /sirene /central");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /deter /tablet /apreender /tapeteprego /removerprego /retirar");
		if(PlayerInfo[playerid][pFacCargo] >= 9)
		{
            SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /central /darlicenca /limparpregos");
		}
        if(PlayerInfo[playerid][pFacCargo] >= 9)
        {
            SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /cargo /nomecargo /convidar /demitir");
        }
    }
    if(FacInfo[faccao][fTipo] == FAC_TIPO_CBERJ) // CBERJ
    {
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** Canal de rádio: 193");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** (/r)adio /rbaixo (radio baixo) /f /membros /cocb /nickgb /nickbranco /distintivo");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** (/r2)adio /rbaixo2 (radio baixo 2) /equipargb /trabalho /finalizartratamento");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** /uniforme /desfibrilador /cbarreira /rbarreira /iniciartratamento");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** /colocarferido /localizarfogo /deixarferido /prefixo /rprefixo");
        if(PlayerInfo[playerid][pFacCargo] >= 9)
        {
            SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /cargo /nomecargo /convidar /demitir");
        }
    }
    else if(FacInfo[faccao][fTipo] == FAC_TIPO_GOV) // Governo
    {
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** /membros /r /distintivo");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** Canal de rádio: 181");
        if(PlayerInfo[playerid][pFacCargo] >= 9)
        {
            SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** /cargo /nomecargo /convidar /demitir");
        }
        if(PlayerInfo[playerid][pFacCargo] == 9)
        {
            SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** /governo");
        }
    }
    else if(FacInfo[faccao][fTipo] == FAC_TIPO_TJRP) // Governo
    {
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** /membros /r /distintivo");
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** Canal de rádio: 183");
        if(PlayerInfo[playerid][pFacCargo] >= 9)
        {
            SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** /cargo /nomecargo /convidar /demitir");
        }
    }
    else if(10 < FacInfo[faccao][fTipo] < 14) // Gangs
    {
        switch(FacInfo[faccao][fTipo])
        {
        	case 10: SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** Nivel da Facção: Novice Seller. | Acesso há: Maconha e Cocaína.");
			case 11: SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** Nivel da Facção: Street Vendor. | Acesso há: Maconha, Cocaína e LSD.");
			case 12: SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** Nivel da Facção: Experienced Seller | Acesso há: Maconha, Cocaína, LSD e Crack.");
			case 13: SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** Nivel da Facção: The Seller | Acesso há: Maconha, Cocaína, LSD, Crack e Metanfetamina.");
    	}
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** /membros, /trancar, /f");
        if(PlayerInfo[playerid][pFacCargo] >= 5)
        {
            SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** /cargo, /nomecargo, /convidar, /demitir, /facnum ");
            new str[126];
			format(str,sizeof(str),"*** AJUDA FACÇÃO *** Numero do contato: %d", FacInfo[faccao][fTrafNum]);
        	SendClientMessage(playerid, COLOR_CINZA, str);
        }
    }
    else if(13 < FacInfo[faccao][fTipo] < 18) // Máfias
    {
        switch(FacInfo[faccao][fTipo])
        {
        	case 14: SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** Nivel da Facção: ALL. | Acesso há: Todas as armas e munições.");
			case 15: SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** Nivel da Facção: ALL. | Acesso há: Todas as armas e munições.");
			case 16: SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** Nivel da Facção: ALL. | Acesso há: Todas as armas e munições.");
            case 17: SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** Nivel da Facção: ALL. | Acesso há: Todas as armas e munições.");
    	}
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** /membros, /trancar, /f");

        if(PlayerInfo[playerid][pFacCargo] >= 5)
        {
            SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACÇÃO *** /cargo, /nomecargo, /convidar, /demitir, /facnum ");
			new str[126];
			format(str,sizeof(str),"*** AJUDA FACÇÃO *** Numero do contato: %d", FacInfo[faccao][fTrafNum]);
        	SendClientMessage(playerid, COLOR_CINZA, str);
        }
    }
    else if(FacInfo[faccao][fTipo] == FAC_TIPO_BANK) // Entregas no pro banco
    {
        SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /membros, /trancar, /f, /r, /comecarcarregamento /distintivo");
        if(PlayerInfo[playerid][pFacCargo] >= 12)
        {
            SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FACCAO *** /cargo, /nomecargo, /convidar, /demitir ");
        }
    }
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pertence a nenhuma facção.");
	}
	return 1;
}

COMMAND:retirar(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(IsLaw2(playerid))
	{
	    new other, tmp2[126], str[256];
        if(sscanf(params,"ds(32)",other,tmp2))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /retirar [playerid] [opção]");
			SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}Opções:{FFFFFF} licencamotorista, granasuja, c4, tnt, dinamite, portedearmas, licensavoo, armas, municoes, drogas");
			return 1;
		}
		else
		{
	    	if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Este jogador não está conectado."); return 1; }
		    if(GetDistanceBetweenPlayers(playerid,other) <= 7.5)
		    {
		        if(!IsPlayerInAnyVehicle(other))
		        {
				    if(strcmp(tmp2,"licencamotorista",true) == 0)
				    {
				        if(PlayerInfo[other][pDriveLic])
				        {
							PlayerInfo[other][pDriveLic] = 0;
       						format(str,sizeof(str),"* %s retira a licença de motorista de %s.", PlayerName(playerid, 1), PlayerName(other, 1));
       						ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Esta pessoa não possui uma licença de motorista.");
				    }
				    if(strcmp(tmp2,"granasuja",true) == 0)
				    {
				        if(PlayerInfo[other][pGranaSuja])
				        {
							PlayerInfo[other][pGranaSuja] = 0;
       						format(str,sizeof(str),"* %s retira o dinheiro sujo de de %s.", PlayerName(playerid, 1), PlayerName(other, 1));
       						ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Esta pessoa não possui dinheiro sujo.");
				    }
				    if(strcmp(tmp2,"c4",true) == 0)
				    {
				        if(PlayerInfo[other][pC4])
				        {
							PlayerInfo[other][pC4] = 0;
       						format(str,sizeof(str),"* %s retira a C4 de %s.", PlayerName(playerid, 1), PlayerName(other, 1));
       						ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Esta pessoa não possui C4.");
				    }
				    if(strcmp(tmp2,"tnt",true) == 0)
				    {
				        if(PlayerInfo[other][pTNT])
				        {
							PlayerInfo[other][pTNT] = 0;
       						format(str,sizeof(str),"* %s retira a TNT de %s.", PlayerName(playerid, 1), PlayerName(other, 1));
       						ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Esta pessoa não possui TNT.");
				    }
				    if(strcmp(tmp2,"dinamite",true) == 0)
				    {
				        if(PlayerInfo[other][pBomba])
				        {
							PlayerInfo[other][pBomba] = 0;
       						format(str,sizeof(str),"* %s retira a dinamite de %s.", PlayerName(playerid, 1), PlayerName(other, 1));
       						ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Esta pessoa não possui dinamite.");
				    }
				    else if(strcmp(tmp2,"portedearmas",true) == 0)
				    {
						if(PlayerInfo[other][pWepLic])
						{
							PlayerInfo[other][pWepLic] = 0;
       						format(str,sizeof(str),"* %s retira o porte de armas de %s.", PlayerName(playerid, 1), PlayerName(other, 1));
							ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Esta pessoa não possui um porte de armas.");
				    }
				    else if(strcmp(tmp2,"licensavoo",true) == 0)
				    {
						if(PlayerInfo[other][pFlyLic])
						{
							PlayerInfo[other][pFlyLic] = 0;
							format(str,sizeof(str),"* %s retira a licença de voo de %s.", PlayerName(playerid, 1), PlayerName(other, 1));
							ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Esta pessoa não possui uma licença de voo.");
				    }
				    else if(strcmp(tmp2,"armas",true) == 0)
				    {
						new ArmaId = PlayerInfo[other][pArmaMao];
		                if(ArmaId > 0)
		                {
			                //========================================
						    DesarmandoPlayer[other] = 2;
							ResetPlayerWeapons(other);
							PlayerInfo[other][pArmaMao] = 0;
							RemovePlayerAttachedObject(other, 0);
							//========================================
			                RemovePlayerAttachedObject(other, 0);
							ArmaData[ArmaId][ArmaCor] = 1;

							SalvarArma(ArmaId);

							format(str,sizeof(str),"* %s retirou as armas de %s.", PlayerName(playerid, 1), PlayerName(other, 1));
							ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return 1;
						}
						else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta pessoa não tem nenhuma arma para entregar.");
				    }
				    else if(strcmp(tmp2,"municoes",true) == 0)
				    {
						PlayerInfo[other][pMun9mm] = 0;
						PlayerInfo[other][pMun556] = 0;
						PlayerInfo[other][pMunCart] = 0;
						PlayerInfo[other][pMun127] = 0;

						format(str,sizeof(str),"* %s retirou as munições de %s.", PlayerName(playerid, 1), PlayerName(other, 1));
						ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
				    }
	                else if(strcmp(tmp2,"drogas",true) == 0)
				    {
						ResetPlayerDrugs(other);
						format(str,sizeof(str),"* %s retirou as drogas de %s.", PlayerName(playerid, 1), PlayerName(other, 1));
						ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
				    }
		        }
		        else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Retire-o do veiculo antes.");
			}
			else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está proximo a este jogador.");
		}
	}
	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um policial ou não está em trabalho.");
	return 1;
}

COMMAND:aretirar(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
	    new other, tmp2[126], str[256];
        if(sscanf(params,"ds(32)",other,tmp2))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /aretirar [playerid] [opção]");
			SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}Opções:{FFFFFF} licencamotorista, portedearmas, licensavoo, arma, municoes, drogas");
			return 1;
		}
		else
		{
	    	if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_WHITE,"Este jogador não está conectado."); return 1; }
		    if(GetDistanceBetweenPlayers(playerid,other) <= 20000)
		    {
		        if(!IsPlayerInAnyVehicle(other))
		        {
				    if(strcmp(tmp2,"licencamotorista",true) == 0)
				    {
				        if(PlayerInfo[other][pDriveLic])
				        {
							PlayerInfo[other][pDriveLic] = 0;
							format(str,sizeof(str),"* Você retirou a licença de motorista de %s.", PlayerName(other, 1));
                            SendClientMessage(playerid,COLOR_LIGHTRED, str);
							return 1;
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED,"{FF6347}ERRO:{FFFFFF} Esta pessoa não possui uma licença de motorista.");
				    }
				    else if(strcmp(tmp2,"portedearmas",true) == 0)
				    {
						if(PlayerInfo[other][pWepLic])
						{
							PlayerInfo[other][pWepLic] = 0;
							format(str,sizeof(str),"* Você retirou o porte de armas de %s.", PlayerName(other, 1));
                            SendClientMessage(playerid,COLOR_LIGHTRED, str);
							return 1;
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED,"{FF6347}ERRO:{FFFFFF} Esta pessoa não possui um porte de armas.");
				    }
				    else if(strcmp(tmp2,"licensavoo",true) == 0)
				    {
						if(PlayerInfo[other][pFlyLic])
						{
							PlayerInfo[other][pFlyLic] = 0;
							format(str,sizeof(str),"* Você retirou a licença de voo de %s.", PlayerName(other, 1));
                            SendClientMessage(playerid,COLOR_LIGHTRED, str);
							return 1;
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED,"{FF6347}ERRO:{FFFFFF} Esta pessoa não possui uma licença de voo.");
				    }
				    else if(strcmp(tmp2,"arma",true) == 0)
				    {
						new ArmaId = PlayerInfo[other][pArmaMao];
		                if(ArmaId > 0)
		                {
			                //========================================
						    DesarmandoPlayer[other] = 2;
							ResetPlayerWeapons(other);
							PlayerInfo[other][pArmaMao] = 0;
							RemovePlayerAttachedObject(other, 0);
							//========================================
			                RemovePlayerAttachedObject(other, 0);
							ArmaData[ArmaId][ArmaCor] = 1;

							SalvarArma(ArmaId);

							format(str,sizeof(str),"* Você retirou a arma de %s.", PlayerName(other, 1));
                            SendClientMessage(playerid,COLOR_LIGHTRED, str);
							return 1;
						}
						else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta pessoa não tem nenhuma arma para entregar.");
				    }
				    else if(strcmp(tmp2,"municoes",true) == 0)
				    {
						PlayerInfo[other][pMun9mm] = 0;
						PlayerInfo[other][pMun556] = 0;
						PlayerInfo[other][pMunCart] = 0;
						PlayerInfo[other][pMun127] = 0;

						format(str,sizeof(str),"* Você retirou as munições de %s.", PlayerName(other, 1));
      					SendClientMessage(playerid,COLOR_LIGHTRED, str);
						return 1;
				    }
	                else if(strcmp(tmp2,"drogas",true) == 0)
				    {
						ResetPlayerDrugs(other);
						format(str,sizeof(str),"* Você retirou as drogas de %s.", PlayerName(other, 1));
      					SendClientMessage(playerid,COLOR_LIGHTRED, str);
						return 1;
				    }
		        }
		        else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Retire-o do veiculo antes.");
			}
			else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está proximo a este jogador.");
		}
	}
	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso a este comando.");
	return 1;
}

COMMAND:limparpregos(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ || FacInfo[FacId][fTipo] == FAC_TIPO_EB || FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ)
	{
        if(PlayerInfo[playerid][pFacCargo] >= 1)
        {
            DeleteAllStrip();
            new str[128];
            format(str,sizeof(str),"[FACÇÃO] %s %s removeu todos os tapetes de pregos.",PlayerName(playerid,0));
            SendFacMessage(0x6666CCFF, FacId,str);
            return 1;
        }
        else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando.");
    }
    return 1;
}

COMMAND:equipargb(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(!PlayerToPortaMalasCar(playerid,1,5.0)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo de um caminhão de bombeiros.");
    new carid = PlayerToPortaMalasCar(playerid,2,3.0);
    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[FacId][fTipo] == FAC_TIPO_CBERJ)
    {
        if(OutrasInfos[playerid][oBombeiroOnDuty] == 0)
        {
            switch(GetVehicleModel(carid))
            {
                case 407, 544:
                {
                    Dialog_Show(playerid, Equipando_GB, DIALOG_STYLE_LIST, "[GBESP] Bombeiros", "Pegar Extintor\nPegar Serra\nPegar Machado", "Selecionar", "Cancelar");
        
                }
                default:
                {
                    if(IsPlayerInRangeOfPoint(playerid,6.0,-294.7040,1443.2588,1088.9550))
                    {
                        Dialog_Show(playerid, Equipando_GB, DIALOG_STYLE_LIST, "[GBESP] Bombeiros", "Pegar Extintor\nPegar Serra\nPegar Machado", "Selecionar", "Cancelar");
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "Você só pode acessar este comando próximo a um caminhão de bombeiro ou no hospital.");
                    }
                }
            }
        }
        else
        {
            OutrasInfos[playerid][oBombeiroOnDuty] = 0;
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você saiu de serviço como bombeiro.");
            SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
        }
    }
    return 1;
}

Dialog:Equipando_GB(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
    else
    {
        if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você tem alguma arma em mãos, portanto não recebeu seu extintor.");
        switch(listitem)
        {
            case 0:
            {
                EntregandoArmaSQL(playerid, 42, 0, 0, 0);
            }
            case 1:
            {
                EntregandoArmaSQL(playerid, 9, 0, 0, 0);
            }
            case 2:
            {
                EntregandoArmaSQL(playerid, 15, 0, 0, 0);
            }
        }
        ShowModelSelectionMenu(playerid, "[GBESP] Roupa de Bombeiro", MODEL_PMERJ_SKINS, CBERJ_Uniformes, sizeof(CBERJ_Uniformes), -16.0, 0.0, -55.0);
    }
    return 1;
}

CMD:taser(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ || FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ || FacInfo[FacId][fTipo] == FAC_TIPO_EB)
    {
        if(TazerPlayer[playerid] == 0)
        {
            TazerPlayer[playerid] = 1;
            DesarmandoPlayer[playerid] = 2;
            ResetPlayerWeapons(playerid);
            RemovePlayerAttachedObject(playerid, 0);

            SendClientMessage(playerid, COLOR_LIGHTGREEN, "INFO: Você pegou seu taser.");
            if(GetPVarInt(playerid, "TempoTaser") == 0) GivePlayerWeapon(playerid, 23, 1);
            SetPlayerAttachedObject(playerid, 0, GunObjects[23], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1);
        }
        else
        {
            DesarmandoPlayer[playerid] = 2;
            ResetPlayerWeapons(playerid);
            RemovePlayerAttachedObject(playerid, 0);

            new armaid = PlayerInfo[playerid][pArmaMao];

            GivePlayerWeapon(playerid, ArmaData[armaid][ArmaModelo] ,ArmaData[armaid][ArmaAmmo]);
            if(ArmaData[armaid][ArmaExtra] != 0) SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[armaid][ArmaRGB]);
            else SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaData[armaid][ArmaModelo]], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[armaid][ArmaRGB]);

            TazerPlayer[playerid] = 0;
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você guardou seu taser.");
        }
    }
    return 1;
}

CMD:balasborracha(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ || FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ || FacInfo[FacId][fTipo] == FAC_TIPO_EB)
    {
        if(TazerPlayer[playerid] == 0)
        {
            TazerPlayer[playerid] = 1;
            DesarmandoPlayer[playerid] = 2;
            ResetPlayerWeapons(playerid);
            RemovePlayerAttachedObject(playerid, 0);

            SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você pegou sua calibre 12 de borracha.");
            if(GetPVarInt(playerid, "TempoTaser") == 0) GivePlayerWeapon(playerid, 25, 4);
            SetPlayerAttachedObject(playerid, 0, GunObjects[25], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1);
        }
        else
        {
            DesarmandoPlayer[playerid] = 2;
            ResetPlayerWeapons(playerid);
            RemovePlayerAttachedObject(playerid, 0);

            new armaid = PlayerInfo[playerid][pArmaMao];

            GivePlayerWeapon(playerid, ArmaData[armaid][ArmaModelo] ,ArmaData[armaid][ArmaAmmo]);
            if(ArmaData[armaid][ArmaExtra] != 0) SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[armaid][ArmaRGB]);
            else SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaData[armaid][ArmaModelo]], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[armaid][ArmaRGB]);

            TazerPlayer[playerid] = 0;
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você guardou sua calibre 12 de borracha.");
        }
    }
    return 1;
}

COMMAND:tapeteprego(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ || FacInfo[FacId][fTipo] == FAC_TIPO_EB || FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ)
	{
	    if(GetPlayerInterior(playerid) == 0)
	    {
	        if(!IsPlayerInAnyVehicle(playerid))
	        {
	            new Float:A, Float:X, Float:Y, Float:Z;
	            GetPlayerFacingAngle(playerid,A);
	            GetPlayerPos(playerid,X,Y,Z);
	            CreateStrip(X,Y,Z,A);
	            SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você colocou um tapete de pregos no chão.");
	            return 1;
	        }
	        else return SendClientMessage(playerid,COLOR_LIGHTRED,"Saia do veículo.");
	    }
	    else return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não pode colocar um tapete de pregos em interiores.");
	}
	else return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não tem acesso a este comando.");
}

COMMAND:removerprego(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ || FacInfo[FacId][fTipo] == FAC_TIPO_EB || FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ)
	{
	    if(GetPlayerInterior(playerid) == 0)
	    {
	        if(!IsPlayerInAnyVehicle(playerid))
	        {
                DeleteClosestStrip(playerid);
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid,COLOR_WHITE,"[!]Saia do veículo.");
	            return 1;
	        }
	    }
		else return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não tem acesso a este comando.");
	}
	else return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não tem acesso a este comando.");
}

stock CreateStrip(Float:x,Float:y,Float:z,Float:Angle)
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(SpikeInfo[i][sCreated] == 0)
  	    {
            SpikeInfo[i][sCreated]=1;
            SpikeInfo[i][sX]=x;
            SpikeInfo[i][sY]=y;
            SpikeInfo[i][sZ]=z-0.7;
            SpikeInfo[i][sObject] = CreateDynamicObject(2899, x, y, z-0.9, 0, 0, Angle-90);
	        return 1;
  	    }
  	}
  	return 0;
}

stock DeleteAllStrip()
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(SpikeInfo[i][sCreated] == 1)
  	    {
  	        SpikeInfo[i][sCreated]=0;
            SpikeInfo[i][sX]=0.0;
            SpikeInfo[i][sY]=0.0;
            SpikeInfo[i][sZ]=0.0;
            if(IsValidDynamicObject(SpikeInfo[i][sObject])) DestroyDynamicObject(SpikeInfo[i][sObject]);
  	    }
	}
    return 0;
}

stock DeleteClosestStrip(playerid)
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 2.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
        {
  	        if(SpikeInfo[i][sCreated] == 1)
            {
                SpikeInfo[i][sCreated]=0;
                SpikeInfo[i][sX]=0.0;
                SpikeInfo[i][sY]=0.0;
                SpikeInfo[i][sZ]=0.0;
                if(IsValidDynamicObject(SpikeInfo[i][sObject])) DestroyDynamicObject(SpikeInfo[i][sObject]);
                return 1;
  	        }
  	    }
  	}
    return 0;
}
COMMAND:ejetar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /ejetar [id]");
	else
	{
	    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em um veículo para utilizar este comando!");
	    if(playerid == targetid) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode deter você mesmo.");
	    if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado!");
	    if(GetPlayerVehicleID(targetid) == GetPlayerVehicleID(playerid))
	    {
      	    format(string, sizeof(string), "Você ejetou %s do veículo.", PlayerName(targetid,1));
      	    SendClientMessage(playerid, COLOR_LIGHTRED, string);
      	    format(string, sizeof(string), "Você foi ejetado do veículo por %s.", PlayerName(playerid,1));
      	    SendClientMessage(targetid, COLOR_LIGHTRED, string);
      	    RemovePlayerFromVehicle(targetid);
      	}
	}
	return 1;
}
COMMAND:deter(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid,seatid;
	if(sscanf(params, "ui", targetid,seatid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /deter [id] [ID do assento]");
	else
	{
	    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em um veículo para utilizar este comando!");
	    if(playerid == targetid) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode deter você mesmo.");
	    if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado!");
	    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
		if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ || FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ || FacInfo[FacId][fTipo] == FAC_TIPO_EB)
		{
		    if(GetDistanceBetweenPlayers(playerid,targetid) < 7.0)
			    PutPlayerInVehicle(targetid, GetPlayerVehicleID(playerid), seatid);
    	    else
				SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O player não está próximo de você.");
		}
	}
	return 1;
}

ALTCOMMAND:carregarferido->colocarferido;
COMMAND:colocarferido(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid,seatid;
	if(sscanf(params, "ui", targetid,seatid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /colocarferido [id] [ID do assento]");
	else
	{
	    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar conectado antes de usar algum comando.");
    	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve ser o motorista de um veículo para utilizar este comando!");
	    if(playerid == targetid) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode deter você mesmo.");
	    if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado!");
		if(PlayerInfo[targetid][pMorto] > 0)
		{
		    if(GetDistanceBetweenPlayers(playerid,targetid) < 7.0){
			    PutPlayerInVehicle(targetid, GetPlayerVehicleID(playerid), seatid);

                format(string, sizeof(string), "Você colocou %s no veículo.", PlayerName(targetid,1));
      	    	SendClientMessage(playerid, COLOR_LIGHTRED, string);

      	    	format(string, sizeof(string), "[!] Você foi colocado em um veículo por %s.", PlayerName(playerid,1));
      	    	SendClientMessage(targetid, COLOR_LIGHTRED, string);
			}
    	    else
				SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O player não está próximo de você.");
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está ferido.");
	}
	return 1;
}

/*COMMAND:tablet(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ || FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem acesso a este comando.");
	{
   		Dialog_Show(playerid, Dialog_MDC, DIALOG_STYLE_LIST, "TABLET", "Procurar nome\nProcurar placa ((por ID))\nProcurar placa((Placa))\nAdicionar ficha criminal\nChecar numeração (Arma)\nAdicionar placa procurada\nVer placas procuradas", "Selecionar", "Cancelar");
   		//Dialog_Show(playerid, Dialog_MDC, DIALOG_STYLE_LIST, "TABLET", "Procurar Nome\nProcurar Placa (( ID ))\nProcurar Placa(( Placa ))\nAplicar Crime\nChecar Numeração (Arma)", "Selecionar", "Cancelar");
	}
	return 1;
}*/
COMMAND:tablet(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    
	new faccao = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[faccao][fTipo] == FAC_TIPO_PMERJ || FacInfo[faccao][fTipo] == FAC_TIPO_PCERJ || FacInfo[faccao][fTipo] == FAC_TIPO_EB)
	{
   		Dialog_Show(playerid, Dialog_MDC, DIALOG_STYLE_LIST, "TABLET", "Procurar nome\nProcurar placa ((por ID))\nProcurar placa((Placa))\nAdicionar ficha criminal\nChecar numeração (Arma)\nAdicionar placa procurada\nVer placas procuradas", "Selecionar", "Cancelar");
   		//Dialog_Show(playerid, Dialog_MDC, DIALOG_STYLE_LIST, "TABLET", "Procurar Nome\nProcurar Placa (( ID ))\nProcurar Placa(( Placa ))\nAplicar Crime\nChecar Numeração (Arma)", "Selecionar", "Cancelar");
	}
	return 1;
}

COMMAND:computador(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
   
    new faccao = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[faccao][fTipo] == FAC_TIPO_PMERJ || FacInfo[faccao][fTipo] == FAC_TIPO_PCERJ || FacInfo[faccao][fTipo] == FAC_TIPO_EB)
	{
   		Dialog_Show(playerid, Dialog_MDC, DIALOG_STYLE_LIST, "COMPUTADOR", "Procurar nome\nProcurar placa ((por ID))\nProcurar placa((Placa))\nAdicionar ficha criminal\nChecar numeração (Arma)\nAdicionar placa procurada\nVer placas procuradas", "Selecionar", "Cancelar");
   		//Dialog_Show(playerid, Dialog_MDC, DIALOG_STYLE_LIST, "COMPUTADOR", "Procurar Nome\nProcurar Placa (( ID ))\nProcurar Placa(( Placa ))\nAplicar Crime\nChecar Numeração (Arma)", "Selecionar", "Cancelar");
	}
	return 1;
}

/*COMMAND:computador2(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	if(FacInfo[FacId][fTipo] != FAC_TIPO_PCERJ) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem acesso a este comando.");
	new complexid = PlayerInfo[playerid][pEntrouComplexo];
	if(complexid == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em um departamento.");
	new pertopc = 0;
	for(new m = 0; m < MAX_MOVEIS; m++)
 	{
 		if(FurniInfo[m][mCriado] != 0)
  		{
  			if(IsPlayerInRangeOfPoint(playerid, 5, FurniInfo[m][mX], FurniInfo[m][mY], FurniInfo[m][mZ]) && GetPlayerVirtualWorld(playerid) == FurniInfo[m][mWorld] && GetPlayerInterior(playerid) == FurniInfo[m][mInt])
  			{
	    		if(ObjetoEComputPD(FurniInfo[m][mModelo]))
   				{
					pertopc = 1;
					break;
				}
			}
		}
	}
	if(pertopc == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a um computador do departamento.");
	else {
	    Dialog_Show(playerid, Dialog_COMPUTADORDP, DIALOG_STYLE_LIST, "Computador", "Procurar Nome\nAplicar Crime", "Selecionar", "Cancelar");
	}
	return 1;
}*/


Dialog:Dialog_COMPUTADORDP(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
	    switch(listitem)
	    {
	        case 0: Dialog_Show(playerid, Dialog_MDC_NOME_C, DIALOG_STYLE_INPUT, "Computador", "Digite o nome a ser pesquisado\nAVISO: Você deve utilizar Nome_Sobrenome", "Pesquisar", "Cancelar");
	        case 1: Dialog_Show(playerid, Dialog_MDC_APPCRIME, DIALOG_STYLE_INPUT, "Computador", "Digite o ID do player no qual será aplicado o crime.\n(Você está inserindo um crime na ficha criminal, não é possível remover)", "Pesquisar", "Cancelar");
	    }
	}
	return 1;
}

Dialog:Dialog_MDC_NOME_C(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new StrMD[64];
	    format(StrMD, sizeof(StrMD),"%s",inputtext);
	    format(string,sizeof(string),"SELECT * FROM accounts WHERE Username = '%s'",StrMD);
     	mysql_function_query(Pipeline, string, true, "ConsultarNome_MDC", "d", playerid);
	}
	return 1;
}

Dialog:Dialog_MDC(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
	    switch(listitem)
	    {
	        case 0: Dialog_Show(playerid, Dialog_MDC_NOME, DIALOG_STYLE_INPUT, "TABLET", "Digite o nome a ser pesquisado\nAVISO: Você deve utilizar Nome_Sobrenome", "Pesquisar", "Cancelar");
	        case 1: Dialog_Show(playerid, Dialog_MDC_VEHID, DIALOG_STYLE_INPUT, "TABLET", "Digite o ID do veículo.", "Pesquisar", "Cancelar");
	        case 2: Dialog_Show(playerid, Dialog_MDC_PLACA, DIALOG_STYLE_INPUT, "TABLET", "Digite a Placa do veículo.", "Pesquisar", "Cancelar");
	        case 3: Dialog_Show(playerid, Dialog_MDC_APPCRIME, DIALOG_STYLE_INPUT, "TABLET", "Digite o ID do player no qual será aplicado o crime.\n(Você está inserindo um crime na ficha criminal, não é possível remover)", "Pesquisar", "Cancelar");
	        case 4: Dialog_Show(playerid, Dialog_MDC_NUMERACAO, DIALOG_STYLE_INPUT, "TABLET", "Digite a Numeração da Arma.", "Pesquisar", "Cancelar");
	        case 5: Dialog_Show(playerid, Dialog_MDC_ADDPLACAPROC, DIALOG_STYLE_INPUT, "TABLET", "Digite a placa do veículo\nExemplo: XX000 XX", "Adicionar", "Cancelar");
	        case 6:
	        {
	            for(new i; i<50; i++)
				{
				    VendoMDCP[playerid][i] = -1;
				}
			    new LinhaAtt[126], Linha1[1024], vname[64], count = 0;
				print("ok1");
			    for(new cc = 0; cc < MAX_CA_VEHICLES; cc++)
				{
					if(VehicleInfo[cc][vVehicle] != -1)
					{
						
					    if(VehicleInfo[cc][vPlacaProcurada] == 1)
					    {
					       	GetVehicleNameByModel(VehicleInfo[cc][vModel],vname);
		                	format(LinhaAtt, 126, "Placa: %s\tModelo: %s\n", VehicleInfo[cc][vPlate],vname);
		 					strcat(Linha1, LinhaAtt);
							format(Linha1, sizeof(Linha1), "%s%s",Linha1, LinhaAtt);
		 					VendoMDCP[playerid][count] = VehicleInfo[cc][vID];
		 					count++; 	
						
						}
					
			        } 
				
				}
				
				if(count > 0)
					Dialog_Show(playerid, Dialog_MDC_PLACAPROC2, DIALOG_STYLE_LIST, "TABLET", Linha1, "Selecionar", "Fechar");
				else
				    Dialog_Show(playerid, 999999, DIALOG_STYLE_MSGBOX, "TABLET", "\nNão há nenhum veículo procurado no sistema.\n", "Selecionar", "Fechar");
				
			}
	    
	    }
	}
	return 1;
}

Dialog:Dialog_MDC_PLACAPROC2(playerid, response, listitem, inputtext[])
{
	printf("listitem: %d, value: %d", listitem, VendoMDCP[playerid][listitem] );
    if(!response || VendoMDCP[playerid][listitem] == -1) return 1;

	new VehID = VendoMDCP[playerid][listitem];
    PagandoMulta[playerid] = VehID;
	Dialog_Show(playerid, Dialog_MDC_PLACAPROC3, DIALOG_STYLE_MSGBOX, VehicleInfo[VehID][vPlate], "Remover Placa", "Remover", "Cancelar");
	return 1;
}

Dialog:Dialog_MDC_PLACAPROC3(playerid, response, listitem, inputtext[])
{
    if(!response || PagandoMulta[playerid] == 0) return 1;

	new VehID = PagandoMulta[playerid];

	PagandoMulta[playerid] = 0;

	VehicleInfo[VehID][vPlacaProcurada] = 1;
 	format(string, sizeof(string), "\nPlaca %s removida das procuradas.\n", VehicleInfo[VehID][vPlate]);
	Dialog_Show(playerid, 999999, DIALOG_STYLE_MSGBOX, "TABLET", string, "Fechar", "");
 	return 1;
}

Dialog:Dialog_MDC_ADDPLACAPROC(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new StrMD[64];
	    format(StrMD, sizeof(StrMD),"%s",inputtext);

	    new v_encontrado = 0;
		for(new cc = 0; cc < MAX_VEHICLES; cc++)
		{
			if(VehicleInfo[cc][vVehicle] != -1)
			{
			    if(strcmp(VehicleInfo[cc][vPlate], StrMD, true) == 0)
			    {
			        VehicleInfo[cc][vPlacaProcurada] = 1;
			        format(string, sizeof(string), "\nPlaca %s adicionada às procuradas.\n", StrMD);
	 				Dialog_Show(playerid, 999999, DIALOG_STYLE_MSGBOX, "TABLET", string, "Fechar", "");
			        break;
			    }
			}
		}
		if(v_encontrado == 0)
		{
	 		format(string,sizeof(string),"SELECT * FROM rp_vehicles WHERE plate = '%s'",StrMD);
     		mysql_function_query(Pipeline, string, true, "ADD_MDCPlacaProc", "d", playerid);
		}
	}
	return 1;
}

forward ADD_MDCPlacaProc(playerid);
public ADD_MDCPlacaProc(playerid)
{
    new b[256];
	new rows,fields;
	cache_get_data(rows, fields);
	new Carros = rows;
	new Variavel[10];
	new NamePlaca[32];
	if(rows)
  	{
	 	for(new i; i < Carros; i++)
	  	{
	  	    cache_get_field_content(i,"id",b);					Variavel[0] = strval(b);
	  	    cache_get_field_content(i,"plate",b);				format(NamePlaca,32,"%s",b);

			format(string, sizeof(string), "\nPlaca %s adicionada às procuradas. (1)\n", NamePlaca);
	 		Dialog_Show(playerid, 999999, DIALOG_STYLE_MSGBOX, "TABLET", string, "Fechar", "");

	 		format(string, sizeof(string), "UPDATE `rp_vehicles` SET `vPlacaProcurada` = '1' WHERE `ID` = '%d'",
			    Variavel[0]
			);
			mysql_function_query(Pipeline, string, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);

	  	}
	}
  	else
  	{
  	    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Placa não encontrado no banco de dados.");
  	}
	return 1;
}

Dialog:Dialog_MDC_NUMERACAO(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new Numeracao = strval(inputtext), encontrada = 0;
	    new LinhaAtt[126], Linha1[1024];
	    for( new i; i < MAX_ARMAS; i++)
	    {
         	if(ArmaData[i][ArmaRaspada] == 0)
			{
		        if(ArmaData[i][ArmaNumeracao] == Numeracao)
		        {
	                format(LinhaAtt, 126, "Numeração: %d\nComprada Por: %s\nData: %s\nModelo: %s\n\n", Numeracao, ArmaData[i][ArmaCompradaPor], ArmaData[i][ArmaCompradaData], GunNames[ArmaData[i][ArmaModelo]]);
	 				strcat(Linha1, LinhaAtt);
	 				encontrada++;
		        }
			}
		}
		if(encontrada == 0)
		{
            strcat(Linha1, "\nNumeração não encontrada no sistema\n\n");
		}
		Dialog_Show(playerid, 99999, DIALOG_STYLE_MSGBOX, "TABLET", Linha1, "Fechar", "");
	}
	return 1;
}

Dialog:Dialog_MDC_NOME(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new StrMD[64];
	    format(StrMD, sizeof(StrMD),"%s",inputtext);
	    format(string,sizeof(string),"SELECT * FROM accounts WHERE Username = '%s'",StrMD);
     	mysql_function_query(Pipeline, string, true, "ConsultarNome_MDC", "d", playerid);
	}
	return 1;
}

forward ConsultarNome_MDC(playerid);
public ConsultarNome_MDC(playerid)
{
	new Rows, Fields;
	cache_get_data(Rows, Fields);
 	if(Rows)
  	{
  	    new tmp[130];
  	    new stringmdc[1024];
  	    new MsgText[6][24];

  	    cache_get_field_content(0, "ID", tmp);			MDC_Variavel[playerid][3] = strval(tmp);
  	    cache_get_field_content(0, "Username", tmp);	format(MsgText[0], 24,"%s",tmp);
		cache_get_field_content(0, "Gender", tmp);		MDC_Variavel[playerid][0] = strval(tmp);
		if(MDC_Variavel[playerid][0] == 1) format(MsgText[1], 24,"Homem",tmp);
		else format(MsgText[1], 24,"Mulher",tmp);
		cache_get_field_content(0, "Age", tmp);			MDC_Variavel[playerid][1] = strval(tmp);
		cache_get_field_content(0, "Celular", tmp);		MDC_Variavel[playerid][2] = strval(tmp);

		cache_get_field_content(0, "pDriveLic", tmp);	MDC_Variavel[playerid][5] = strval(tmp);
		if(MDC_Variavel[playerid][5] == 1) format(MsgText[2], 24,"Possui",tmp);
		else format(MsgText[2], 24,"Não Possui",tmp);

		cache_get_field_content(0, "pWepLic", tmp);  	MDC_Variavel[playerid][6] = strval(tmp);
		if(MDC_Variavel[playerid][6] == 1) format(MsgText[3], 24,"Possui",tmp);
		else format(MsgText[3], 24,"Não Possui",tmp);

		cache_get_field_content(0, "pFlyLic", tmp);  	MDC_Variavel[playerid][7] = strval(tmp);
		if(MDC_Variavel[playerid][7] == 1) format(MsgText[4], 24,"Possui",tmp);
		else format(MsgText[4], 24,"Não Possui",tmp);

		cache_get_field_content(0, "pTruckLic", tmp);  	MDC_Variavel[playerid][8] = strval(tmp);
		if(MDC_Variavel[playerid][8] == 1) format(MsgText[5], 24,"Possui",tmp);
		else format(MsgText[5], 24,"Não Possui",tmp);

		format(stringmdc, sizeof(stringmdc), "Nome:\t\t\t\t%s\nGenero:\t\t\t%s\nIdade:\t\t\t\t%d\nCelular:\t\t\t\t%d\nLicença de Motorista:\t\t%s\nLicença de Voo:\t\t\t%s\nLicença de Caminhoneiro:\t%s\nLicença de Armas:\t\t%s", MsgText[0], MsgText[1], MDC_Variavel[playerid][1],MDC_Variavel[playerid][2], MsgText[2], MsgText[4], MsgText[5], MsgText[3]);
 		Dialog_Show(playerid, DIALOG_MDC_INFOP, DIALOG_STYLE_MSGBOX, "TABLET", stringmdc, "Mais >>", "Fechar");

 		format(string,sizeof(string),"SELECT * FROM crimes WHERE CriOwnN = '%s'", MsgText[0]);
     	mysql_function_query(Pipeline, string, true, "ConsultarCrimes_MDC", "ds", playerid, MsgText[0]);
	}
	else
  	{
  	    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Nome não encontrado no banco de dados.");
  	}
	return 1;
}

cache_get_field_int(row, const field_name[])
{
	new
	    str[12];

	cache_get_field_content(row, field_name, str, Pipeline, sizeof(str));
	return strval(str);
}


Dialog:RefundoArma(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    if(PlayerInfo[playerid][pArmaMao] > 0)
		{
	    	SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes de receber o refundo.");
	    	return 1;
		}
		EntregandoArmaSQL(playerid, Refundo[playerid][1], 0, 0, 0);
		format(string, sizeof(string),"SERVER: Você recebeu o refundo de uma %s.", GunNames[Refundo[playerid][1]]);
		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		RefundoArmaRemover(Refundo[playerid][0]);

	}
	return 1;
}
Dialog:RefundoGrana(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
		format(string, sizeof(string),"SERVER: Você recebeu o refundo de um de R$ %d.", Refundo[playerid][1]);
		PlayerInfo[playerid][pGrana] += Refundo[playerid][1];
		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		RefundoGranaRemover(Refundo[playerid][0]);
	}
	return 1;
}

Dialog:RefundoItem(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{

		new etnia[64];
		switch (Refundo[playerid][1])
 		{
		 	case 1: { etnia = "Maconha Ruim"; PlayerDroga[playerid][MaconhaR] += Refundo[playerid][2];}
			case 2: { etnia = "Maconha Boa"; PlayerDroga[playerid][MaconhaB] += Refundo[playerid][2];}
			case 3: { etnia = "Maconha Excelente"; PlayerDroga[playerid][MaconhaE] += Refundo[playerid][2];}
			case 4: { etnia = "Cocaína Ruim"; PlayerDroga[playerid][CocaR] += Refundo[playerid][2];}
			case 5: { etnia = "Cocaína Boa"; PlayerDroga[playerid][CocaB] += Refundo[playerid][2];}
			case 6: { etnia = "Cocaína Excelente"; PlayerDroga[playerid][CocaE] += Refundo[playerid][2];}
			case 7: { etnia = "Crack Ruim"; PlayerDroga[playerid][CrackR] += Refundo[playerid][2];}
  			case 8: { etnia = "Crack Bom"; PlayerDroga[playerid][CrackB] += Refundo[playerid][2]; }
			case 9: { etnia = "Crack Excelente"; PlayerDroga[playerid][CrackE] += Refundo[playerid][2];}
			case 10: { etnia = "LSD Ruim"; PlayerDroga[playerid][LSDR] += Refundo[playerid][2];}
			case 11: { etnia = "LSD Bom"; PlayerDroga[playerid][LSDB] += Refundo[playerid][2];}
			case 12: { etnia = "LSD Excelente	"; PlayerDroga[playerid][LSDE] += Refundo[playerid][2];}
			case 13: { etnia = "Metanfetamina Ruim"; PlayerDroga[playerid][MetR] += Refundo[playerid][2];}
			case 14: { etnia = "Metanfetamina Boa"; PlayerDroga[playerid][MetB] += Refundo[playerid][2];}
  			case 15: { etnia = "Metanfetamina Excelente"; PlayerDroga[playerid][MetE] += Refundo[playerid][2];}
			case 16: { etnia = "Munição 9mm"; PlayerInfo[playerid][pMun9mm] += Refundo[playerid][2];}
			case 17: { etnia = "Munição 5x56 mm "; PlayerInfo[playerid][pMun556] += Refundo[playerid][2];}
			case 18: { etnia = "Cartucho"; PlayerInfo[playerid][pMunCart] += Refundo[playerid][2];}
			case 19: { etnia = "Munição 12.7x106mm"; PlayerInfo[playerid][pMun127] += Refundo[playerid][2];}
			case 20: { etnia = "Lança Perfume"; PlayerDroga[playerid][LancaPer] += Refundo[playerid][2];}
			case 21: { etnia = "Pasta base"; PlayerDroga[playerid][PBC] += Refundo[playerid][2];}
			case 22: { etnia = "Sementes"; PlayerDroga[playerid][Sementes] += Refundo[playerid][2];}
 		}
 		format(string, sizeof(string),"SERVER: Você recebeu o refundo de um de %s [%d unidades].", etnia,Refundo[playerid][2]);
		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		RefundoItemRemover(Refundo[playerid][0]);
	}
	return 1;
}
Dialog:RFArma(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    if(!IsNumeric(inputtext))
		{
	    	SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Digite sua chave de refundo numérica.");
	    	return 1;
		}
		new key = strval(inputtext);
		VerRefundoArma(playerid, key);

	}
	return 1;
}
Dialog:RFItem(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    if(!IsNumeric(inputtext))
		{
	    	SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Digite sua chave de refundo numérica.");
	    	return 1;
		}
		new key = strval(inputtext);
		VerRefundoItem(playerid, key);

	}
	return 1;
}
Dialog:RFGrana(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    if(!IsNumeric(inputtext))
		{
	    	SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Digite sua chave de refundo numérica.");
	    	return 1;
		}
		new key = strval(inputtext);
		VerRefundoGrana(playerid, key);

	}
	return 1;
}


IsNumeric(const str[])
{
	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if (i == 0 && str[0] == '-')
			continue;

	    else if (str[i] < '0' || str[i] > '9')
			return 0;
	}
	return 1;
}

Dialog:DIALOG_MDC_INFOP(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
 		Dialog_Show(playerid, DIALOG_MDC_INFOP2, DIALOG_STYLE_LIST,  "TABLET", "Checar veículos >>\nChecar residências >>\nChecar empresas >>\nChecar Complexos >>", "Checar", "Fechar");
	}
	return 1;
}

Dialog:DIALOG_MDC_INFOP2(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new Linha1[1024];
     	new vname[64], LinhaAtt[1024], area[TOTAL_ZONE_NAME];
     	format(Linha1, 1024, "");
	    switch(listitem)
	    {
 			case 0:
 			{
		        for(new i = 0; i < MAX_CA_VEHICLES; i ++)
				{
				    if(VehicleInfo[i][vOwner] == MDC_Variavel[playerid][3])
				    {
				        GetVehicleNameByModel(VehicleInfo[i][vModel],vname);
						format(LinhaAtt, 126, "Modelo: %s | Placa: %s\n", vname, VehicleInfo[i][vPlate]);
	     				strcat(Linha1, LinhaAtt);
					}
				}
				Dialog_Show(playerid, 99999, DIALOG_STYLE_MSGBOX, "TABLET", Linha1, "Fechar", "");
			}
			case 1:
 			{
		        for(new i = 0; i < MAX_HOUSES; i ++)
				{
				    if(HouseInfo[i][hDono] == MDC_Variavel[playerid][3])
				    {
				        if(HouseInfo[i][hExWorld] == 0)
				        {
 							Get2DZone(area, TOTAL_ZONE_NAME, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]);
 						}
 						else
 						{
 						    new complexid = (HouseInfo[i][hExWorld]-1000);
 						    for(new n = 0; n < MAX_COMPLEXOS; n++)
							{
							    if(ComplexoInfo[n][cID] == complexid)
							    {
 						    		Get2DZone(area, TOTAL_ZONE_NAME, ComplexoInfo[n][cExX], ComplexoInfo[n][cExY], ComplexoInfo[n][cExZ]);
 						    		format(area, TOTAL_ZONE_NAME, "No complexo %d em: %s", n, area);
									break;
								}
							}
						}
						format(LinhaAtt, 126, "Numero da Casa: %d | Endereço: %s | %s\n", i, HouseInfo[i][hEndereco], area);
	     				strcat(Linha1, LinhaAtt);
					}
				}
				Dialog_Show(playerid, 99999, DIALOG_STYLE_MSGBOX, "TABLET", Linha1, "Fechar", "");
			}
			case 2:
 			{
		        for(new i = 0; i < MAX_EMPRESAS; i ++)
				{
				    if(EmpInfo[i][eDono] == MDC_Variavel[playerid][3])
				    {
				        Get2DZone(area, TOTAL_ZONE_NAME, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]);
						format(LinhaAtt, 126, "Numero da Empresa: %d | Localização: %s\n", i, area);
	     				strcat(Linha1, LinhaAtt);
					}
				}
				Dialog_Show(playerid, 99999, DIALOG_STYLE_MSGBOX, "TABLET", Linha1, "Fechar", "");
			}
			case 3:
 			{
		        for(new i = 0; i < MAX_COMPLEXOS; i ++)
				{
				    if(ComplexoInfo[i][cDono] == MDC_Variavel[playerid][3])
				    {
				        Get2DZone(area, TOTAL_ZONE_NAME, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ]);
						format(LinhaAtt, 126, "Numero do Complexo: %d | Localização: %s\n", i, area);
	     				strcat(Linha1, LinhaAtt);
					}
				}
				Dialog_Show(playerid, 99999, DIALOG_STYLE_MSGBOX, "TABLET", Linha1, "Fechar", "");
			}
			case 4:
 			{
		        for(new i = 0; i < MAX_ARMAS; i ++)
				{
				    if(!strcmp(ArmaData[i][ArmaCompradaPor], MDC_NomePesq[playerid], false))
				    {
						format(LinhaAtt, 126, "Numeração: %d | Modelo: %s | Data da compra: %s\n", ArmaData[i][ArmaNumeracao], GunNames[ArmaData[i][ArmaModelo]], ArmaData[i][ArmaCompradaData]);
	     				strcat(Linha1, LinhaAtt);
					}
				}
				Dialog_Show(playerid, 99999, DIALOG_STYLE_MSGBOX, "TABLET", Linha1, "Fechar", "");
			}
		}
	}
	return 1;
}


forward ConsultarCrimes_MDC(playerid,Nome[]);
public ConsultarCrimes_MDC(playerid,Nome[])
{
    new Rows, Fields;
	cache_get_data(Rows, Fields);
	format(string, sizeof(string),"_______Crimes de %s_______",Nome);
	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
 	if(Rows)
  	{
  	    new tmp[130];
  	    new MsgText[2][256];

  	    for(new i ; i < Rows; i++)
		{
		    cache_get_field_content(i, "CriData", tmp);	format(MsgText[0], 24,"%s",tmp);
		    cache_get_field_content(i, "CriCrime", tmp);format(MsgText[1], 256,"%s",tmp);

		    format(string, sizeof(string),"[#%d] %s | %s", i, MsgText[0], MsgText[1]);
	     	SendClientMessage(playerid, COLOR_WHITE, string);
		}
  	}
  	else SendClientMessage(playerid, COLOR_WHITE, "* Este cidadão tem uma ficha limpa.");
  	return 1;
}

Dialog:Dialog_MDC_PLACA(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new StrMD[64];
	    format(StrMD, sizeof(StrMD),"%s",inputtext);
	    format(string,sizeof(string),"SELECT * FROM rp_vehicles WHERE plate = '%s'",StrMD);
     	mysql_function_query(Pipeline, string, true, "Infos_MDCPlaca", "d", playerid);
	}
	return 1;
}

forward Infos_MDCPlaca(playerid);
public Infos_MDCPlaca(playerid)
{
    new b[256];
	new rows,fields;
	cache_get_data(rows, fields);
	new Carros = rows;
	new Variavel[10];
	new NameDono[24];
	new NamePlaca[32];
	if(rows)
  	{
	 	for(new i; i < Carros; i++)
	  	{
			cache_get_field_content(i,"model",b);				Variavel[0] = strval(b);
			cache_get_field_content(i,"owner_name",b);			format(NameDono, 24,"%s",b);
	        cache_get_field_content(i,"plate",b);				format(NamePlaca,32,"%s",b);

	        new stringmdc[1024];
			new vname[64];
			GetVehicleNameByModel(Variavel[0],vname);

			format(stringmdc, sizeof(stringmdc), "Modelo:\t%s\nPlaca:\t%s\nProprietário:\t%s", vname, NamePlaca, NameDono);
	 		Dialog_Show(playerid, 999999, DIALOG_STYLE_MSGBOX, "TABLET", stringmdc, "Fechar", "");
	  	}
	}
  	else
  	{
  	    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Placa não encontrado no banco de dados.");
  	}
	return 1;
}

Dialog:Dialog_MDC_VEHID(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else {
	    new VehicleID = strval(inputtext);
	    new slot = GetVehicleSlot(VehicleID);
	    if(slot > -1) {
	    	new stringmdc[1024];
	    	new vname[64];
     		GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);

	    	format(stringmdc, sizeof(stringmdc), "Modelo:\t%s\nPlaca:\t\t%s\nProprietário:\t%s", vname, VehicleInfo[slot][vPlate], VehicleInfo[slot][vOwnerName]);
	    	Dialog_Show(playerid, 999999, DIALOG_STYLE_MSGBOX, "TABLET", stringmdc, "Fechar", "");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} ID inválido.");
	}
	return 1;
}

Dialog:Dialog_MDC_APPCRIME(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new Other = strval(inputtext);
   		if(Other < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido.");
	    if(!PlayerInfo[Other][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} ID inválido.");
	    MDC_INFO[playerid] = Other;
	    Dialog_Show(playerid, Dialog_MDC_APPCRIME2, DIALOG_STYLE_INPUT, "TABLET", "Digite o crime cometido pelo jogador.", "Adicionar", "Cancelar");
	}
	return 1;
}

Dialog:Dialog_MDC_APPCRIME2(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    if(strlen(inputtext) > 2)
		{
	    	format(MDC_INFO2[playerid], 256,"%s",inputtext);
        	format(string,sizeof(string),"INSERT INTO crimes (CriOwn) VALUES ('%d')", MDC_INFO[playerid]);
    		mysql_function_query(Pipeline, string, true, "CriandoCrime", "d",playerid);
		}
		else
		{
		    Dialog_Show(playerid, Dialog_MDC_APPCRIME2, DIALOG_STYLE_INPUT, "TABLET", "Digite o crime cometido pelo jogador:", "Adicionar", "Cancelar");
		}
	}
	return 1;
}

forward CriandoCrime(playerid);
public CriandoCrime(playerid)
{
	new CrimID = cache_insert_id();

    CrimeData[CrimID][CriID] = CrimID;
    CrimeData[CrimID][CriOwn] = MDC_INFO[playerid];
	format(CrimeData[CrimID][CriOwnN], 24, "%s", PlayerInfo[MDC_INFO[playerid]][pNomeP]);
	format(CrimeData[CrimID][CriData], 32, "%s", ReturnDate());
	format(CrimeData[CrimID][CriCrime], 256, "%s", MDC_INFO2[playerid]);

	format(string, sizeof(string), "Você adicionou um crime a ficha de %s (Crime cometido %s)", PlayerName(MDC_INFO[playerid], 0), MDC_INFO2[playerid]);
 	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

 	SalvarCrime(playerid,CrimID);
    return 1;
}

COMMAND:darlicenca(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}Você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pFacCargo] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem acesso a este comando.");

    new other, stringrt[126];
	if (sscanf(params, "i",other)) SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /darlicenca [playerid]");
	else
	{
	    if(GetDistanceBetweenPlayers(playerid,other) < 5.0)
		{
 			if(PlayerInfo[playerid][pFac] != FAC_TIPO_PMERJ)
    		{
    			if(PlayerInfo[other][pWepLic] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player já tem uma licença de armas.");

		    	format(stringrt, sizeof(stringrt), "Você deu a licença de armas para %s.", PlayerName(other, 1));
		    	SendClientMessage(other, COLOR_LIGHTGREEN, stringrt);
		    	format(stringrt, sizeof(stringrt), "%s deu a você a licença de armas.", PlayerName(other, 1));
		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, stringrt);
            	PlayerInfo[other][pWepLic] = 1;
			}
		}
		else
		{
  			SendClientMessage(playerid,COLOR_GREY,"Você não está próximo deste jogador!");
		}
	}
	return 1;
}

COMMAND:darlicencavoo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}Você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pFacCargo] < 9) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem acesso a este comando.");

    new other, stringrt[126];
	if (sscanf(params, "i",other)) SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /darlicenca [playerid]");
	else
	{
	    if(GetDistanceBetweenPlayers(playerid,other) < 5.0)
		{
			if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ)
			{
			    if(PlayerInfo[playerid][pFlyLic] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você já tem uma licença de voo.");
				PlayerInfo[playerid][pFlyLic] = 1;

				format(stringrt, sizeof(stringrt), "Você deu a licença de voo para %s.", PlayerName(other, 1));
		    	SendClientMessage(other, COLOR_LIGHTGREEN, stringrt);
		    	format(stringrt, sizeof(stringrt), "%s deu a você a licença de voo.", PlayerName(other, 1));
		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, stringrt);
			}
		}
		else
		{
  			SendClientMessage(playerid,COLOR_GREY,"Você não está próximo deste jogador!");
		}
	}
	return 1;
}

COMMAND:licenciar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] < 3000) return 1;

    new other, stringrt[126];
	if (sscanf(params, "i",other)) SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /licenciar [playerid]");
	else
	{
		format(stringrt, sizeof(stringrt), "[AdmCmd]: Você deu a licença de armas para %s.", PlayerName(other, 1));
 		SendClientMessage(other, COLOR_LIGHTGREEN, stringrt);

		if(PlayerInfo[playerid][pAdmin] > 3001) format(stringrt, sizeof(stringrt), "O administrador %s deu a você a licença de armas tipo A.", PlayerInfo[playerid][pNomeOOC]);
		else format(stringrt, sizeof(stringrt), "O administrador %s deu a você a licença de armas tipo A.", PlayerName(other, 1));
		SendClientMessage(playerid, COLOR_LIGHTGREEN, stringrt);
		PlayerInfo[other][pWepLic] = 1;
	}
	return 1;
}

COMMAND:mare(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ)
 	{
	    if(PlayerInfo[playerid][pFacCargo] < 4) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem acesso a este comando.");

	    new other[256];
		if (sscanf(params, "s[256]",other)) SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /mare [texto]");
		else
		{
		    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
			format(string, sizeof(string), "**[CH: 190, S: 1] MARE 0: %s **", other);
			SendFacMessage(0xFFFF79FF,FacId,string);
			return 1;
		}
	}
	return 1;
}

COMMAND:cecopol(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ)
 	{
        if(PlayerInfo[playerid][pFacCargo] < 4) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem acesso a este comando.");

        new other[256];
        if (sscanf(params, "s[256]",other)) SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /cecopol [texto]");
        else
        {
            new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
            format(string, sizeof(string), "**[CH: 191, S: 1] CECOPOL: %s **", other);
            SendFacMessage(0xFFFF79FF,FacId,string);
            return 1;
        }
    }
    return 1;
}

COMMAND:cocb(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_CBERJ)
 	{
        if(PlayerInfo[playerid][pFacCargo] < 4) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem acesso a este comando.");

        new other[256];
        if (sscanf(params, "s[256]",other)) SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /cocb [texto]");
        else
        {
            new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
            format(string, sizeof(string), "**[CH: 193, S: 1] COCB: %s **", other);
            SendFacMessage(0xFFFF79FF,FacId,string);
            return 1;
        }
    }
    return 1;
}

COMMAND:revistar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");

    new other, stringrt[126];
	if (sscanf(params, "i",other)) SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /revistar [playerid]");
	else
	{
	    if(GetDistanceBetweenPlayers(playerid,other) < 5.0)
		{
		    format(stringrt, sizeof(stringrt), "SERVER: Você está tentando revistar %s, aguarde até ele aceitar.", PlayerName(other, 1));
		    SendClientMessage(playerid, COLOR_YELLOW, stringrt);
		    format(stringrt, sizeof(stringrt), "SERVER: %s está tentando te revistar, você precisa aceitar para isso(/aceitar revista) ", PlayerName(playerid, 1));
		    SendClientMessage(other, COLOR_YELLOW, stringrt);

	    	SetPVarInt(other, "QuerRevistar", playerid);
    	}
		else
		{
  			SendClientMessage(playerid,COLOR_LIGHTRED,"Você não está próximo deste jogador!");
		}
	}
	return 1;
}

ALTCOMMAND:sairfac->sairdafaccao;
ALTCOMMAND:pedircontas->sairdafaccao;
COMMAND:sairdafaccao(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pFac] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em uma facção para utilizar este comando.");

   	format(string, sizeof(string), "((%s saiu da facção))", PlayerName(playerid, 1));
   	SendFacMessage(0x7BDDA5AA,GetFactionBySqlId(PlayerInfo[playerid][pFac]), string);
    FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fMembros]--;

	PlayerInfo[playerid][pFac] = 0;
	return 1;
}

COMMAND:demitir(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pFac] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em uma facção para utilizar este comando.");

    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ || FacInfo[FacId][fTipo] == FAC_TIPO_GOV || FacInfo[FacId][fTipo] == FAC_TIPO_TJRP || FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ || FacInfo[FacId][fTipo] == FAC_TIPO_BANK)
    {
    	if(PlayerInfo[playerid][pFacCargo] < 9)
     	{
      		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissão para demitir.");
        	return 1;
        }
	}
	else if(FacInfo[FacId][fTipo] == FAC_TIPO_PRIXY)
	{
		if(PlayerInfo[playerid][pFacCargo] < 9)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissão para demitir.");
			return 1;
		}
	}
	else if(10 < FacInfo[FacId][fTipo] < 18)
 	{
  		if(PlayerInfo[playerid][pFacCargo] < 5)
    	{
     		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissão para demitir.");
       		return 1;
        }
	}

    new other, stringrt[128];
	if (sscanf(params, "i",other)) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /demitir [playerid]");
	else
	{
	    if(PlayerInfo[playerid][pFac] == PlayerInfo[other][pFac])
	    {
		    format(stringrt, sizeof(stringrt), "%s demitiu você da facção.", PlayerName(playerid, 0));
            SendClientMessage(other, COLOR_YELLOW, stringrt);
		    format(stringrt, sizeof(stringrt), "Você demitiu %s da sua facção.", PlayerName(other, 0));
		    SendClientMessage(playerid, COLOR_YELLOW, stringrt);
	        FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fMembros]--;

		    PlayerInfo[other][pFac] = 0;
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED,"Este player não é da sua facção");
	}
	return 1;
}

COMMAND:convidar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pFac] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em uma facção para utilizar este comando.");

    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ || FacInfo[FacId][fTipo] == FAC_TIPO_BANK || FacInfo[FacId][fTipo] == FAC_TIPO_TJRP || FacInfo[FacId][fTipo] == FAC_TIPO_GOV || FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ)
    {
    	if(PlayerInfo[playerid][pFacCargo] < 9)
     	{
      		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissão para convidar.");
        	return 1;
        }
	}
	else if(FacInfo[FacId][fTipo] == FAC_TIPO_PRIXY)
	{
		if(PlayerInfo[playerid][pFacCargo] < 9)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissão para convidar");
			return 1;
		}
	}
	else if(10 < FacInfo[FacId][fTipo] < 18)
 	{
  		if(PlayerInfo[playerid][pFacCargo] < 5)
    	{
     		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissão para convidar.");
       		return 1;
        }
	}


    new other, stringrt[128];
	if (sscanf(params, "i",other)) SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /convidar [playerid]");
	else
	{
		if(other == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode se convidar.");
	    if(PlayerInfo[other][pFac] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player já pertence a outra facção.");

	    format(stringrt, sizeof(stringrt), "%s convidou você para participar da '%s'. (/aceitar faccao)", PlayerName(playerid, 0), FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fNome]);
	    SendClientMessage(other, COLOR_YELLOW, stringrt);
	    format(stringrt, sizeof(stringrt), "%s foi convidado para participar de sua facção.", PlayerName(other, 0));
	    SendClientMessage(playerid, COLOR_YELLOW, stringrt);

	    convidado[other] = PlayerInfo[playerid][pFac];
	}
	return 1;
}

ALTCOMMAND:cump->cumprimentar;
ALTCOMMAND:cumprimento->cumprimentar;
COMMAND:cumprimentar(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid, cumpid;
	if(sscanf(params, "ui", targetid, cumpid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} (/cump)rimentar [id] [1-8]");
	else
	{
     	if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if (playerid == targetid) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode cumprimentar você mesmo.");
	    if(cumpid > 0 && cumpid < 9)
	    {
			if(IsPlayerConnected(targetid))
			{
			    if(GetDistanceBetweenPlayers(playerid,targetid) < 3.0)
				{
					SetPVarInt(targetid, "CumpInvite", playerid);
					SetPVarInt(targetid, "CumpID", cumpid);

	        	    SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Pedido de cumprimento enviado, aguarde até o outro jogador aceitar.");
	            	format(string, sizeof(string), "SERVER: %s gostaria de lhe cumprimentar (/aceitar cumprimento).", PlayerName(playerid, 1));
	            	SendClientMessage(targetid,COLOR_YELLOW,string);
	   			}
	   			else
	   			{
	   			    SendClientMessage(playerid,COLOR_LIGHTRED,"Você não está próximo suficiente deste jogador!");
	   			}
			}
		}
		return SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} (/cump)rimentar [id] [1-8]");
	}
}

stock SetPlayerToFacePlayer(playerid, targetid)
{
    new Float:pX,Float:pY,Float:pZ, Float:X,Float:Y,Float:Z, Float:ang;
    if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid)) return 0;
    GetPlayerPos(targetid, X, Y, Z);
    GetPlayerPos(playerid, pX, pY, pZ);
    if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
    else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
    else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
    if(X > pX) ang = (floatabs(floatabs(ang) + 180.0));
    else ang = (floatabs(ang) - 180.0);
    return SetPlayerFacingAngle(playerid, ang);
}

COMMAND:aceitar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new stringrt[64];
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    new option[56], InvId;
	if(sscanf(params,"s[56]",option, InvId))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /aceitar [faccao - cumprimento - revista - luta - hotdog] | Exemplo: /aceitar faccao.");
		return 1;
	}
    if(strcmp(option, "faccao", true) == 0)
	{
	    if(PlayerInfo[playerid][pFac] != 0)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode estar em uma facção para utilizar este comando.");
			convidado[playerid] = 999;
			return 1;
		}
	    if(convidado[playerid] == 999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não recebeu nenhum convite de facção.");

        format(stringrt, sizeof(stringrt), "Você é agora um membro da '%s'.", FacInfo[GetFactionBySqlId(convidado[playerid])][fNome]);
	    SendClientMessage(playerid, COLOR_YELLOW, stringrt);
	    FacInfo[GetFactionBySqlId(convidado[playerid])][fMembros]++;

	    PlayerInfo[playerid][pFac] = convidado[playerid];
		setarPlayerFaccao(playerid, GetFactionBySqlId(convidado[playerid]), 1);
	    convidado[playerid] = 999;
	}
	else if(strcmp(option, "hotdog", true) == 0)
	{
 		if(HotDogAccept[playerid] == 1)
   		{
   		    if(HotDogOffer[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Ninguém lhe ofereceu um HotDog, ou o vendedor deslogou-se.");
			if(GetDistanceBetweenPlayers(playerid,HotDogOffer[playerid]) < 5.0)
			{
			    if(PlayerInfo[playerid][pGrana] < HotDogPrice[playerid])
			    {
			        SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro o suficiente para comprar um HotDog.");
					HotDogPrice[playerid] = 0;
					HotDogOffer[playerid] = 0;
					HotDogAccept[playerid] = 0;
					return 1;
			    }
			    new vid = GetPlayerVehicleID(HotDogOffer[playerid]);
     			new modelid = GetVehicleModel(vid);
				if(modelid != 588) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O vendedor de HotDog não está mais no veículo!");

			    new str[256];
	    		format(str, 256, "%s aceitou seu hotdog por R$%d.", PlayerName(playerid,1),HotDogPrice[playerid]);
		   		SendClientMessage(HotDogOffer[playerid], COLOR_LIGHTBLUE, str);
		   		format(str, 256, "Você aceitou o hotdog de %s por R$%d.", PlayerName(HotDogOffer[playerid],1),HotDogPrice[playerid]);
		   		SendClientMessage(playerid, COLOR_LIGHTBLUE, str);

				PlayerInfo[playerid][pGrana] -= HotDogPrice[playerid];
     			PlayerInfo[HotDogOffer[playerid]][pGrana] += HotDogPrice[playerid];

                HotDogPrice[playerid] = 0;
				HotDogOffer[playerid] = 0;
				HotDogAccept[playerid] = 0;

				new Float:Vida, Float:VidaFinal;
 				GetPlayerHealth(playerid, Vida);
				VidaFinal = Vida+50;
 				if(VidaFinal > PlayerInfo[playerid][pHealthMax]) VidaFinal = PlayerInfo[playerid][pHealthMax];
 				SetPlayerHealth(playerid, VidaFinal);
    			P_Health[playerid] = VidaFinal;
    			God_VidaAnterior2[playerid] = VidaFinal;
    			God_Aviso2[playerid] = 0;
	 			return 1;
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo ao vendedor de HotDog.");
		}
	}
	else if(strcmp(option, "revista", true) == 0)
 	{
		if(GetPVarInt(playerid, "QuerRevistar") != 9999)
    	{
    	    if(IsPlayerConnected(GetPVarInt(playerid, "QuerRevistar")))
	    	{
	    	    if(GetDistanceBetweenPlayers(playerid,GetPVarInt(playerid, "QuerRevistar")) < 5.0)
				{
					new IdQVaiVer = GetPVarInt(playerid, "QuerRevistar");

                    format(string, sizeof(string), "_____Itens de %s_______", PlayerName(playerid, 1));
                    SendClientMessage(IdQVaiVer, COLOR_COPDUTY, string);
                    format(string, sizeof(string), "Dinheiro: [%d]", PlayerInfo[playerid][pGrana]);
					format(string, sizeof(string), "Dinheiro Sujo: [%d]", PlayerInfo[playerid][pGranaSuja]);
                    SendClientMessage(IdQVaiVer, COLOR_YELLOW, string);
                    SendClientMessage(IdQVaiVer, COLOR_COPDUTY, "__________________________");
				    new Arma1[126],Arma2[126],Arma3[126],Arma4[126],Arma5[126],Armas[856];
					if(PlayerInfo[playerid][pSlot1] > 0) format(Arma1, sizeof(Arma1), "1. %s [Munição:%d]", GunNames[ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo]], PlayerInfo[playerid][pSlot1a]);
					else format(Arma1, sizeof(Arma1), "1. Vazio [Munição:0]");
					if(PlayerInfo[playerid][pSlot2] > 0) format(Arma2, sizeof(Arma2), "2. %s [Munição:%d]", GunNames[ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo]], PlayerInfo[playerid][pSlot2a]);
                    else format(Arma2, sizeof(Arma2), "2. Vazio [Munição:0]");
					if(PlayerInfo[playerid][pSlot3] > 0) format(Arma3, sizeof(Arma3), "3. %s [Munição:%d]", GunNames[ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo]], PlayerInfo[playerid][pSlot3a]);
                    else format(Arma3, sizeof(Arma3), "3. Vazio [Munição:0]");
					if(PlayerInfo[playerid][pSlot4] > 0) format(Arma4, sizeof(Arma4), "4. %s [Munição:%d]", GunNames[ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo]], PlayerInfo[playerid][pSlot4a]);
                    else format(Arma4, sizeof(Arma4), "4. Vazio [Munição:0]");
					if(PlayerInfo[playerid][pSlot5] > 0) format(Arma5, sizeof(Arma5), "5. %s [Munição:%d]", GunNames[ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo]], PlayerInfo[playerid][pSlot5a]);
					else format(Arma5, sizeof(Arma5), "5. Vazio [Munição:0]");

	    			SendClientMessage(IdQVaiVer, COLOR_LIGHTGREEN, "_______Inventário de armas:_______");
	    			format(Armas, sizeof(Armas), "Na mão: %s | No corpo: %s", GunNames[ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaModelo]], GunNames[ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo]]); SendClientMessage(IdQVaiVer, COLOR_WHITE, Armas);
	    			format(Armas, sizeof(Armas), "%s %s %s", Arma1, Arma2, Arma3); SendClientMessage(IdQVaiVer, COLOR_WHITE, Armas);
	    			format(Armas, sizeof(Armas), "%s %s", Arma4, Arma5); SendClientMessage(IdQVaiVer, COLOR_WHITE, Armas);
	    			//=======================================================================================================================
	    			new Ammo1[126],Ammo2[126],Ammo3[126],Ammo4[126],Ammos[526];
					if(PlayerInfo[playerid][pMun9mm] > 0) format(Ammo1, sizeof(Ammo1), "1. 9mm [%d balas]", PlayerInfo[playerid][pMun9mm]); else format(Ammo1, sizeof(Ammo1), "1. 9mm [Munição:0]");
					if(PlayerInfo[playerid][pMun556] > 0) format(Ammo2, sizeof(Ammo2), "2. 5x56mm [%d balas]", PlayerInfo[playerid][pMun556]); else format(Ammo2, sizeof(Ammo2), "2. 5x56mm [Munição:0]");
					if(PlayerInfo[playerid][pMunCart] > 0) format(Ammo3, sizeof(Ammo3), "3. Cartucho [%d cartuchos]", PlayerInfo[playerid][pMunCart]); else format(Ammo3, sizeof(Ammo3), "3. Cartucho [0 cartuchos]");
					if(PlayerInfo[playerid][pMun127] > 0) format(Ammo4, sizeof(Ammo4), "4. 12.7x106mm [%d balas]", PlayerInfo[playerid][pMun127]); else format(Ammo4, sizeof(Ammo4), "4. 12.7x106mm [%d balas]");

                    SendClientMessage(IdQVaiVer, COLOR_LIGHTGREEN, "_______Inventário de munições:_______");
					format(Ammos, sizeof(Ammos), "%s %s", Ammo1, Ammo2); SendClientMessage(IdQVaiVer, COLOR_WHITE, Ammos);
					format(Ammos, sizeof(Ammos), "%s %s", Ammo2, Ammo4); SendClientMessage(IdQVaiVer, COLOR_WHITE, Ammos);
					//=======================================================================================================================
					ShowDrugs(IdQVaiVer, playerid);
					ShowIngredientes(IdQVaiVer, playerid);
					//=======================================================================================================================

					//=======================================================================================================================
					new strSendoRevistado[128];
					new targetid;
					format(strSendoRevistado, sizeof(strSendoRevistado), "%s esta revistando você.", PlayerName(targetid, 0));
					SendClientMessage(playerid, COLOR_COPDUTY, strSendoRevistado);
				    SetPVarInt(playerid, "QuerRevistar", 9999);
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo ao player.");
	    	}
	    	else SendClientMessage(playerid, COLOR_LIGHTRED, "O player não está mais online."), SetPVarInt(playerid, "QuerRevistar", 9999);
    	}
    	else SendClientMessage(playerid, COLOR_LIGHTRED, "Ninguém está tentando revista-lo.");
	}
	else if(strcmp(option, "cumprimento", true) == 0)
 	{
  		if(GetPVarInt(playerid, "CumpInvite") != 9999)
    	{
     		if(IsPlayerConnected(GetPVarInt(playerid, "CumpInvite")))
	    	{
   				if(GetDistanceBetweenPlayers(playerid,GetPVarInt(playerid, "CumpInvite")) < 5.0)
				{
          			SetPlayerToFacePlayer(playerid, GetPVarInt(playerid, "CumpInvite"));
          			switch(GetPVarInt(playerid, "CumpID"))
          			{
          			    case 1:
          			    {
          			        ApplyAnimation(playerid,"GANGS","hndshkaa",4.0,0,0,0,0,0);
			            	ApplyAnimation(GetPVarInt(playerid, "CumpInvite"),"GANGS","hndshkaa",4.0,0,0,0,0,0);
          			    }
          			    case 2:
          			    {
          			        ApplyAnimation(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
			            	ApplyAnimation(GetPVarInt(playerid, "CumpInvite"),"GANGS","hndshkba",4.0,0,0,0,0,0);
          			    }
          			    case 3:
          			    {
          			        ApplyAnimation(playerid,"GANGS","hndshkca",4.0,0,0,0,0,0);
			            	ApplyAnimation(GetPVarInt(playerid, "CumpInvite"),"GANGS","hndshkca",4.0,0,0,0,0,0);
          			    }
          			    case 4:
          			    {
          			        ApplyAnimation(playerid,"GANGS","hndshkcb",4.0,0,0,0,0,0);
			            	ApplyAnimation(GetPVarInt(playerid, "CumpInvite"),"GANGS","hndshkcb",4.0,0,0,0,0,0);
          			    }
          			    case 5:
          			    {
          			        ApplyAnimation(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
			            	ApplyAnimation(GetPVarInt(playerid, "CumpInvite"),"GANGS","hndshkda",4.0,0,0,0,0,0);
          			    }
          			    case 6:
          			    {
          			        ApplyAnimation(playerid,"GANGS","hndshkea",4.0,0,0,0,0,0);
			            	ApplyAnimation(GetPVarInt(playerid, "CumpInvite"),"GANGS","hndshkea",4.0,0,0,0,0,0);
          			    }
          			    case 7:
          			    {
          			        ApplyAnimation(playerid,"GANGS","hndshkfa",4.0,0,0,0,0,0);
			            	ApplyAnimation(GetPVarInt(playerid, "CumpInvite"),"GANGS","hndshkfa",4.0,0,0,0,0,0);
          			    }
	        			case 8:
						{
							ApplyAnimation(playerid,"GANGS","prtial_hndshk_biz_01",4.0,0,0,0,0,0);
           					ApplyAnimation(GetPVarInt(playerid, "CumpInvite"),"GANGS","prtial_hndshk_biz_01",4.0,0,0,0,0,0);
						}
			        }
			        SetPVarInt(playerid, "CumpInvite", 9999);
			        SetPVarInt(playerid, "CumpID", 0);
				}
      			else SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar perto da pessoa que lhe ofereceu o cumprimento.");
 			}
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "A pessoa que lhe ofereceu um cumprimento está offline."), SetPVarInt(playerid, "ShakeOffer", 501);
      	}
       	else SendClientMessage(playerid, COLOR_LIGHTRED, "Ninguém lhe ofereceu um cumprimento.");
   	}
   	else if(strcmp(option, "luta", true) == 0)
 	{
 	    new targetid = GetPVarInt(playerid, "OfereceLuta");
 	    if(targetid != 999)
 	    {
	   		if(GetDistanceBetweenPlayers(playerid,targetid) < 4.0)
			{
			    switch(GetPVarInt(playerid, "OfereceuLuta"))
			    {
			        case 4:
					{
					    format(stringrt, sizeof(stringrt), "Você aceitou a proposta de %s e aprendeu a lutar. 'Normal'.", PlayerName(targetid, 1));
			    		SendClientMessage(playerid, COLOR_LIGHTGREEN, stringrt);
			    		format(stringrt, sizeof(stringrt), "%s aceitou aprender a lutar 'Normal'", PlayerName(playerid, 1));
			    		SendClientMessage(targetid, COLOR_LIGHTGREEN, stringrt);
			    		PlayerInfo[playerid][pLutaStyle] = 4;
			    		SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pLutaStyle]);
					}
			        case 5:
			        {
			            format(stringrt, sizeof(stringrt), "Você aceitou a proposta de %s e aprendeu a lutar. 'Boxing'.", PlayerName(targetid, 1));
			    		SendClientMessage(playerid, COLOR_LIGHTGREEN, stringrt);
			    		format(stringrt, sizeof(stringrt), "%s aceitou aprender a lutar 'Boxing'", PlayerName(playerid, 1));
			    		SendClientMessage(targetid, COLOR_LIGHTGREEN, stringrt);
			    		PlayerInfo[playerid][pLutaStyle] = 5;
			    		SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pLutaStyle]);
			        }
			        case 6:
			        {
			            format(stringrt, sizeof(stringrt), "Você aceitou a proposta de %s e aprendeu a lutar. 'KungFu'.", PlayerName(targetid, 1));
			    		SendClientMessage(playerid, COLOR_LIGHTGREEN, stringrt);
			    		format(stringrt, sizeof(stringrt), "%s aceitou aprender a lutar 'KungFu'", PlayerName(playerid, 1));
			    		SendClientMessage(targetid, COLOR_LIGHTGREEN, stringrt);
			    		PlayerInfo[playerid][pLutaStyle] = 6;
			    		SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pLutaStyle]);
			        }
			        case 15:
			        {
			            format(stringrt, sizeof(stringrt), "Você aceitou a proposta de %s e aprendeu a lutar. 'GrabKick'.", PlayerName(targetid, 1));
			    		SendClientMessage(playerid, COLOR_LIGHTGREEN, stringrt);
			    		format(stringrt, sizeof(stringrt), "%s aceitou aprender a lutar 'GrabKick'", PlayerName(playerid, 1));
			    		SendClientMessage(targetid, COLOR_LIGHTGREEN, stringrt);
			    		PlayerInfo[playerid][pLutaStyle] = 15;
			    		SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pLutaStyle]);
			        }
			    }
                SetPVarInt(playerid, "OfereceLuta", 999);
		    	SetPVarInt(playerid, "OfereceuLuta", 999);
	    	}
			else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo deste jogador!");
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Ninguém lhe ofereceu um aprendizado de luta.");
	}
	return 1;
}

COMMAND:chamada(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    new playa;
	if(sscanf(params,"d",playa))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /chamada [ID]");
		return 1;
	}
	else
	{
	    if(PlayerInfo[playerid][pJob] == JOB_TAXISTA)
	    {
	  		if(TransportDuty[playerid] != 1)
	    	{
	     		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em serviço como taxista.");
		    	return 1;
		    }
	     	if(TaxiCallTime[playerid] > 0)
	     	{
	      		SendClientMessage(playerid, COLOR_GREY, "ERRO:{FFFFFF} Você já aceitou uma chamada.");
			    return 1;
	      	}
	       	if(ChamouTaxi[playa] != 1)
	       	{
	       	    SendClientMessage(playerid, COLOR_GREY, "ERRO:{FFFFFF} Este player não chamou um taxi.");
			    return 1;
	      	}
	      	if(IsPlayerConnected(playa))
	      	{
	      	    new string1[256];
	  		   	format(string1, sizeof(string1), "Você aceitou a chamada de %s, você vai ver o player marcado no mapa.",PlayerName(playa,1));
				SendClientMessage(playerid, COLOR_GREEN, string1);
				format(string1, sizeof(string1), "O taxista %s aceitou a sua chamada, aguarde no seu lugar.",PlayerName(playerid,1));
				SendClientMessage(playa, COLOR_GREEN, string1);
				TaxiCallTime[playerid] = 1;
				TaxiAccepted[playerid] = playa;
				ChamouTaxi[playa] = 0;
				return 1;
			}
		}
		else if(PlayerInfo[playerid][pJob] == JOB_MECANICO)
	    {
	        if(MecCallTime[playerid] > 0)
	     	{
	      		SendClientMessage(playerid, COLOR_GREY, "ERRO:{FFFFFF} Você já aceitou uma chamada.");
			    return 1;
	      	}
	        if(ChamouMec[playa] != 1)
	       	{
	       	    SendClientMessage(playerid, COLOR_GREY, "ERRO:{FFFFFF} Este player não chamou um taxi.");
			    return 1;
	      	}
	      	if(IsPlayerConnected(playa))
	      	{
	      	    new string1[256];
	  		   	format(string1, sizeof(string1), "Você aceitou a chamada de %s, você vai ver o player marcado no mapa.",PlayerName(playa,1));
				SendClientMessage(playerid, COLOR_GREEN, string);
				format(string1, sizeof(string1), "O mecanico %s aceitou a sua chamada, aguarde no seu lugar.",PlayerName(playerid,1));
				SendClientMessage(playa, COLOR_GREEN, string1);
				MecCallTime[playerid] = 1;
				MecAccepted[playerid] = playa;
				ChamouMec[playa] = 0;
				return 1;
			}
	    }
	    else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso a este comando.");
	}
	return 1;
}

COMMAND:membros(playerid, params[])
{
	new stringrt[128];
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pFac] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em uma facção para utilizar este comando.");
	SendClientMessage(playerid, COLOR_LIGHTGREEN, "Membros da facção online:");
    foreach (Player, i)
	{
	    if(PlayerInfo[i][pLogado] == 1 && PlayerInfo[i][pFac] == PlayerInfo[playerid][pFac])
	    {
			if(FacInfo[PlayerInfo[i][pFac]][fTipo] == FAC_TIPO_PMERJ)
			{
				if(PlayerInfo[i][pEmServico] != 0) format(stringrt, sizeof(stringrt), "{8d8dff}%s, %s.", GetPlayerCargo(i), PlayerName(i, 0));
    			else format(stringrt, sizeof(stringrt), "{A6B2B5}%s %s.", GetPlayerCargo(i), PlayerName(i, 0));
			}
            if(FacInfo[PlayerInfo[i][pFac]][fTipo] == FAC_TIPO_PCERJ)
            {
                if(PlayerInfo[i][pEmServico] != 0) format(stringrt, sizeof(stringrt), "{8d8dff}%s, %s.", GetPlayerCargo(i), PlayerName(i, 0));
                else format(stringrt, sizeof(stringrt), "{A6B2B5}%s %s.", GetPlayerCargo(i), PlayerName(i, 0));
            }
            if(FacInfo[PlayerInfo[i][pFac]][fTipo] == FAC_TIPO_GOV)
            {
                if(PlayerInfo[i][pEmServico] != 0) format(stringrt, sizeof(stringrt), "{8d8dff}%s, %s.", GetPlayerCargo(i), PlayerName(i, 0));
                else format(stringrt, sizeof(stringrt), "{A6B2B5}%s %s.", GetPlayerCargo(i), PlayerName(i, 0));
            }
            if(FacInfo[PlayerInfo[i][pFac]][fTipo] == FAC_TIPO_TJRP)
            {
                if(PlayerInfo[i][pEmServico] != 0) format(stringrt, sizeof(stringrt), "{8d8dff}%s, %s.", GetPlayerCargo(i), PlayerName(i, 0));
                else format(stringrt, sizeof(stringrt), "{A6B2B5}%s %s.", GetPlayerCargo(i), PlayerName(i, 0));
            }
            if(FacInfo[PlayerInfo[i][pFac]][fTipo] == FAC_TIPO_EB)
            {
                if(PlayerInfo[i][pEmServico] != 0) format(stringrt, sizeof(stringrt), "{8d8dff}%s, %s.", GetPlayerCargo(i), PlayerName(i, 0));
                else format(stringrt, sizeof(stringrt), "{A6B2B5}%s %s.", GetPlayerCargo(i), PlayerName(i, 0));
            }
            if(FacInfo[PlayerInfo[i][pFac]][fTipo] == FAC_TIPO_BANK)
            {
                if(PlayerInfo[i][pEmServico] != 0) format(stringrt, sizeof(stringrt), "{8d8dff}%s, %s.", GetPlayerCargo(i), PlayerName(i, 0));
                else format(stringrt, sizeof(stringrt), "{A6B2B5}%s %s.", GetPlayerCargo(i), PlayerName(i, 0));
            }
			else
			{
				format(stringrt, sizeof(stringrt), "%s %s.", GetPlayerCargo(i), PlayerName(i, 0));
			}
			SendClientMessage(playerid, COLOR_CINZA, stringrt);
		}
  	}
	return 1;
}

ALTCOMMAND:m->megafone;
COMMAND:megafone(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new text[128];

	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /m [mensagem do megafone]");
	else
	{
	    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
		if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ)
		{
		    new Veh = GetPlayerVehicleID(playerid);
		    if(GetVehicleModel(Veh) == 497 || GetVehicleModel(Veh) == 596 || GetVehicleModel(Veh) == 597 || GetVehicleModel(Veh) == 598 ||
			GetVehicleModel(Veh) == 599 || GetVehicleModel(Veh) == 601 || GetVehicleModel(Veh) == 427 || GetVehicleModel(Veh) == 430 ||
			GetVehicleModel(Veh) == 525 || GetVehicleModel(Veh) == 528 || GetVehicleModel(Veh) == 426 || GetVehicleModel(Veh) == 470 ||
			GetVehicleModel(Veh) == 427 || GetVehicleModel(Veh) == 472 || GetVehicleModel(Veh) == 595 || GetVehicleModel(Veh) == 563)
		    {
	  			format(string, sizeof(string), "[ %s:o< %s ]", PlayerName(playerid, 1), text);
				ProxDetector(60.0, playerid, string, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);

				for(new h = 0; h < sizeof(HouseInfo); h++)
				{
		    		if(IsPlayerInRangeOfPoint(playerid,5.0,HouseInfo[h][hInX],HouseInfo[h][hInY],HouseInfo[h][hInZ]))
		    		{
	            		foreach (Player,p)
						{
	                		if(IsPlayerInRangeOfPoint(p,30.0,HouseInfo[h][hExX],HouseInfo[h][hExY],HouseInfo[h][hExZ]))
	                		{
								if(GetPlayerVirtualWorld(p) == h+100)
								{
								    format(string, sizeof(string), "[PORTA] [ %s:o< %s]", PlayerName(playerid, 1), text);
					        		SendClientMessage(p, COLOR_YELLOW, string);
					    		}
							}
			    		}
		    		}
				}
				for(new h = 0; h < sizeof(GaragemInfo); h++)
				{
		    		if(IsPlayerInRangeOfPoint(playerid,5.0,GaragemInfo[h][hInX],GaragemInfo[h][hInY],GaragemInfo[h][hInZ]))
		    		{
	            		foreach (Player,p)
						{
	                		if(IsPlayerInRangeOfPoint(p,30.0,GaragemInfo[h][hExX],GaragemInfo[h][hExY],GaragemInfo[h][hExZ]))
	                		{
								if(GetPlayerVirtualWorld(p) == h+10000)
								{
								    format(string, sizeof(string), "[PORTA] [ %s:o< %s]", PlayerName(playerid, 1), text);
					        		SendClientMessage(p, COLOR_YELLOW, string);
					    		}
							}
			    		}
		    		}
				}
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "Este veículo não tem um megafone.");
		}
	}
	return 1;
}

CMD:prender(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]), StrMsg[124];

    if(IsPlayerInRangeOfPoint(playerid, 8, 1396.2954,-10.2383,1000.9221))
	{
	    if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ || FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ)
		{
		    new var, other;
			if (sscanf(params, "I(9999)I(9999)",other,var)) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /prender [playerid] [Tempo (Minutos)]");
			else
			{
			    if(other == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /prender [playerid] [Tempo (Minutos)]");
			    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /prender [playerid] [Tempo (Minutos)]");
			    if(!PlayerInfo[other][pLogado]) return 1;
			    if(GetDistanceBetweenPlayers(playerid,other) < 5.0)
				{
			    	//EB - Delegacia
			    	PlayerInfo[other][pPrisao] = 1;
					PlayerInfo[other][pTemPreso] = var;
					format(string, sizeof(string), "[Cadeia] O oficial %s lhe prendeu por %d minuto(s)", PlayerName(playerid,1),var);
					SendClientMessage(other, COLOR_LIGHTRED, string);
					SendClientMessage(other, COLOR_LIGHTRED,"Use /tempopreso para ver o tempo restante.");
					//SendClientMessage(other, COLOR_LIGHTRED,"[!] Aviso: O seu telefone foi desligado porque você está na cadeia. Não se esqueça de ligá-lo novamente quando você estiver fora!");

					ArmaData[PlayerInfo[other][pSlot1]][ArmaCor] = 1;
			        ArmaData[PlayerInfo[other][pSlot1]][ArmaCom] = 0;
			        SalvarArma(PlayerInfo[other][pSlot1]);
			        PlayerInfo[other][pSlot1] = 0;
					PlayerInfo[other][pSlot1a] = 0;

					ArmaData[PlayerInfo[other][pSlot2]][ArmaCor] = 1;
			        ArmaData[PlayerInfo[other][pSlot2]][ArmaCom] = 0;
			        SalvarArma(PlayerInfo[other][pSlot2]);
			        PlayerInfo[other][pSlot2] = 0;
					PlayerInfo[other][pSlot2a] = 0;

					ArmaData[PlayerInfo[other][pSlot3]][ArmaCor] = 1;
			        ArmaData[PlayerInfo[other][pSlot3]][ArmaCom] = 0;
			        SalvarArma(PlayerInfo[other][pSlot3]);
			        PlayerInfo[other][pSlot3] = 0;
					PlayerInfo[other][pSlot3a] = 0;

					ArmaData[PlayerInfo[other][pSlot4]][ArmaCor] = 1;
			        ArmaData[PlayerInfo[other][pSlot4]][ArmaCom] = 0;
			        SalvarArma(PlayerInfo[other][pSlot4]);
			        PlayerInfo[other][pSlot4] = 0;
					PlayerInfo[other][pSlot4a] = 0;

					ArmaData[PlayerInfo[other][pSlot5]][ArmaCor] = 1;
			        ArmaData[PlayerInfo[other][pSlot5]][ArmaCom] = 0;
			        SalvarArma(PlayerInfo[other][pSlot5]);
			        PlayerInfo[other][pSlot5] = 0;
					PlayerInfo[other][pSlot5a] = 0;

					DesarmandoPlayer[other] = 2;
					ResetPlayerWeapons(other);
					PlayerInfo[other][pArmaMao] = 0;
					RemovePlayerAttachedObject(other, 0);
					//========================================
			     	RemovePlayerAttachedObject(other, 0);
			        //========================================

			        SetPlayerPos(other, 1393.7780,-10.6594,1001.1442);


					format(StrMsg, sizeof(StrMsg), "[Cadeia] %s %s prendeu %s por %d minutos.", GetPlayerCargo(playerid), PlayerName(playerid, 0), PlayerName(other, 0), var);
  					SendFacMessage(COLOR_LIGHTRED,FacId,StrMsg);

					for(new m; m < MAX_ITENS; m++)
					{
						if(ItemInfo[m][iCriado] == 1)
						{
							if(ItemInfo[m][iCom] == PlayerInfo[other][pID])
							{
								if(ItemInfo[m][iUsando] == 1)
								{
                                    ItemInfo[m][iUsando] = 0;
				    				RemovePlayerAttachedObject(other, 7);
				    				RemovePlayerAttachedObject(other, 8);
				    				RemovePlayerAttachedObject(other, 9);
				    			}
							}
							if(PlayerInfo[other][pColde] > 0) RemovePlayerAttachedObject(other, 2);
						}
					}

				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está no portão do pavilhão do presidio.");
	}
	if(IsPlayerInRangeOfPoint(playerid, 15, 1396.2954,-10.2383,1000.9221)) //Departamento PMERJ
	{
		if(FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ || FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ)
		{
		    new var, other;
			if (sscanf(params, "I(9999)I(9999)",other,var)) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /prender [playerid] [Tempo (Minutos)]");
			else
			{
			    if(other == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /prender [playerid] [Tempo (Minutos)]");
			    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /prender [playerid] [Tempo (Minutos)]");
			    if(!PlayerInfo[other][pLogado]) return 1;
			    if(GetDistanceBetweenPlayers(playerid,other) < 5.0)
				{
			    	//EB - Delegacia
			    	PlayerInfo[other][pPrisao] = 2;
			    	SetPlayerPos(other, 1393.7780,-10.6594,1001.1442);
					PlayerInfo[other][pTemPreso] = var;
					format(string, sizeof(string), "[Cadeia] O oficial %s lhe prendeu por %d minuto(s)", PlayerName(playerid,1),var);
					SendClientMessage(other, COLOR_LIGHTRED, string);
					SendClientMessage(other, COLOR_LIGHTRED,"Use /tempopreso para ver o tempo restante.");
					//SendClientMessage(other, COLOR_LIGHTRED,"[!] Aviso: O seu telefone foi desligado porque você está na cadeia. Não se esqueça de ligá-lo novamente quando você estiver fora!");

					ArmaData[PlayerInfo[other][pSlot1]][ArmaCor] = 1;
			        ArmaData[PlayerInfo[other][pSlot1]][ArmaCom] = 0;
			        SalvarArma(PlayerInfo[other][pSlot1]);
			        PlayerInfo[other][pSlot1] = 0;
					PlayerInfo[other][pSlot1a] = 0;

					ArmaData[PlayerInfo[other][pSlot2]][ArmaCor] = 1;
			        ArmaData[PlayerInfo[other][pSlot2]][ArmaCom] = 0;
			        SalvarArma(PlayerInfo[other][pSlot2]);
			        PlayerInfo[other][pSlot2] = 0;
					PlayerInfo[other][pSlot2a] = 0;

					ArmaData[PlayerInfo[other][pSlot3]][ArmaCor] = 1;
			        ArmaData[PlayerInfo[other][pSlot3]][ArmaCom] = 0;
			        SalvarArma(PlayerInfo[other][pSlot3]);
			        PlayerInfo[other][pSlot3] = 0;
					PlayerInfo[other][pSlot3a] = 0;

					ArmaData[PlayerInfo[other][pSlot4]][ArmaCor] = 1;
			        ArmaData[PlayerInfo[other][pSlot4]][ArmaCom] = 0;
			        SalvarArma(PlayerInfo[other][pSlot4]);
			        PlayerInfo[other][pSlot4] = 0;
					PlayerInfo[other][pSlot4a] = 0;

					ArmaData[PlayerInfo[other][pSlot5]][ArmaCor] = 1;
			        ArmaData[PlayerInfo[other][pSlot5]][ArmaCom] = 0;
			        SalvarArma(PlayerInfo[other][pSlot5]);
			        PlayerInfo[other][pSlot5] = 0;
					PlayerInfo[other][pSlot5a] = 0;

					DesarmandoPlayer[other] = 2;
					ResetPlayerWeapons(other);
					PlayerInfo[other][pArmaMao] = 0;
					RemovePlayerAttachedObject(other, 0);
					//========================================
			     	RemovePlayerAttachedObject(other, 0);
			        //========================================


					format(StrMsg, sizeof(StrMsg), "[Cadeia] %s %s prendeu %s por %d minutos.", GetPlayerCargo(playerid), PlayerName(playerid, 0), PlayerName(other, 0), var);
  					SendFacMessage(COLOR_LIGHTRED,FacId,StrMsg);

					for(new m; m < MAX_ITENS; m++)
					{
						if(ItemInfo[m][iCriado] == 1)
						{
							if(ItemInfo[m][iCom] == PlayerInfo[other][pID])
							{
								if(ItemInfo[m][iUsando] == 1)
								{
                                    ItemInfo[m][iUsando] = 0;
				    				RemovePlayerAttachedObject(other, 7);
				    				RemovePlayerAttachedObject(other, 8);
				    				RemovePlayerAttachedObject(other, 9);
				    			}
							}
							if(PlayerInfo[other][pColde] > 0) RemovePlayerAttachedObject(other, 2);
						}
					}

				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está no portão do pavilhão do presidio.");
	}
	return 1;
}
COMMAND:armazem(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return 1;
	if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");

    new c = -1;
    if(PlayerInfo[playerid][pEntrouCasa] != -1) c = PlayerInfo[playerid][pEntrouCasa];
    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) c = PlayerInfo[playerid][pEntrouEmpresa];
    else if(PlayerInfo[playerid][pEntrouComplexo] != -1) c = PlayerInfo[playerid][pEntrouComplexo];
    else if(PlayerInfo[playerid][pEntrouGaragem] != -1) c = PlayerInfo[playerid][pEntrouGaragem];
    if(c == -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando aqui!");

    if(PlayerInfo[playerid][pEntrouCasa] != -1)
    {
	    if(HouseInfo[c][hCriada])
		{
		    if(HouseInfo[c][hDono] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não é possível utilizar o /armazem em uma casa sem dono.");
		    if(HouseInfo[c][hDono] == PlayerInfo[playerid][pID] || !strcmp(HouseInfo[c][hPerm1], PlayerName(playerid, 0), false) || !strcmp(HouseInfo[c][hPerm2], PlayerName(playerid, 0), false) || !strcmp(HouseInfo[c][hPerm3], PlayerName(playerid, 0), false))
			{
			    new StrArm[562];
				Menu_Armas[playerid][0] = 0;
				format(StrArm, sizeof(StrArm), "{007B00}Ver municões >>{FFFFFF}\nArmas:");
				if(PlayerInfo[playerid][pArmario1] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 1 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario1]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario1]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 1 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario2] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 2 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario2]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario2]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 2 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario3] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 3 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario3]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario3]][ArmaAmmo]);
					else format(StrArm, sizeof(StrArm), "%s\nSlot 3 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario4] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 4 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario4]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario4]][ArmaAmmo]);
				   else format(StrArm, sizeof(StrArm), "%s\nSlot 4 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario5] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 5 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario5]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario5]][ArmaAmmo]);
					else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario6] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 6 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario6]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario6]][ArmaAmmo]);
					else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario7] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 7 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario7]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario7]][ArmaAmmo]);
					else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario8] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 8 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario8]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario8]][ArmaAmmo]);
					else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario9] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 9 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario9]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario9]][ArmaAmmo]);
					else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario10] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 10 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario10]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario10]][ArmaAmmo]);
					else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
			    Dialog_Show(playerid, Armario_House, DIALOG_STYLE_LIST, "Armário", StrArm, "Selecionar", "Fechar");
			}
		}
		else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissões para usar o armazém nesta casa.");
	}
	return 1;
}

Dialog:Armario_House(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new StrArm[562];
	    switch(listitem)
	    {
	        case 0:
	        {
	            format(StrArm, sizeof(StrArm), "{007B00}<< Ver Armas{FFFFFF}\nMunições:\n9mm: %d",PlayerInfo[playerid][pArm9mm]);
				format(StrArm, sizeof(StrArm), "%s\n5x56mm: %d",StrArm,PlayerInfo[playerid][pArm556]);
				format(StrArm, sizeof(StrArm), "%s\nCartucho: %d",StrArm,PlayerInfo[playerid][pArmCart]);
				format(StrArm, sizeof(StrArm), "%s\n12.7x106mm: %d",StrArm,PlayerInfo[playerid][pArm127]);
				Dialog_Show(playerid, Municoes_House, DIALOG_STYLE_LIST, "Minhas Munições", StrArm, "Selecionar", "Cancelar");
	        }
	        case 1:
	        {
				Menu_Armas[playerid][0] = 0;
				format(StrArm, sizeof(StrArm), "{007B00}Ver municões >>{FFFFFF}\nArmas:");
				if(PlayerInfo[playerid][pArmario1] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 1 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario1]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario1]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 1 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario2] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 2 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario2]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario2]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 2 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario3] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 3 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario3]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario3]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 3 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario4] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 4 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario4]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario4]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 4 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario5] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 5 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario5]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario5]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario6] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 6 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario6]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario6]][ArmaAmmo]);
					else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario7] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 7 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario7]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario7]][ArmaAmmo]);
					else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario8] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 8 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario8]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario8]][ArmaAmmo]);
					else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario9] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 9 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario9]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario9]][ArmaAmmo]);
					else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario10] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 10 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario10]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario10]][ArmaAmmo]);
					else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
		    	Dialog_Show(playerid, Armario_House, DIALOG_STYLE_LIST, "[HOUSE] Armário", StrArm, "Selecionar", "Fechar");
	        }
	    	case 2:
	    	{
	    	    Menu_Armas[playerid][0] = 1;
	    	    format(StrArm, sizeof(StrArm), "Colocar\nPegar");
                Dialog_Show(playerid, Armario_House2, DIALOG_STYLE_LIST, "[HOUSE] Armário", StrArm, "Selecionar", "Cancelar");
			}
			case 3:
			{
                Menu_Armas[playerid][0] = 2;
	    	    format(StrArm, sizeof(StrArm), "Colocar\nPegar");
                Dialog_Show(playerid, Armario_House2, DIALOG_STYLE_LIST, "[HOUSE] Armário", StrArm, "Selecionar", "Cancelar");
			}
			case 4:
			{
                Menu_Armas[playerid][0] = 3;
	    	    format(StrArm, sizeof(StrArm), "Colocar\nPegar");
                Dialog_Show(playerid, Armario_House2, DIALOG_STYLE_LIST, "[HOUSE] Armário", StrArm, "Selecionar", "Cancelar");
			}
			case 5:
			{
                Menu_Armas[playerid][0] = 4;
	    	    format(StrArm, sizeof(StrArm), "Colocar\nPegar");
                Dialog_Show(playerid, Armario_House2, DIALOG_STYLE_LIST, "[HOUSE] Armário", StrArm, "Selecionar", "Cancelar");
			}
			case 6:
			{
                Menu_Armas[playerid][0] = 5;
	    	    format(StrArm, sizeof(StrArm), "Colocar\nPegar");
                Dialog_Show(playerid, Armario_House2, DIALOG_STYLE_LIST, "[HOUSE] Armário", StrArm, "Selecionar", "Cancelar");
			}

			case 7:
			{
                Menu_Armas[playerid][0] = 6;
	    	    format(StrArm, sizeof(StrArm), "Colocar\nPegar");
                Dialog_Show(playerid, Armario_House2, DIALOG_STYLE_LIST, "[HOUSE] Armário", StrArm, "Selecionar", "Cancelar");
			}
			case 8:
			{
                Menu_Armas[playerid][0] = 7;
	    	    format(StrArm, sizeof(StrArm), "Colocar\nPegar");
                Dialog_Show(playerid, Armario_House2, DIALOG_STYLE_LIST, "[HOUSE] Armário", StrArm, "Selecionar", "Cancelar");
			}
			case 9:
			{
                Menu_Armas[playerid][0] = 8;
	    	    format(StrArm, sizeof(StrArm), "Colocar\nPegar");
                Dialog_Show(playerid, Armario_House2, DIALOG_STYLE_LIST, "[HOUSE] Armário", StrArm, "Selecionar", "Cancelar");
			}
			case 10:
			{
                Menu_Armas[playerid][0] = 9;
	    	    format(StrArm, sizeof(StrArm), "Colocar\nPegar");
                Dialog_Show(playerid, Armario_House2, DIALOG_STYLE_LIST, "[HOUSE] Armário", StrArm, "Selecionar", "Cancelar");
			}
			case 11:
			{
                Menu_Armas[playerid][0] = 10;
	    	    format(StrArm, sizeof(StrArm), "Colocar\nPegar");
                Dialog_Show(playerid, Armario_House2, DIALOG_STYLE_LIST, "[HOUSE] Armário", StrArm, "Selecionar", "Cancelar");
			}
		}
	}
	return 1;
}

Dialog:Armario_House2(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new StrArm[256];
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerInfo[playerid][pArmaMao] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma em mãos");
				new armaid = PlayerInfo[playerid][pArmaMao];
			    new InvId = Menu_Armas[playerid][0];
       			if(InvId == 1)
		        {
		    		if(PlayerInfo[playerid][pArmario1] == 0)
				    {
        				PlayerInfo[playerid][pArmario1] = PlayerInfo[playerid][pArmaMao];
        				//ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário HOUSE] Arma guardada no armário, Slot 1.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 1.");
				}
				else if(InvId == 2)
		        {
		    		if(PlayerInfo[playerid][pArmario2] == 0)
				    {
        				PlayerInfo[playerid][pArmario2] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário HOUSE] Arma guardada no armário, Slot 2.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 2.");
				}
				else if(InvId == 3)
		        {
		    		if(PlayerInfo[playerid][pArmario3] == 0)
				    {
        				PlayerInfo[playerid][pArmario3] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário HOUSE] Arma guardada no armário, Slot 3.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 3.");
				}
				else if(InvId == 4)
		        {
		    		if(PlayerInfo[playerid][pArmario4] == 0)
				    {
        				PlayerInfo[playerid][pArmario4] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTRED, "[Armário HOUSE] Arma guardada no armário, Slot 4.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 4.");
				}
				else if(InvId == 5)
		        {
		    		if(PlayerInfo[playerid][pArmario5] == 0)
				    {
        				PlayerInfo[playerid][pArmario5] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário HOUSE] Arma guardada no armário, Slot 5.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 5.");
				}
				else if(InvId == 6)
		        {
		    		if(PlayerInfo[playerid][pArmario6] == 0)
				    {
        				PlayerInfo[playerid][pArmario6] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário HOUSE] Arma guardada no armário, Slot 6.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 6.");
				}
				else if(InvId == 7)
		        {
		    		if(PlayerInfo[playerid][pArmario7] == 0)
				    {
        				PlayerInfo[playerid][pArmario7] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário HOUSE] Arma guardada no armário, Slot 7.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 7.");
				}
				else if(InvId == 8)
		        {
		    		if(PlayerInfo[playerid][pArmario8] == 0)
				    {
        				PlayerInfo[playerid][pArmario8] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário HOUSE] Arma guardada no armário, Slot 8.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 8.");
				}
				else if(InvId == 9)
		        {
		    		if(PlayerInfo[playerid][pArmario9] == 0)
				    {
        				PlayerInfo[playerid][pArmario9] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário HOUSE] Arma guardada no armário, Slot 9.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 9.");
				}
				else if(InvId == 10)
		        {
		    		if(PlayerInfo[playerid][pArmario10] == 0)
				    {
        				PlayerInfo[playerid][pArmario10] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário HOUSE] Arma guardada no armário, Slot 10.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 10.");
				}
	        }
	    	case 1:
	    	{
	    	    new SlotID = Menu_Armas[playerid][0];
 	   			if(SlotID == 1)
				{
					if(PlayerInfo[playerid][pArmario1] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario1]][ArmaModelo];
	    				new IdPahSalva = PlayerInfo[playerid][pArmario1];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario1]][ArmaAmmo]);

					    if(ArmaData[PlayerInfo[playerid][pArmario1]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario1]][ArmaRGB]);
                        else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario1]][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario1]][ArmaRGB]);

					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario1] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário HOUSE] Você pegou uma %s de seu armário.",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 1.");
				}
				else if(SlotID == 2)
				{
					if(PlayerInfo[playerid][pArmario2] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario2]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario2];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario2]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario2]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario2]][ArmaRGB]);
                        else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario2]][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario2]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario2] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário HOUSE] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 2.");
				}
				else if(SlotID == 3)
				{
					if(PlayerInfo[playerid][pArmario3] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario3]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario3];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario3]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario3]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario3]][ArmaRGB]);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario3]][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario3]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario3] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário HOUSE] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 3.");
				}
				else if(SlotID == 4)
				{
					if(PlayerInfo[playerid][pArmario4] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario4]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario4];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario4]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario4]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario4]][ArmaRGB]);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario4]][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario4]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario4] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário HOUSE] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 4.");
				}
				else if(SlotID == 5)
				{
					if(PlayerInfo[playerid][pArmario5] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario5]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario5];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario5]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario5] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário HOUSE] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 5.");
				}
				else if(SlotID == 6)
				{
					if(PlayerInfo[playerid][pArmario6] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario6]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario6];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario6]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario6]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario6]][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario6] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário HOUSE] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 6.");
				}
				else if(SlotID == 7)
				{
					if(PlayerInfo[playerid][pArmario7] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario7]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario7];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario7]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario7]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario7]][ArmaExtra], 7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario7] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário HOUSE] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 7.");
				}
				else if(SlotID == 8)
				{
					if(PlayerInfo[playerid][pArmario8] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario8]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario8];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario8]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario8]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario8]][ArmaExtra], 8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario8] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário HOUSE] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 8.");
				}
				else if(SlotID == 9)
				{
					if(PlayerInfo[playerid][pArmario9] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario9]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario9];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario9]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario9]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario9]][ArmaExtra], 9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario9] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário HOUSE] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 9.");
				}
				else if(SlotID == 10)
				{
					if(PlayerInfo[playerid][pArmario10] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario10]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario10];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario10]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario10]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario10]][ArmaExtra], 10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario10] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário HOUSE] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 10.");
				}
			}
		}
	}
	return 1;
}

Dialog:Municoes_House(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    new StrArm[562];
     	switch(listitem)
	    {
	    	case 0:
	    	{
				Menu_Armas[playerid][0] = 0;
				format(StrArm, sizeof(StrArm), "{007B00}Ver municões >>{FFFFFF}\nArmas:");
				if(PlayerInfo[playerid][pArmario1] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 1 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario1]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario1]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 1 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario2] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 2 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario2]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario2]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 2 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario3] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 3 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario3]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario3]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 3 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario4] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 4 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario4]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario4]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 4 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario5] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 5 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario5]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario5]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario6] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 6 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario6]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario6]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 6 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario7] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 7 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario7]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario7]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 7 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario8] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 8 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario8]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario8]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 8 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario9] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 9 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario9]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario9]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 9 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario10] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 10 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario10]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario10]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 10 - Vazio", StrArm);

		    	Dialog_Show(playerid, Armario_House, DIALOG_STYLE_LIST, "[HOUSE] Armário", StrArm, "Selecionar", "Fechar");
			}
			case 1:
			{
			    format(StrArm, sizeof(StrArm), "{007B00}<< Ver Armas{FFFFFF}\nMunições:\n9mm: %d",PlayerInfo[playerid][pArm9mm]);
				format(StrArm, sizeof(StrArm), "%s\n5x56mm: %d",StrArm,PlayerInfo[playerid][pArm556]);
				format(StrArm, sizeof(StrArm), "%s\nCartucho: %d",StrArm,PlayerInfo[playerid][pArmCart]);
				format(StrArm, sizeof(StrArm), "%s\n12.7x106mm: %d",StrArm,PlayerInfo[playerid][pArm127]);
				Dialog_Show(playerid, Municoes_House, DIALOG_STYLE_LIST, "[HOUSE] Munições", StrArm, "Selecionar", "Cancelar");
			}
			case 2:
			{
			    Menu_Armas[playerid][0] = 1;
			    Dialog_Show(playerid, Municoes_House2, DIALOG_STYLE_LIST, "[HOUSE] Munições", "Colocar\nPegar", "Selecionar", "Cancelar");
			}
			case 3:
			{
			    Menu_Armas[playerid][0] = 2;
			    Dialog_Show(playerid, Municoes_House2, DIALOG_STYLE_LIST, "[HOUSE] Munições", "Colocar\nPegar", "Selecionar", "Cancelar");
			}
			case 4:
			{
			    Menu_Armas[playerid][0] = 3;
			    Dialog_Show(playerid, Municoes_House2, DIALOG_STYLE_LIST, "[HOUSE] Munições", "Colocar\nPegar", "Selecionar", "Cancelar");
			}
			case 5:
			{
			    Menu_Armas[playerid][0] = 4;
			    Dialog_Show(playerid, Municoes_House2, DIALOG_STYLE_LIST, "[HOUSE] Munições", "Colocar\nPegar", "Selecionar", "Cancelar");
			}
			default: return 1;
		}
	}
	return 1;
}

Dialog:Municoes_House2(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    switch(listitem)
	    {
	        case 0: Dialog_Show(playerid, Municoes_House3, DIALOG_STYLE_INPUT, "[HOUSE] Munições", "Digite o valor a ser guardado.", "Guardar", "Cancelar");
			case 1: Dialog_Show(playerid, Municoes_House4, DIALOG_STYLE_INPUT, "[HOUSE] Munições", "Digite o valor a ser retirado.", "Pegar", "Cancelar");
		}
 	}
	return 1;
}

Dialog:Municoes_House3(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new StrMsg[256];
	    switch(Menu_Armas[playerid][0])
	    {
	    	case 1:
	    	{
	   			new Input = strval(inputtext);
	    		if(Input < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido.");
	      		if(Input <= PlayerInfo[playerid][pMun9mm])
	   			{
	    			PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-Input;
	     			PlayerInfo[playerid][pArm9mm] += Input;
	       			format(StrMsg, sizeof(StrMsg), "[Armário HOUSE] Você guardou %d balas 9mm em seu armário.", Input);
	          		SendClientMessage(playerid, COLOR_LIGHTGREEN, StrMsg);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso.");
			}
 			case 2:
	    	{
	   			new Input = strval(inputtext);
	    		if(Input < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido.");
	      		if(Input <= PlayerInfo[playerid][pMun556])
	   			{
	    			PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-Input;
	     			PlayerInfo[playerid][pArm556] += Input;
	       			format(StrMsg, sizeof(StrMsg), "[Armário HOUSE] Você guardou %d balas 9mm em seu armário.", Input);
	          		SendClientMessage(playerid, COLOR_LIGHTGREEN, StrMsg);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso.");
			}
			case 3:
			{
 				new Input = strval(inputtext);
  				if(Input < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido.");
  				if(Input <= PlayerInfo[playerid][pMunCart])
     			{
       				PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-Input;
		        	PlayerInfo[playerid][pArmCart] += Input;
          			format(StrMsg, sizeof(StrMsg), "[Armário HOUSE] Você guardou %d cartuchos em seu armário.", Input);
		        	SendClientMessage(playerid, COLOR_LIGHTGREEN, StrMsg);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso.");
			}
			case 4:
			{
				new Input = strval(inputtext);
				if(Input < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido.");
				if(Input <= PlayerInfo[playerid][pMun127])
	 			{
 					PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-Input;
     				PlayerInfo[playerid][pArm127] += Input;
     				format(StrMsg, sizeof(StrMsg), "[Armário HOUSE] Você guardou %d balas 12.7x106mm em seu armário.", Input);
     				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrMsg);
			    }
			    else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso.");
			}
		}
	}
	return 1;
}

Dialog:Municoes_House4(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new StrMsg[256];
	    switch(Menu_Armas[playerid][0])
	    {
     		case 1:
       		{
        		new Input = strval(inputtext);
          		if(Input < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido.");
            	if(Input <= PlayerInfo[playerid][pArm9mm])
				{
    				PlayerInfo[playerid][pArm9mm] = PlayerInfo[playerid][pArm9mm]-Input;
        			PlayerInfo[playerid][pMun9mm] += Input;
           			format(StrMsg, sizeof(StrMsg), "[Armário HOUSE] Você pegou %d balas 9mm em seu armário.", Input);
              		SendClientMessage(playerid, COLOR_LIGHTGREEN, StrMsg);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Seu armário não tem tudo isso.");
    		}
      		case 2:
        	{
         		new Input = strval(inputtext);
           		if(Input < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido.");
            	if(Input <= PlayerInfo[playerid][pMun556])
	            {
             		PlayerInfo[playerid][pArm556] = PlayerInfo[playerid][pArm556]-Input;
               		PlayerInfo[playerid][pMun556] += Input;
	                format(StrMsg, sizeof(StrMsg), "[Armário HOUSE] Você pegou %d balas 5x56mm em seu armário.", Input);
	                SendClientMessage(playerid, COLOR_LIGHTGREEN, StrMsg);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Seu armário não tem tudo isso.");
    		}
      		case 3:
        	{
         		new Input = strval(inputtext);
           		if(Input < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido.");
            	if(Input <= PlayerInfo[playerid][pMunCart])
	            {
             		PlayerInfo[playerid][pArmCart] = PlayerInfo[playerid][pArmCart]-Input;
               		PlayerInfo[playerid][pMunCart] += Input;
	                format(StrMsg, sizeof(StrMsg), "[Armário HOUSE] Você pegou %d cartuchos em seu armário.", Input);
	                SendClientMessage(playerid, COLOR_LIGHTGREEN, StrMsg);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Seu armário não tem tudo isso.");
    		}
      		case 4:
        	{
         		new Input = strval(inputtext);
           		if(Input < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido.");
	            if(Input <= PlayerInfo[playerid][pMun127])
	            {
             		PlayerInfo[playerid][pArm127] = PlayerInfo[playerid][pArm127]-Input;
               		PlayerInfo[playerid][pMun127] += Input;
	                format(StrMsg, sizeof(StrMsg), "[Armário HOUSE] Você pegou %d balas 12.7x106mm em seu armário.", Input);
	                SendClientMessage(playerid, COLOR_LIGHTGREEN, StrMsg);
			    }
			    else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Seu armário não tem tudo isso.");
			}
		}
	}
	return 1;
}

CMD:armario(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você só pode usar o armário estando fora de serviço.");
    if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");

	new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ)
	{
		    if(IsPlayerInRangeOfPoint(playerid, 15, FacInfo[FacId][fArmarioPosX], FacInfo[FacId][fArmarioPosY], FacInfo[FacId][fArmarioPosZ]) && GetPlayerVirtualWorld(playerid) == FacInfo[FacId][fArmarioVw])
			{
			    //if(PlayerInfo[playerid][pEmServico] == 1)
			    //{
			        new StrArm[562];
					Menu_Armas[playerid][0] = 0;
					format(StrArm, sizeof(StrArm), "{007B00}Ver municões >>{FFFFFF}\nArmas:");
					if(PlayerInfo[playerid][pArmario1] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 1 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario1]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario1]][ArmaAmmo]);
					    else format(StrArm, sizeof(StrArm), "%s\nSlot 1 - Vazio", StrArm);
					if(PlayerInfo[playerid][pArmario2] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 2 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario2]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario2]][ArmaAmmo]);
					    else format(StrArm, sizeof(StrArm), "%s\nSlot 2 - Vazio", StrArm);
					if(PlayerInfo[playerid][pArmario3] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 3 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario3]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario3]][ArmaAmmo]);
					    else format(StrArm, sizeof(StrArm), "%s\nSlot 3 - Vazio", StrArm);
					if(PlayerInfo[playerid][pArmario4] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 4 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario4]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario4]][ArmaAmmo]);
					    else format(StrArm, sizeof(StrArm), "%s\nSlot 4 - Vazio", StrArm);
					if(PlayerInfo[playerid][pArmario5] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 5 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario5]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario5]][ArmaAmmo]);
					    else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
					if(PlayerInfo[playerid][pArmario6] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 6 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario6]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario6]][ArmaAmmo]);
						else format(StrArm, sizeof(StrArm), "%s\nSlot 6 - Vazio", StrArm);
					if(PlayerInfo[playerid][pArmario7] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 7 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario7]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario7]][ArmaAmmo]);
						else format(StrArm, sizeof(StrArm), "%s\nSlot 7 - Vazio", StrArm);
					if(PlayerInfo[playerid][pArmario8] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 8 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario8]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario8]][ArmaAmmo]);
						else format(StrArm, sizeof(StrArm), "%s\nSlot 8 - Vazio", StrArm);
					if(PlayerInfo[playerid][pArmario9] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 9 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario9]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario9]][ArmaAmmo]);
						else format(StrArm, sizeof(StrArm), "%s\nSlot 9 - Vazio", StrArm);
					if(PlayerInfo[playerid][pArmario10] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 10 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario10]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario10]][ArmaAmmo]);
						else format(StrArm, sizeof(StrArm), "%s\nSlot 10 - Vazio", StrArm);

			    	Dialog_Show(playerid, Armario_PMERJ, DIALOG_STYLE_LIST, "Armário", StrArm, "Selecionar", "Fechar");
				//}
				//else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em serviço.");
			}
	   		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está no vestiário de sua facção.");
	}
	return 1;
}

Dialog:Armario_PMERJ(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new StrArm[562];
	    switch(listitem)
	    {
	        case 0:
	        {
	            format(StrArm, sizeof(StrArm), "{007B00}<< Ver Armas{FFFFFF}\nMunições:\n9mm: %d",PlayerInfo[playerid][pArm9mm]);
				format(StrArm, sizeof(StrArm), "%s\n5x56mm: %d",StrArm,PlayerInfo[playerid][pArm556]);
				format(StrArm, sizeof(StrArm), "%s\nCartucho: %d",StrArm,PlayerInfo[playerid][pArmCart]);
				format(StrArm, sizeof(StrArm), "%s\n12.7x106mm: %d",StrArm,PlayerInfo[playerid][pArm127]);
				Dialog_Show(playerid, Municoes_PMERJ, DIALOG_STYLE_LIST, "Minhas Munições", StrArm, "Selecionar", "Cancelar");
	        }
	        case 1:
	        {
				Menu_Armas[playerid][0] = 0;
				format(StrArm, sizeof(StrArm), "{007B00}Ver municões >>{FFFFFF}\nArmas:");
				if(PlayerInfo[playerid][pArmario1] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 1 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario1]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario1]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 1 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario2] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 2 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario2]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario2]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 2 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario3] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 3 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario3]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario3]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 3 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario4] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 4 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario4]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario4]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 4 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario5] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 5 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario5]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario5]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario6] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 6 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario6]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario6]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 6 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario7] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 7 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario7]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario7]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 7 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario8] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 8 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario8]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario8]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 8 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario9] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 9 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario9]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario9]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 9 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario10] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 10 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario10]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario10]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 10 - Vazio", StrArm);

		    	Dialog_Show(playerid, Armario_PMERJ, DIALOG_STYLE_LIST, "[PMESP] Armário", StrArm, "Selecionar", "Fechar");
	        }
	    	case 2:
	    	{
	    	    Menu_Armas[playerid][0] = 1;
	    	    format(StrArm, sizeof(StrArm), "Colocar\nPegar");
                Dialog_Show(playerid, Armario_PMERJ2, DIALOG_STYLE_LIST, "[PMESP] Armário", StrArm, "Selecionar", "Cancelar");
			}
			case 3:
			{
                Menu_Armas[playerid][0] = 2;
	    	    format(StrArm, sizeof(StrArm), "Colocar\nPegar");
                Dialog_Show(playerid, Armario_PMERJ2, DIALOG_STYLE_LIST, "[PMESP] Armário", StrArm, "Selecionar", "Cancelar");
			}
			case 4:
			{
                Menu_Armas[playerid][0] = 3;
	    	    format(StrArm, sizeof(StrArm), "Colocar\nPegar");
                Dialog_Show(playerid, Armario_PMERJ2, DIALOG_STYLE_LIST, "[PMESP] Armário", StrArm, "Selecionar", "Cancelar");
			}
			case 5:
			{
                Menu_Armas[playerid][0] = 4;
	    	    format(StrArm, sizeof(StrArm), "Colocar\nPegar");
                Dialog_Show(playerid, Armario_PMERJ2, DIALOG_STYLE_LIST, "[PMESP] Armário", StrArm, "Selecionar", "Cancelar");
			}
			case 6:
			{
                Menu_Armas[playerid][0] = 5;
	    	    format(StrArm, sizeof(StrArm), "Colocar\nPegar");
                Dialog_Show(playerid, Armario_PMERJ2, DIALOG_STYLE_LIST, "[PMESP] Armário", StrArm, "Selecionar", "Cancelar");
			}
		}
	}
	return 1;
}

Dialog:Armario_PMERJ2(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new StrArm[256];
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerInfo[playerid][pArmaMao] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma em mãos");
				new armaid = PlayerInfo[playerid][pArmaMao];
			    new InvId = Menu_Armas[playerid][0];
       			if(InvId == 1)
		        {
		    		if(PlayerInfo[playerid][pArmario1] == 0)
				    {
        				PlayerInfo[playerid][pArmario1] = PlayerInfo[playerid][pArmaMao];
        				//ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário PMESP] Arma guardada no armário, Slot 1.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 1.");
				}
				else if(InvId == 2)
		        {
		    		if(PlayerInfo[playerid][pArmario2] == 0)
				    {
        				PlayerInfo[playerid][pArmario2] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário PMESP] Arma guardada no armário, Slot 2.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 2.");
				}
				else if(InvId == 3)
		        {
		    		if(PlayerInfo[playerid][pArmario3] == 0)
				    {
        				PlayerInfo[playerid][pArmario3] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário PMESP] Arma guardada no armário, Slot 3.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 3.");
				}
				else if(InvId == 4)
		        {
		    		if(PlayerInfo[playerid][pArmario4] == 0)
				    {
        				PlayerInfo[playerid][pArmario4] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTRED, "[Armário PMESP] Arma guardada no armário, Slot 4.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 4.");
				}
				else if(InvId == 5)
		        {
		    		if(PlayerInfo[playerid][pArmario5] == 0)
				    {
        				PlayerInfo[playerid][pArmario5] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário PMESP] Arma guardada no armário, Slot 5.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 5.");
				}
				else if(InvId == 6)
		        {
		    		if(PlayerInfo[playerid][pArmario6] == 0)
				    {
        				PlayerInfo[playerid][pArmario6] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário PMESP] Arma guardada no armário, Slot 6.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 6.");
				}
				else if(InvId == 7)
		        {
		    		if(PlayerInfo[playerid][pArmario7] == 0)
				    {
        				PlayerInfo[playerid][pArmario7] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário PMESP] Arma guardada no armário, Slot 7.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 7.");
				}
				else if(InvId == 8)
		        {
		    		if(PlayerInfo[playerid][pArmario8] == 0)
				    {
        				PlayerInfo[playerid][pArmario8] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário PMESP] Arma guardada no armário, Slot 8.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 8.");
				}
				else if(InvId == 9)
		        {
		    		if(PlayerInfo[playerid][pArmario9] == 0)
				    {
        				PlayerInfo[playerid][pArmario9] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário PMESP] Arma guardada no armário, Slot 9.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 9.");
				}
				else if(InvId == 10)
		        {
		    		if(PlayerInfo[playerid][pArmario10] == 0)
				    {
        				PlayerInfo[playerid][pArmario10] = PlayerInfo[playerid][pArmaMao];
				        //ArmaData[armaid][ArmaAmmo] = GetPlayerAmmo(playerid);
				        SCM(playerid, COLOR_LIGHTGREEN, "[Armário PMESP] Arma guardada no armário, Slot 10.");
				        ArmaData[armaid][ArmaCom] = 0;
				    	RemovePlayerAttachedObject(playerid, 0);
				    	//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						SalvarArma(armaid);
						return 1;
    				}
				    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algo no Slot 10.");
				}
	        }
	    	case 1:
	    	{
	    	    new SlotID = Menu_Armas[playerid][0];
 	   			if(SlotID == 1)
				{
					if(PlayerInfo[playerid][pArmario1] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario1]][ArmaModelo];
	    				new IdPahSalva = PlayerInfo[playerid][pArmario1];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario1]][ArmaAmmo]);

					    if(ArmaData[PlayerInfo[playerid][pArmario1]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario1]][ArmaRGB]);
                        else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario1]][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario1]][ArmaRGB]);

					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario1] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário PMESP] Você pegou uma %s de seu armário.",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 1.");
				}
				else if(SlotID == 2)
				{
					if(PlayerInfo[playerid][pArmario2] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario2]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario2];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario2]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario2]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario2]][ArmaRGB]);
                        else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario2]][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario2]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario2] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário PMESP] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 2.");
				}
				else if(SlotID == 3)
				{
					if(PlayerInfo[playerid][pArmario3] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario3]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario3];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario3]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario3]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario3]][ArmaRGB]);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario3]][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario3]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario3] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário PMESP] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 3.");
				}
				else if(SlotID == 4)
				{
					if(PlayerInfo[playerid][pArmario4] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario4]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario4];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario4]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario4]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario4]][ArmaRGB]);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario4]][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario4]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario4] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário PMESP] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 4.");
				}
				else if(SlotID == 5)
				{
					if(PlayerInfo[playerid][pArmario5] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario5]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario5];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario5]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario5] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário PMESP] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 5.");
				}
				else if(SlotID == 6)
				{
					if(PlayerInfo[playerid][pArmario6] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario6]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario6];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario6]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario6]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario6]][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario6] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário PMESP] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 6.");
				}
				else if(SlotID == 7)
				{
					if(PlayerInfo[playerid][pArmario7] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario7]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario7];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario7]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario7]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario7]][ArmaExtra], 7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario7] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário PMESP] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 7.");
				}
				else if(SlotID == 8)
				{
					if(PlayerInfo[playerid][pArmario8] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario8]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario8];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario8]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario8]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario8]][ArmaExtra], 8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario8] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário PMESP] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 8.");
				}
				else if(SlotID == 9)
				{
					if(PlayerInfo[playerid][pArmario9] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario9]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario9];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario9]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario9]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario9]][ArmaExtra], 9, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario9] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário PMESP] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 9.");
				}
				else if(SlotID == 10)
				{
					if(PlayerInfo[playerid][pArmario10] > 0)
					{
					    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
	    				if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");

	    				new ArmaModel = ArmaData[PlayerInfo[playerid][pArmario10]][ArmaModelo];
						new IdPahSalva = PlayerInfo[playerid][pArmario10];

					    GivePlayerWeapon(playerid,ArmaModel, ArmaData[PlayerInfo[playerid][pArmario10]][ArmaAmmo]);
					    if(ArmaData[PlayerInfo[playerid][pArmario10]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    else SetPlayerAttachedObject(playerid, 0, ArmaData[PlayerInfo[playerid][pArmario10]][ArmaExtra], 10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[PlayerInfo[playerid][pArmario5]][ArmaRGB]);
					    PlayerInfo[playerid][pArmaMao] = IdPahSalva;
					    PlayerInfo[playerid][pArmario10] = 0;
					    format(StrArm, sizeof(StrArm), "[Armário PMESP] Você pegou uma %s de seu armário",GunNames[ArmaModel]);
	    				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrArm);
	    				SalvarArma(IdPahSalva);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma para se pegar no slot 10.");
				}
			}
		}
	}
	return 1;
}

Dialog:Municoes_PMERJ(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    new StrArm[562];
     	switch(listitem)
	    {
	    	case 0:
	    	{
				Menu_Armas[playerid][0] = 0;
				format(StrArm, sizeof(StrArm), "{007B00}Ver municões >>{FFFFFF}\nArmas:");
				if(PlayerInfo[playerid][pArmario1] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 1 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario1]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario1]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 1 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario2] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 2 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario2]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario2]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 2 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario3] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 3 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario3]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario3]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 3 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario4] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 4 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario4]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario4]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 4 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario5] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 5 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario5]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario5]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 5 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario6] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 6 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario6]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario6]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 6 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario7] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 7 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario7]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario7]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 7 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario8] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 8 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario8]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario8]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 8 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario9] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 9 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario9]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario9]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 9 - Vazio", StrArm);
				if(PlayerInfo[playerid][pArmario10] > 0) format(StrArm, sizeof(StrArm), "%s\nSlot 10 - %s : %d balas", StrArm, GunNames[ArmaData[PlayerInfo[playerid][pArmario10]][ArmaModelo]], ArmaData[PlayerInfo[playerid][pArmario10]][ArmaAmmo]);
				    else format(StrArm, sizeof(StrArm), "%s\nSlot 10 - Vazio", StrArm);
		    	Dialog_Show(playerid, Armario_PMERJ, DIALOG_STYLE_LIST, "[PMESP] Armário", StrArm, "Selecionar", "Fechar");
			}
			case 1:
			{
			    format(StrArm, sizeof(StrArm), "{007B00}<< Ver Armas{FFFFFF}\nMunições:\n9mm: %d",PlayerInfo[playerid][pArm9mm]);
				format(StrArm, sizeof(StrArm), "%s\n5x56mm: %d",StrArm,PlayerInfo[playerid][pArm556]);
				format(StrArm, sizeof(StrArm), "%s\nCartucho: %d",StrArm,PlayerInfo[playerid][pArmCart]);
				format(StrArm, sizeof(StrArm), "%s\n12.7x106mm: %d",StrArm,PlayerInfo[playerid][pArm127]);
				Dialog_Show(playerid, Municoes_PMERJ, DIALOG_STYLE_LIST, "[PMESP] Munições", StrArm, "Selecionar", "Cancelar");
			}
			case 2:
			{
			    Menu_Armas[playerid][0] = 1;
			    Dialog_Show(playerid, Municoes_PMERJ2, DIALOG_STYLE_LIST, "[PMESP] Munições", "Colocar\nPegar", "Selecionar", "Cancelar");
			}
			case 3:
			{
			    Menu_Armas[playerid][0] = 2;
			    Dialog_Show(playerid, Municoes_PMERJ2, DIALOG_STYLE_LIST, "[PMESP] Munições", "Colocar\nPegar", "Selecionar", "Cancelar");
			}
			case 4:
			{
			    Menu_Armas[playerid][0] = 3;
			    Dialog_Show(playerid, Municoes_PMERJ2, DIALOG_STYLE_LIST, "[PMESP] Munições", "Colocar\nPegar", "Selecionar", "Cancelar");
			}
			case 5:
			{
			    Menu_Armas[playerid][0] = 4;
			    Dialog_Show(playerid, Municoes_PMERJ2, DIALOG_STYLE_LIST, "[PMESP] Munições", "Colocar\nPegar", "Selecionar", "Cancelar");
			}
			default: return 1;
		}
	}
	return 1;
}

Dialog:Municoes_PMERJ2(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    switch(listitem)
	    {
	        case 0: Dialog_Show(playerid, Municoes_PMERJ3, DIALOG_STYLE_INPUT, "[PMESP] Munições", "Digite o valor a ser guardado.", "Guardar", "Cancelar");
			case 1: Dialog_Show(playerid, Municoes_PMERJ4, DIALOG_STYLE_INPUT, "[PMESP] Munições", "Digite o valor a ser retirado.", "Pegar", "Cancelar");
		}
 	}
	return 1;
}

Dialog:Municoes_PMERJ3(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new StrMsg[256];
	    switch(Menu_Armas[playerid][0])
	    {
	    	case 1:
	    	{
	   			new Input = strval(inputtext);
	    		if(Input < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido.");
	      		if(Input <= PlayerInfo[playerid][pMun9mm])
	   			{
	    			PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-Input;
	     			PlayerInfo[playerid][pArm9mm] += Input;
	       			format(StrMsg, sizeof(StrMsg), "[Armário PMESP] Você guardou %d balas 9mm em seu armário.", Input);
	          		SendClientMessage(playerid, COLOR_LIGHTGREEN, StrMsg);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso.");
			}
 			case 2:
   			{
	    		new Input = strval(inputtext);
	 			if(Input < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido.");
				if(Input <= PlayerInfo[playerid][pMun556])
   				{
 					PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-Input;
	  				PlayerInfo[playerid][pArm556] += Input;
      				format(StrMsg, sizeof(StrMsg), "[Armário PMESP] Você guardou %d balas 5x56mm em seu armário.", Input);
	        		SendClientMessage(playerid, COLOR_LIGHTGREEN, StrMsg);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso.");
			}
			case 3:
			{
 				new Input = strval(inputtext);
  				if(Input < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido.");
  				if(Input <= PlayerInfo[playerid][pMunCart])
     			{
       				PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-Input;
		        	PlayerInfo[playerid][pArmCart] += Input;
          			format(StrMsg, sizeof(StrMsg), "[Armário PMESP] Você guardou %d cartuchos em seu armário.", Input);
		        	SendClientMessage(playerid, COLOR_LIGHTGREEN, StrMsg);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso.");
			}
			case 4:
			{
				new Input = strval(inputtext);
				if(Input < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido.");
				if(Input <= PlayerInfo[playerid][pMun127])
	 			{
 					PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-Input;
     				PlayerInfo[playerid][pArm127] += Input;
     				format(StrMsg, sizeof(StrMsg), "[Armário PMESP] Você guardou %d balas 12.7x106mm em seu armário.", Input);
     				SendClientMessage(playerid, COLOR_LIGHTGREEN, StrMsg);
			    }
			    else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso.");
			}
		}
	}
	return 1;
}

Dialog:Municoes_PMERJ4(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new StrMsg[256];
	    switch(Menu_Armas[playerid][0])
	    {
     		case 1:
       		{
        		new Input = strval(inputtext);
          		if(Input < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido.");
            	if(Input <= PlayerInfo[playerid][pArm9mm])
				{
    				PlayerInfo[playerid][pArm9mm] = PlayerInfo[playerid][pArm9mm]-Input;
        			PlayerInfo[playerid][pMun9mm] += Input;
           			format(StrMsg, sizeof(StrMsg), "[Armário PMESP] Você pegou %d balas 9mm em seu armário.", Input);
              		SendClientMessage(playerid, COLOR_LIGHTGREEN, StrMsg);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Seu armário não tem tudo isso.");
    		}
      		case 2:
        	{
         		new Input = strval(inputtext);
           		if(Input < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido.");
            	if(Input <= PlayerInfo[playerid][pMun556])
	            {
             		PlayerInfo[playerid][pArm556] = PlayerInfo[playerid][pArm556]-Input;
               		PlayerInfo[playerid][pMun556] += Input;
	                format(StrMsg, sizeof(StrMsg), "[Armário PMESP] Você pegou %d balas 5x56mm em seu armário.", Input);
	                SendClientMessage(playerid, COLOR_LIGHTGREEN, StrMsg);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Seu armário não tem tudo isso.");
    		}
      		case 3:
        	{
         		new Input = strval(inputtext);
           		if(Input < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido.");
            	if(Input <= PlayerInfo[playerid][pMunCart])
	            {
             		PlayerInfo[playerid][pArmCart] = PlayerInfo[playerid][pArmCart]-Input;
               		PlayerInfo[playerid][pMunCart] += Input;
	                format(StrMsg, sizeof(StrMsg), "[Armário PMESP] Você pegou %d cartuchos em seu armário.", Input);
	                SendClientMessage(playerid, COLOR_LIGHTGREEN, StrMsg);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Seu armário não tem tudo isso.");
    		}
      		case 4:
        	{
         		new Input = strval(inputtext);
           		if(Input < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido.");
	            if(Input <= PlayerInfo[playerid][pMun127])
	            {
             		PlayerInfo[playerid][pArm127] = PlayerInfo[playerid][pArm127]-Input;
               		PlayerInfo[playerid][pMun127] += Input;
	                format(StrMsg, sizeof(StrMsg), "[Armário PMESP] Você pegou %d balas 12.7x106mm em seu armário.", Input);
	                SendClientMessage(playerid, COLOR_LIGHTGREEN, StrMsg);
			    }
			    else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Seu armário não tem tudo isso.");
			}
		}
	}
	return 1;
}

COMMAND:cbarreira2(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 3000) return 1;
    new targetid;
	if(sscanf(params, "i", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} /cbarreira2 [id]");
	else
	{
		new Float:X,Float:Y,Float:Z,Float:A;
 		GetPlayerPos(playerid, X, Y, Z);
 		GetPlayerFacingAngle(playerid,A);
		new BarrID = 999, world =  GetPlayerVirtualWorld(playerid);
 		for(new i; i < MAX_PMERJ_BARREIRAS; i++)
 		{
 		    if(!BarreiraInfo[i][BlockObj])
 		    {
 		        BarrID = i;
 		        break;
 		    }
 		}
 		if(BarrID == 999) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O limite de barreiras foi atingido");
 		BarreiraInfo[BarrID][BlockModel] = targetid;
	    BarreiraInfo[BarrID][BlockObj] = CreateDynamicObject(targetid, X, Y+1, Z, 0, 0, A, world);
		BarreiraInfo[BarrID][BlockX] = X;
		BarreiraInfo[BarrID][BlockY] = Y+1;
		BarreiraInfo[BarrID][BlockZ] = Z;
		BarreiraInfo[BarrID][BlockW] = world;
	    PlayerInfo[playerid][pEditandoBareira] = BarrID;
		EditDynamicObject(playerid, BarreiraInfo[BarrID][BlockObj]);
	}
	return 1;
}

COMMAND:barricada(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pLevel] < 10) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 10 ou mais para colocar barricada");
    if(PlayerInfo[playerid][pEditandoBareira] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já está colocando uma barreira.");
	/*new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	if(10 < FacInfo[FacId][fTipo] < 18) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você mão faz parte de uma facção ilegal.");*/
	{
        new strl[256];
		ShowModelSelectionMenu(playerid, "[CRIME] Barreiras", MODEL_PMERJ_BARREIRAS, TRAF_Barreiras, sizeof(TRAF_Barreiras), -16.0, 0.0, -55.0);
		format(strl, sizeof(strl), "AdmCmd: O jogador %s colocou uma barreira.", PlayerName(playerid,0));
	  	SendAdminMessage(COLOR_LIGHTRED,strl);
		format(strl, sizeof(strl), "%s colocou uma barricada.", PlayerName(playerid,0));
	  	LogCMD_barricada(strl);
    }
	return 1;
}
CMD:arbarricadas(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pEditandoBareira] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Termine de editar a barreira atual antes de deletar alguma.");
    if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED,"Você não é um administrador.");
	{
	    for(new id; id < MAX_PMERJ_BARREIRAS; id++)
	    {
			    if(IsValidDynamicObject(BarreiraInfo[id][BlockObj])) DestroyDynamicObject(BarreiraInfo[id][BlockObj]);
				BarreiraInfo[id][BlockX] = 0.0;
				BarreiraInfo[id][BlockY] = 0.0;
				BarreiraInfo[id][BlockZ] = 0.0;
				BarreiraInfo[id][BlockW] = 0;
		}
	}
	return 1;
}
CMD:rbarricada(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pLevel] < 10) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 10 ou mais para retirar barricada");
    if(PlayerInfo[playerid][pEditandoBareira] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Termine de editar a barricada atual antes de deletar alguma.");
	/*new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]), alguma = 0;
	if(10 < FacInfo[FacId][fTipo] < 18) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você mão faz parte de uma facção ilegal.");*/
	new alguma = 0;
	{
	    for(new id; id < MAX_PMERJ_BARREIRAS; id++)
	    {
			if(IsPlayerInRangeOfPoint(playerid, 5, BarreiraInfo[id][BlockX], BarreiraInfo[id][BlockY], BarreiraInfo[id][BlockZ]) && GetPlayerVirtualWorld(playerid) == BarreiraInfo[id][BlockW])
			{
			    if(IsValidDynamicObject(BarreiraInfo[id][BlockObj])) DestroyDynamicObject(BarreiraInfo[id][BlockObj]);
				BarreiraInfo[id][BlockX] = 0.0;
				BarreiraInfo[id][BlockY] = 0.0;
				BarreiraInfo[id][BlockZ] = 0.0;
				BarreiraInfo[id][BlockW] = 0;
				alguma++;
				break;
			}
		}
		if(alguma == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo de nenhuma barricada.");
	}
	return 1;
}

COMMAND:cbarreira(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pEditandoBareira] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já está colocando uma barreira.");
    if(PlayerInfo[playerid][pEmServico] != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em serviço.");
    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ || FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ || FacInfo[FacId][fTipo] == FAC_TIPO_EB || FacInfo[FacId][fTipo] == FAC_TIPO_CBERJ)
	{
        ShowModelSelectionMenu(playerid, "[PMESP] Barreiras", MODEL_PMERJ_BARREIRAS, PMERJ_Barreiras, sizeof(PMERJ_Barreiras), -16.0, 0.0, -55.0);
    }
	return 1;
}

CMD:rbarreira(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pEditandoBareira] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Termine de editar a barreira atual antes de deletar alguma.");
    //if(PlayerInfo[playerid][pEmServico] != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em serviço.");
    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]), alguma = 0;
    if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ || PlayerInfo[playerid][pAdmin] > 0 || FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ || FacInfo[FacId][fTipo] == FAC_TIPO_EB || FacInfo[FacId][fTipo] == FAC_TIPO_CBERJ)
	{
	    for(new id; id < MAX_PMERJ_BARREIRAS; id++)
	    {
			if(IsPlayerInRangeOfPoint(playerid, 5, BarreiraInfo[id][BlockX], BarreiraInfo[id][BlockY], BarreiraInfo[id][BlockZ]) && GetPlayerVirtualWorld(playerid) == BarreiraInfo[id][BlockW])
			{
			    if(IsValidDynamicObject(BarreiraInfo[id][BlockObj])) DestroyDynamicObject(BarreiraInfo[id][BlockObj]);
				BarreiraInfo[id][BlockX] = 0.0;
				BarreiraInfo[id][BlockY] = 0.0;
				BarreiraInfo[id][BlockZ] = 0.0;
				BarreiraInfo[id][BlockW] = 0;
				alguma++;
				break;
			}
		}
		if(alguma == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo de nenhuma barreira.");
	}
	return 1;
}

CMD:vitor(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;

	ShowModelSelectionMenu(playerid, "[PREMIUM] Skins", MODEL_VITOR_SKINS, VITOR_Uniformes, sizeof(VITOR_Uniformes), -16.0, 0.0, -55.0);
	return 1;
}

CMD:uniforme(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	
    if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 15, FacInfo[FacId][fArmarioPosX], FacInfo[FacId][fArmarioPosY], FacInfo[FacId][fArmarioPosZ]) && GetPlayerVirtualWorld(playerid) == FacInfo[FacId][fArmarioVw])
		{
		    if(PlayerInfo[playerid][pEmServico] == 1)
		    {
		    	ShowModelSelectionMenu(playerid, "[PMESP] Uniformes", MODEL_PMERJ_SKINS, PMERJ_Uniformes, sizeof(PMERJ_Uniformes), -16.0, 0.0, -55.0);
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em serviço.");
		}
   		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está no vestiário do PMESP.");
	}
    if(FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ)
    {
        if(IsPlayerInRangeOfPoint(playerid, 15, FacInfo[FacId][fArmarioPosX], FacInfo[FacId][fArmarioPosY], FacInfo[FacId][fArmarioPosZ]) && GetPlayerVirtualWorld(playerid) == FacInfo[FacId][fArmarioVw])
        {
            if(PlayerInfo[playerid][pEmServico] == 1)
            {
                ShowModelSelectionMenu(playerid, "[PCESP] Uniformes", MODEL_PMERJ_SKINS, PCERJ_Uniformes, sizeof(PCERJ_Uniformes), -16.0, 0.0, -55.0);
            }
            else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em serviço.");
        }
        else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está no vestiário do departamento de policia.");
    }
    if(FacInfo[FacId][fTipo] == FAC_TIPO_BANK)
    {
        if(IsPlayerInRangeOfPoint(playerid, 15, FacInfo[FacId][fArmarioPosX], FacInfo[FacId][fArmarioPosY], FacInfo[FacId][fArmarioPosZ]) && GetPlayerVirtualWorld(playerid) == FacInfo[FacId][fArmarioVw])
        {
            if(PlayerInfo[playerid][pEmServico] == 1)
            {
                ShowModelSelectionMenu(playerid, "[PROTEGE] Uniformes", MODEL_PMERJ_SKINS, PROTEGE_Uniformes, sizeof(PROTEGE_Uniformes), -16.0, 0.0, -55.0);
            }
            else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em serviço.");
        }
        else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está no vestiário da PROTEGE.");
    }
    if(FacInfo[FacId][fTipo] == FAC_TIPO_EB)
    {
        if(IsPlayerInRangeOfPoint(playerid, 15, FacInfo[FacId][fArmarioPosX], FacInfo[FacId][fArmarioPosY], FacInfo[FacId][fArmarioPosZ]) && GetPlayerVirtualWorld(playerid) == FacInfo[FacId][fArmarioVw])
        {
            if(PlayerInfo[playerid][pEmServico] == 1)
            {
                ShowModelSelectionMenu(playerid, "[EB] Uniformes", MODEL_EB_SKINS, EB_Uniformes, sizeof(EB_Uniformes), -16.0, 0.0, -55.0);
            }
            else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em serviço.");
        }
        else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está no vestiário do departamento de policia.");
    }
    if(FacInfo[FacId][fTipo] == FAC_TIPO_CBERJ)
    {
        if(IsPlayerInRangeOfPoint(playerid, 15, FacInfo[FacId][fArmarioPosX], FacInfo[FacId][fArmarioPosY], FacInfo[FacId][fArmarioPosZ]) && GetPlayerVirtualWorld(playerid) == FacInfo[FacId][fArmarioVw])
        {
            if(PlayerInfo[playerid][pEmServico] == 1)
            {
                ShowModelSelectionMenu(playerid, "[GBESP] Uniformes", MODEL_PMERJ_SKINS, CBERJ_Uniformes, sizeof(CBERJ_Uniformes), -16.0, 0.0, -55.0);
            }
            else return SendClientMessage(playerid, COLOR_LIGHTRED, "[ERRO] {FFFFFF}Você não está em serviço.");
        }
        else return SendClientMessage(playerid, COLOR_LIGHTRED, "[ERRO] {FFFFFF}Você não está no vestiário do Corpo de Bombeiros");
    }
	return 1;
}

CMD:trabalho(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");

    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ)
    {
            if(IsPlayerInRangeOfPoint(playerid, 15, FacInfo[FacId][fArmarioPosX], FacInfo[FacId][fArmarioPosY], FacInfo[FacId][fArmarioPosZ]) && GetPlayerVirtualWorld(playerid) == FacInfo[FacId][fArmarioVw])
            {
			    new StrMsg[256];

			    if(PlayerInfo[playerid][pDutySkin] == 0) PlayerInfo[playerid][pDutySkin] = 20400;
			    switch(PlayerInfo[playerid][pEmServico])
			    {
			    	case 0:
			    	{
	  					new ArmasInv = 0;
					    if(PlayerInfo[playerid][pSlot1] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot2] != 0)
						{
							switch(ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot3] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot4] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot5] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pColde] > 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pArmaMao] > 0) ArmasInv++;
						if(ArmasInv > 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve guardar sua arma particulares no armário antes de entrar em serviço. ( Armas da mão, /arma e /inv )");

					    if(PlayerInfo[playerid][pMun9mm] > 0 || PlayerInfo[playerid][pMunCart] > 0 || PlayerInfo[playerid][pMun556] > 0 || PlayerInfo[playerid][pMun127] > 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve guardar suas munições particulares no armário antes de entrar em serviço.");

                        format(StrMsg, sizeof(StrMsg), "** MARE 0: %s %s entrou em serviço!**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
	  					SendFacMessage(0x6666CCFF,FacId,StrMsg);
	  					PlayerInfo[playerid][pEmServico] = 1;
	  					SetPlayerSkin(playerid, PlayerInfo[playerid][pDutySkin]);
	  					SetPlayerColor(playerid,0x8d8dff00);
					}
					case 1:
					{
					    //if(PlayerInfo[playerid][pArmaMao] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa devolver suas armas ou guarda-las no armário para sair de serviço.");
						//if(PlayerInfo[playerid][pColde] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa devolver a arma do corpo para sair de serviço.");

					    format(StrMsg, sizeof(StrMsg), "** MARE 0: %s %s saiu de serviço!**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
		   				SendFacMessage(0x6666CCFF,FacId,StrMsg);
		   				PlayerInfo[playerid][pEmServico] = 0;
		   				SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		   				SetPlayerColor(playerid,0xFFFFFFFF);
		   				P_Armour[playerid] = 0; SetPlayerArmour_CA(playerid, 0);

		   				new ArmasInv = 0;
					    if(PlayerInfo[playerid][pSlot1] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pSlot1]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pSlot1]][ArmaCom] = 0;

									PlayerInfo[playerid][pSlot1] = 0;
									PlayerInfo[playerid][pSlot1a] = 0;
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot2] != 0)
						{
							switch(ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pSlot2]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pSlot2]][ArmaCom] = 0;

									PlayerInfo[playerid][pSlot2] = 0;
									PlayerInfo[playerid][pSlot2a] = 0;
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot3] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pSlot3]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pSlot3]][ArmaCom] = 0;

									PlayerInfo[playerid][pSlot3] = 0;
									PlayerInfo[playerid][pSlot3a] = 0;
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot4] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pSlot4]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pSlot4]][ArmaCom] = 0;

									PlayerInfo[playerid][pSlot4] = 0;
									PlayerInfo[playerid][pSlot4a] = 0;
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot5] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pSlot5]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pSlot5]][ArmaCom] = 0;

									PlayerInfo[playerid][pSlot5] = 0;
									PlayerInfo[playerid][pSlot5a] = 0;
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pColde] > 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pColde]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pColde]][ArmaCom] = 0;

									PlayerInfo[playerid][pColde] = 0;
									PlayerInfo[playerid][pColdreA] = 0;

									RemovePlayerAttachedObject(playerid, 2);
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pArmaMao] > 0)
						{
						    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaCor] = 1;
				     		ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaCom] = 0;

						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							ArmasInv++;
						}
						if(ArmasInv > 0) SendClientMessage(playerid,COLOR_LIGHTRED,"[PMESP] As suas armas do inventário foram retiradas.");

					    if(PlayerInfo[playerid][pMun9mm] > 0 || PlayerInfo[playerid][pMunCart] > 0 || PlayerInfo[playerid][pMun556] > 0 || PlayerInfo[playerid][pMun127] > 0)
				        {
				            PlayerInfo[playerid][pMun9mm] = 0;
							PlayerInfo[playerid][pMunCart] = 0;
							PlayerInfo[playerid][pMun556] = 0;
							PlayerInfo[playerid][pMun127] = 0;
							SendClientMessage(playerid,COLOR_LIGHTRED,"[PMESP] As suas munições do inventário foram retiradas.");
				        }
					}
				}
			}
   			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está no armazem de sua facção.");
	}
    if(FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ)
    {
            if(IsPlayerInRangeOfPoint(playerid, 15, FacInfo[FacId][fArmarioPosX], FacInfo[FacId][fArmarioPosY], FacInfo[FacId][fArmarioPosZ]) && GetPlayerVirtualWorld(playerid) == FacInfo[FacId][fArmarioVw])
            {
                new StrMsg[256];

                if(PlayerInfo[playerid][pDutySkin] == 0) PlayerInfo[playerid][pDutySkin] = 20200;
                switch(PlayerInfo[playerid][pEmServico])
                {
                    case 0:
                    {
                        new ArmasInv = 0;
                        if(PlayerInfo[playerid][pSlot1] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot2] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot3] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot4] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot5] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pColde] > 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pArmaMao] > 0) ArmasInv++;
                        if(ArmasInv > 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve guardar sua arma particulares antes de entrar em serviço. ( Armas da mão, /arma e /inv )");

                        if(PlayerInfo[playerid][pMun9mm] > 0 || PlayerInfo[playerid][pMunCart] > 0 || PlayerInfo[playerid][pMun556] > 0 || PlayerInfo[playerid][pMun127] > 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve guardar suas munições particulares no armário antes de entrar em serviço.");

                        format(StrMsg, sizeof(StrMsg), "** CECOPOL: %s %s entrou em serviço!**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
                        SendFacMessage(0x6666CCFF,FacId,StrMsg);
                        PlayerInfo[playerid][pEmServico] = 1;
                        SetPlayerSkin(playerid, PlayerInfo[playerid][pDutySkin]);
                        SetPlayerColor(playerid,0xFFFFFFFF);
                    }
                    case 1:
                    {
                        //if(PlayerInfo[playerid][pArmaMao] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa devolver suas armas ou guarda-las no armário para sair de serviço.");
                        //if(PlayerInfo[playerid][pColde] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa devolver a arma do corpo para sair de serviço.");

                        format(StrMsg, sizeof(StrMsg), "** CECOPOL: %s %s saiu de serviço!**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
                        SendFacMessage(0x6666CCFF,FacId,StrMsg);
                        PlayerInfo[playerid][pEmServico] = 0;
                        SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                        SetPlayerColor(playerid,0xFFFFFFFF);
                        P_Armour[playerid] = 0; SetPlayerArmour_CA(playerid, 0);

                        new ArmasInv = 0;
                        if(PlayerInfo[playerid][pSlot1] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmaData[PlayerInfo[playerid][pSlot1]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pSlot1]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pSlot1] = 0;
                                    PlayerInfo[playerid][pSlot1a] = 0;
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot2] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmaData[PlayerInfo[playerid][pSlot2]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pSlot2]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pSlot2] = 0;
                                    PlayerInfo[playerid][pSlot2a] = 0;
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot3] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmaData[PlayerInfo[playerid][pSlot3]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pSlot3]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pSlot3] = 0;
                                    PlayerInfo[playerid][pSlot3a] = 0;
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot4] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmaData[PlayerInfo[playerid][pSlot4]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pSlot4]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pSlot4] = 0;
                                    PlayerInfo[playerid][pSlot4a] = 0;
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot5] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmaData[PlayerInfo[playerid][pSlot5]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pSlot5]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pSlot5] = 0;
                                    PlayerInfo[playerid][pSlot5a] = 0;
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pColde] > 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmaData[PlayerInfo[playerid][pColde]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pColde]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pColde] = 0;
                                    PlayerInfo[playerid][pColdreA] = 0;

                                    RemovePlayerAttachedObject(playerid, 2);
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pArmaMao] > 0)
                        {
                            ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaCor] = 1;
                            ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaCom] = 0;

                            DesarmandoPlayer[playerid] = 2;
                            ResetPlayerWeapons(playerid);
                            PlayerInfo[playerid][pArmaMao] = 0;
                            RemovePlayerAttachedObject(playerid, 0);
                            ArmasInv++;
                        }
                        if(ArmasInv > 0) SendClientMessage(playerid,COLOR_LIGHTRED,"[PCESP] As suas armas do inventário foram retiradas.");

                        if(PlayerInfo[playerid][pMun9mm] > 0 || PlayerInfo[playerid][pMunCart] > 0 || PlayerInfo[playerid][pMun556] > 0 || PlayerInfo[playerid][pMun127] > 0)
                        {
                            PlayerInfo[playerid][pMun9mm] = 0;
                            PlayerInfo[playerid][pMunCart] = 0;
                            PlayerInfo[playerid][pMun556] = 0;
                            PlayerInfo[playerid][pMun127] = 0;
                            SendClientMessage(playerid,COLOR_LIGHTRED,"[PCESP] As suas munições do inventário foram retiradas.");
                        }
                    }
                }
            }
            else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está vestiário da polícia.");
    }
    if(FacInfo[FacId][fTipo] == FAC_TIPO_EB)
    {
            if(IsPlayerInRangeOfPoint(playerid, 15, FacInfo[FacId][fArmarioPosX], FacInfo[FacId][fArmarioPosY], FacInfo[FacId][fArmarioPosZ]) && GetPlayerVirtualWorld(playerid) == FacInfo[FacId][fArmarioVw])
            {
			    new StrMsg[256];

			    if(PlayerInfo[playerid][pDutySkin] == 0) PlayerInfo[playerid][pDutySkin] = 20500;
			    switch(PlayerInfo[playerid][pEmServico])
			    {
			    	case 0:
			    	{
	  					new ArmasInv = 0;
					    if(PlayerInfo[playerid][pSlot1] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot2] != 0)
						{
							switch(ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot3] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot4] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot5] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pColde] > 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pArmaMao] > 0) ArmasInv++;
						if(ArmasInv > 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve guardar sua arma particulares no armário antes de entrar em serviço. ( Armas da mão, /arma e /inv )");

					    if(PlayerInfo[playerid][pMun9mm] > 0 || PlayerInfo[playerid][pMunCart] > 0 || PlayerInfo[playerid][pMun556] > 0 || PlayerInfo[playerid][pMun127] > 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve guardar suas munições particulares no armário antes de entrar em serviço.");

                        format(StrMsg, sizeof(StrMsg), "**PROTEGE: %s %s entrou em serviço!**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
	  					SendFacMessage(0x6666CCFF,FacId,StrMsg);
	  					PlayerInfo[playerid][pEmServico] = 1;
	  					SetPlayerSkin(playerid, PlayerInfo[playerid][pDutySkin]);
	  					SetPlayerColor(playerid,0x8d8dff00);
					}
					case 1:
					{
					    //if(PlayerInfo[playerid][pArmaMao] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa devolver suas armas ou guarda-las no armário para sair de serviço.");
						//if(PlayerInfo[playerid][pColde] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa devolver a arma do corpo para sair de serviço.");

					    format(StrMsg, sizeof(StrMsg), "** PROTEGE: %s %s saiu de serviço!**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
		   				SendFacMessage(0x6666CCFF,FacId,StrMsg);
		   				PlayerInfo[playerid][pEmServico] = 0;
		   				SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		   				SetPlayerColor(playerid,0xFFFFFFFF);
		   				P_Armour[playerid] = 0; SetPlayerArmour_CA(playerid, 0);

		   				new ArmasInv = 0;
					    if(PlayerInfo[playerid][pSlot1] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pSlot1]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pSlot1]][ArmaCom] = 0;

									PlayerInfo[playerid][pSlot1] = 0;
									PlayerInfo[playerid][pSlot1a] = 0;
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot2] != 0)
						{
							switch(ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pSlot2]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pSlot2]][ArmaCom] = 0;

									PlayerInfo[playerid][pSlot2] = 0;
									PlayerInfo[playerid][pSlot2a] = 0;
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot3] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pSlot3]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pSlot3]][ArmaCom] = 0;

									PlayerInfo[playerid][pSlot3] = 0;
									PlayerInfo[playerid][pSlot3a] = 0;
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot4] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pSlot4]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pSlot4]][ArmaCom] = 0;

									PlayerInfo[playerid][pSlot4] = 0;
									PlayerInfo[playerid][pSlot4a] = 0;
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot5] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pSlot5]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pSlot5]][ArmaCom] = 0;

									PlayerInfo[playerid][pSlot5] = 0;
									PlayerInfo[playerid][pSlot5a] = 0;
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pColde] > 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pColde]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pColde]][ArmaCom] = 0;

									PlayerInfo[playerid][pColde] = 0;
									PlayerInfo[playerid][pColdreA] = 0;

									RemovePlayerAttachedObject(playerid, 2);
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pArmaMao] > 0)
						{
						    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaCor] = 1;
				     		ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaCom] = 0;

						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							ArmasInv++;
						}
						if(ArmasInv > 0) SendClientMessage(playerid,COLOR_LIGHTRED,"[PROTEGE] As suas armas do inventário foram retiradas.");

					    if(PlayerInfo[playerid][pMun9mm] > 0 || PlayerInfo[playerid][pMunCart] > 0 || PlayerInfo[playerid][pMun556] > 0 || PlayerInfo[playerid][pMun127] > 0)
				        {
				            PlayerInfo[playerid][pMun9mm] = 0;
							PlayerInfo[playerid][pMunCart] = 0;
							PlayerInfo[playerid][pMun556] = 0;
							PlayerInfo[playerid][pMun127] = 0;
							SendClientMessage(playerid,COLOR_LIGHTRED,"[PROTEGE] As suas munições do inventário foram retiradas.");
				        }
					}
				}
			}
   			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está no armazem de sua facção.");
    }
    if(FacInfo[FacId][fTipo] == FAC_TIPO_BANK)
    {
            if(IsPlayerInRangeOfPoint(playerid, 15, FacInfo[FacId][fArmarioPosX], FacInfo[FacId][fArmarioPosY], FacInfo[FacId][fArmarioPosZ]) && GetPlayerVirtualWorld(playerid) == FacInfo[FacId][fArmarioVw])
            {
                new StrMsg[256];

                if(PlayerInfo[playerid][pDutySkin] == 0) PlayerInfo[playerid][pDutySkin] = 20401;
                switch(PlayerInfo[playerid][pEmServico])
                {
                    case 0:
                    {
                        new ArmasInv = 0;
                        if(PlayerInfo[playerid][pSlot1] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot2] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot3] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot4] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot5] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pColde] > 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pArmaMao] > 0) ArmasInv++;
                        if(ArmasInv > 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve guardar sua arma particulares antes de entrar em serviço. ( Armas da mão, /arma e /inv )");

                        if(PlayerInfo[playerid][pMun9mm] > 0 || PlayerInfo[playerid][pMunCart] > 0 || PlayerInfo[playerid][pMun556] > 0 || PlayerInfo[playerid][pMun127] > 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve guardar suas munições particulares no armário antes de entrar em serviço.");

                        format(StrMsg, sizeof(StrMsg), "** BASE: %s %s entrou em serviço!**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
                        SendFacMessage(0x6666CCFF,FacId,StrMsg);
                        PlayerInfo[playerid][pEmServico] = 1;
                        SetPlayerSkin(playerid, PlayerInfo[playerid][pDutySkin]);
                    }
                    case 1:
                    {
                        //if(PlayerInfo[playerid][pArmaMao] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa devolver suas armas ou guarda-las no armário para sair de serviço.");
                        //if(PlayerInfo[playerid][pColde] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa devolver a arma do corpo para sair de serviço.");

                        format(StrMsg, sizeof(StrMsg), "** BASE: %s %s saiu de serviço!**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
                        SendFacMessage(0x6666CCFF,FacId,StrMsg);
                        PlayerInfo[playerid][pEmServico] = 0;
                        SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                        P_Armour[playerid] = 0; SetPlayerArmour_CA(playerid, 0);

                        new ArmasInv = 0;
                        if(PlayerInfo[playerid][pSlot1] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmaData[PlayerInfo[playerid][pSlot1]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pSlot1]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pSlot1] = 0;
                                    PlayerInfo[playerid][pSlot1a] = 0;
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot2] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmaData[PlayerInfo[playerid][pSlot2]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pSlot2]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pSlot2] = 0;
                                    PlayerInfo[playerid][pSlot2a] = 0;
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot3] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmaData[PlayerInfo[playerid][pSlot3]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pSlot3]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pSlot3] = 0;
                                    PlayerInfo[playerid][pSlot3a] = 0;
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot4] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmaData[PlayerInfo[playerid][pSlot4]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pSlot4]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pSlot4] = 0;
                                    PlayerInfo[playerid][pSlot4a] = 0;
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot5] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmaData[PlayerInfo[playerid][pSlot5]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pSlot5]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pSlot5] = 0;
                                    PlayerInfo[playerid][pSlot5a] = 0;
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pColde] > 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmaData[PlayerInfo[playerid][pColde]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pColde]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pColde] = 0;
                                    PlayerInfo[playerid][pColdreA] = 0;

                                    RemovePlayerAttachedObject(playerid, 2);
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pArmaMao] > 0)
                        {
                            ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaCor] = 1;
                            ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaCom] = 0;

                            DesarmandoPlayer[playerid] = 2;
                            ResetPlayerWeapons(playerid);
                            PlayerInfo[playerid][pArmaMao] = 0;
                            RemovePlayerAttachedObject(playerid, 0);
                            ArmasInv++;
                        }
                        if(ArmasInv > 0) SendClientMessage(playerid,COLOR_LIGHTRED,"[PROTEGE] As suas armas do inventário foram retiradas.");

                        if(PlayerInfo[playerid][pMun9mm] > 0 || PlayerInfo[playerid][pMunCart] > 0 || PlayerInfo[playerid][pMun556] > 0 || PlayerInfo[playerid][pMun127] > 0)
                        {
                            PlayerInfo[playerid][pMun9mm] = 0;
                            PlayerInfo[playerid][pMunCart] = 0;
                            PlayerInfo[playerid][pMun556] = 0;
                            PlayerInfo[playerid][pMun127] = 0;
                            SendClientMessage(playerid,COLOR_LIGHTRED,"[PROTEGE] As suas munições do inventário foram retiradas.");
                        }
                    }
                }
            }
            else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está vestiário da polícia.");
    }
    if(FacInfo[FacId][fTipo] == FAC_TIPO_CBERJ)
    {
        if(IsPlayerInRangeOfPoint(playerid, 15, FacInfo[FacId][fArmarioPosX], FacInfo[FacId][fArmarioPosY], FacInfo[FacId][fArmarioPosZ]) && GetPlayerVirtualWorld(playerid) == FacInfo[FacId][fArmarioVw])
        {
            new StrMsg[256];
            if(PlayerInfo[playerid][pDutySkin] == 0) PlayerInfo[playerid][pDutySkin] = 20300;
            switch(PlayerInfo[playerid][pEmServico])
            {
                case 0:
                {
                        new ArmasInv = 0;
                        if(PlayerInfo[playerid][pSlot1] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot2] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot3] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot4] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pSlot5] != 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pColde] > 0)
                        {
                            switch(ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo])
                            {
                                case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
                                {
                                    ArmasInv++;
                                }
                            }
                        }
                        if(PlayerInfo[playerid][pArmaMao] > 0) ArmasInv++;
                        if(ArmasInv > 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "[ERRO] {FFFFFF}Você deve guardar sua arma particulares antes de entrar em serviço. ( Armas da mão, /arma e /inv )");

                        if(PlayerInfo[playerid][pMun9mm] > 0 || PlayerInfo[playerid][pMunCart] > 0 || PlayerInfo[playerid][pMun556] > 0 || PlayerInfo[playerid][pMun127] > 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "[ERRO] {FFFFFF}Você deve guardar suas munições particulares antes de entrar em serviço.");

                        format(StrMsg, sizeof(StrMsg), "** COCB: %s %s entrou em serviço!**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
                        SendFacMessage(0x6666CCFF,FacId,StrMsg);
                        PlayerInfo[playerid][pEmServico] = 1;
                        SetPlayerSkin(playerid, PlayerInfo[playerid][pDutySkin]);
                        SetPlayerColor(playerid, 0xFF8282FF);
                        //SetPlayerColor(playerid,0xE95C2EFF);
                }
                case 1:
                {
                        format(StrMsg, sizeof(StrMsg), "** COCB: %s %s saiu de serviço!**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
                        SendFacMessage(0x6666CCFF,FacId,StrMsg);
                        PlayerInfo[playerid][pEmServico] = 0;
                        SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                        SetPlayerColor(playerid,0xFFFFFFFF);
                    
                        new ArmasInv = 0;
                        if(PlayerInfo[playerid][pSlot1] != 0)
                        {
                            if(ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo] > 0)
                            {
                                    ArmaData[PlayerInfo[playerid][pSlot1]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pSlot1]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pSlot1] = 0;
                                    PlayerInfo[playerid][pSlot1a] = 0;
                                    ArmasInv++;
                            }
                        }
                        if(PlayerInfo[playerid][pSlot2] != 0)
                        {
                            if(ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo] > 0)
                            {
                                    ArmaData[PlayerInfo[playerid][pSlot2]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pSlot2]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pSlot2] = 0;
                                    PlayerInfo[playerid][pSlot2a] = 0;
                                    ArmasInv++;
                            }
                        }
                        if(PlayerInfo[playerid][pSlot3] != 0)
                        {
                            if(ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo] > 0)
                            {
                                    ArmaData[PlayerInfo[playerid][pSlot3]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pSlot3]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pSlot3] = 0;
                                    PlayerInfo[playerid][pSlot3a] = 0;
                                    ArmasInv++;
                            }
                        }
                        if(PlayerInfo[playerid][pSlot4] != 0)
                        {
                            if(ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo] > 0)
                            {
                                    ArmaData[PlayerInfo[playerid][pSlot4]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pSlot4]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pSlot4] = 0;
                                    PlayerInfo[playerid][pSlot4a] = 0;
                                    ArmasInv++;
                            }
                        }
                        if(PlayerInfo[playerid][pSlot5] != 0)
                        {
                            if(ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo] > 0)
                            {
                                    ArmaData[PlayerInfo[playerid][pSlot5]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pSlot5]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pSlot5] = 0;
                                    PlayerInfo[playerid][pSlot5a] = 0;
                                    ArmasInv++;
                            }
                        }
                        if(PlayerInfo[playerid][pColde] > 0)
                        {
                            if(ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo] > 0)
                            {
                                    ArmaData[PlayerInfo[playerid][pColde]][ArmaCor] = 1;
                                    ArmaData[PlayerInfo[playerid][pColde]][ArmaCom] = 0;

                                    PlayerInfo[playerid][pColde] = 0;
                                    PlayerInfo[playerid][pColdreA] = 0;

                                    RemovePlayerAttachedObject(playerid, 2);
                                    ArmasInv++;
                            }
                        }
                        if(PlayerInfo[playerid][pArmaMao] > 0)
                        {
                            ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaCor] = 1;
                            ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaCom] = 0;

                            DesarmandoPlayer[playerid] = 2;
                            ResetPlayerWeapons(playerid);
                            PlayerInfo[playerid][pArmaMao] = 0;
                            RemovePlayerAttachedObject(playerid, 0);
                            ArmasInv++;
                        }
                        if(ArmasInv > 0) SendClientMessage(playerid,COLOR_LIGHTRED,"[GBESP] As suas armas do inventário foram retiradas.");

                        if(PlayerInfo[playerid][pMun9mm] > 0 || PlayerInfo[playerid][pMunCart] > 0 || PlayerInfo[playerid][pMun556] > 0 || PlayerInfo[playerid][pMun127] > 0)
                        {
                            PlayerInfo[playerid][pMun9mm] = 0;
                            PlayerInfo[playerid][pMunCart] = 0;
                            PlayerInfo[playerid][pMun556] = 0;
                            PlayerInfo[playerid][pMun127] = 0;
                            SendClientMessage(playerid,COLOR_LIGHTRED,"[GBESP] As suas munições do inventário foram retiradas.");
                        }
                }
            }
        }
        else return SendClientMessage(playerid, COLOR_LIGHTRED, "[ERRO] {FFFFFF}Você não está no vestiário do departamento de bombeiros.");
    }
	return 1;
}

CMD:trabalhar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");

    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[FacId][fTipo] == FAC_TIPO_BANK)
    {
            if(IsPlayerInRangeOfPoint(playerid, 15, FacInfo[FacId][fArmarioPosX], FacInfo[FacId][fArmarioPosY], FacInfo[FacId][fArmarioPosZ]) && GetPlayerVirtualWorld(playerid) == FacInfo[FacId][fArmarioVw])
            {
			    new StrMsg[256];

			    if(PlayerInfo[playerid][pDutySkin] == 0) PlayerInfo[playerid][pDutySkin] = 20500;
			    switch(PlayerInfo[playerid][pEmServico])
			    {
			    	case 0:
			    	{
	  					new ArmasInv = 0;
					    if(PlayerInfo[playerid][pSlot1] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot2] != 0)
						{
							switch(ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot3] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot4] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot5] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pColde] > 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pArmaMao] > 0) ArmasInv++;
						if(ArmasInv > 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve guardar sua arma particulares no armário antes de entrar em serviço. ( Armas da mão, /arma e /inv )");

					    if(PlayerInfo[playerid][pMun9mm] > 0 || PlayerInfo[playerid][pMunCart] > 0 || PlayerInfo[playerid][pMun556] > 0 || PlayerInfo[playerid][pMun127] > 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve guardar suas munições particulares no armário antes de entrar em serviço.");

                        format(StrMsg, sizeof(StrMsg), "**PROTEGE: %s %s entrou em serviço!**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
	  					SendFacMessage(0x6666CCFF,FacId,StrMsg);
	  					PlayerInfo[playerid][pEmServico] = 1;
	  					SetPlayerSkin(playerid, PlayerInfo[playerid][pDutySkin]);
	  					SetPlayerColor(playerid,0x8d8dff00);
					}
					case 1:
					{
					    //if(PlayerInfo[playerid][pArmaMao] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa devolver suas armas ou guarda-las no armário para sair de serviço.");
						//if(PlayerInfo[playerid][pColde] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa devolver a arma do corpo para sair de serviço.");

					    format(StrMsg, sizeof(StrMsg), "** PROTEGE: %s %s saiu de serviço!**", GetPlayerCargo(playerid), PlayerName(playerid, 0));
		   				SendFacMessage(0x6666CCFF,FacId,StrMsg);
		   				PlayerInfo[playerid][pEmServico] = 0;
		   				SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
		   				SetPlayerColor(playerid,0xFFFFFFFF);
		   				P_Armour[playerid] = 0; SetPlayerArmour_CA(playerid, 0);

		   				new ArmasInv = 0;
					    if(PlayerInfo[playerid][pSlot1] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pSlot1]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pSlot1]][ArmaCom] = 0;

									PlayerInfo[playerid][pSlot1] = 0;
									PlayerInfo[playerid][pSlot1a] = 0;
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot2] != 0)
						{
							switch(ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pSlot2]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pSlot2]][ArmaCom] = 0;

									PlayerInfo[playerid][pSlot2] = 0;
									PlayerInfo[playerid][pSlot2a] = 0;
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot3] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pSlot3]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pSlot3]][ArmaCom] = 0;

									PlayerInfo[playerid][pSlot3] = 0;
									PlayerInfo[playerid][pSlot3a] = 0;
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot4] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pSlot4]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pSlot4]][ArmaCom] = 0;

									PlayerInfo[playerid][pSlot4] = 0;
									PlayerInfo[playerid][pSlot4a] = 0;
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pSlot5] != 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pSlot5]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pSlot5]][ArmaCom] = 0;

									PlayerInfo[playerid][pSlot5] = 0;
									PlayerInfo[playerid][pSlot5a] = 0;
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pColde] > 0)
						{
						    switch(ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo])
						    {
								case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
								{
								    ArmaData[PlayerInfo[playerid][pColde]][ArmaCor] = 1;
						        	ArmaData[PlayerInfo[playerid][pColde]][ArmaCom] = 0;

									PlayerInfo[playerid][pColde] = 0;
									PlayerInfo[playerid][pColdreA] = 0;

									RemovePlayerAttachedObject(playerid, 2);
									ArmasInv++;
								}
							}
						}
						if(PlayerInfo[playerid][pArmaMao] > 0)
						{
						    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaCor] = 1;
				     		ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaCom] = 0;

						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							ArmasInv++;
						}
						if(ArmasInv > 0) SendClientMessage(playerid,COLOR_LIGHTRED,"[PROTEGE] As suas armas do inventário foram retiradas.");

					    if(PlayerInfo[playerid][pMun9mm] > 0 || PlayerInfo[playerid][pMunCart] > 0 || PlayerInfo[playerid][pMun556] > 0 || PlayerInfo[playerid][pMun127] > 0)
				        {
				            PlayerInfo[playerid][pMun9mm] = 0;
							PlayerInfo[playerid][pMunCart] = 0;
							PlayerInfo[playerid][pMun556] = 0;
							PlayerInfo[playerid][pMun127] = 0;
							SendClientMessage(playerid,COLOR_LIGHTRED,"[PROTEGE] As suas munições do inventário foram retiradas.");
				        }
					}
				}
			}
   			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está no armazem de sua facção.");
    }
	return 1;
}

CMD:equipar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o taser na mão.");
	new i = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	if(i == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pertence a nenhuma facção.");
	
	if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ)
	{
	    if(PlayerInfo[playerid][pEmServico] != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em serviço.");
	    if(IsPlayerInRangeOfPoint(playerid, 15, FacInfo[i][fArmarioPosX], FacInfo[i][fArmarioPosY], FacInfo[i][fArmarioPosZ]) && GetPlayerVirtualWorld(playerid) == FacInfo[i][fArmarioVw])
		  	Dialog_Show(playerid, Equipar_PMERJ, DIALOG_STYLE_LIST, "[PMESP] Equipamentos", "Armas\nMunições\nColete\nRetirar Colete\nDevolver Armas\nAcessórios", "Selecionar", "Fechar");
	    else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está na sala de equipamentos.");
	}
    if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ)
    {
        if(PlayerInfo[playerid][pEmServico] != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em serviço.");
        if(IsPlayerInRangeOfPoint(playerid, 15, FacInfo[i][fArmarioPosX], FacInfo[i][fArmarioPosY], FacInfo[i][fArmarioPosZ]) && GetPlayerVirtualWorld(playerid) == FacInfo[i][fArmarioVw])
            Dialog_Show(playerid, Equipar_PCERJ, DIALOG_STYLE_LIST, "[PCESP] Equipamentos", "Armas\nMunições\nColete\nRetirar Colete\nDevolver Armas\nAcessórios", "Selecionar", "Fechar");
        else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está na sala de equipamentos.");
    }
    if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB)
    {
        if(PlayerInfo[playerid][pEmServico] != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em serviço.");
        if(IsPlayerInRangeOfPoint(playerid, 15, FacInfo[i][fArmarioPosX], FacInfo[i][fArmarioPosY], FacInfo[i][fArmarioPosZ]) && GetPlayerVirtualWorld(playerid) == FacInfo[i][fArmarioVw])
            Dialog_Show(playerid, Equipar_eb, DIALOG_STYLE_LIST, "[EB] Equipamentos", "Armas\nMunições\nColete\nRetirar Colete\nDevolver Armas\nAcessórios", "Selecionar", "Fechar");
        else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está na sala de equipamentos.");
    }
	if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_BANK)
	{
	    if(PlayerInfo[playerid][pEmServico] != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em serviço.");
	    if(IsPlayerInRangeOfPoint(playerid, 15, FacInfo[i][fArmarioPosX], FacInfo[i][fArmarioPosY], FacInfo[i][fArmarioPosZ]) && GetPlayerVirtualWorld(playerid) == FacInfo[i][fArmarioVw])
		  	Dialog_Show(playerid, Equipar_BANK, DIALOG_STYLE_LIST, "[PROTEGE] Equipamentos", "Armas\nMunições\nColete\nRetirar Colete\nDevolver Armas\nAcessórios", "Selecionar", "Fechar");
	    else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está na sala de equipamentos.");
	}
	return 1;
}

Dialog:Equipar_eb(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
    else
    {
        switch(listitem)
        {
            case 0:
			{
				Dialog_Show(playerid, Equipar_EB1, DIALOG_STYLE_TABLIST_HEADERS, "[EB] Equipamentos", "Arma:\tCargo nescessário:\nCassetete\t1\nGranada de Fumaça\t1\nColt 45\t1\nDesert Eagle\t1\nShotgun\t1\nMP5\t1\nM4\t1\nParaquedas\t1\nSniper\t5", "Pegar", "Fechar");
			}
			case 1: Dialog_Show(playerid, Equipar_EB2, DIALOG_STYLE_TABLIST_HEADERS, "[EB] Equipamentos", "Tipo de Munição:\tQuantidade:\n9mm\t60\nCartuchos\t60\n5.56mm\t120\n12.7x106mm\t60", "Pegar", "Fechar");
            case 2: { P_Armour[playerid] = 100; SetPlayerArmour_CA(playerid, 100); }
            case 3: { P_Armour[playerid] = 0; SetPlayerArmour_CA(playerid, 0); }
            case 4:
            {
                new ArmaId = PlayerInfo[playerid][pArmaMao];
                if(ArmaId > 0)
                {
                    new strl[326];
				   	format(strl, sizeof(strl), "%s devolveu uma %s com numeração: %d.", PlayerName(playerid, 0), GunNames[ArmaData[ArmaId][ArmaModelo]], ArmaData[ArmaId][ArmaNumeracao]);
				  	LogDevarma_P(playerid,strl);
	                //========================================
				    DesarmandoPlayer[playerid] = 2;
					ResetPlayerWeapons(playerid);
					PlayerInfo[playerid][pArmaMao] = 0;
					RemovePlayerAttachedObject(playerid, 0);
					//========================================

					ArmaData[ArmaId][ArmaCor] = 1;

					SalvarArma(ArmaId);
					return 1;
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma para entregar.");
            }
            case 5:
	  		{
	  		    Dialog_Show(playerid, DIALOGLJROUPAS_EB, DIALOG_STYLE_LIST, "Selecione uma categoria.", "Oculos\nChapeus\nOutros Itens", "Selecionar", "Cancelar");
	    	}
		}
	}
	return 1;
}

Dialog:Equipar_EB1(playerid, response, listitem, inputtext[])
{
    new strl[100];

    if(!response) return 1;
    else
    {
        switch(listitem)
        {
            case 0:
            {
                EntregandoArmaSQL(playerid, 3, 0, 1, 0);
                return 1;
    		}
			case 1:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    EntregandoArmaSQL(playerid, 17, 0, 10, 0);
			    PlayerInfo[playerid][pMun9mm] += 320;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu algumas granadas de fumaça.");
			   	format(strl, sizeof(strl), "%s equipou algumas granadas de fumaça.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 2:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    EntregandoArmaSQL(playerid, 22, 0, 1, 0);
			    PlayerInfo[playerid][pMun9mm] += 24;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma Colt45 e 24 balas 9mm.");
			   	format(strl, sizeof(strl), "%s equipou uma Colt 45 e 24 balas 9mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 3:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    EntregandoArmaSQL(playerid, 24, 0, 1, 0);
			    PlayerInfo[playerid][pMun9mm] += 24;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma Desert Eagle e 24 balas 9mm.");
			   	format(strl, sizeof(strl), "%s equipou uma Desert Eagle e 24 balas 9mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 4:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    if(PlayerInfo[playerid][pFacCargo] < 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem cargo o suficiente para pegar essa arma.");
			    EntregandoArmaSQL(playerid, 25, 0, 1, 0);
			    PlayerInfo[playerid][pMunCart] += 20;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma Shotgun e 20 cartuchos.");
			   	format(strl, sizeof(strl), "%s equipou uma Shotgun e 20 cartuchos.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 5:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    if(PlayerInfo[playerid][pFacCargo] < 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem cargo o suficiente para pegar essa arma.");
			    EntregandoArmaSQL(playerid, 29, 0, 1, 0);
			    PlayerInfo[playerid][pMun9mm] += 60;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma MP5 e 60 balas 9mm.");
			   	format(strl, sizeof(strl), "%s equipou uma MP5 e 60 balas 9mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 6:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    if(PlayerInfo[playerid][pFacCargo] < 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem cargo o suficiente para pegar essa arma.");
			    EntregandoArmaSQL(playerid, 31, 0, 1, 0);
			    PlayerInfo[playerid][pMun556] += 60;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma M4 e 60 balas 5.56mm.");
			   	format(strl, sizeof(strl), "%s equipou uma M4 e 60 balas 5.56mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 7:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    if(PlayerInfo[playerid][pFacCargo] < 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem cargo o suficiente para pegar essa arma.");
			    EntregandoArmaSQL(playerid, 46, 0, 1, 0);
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu um paraquedas.");
			    return 1;
			}
			case 8:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    if(PlayerInfo[playerid][pFacCargo] < 5) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem cargo o suficiente para pegar essa arma.");
			    EntregandoArmaSQL(playerid, 34, 0, 1, 0);
			    PlayerInfo[playerid][pMun127] += 60;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma sniper e 60 munições.");
			   	format(strl, sizeof(strl), "%s equipou uma sniper e 60 munições.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
        }
    }
	return 1;
}

Dialog:Equipar_EB2(playerid, response, listitem, inputtext[])
{
    new strl[326];

    if(!response) return 1;
    else
    {
        switch(listitem)
        {
            case 0:
            {
                PlayerInfo[playerid][pMun9mm] += 60;
                SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu 60 munições 9mm.");
			   	format(strl, sizeof(strl), "%s equipou 60 munições 9mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
                return 1;
    		}
			case 1:
			{
                PlayerInfo[playerid][pMunCart] += 60;
                SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu 60 cartuchos.");
			   	format(strl, sizeof(strl), "%s equipou 60 cartuchos.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 2:
			{
			    PlayerInfo[playerid][pMun556] += 120;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu 120 munições 5.56mm.");
			   	format(strl, sizeof(strl), "%s equipou 120 munições 5.56mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 3:
			{
			    PlayerInfo[playerid][pMun127] += 60;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu 60 balas 12.7x106mm.");
			   	format(strl, sizeof(strl), "%s equipou 60 balas 12.7x106mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
        }
    }
	return 1;
}

Dialog:Equipar_PMERJ(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
    else
    {
        switch(listitem)
        {
            case 0:
			{
				Dialog_Show(playerid, Equipar_PMERJ1, DIALOG_STYLE_TABLIST_HEADERS, "[PMESP] Equipamentos", "Arma:\tCargo nescessário:\nCassetete\t1\nGranada de Fumaça\t1\nColt 45\t1\nDesert Eagle\t1\nShotgun\t1\nMP5\t1\nM4\t2", "Pegar", "Fechar");
			}
			case 1: Dialog_Show(playerid, Equipar_PMERJ2, DIALOG_STYLE_TABLIST_HEADERS, "[PMESP] Equipamentos", "Tipo de Munição:\tQuantidade:\n9mm\t60\nCartuchos\t60\n5.56mm\t250\n12.7x106mm\t60", "Pegar", "Fechar");
            case 2: { P_Armour[playerid] = 120; SetPlayerArmour_CA(playerid, 120); }
            case 3: { P_Armour[playerid] = 0; SetPlayerArmour_CA(playerid, 0); }
            case 4:
            {
                new ArmaId = PlayerInfo[playerid][pArmaMao];
                if(ArmaId > 0)
                {
                    new strl[326];
				   	format(strl, sizeof(strl), "%s devolveu uma %s com numeração: %d.", PlayerName(playerid, 0), GunNames[ArmaData[ArmaId][ArmaModelo]], ArmaData[ArmaId][ArmaNumeracao]);
				  	LogDevarma_P(playerid,strl);
	                //========================================
				    DesarmandoPlayer[playerid] = 2;
					ResetPlayerWeapons(playerid);
					PlayerInfo[playerid][pArmaMao] = 0;
					RemovePlayerAttachedObject(playerid, 0);
					//========================================

					ArmaData[ArmaId][ArmaCor] = 1;

					SalvarArma(ArmaId);
					return 1;
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma para entregar.");
            }
            case 5:
	  		{
	  		    Dialog_Show(playerid, DIALOGLJROUPAS_PMERJ, DIALOG_STYLE_LIST, "Selecione uma categoria.", "Oculos\nChapeus\nOutros Itens", "Selecionar", "Cancelar");
	    	}
		}
	}
	return 1;
}

Dialog:Equipar_PMERJ1(playerid, response, listitem, inputtext[])
{
    new strl[100];

    if(!response) return 1;
    else
    {
        switch(listitem)
        {
            case 0:
            {
                EntregandoArmaSQL(playerid, 3, 0, 1, 0);
                return 1;
    		}
			case 1:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    EntregandoArmaSQL(playerid, 17, 0, 10, 0);
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu algumas granadas de fumaça.");
			   	format(strl, sizeof(strl), "%s equipou algumas granadas de fumaça.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 2:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    EntregandoArmaSQL(playerid, 22, 0, 1, 0);
			    PlayerInfo[playerid][pMun9mm] += 35;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma Colt45 e 35 balas 9mm.");
			   	format(strl, sizeof(strl), "%s equipou uma Colt 45 e 24 balas 9mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 3:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    EntregandoArmaSQL(playerid, 24, 0, 1, 0);
			    PlayerInfo[playerid][pMun9mm] += 35;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma Desert Eagle e 35 balas 9mm.");
			   	format(strl, sizeof(strl), "%s equipou uma Desert Eagle e 24 balas 9mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 4:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    if(PlayerInfo[playerid][pFacCargo] < 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem cargo o suficiente para pegar essa arma.");
			    EntregandoArmaSQL(playerid, 25, 0, 1, 0);
			    PlayerInfo[playerid][pMunCart] += 20;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma Shotgun e 20 cartuchos.");
			   	format(strl, sizeof(strl), "%s equipou uma Shotgun e 20 cartuchos.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 5:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    if(PlayerInfo[playerid][pFacCargo] < 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem cargo o suficiente para pegar essa arma.");
			    EntregandoArmaSQL(playerid, 29, 0, 1, 0);
			    PlayerInfo[playerid][pMun9mm] += 60;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma MP5 e 60 balas 9mm.");
			   	format(strl, sizeof(strl), "%s equipou uma MP5 e 60 balas 9mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 6:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    if(PlayerInfo[playerid][pFacCargo] < 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem cargo o suficiente para pegar essa arma.");
			    EntregandoArmaSQL(playerid, 31, 0, 1, 0);
			    PlayerInfo[playerid][pMun556] += 120;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma M4 e 120 balas 5.56mm.");
			   	format(strl, sizeof(strl), "%s equipou uma M4 e 60 balas 5.56mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
        }
    }
	return 1;
}

Dialog:Equipar_PMERJ2(playerid, response, listitem, inputtext[])
{
    new strl[326];

    if(!response) return 1;
    else
    {
        switch(listitem)
        {
            case 0:
            {
                PlayerInfo[playerid][pMun9mm] += 100;
                SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu 100 balas 9mm.");
			   	format(strl, sizeof(strl), "%s equipou 100 balas 9mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
                return 1;
    		}
			case 1:
			{
                PlayerInfo[playerid][pMunCart] += 60;
                SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu 60 cartuchos.");
			   	format(strl, sizeof(strl), "%s equipou 60 cartuchos.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 2:
			{
			    PlayerInfo[playerid][pMun556] += 250;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu 250 balas 5.56mm.");
			   	format(strl, sizeof(strl), "%s equipou 250 balas 5.56mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 3:
			{
			    PlayerInfo[playerid][pMun127] += 60;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu 60 balas 12.7x106mm.");
			   	format(strl, sizeof(strl), "%s equipou 60 balas 12.7x106mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
        }
    }
	return 1;
}

Dialog:Equipar_BANK(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
    else
    {
        switch(listitem)
        {
            case 0:
			{
				Dialog_Show(playerid, Equipar_BANK1, DIALOG_STYLE_TABLIST_HEADERS, "[PROTEGE] Equipamentos", "Arma:\tCargo nescessário:\nColt 45\t1\nShotgun\t1", "Pegar", "Fechar");
			}
			case 1: Dialog_Show(playerid, Equipar_BANK2, DIALOG_STYLE_TABLIST_HEADERS, "[PROTEGE] Equipamentos", "Tipo de Munição:\tQuantidade:\n9mm\t60\nCartuchos", "Pegar", "Fechar");
            case 2: { P_Armour[playerid] = 100; SetPlayerArmour_CA(playerid, 100); }
            case 3: { P_Armour[playerid] = 0; SetPlayerArmour_CA(playerid, 0); }
            case 4:
            {
                new ArmaId = PlayerInfo[playerid][pArmaMao];
                if(ArmaId > 0)
                {
                    new strl[326];
				   	format(strl, sizeof(strl), "%s devolveu uma %s com numeração: %d.", PlayerName(playerid, 0), GunNames[ArmaData[ArmaId][ArmaModelo]], ArmaData[ArmaId][ArmaNumeracao]);
				  	LogDevarma_P(playerid,strl);
	                //========================================
				    DesarmandoPlayer[playerid] = 2;
					ResetPlayerWeapons(playerid);
					PlayerInfo[playerid][pArmaMao] = 0;
					RemovePlayerAttachedObject(playerid, 0);
					//========================================

					ArmaData[ArmaId][ArmaCor] = 1;

					SalvarArma(ArmaId);
					return 1;
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma para entregar.");
            }
            case 5:
	  		{
	  		    Dialog_Show(playerid, DIALOGLJROUPAS_PROTEGE, DIALOG_STYLE_LIST, "Selecione uma categoria.", "Outros Itens", "Selecionar", "Cancelar");
	    	}
		}
	}
	return 1;
}

Dialog:Equipar_BANK1(playerid, response, listitem, inputtext[])
{
    new strl[100];

    if(!response) return 1;
    else
    {
        switch(listitem)
        {
			case 0:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    EntregandoArmaSQL(playerid, 24, 0, 1, 0);
			    PlayerInfo[playerid][pMun9mm] += 24;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma Desert Eagle e 24 balas 9mm.");
			   	format(strl, sizeof(strl), "%s equipou uma Desert Eagle 24 balas 9mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 1:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    if(PlayerInfo[playerid][pFacCargo] < 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem cargo o suficiente para pegar essa arma.");
			    EntregandoArmaSQL(playerid, 25, 0, 1, 0);
			    PlayerInfo[playerid][pMunCart] += 20;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma Shotgun e 20 cartuchos.");
			   	format(strl, sizeof(strl), "%s equipou uma Shotgun e 20 cartuchos.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
        }
    }
	return 1;
}

Dialog:Equipar_BANK2(playerid, response, listitem, inputtext[])
{
    new strl[326];

    if(!response) return 1;
    else
    {
        switch(listitem)
        {
            case 0:
            {
                PlayerInfo[playerid][pMun9mm] += 60;
                SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu 60 munições 9mm.");
			   	format(strl, sizeof(strl), "%s equipou 60 munições 9mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
                return 1;
    		}
			case 1:
			{
                PlayerInfo[playerid][pMunCart] += 60;
                SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu 60 cartuchos.");
			   	format(strl, sizeof(strl), "%s equipou 60 cartuchos.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
        }
    }
	return 1;
}

Dialog:Equipar_PCERJ(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
    else
    {
        switch(listitem)
        {
            case 0:
			{
				Dialog_Show(playerid, Equipar_PCERJ1, DIALOG_STYLE_TABLIST_HEADERS, "[PCESP] Equipamentos", "Arma:\tCargo nescessário:\nCassetete\t1\nGranada de Fumaça\t1\nColt 45\t1\nDesert Eagle\t1\nShotgun\t1\nMP5\t1\nM4\t1\nParaquedas\t1\nSniper\t5", "Pegar", "Fechar");
			}
			case 1: Dialog_Show(playerid, Equipar_PCERJ2, DIALOG_STYLE_TABLIST_HEADERS, "[PCESP] Equipamentos", "Tipo de Munição:\tQuantidade:\n9mm\t60\nCartuchos\t60\n5.56mm\t120\n12.7x106mm\t60", "Pegar", "Fechar");
            case 2: { P_Armour[playerid] = 100; SetPlayerArmour_CA(playerid, 100); }
            case 3: { P_Armour[playerid] = 0; SetPlayerArmour_CA(playerid, 0); }
            case 4:
            {
                new ArmaId = PlayerInfo[playerid][pArmaMao];
                if(ArmaId > 0)
                {
                    new strl[326];
				   	format(strl, sizeof(strl), "%s devolveu uma %s com numeração: %d.", PlayerName(playerid, 0), GunNames[ArmaData[ArmaId][ArmaModelo]], ArmaData[ArmaId][ArmaNumeracao]);
				  	LogDevarma_P(playerid,strl);
	                //========================================
				    DesarmandoPlayer[playerid] = 2;
					ResetPlayerWeapons(playerid);
					PlayerInfo[playerid][pArmaMao] = 0;
					RemovePlayerAttachedObject(playerid, 0);
					//========================================

					ArmaData[ArmaId][ArmaCor] = 1;

					SalvarArma(ArmaId);
					return 1;
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma para entregar.");
            }
            case 5:
	  		{
	  		    Dialog_Show(playerid, DIALOGLJROUPAS_PCERJ, DIALOG_STYLE_LIST, "Selecione uma categoria.", "Oculos\nChapeus\nOutros Itens", "Selecionar", "Cancelar");
	    	}
		}
	}
	return 1;
}

Dialog:Equipar_PCERJ1(playerid, response, listitem, inputtext[])
{
    new strl[100];

    if(!response) return 1;
    else
    {
        switch(listitem)
        {
            case 0:
            {
                EntregandoArmaSQL(playerid, 3, 0, 1, 0);
                return 1;
    		}
			case 1:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    EntregandoArmaSQL(playerid, 17, 0, 10, 0);
			    PlayerInfo[playerid][pMun9mm] += 320;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu algumas granadas de fumaça.");
			   	format(strl, sizeof(strl), "%s equipou algumas granadas de fumaça.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 2:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    EntregandoArmaSQL(playerid, 22, 0, 1, 0);
			    PlayerInfo[playerid][pMun9mm] += 24;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma Colt45 e 24 balas 9mm.");
			   	format(strl, sizeof(strl), "%s equipou uma Colt 45 e 24 balas 9mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 3:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    EntregandoArmaSQL(playerid, 24, 0, 1, 0);
			    PlayerInfo[playerid][pMun9mm] += 24;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma Desert Eagle e 24 balas 9mm.");
			   	format(strl, sizeof(strl), "%s equipou uma Desert Eagle e 24 balas 9mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 4:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    if(PlayerInfo[playerid][pFacCargo] < 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem cargo o suficiente para pegar essa arma.");
			    EntregandoArmaSQL(playerid, 25, 0, 1, 0);
			    PlayerInfo[playerid][pMunCart] += 20;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma Shotgun e 20 cartuchos.");
			   	format(strl, sizeof(strl), "%s equipou uma Shotgun e 20 cartuchos.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 5:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    if(PlayerInfo[playerid][pFacCargo] < 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem cargo o suficiente para pegar essa arma.");
			    EntregandoArmaSQL(playerid, 29, 0, 1, 0);
			    PlayerInfo[playerid][pMun9mm] += 60;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma MP5 e 60 balas 9mm.");
			   	format(strl, sizeof(strl), "%s equipou uma MP5 e 60 balas 9mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 6:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    if(PlayerInfo[playerid][pFacCargo] < 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem cargo o suficiente para pegar essa arma.");
			    EntregandoArmaSQL(playerid, 31, 0, 1, 0);
			    PlayerInfo[playerid][pMun556] += 60;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma M4 e 60 balas 5.56mm.");
			   	format(strl, sizeof(strl), "%s equipou uma M4 e 60 balas 5.56mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 7:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    if(PlayerInfo[playerid][pFacCargo] < 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem cargo o suficiente para pegar essa arma.");
			    EntregandoArmaSQL(playerid, 46, 0, 1, 0);
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu um paraquedas.");
			    return 1;
			}
			case 8:
			{
			    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
			    if(PlayerInfo[playerid][pFacCargo] < 5) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem cargo o suficiente para pegar essa arma.");
			    EntregandoArmaSQL(playerid, 34, 0, 1, 0);
			    PlayerInfo[playerid][pMun127] += 60;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu uma sniper e 60 munições.");
			   	format(strl, sizeof(strl), "%s equipou uma sniper e 60 munições.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
        }
    }
	return 1;
}

Dialog:Equipar_PCERJ2(playerid, response, listitem, inputtext[])
{
    new strl[326];

    if(!response) return 1;
    else
    {
        switch(listitem)
        {
            case 0:
            {
                PlayerInfo[playerid][pMun9mm] += 60;
                SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu 60 munições 9mm.");
			   	format(strl, sizeof(strl), "%s equipou 60 munições 9mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
                return 1;
    		}
			case 1:
			{
                PlayerInfo[playerid][pMunCart] += 60;
                SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu 60 cartuchos.");
			   	format(strl, sizeof(strl), "%s equipou 60 cartuchos.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 2:
			{
			    PlayerInfo[playerid][pMun556] += 120;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu 120 munições 5.56mm.");
			   	format(strl, sizeof(strl), "%s equipou 120 munições 5.56mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
			case 3:
			{
			    PlayerInfo[playerid][pMun127] += 60;
			    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você recebeu 60 balas 12.7x106mm.");
			   	format(strl, sizeof(strl), "%s equipou 60 balas 12.7x106mm.", PlayerName(playerid,0));
			  	LogEquipar_P(playerid,strl);
			    return 1;
			}
        }
    }
	return 1;
}

CMD:cargo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pFac] == 0) return 1;
	else
	{
	    new faccao = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	    new maxcargo;
		if(10 < FacInfo[faccao][fTipo] < 18) maxcargo = 5;
		else maxcargo = 11;
  		if(PlayerInfo[playerid][pFacCargo] < maxcargo)
  		{
    		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissão para alterar o cargo dos membros.");
      		return 1;
        }
		new other,cargo;
		if (sscanf(params, "ii", other, cargo))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /cargo [playerid] [Cargo]");
			return 1;
		}
		else
		{
		    new cargomax;
		    if(10 < FacInfo[faccao][fTipo] < 18) cargomax = 5;
			else cargomax = 11;

		    if(!PlayerInfo[other][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O Jogador não está logado.");
		    if(PlayerInfo[other][pFac] != PlayerInfo[playerid][pFac]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O Jogador não é de sua facção.");
		    if(other == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode alterar seu cargo.");

		    if(cargo <= cargomax)
		    {
            	PlayerInfo[other][pFacCargo] = cargo;

            	new cargoname[26];
            	if(cargo == 1) format(cargoname, sizeof(cargoname), "%s",FacInfo[faccao][fRank1]);
            	else if(cargo == 2) format(cargoname, sizeof(cargoname), "%s",FacInfo[faccao][fRank2]);
            	else if(cargo == 3) format(cargoname, sizeof(cargoname), "%s",FacInfo[faccao][fRank3]);
            	else if(cargo == 4) format(cargoname, sizeof(cargoname), "%s",FacInfo[faccao][fRank4]);
            	else if(cargo == 5) format(cargoname, sizeof(cargoname), "%s",FacInfo[faccao][fRank5]);
            	else if(cargo == 6) format(cargoname, sizeof(cargoname), "%s",FacInfo[faccao][fRank6]);
            	else if(cargo == 7) format(cargoname, sizeof(cargoname), "%s",FacInfo[faccao][fRank7]);
            	else if(cargo == 8) format(cargoname, sizeof(cargoname), "%s",FacInfo[faccao][fRank8]);
            	else if(cargo == 9) format(cargoname, sizeof(cargoname), "%s",FacInfo[faccao][fRank9]);
            	else if(cargo == 10) format(cargoname, sizeof(cargoname), "%s",FacInfo[faccao][fRank10]);
            	else if(cargo == 11) format(cargoname, sizeof(cargoname), "%s",FacInfo[faccao][fRank11]);
            	else if(cargo == 12) format(cargoname, sizeof(cargoname), "%s",FacInfo[faccao][fRank12]);

            	format(string, sizeof(string), "O seu cargo na %s foi atualizado para %s por %s.", FacInfo[faccao][fNome], cargoname,PlayerName(playerid, 0));
            	SendClientMessage(other, COLOR_YELLOW, string);

            	format(string, sizeof(string), "Você alterou o cargo de %s para %s.",PlayerName(other, 0), cargoname);
            	SendClientMessage(playerid, COLOR_YELLOW, string);
			}
            else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Cargo inválido.");
		}
	}
	return 1;
}

CMD:amarrar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(OutrasInfos[playerid][oAlgemado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode amarrar pois está algemado.");
    if(OutrasInfos[playerid][oAmarrado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode amarrar pois está amarrado.");
    {
	    new PTiD;
	    if(sscanf(params, "u", PTiD)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF}: /amarrar [id]");
	    {
		    if(GetDistanceBetweenPlayers(playerid,PTiD) < 5.0)
			{
			    OutrasInfos[PTiD][oAmarrado] = 1;
				SetPlayerAttachedObject(PTiD, 1, 19418, 6, -0.027999, 0.078998, -0.029999, -18.699926, 0.000000, 104.199928, 1.489999, 3.036000, 1.957998);
				SetPlayerSpecialAction(PTiD, SPECIAL_ACTION_CUFFED);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está perto do player.");
		}
	}
}
CMD:arrastar(playerid, params[])
{
	new
	    userid;
		
    if (sscanf(params, "u", userid))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "USE{FFFFFF}: /arrastar [id]");

	if (userid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID invalido.");

    if (userid == playerid)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode se arrastar.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está longe do jogador.");

    if (!OutrasInfos[userid][oAlgemado])
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O jogador não está algemado.");

	if (PlayerInfo[userid][pArrastado])
	{
	    PlayerInfo[userid][pArrastado] = 0;
	    PlayerInfo[userid][pArrastante] = INVALID_PLAYER_ID;

	    KillTimer(PlayerInfo[userid][pArrastarTimer]);
		new stringArrastar[128];
		format(stringArrastar, sizeof(stringArrastar), "** %s solta os braços de %s e para de arrastar-lo.", PlayerName(playerid, 0), PlayerName(userid, 0));
	    SendClientMessage(playerid, COLOR_PURPLE, stringArrastar);
	}
	else
	{
	    PlayerInfo[userid][pArrastado] = 1;
	    PlayerInfo[userid][pArrastante] = playerid;

	    PlayerInfo[userid][pArrastarTimer] = SetTimerEx("ArrastarUpdate", 200, true, "dd", playerid, userid);
		new stringArrastar[128];
		format(stringArrastar, sizeof(stringArrastar), "** %s pega %s pelso braços e começa arrasta-lo.", PlayerName(playerid, 0), PlayerName(userid, 0));
	    SendClientMessage(playerid, COLOR_PURPLE, stringArrastar);
	}
	return 1;
}
forward ArrastarUpdate(playerid, targetid);
public ArrastarUpdate(playerid, targetid)
{
	if (PlayerInfo[targetid][pArrastado] && PlayerInfo[targetid][pArrastante] == playerid)
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ,
			Float:fAngle;

		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fAngle);

		fX -= 3.0 * floatsin(-fAngle, degrees);
		fY -= 3.0 * floatcos(-fAngle, degrees);

		SetPlayerPos(targetid, fX, fY, fZ);
		SetPlayerInterior(targetid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}
CMD:algemar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(OutrasInfos[playerid][oAlgemado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode algemar pois está algemado.");
    if(OutrasInfos[playerid][oAmarrado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode algemar pois está amarrado.");
    new faccao = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[faccao][fTipo] == FAC_TIPO_PMERJ || FacInfo[faccao][fTipo] == FAC_TIPO_PCERJ || FacInfo[faccao][fTipo] == FAC_TIPO_EB)
    {
	    new PTiD;
	    if(sscanf(params, "u", PTiD)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF}: /algemar [id]");
	    else
	    {
		    if(GetDistanceBetweenPlayers(playerid,PTiD) < 5.0)
			{
			   	SetPlayerAlgema(PTiD, 1);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está perto do player.");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso a este comando.");
}
stock SetPlayerAlgema(playerid, algemado){
	if (algemado == 1){
		OutrasInfos[playerid][oAlgemado] = 1;
		SetPlayerAttachedObject(playerid, 1, 19418, 6, -0.027999, 0.078998, -0.029999, -18.699926, 0.000000, 104.199928, 1.489999, 3.036000, 1.957998);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
	}else{
		RemovePlayerAttachedObject(playerid, 1);
		OutrasInfos[playerid][oAlgemado] = 0;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	
}
CMD:desalgemar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(OutrasInfos[playerid][oAlgemado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode desalgemar pois está algemado.");
    if(OutrasInfos[playerid][oAmarrado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode desalgemar pois está amarrado.");
    new faccao = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[faccao][fTipo] == FAC_TIPO_PMERJ || FacInfo[faccao][fTipo] == FAC_TIPO_PCERJ || FacInfo[faccao][fTipo] == FAC_TIPO_EB)
    {
	    new PTiD;
	    if(sscanf(params, "u", PTiD)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} /desalgemar [id]");
	    else
		{
		    //if(playerid == PTiD) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:: Você não pode se desalgemar.");
			if(GetDistanceBetweenPlayers(playerid,PTiD) < 5.0)
			{
			    SetPlayerAlgema(PTiD, 0);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está perto do player.");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso a este comando.");
}

CMD:desamarrar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(OutrasInfos[playerid][oAlgemado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode desamarrar pois está algemado.");
    if(OutrasInfos[playerid][oAmarrado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode desamarrar pois está amarrado.");
    {
	    new PTiD;
	    if(sscanf(params, "u", PTiD)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} /desamarrar [id]");
	    else
		{
		    if(playerid == PTiD) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:: Você não pode se desamarrar.");
			if(GetDistanceBetweenPlayers(playerid,PTiD) < 5.0)
			{
			    RemovePlayerAttachedObject(PTiD, 1);

				OutrasInfos[PTiD][oAmarrado] = 0;
				SetPlayerSpecialAction(PTiD, SPECIAL_ACTION_NONE);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está perto do player.");
		}
	}
}

CMD:ajudaempresa(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA EMPRESA *** /comprar /vender /entrar /sair /empresa");
    SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA EMPRESA *** /nomeemp /precogasolina /sacar /depositar");
    SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA EMPRESA *** /empresa /trancar /darpermissao /permitidos");
	SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FURNITURE *** /mobilia");
    SendClientMessage(playerid, COLOR_CINZA, "*** AJUDA FURNITURE *** Caso suma algum móvel da casa, use: /reloadint");
	return 1;
}

CMD:empresa(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new NaEmpresa = PlayerInfo[playerid][pEntrouEmpresa];
    if(NaEmpresa != -1)
    {
		if(EmpInfo[NaEmpresa][eDono] == PlayerInfo[playerid][pID])
		{
			EditandoEmpresa[playerid] = NaEmpresa;
  			if(EmpInfo[NaEmpresa][eTipo] == EMP_TIPO_247) {
  			    for (new i = 0; i != MAX_GAS_PUMPS; i ++)
				{
					if (PumpData[i][pumpExists] && IsPlayerInRangeOfPoint(playerid, 5.0, PumpData[i][pumpPos][0], PumpData[i][pumpPos][1], PumpData[i][pumpPos][2]))
					{
					    if(PumpData[i][pumpBusiness] == NaEmpresa) {
					    	Dialog_Show(playerid, Empresa_Editar, DIALOG_STYLE_LIST, "Configurações da Empresa", "Nome da Empresa\nGestão de Produtos\nGestão de Valores\nGestão da Gasolina", "Selecionar", "Voltar");
				    	}
						return 1;
					}
				}
		 	}
		 	format(string, sizeof(string), "Nome da Empresa\nGestão de Produtos\nGestão de Valores\nPreço de Entrada (R$%d)", EmpInfo[NaEmpresa][eEntradaPrice]);
		 	Dialog_Show(playerid, Empresa_Editar, DIALOG_STYLE_LIST, "Configurações da Empresa", string, "Selecionar", "Voltar");
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é o dono desta empresa.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está dentro de uma empresa.");
}

Dialog:Empresa_Editar(playerid, response, listitem, inputtext[])
{
    if(!response)
	{
	    EditandoEmpresa[playerid] = 9999;
	    EditandoProduto[playerid] = 9999;
		return 1;
	}
	else
	{
	    new IDDaEmpresa = EditandoEmpresa[playerid];
	    switch(listitem)
	    {
	        case 0: return Dialog_Show(playerid, Empresa_Editar_Nome, DIALOG_STYLE_INPUT, "Configurações da Empresa - Mudar Nome", "Digite o novo nome da empresa:", "Alterar", "Cancelar");
			case 1:
			{
			    new total = EmpInfo[IDDaEmpresa][eReqProd]*EmpInfo[IDDaEmpresa][ePagaProd];
				new stroct[56];

				if(EmpInfo[IDDaEmpresa][eBank] > total) format(stroct, sizeof(stroct), "Anuncio: Ativo, visível.");
				else format(stroct, sizeof(stroct), "Anuncio: Inativo, oculto.");

				format(string, sizeof(string), "Total de Produtos: (%d/300)\nPreço a pagar por entrega.(R$%d por cada 5 produtos)\nAnunciar compra de produtos\n%s",
					EmpInfo[IDDaEmpresa][eProdutos],EmpInfo[IDDaEmpresa][ePagaProd],stroct);
  				Dialog_Show(playerid, Gerenciar_prods, DIALOG_STYLE_LIST, "Configurações da Empresa - Gestão de Produtos", string, "Selecionar", "Voltar");
			}
			case 2:
			{
			    switch(EmpInfo[IDDaEmpresa][eTipo])
			    {
			        case EMP_TIPO_247:
			        {
					    format(string, sizeof(string), "Item \t Preço \t Quantidade\nCelular \t R$%d\nGalão \t R$%d\nCaixa de Ferramentas \t R$%d\nMaço de cigarros \t R$%d\nRádio \t R$%d\nCamera \t R$%d\nLanche \t R$%d\nMascara \t R$%d\nBoombox \t R$%d\nCerveja \t R$%d",
						EmpInfo[IDDaEmpresa][eCelularPreco],
						EmpInfo[IDDaEmpresa][eGalaoPreco],
						EmpInfo[IDDaEmpresa][eToolkitPreco],
						EmpInfo[IDDaEmpresa][eCigarroPreco],
						EmpInfo[IDDaEmpresa][eRadioPreco],
						EmpInfo[IDDaEmpresa][eCameraPreco],
						EmpInfo[IDDaEmpresa][eLanchePreco],
						EmpInfo[IDDaEmpresa][eMascPreco],
						EmpInfo[IDDaEmpresa][eBoomboxPreco],
						EmpInfo[IDDaEmpresa][eCervejaPreco]);
					    Dialog_Show(playerid, Gerenciar_Produtos, DIALOG_STYLE_TABLIST_HEADERS, "Configurações da Empresa - Gestão de Produtos", string, "Editar", "Voltar");
					}
					default:
					{
					    Dialog_Show(playerid, 999999, DIALOG_STYLE_MSGBOX, "Configurações da Empresa - Gestão de Produtos", "Os produtos desta empresa não podem ser gerenciados.", "Fechar", "");
					}
				}
			}
			case 3:
			{
			    if(EmpInfo[IDDaEmpresa][eTipo] == EMP_TIPO_247) {
			    	format(string, sizeof(string), "Preço da Venda da Gasolina (/abastecer)\nComprando gasolina: %d L\nPreço a pagar por L de gasolina: R$%d.", EmpInfo[IDDaEmpresa][eReqFuel],EmpInfo[IDDaEmpresa][eReqFuelPay]);
  					Dialog_Show(playerid, Gerenciar_Fuel, DIALOG_STYLE_LIST, "Configurações da Empresa - Gestão de Gasolina", string, "Selecionar", "Voltar");
				}
				else {
					format(string, sizeof(string), "Preço da Entrada atual: R$%d.\n\nEntre com o novo valor da entrada:", EmpInfo[IDDaEmpresa][eEntradaPrice]);
  					Dialog_Show(playerid, Gerenciar_EntradaPrice, DIALOG_STYLE_INPUT, "Configurações da Empresa - Enrada", string, "Alterar", "Voltar");
				}

			}
		}
	}
	return 1;
}

Dialog:Gerenciar_EntradaPrice(playerid, response, listitem, inputtext[])
{
	if(!response) {
	    EditandoEmpresa[playerid] = 9999;
	    EditandoProduto[playerid] = 9999;
		return 1;
	}
	else {
	    new IDDaEmpresa = EditandoEmpresa[playerid];
	    new Input = strval(inputtext);
	    if(Input < 0 || Input > 99999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O valor inválido.");

	    EmpInfo[IDDaEmpresa][eEntradaPrice] = Input;
	    format(string, sizeof(string), "Valor da entrada alterado para R$%d.", EmpInfo[IDDaEmpresa][eEntradaPrice]);
	    SendClientMessage(playerid, COLOR_LIGHTRED, string);

        if (IsValidDynamic3DTextLabel(EmpInfo[IDDaEmpresa][EmpText]))
			DestroyDynamic3DTextLabel(EmpInfo[IDDaEmpresa][EmpText]);

	    if(EmpInfo[IDDaEmpresa][eEntradaPrice] > 0)
 			format(string, sizeof(string), "%s\nEntrada: R$%d",EmpInfo[IDDaEmpresa][eNome], EmpInfo[IDDaEmpresa][eEntradaPrice]);
  		else
   			format(string, sizeof(string), "%s",EmpInfo[IDDaEmpresa][eNome]);
		EmpInfo[IDDaEmpresa][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[IDDaEmpresa][eExX], EmpInfo[IDDaEmpresa][eExY], EmpInfo[IDDaEmpresa][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[IDDaEmpresa][eExWorld], EmpInfo[IDDaEmpresa][eExInt]);

	}
	return 1;
}


Dialog:Gerenciar_Fuel(playerid, response, listitem, inputtext[])
{
	if(!response) {
	    EditandoEmpresa[playerid] = 9999;
	    EditandoProduto[playerid] = 9999;
		return 1;
	}
	else {
	    EditandoProduto[playerid] = listitem;
	    switch(listitem)
		{
		    case 0: Dialog_Show(playerid, Gerenciar_Fuel_1, DIALOG_STYLE_INPUT, "Configurações da Empresa - Preço da venda da Gasolina", "Digite o valor por litro da gasolina (/abastecer):", "Selecionar", "Cancelar");
		    case 1: Dialog_Show(playerid, Gerenciar_Fuel_1, DIALOG_STYLE_INPUT, "Configurações da Empresa - Quantidade de Gasolina", "Digite quantos Litros de gasolina a sua empresa está comprando:", "Selecionar", "Cancelar");
		    case 2: Dialog_Show(playerid, Gerenciar_Fuel_1, DIALOG_STYLE_INPUT, "Configurações da Empresa - Preço a pagar por Litro", "Digite a quantidade de dolares a se pagar por litro de gasolina:", "Selecionar", "Cancelar");
		}
	}
	return 1;
}

Dialog:Gerenciar_Fuel_1(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    EditandoEmpresa[playerid] = 9999;
	    EditandoProduto[playerid] = 9999;
		return 1;
	}
	else
	{
	    new IDDaEmpresa = EditandoEmpresa[playerid];
	    new Input = strval(inputtext);
	    if(Input < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O valor inválido.");
		if(0 < Input)
		{
		    switch(EditandoProduto[playerid])
		    {
		        case 0:
		        {
		            if(Input < 1 || Input > 10) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O valor deve ser entre 1 e 10.");

                    EmpInfo[IDDaEmpresa][eFuelPrice] = Input;
	        	    format(string, sizeof(string), "{33AA33}[Empresa] Preço da gasolina alterado para R$%d por Litro de gasolina.", Input);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
					SalvarEmpresa(IDDaEmpresa);
		        }
	        	case 1:
	        	{
	        	    EmpInfo[IDDaEmpresa][eReqFuel] = Input;
	        	    format(string, sizeof(string), "{33AA33}[Empresa] A sua empresa está procurando comprar %d Litros de gasolina.", Input);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
					SalvarEmpresa(IDDaEmpresa);
	        	}
	        	case 2:
	        	{
	        	    new total = Input*EmpInfo[IDDaEmpresa][ePagaProd];
	        	    if(EmpInfo[IDDaEmpresa][eBank] > total)
	        	    {
		        	    EmpInfo[IDDaEmpresa][eReqFuelPay] = Input;
		        	    format(string, sizeof(string), "[Empresa] A sua empresa está pagando R$%d por litro de gasolina.", Input);
						SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
						SalvarEmpresa(IDDaEmpresa);
					}
					else
					{
					    format(string, sizeof(string), "ERRO:{FFFFFF} Você está pagando %d por caixa, então para comprar %d, você deve deixar pelo menos R$%d no cofre da empresa.", EmpInfo[IDDaEmpresa][ePagaProd], Input, total);
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						SendClientMessage(playerid, COLOR_LIGHTRED, "[!] Caso você retire o dinheiro do cofre com um anuncio ativo, o anuncio ficará oculto até que a empresa tenha dinheiro.");
					}
	        	}
			}
		}
	}
	return 1;
}

Dialog:Gerenciar_prods(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    EditandoEmpresa[playerid] = 9999;
	    EditandoProduto[playerid] = 9999;
		return 1;
	}
	else
	{
	    EditandoProduto[playerid] = listitem;
	    switch(listitem)
		{
		    case 1: Dialog_Show(playerid, Gerenciar_Prods_1, DIALOG_STYLE_INPUT, "Configurações da Empresa - Preço por Produtos", "Cada entrega realizada, rende 5 produtos a sua empresa.\n\nDigite o quanto sua empresa pagará por entrega:\n\nATENÇÃO: CASO VOCÊ NÃO DEIXE O BANCO DA EMPRESA COM DINHEIRO,\n O ANUNCIO NÃO FICARÁ VISIVEL.\nVocê deve deixar: Valor Pago * Caixas pedidas", "Selecionar", "Cancelar");
		    case 2: Dialog_Show(playerid, Gerenciar_Prods_1, DIALOG_STYLE_INPUT, "Configurações da Empresa - Comprar Produtos", "Digite a quantidade de produto a ser comprado:", "Selecionar", "Cancelar");
		}
	}
	return 1;
}

Dialog:Gerenciar_Prods_1(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    EditandoEmpresa[playerid] = 9999;
	    EditandoProduto[playerid] = 9999;
		return 1;
	}
	else
	{
	    new IDDaEmpresa = EditandoEmpresa[playerid];
	    new Input = strval(inputtext);
	    if(Input < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O valor inválido.");
		if(0 < Input)
		{
		    switch(EditandoProduto[playerid])
		    {
	        	case 1:
	        	{
	        	    EmpInfo[IDDaEmpresa][ePagaProd] = Input;
	        	    format(string, sizeof(string), "{33AA33}[Empresa] Você alterou o preço pago por entrega para R$%d.", Input);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
					SalvarEmpresa(IDDaEmpresa);
	        	}
	        	case 2:
	        	{
	        	    new total = Input*EmpInfo[IDDaEmpresa][ePagaProd];
	        	    if(EmpInfo[IDDaEmpresa][eBank] > total)
	        	    {
		        	    EmpInfo[IDDaEmpresa][eReqProd] = Input;
		        	    format(string, sizeof(string), "[Empresa] A sua empresa agora está comprando %d caixas, não se esqueça de deixar o dinheiro no cofre da empresa.", Input);
						SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
						SalvarEmpresa(IDDaEmpresa);
					}
					else
					{
					    format(string, sizeof(string), "ERRO:{FFFFFF} Você está pagando %d por caixa, então para comprar %d, você deve deixar pelo menos R$%d no cofre da empresa.", EmpInfo[IDDaEmpresa][ePagaProd], Input, total);
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						SendClientMessage(playerid, COLOR_LIGHTRED, "[!] Caso você retire o dinheiro do cofre com um anuncio ativo, o anuncio ficará oculto até que a empresa tenha dinheiro.");
					}
	        	}
			}
		}
	}
	return 1;
}

Dialog:Gerenciar_Produtos(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    EditandoEmpresa[playerid] = 9999;
	    EditandoProduto[playerid] = 9999;
		return 1;
	}
	else
	{
	    EditandoProduto[playerid] = listitem;
		switch(listitem)
		{
		    case 0: Dialog_Show(playerid, Gerenciar_Produtos_1, DIALOG_STYLE_INPUT, "Configurações da Empresa - Preço [Celular]", "Digite o novo preço do produto:", "Alterar", "Cancelar");
		    case 1: Dialog_Show(playerid, Gerenciar_Produtos_1, DIALOG_STYLE_INPUT, "Configurações da Empresa - Preço [Galão]", "Digite o novo preço do produto:", "Alterar", "Cancelar");
		    case 2: Dialog_Show(playerid, Gerenciar_Produtos_1, DIALOG_STYLE_INPUT, "Configurações da Empresa - Preço [Caixa de Ferramentas]", "Digite o novo preço do produto:", "Alterar", "Cancelar");
		    case 3: Dialog_Show(playerid, Gerenciar_Produtos_1, DIALOG_STYLE_INPUT, "Configurações da Empresa - Preço [Maço de Cigarros]", "Digite o novo preço do produto:", "Alterar", "Cancelar");
		    case 4: Dialog_Show(playerid, Gerenciar_Produtos_1, DIALOG_STYLE_INPUT, "Configurações da Empresa - Preço [Rádio]", "Digite o novo preço do produto:", "Alterar", "Cancelar");
		    case 5: Dialog_Show(playerid, Gerenciar_Produtos_1, DIALOG_STYLE_INPUT, "Configurações da Empresa - Preço [Camera]", "Digite o novo preço do produto:", "Alterar", "Cancelar");
		    case 6: Dialog_Show(playerid, Gerenciar_Produtos_1, DIALOG_STYLE_INPUT, "Configurações da Empresa - Preço [Lanche]", "Digite o novo preço do produto:", "Alterar", "Cancelar");
		    case 7: Dialog_Show(playerid, Gerenciar_Produtos_1, DIALOG_STYLE_INPUT, "Configurações da Empresa - Preço [Mascara]", "Digite o novo preço do produto:", "Alterar", "Cancelar");
		    case 8: Dialog_Show(playerid, Gerenciar_Produtos_1, DIALOG_STYLE_INPUT, "Configurações da Empresa - Preço [Boombox]", "Digite o novo preço do produto:", "Alterar", "Cancelar");
		    case 9: Dialog_Show(playerid, Gerenciar_Produtos_1, DIALOG_STYLE_INPUT, "Configurações da Empresa - Preço [Cerveja]", "Digite o novo preço do produto:", "Alterar", "Cancelar");
		}
	}
	return 1;
}
Dialog:Gerenciar_Produtos_1(playerid, response, listitem, inputtext[])
{
    if(!response)
	{
	    EditandoProduto[playerid] = 9999;
	    EditandoEmpresa[playerid] = 9999;
		return 1;
	}

	new Input = strval(inputtext);
	if(Input < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O valor inválido.");
	if(0 < Input < 1000)
	{
	    switch(EditandoProduto[playerid])
	    {
	        case 0:
	        {
	            EmpInfo[EditandoEmpresa[playerid]][eCelularPreco] = Input;
	            format(string, sizeof(string), "{33AA33}[Empresa] Você alterou o preço do celular para R$%d.", Input);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				SalvarEmpresa(EditandoEmpresa[playerid]);
	        }
	        case 1:
	        {
	            EmpInfo[EditandoEmpresa[playerid]][eGalaoPreco] = Input;
	            format(string, sizeof(string), "{33AA33}[Empresa] Você alterou o preço do galão para R$%d.", Input);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				SalvarEmpresa(EditandoEmpresa[playerid]);
	        }
	        case 2:
	        {
	            EmpInfo[EditandoEmpresa[playerid]][eToolkitPreco] = Input;
	            format(string, sizeof(string), "{33AA33}[Empresa] Você alterou o preço da caixa de ferramentas para R$%d.", Input);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				SalvarEmpresa(EditandoEmpresa[playerid]);
	        }
	        case 3:
	        {
	            EmpInfo[EditandoEmpresa[playerid]][eCigarroPreco] = Input;
	            format(string, sizeof(string), "{33AA33}[Empresa] Você alterou o preço do maço de cigarros para R$%d.", Input);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				SalvarEmpresa(EditandoEmpresa[playerid]);
	        }
	        case 4:
	        {
	            EmpInfo[EditandoEmpresa[playerid]][eRadioPreco] = Input;
	            format(string, sizeof(string), "{33AA33}[Empresa] Você alterou o preço do rádio para R$%d.", Input);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				SalvarEmpresa(EditandoEmpresa[playerid]);
	        }
            case 5:
	        {
	            EmpInfo[EditandoEmpresa[playerid]][eCameraPreco] = Input;
	            format(string, sizeof(string), "{33AA33}[Empresa] Você alterou o preço da Câmera para R$%d.", Input);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				SalvarEmpresa(EditandoEmpresa[playerid]);
	        }
         	case 6:
	        {
	            EmpInfo[EditandoEmpresa[playerid]][eLanchePreco] = Input;
	            format(string, sizeof(string), "{33AA33}[Empresa] Você alterou o preço do Lanche para R$%d.", Input);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				SalvarEmpresa(EditandoEmpresa[playerid]);
	        }
	        case 7:
	        {
	            EmpInfo[EditandoEmpresa[playerid]][eMascPreco] = Input;
	            format(string, sizeof(string), "{33AA33}[Empresa] Você alterou o preço da Mascara para R$%d.", Input);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				SalvarEmpresa(EditandoEmpresa[playerid]);
	        }
	        case 8:
	        {
	            EmpInfo[EditandoEmpresa[playerid]][eBoomboxPreco] = Input;
	            format(string, sizeof(string), "{33AA33}[Empresa] Você alterou o preço da Boombox para R$%d.", Input);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				SalvarEmpresa(EditandoEmpresa[playerid]);
	        }
	        case 9:
	        {
	            EmpInfo[EditandoEmpresa[playerid]][eCervejaPreco] = Input;
	            format(string, sizeof(string), "{33AA33}[Empresa] Você alterou o preço da Cerveja para R$%d.", Input);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				SalvarEmpresa(EditandoEmpresa[playerid]);
	        }
	    }
	}
	return 1;
}

Dialog:Empresa_Editar_Nome(playerid, response, listitem, inputtext[])
{
    if(!response)
	{
	    EditandoEmpresa[playerid] = 9999;
		return 1;
	}
	else
	{
	    new i = EditandoEmpresa[playerid];
	    if (IsValidDynamic3DTextLabel(EmpInfo[i][EmpText]))
			DestroyDynamic3DTextLabel(EmpInfo[i][EmpText]);

        if(strfind(inputtext, "'") != -1)
		{
            Dialog_Show(playerid, Empresa_Editar_Nome, DIALOG_STYLE_INPUT, "Configurações da Empresa - Mudar Nome", "Digite o novo nome da empresa:", "Alterar", "Cancelar");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "ERRO:{FFFFFF} Você não pode colocar caracteres especiais no nome da empresa.");
  			return 1;
		}

		strmid(EmpInfo[i][eNome], inputtext, 0, strlen(inputtext), 255);

		SalvarEmpresa(i);
		format(string, sizeof(string), "{33AA33}[Empresa] Você alterou o nome da empresa %d para %s.", i, EmpInfo[i][eNome]);
		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		format(string, sizeof(string), "%s",EmpInfo[i][eNome]);
		EmpInfo[i][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[i][eExWorld], EmpInfo[i][eExInt]);
		return 1;
	}
}
COMMAND:abastecer(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new id = Pump_Nearest(playerid);
	if (id != -1)
	{
        if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
			new veh = GetPlayerVehicleID(playerid);
			new slot = GetVehicleSlot(veh);
			if(slot > -1)
			{
			    if(VehicleInfo[slot][vFuel] < 100)
			    {
			        new biz = PumpData[id][pumpBusiness];
					if(PlayerInfo[playerid][pGrana] >= EmpInfo[biz][eFuelPrice])
					{
						if(!IsPushbike(GetVehicleModel(veh)))
						{
							filling[playerid] = 1;
							filling_started[playerid] = 0;
							filling_biz[playerid] = biz;
							SendClientMessage(playerid, COLOR_YELLOW, "DICA: Mantenha a barra de espaço pressionada para abastecer o veículo.");
							PlayerPlaySound(playerid,1139,0.0,0.0,0.0);
					        return 1;
					   	}
					   	else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Este veículo não necessita de reabastecimento.");
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro suficiente para abastecer o veiculo.");
			    }
			    else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} O tanque já está cheio.");
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Este veiculo não pode ser reabastecido.");
        }
        else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta em um veículo.");
    }
    else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta próximo a uma bomba de gasolina.");
}



COMMAND:galao(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(!IsPlayerInAnyVehicle(playerid))
    {
	    new option[32];
		if(sscanf(params,"s[32]",option))
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "USE: {ffffff}/galao [pegar / usar]");
			return 1;
		}
	    if(strcmp(option, "usar", true) == 0)
		{
  			if(OutrasInfos[playerid][oGalaoNaMao] == 1)
     		{
       			new veh = GetClosestVehicle(playerid);
	        	new slot = GetVehicleSlot(veh);
		        if(slot > -1)
		        {
          			if(VehicleInfo[slot][vFuel] < 70)
           			{
               			VehicleInfo[slot][vFuel] += 30;
               			SendClientMessage(playerid, COLOR_LIGHTGREEN,"Você usou o galão.");
               			PlayerInfo[playerid][pGalao] = 0;
               			RemovePlayerAttachedObject(playerid, 4);
               			OutrasInfos[playerid][oGalaoNaMao] = 0;
               			return 1;
           			}
           			else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Este veiculo não necessita de reabastecimento.");
		        }
		        else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Este veiculo não pode ser reabastecido.");
      		}
      		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está com o galão em mãos. (/galao pegar)");
		}
		else if(strcmp(option, "pegar", true) == 0)
		{
		    if(PlayerInfo[playerid][pGalao] == 1)
		    {
		        SendClientMessage(playerid, COLOR_LIGHTGREEN,"Você pegou seu galão.");
		    	SetPlayerAttachedObject(playerid, 4, 1650, 6, 0.151340, 0.048452, 0.038485, 0.000000, 294.826568, 0.000000, 0.742476, 1.000000, 0.873630);
		    	OutrasInfos[playerid][oGalaoNaMao] = 1;
		    	return 1;
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um galão de gasolina.");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar fora do veículo.");
	return 1;
}

CMD:junioradmins3(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new AdmSTR[86];
	new Totaltesters = 0;
	SendClientMessage(playerid, 0xb4b5b7FF, "Juniors Admins:");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && PlayerInfo[i][pLogado])
	    {
			if(PlayerInfo[i][pTester] > 0)
			{
			    if(OutrasInfos[i][oTesterOnDuty] == 0)
			    {
					format(AdmSTR,sizeof(AdmSTR)," {b4b5b7}%s (ID: %d) (%s) Em trabalho: Não",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
	    			SendClientMessage(playerid, COLOR_GREY, AdmSTR);
	    			Totaltesters++;
				}
    			else
				{
				    format(AdmSTR,sizeof(AdmSTR)," {33aa33}%s (ID: %d) (%s)  Em trabalho: Sim",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
	    			SendClientMessage(playerid, COLOR_LIGHTGREEN, AdmSTR);
	    			Totaltesters++;
				}
			}
		}
	}
	if(Totaltesters == 0) SendClientMessage(playerid, COLOR_CINZA, " Não há Juniors Admins online.");
	return 1;
}

CMD:admins(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new AdmSTR[86];
	new TotalAdmins = 0;
	SendClientMessage(playerid, 0xb4b5b7FF, "Administradores Online:");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && PlayerInfo[i][pLogado])
	    {
			if(PlayerInfo[i][pAdmin] > 0)
			{
			    if(GetPVarInt(i, "TogAdmin") == 0)
				{
				    if(OutrasInfos[i][oAdminOnDuty] == 1)
				    {
						switch(PlayerInfo[i][pAdmin])
						{
	                        case 1: format(AdmSTR,sizeof(AdmSTR),"Game Admin 1: %s (ID: %d)(%s) Em trabalho: Sim",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 2: format(AdmSTR,sizeof(AdmSTR),"Game Admin 2: %s (ID: %d)(%s) Em trabalho: Sim",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 3: format(AdmSTR,sizeof(AdmSTR),"Game Admin 3: %s (ID: %d)(%s) Em trabalho: Sim",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 4: format(AdmSTR,sizeof(AdmSTR),"Game Admin 4: %s (ID: %d)(%s) Em trabalho: Sim",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 5: format(AdmSTR,sizeof(AdmSTR),"Lead Admin: %s (ID: %d)(%s) Em trabalho: Sim",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 3000: format(AdmSTR,sizeof(AdmSTR),"Head Admin: %s (ID: %d)(%s) Em trabalho: Sim",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
                            case 3001: format(AdmSTR,sizeof(AdmSTR),"Developer: %s (ID: %d) (%s) Em trabalho: Sim",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 3002: format(AdmSTR,sizeof(AdmSTR),"Manager: %s (ID: %d) (%s) Em trabalho: Sim",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							default:
							{
								if(PlayerInfo[i][pAdmin] > 3001) format(AdmSTR,sizeof(AdmSTR),"Admin: %s",PlayerInfo[i][pNomeOOC]);
								else format(AdmSTR,sizeof(AdmSTR),"Admin:%s (%s)",PlayerName(i, 0),PlayerInfo[i][pNomeOOC]);
							}
						}
		    			SendClientMessage(playerid, COLOR_LIGHTGREEN, AdmSTR);
		    			TotalAdmins++;
					}
					else
					{
					    switch(PlayerInfo[i][pAdmin])
						{
							case 1: format(AdmSTR,sizeof(AdmSTR),"Game Admin 1: %s (ID: %d)(%s) Em trabalho: Não",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 2: format(AdmSTR,sizeof(AdmSTR),"Game Admin 2: %s (ID: %d)(%s) Em trabalho: Não",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 3: format(AdmSTR,sizeof(AdmSTR),"Game Admin 3: %s (ID: %d)(%s) Em trabalho: Não",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 4: format(AdmSTR,sizeof(AdmSTR),"Game Admin 4: %s (ID: %d)(%s) Em trabalho: Não",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 5: format(AdmSTR,sizeof(AdmSTR),"Lead Admin: %s (ID: %d)(%s) Em trabalho: Não",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 3000: format(AdmSTR,sizeof(AdmSTR),"Head Admin: %s (ID: %d)(%s) Em trabalho: Não",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
                            case 3001: format(AdmSTR,sizeof(AdmSTR),"Developer: %s (ID: %d) (%s) Em trabalho: Não",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 3002: format(AdmSTR,sizeof(AdmSTR),"Manager: %s (ID: %d) (%s) Em trabalho: Não",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							default:
							{
								if(PlayerInfo[i][pAdmin] > 3001) format(AdmSTR,sizeof(AdmSTR),"Admin: %s",PlayerInfo[i][pNomeOOC]);
								else format(AdmSTR,sizeof(AdmSTR),"Admin:%s (%s)",PlayerName(i, 0),PlayerInfo[i][pNomeOOC]);
							}
						}
		    			SendClientMessage(playerid, 0xbfc0c2FF, AdmSTR);
		    			TotalAdmins++;
					}
				}
				else
				{
				    if(PlayerInfo[playerid][pAdmin] > 3000)
					{
					    switch(PlayerInfo[i][pAdmin])
						{
	                        case 1: format(AdmSTR,sizeof(AdmSTR),"[TOG] Game Admin 1: %s (ID: %d)(%s)",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 2: format(AdmSTR,sizeof(AdmSTR),"[TOG] Game Admin 2: %s (ID: %d)(%s)",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 3: format(AdmSTR,sizeof(AdmSTR),"[TOG] Game Admin 3: %s (ID: %d)(%s)",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 4: format(AdmSTR,sizeof(AdmSTR),"[TOG] Game Admin 4: %s (ID: %d)(%s)",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 5: format(AdmSTR,sizeof(AdmSTR),"[TOG] Lead Admin: %s (ID: %d)(%s)",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 3000: format(AdmSTR,sizeof(AdmSTR),"[TOG] Head Admin: %s (ID: %d)(%s)",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
                            case 3001: format(AdmSTR,sizeof(AdmSTR),"[TOG] Developer: %s (ID: %d) (%s)",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							case 3002: format(AdmSTR,sizeof(AdmSTR),"[TOG] Manager: %s (ID: %d) (%s)",PlayerName(i, 0),i,PlayerInfo[i][pNomeOOC]);
							default: format(AdmSTR,sizeof(AdmSTR),"[TOG] Admin:%s (%s)",PlayerName(i, 0),PlayerInfo[i][pNomeOOC]);
						}
		    			SendClientMessage(playerid, 0xF3F598FF, AdmSTR);
		    			TotalAdmins++;
					}
				}
			}
		}
	}
	if(TotalAdmins == 0) SendClientMessage(playerid, COLOR_CINZA, "Não há administradores online.");
	return 1;
}

ALTCOMMAND:reloadint->atualizarcasa;
CMD:atualizarcasa(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	AtualizarMoveisCasa(playerid);
	return 1;
}

stock SendAdminAndRegMessage(color,stringca[]) {
    foreach (Player,i) {
		if(PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pTester] > 0) {
           	if(GetPVarInt(i, "TogHa") == 0)
		        SendClientMessage(i,color,stringca);
		}
    }
    return 1;
}

CMD:ajudatog(playerid, params[]) {
    if(!PlayerInfo[playerid][pLogado]) return 1;
    SendClientMessage(playerid, COLOR_LIGHTRED, "/tog [celular] - Desliga seu celular.");
    SendClientMessage(playerid, COLOR_LIGHTRED, "/tog [pm] - Desativa suas PM's. Apenas para Donater's.");
    SendClientMessage(playerid, COLOR_LIGHTRED, "/tog [faccao] - Desativa o chat da facção.");
    SendClientMessage(playerid, COLOR_LIGHTRED, "/tog [hud] - Desativa o velocimetro e o radio info.");
    SendClientMessage(playerid, COLOR_LIGHTRED, "/tog [anuncios] - Desativa os anúncios de outros jogadores");
	return 1;
}

COMMAND:tog(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");

	new option[32];
	if(sscanf(params,"s[32]",option))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} /tog [ pm / faccao / hud / anuncios / bicho / bairros / qmmatou / radio ]");
	    if(PlayerInfo[playerid][pTester] >= 1 || PlayerInfo[playerid][pAdmin] >= 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Administração: {FFFFFF}sos, achat");
		}
		return 1;
	}
    if(strcmp(option, "bicho", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 0 || PlayerInfo[playerid][pTester] >= 0)
		{
			switch(GetPVarInt(playerid, "TogBicho"))
	  		{
				case 0:
				{
					SetPVarInt(playerid, "TogBicho", 1);
					SendClientMessage(playerid, COLOR_WHITE, "Você não irá receber mais avisos do jogo do bicho.");
				}
				case 1:
				{
	   				SetPVarInt(playerid, "TogBicho", 0);
	   				SendClientMessage(playerid, COLOR_WHITE, "Você irá receber mais avisos do jogo do bicho.");
				}
			}
		}
		else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso a este comando.");
	}
    else if(strcmp(option, "sos", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pTester] >= 1)
		{
			switch(GetPVarInt(playerid, "TogHa"))
	  		{
				case 0:
				{
					SetPVarInt(playerid, "TogHa", 1);
					SendClientMessage(playerid, COLOR_WHITE, "Você não irá receber sos.");
				}
				case 1:
				{
	   				SetPVarInt(playerid, "TogHa", 0);
	   				SendClientMessage(playerid, COLOR_WHITE, "Você irá receber sos.");
				}
			}
		}
		else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso a este comando.");
	}
	else if(strcmp(option, "admin", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] < 5) return 1;
		switch(GetPVarInt(playerid, "TogAdmin"))
		{
			case 0:
			{
				SetPVarInt(playerid, "TogAdmin", 1);
				SendClientMessage(playerid, COLOR_WHITE, "Você sumiu do /admins.");
			}
			case 1:
			{
	   			SetPVarInt(playerid, "TogAdmin", 0);
	   			SendClientMessage(playerid, COLOR_WHITE, "Você apareceu no /admins.");
			}
		}
	}
	else if(strcmp(option, "bairros", true) == 0)
	{
		switch(GetPVarInt(playerid, "TogBairros"))
		{
			case 0:
			{
				TextDrawHideForPlayer(playerid, Textdraw49[playerid]);
				SetPVarInt(playerid, "TogBairros", 1);
				SendClientMessage(playerid, COLOR_WHITE, "Você desativou os nomes dos bairros.");
			}
			case 1:
			{
	   			TextDrawShowForPlayer(playerid, Textdraw49[playerid]);
	   			SetPVarInt(playerid, "TogBairros", 0);
	   			SendClientMessage(playerid, COLOR_WHITE, "Você ativou o nome dos bairros.");
			}
		}
	}
	else if(strcmp(option, "achat", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pTester] >= 1)
		{
			switch(GetPVarInt(playerid, "TogChatADM"))
	  		{
				case 0:
				{
					SetPVarInt(playerid, "TogChatADM", 1);
					SendClientMessage(playerid, COLOR_WHITE, "Você não irá mais receber mensagens do chat da administração.");
				}
				case 1:
				{
	   				SetPVarInt(playerid, "TogChatADM", 0);
	   				SendClientMessage(playerid, COLOR_WHITE, "Você irá receber mensagens do chat da administração");
				}
			}
		}
	}
	else if(strcmp(option, "pm", true) == 0)
	{
		switch(GetPVarInt(playerid, "TogPM"))
		{
  			case 0:
			{
   				if(PlayerInfo[playerid][pDoador] > 0 || PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pTester] > 0)
    			{
		    		SetPVarInt(playerid, "TogPM", 1);
			    	SendClientMessage(playerid, COLOR_GREY, " Você desativou suas PM's.");
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve ser um doador para ter acesso a este comando.");
			}
			case 1:
			{
				SetPVarInt(playerid, "TogPM", 0);
    			SendClientMessage(playerid, COLOR_GREY, "Você ativou suas PM's.");
			}
		}
	}
	else if(strcmp(option, "faccao", true) == 0)
	{
	    if(PlayerInfo[playerid][pFac] > 0)
		{
			switch(GetPVarInt(playerid, "TogFacChat"))
	  		{
				case 0:
				{
					SetPVarInt(playerid, "TogFacChat", 1);
					SendClientMessage(playerid, COLOR_GREY, "Você não irá receber mensagens do chat da facção.");
				}
				case 1:
				{
	   				SetPVarInt(playerid, "TogFacChat", 0);
	   				SendClientMessage(playerid, COLOR_GREY, "Você irá receber mensagens do chat da facção.");
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pertence a uma facção.");
	}
	else if(strcmp(option, "hud", true) == 0)
	{
		switch(GetPVarInt(playerid, "TogHud"))
	  	{
			case 0:
			{
				SetPVarInt(playerid, "TogHud", 1);
				SendClientMessage(playerid, COLOR_YELLOW, "INFO: HUD desativada.");
                PlayerTextDrawHide(playerid, FomeSede[playerid][0]);
                PlayerTextDrawHide(playerid, FomeSede[playerid][1]);
                PlayerTextDrawHide(playerid, FomeSede[playerid][2]);
                PlayerTextDrawHide(playerid, FomeSede[playerid][3]);

			}
			case 1:
			{
	   			SetPVarInt(playerid, "TogHud", 0);
	   			SendClientMessage(playerid, COLOR_YELLOW, "INFO: HUD ativada.");
                PlayerTextDrawShow(playerid, FomeSede[playerid][0]);
                PlayerTextDrawShow(playerid, FomeSede[playerid][1]);
                PlayerTextDrawShow(playerid, FomeSede[playerid][2]);
                PlayerTextDrawShow(playerid, FomeSede[playerid][3]);
				
			}
		}
	}
	else if(strcmp(option, "radio", true) == 0)
	{
		switch(GetPVarInt(playerid, "TogRadio"))
	  	{
			case 0:
			{
				SetPVarInt(playerid, "TogRadio", 1);
				SendClientMessage(playerid, COLOR_YELLOW, "INFO: Rádio desativada.");
				PlayerTextDrawHide(playerid, RadioComunicador[playerid][0]);
                PlayerTextDrawHide(playerid, RadioComunicador[playerid][1]);

			}
			case 1:
			{
	   			SetPVarInt(playerid, "TogRadio", 0);
	   			SendClientMessage(playerid, COLOR_YELLOW, "INFO: Rádio ativada.");
				PlayerTextDrawShow(playerid, RadioComunicador[playerid][0]);
				PlayerTextDrawShow(playerid, RadioComunicador[playerid][1]);
				
			}
		}
	}
	else if(strcmp(option, "anuncios", true) == 0)
	{
		switch(GetPVarInt(playerid, "TogAnuncios"))
		{
  			case 0:
			{
		    	SetPVarInt(playerid, "TogAnuncios", 1);
			   	SendClientMessage(playerid, COLOR_GREY, "Você desativou os anuncios.");
			}
			case 1:
			{
				SetPVarInt(playerid, "TogAnuncios", 0);
    			SendClientMessage(playerid, COLOR_GREY, "Você ativou os anuncios.");
			}
		}
	}
	else if(strcmp(option, "qmmatou", true) == 0)
	{
		switch(GetPVarInt(playerid, "TogMsgMatou"))
		{
			case 0:
			{
				SetPVarInt(playerid, "TogMsgMatou", 1);
				SendClientMessage(playerid, COLOR_WHITE, "* Você não receberá a mensagem de quem te matou/ quem você matou.");
			}
			case 1:
			{
	   			SetPVarInt(playerid, "TogMsgMatou", 0);
	   			SendClientMessage(playerid, COLOR_WHITE, "* Você receberá a mensagem de quem te matou/quem você matou.");
			}
		}
	}
	return 1;
}

ALTCOMMAND:re->reportar;
COMMAND:reportar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	new text[128],targetid;
	if(sscanf(params, "ds[128]", targetid, text)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /reportar [Playerid/Mascarada ID] [Texto]");
	else
	{
        format(string, sizeof(string), "[REPORT: %d]{B1C8FB} %s (%d) reportou o jogador %s(id: %d), %s.", playerid, PlayerName(playerid, 0), playerid, PlayerName(targetid, 0), targetid, text);
	    SendAdminAndRegMessage(COLOR_LIGHTRED,string);
		SendClientMessage(playerid, COLOR_LIGHTGREEN,"Seu pedido de ajuda foi enviado para todos Admins/Juniors Admins online.");
		SetPVarInt(playerid, "HelpMe", gettime()+180);
	}
	return 1;
}

ALTCOMMAND:relatorio->sos;
COMMAND:sos(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");

    if(PlayerInfo[playerid][pAdmin] > 0 && PlayerInfo[playerid][pAdmin] < 3000) return 1;
    if(PlayerInfo[playerid][pTester] > 0) return 1;

	new text[128];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /sos [texto de assistência]");
	else {
	    if(GetPVarInt(playerid, "HelpMe") > gettime()) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você já enviou um pedido de ajuda recentemente.");
      	new found = 0;
        foreach (Player,i) {
            if(OutrasInfos[i][oAdminOnDuty])
            	found++;
        }
        if(found == 0) {
            format(string, sizeof(string), "[SOS: %d]{B1C8FB} %s (%d): %s.", playerid, PlayerName(playerid, 0), playerid, text);
		    SendAdminAndRegMessage(COLOR_LIGHTRED,string);
		    SendClientMessage(playerid, COLOR_LIGHTGREEN,"Seu pedido de ajuda foi enviado para todos Admins/Juniors Admins online.");
		    SetPVarInt(playerid, "HelpMe", gettime()+180);
			return 1;
        }
        format(string, sizeof(string), "[SOS: %d]{B1C8FB} %s (%d): %s.", playerid, PlayerName(playerid, 0), playerid, text);
	    SendAdminAndRegMessage(COLOR_LIGHTRED,string);
		SendClientMessage(playerid, COLOR_LIGHTGREEN,"Seu pedido de ajuda foi enviado para todos Admins/Juniors Admins online.");
		SetPVarInt(playerid, "HelpMe", gettime()+180);
	}

	/*Dialog_Show(playerid, Empresa_Editar_Nome, DIALOG_STYLE_INPUT, "Configurações da Empresa - Mudar Nome", "Digite o novo nome da empresa:", "Alterar", "Cancelar");
    new stringsos[2048];
	format(stringsos, sizeof(stringsos), "Onde fica a concessionária?\nOnde instalo GPS no meu Carro?\nOnde fica o banco?\nOutra [Mandar a um Administrador]");
	Dialog_Show(playerid, AJUDA_SOS, DIALOG_STYLE_LIST, "SOS", string, "Selecionar", "Voltar");*/

	return 1;
}
/*
Dialog:AJUDA_SOS(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new stringsos[2048];
	    switch(listitem)
	    {
			case 0: format(string, sizeof(string), "Onde fica a concessionária?\n\nVocê pode encontrar uma concessionária ao lado da LSP.\nTambém existe uma em Vila Imperio, ao lado do Motel.");
			case 1: format(string, sizeof(string), "Onde Instalo um GPS em meu veículo?\n\nVocê precisa encontrar um mecanico, caso você seja um, utilize /ajudaemprego.");
			case 2: format(string, sizeof(string), "Onde fica o banco?\n\nO banco fica em Downtown, próximo a Cupece!");
			case 3: Dialog_Show(playerid, AJUDA_ENVIAR_SOS, DIALOG_STYLE_INPUT, "SOS", "Digite a sua pergunta", "Enviar", "Cancelar");
		}
		Dialog_Show(playerid, AJUDA_SOS, DIALOG_STYLE_MSGBOX, "SOS", string, "Selecionar", "Voltar");
	}
	return 1;
}*/

CMD:encomendac(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");

	new rand = OutrasInfos[playerid][oTraficanteRand];
	SetPlayerCheckpoint(playerid, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2], 5.0);
	return 1;
}


CMD:unbugc(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] == 0) return 1;

    SendClientMessage(playerid, COLOR_LIGHTRED, "Sistema de sobrecarregamento de carros corrigido.");
	vehicle_creating = 0;
	return 1;
}

COMMAND:tirartmorte(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");

	if(PlayerInfo[playerid][pAdmin] > 1) return 1;
	new idpl;
	if(sscanf(params, "d", idpl)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /tirartmorte [id]");
	else
	{
		if (IsValidDynamic3DTextLabel(TextMorto[idpl])) DestroyDynamic3DTextLabel(TextMorto[idpl]);
		SendClientMessage(playerid, COLOR_LIGHTRED, "Label de morto removida do player.");
	}
	return 1;
}

COMMAND:tirartmorte2(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");

	if(PlayerInfo[playerid][pAdmin] > 1) return 1;
	new idpl;
	if(sscanf(params, "d", idpl)) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}USE:{FFFFFF} /tirartmorte2 [id]");
	else
	{
		Delete3DTextLabel(TextMorto[idpl]);
		SendClientMessage(playerid, COLOR_LIGHTRED, "Label de morto removida do player.");
	}
	return 1;
}

COMMAND:desbugarcarrosf(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");

	if(PlayerInfo[playerid][pAdmin] > 1) return 1;
	new idpl;
	if(sscanf(params, "d", idpl)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /desbugarskill [id]");
	else
	{
		for(new cc=0; cc < MAX_CA_VEHICLES; cc++)
		{
		    if(VehicleInfo[cc][vOwner] == PlayerInfo[idpl][pID])
		    {
		        VehicleInfo[cc][vNeonState] = 0;
				if(VehicleInfo[cc][vSirene][0] != 0)
				{
					if(IsValidDynamicObject(VehicleInfo[cc][vSirene][0])) DestroyDynamicObject(VehicleInfo[cc][vSirene][0]);
					VehicleInfo[cc][vSirene][0] = 0;
				}
				VehicleInfo[cc][vTuned] = false;
				DestroyVehicle(VehicleInfo[cc][vVehicle]);
				VehicleInfo[cc][vVehicle] = -1;
			}
		}
	}
	return 1;
}

COMMAND:desbugarcarros(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");

	if(PlayerInfo[playerid][pAdmin] > 1) return 1;
	new idpl;
	if(sscanf(params, "d", idpl)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /desbugarcarros [id]");
	else
	{
		for(new cc=0; cc < MAX_CA_VEHICLES; cc++)
		{
		    if(VehicleInfo[cc][vOwner] == PlayerInfo[idpl][pID])
		    {
		        if(VehicleInfo[cc][vVehicle] != -1)
		        {
			        VehicleInfo[cc][vNeonState] = 0;
					if(VehicleInfo[cc][vSirene][0] != 0)
					{
						if(IsValidDynamicObject(VehicleInfo[cc][vSirene][0])) DestroyDynamicObject(VehicleInfo[cc][vSirene][0]);
						VehicleInfo[cc][vSirene][0] = 0;
					}
					VehicleInfo[cc][vTuned] = false;
					DestroyVehicle(VehicleInfo[cc][vVehicle]);
					VehicleInfo[cc][vVehicle] = -1;
				}
			}
		}
	}
	return 1;
}

COMMAND:desbugarfcarros(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");

	if(PlayerInfo[playerid][pAdmin] < 5) return 1;

	new i;
	for(new cc=0; cc < MAX_CA_VEHICLES; cc++)
	{
		if(VehicleInfo[cc][vFaction] > 0)
		{
		    if(VehicleInfo[cc][vVehicle] != -1)
		    {
				VehicleInfo[cc][vNeonState] = 0;
				if(VehicleInfo[cc][vSirene][0] != 0)
				{
					if(IsValidDynamicObject(VehicleInfo[cc][vSirene][0])) DestroyDynamicObject(VehicleInfo[cc][vSirene][0]);
					VehicleInfo[cc][vSirene][0] = 0;
				}
				VehicleInfo[cc][vTuned] = false;
				DestroyVehicle(VehicleInfo[cc][vVehicle]);
				VehicleInfo[cc][vVehicle] = -1;
			}

			i = cc;
			if(VehicleInfo[i][vVehicle] == -1)
			{
			    VehicleInfo[i][vSemUso] = 3600;
				VehicleInfo[i][vVehicle] = CreateVehicle(VehicleInfo[i][vModel],VehicleInfo[i][vSpawnX],VehicleInfo[i][vSpawnY],VehicleInfo[i][vSpawnZ],VehicleInfo[i][vSpawnR],VehicleInfo[i][vColor1],VehicleInfo[i][vColor2],-1, 1);
				SetVehicleVirtualWorld(VehicleInfo[i][vVehicle], VehicleInfo[i][vWorld]);
				LinkVehicleToInterior(VehicleInfo[i][vVehicle], VehicleInfo[i][vInterior]);
				ArmasNoPortaMalas(i);

				SetVehicleParamsEx(VehicleInfo[i][vVehicle],0,0,0,0,0,0,0);
				new engine,lights,alarm,doors,bonnet,boot,objective;
				GetVehicleParamsEx(VehicleInfo[i][vVehicle], engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(VehicleInfo[i][vVehicle], engine, lights, alarm, doors, false, false, false);
				SetVehicleDamage(VehicleInfo[i][vVehicle]);
				RefreshNeon(i);
				if(strlen(VehicleInfo[i][vPlate]))
				{
					SetVehicleNumberPlate(VehicleInfo[i][vVehicle],VehicleInfo[i][vPlate]);
				}
				sync_attribs[VehicleInfo[i][vVehicle]] = 1;
			}
		}
	}
	SendClientMessage(playerid, COLOR_LIGHTRED, "Veiculos desbugados.");
	return 1;
}

COMMAND:dfaccar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");

	if(PlayerInfo[playerid][pAdmin] < 5) return 1;

    new facid;
	if(sscanf(params, "d", facid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /dfaccar [facid]");
	else
	{
		for(new cc=0; cc < MAX_CA_VEHICLES; cc++)
		{
				if(VehicleInfo[cc][vFaction] == facid)
				{
	   				if(VehicleInfo[cc][vVehicle] != -1)
				   	{
						VehicleInfo[cc][vNeonState] = 0;
						if(VehicleInfo[cc][vSirene][0] != 0)
						{
							if(IsValidDynamicObject(VehicleInfo[cc][vSirene][0])) DestroyDynamicObject(VehicleInfo[cc][vSirene][0]);
							VehicleInfo[cc][vSirene][0] = 0;
						}
						VehicleInfo[cc][vTuned] = false;
						DestroyVehicle(VehicleInfo[cc][vVehicle]);
						//========================================
						VehicleInfo[cc][vSemUso] = 3600;
						VehicleInfo[cc][vVehicle] = CreateVehicle(VehicleInfo[cc][vModel],VehicleInfo[cc][vSpawnX],VehicleInfo[cc][vSpawnY],VehicleInfo[cc][vSpawnZ],VehicleInfo[cc][vSpawnR],VehicleInfo[cc][vColor1],VehicleInfo[cc][vColor2],-1, 0);
						SetVehicleVirtualWorld(VehicleInfo[cc][vVehicle], VehicleInfo[cc][vWorld]);
						LinkVehicleToInterior(VehicleInfo[cc][vVehicle], VehicleInfo[cc][vInterior]);
						ArmasNoPortaMalas(cc);

						SetVehicleParamsEx(VehicleInfo[cc][vVehicle],0,0,0,0,0,0,0);
						new engine,lights,alarm,doors,bonnet,boot,objective;
						GetVehicleParamsEx(VehicleInfo[cc][vVehicle], engine,lights,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(VehicleInfo[cc][vVehicle], engine, lights, alarm, doors, false, false, false);
						SetVehicleDamage(VehicleInfo[cc][vVehicle]);
						RefreshNeon(cc);
						if(strlen(VehicleInfo[cc][vPlate]))
						{
							SetVehicleNumberPlate(VehicleInfo[cc][vVehicle],VehicleInfo[cc][vPlate]);
						}
						sync_attribs[VehicleInfo[cc][vVehicle]] = 1;
					}
     				else
					{
					    VehicleInfo[cc][vSemUso] = 3600;
						VehicleInfo[cc][vVehicle] = CreateVehicle(VehicleInfo[cc][vModel],VehicleInfo[cc][vSpawnX],VehicleInfo[cc][vSpawnY],VehicleInfo[cc][vSpawnZ],VehicleInfo[cc][vSpawnR],VehicleInfo[cc][vColor1],VehicleInfo[cc][vColor2],-1, 0);
						SetVehicleVirtualWorld(VehicleInfo[cc][vVehicle], VehicleInfo[cc][vWorld]);
						LinkVehicleToInterior(VehicleInfo[cc][vVehicle], VehicleInfo[cc][vInterior]);
						ArmasNoPortaMalas(cc);

						SetVehicleParamsEx(VehicleInfo[cc][vVehicle],0,0,0,0,0,0,0);
						new engine,lights,alarm,doors,bonnet,boot,objective;
						GetVehicleParamsEx(VehicleInfo[cc][vVehicle], engine,lights,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(VehicleInfo[cc][vVehicle], engine, lights, alarm, doors, false, false, false);
						SetVehicleDamage(VehicleInfo[cc][vVehicle]);
						RefreshNeon(cc);
						if(strlen(VehicleInfo[cc][vPlate]))
						{
							SetVehicleNumberPlate(VehicleInfo[cc][vVehicle],VehicleInfo[cc][vPlate]);
						}
						sync_attribs[VehicleInfo[cc][vVehicle]] = 1;
					}
				}
		}
		SendClientMessage(playerid, COLOR_LIGHTRED, "Veiculos desbugados.");
	}
	return 1;
}

COMMAND:djobcar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");

	if(PlayerInfo[playerid][pAdmin] < 5) return 1;

    new facid;
	if(sscanf(params, "d", facid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /djobcar [jobid]");
	else
	{
		for(new cc=0; cc < MAX_CA_VEHICLES; cc++)
		{
			if(VehicleInfo[cc][vCompany] == facid)
			{
   				if(VehicleInfo[cc][vVehicle] != -1)
			   	{
					VehicleInfo[cc][vNeonState] = 0;
					if(VehicleInfo[cc][vSirene][0] != 0)
					{
						if(IsValidDynamicObject(VehicleInfo[cc][vSirene][0])) DestroyDynamicObject(VehicleInfo[cc][vSirene][0]);
						VehicleInfo[cc][vSirene][0] = 0;
					}
					VehicleInfo[cc][vTuned] = false;
					DestroyVehicle(VehicleInfo[cc][vVehicle]);
					//========================================
					VehicleInfo[cc][vSemUso] = 3600;
					VehicleInfo[cc][vVehicle] = CreateVehicle(VehicleInfo[cc][vModel],VehicleInfo[cc][vSpawnX],VehicleInfo[cc][vSpawnY],VehicleInfo[cc][vSpawnZ],VehicleInfo[cc][vSpawnR],VehicleInfo[cc][vColor1],VehicleInfo[cc][vColor2],600, 0);
					SetVehicleVirtualWorld(VehicleInfo[cc][vVehicle], VehicleInfo[cc][vWorld]);
					LinkVehicleToInterior(VehicleInfo[cc][vVehicle], VehicleInfo[cc][vInterior]);
					ArmasNoPortaMalas(cc);

					SetVehicleParamsEx(VehicleInfo[cc][vVehicle],0,0,0,0,0,0,0);
					new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(VehicleInfo[cc][vVehicle], engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(VehicleInfo[cc][vVehicle], engine, lights, alarm, doors, false, false, false);
					SetVehicleDamage(VehicleInfo[cc][vVehicle]);
					RefreshNeon(cc);
					if(strlen(VehicleInfo[cc][vPlate]))
					{
						SetVehicleNumberPlate(VehicleInfo[cc][vVehicle],VehicleInfo[cc][vPlate]);
					}
					sync_attribs[VehicleInfo[cc][vVehicle]] = 1;
				}
				else
				{
				    VehicleInfo[cc][vSemUso] = 3600;
					VehicleInfo[cc][vVehicle] = CreateVehicle(VehicleInfo[cc][vModel],VehicleInfo[cc][vSpawnX],VehicleInfo[cc][vSpawnY],VehicleInfo[cc][vSpawnZ],VehicleInfo[cc][vSpawnR],VehicleInfo[cc][vColor1],VehicleInfo[cc][vColor2],600, 0);
					SetVehicleVirtualWorld(VehicleInfo[cc][vVehicle], VehicleInfo[cc][vWorld]);
					LinkVehicleToInterior(VehicleInfo[cc][vVehicle], VehicleInfo[cc][vInterior]);
					ArmasNoPortaMalas(cc);

					SetVehicleParamsEx(VehicleInfo[cc][vVehicle],0,0,0,0,0,0,0);
					new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(VehicleInfo[cc][vVehicle], engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(VehicleInfo[cc][vVehicle], engine, lights, alarm, doors, false, false, false);
					SetVehicleDamage(VehicleInfo[cc][vVehicle]);
					RefreshNeon(cc);
					if(strlen(VehicleInfo[cc][vPlate]))
					{
						SetVehicleNumberPlate(VehicleInfo[cc][vVehicle],VehicleInfo[cc][vPlate]);
					}
					sync_attribs[VehicleInfo[cc][vVehicle]] = 1;
				}
			}
		}
		SendClientMessage(playerid, COLOR_LIGHTRED, "Veiculos desbugados.");
	}
	return 1;
}

COMMAND:desbugarallcarros(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");

	if(PlayerInfo[playerid][pAdmin] > 1) return 1;
	for(new cc=0; cc < MAX_CA_VEHICLES; cc++)
	{
		if(VehicleInfo[cc][vFaction] == 0)
		{
		    if(VehicleInfo[cc][vVehicle] > -1)
		    {
				VehicleInfo[cc][vNeonState] = 0;
				if(VehicleInfo[cc][vSirene][0] != 0)
				{
					if(IsValidDynamicObject(VehicleInfo[cc][vSirene][0])) DestroyDynamicObject(VehicleInfo[cc][vSirene][0]);
					VehicleInfo[cc][vSirene][0] = 0;
				}
				VehicleInfo[cc][vTuned] = false;
				DestroyVehicle(VehicleInfo[cc][vVehicle]);
				VehicleInfo[cc][vVehicle] = -1;
			}
		}
	}
	return 1;
}

COMMAND:desbugarskill(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");

	if(PlayerInfo[playerid][pAdmin] > 1) return 1;
	new idpl;
	if(sscanf(params, "d", idpl)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /desbugarskill [id]");
	else
	{
		SetPlayerSkillLevel(idpl, WEAPONSKILL_PISTOL, 900);
		SetPlayerSkillLevel(idpl, WEAPONSKILL_PISTOL_SILENCED, 1000);
		SetPlayerSkillLevel(idpl, WEAPONSKILL_DESERT_EAGLE, 1000);
		SetPlayerSkillLevel(idpl, WEAPONSKILL_SHOTGUN, 1000);
		SetPlayerSkillLevel(idpl, WEAPONSKILL_SAWNOFF_SHOTGUN, 900);
		SetPlayerSkillLevel(idpl, WEAPONSKILL_SPAS12_SHOTGUN, 1000);
		SetPlayerSkillLevel(idpl, WEAPONSKILL_MICRO_UZI, 900);
		SetPlayerSkillLevel(idpl, WEAPONSKILL_MP5, 1000);
		SetPlayerSkillLevel(idpl, WEAPONSKILL_AK47, 1000);
		SetPlayerSkillLevel(idpl, WEAPONSKILL_M4, 1000);
		SetPlayerSkillLevel(idpl, WEAPONSKILL_SNIPERRIFLE, 1000);
	}
	return 1;
}

CMD:desbugarvc(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	if(PlayerInfo[playerid][pAdmin] > 5)
	{
		for(new i = 0; i < MAX_CA_VEHICLES; i ++)
		{
		    if(VehicleInfo[i][vModel] > 0)
		    {
      			if(VehicleInfo[i][vVehicle] == -1)
         		{
					VehicleInfo[i][vHealth] = 1000.0;
				}
			}
		}
	}
	return 1;
}

CMD:mudarclima(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		Tempo_Clima();
	}
	return 1;
}

ALTCOMMAND:aa->ajudaadmin;
CMD:ajudaadmin(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pTester] > 0)
	{
    	SendClientMessage(playerid, COLOR_LIGHTGREEN, "________________CCOMANDOS ADMINISTRATIVOS________________");
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "[INFORMAÇÕES]{FFFFFF} Utilize com moderação;");

        if(PlayerInfo[playerid][pTester] >= 1){
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Tester] /kick /tapa /congelar /descongelar /ajail /mandarls /trazer /ir /spec /irveiculo /trazerveiculo ");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Tester] /tirartmorte /desbugarskill /ajailoff /mascarados /ajudateam /checaratirador");
		}
    	if(PlayerInfo[playerid][pAdmin] >= 1){
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Game Admin 1]{FFFFFF} /aj /rj /aduty /kick /ban /ooc /ir /trazer /irls /mandarls /listaspec /setarvw /spec");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Game Admin 1]{FFFFFF} /irveiculo /trazerveiculo /curar /setarvida /tirartmorte /enviarjogador /tapa");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Game Admin 1]{FFFFFF} /setarint /setarskin /ajail /ajailoff /daraviso /verip /checaravisos /removeraviso");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Game Admin 1]{FFFFFF} /apagarpixe /congelar /descongelar /unbugc /desbugarskill /mascarados");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Game Admin 1]{FFFFFF} /ajudateam");
		}
		if(PlayerInfo[playerid][pAdmin] >= 2){
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Game Admin 2]{FFFFFF} /anrp /repararveiculo /ban /banip /desbanir");
		}
		if(PlayerInfo[playerid][pAdmin] >= 3){
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Game Admin 3]{FFFFFF} /desarmar /setarcolete /afogo /removerfogo /banoff /tirardrogas");
		}
		if(PlayerInfo[playerid][pAdmin] >= 4){
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Game Admin 4]{FFFFFF} /destruirarma /aretirar");
		}
		if(PlayerInfo[playerid][pAdmin] >= 5){
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Head Admin]{FFFFFF} /checarsos /setaradmin /setarjunioradmin /SetWeather /setardinheiro /desbugarvc /pontodesmanche /mudarsexo");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Head Admin]{FFFFFF} /amotor /atrancar /entrarveiculo /pnomeooc /verveiculos /ulogin /mudarsexo /setaremprego /savevehicles");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Head Admin]{FFFFFF} /abrirelevador /abrirelevador1 /irpos /unbanip /limpargrana /limparbanco /mudarclima /mudaridade");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Equipes]{FFFFFF} /refundteam /banappeal /factionteam /propertyteam");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Geral]{FFFFFF} /acasa /acomplexo /aemp /aveiculo /setartc");
		}
    	if(PlayerInfo[playerid][pAdmin] >= 3000){
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Manager]{FFFFFF} /setarammo /setararma /setarpremium /editarpe /palcopref /casinogames /liberaracesso");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Manager]{FFFFFF} /jetpack /facname /ircarrosql /a(tivar)ooc /timerindustrias /drogaaa /up /front /down /back");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Manager]{FFFFFF} /complexosint /empint, /empintv, /casasint, /atualizarcasa /casasint1 /casasint2 /empint1 /emptint2");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Manager]{FFFFFF} /criarfaccao /factipo /setarfaccao /aportao /setarportaofac /setarrange /tempoaberto");
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Manager]{FFFFFF} /criartunador /deletartunador /attgrafico /paycheckon /paycheckoff /gmx /darnamechange /setarportaoemp");
		}
	}
	return 1;
}
CMD:ajudateam(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    {
        SendClientMessage(playerid, COLOR_LIGHTGREEN, "___________Comandos de Times___________");
        SendClientMessage(playerid, COLOR_LIGHTGREEN, "OBSERVAÇÃO:{FF6347AA} SEMPRE UTILIZE OS COMANDOS EM /ADUTY");

        if(PlayerInfo[playerid][pFactionTeam] >= 1){
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Faction Management]{FFFFFF} /facname /factipo /setarfaccao /criarfaccao2 /setaportaofac");
        }
        if(PlayerInfo[playerid][pBanTeam] >= 1){
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Ban Appeals Team]{FFFFFF} /desbanir /banoff /banip /unbanip");
        }
        if(PlayerInfo[playerid][pRefundTeam] >= 1){
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Refund Team]{FFFFFF} /refundararma /refundaritem /refundargrana");
        }
        if(PlayerInfo[playerid][pPropertyTeam] >= 1){
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Property Team]{FFFFFF} /acasa /aemp /agaragem /acomplexo /enderecocasa /setarportaoemp");
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Property Team]{FFFFFF} /empint /empint1 /empint2 /empintv /casasint /casasint1 /casasint2 /complexosint");
        }
    }
    return 1;
}

COMMAND:mascarados(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pTester] > 0)
	{
	    new stringaap[256], mascarados = 0;
	    SendClientMessage(playerid, COLOR_ESPECIAL1, "|--- Mascarados ---|");
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(PlayerInfo[i][pMascID] != 0)
	        {
	            format(stringaap, sizeof(stringaap), "%s - %s", PlayerName(i,1), PlayerName(i,0));
				SCM(playerid, COLOR_GREY, stringaap);
				mascarados++;
	        }
	    }
	    if(mascarados == 0) SendClientMessage(playerid, COLOR_ESPECIAL1, "Não há nenhum player mascarado no momento.");
	}
	return 1;
}

COMMAND:itensp(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return 1;
	if(IsPlayerConnected(playerid))
	{
 		if(PlayerInfo[playerid][pLogado])
 		{
			SetarItensDoPlayer(playerid);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Você atualizou seus itens.");
		}
	}
	return 1;
}

COMMAND:timerindustrias(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] > 3000)
	{
    	Timer_Industrias(1);
    	SendClientMessage(playerid, COLOR_LIGHTRED, "O tempo das industrias correu.");
	}
	return 1;
}

CMD:id(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if (isnull(params))
	    return SCM(playerid, COLOR_LIGHTRED, "USE: /id [playerid/nome]");

	if (strlen(params) < 3)
		return SCM(playerid, COLOR_LIGHTRED, "Você deve especificar pelo menos 3 caracteres do nome do player");

	new count, stringaap[64];

	foreach (new i : Player)
	{
	    new pnames[24];
		GetPlayerName(i, pnames, sizeof(pnames));
	    if (strfind(pnames, params, true) != -1)
	    {
	        format(stringaap, sizeof(stringaap), "%s - ID: %d (TC: %d)", PlayerName(i,1),i, PlayerInfo[i][pLevel]);
			SCM(playerid, COLOR_GREY, stringaap);
	        count++;
		}
	}
	if (!count)
	{
		format(stringaap, sizeof(stringaap), "Não foi encontrado nenhum player com os caracteres: %s.", params);
		SCM(playerid, COLOR_LIGHTRED, stringaap);
	}
	return 1;
}

CMD:presos(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] ==  FAC_TIPO_PCERJ || PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pTester] > 0)
	{
		new count, stringaap[64];
		SCM(playerid, COLOR_LIGHTRED, "______________PRESOS______________");
		foreach (new i : Player)
		{
		    if(PlayerInfo[i][pPrisao] == 1)
		    {
		        format(stringaap, sizeof(stringaap), "[PMESP] %s - ID: %d, Tempo: %d", PlayerName(i,1),i,PlayerInfo[i][pTemPreso]);
				SCM(playerid, COLOR_GREY, stringaap);
		        count++;
			}
			if(PlayerInfo[i][pPrisao] == 2)
		    {
		        format(stringaap, sizeof(stringaap), "[PCESP] %s - ID: %d, Tempo: %d", PlayerName(i,1),i,PlayerInfo[i][pTemPreso]);
				SCM(playerid, COLOR_GREY, stringaap);
		        count++;
			}
		}
		if (!count)
		{
			SCM(playerid, COLOR_LIGHTRED, "Não há ninguém preso.");
		}
	}
	if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pTester] > 0)
	{
		new count1, count2, stringaap[64], temporestante;
		SCM(playerid, COLOR_LIGHTRED, "______________AJAILS______________");
		foreach (new i : Player)
		{
		    if(PlayerInfo[i][pPrisao] == 10)
		    {
		        format(stringaap, sizeof(stringaap), "%s - ID: %d, Tempo: %d", PlayerName(i,1),i,PlayerInfo[i][pTemPreso]);
				SCM(playerid, COLOR_GREY, stringaap);
		        count1++;
			}
		}
		if (!count1)
		{
			SCM(playerid, COLOR_LIGHTRED, "Não há ninguém em Ajail.");
		}
		SCM(playerid, COLOR_LIGHTRED, "______________HOSPITAL______________");
		foreach (new i : Player)
		{
		    if(PlayerInfo[i][pTempoMorto] > 0)
		    {
		        temporestante = (PlayerInfo[i][pTempoMorto]-gettime());
		        format(stringaap, sizeof(stringaap), "%s - ID: %d, Tempo: %d", PlayerName(i,1),i,temporestante);
				SCM(playerid, COLOR_GREY, stringaap);
		        count2++;
			}
		}
		if (!count2)
		{
			SCM(playerid, COLOR_LIGHTRED, "Não há ninguém em Hospital.");
		}
	}
	{

	}
	return 1;
}

COMMAND:tirardrogas(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid;
	if(PlayerInfo[playerid][pAdmin] < 3) return 1;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /tirardrogas [id]");
	else
	{
 		if(IsPlayerConnected(targetid))
	 	{
	 	    if(PlayerInfo[targetid][pLogado])
	 		{
				ResetPlayerDrugs(targetid);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você resetou as drogas deste jogador.");
				SendClientMessage(targetid, COLOR_LIGHTGREEN, "Um admin resetou as suas drogas.");


				return 1;
			}
		}
	}
	return 1;
}

COMMAND:drogaaa(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
	    if(IsPlayerConnected(playerid))
	 	{
			SetAllPlayerDrugs(playerid);
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você pegou algumas drogas.");
		}
	}
	return 1;
}

COMMAND:down(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(IsPlayerConnected(playerid))
 	{
  		if (PlayerInfo[playerid][pAdmin] >= 5)
    	{
     		new Float:slx, Float:sly, Float:slz;
       		GetPlayerPos(playerid, slx, sly, slz);
        	if(IsPlayerInAnyVehicle(playerid))
         	{
          		SetVehiclePos(GetPlayerVehicleID(playerid),slx,sly,slz-2);
          	}
            else
            {
               SetPlayerPos(playerid, slx, sly, slz-2);
            }
            return 1;
		}
	}
	return 1;
}

COMMAND:up(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(IsPlayerConnected(playerid))
 	{
  		if (PlayerInfo[playerid][pAdmin] >= 5)
    	{
     		new Float:slx, Float:sly, Float:slz;
       		GetPlayerPos(playerid, slx, sly, slz);
        	if(IsPlayerInAnyVehicle(playerid))
         	{
          		SetVehiclePos(GetPlayerVehicleID(playerid),slx,sly,slz+2);
          	}
            else
            {
               SetPlayerPos(playerid, slx, sly, slz+2);
            }
            return 1;
		}
	}
	return 1;
}

COMMAND:front(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(IsPlayerConnected(playerid))
 	{
  		if (PlayerInfo[playerid][pAdmin] >= 5)
    	{
     		new Float:slx, Float:sly, Float:slz;
       		GetPlayerPos(playerid, slx, sly, slz);
        	if(IsPlayerInAnyVehicle(playerid))
         	{
          		SetVehiclePos(GetPlayerVehicleID(playerid),slx+2,sly,slz);
          	}
            else
            {
               SetPlayerPos(playerid, slx+2, sly, slz);
            }
            return 1;
		}
	}
	return 1;
}

COMMAND:back(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(IsPlayerConnected(playerid))
 	{
  		if (PlayerInfo[playerid][pAdmin] >= 5)
    	{
     		new Float:slx, Float:sly, Float:slz;
       		GetPlayerPos(playerid, slx, sly, slz);
        	if(IsPlayerInAnyVehicle(playerid))
         	{
          		SetVehiclePos(GetPlayerVehicleID(playerid),slx-2,sly,slz);
          	}
            else
            {
               SetPlayerPos(playerid, slx-2, sly, slz);
            }
            return 1;
		}
	}
	return 1;
}

COMMAND:spec(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid,playersip[128];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /spec [id]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar logado para utilizar este comando.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado!");
		if(PlayerInfo[playerid][pAdmin] >= 1  || PlayerInfo[playerid][pTester])
		{
			if(GetPVarInt(playerid, "PlayerSpectate") == 0)
			{
				new Float:health, Float:armour,Float:x, Float:y, Float:z,
					world = GetPlayerVirtualWorld(playerid),
					interior = GetPlayerInterior(playerid);
            	GetPlayerPos(playerid,x,y,z); GetPlayerHealth(playerid,health); GetPlayerArmour(playerid,armour);
            	SetPVarFloat(playerid,"MarkX",x); SetPVarFloat(playerid,"MarkY",y); SetPVarFloat(playerid,"MarkZ",z);
            	SetPVarFloat(playerid, "Health", health); SetPVarFloat(playerid, "Armour", armour);
            	SetPVarInt(playerid, "Int", interior); SetPVarInt(playerid, "World", world);
			}
		    TogglePlayerSpectating(playerid, 1);
    	    if (IsPlayerInAnyVehicle(targetid)) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(targetid));
		    else PlayerSpectatePlayer(playerid, targetid);

		    SetPVarInt(playerid, "PlayerSpectate", targetid);
    	    SetPlayerInterior(playerid,GetPlayerInterior(targetid));
    	    SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(targetid));
    	    SetPVarInt(playerid, "SpecID", targetid);
    	    GetPlayerIp(targetid,playersip,sizeof(playersip));
    	    format(string, sizeof(string), "Você está observando %s [%s], IP:[%s], Ping:[%d], TC:[%d], lembre-se de usar /timestamp.", PlayerName(targetid,1), PlayerName(targetid,0),playersip,GetPlayerPing(targetid), PlayerInfo[targetid][pLevel]);
    	    SendClientMessage(playerid,COLOR_WHITE,string);
    	    /*if(PlayerInfo[targetid][pAdmin] >= 3001)
    	    {
				format(string, sizeof(string), "AdmCmd: O Admin %s está de spec em você.", PlayerName(playerid,0));
    	    	SendClientMessage(targetid,COLOR_LIGHTRED,string);
    	    }*/

    	    new strl[126];
			format(strl, 126, "%s observou o player %s. [/spec]", PlayerName(playerid, 0), PlayerName(targetid, 0));
			LogCMD_A(playerid, strl);
		}
	}
	return 1;
}

COMMAND:specoff(playerid, params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar logado para utilizar este comando.");
    if(GetPVarInt(playerid, "PlayerSpectate") == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está inspecionando ninguém.");
    if(PlayerInfo[playerid][pAdmin] >= 1  || PlayerInfo[playerid][pTester]) {
	    TogglePlayerSpectating(playerid, 0);
	    OutrasInfos[playerid][oSaindoDeSpec] = 1;
	    SpawnPlayer(playerid);
		new strl[126];
		format(strl, 126, "%s deu specoff. [/specoff]", PlayerName(playerid, 0));
		LogCMD_A(playerid, strl);
    }
	return 1;
}


COMMAND:listaspec(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1) return 1;
	if(!PlayerInfo[playerid][pLogado]) return 1;
	new temspec = 0;

    if(PlayerInfo[playerid][pAdmin] < 5)
    {
	    foreach (Player, i)
		{
		    if(PlayerInfo[i][pLogado] == 1 && GetPlayerState(i) == PLAYER_STATE_SPECTATING )
		    {
		        if(PlayerInfo[i][pAdmin] < 5)
		        {
					format(string, sizeof(string), "%s está observando o player %s.", PlayerName(i,0), PlayerName(GetPVarInt(i, "SpecID"),0));
		      		SendClientMessage(playerid, COLOR_GREY, string);
		      		temspec++;
				}
		    }
		}
	}
	else
    {
	    foreach (Player, i)
		{
		    if(PlayerInfo[i][pLogado] == 1 && GetPlayerState(i) == PLAYER_STATE_SPECTATING )
		    {
				format(string, sizeof(string), "%s está observando o player %s.", PlayerName(i,0), PlayerName(GetPVarInt(i, "SpecID"),0));
	      		SendClientMessage(playerid, COLOR_GREY, string);
	      		temspec++;
		    }
		}
	}
	if(temspec == 0) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há ninguém de spec.");
	return 1;
}

CMD:limparbanco(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	if(!PlayerInfo[playerid][pLogado]) return 1;
	new id;
	if (sscanf(params, "i", id))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"USE: /limparbanco [playerid]");
		return 1;
	}
	else
	{
	    new tinhabanco = PlayerInfo[id][pBanco];

 		PlayerInfo[id][pBanco] = 0;

		new admnome[24];
		if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
		else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

		format(string, sizeof(string), "AdmCmd: O Admin %s tirou todo o dinheiro de seu banco.", admnome);
		SendClientMessage(id,COLOR_LIGHTRED,string);

 		format(string, sizeof(string), "AdmCmd: O Admin %s removeu todo o dinheiro do banco de %s.", admnome, PlayerName(id, 0));
		SendAdminMessage(COLOR_LIGHTRED,string);

        new strl[126];
		format(strl, 126, "%s zerou a conta bancária de %s. [ Total de: R$%d ]", PlayerName(playerid, 0), PlayerName(id, 0), tinhabanco);
		LogCMD_ZerouBanco(strl);
	}
	return 1;
}

CMD:limpargrana(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	if(!PlayerInfo[playerid][pLogado]) return 1;
	new id;
	if(sscanf(params, "i", id))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"USE: /limpargrana [playerid]");
		return 1;
	}
	else
	{
	    new TinhaGrana = PlayerInfo[id][pGrana];

 		PlayerInfo[id][pGrana] = 0;

 		new admnome[24];
		if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
		else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

 		format(string, sizeof(string), "AdmCmd: O Administrador %s tirou todo o dinheiro de sua mão.", admnome);
		SendClientMessage(playerid,COLOR_LIGHTRED,string);

 		format(string, sizeof(string), "AdmCmd: O Administrador %s removeu todo o dinheiro da mão de %s.", admnome, PlayerName(id, 0));
		SendAdminMessage(COLOR_LIGHTRED,string);

		new strl[126];
		format(strl, 126, "%s limpou o dinheiro de %s. [ Total de: R$%d ]", PlayerName(playerid, 0), PlayerName(id, 0), TinhaGrana);
		LogCMD_ZerouGrana(strl);

	}
	return 1;
}

CMD:desarmar(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 3) return 1;
	if(!PlayerInfo[playerid][pLogado]) return 1;
	new id;
	if (sscanf(params, "i", id))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"USE: /desarmar [playerid]");
		return 1;
	}
	else
	{
 		//========================================
	    DesarmandoPlayer[id] = 2;
		ResetPlayerWeapons(id);
		PlayerInfo[id][pArmaMao] = 0;
		RemovePlayerAttachedObject(id, 0);
		//========================================

		new admnome[24];
		if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
		else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

 		format(string, sizeof(string), "AdmCmd: O Administrador %s desarmou você.", admnome);
		SendClientMessage(id,COLOR_LIGHTRED,string);

 		format(string, sizeof(string), "AdmCmd: O Administrador %s desarmou o player %s.", admnome, PlayerName(id, 0));
		SendAdminMessage(COLOR_LIGHTRED,string);
	}
	return 1;
}

CMD:facnum(playerid, params[])
{
	//if(PlayerInfo[playerid][pAdmin] < 5  || PlayerInfo[playerid][pFactionTeam] < 1) return 1;
	if(!PlayerInfo[playerid][pLogado]) return 1;

	new faccao = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	if(10 < FacInfo[faccao][fTipo] < 18) // Gangs&Máfias
	{
		if(PlayerInfo[playerid][pFacCargo] >= 5)
		{
			new var2;
			if (sscanf(params, "i", var2)) return SendClientMessage(playerid, COLOR_LIGHTRED,"USE: /facnum [Numero]");
			else
			{
				if(var2 < 100000 || var2 > 999999)
				{
				    if(FacInfo[faccao][fCriada] == 1)
				    {
				        FacInfo[faccao][fTrafNum] = var2;
				        format(string, sizeof(string), "FACÇÃO: Você setou o numero de contato da sua facção para: %d.", var2);
				        SendClientMessage(playerid, COLOR_LIGHTRED, string);
				    	SalvarFaccao(faccao);
					}
	    			else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Facção Inválida");
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Número inválido, crie um número com 6 digitos.");
			}
		}
	}
	return 1;
}

COMMAND:afktodos(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 1) return 1;
    if(PlayerInfo[playerid][pTester] < 1) return 1;
    SendClientMessage(playerid, COLOR_LIGHTGREEN, "______Players AFK______");
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(!IsPlayerNPC(i))
        {
	        if(PlayerInfo[i][pLogado] == 1)
	        {
				if(IsAFK[i] == true)
				{
					format(string,sizeof(string)," %s está AFK há %d segundos.", PlayerName(i,0), AFKTimer[i]); 					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				}
			}
		}
	}
	return 1;
}

COMMAND:afk(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new targetid;
	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /afk [id]");
	else
	{
	    if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRRO: ID inválido.");
		AFKTimer[playerid]++;
		format(string,sizeof(string),"[AFK] %s está AFK há %d segundos.", PlayerName(targetid,1), AFKTimer[targetid]);
		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	}
	return 1;
}

COMMAND:fpd2(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 3002) return 1;
	PayDay(playerid);
	return 1;
}

COMMAND:checaravisos(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 1) return 1;
    new targetid, str[256];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /checaravisos [id]");
	else
	{
	    format(str,sizeof(str),"_____________________Avisos de %s_____________________",PlayerName(targetid, 0));  SendClientMessage(playerid, COLOR_LIGHTGREEN, str);
		format(str,sizeof(str),"1: %s", PlayerInfo[targetid][pAviso1]); 					SendClientMessage(playerid, COLOR_LIGHTGREEN, str);
		format(str,sizeof(str),"2: %s", PlayerInfo[targetid][pAviso2]); 					SendClientMessage(playerid, COLOR_LIGHTGREEN, str);
		format(str,sizeof(str),"3: %s", PlayerInfo[targetid][pAviso3]); 					SendClientMessage(playerid, COLOR_LIGHTGREEN, str);
	}
	return 1;
}

COMMAND:daraviso(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 1) return 1;
    new targetid, aviso[126];
	if(sscanf(params, "us", targetid, aviso)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /daraviso [id] [motivo]");
	else
	{
		AdicionarAviso(targetid,aviso);

		format(string, sizeof(string), "AdmnCmd: O administrador %s deu um aviso no personagem %s, motivo: %s.", PlayerName(playerid, 0), PlayerName(targetid, 0), aviso);
		SendClientMessageToAll(COLOR_LIGHTRED, string);
	}
	return 1;
}

COMMAND:removeraviso(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 1) return 1;
    new targetid, aviso[126];
	if(sscanf(params, "us", targetid, aviso)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /removeraviso [id] [motivo]");
	else
	{
	    PlayerInfo[targetid][pAvisos]--;
		format(string, sizeof(string), "AdmCmd: O administrador %s removeu um aviso no personagem %s, motivo: %s.", PlayerName(playerid, 0), PlayerName(targetid, 0), aviso);
		SendAdminMessage(COLOR_LIGHTRED,string);
	}
	return 1;
}

COMMAND:destruirarma(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4) return 1;
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");

	new ArmaId = PlayerInfo[playerid][pArmaMao];
 	if(ArmaId > 0)
  	{
   		//========================================
	    DesarmandoPlayer[playerid] = 2;
		ResetPlayerWeapons(playerid);
		PlayerInfo[playerid][pArmaMao] = 0;
		RemovePlayerAttachedObject(playerid, 0);
		//========================================
     	RemovePlayerAttachedObject(playerid, 0);
		ArmaData[ArmaId][ArmaCor] = 1;
        ArmaData[ArmaId][ArmaCom] = 0;

        if(IsValidDynamicObject(ArmaData[ArmaId][ArmaObj]))
				DestroyDynamicObject(ArmaData[ArmaId][ArmaObj]);
        //========================================
		SendClientMessage(playerid, COLOR_LIGHTRED, "AdmCmd: Arma deletada com sucesso.");

		SalvarArma(ArmaId);
		return 1;
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma arma para destruir.");
}

COMMAND:setarpremium(playerid, params[])
{
	new targetid, nivel, dias;
	if(sscanf(params, "uiiii", targetid, nivel, dias)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /setarpremium [id] [nivel(1.Bronze|2.Prata|3.Ouro)] [dias]");
	else
	{
	    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Este jogador não está conectado!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "NPC's não podem receber status de Doador.");
		if(PlayerInfo[playerid][pAdmin] >= 3002)
		{
		    if(nivel >= 0 || nivel < 4)
		    {
		        //86400 segundos == 1 dia
				new tempo = dias * 86400,
			    	doadortxt[128],
			    	admnome[24],
			    	tempodoador[24];

			    PlayerInfo[targetid][pDoadorTempo] = gettime()+tempo;
				PlayerInfo[targetid][pDoador] = nivel;
				format(tempodoador, sizeof(tempodoador), "%s", ConvertTimestampToDate( PlayerInfo[targetid][pDoadorTempo] ));

                format(string, sizeof(string), "AdmCmd: Você setou o nível de doador de %s até %s. Nível: %d.", PlayerName(targetid, 0), tempodoador, nivel);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);

				if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
				else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

	            if(nivel == 0) doadortxt = "retirou o status de doador de";
	            else if(nivel == 1){
				    format(string, sizeof(string), "Você recebeu o status de doador Bronze até %s.", tempodoador);
				    PlayerInfo[targetid][pChangeNames] += 3;
					doadortxt = "setou o status de doador bronze à";
				}
				else if(nivel == 2){
				    format(string, sizeof(string), "Você recebeu o status de doador Prata até %s.", tempodoador);
				    PlayerInfo[targetid][pChangeNames] += 6;
					doadortxt = "setou o status de doador prata à";
				}
				else if(nivel == 3){
				    format(string, sizeof(string), "Você recebeu o status de doador Ouro até %s.", tempodoador);
				    PlayerInfo[targetid][pChangeNames] += 10;
					doadortxt = "setou o status de doador ouro à";
				}
                SendClientMessage(targetid, COLOR_LIGHTGREEN, string);

				format(string, sizeof(string), "AdmCmd: O administrador %s %s %s até %s.", admnome, doadortxt, PlayerName(targetid, 0), tempodoador);
				SendAdminMessage(COLOR_LIGHTRED,string);
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /setardoador [id] [nivel(1.Bronze|2.Prata|3.Ouro)] [dias]");
		}
	}
	return 1;
}

CMD:tempopremium(playerid,params[]){
	if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pDoador] < 1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um premium.");
    format(string, sizeof(string), "[DONATER] Você se manter com o status de donater até %s.", ConvertTimestampToDate( PlayerInfo[playerid][pDoadorTempo] ));
    SCM(playerid, COLOR_LIGHTGREEN, string);
	return 1;
}

COMMAND:darnamechange(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] < 3002) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FFFFFF}Você não possui acesso a este comando.");
	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /darnamechange [id]");
	else
	{
		PlayerInfo[targetid][pChangeNames]++;

		new admnome[24];
		if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
		else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

		format(string, sizeof(string), "O Administrador %s lhe deu 1 Namechange.", admnome);
		SendClientMessage(targetid, COLOR_LIGHTGREEN, string);

		format(string, sizeof(string), "AdmCmd: O Administrador %s deu 1 Namechange para %s.", admnome, PlayerName(targetid, 0));
		SendAdminMessage(COLOR_LIGHTRED,string);
		return 1;
	}
	return 1;
}

COMMAND:ajail(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid, tempo, motivo[256];
	if(sscanf(params, "uis", targetid, tempo, motivo)) SendClientMessage(playerid, COLOR_LIGHTRED, "SINTAXE:{FFFFFF} /ajail [id] [tempo(mim)] [motivo]");
	else
	{
	    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FFFFFF}Este jogador não está conectado.");
	    if(PlayerInfo[targetid][pAdmin] >= 5 && PlayerInfo[targetid][pAdmin] <= 3002) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FFFFFF}Você não pode dar ajail em um Head Staff.");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} NPC's não podem ser presos.");
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pTester] >= 1)
		
		{

		    new admnome[24];
			if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
			else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

		    if(tempo >= 1)
		    {
				PlayerInfo[targetid][pPrisao] = 10;
	    		PlayerInfo[targetid][pTemPreso] = tempo;
	    		format(string, sizeof(string), "Você levou uma prisão administrativa de %d minuto(s) por %s.", tempo, PlayerInfo[playerid][pNomeOOC]);
				SendClientMessage(targetid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "O motivo da prisão foi: %s.", motivo);
				SendClientMessage(targetid, COLOR_LIGHTRED, string);
				SetPlayerPos(targetid,2523.9197,-1673.8944,14.8589);
            	TogglePlayerControllable(targetid, false);
            	SetPlayerInterior(targetid, 0);
            	SetPlayerVirtualWorld(targetid, targetid);
            	PlayerInfo[targetid][pEntrouEmpresa] = -1;
    			PlayerInfo[targetid][pEntrouCasa] = -1;
  	    		PlayerInfo[targetid][pEntrouComplexo] = -1;
  	    		PlayerInfo[targetid][pEntrouGaragem] = -1;

  	    		format(string, sizeof(string), "AdmCmd: O administrador %s prendeu %s por %d minutos, motivo: %s.", PlayerInfo[playerid][pNomeOOC], PlayerName(targetid, 0), tempo, motivo);
				SendClientMessageToAll(COLOR_LIGHTRED, string);
			}
			else
			{
			    PlayerInfo[targetid][pPrisao] = 0;
	    		PlayerInfo[targetid][pTemPreso] = 0;
				SendClientMessage(targetid, COLOR_GREEN, "Você foi solto da prisão administrativa.");
				SetPlayerPos(targetid,1808.6868,-1578.7084,13.4993);
            	TogglePlayerControllable(targetid, true);
            	SetPlayerInterior(targetid, 0);
            	SetPlayerVirtualWorld(targetid, targetid);
            	PlayerInfo[targetid][pEntrouEmpresa] = -1;
    			PlayerInfo[targetid][pEntrouCasa] = -1;
  	    		PlayerInfo[targetid][pEntrouComplexo] = -1;
  	    		PlayerInfo[targetid][pEntrouGaragem] = -1;

  	    		format(string, sizeof(string), "AdmCmd: O administrador %s libertou %s da prisão, motivo: %s", PlayerInfo[playerid][pNomeOOC], PlayerName(targetid, 0), motivo);
				SendClientMessageToAll(COLOR_LIGHTRED,string);
			}

			new str2[256];
			new hour, mins, sec;
			new d,m,y;
			new DataSalvar[32];
			getdate(y,m,d);
			gettime(hour,mins,sec);

	        new strh[24], hourstr[4], minstr[4], secstr[4];

			if(hour < 10) { format(hourstr,sizeof(hourstr),"0%d",hour); } else { format(hourstr,sizeof(hourstr),"%d",hour); }
			if(mins < 10) { format(minstr,sizeof(minstr),"0%d",mins); } else { format(minstr,sizeof(minstr),"%d",mins); }
			if(sec < 10) { format(secstr,sizeof(secstr),"0%d",sec); } else { format(secstr,sizeof(secstr),"%d",sec); }
			format(strh,sizeof(strh),"%s:%s:%s",hourstr,minstr,secstr);
			format(DataSalvar,sizeof(DataSalvar),"%d-%d-%d - %s",d,m,y,strh);

			new stringip[28];
			format(stringip, sizeof(stringip), "IP: %s", PrintPlayerIP(targetid));

			new tempofinalll= (tempo*60);

			format(str2,sizeof(str2),"INSERT INTO a_ajailrecord (PlayerNome,PlayerID,Data,Motivo,Admin,IP,Tempo) VALUES ('%s','%d','%s','%s','%s','%s','%d')",PlayerName(targetid,0),PlayerInfo[targetid][pID],DataSalvar,motivo,PlayerName(playerid,0),stringip,tempofinalll);
    		mysql_function_query(Pipeline, str2, false, "noReturnQuery", "");
		}
	}
	return 1;
}

COMMAND:unbanip(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new type[128];
	if(sscanf(params, "s[128]", type)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /unbanip [ip]");
	else
	{
	    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
		if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pBanTeam] < 1) return 1;
		{
		    format(string, sizeof(string),"unbanip %s", type);
			SendRconCommand(string);
			SendRconCommand("reloadbans");
      		format(string, sizeof(string), "AdmCmd: O Admin %s desbaniu o IP %s", PlayerName(playerid, 0), type);
			SendAdminMessage(COLOR_LIGHTRED,string);
		}
	}
	return 1;
}

COMMAND:banip(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new type[128];
	if(sscanf(params, "s[128]", type)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /banirip [ip]");
	else
	{
	    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
		if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pBanTeam] < 1) return 1;
		{
		    format(string, sizeof(string),"banip %s", type);
			SendRconCommand(string);
			SendRconCommand("reloadbans");
      		format(string, sizeof(string), "AdmCmd: O Admin %s baniu o IP %s.", PlayerName(playerid, 0), type);
			SendAdminMessage(COLOR_LIGHTRED,string);
		}
	}
	return 1;
}

COMMAND:verip(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /verip [id]");
	else
	{
	    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Este jogador não está conectado!");
	    if(playerid != targetid && PlayerInfo[targetid][pAdmin] >= 5) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode ver o IP de um Head Staff.");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "NPC's não tem IP.");
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			format(string, sizeof(string), "IP: %s", PrintPlayerIP(targetid));
			SCM(playerid, 0xFF0000FF,string);
		}
	}
	return 1;
}

COMMAND:desbanir(playerid, params[])
{
	if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	if (PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pBanTeam] < 1) return 1;
	new text[24];
	if(sscanf(params, "s[24]", text)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /desbanir [Nome_Sobrenome].");
	else
	{
	    new admnome[24];
		if(PlayerInfo[playerid][pAdmin] > 3000) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
		else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

    	SendClientMessage(playerid, COLOR_LIGHTRED, text);
    	//mysql_format(Pipeline, szQuery, sizeof(szQuery), "SELECT * FROM `accounts` WHERE `Username` = '%s'", text);
		//mysql_function_query(Pipeline, szQuery, true, "DesBanindoPlayer", "is", playerid, text);
		format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `pBanido` = '0' WHERE `Username` = '%s'",text);
		mysql_function_query(Pipeline, szQuery, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);

		format(string, sizeof(string), "AdmCmd: O administrador %s desbaniu a conta %s.", admnome, text);
		SendAdminMessage(COLOR_LIGHTRED,string);
	}
	return 1;
}


COMMAND:banoff(playerid, params[])
{
	if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	if (PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pBanTeam] < 1) return 1;
	new text[128],motivo[126];
	if(sscanf(params, "s[128]s[126]", text,motivo)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /banoff [Nome_Sobrenome] [motivo]");
	else
	{
	    new admnome[24];
		if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
		else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

		format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `pBanido` = '1' WHERE `Username` = '%s'",text);
		mysql_function_query(Pipeline, szQuery, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);

		format(string, sizeof(string), "AdmCmd: O administrador %s baniu offline a conta %s, motivo %s.", admnome, text, motivo);
		SendClientMessageToAll(COLOR_LIGHTRED, string);

		//Banir("Adwards",text,0, PlayerInfo[playerid][pNomeOOC],motivo);

	}
	return 1;
}

ALTCOMMAND:informacoes->ulogin;
COMMAND:ulogin(playerid, params[])
{
	if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	if (PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pTester] < 1) return 1;

	new text[128];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /ulogin [Nome_Sobrenome]");
	else
	{
	    VerLastLogin(playerid, text);
	}
	return 1;
}


COMMAND:ajailoff(playerid, params[])
{
	if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	if (PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pTester] < 1) return 1;

	new tempo,text[128];
	if(sscanf(params, "is[128]", tempo, text)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /ajailoff [tempo] [Nome_Sobrenome]");
	else
	{

		format(OutrasInfos[playerid][oAjailMotivo], 128, "%s", text);

    	mysql_format(Pipeline, szQuery, sizeof(szQuery), "SELECT * FROM `accounts` WHERE `Username` = '%s'", text);
		mysql_function_query(Pipeline, szQuery, true, "AjilzandoPlayer", "ii", playerid, tempo);
	}
	return 1;
}

forward AjilzandoPlayer(playerid, tempo);
public AjilzandoPlayer(playerid, tempo)
{
	new Rows, Fields;
	cache_get_data(Rows, Fields);
  	if(Rows)
  	{
  	    new PrisaoADM = 10;
   		new tmp[130], planame[24];
		cache_get_field_content(0, "ID", tmp);
  		new IDn = strval(tmp);

  		cache_get_field_content(0, "Username", tmp);	format(planame, 24, "%s", tmp);

		for(new pp = 0; pp < MAX_PLAYERS; pp++)
		{
			if (PlayerInfo[pp][pLogado] == 1)
			{
			    if(PlayerInfo[pp][pID] == IDn)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player está online. Use /ajail.");
			        return 1;
			    }
			}
		}

    	format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `pPrisao` = '%d', `pTemPreso` = '%d' WHERE `ID` = '%d'",
    	    PrisaoADM,
    	    tempo,
		    IDn
		);
		mysql_function_query(Pipeline, szQuery, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);

		new text[130];
		format(text, 128, "%s", OutrasInfos[playerid][oAjailMotivo]);

		new str2[256];
		new hour, mins, sec;
		new d,m,y;
		new DataSalvar[32];
		getdate(y,m,d);
		gettime(hour,mins,sec);

		new strh[24], hourstr[4], minstr[4], secstr[4];

		if(hour < 10) { format(hourstr,sizeof(hourstr),"0%d",hour); } else { format(hourstr,sizeof(hourstr),"%d",hour); }
		if(mins < 10) { format(minstr,sizeof(minstr),"0%d",mins); } else { format(minstr,sizeof(minstr),"%d",mins); }
		if(sec < 10) { format(secstr,sizeof(secstr),"0%d",sec); } else { format(secstr,sizeof(secstr),"%d",sec); }
		format(strh,sizeof(strh),"%s:%s:%s",hourstr,minstr,secstr);
		format(DataSalvar,sizeof(DataSalvar),"%d-%d-%d - %s",d,m,y,strh);

		format(str2,sizeof(str2),"INSERT INTO a_ajailrecord (PlayerNome,PlayerID,Data,Motivo,Admin,IP,Tempo) VALUES ('%s','%d','%s','%s','%s','00','%d')",planame,IDn,DataSalvar,text,PlayerName(playerid,0),tempo);
    	mysql_function_query(Pipeline, str2, false, "noReturnQuery", "");

		format(string, sizeof(string), "AdmCmd: O administrador %s aplicou ajailoff de %d minutos em %s.", PlayerName(playerid, 0), tempo, text);
		SendAdminMessage(COLOR_LIGHTRED,string);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Conta não encontrada.");
	}
	return 1;
}

COMMAND:aveiculo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new option[11], variavel;

    new vehicleid = GetPlayerVehicleID(playerid);
    new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
	if(slot <= -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não pode ser editado.");

	if(sscanf(params, "s[11]I(99)", option, variavel))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /aveiculo [opção]");
  		SendClientMessage(playerid, COLOR_LIGHTRED, "|modelo |cor1 |cor2 |comprarvaga |faccao|abastecer |job |deletar");
		return 1;
	}
	else
	{
	    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Este jogador não está conectado!");
		if(PlayerInfo[playerid][pAdmin] >= 5)
		{
    		if(strcmp(option, "modelo", true) == 0)
			{
			        if(IsInvalidVehicle(variavel)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Modelo inválido.");
			    	if(variavel == 99) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FFFFFF}USE: /aveiculo modelo [id do modelo]");
					VehicleInfo[slot][vModel] = variavel;
					format(string, sizeof(string), "AdmCmd: Você mudou o modelo do veículo para %d.", variavel);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					return 1;
			}
			if(strcmp(option, "job", true) == 0)
			{
			    	if(variavel == 99) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /aveiculo job [id do emprego]");
					VehicleInfo[slot][vCompany] = variavel;

					VehicleInfo[slot][vOwner] = 0;
					VehicleInfo[slot][vFuel] = 100;
					VehicleInfo[slot][vMileage] = 0;
					VehicleInfo[slot][vInsurance] = 0;
					VehicleInfo[slot][vSelling] = -1;
					VehicleInfo[slot][vHealth] = 1000.0;
					VehicleInfo[slot][vBateria] = 100.0;
					VehicleInfo[slot][vFaction] = 0;
					StopEngine(VehicleInfo[slot][vVehicle]);

					format(VehicleInfo[slot][vOwnerName], 24,"Governo do SP");

					format(string, sizeof(string), "AdmCmd: Você mudou o veículo para o emprego %d.", variavel);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					return 1;
			}
			if(strcmp(option, "abastecer", true) == 0)
			{
			    if(variavel == 99) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /aveiculo abastecer [quantidade (max: 100)]");
	   			if(variavel > 100) variavel = 100;
				VehicleInfo[slot][vFuel] = variavel;
				format(string, sizeof(string), "AdmCmd: Você abasteceu %d L para este veículo.", variavel);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				return 1;
			}

		 	if(strcmp(option, "cor1", true) == 0)
			{
			    if(variavel == 99) return SendClientMessage(playerid, COLOR_GREY, "ERRO: /aveiculo cor1 [COR ID]");
				VehicleInfo[slot][vColor1] = variavel;
				format(string, sizeof(string), "AdmCmd: Você mudou a cor1 do veículo para %d.", variavel);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				return 1;
			}
			if(strcmp(option, "cor2", true) == 0)
			{
			    if(variavel == 99) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /aveiculo cor2 [COR ID]");
				VehicleInfo[slot][vColor2] = variavel;
				format(string, sizeof(string), "AdmCmd: Você mudou a cor2 do veículo para %d.", variavel);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				return 1;
			}
			if(strcmp(option, "faccao", true) == 0)
			{
			    	if(variavel == 99) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /aveiculo faccao [Facção ID]");
					VehicleInfo[slot][vOwner] = 0;
					VehicleInfo[slot][vFuel] = 100;
					VehicleInfo[slot][vMileage] = 0;
					VehicleInfo[slot][vInsurance] = 0;
					VehicleInfo[slot][vSelling] = -1;
					VehicleInfo[slot][vCompany] = 0;
					VehicleInfo[slot][vHealth] = 1000.0;
					VehicleInfo[slot][vBateria] = 100.0;
					VehicleInfo[slot][vFaction] = GetFactionBySqlId(variavel);
					LockVehicle(VehicleInfo[slot][vVehicle]);
					StopEngine(VehicleInfo[slot][vVehicle]);

					new nomefac[56];
					format(nomefac, sizeof(nomefac), "%s", FacInfo[variavel][fNome]);

					format(string, sizeof(string), "Você setou o veículo para a facção: '%s'", nomefac);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

					format(VehicleInfo[slot][vOwnerName],MAX_PLAYER_NAME,nomefac);

					return 1;
			}
			if(strcmp(option, "despawnar", true) == 0)
			{
					SaveVehicleDamage(vehicleid);
					DestruirObjetosCarro(slot, vehicleid);
					SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você despawnou este veículo aqui.");
					VehicleInfo[slot][vNeonState] = 0;
					VehicleInfo[slot][vTuned] = false;

					if(VehicleInfo[slot][vSirene][0] != 0)
					{
						if(IsValidDynamicObject(VehicleInfo[slot][vSirene][0])) DestroyDynamicObject(VehicleInfo[slot][vSirene][0]);
						VehicleInfo[slot][vSirene][0] = 0;
					}
					RefreshNeon(slot);

					DestroyVehicle(VehicleInfo[slot][vVehicle]);
                    VehicleInfo[slot][vVehicle] = -1;

					SaveVehicle(slot);
					return 1;
			}
			else if(strcmp(option, "comprarvaga", true) == 0)
			{
				new Float:X, Float:Y, Float:Z, Float:R;
				SaveVehicleDamage(vehicleid);
				GetVehiclePos(vehicleid,X,Y,Z);
				GetVehicleZAngle(vehicleid,R);
				VehicleInfo[slot][vSpawnX] = X;
				VehicleInfo[slot][vSpawnY] = Y;
				VehicleInfo[slot][vSpawnZ] = Z;
				VehicleInfo[slot][vSpawnR] = R;
				VehicleInfo[slot][vInterior] = GetPlayerInterior(playerid);
				VehicleInfo[slot][vWorld] = GetPlayerVirtualWorld(playerid);
				DestruirObjetosCarro(slot, vehicleid);
				VehicleInfo[slot][vTuned] = false;

				DestroyVehicle(VehicleInfo[slot][vVehicle]);
				VehicleInfo[slot][vVehicle] = CreateVehicle(VehicleInfo[slot][vModel],VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],VehicleInfo[slot][vSpawnR],VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2],-1);
				ArmasNoPortaMalas(slot);
				if(strlen(VehicleInfo[slot][vPlate])) { SetVehicleNumberPlate(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vPlate]); }
				StopEngine(VehicleInfo[slot][vVehicle]);
				SetVehicleParamsEx(VehicleInfo[slot][vVehicle], false, false, false, false, false, false, false);
				SetVehicleDamage(vehicleid);
				SetVehicleVirtualWorld(VehicleInfo[slot][vVehicle], VehicleInfo[slot][vWorld]);
				LinkVehicleToInterior(VehicleInfo[slot][vVehicle], VehicleInfo[slot][vInterior]);
				/*AddVehicleMods(VehicleInfo[slot][vVehicle]);*/
				SendClientMessageA(playerid,COLOR_LIGHTGREEN,"Você estacionou este veículo aqui.");
				PutPlayerInVehicle(playerid, VehicleInfo[slot][vVehicle], 0);
				SaveVehicle(slot);
			}
			if(strcmp(option, "atualizar", true) == 0)
			{
					SaveVehicleDamage(vehicleid);
					VehicleInfo[slot][vInterior] = GetPlayerInterior(playerid);
					VehicleInfo[slot][vWorld] = GetPlayerVirtualWorld(playerid);
					DestruirObjetosCarro(slot, vehicleid);
					VehicleInfo[slot][vTuned] = false;

					DestroyVehicle(VehicleInfo[slot][vVehicle]);
					VehicleInfo[slot][vVehicle] = CreateVehicle(VehicleInfo[slot][vModel],VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],VehicleInfo[slot][vSpawnR],VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2],-1);
					ArmasNoPortaMalas(slot);
					if(strlen(VehicleInfo[slot][vPlate])) { SetVehicleNumberPlate(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vPlate]); }
					StopEngine(VehicleInfo[slot][vVehicle]);
					new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(VehicleInfo[slot][vVehicle], engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(VehicleInfo[slot][vVehicle], engine, lights, alarm, doors, false, false, false);
					SetVehicleDamage(vehicleid);
					SetVehicleVirtualWorld(VehicleInfo[slot][vVehicle], VehicleInfo[slot][vWorld]);
					LinkVehicleToInterior(VehicleInfo[slot][vVehicle], VehicleInfo[slot][vInterior]);
					AddVehicleMods(VehicleInfo[slot][vVehicle],slot);
					SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você estacionou este veículo aqui.");

					new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);
					SetVehiclePos(VehicleInfo[slot][vVehicle], x, y+4, z);
					SetVehicleVirtualWorld(VehicleInfo[slot][vVehicle], GetPlayerVirtualWorld(playerid));
					LinkVehicleToInterior(VehicleInfo[slot][vVehicle], GetPlayerInterior(playerid));

					PutPlayerInVehicle(playerid, VehicleInfo[slot][vVehicle], 0);
					SaveVehicle(slot);
					return 1;
			}
			if(strcmp(option, "rmods", true) == 0)
			{
					SaveVehicleDamage(vehicleid);
					VehicleInfo[slot][vInterior] = GetPlayerInterior(playerid);
					VehicleInfo[slot][vWorld] = GetPlayerVirtualWorld(playerid);
					DestruirObjetosCarro(slot, vehicleid);
					VehicleInfo[slot][vTuned] = false;
					ClearMods(vehicleid);
					VehicleInfo[slot][vSemUso] = 3600;

					DestroyVehicle(VehicleInfo[slot][vVehicle]);
					VehicleInfo[slot][vVehicle] = CreateVehicle(VehicleInfo[slot][vModel],VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],VehicleInfo[slot][vSpawnR],VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2],-1);
					ArmasNoPortaMalas(slot);
					if(strlen(VehicleInfo[slot][vPlate])) { SetVehicleNumberPlate(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vPlate]); }
					StopEngine(VehicleInfo[slot][vVehicle]);
					new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(VehicleInfo[slot][vVehicle], engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(VehicleInfo[slot][vVehicle], engine, lights, alarm, doors, false, false, false);
					SetVehicleDamage(vehicleid);
					SetVehicleVirtualWorld(VehicleInfo[slot][vVehicle], VehicleInfo[slot][vWorld]);
					LinkVehicleToInterior(VehicleInfo[slot][vVehicle], VehicleInfo[slot][vInterior]);
					AddVehicleMods(VehicleInfo[slot][vVehicle],slot);
					SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você retirou os mods deste veículo aqui.");

					new Float:x, Float:y, Float:z;
					GetPlayerPos(playerid, x, y, z);
					SetVehiclePos(VehicleInfo[slot][vVehicle], x, y+4, z);
					SetVehicleVirtualWorld(VehicleInfo[slot][vVehicle], GetPlayerVirtualWorld(playerid));
					LinkVehicleToInterior(VehicleInfo[slot][vVehicle], GetPlayerInterior(playerid));

					PutPlayerInVehicle(playerid, VehicleInfo[slot][vVehicle], 0);
					SaveVehicle(slot);
					return 1;
			}
			if(strcmp(option, "deletar", true) == 0)
			{
			    VehicleInfo[slot][vOwner] = 0;
			   	VehicleInfo[slot][vModel] = 0;
			   	VehicleInfo[slot][vTuned] = false;

				DestroyVehicle(VehicleInfo[slot][vVehicle]);
				VehicleInfo[slot][vModel] = 0;
				VehicleInfo[slot][vVehicle] = -1;
				new str[256];
				format(str,sizeof(str),"UPDATE rp_vehicles SET truncated = 1 WHERE id = '%d'",VehicleInfo[slot][vID]);
				mysql_function_query(Pipeline, str, false, "noReturnQuery", "");

				SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você deletou este veículo. [Ele não poderá ser recuperado, a não ser por um Developer]");
			}
			//=========
		}
	}
	return 1;
}

COMMAND:tapa(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /tapa [id]");
	else
	{
	    if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Este jogador não está conectado!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando em um NPC.");
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pTester] >= 1)
		{
      		format(string, sizeof(string), "AdmCmd: Você tapeou o jogador %s.", PlayerName(targetid, 0));
      		SendClientMessage(playerid, COLOR_LIGHTRED,string);
			new Float:x,Float:y,Float:z,Float:health;
			GetPlayerHealth(targetid,health);
			GetPlayerPos(targetid,x,y,z);
      		SetPlayerPos(targetid,x,y,z+5);
      		P_Health[playerid] = health-5.0;
      		SetPlayerHealth(targetid,health-5.0);
      		GameTextForPlayer(targetid, "~r~Tapeado", 5000, 3);
      		PlayerPlaySound(targetid,1190, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

COMMAND:descongelar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	new targetid;
	if(sscanf(params, "i", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /descongelar [id]");
	else
	{
	    if(targetid == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "Este jogador não está conectado!");
	    if(TazerPlayer[targetid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando em um player que tomou taser.");
	    if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Este jogador não está conectado!");
	    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pTester] >= 1)
		{
		    format(string, sizeof(string), "AdmCmd: Você descongelou o jogador %s.", PlayerName(targetid, 0));
      		SendClientMessage(playerid, COLOR_LIGHTRED, string);
	        TogglePlayerControllable(targetid,true);
      		//GameTextForPlayer(targetid, "~w~Congelado", 5000, 3);
	    }
	}
	return 1;
}

COMMAND:congelar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /congelar [id]");
	else
	{
	    if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Este jogador não está conectado!");
	    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pTester] >= 1)
		{
		    format(string, sizeof(string), "AdmCmd: Você congelou o jogador %s.", PlayerName(targetid, 0));
      		SendClientMessage(playerid, COLOR_LIGHTRED, string);
	        TogglePlayerControllable(targetid,false);
      		//GameTextForPlayer(targetid, "~w~Congelado", 5000, 3);
	    }
	}
	return 1;
}

COMMAND:ban(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}Você deve estar conectado antes de usar algum comando.");
    new text[128],targetid;
    if(sscanf(params, "us[128]", targetid, text)) SendClientMessage(playerid, COLOR_LIGHTRED, "SINTAXE: /ban [id] [motivo/razão]");
    else
    {
        if (playerid == targetid) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode banir você mesmo.");
        if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado.");
        if(PlayerInfo[targetid][pAdmin] >= 5 && PlayerInfo[targetid][pAdmin] <= 3002) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode banir um adminsitrador de nível superior.");
        if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode banir um NPC.");
        if(strlen(text) >= 100) return SendClientMessage(playerid, COLOR_WHITE, "ERRO:{FFFFFF} O motivo do banimento é muito longo.");
        if(PlayerInfo[playerid][pAdmin] >= 1)
        {
            new stringip[28];
            format(string, sizeof(string), "AdmCmd: %s foi banido pelo administrador %s, motivo: %s.", PlayerName(targetid, 0), PlayerName(playerid, 0), text);
            SendClientMessageToAll(COLOR_LIGHTRED, string);
            format(stringip, sizeof(stringip), "IP: %s", PrintPlayerIP(targetid));
            SendAdminMessage(COLOR_LIGHTRED,stringip);
            PlayerInfo[targetid][pBanAll]++;
            Banir(stringip,GetUserName(targetid),PlayerInfo[targetid][pID], PlayerInfo[playerid][pNomeOOC],text);

            BanExtra(targetid,text,PlayerName(playerid, 0));
        }
        else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está autorizado a utilizar este comando.");
    }
    return 1;
}

stock SQL_ReturnEscaped(const str[])
{
	new
	    entry[256];

	mysql_real_escape_string(str, entry, Pipeline);
	return entry;
}

Banir(ip[], username[], id, banner[], reason[])
{
	static
	    str[256];

	format(str,sizeof(str),"INSERT INTO a_banrecord (PlayerNome,PlayerID,Data,Motivo,Admin,IP) VALUES ('%s','%d','%s','%s','%s','%s')",
		SQL_ReturnEscaped(username),
		id,
		ReturnDate(),
		SQL_ReturnEscaped(reason),
		SQL_ReturnEscaped(banner),
		SQL_ReturnEscaped(ip)
	);
	mysql_tquery(Pipeline, str);
}

ReturnDate()
{
	static
	    date[36];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(date, sizeof(date), "%02d/%02d/%d, %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return date;
}


stock PrintPlayerIP(playerid)
{
    new ip[128];
	GetPlayerIp(playerid,ip,sizeof(ip));
	return ip;
}

stock BanExtra(playerid,reason[],admin[])
{
    if(IsPlayerNPC(playerid)) return true;
	new hour,minuite,second,year,month,day,mtext[128];
	getdate(year, month, day);
	if(month == 1) { mtext = "Janeiro"; }
	else if(month == 2) { mtext = "Fevereiro"; }
	else if(month == 3) { mtext = "Março"; }
	else if(month == 4) { mtext = "Abril"; }
	else if(month == 5) { mtext = "Maio"; }
	else if(month == 6) { mtext = "Junho"; }
	else if(month == 7) { mtext = "Julho"; }
	else if(month == 8) { mtext = "Agosto"; }
	else if(month == 9) { mtext = "Setembro"; }
	else if(month == 10) { mtext = "Outubro"; }
	else if(month == 11) { mtext = "Novembro"; }
	else if(month == 12) { mtext = "Dezembro"; }
	gettime(hour,minuite,second);
    PlayerInfo[playerid][pBanido] = 1;
	Dialog_Show(playerid, ShowBan, DIALOG_STYLE_MSGBOX, "Informativo de banimento", "Lamentamos informar que sua conta foi banida do Capital Paulista Full Roleplay\n\nNome: %s\nAdministrador: %s\nMotivo: %s\nData e hora: %s\n\nCaso queira recorrer, poste seu Ban Appeal em nosso fórum.", "Fechar", "", PlayerInfo[playerid][pNomeOOC], admin, reason, ReturnDate());
	PlayerTextDrawShow(playerid, TelaLogin[playerid][0]);
	PlayerTextDrawShow(playerid, TelaLogin[playerid][1]);
	PlayerTextDrawShow(playerid, TelaLogin[playerid][3]);
	PlayerTextDrawShow(playerid, TelaLogin[playerid][4]);
	PlayerTextDrawShow(playerid, TelaLogin[playerid][5]);
	PlayerTextDrawShow(playerid, TelaLogin[playerid][6]);
	PlayerTextDrawShow(playerid, TelaLogin[playerid][7]);	
	SetTimerEx("TimerKick", 500, 0, "d", playerid);
	return 1;
}
COMMAND:trancarserver(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3002)
		return 0;

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ALERTA: Deseja trancar o servidor? /trancarserver sim para confirmar.");

	new str[128];

	if(!strcmp(params, "SIM", true))
	{

		format(str,sizeof(str),"AdmCmd: %s trancou o servidor.",ReturnName(playerid));
		SendClientMessageToAll(COLOR_LIGHTRED, str);

		SendRconCommand(CA_NOME3);

		SendRconCommand("password GMX134");
	}
	else return 0;
	return 1;
}

COMMAND:destrancarserver(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3002)
		return 0;

	if(isnull(params))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ALERTA: Deseja destrancar o servidor? /destrancarserver sim para confirmar.");

	new str[128];

	if(!strcmp(params, "SIM", true))
	{

		format(str,sizeof(str),"AdmCmd: %s destrancou o servidor.",ReturnName(playerid));
		SendClientMessageToAll(COLOR_LIGHTRED, str);

		SendRconCommand(CA_NOME);

		SendRconCommand("password");
	}
	else return 0;
	return 1;
}

COMMAND:kick(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}Você deve estar conectado antes de usar algum comando.");
	new text[128],targetid;
	if(sscanf(params, "us[128]", targetid, text)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} /kick [id] [motivo/razão]");
	else
	{
	    if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Este jogador não está conectado!");
	    if(IsPlayerNPC(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode kickar um NPC.");
	    if(PlayerInfo[targetid][pAdmin] >= 5 && PlayerInfo[targetid][pAdmin] <= 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode kickar um Head Staff.");
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
      		format(string, sizeof(string), "AdmCmd: %s foi kickado por %s, Motivo: %s.", PlayerName(targetid, 0), PlayerName(playerid, 0), text);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			format(string, sizeof(string), "[!]Você foi kickado do servidor pelo motivo: %s", text);
			SendClientMessage(targetid, COLOR_LIGHTRED, string);
			PlayerInfo[targetid][pKickAll]++;
			SetTimerEx("TimerKick", 1000, 0, "d", targetid);

			new hour, mins, sec;
			new d,m,y;
			new DataSalvar[32];
			getdate(y,m,d);
			gettime(hour,mins,sec);

	        new strh[24], hourstr[4], minstr[4], secstr[4];

			if(hour < 10) { format(hourstr,sizeof(hourstr),"0%d",hour); } else { format(hourstr,sizeof(hourstr),"%d",hour); }
			if(mins < 10) { format(minstr,sizeof(minstr),"0%d",mins); } else { format(minstr,sizeof(minstr),"%d",mins); }
			if(sec < 10) { format(secstr,sizeof(secstr),"0%d",sec); } else { format(secstr,sizeof(secstr),"%d",sec); }
			format(strh,sizeof(strh),"%s:%s:%s",hourstr,minstr,secstr);
			format(DataSalvar,sizeof(DataSalvar),"%d-%d-%d - %s",d,m,y,strh);

			new stringip[28];
			format(stringip, sizeof(stringip), "IP: %s", PrintPlayerIP(targetid));

			new str2[256];
			format(str2,sizeof(str2),"INSERT INTO a_kickrec (PlayerNome,PlayerID,Data,Motivo,Admin,IP) VALUES ('%s','%d','%s','%s','%s','%s')",PlayerName(targetid,0),PlayerInfo[targetid][pID],DataSalvar,text,PlayerName(playerid,0),stringip);
    		mysql_function_query(Pipeline, str2, false, "noReturnQuery", "");
		}
		else if(PlayerInfo[playerid][pTester] > 0)
		{
		    if(PlayerInfo[targetid][pAdmin] >= 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode kickar um administrador.");

      		format(string, sizeof(string), "AdmCmd: %s foi kickado por %s, Motivo: %s.", PlayerName(targetid, 0), PlayerName(playerid, 0), text);
			SendClientMessageToAll(COLOR_LIGHTRED, string);
			//SendAdminMessage(0xFF0000FF,string);
			format(string, sizeof(string), "[!]Você foi kickado do servidor pelo motivo: %s", text);

			SendClientMessage(targetid, COLOR_LIGHTRED, string);
			PlayerInfo[targetid][pKickAll]++;
			SetTimerEx("TimerKick", 1000, 0, "d", targetid);

			new hour, mins, sec;
			new d,m,y;
			new DataSalvar[32];
			getdate(y,m,d);
			gettime(hour,mins,sec);

	        new strh[24], hourstr[4], minstr[4], secstr[4];

			if(hour < 10) { format(hourstr,sizeof(hourstr),"0%d",hour); } else { format(hourstr,sizeof(hourstr),"%d",hour); }
			if(mins < 10) { format(minstr,sizeof(minstr),"0%d",mins); } else { format(minstr,sizeof(minstr),"%d",mins); }
			if(sec < 10) { format(secstr,sizeof(secstr),"0%d",sec); } else { format(secstr,sizeof(secstr),"%d",sec); }
			format(strh,sizeof(strh),"%s:%s:%s",hourstr,minstr,secstr);
			format(DataSalvar,sizeof(DataSalvar),"%d-%d-%d - %s",d,m,y,strh);

			new stringip[28];
			format(stringip, sizeof(stringip), "IP: %s", PrintPlayerIP(targetid));

			new str2[256];
			format(str2,sizeof(str2),"INSERT INTO a_kickrec (PlayerNome,PlayerID,Data,Motivo,Admin,IP) VALUES ('%s','%d','%s','%s','%s','%s')",PlayerName(targetid,0),PlayerInfo[targetid][pID],DataSalvar,text,PlayerName(playerid,0),stringip);
    		mysql_function_query(Pipeline, str2, false, "noReturnQuery", "");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não possui acesso a este comando!");
		}
	}
	return 1;
}

forward TimerKick(targetid);
public TimerKick(targetid)
{
    Kick(targetid);
    return 1;
}

CMD:areparar(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
    if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
	if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    new type;
	if(sscanf(params, "i", type)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} /areparar [id do motorista]");
	else
	{
	    if(!IsPlayerInAnyVehicle(type)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player não está em um veículo.");
		new veh = GetPlayerVehicleID(type);
	    new slot = GetVehicleSlot(veh);
     	if(slot > -1)
     	{
     	    RepairVehicleEx(veh);
     	}
     	else
     	{
     	    RepairVehicle(veh);
		}
		new admnome[24];
		if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
		else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

		format(string, sizeof(string), "AdmCmd: O Administrador %s consertou o veículo de %s [%d].", admnome, PlayerName(type, 0), type);
		SendAdminMessage(COLOR_LIGHTRED,string);
	}
	return 1;
}

CMD:areparartodos(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] < 2) return 1;
    if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
	if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");

	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
		if(VehicleInfo[i][vModel] > 0)
		{
			RepairVehicleEx(VehicleInfo[i][vVehicle]);
		}
 	}
	new admnome[24];
	if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
	else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

	format(string, sizeof(string), "AdmCmd: O Administrador %s consertou todos veículos do servidor.", admnome);
	SendAdminMessage(COLOR_LIGHTRED,string);

	return 1;
}

CMD:mandarls(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] < 1  && PlayerInfo[playerid][pTester] < 1) return 1;
    if((!OutrasInfos[playerid][oAdminOnDuty] && !OutrasInfos[playerid][oTesterOnDuty]) && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
    new type;
	if(sscanf(params, "i", type)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /mandarls [playerid]");
	else
	{
	    new admnome[24];
		if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
		else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

	    if(PlayerInfo[type][pPrisao] == 10)
		{
		    format(string, sizeof(string), "AVISO: Você está na prisão administrativa por %d minuto(s)", PlayerInfo[type][pTemPreso]);
			SendClientMessage(type, COLOR_LIGHTRED, string);

            TogglePlayerControllable(type, 0);
    		SetPlayerInterior(type, 0);
     		SetPlayerVirtualWorld(type, type);
      		PlayerInfo[type][pEntrouEmpresa] = -1;
   			PlayerInfo[type][pEntrouCasa] = -1;
    		PlayerInfo[type][pEntrouComplexo] = -1;
    		PlayerInfo[type][pEntrouGaragem] = -1;
	    	EntrouInt[type] = -1;

    		SetPlayerPos(type,1543.5889,-1669.9229,13.5567);

    		if(PlayerInfo[playerid][pAdmin] > 0) format(string, sizeof(string), "{FF6347}AdmCmd: O Administrador %s mandou %s [%d] para a cadeia administrativa.", admnome, PlayerName(type, 0), type);
		    else format(string, sizeof(string), "AdmCmd: O Tester %s[%d] mandou %s para a cadeia administrativa.", PlayerName(playerid, 0), playerid, PlayerName(type, 0), type);
			SendAdminMessage(COLOR_LIGHTRED,string);

		    CaindoInt[type] = 0;
		    CaindoInt_Av[type] = 0;

		    if(ouvindoxmradio[type] > 0)
		 	{
		        StopAudioStreamForPlayer(type);
				ouvindoxmradio[type] = 0;
				ouvindoxmradioID[type] = 0;
			}
    		return 1;
		}
	    else if(PlayerInfo[type][pPrisao] == 1)
		{
			format(string, sizeof(string), "AVISO: Você está na prisão por %d minuto(s)", PlayerInfo[type][pTemPreso]);
			SendClientMessage(type, COLOR_LIGHTRED, string);
			SetPlayerPos(type, 1393.3003,-14.5012,1001.0156);

			SetPlayerVirtualWorld(type, 0);

			PlayerInfo[type][pEntrouEmpresa] = -1;
   			PlayerInfo[type][pEntrouCasa] = -1;
    		PlayerInfo[type][pEntrouComplexo] = 52;
    		PlayerInfo[type][pEntrouGaragem] = -1;

    		if(PlayerInfo[playerid][pAdmin] > 0) format(string, sizeof(string), "{FF6347}AdmCmd: O Administrador %s mandou %s [%d] para a cadeia local.", admnome, PlayerName(type, 0), type);
		    else format(string, sizeof(string), "AdmCmd: O Tester %s[%d] mandou %s[%d] para a cadeia local.", PlayerName(playerid, 0), playerid, PlayerName(type, 0), type);
			SendAdminMessage(COLOR_LIGHTRED,string);

    		TogglePlayerControllable(type, 1);
		    CaindoInt[type] = 0;
		    CaindoInt_Av[type] = 0;

		    if(ouvindoxmradio[type] > 0)
		 	{
		        StopAudioStreamForPlayer(type);
				ouvindoxmradio[type] = 0;
				ouvindoxmradioID[type] = 0;
			}
			return 1;
		}
		else if(PlayerInfo[playerid][pTempoMorto] > 0)
  		{
    		if (IsValidDynamic3DTextLabel(TextMorto[playerid])) DestroyDynamic3DTextLabel(TextMorto[playerid]);
			TempoDesistir[playerid] = 0;
	        PlayerInfo[playerid][pMorto] = 3;
			TextDrawHideForPlayer(playerid,Telinha);
			SetPlayerHealth(playerid,50);
			P_Health[playerid] = 50;
			God_VidaAnterior2[playerid] = 50;
			God_Aviso2[playerid] = 0;
	  		TogglePlayerControllable(playerid,0);
	        PlayerInfo[playerid][pMancando] = 0;

	    	SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);

			SetPlayerPos(playerid,1741.3394, -1875.1597, 13.5859);
			SetPlayerCameraPos(playerid, 1261.9004, -1423.1548, 28.3268);
			SetPlayerCameraLookAt(playerid, 1261.2498, -1422.3973, 28.2017);

            new temporestante = (PlayerInfo[playerid][pTempoMorto]-gettime());
			format(string, sizeof(string), "Você está sendo tratado, aguarde %d segundos. (Use /tempomorto para ver o tempo restante)", temporestante);
			SendClientMessage(playerid,COLOR_LIGHTRED,string);
		}
		else
		{
			PlayerInfo[type][pEntrouCasa] = -1;
		    PlayerInfo[type][pEntrouEmpresa] = -1;
		    PlayerInfo[type][pEntrouComplexo] = -1;
		    PlayerInfo[type][pEntrouGaragem] = -1;

		    SetPlayerInterior(type, 0);
		    SetPlayerVirtualWorld(type, 0);

		    SetPlayerPos(type, 1743.1464,-1859.5961,13.4141);

		    TogglePlayerControllable(type, 1);

		    if(PlayerInfo[playerid][pAdmin] > 0) format(string, sizeof(string), "{FF6347}AdmCmd: O Administrador %s mandou %s [%d] para Los Santos.", admnome, PlayerName(type, 0), type);
		    else format(string, sizeof(string), "AdmCmd: O Tester %s[%d] mandou %s[%d] para Los Santos.", PlayerName(playerid, 0), playerid, PlayerName(type, 0), type);
			SendAdminMessage(COLOR_LIGHTRED,string);

			if(ouvindoxmradio[type] > 0)
		 	{
		        StopAudioStreamForPlayer(type);
				ouvindoxmradio[type] = 0;
				ouvindoxmradioID[type] = 0;
			}

			new strl[126];
			format(strl, 126, "%s mandou o jogador %s para Los Santos. [/mandarls]", PlayerName(playerid, 0), PlayerName(type, 0));
			LogCMD_A(playerid, strl);
		}
	}
	return 1;
}

COMMAND:jetpack(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] >= 1)
    {
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);

	}
	return 1;
}

COMMAND:amancar22(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] >= 5)
    {
        //if(adebug[playerid] == 0) adebug[playerid] = 1;
		//if(adebug[playerid] == 1) adebug[playerid] = 0;

		if(PlayerInfo[playerid][pMancando] == 0)
		{
			PlayerInfo[playerid][pMancando] = 1;
			SendClientMessage(playerid, COLOR_LIGHTRED, "[!] Vai mancar, isso mesmo, manque como todos os outros.");
		}
		else if(PlayerInfo[playerid][pMancando] == 1)
		{
			PlayerInfo[playerid][pMancando] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "[!] Não vai mancar, safado! pare, seja justo com os outros jogadores");
			SendClientMessage(playerid, COLOR_LIGHTRED, "AdmCmd: Você foi banido por abusar do comando de mancar.");
			SendClientMessage(playerid, 0xadc3e7ff, "Server closed the connection.");
		}

		new strl[126];
		format(strl, 126, "%s alterou seu estado de manco. [/amancar]", PlayerName(playerid, 0));
		LogCMD_A(playerid, strl);
	}
	return 1;
}

forward SendBankErrorMessage(playerid);
public SendBankErrorMessage(playerid){
    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não foi possível fazer essa transição.");
    ToASave(playerid)=SaveTheSys;
    return 1;
}

CMD:tratar(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(IsPlayerInRangeOfPoint(playerid, 20, 174.4834,2784.5520,767.7469))
	{
        if (IsValidDynamic3DTextLabel(TextMorto[playerid])) DestroyDynamic3DTextLabel(TextMorto[playerid]);
		TempoDesistir[playerid] = 0;
        PlayerInfo[playerid][pMorto] = 3;
		TextDrawHideForPlayer(playerid,Telinha);
        PlayerInfo[playerid][pMancando] = 0;

		SendClientMessage(playerid,COLOR_LIGHTRED,"Você está sendo tratado, aguarde, para ver o tempo restate utilize /tempomorto.");
  		//PlayerInfo[playerid][pHealth] = 50;
		SetPlayerHealth(playerid,50);
		P_Health[playerid] = 50;
		God_VidaAnterior2[playerid] = 50;
		God_Aviso2[playerid] = 0;
  		TogglePlayerControllable(playerid,0);

		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);

    	SetPlayerPos(playerid,1162.5776, -1344.0281, 13.2223);
		SetPlayerCameraPos(playerid, 1261.9004, -1423.1548, 28.3268);
		SetPlayerCameraLookAt(playerid, 1261.2498, -1422.3973, 28.2017);

        PlayerInfo[playerid][pTomouAlgumTiro] = 0;

        PlayerInfo[playerid][pTempoMorto] = gettime()+180;

		new Int = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pInterior] = Int;
		PlayerInfo[playerid][pWorld] = 0;

	    if(PlayerInfo[playerid][pDrogaTime] > 0)
		{
			PlayerInfo[playerid][pMenosDanoTiro] = 0.0;
			PlayerInfo[playerid][pDrogaTime] = 0;
			//SetPlayerWeather(playerid, WeatherGlobal);
			PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro];
			RemoverVidaMaxDrug(playerid);

			PlayerInfo[playerid][pUsouDroga] = 0;
		}

	    new ArmasInv = 0;

	    if(PlayerInfo[playerid][pSlot1] != 0)
		{
		    switch(ArmaData[PlayerInfo[playerid][pSlot1]][ArmaModelo])
		    {
				case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
				{
				    ArmaData[PlayerInfo[playerid][pSlot1]][ArmaCor] = 1;
		        	ArmaData[PlayerInfo[playerid][pSlot1]][ArmaCom] = 0;

					PlayerInfo[playerid][pSlot1] = 0;
					PlayerInfo[playerid][pSlot1a] = 0;
					ArmasInv++;
				}
			}
		}
		if(PlayerInfo[playerid][pSlot2] != 0)
		{
			switch(ArmaData[PlayerInfo[playerid][pSlot2]][ArmaModelo])
		    {
				case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
				{
				    ArmaData[PlayerInfo[playerid][pSlot2]][ArmaCor] = 1;
		        	ArmaData[PlayerInfo[playerid][pSlot2]][ArmaCom] = 0;

					PlayerInfo[playerid][pSlot2] = 0;
					PlayerInfo[playerid][pSlot2a] = 0;
					ArmasInv++;
				}
			}
		}
		if(PlayerInfo[playerid][pSlot3] != 0)
		{
		    switch(ArmaData[PlayerInfo[playerid][pSlot3]][ArmaModelo])
		    {
				case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
				{
				    ArmaData[PlayerInfo[playerid][pSlot3]][ArmaCor] = 1;
		        	ArmaData[PlayerInfo[playerid][pSlot3]][ArmaCom] = 0;

					PlayerInfo[playerid][pSlot3] = 0;
					PlayerInfo[playerid][pSlot3a] = 0;
					ArmasInv++;
				}
			}
		}
		if(PlayerInfo[playerid][pSlot4] != 0)
		{
		    switch(ArmaData[PlayerInfo[playerid][pSlot4]][ArmaModelo])
		    {
				case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
				{
				    ArmaData[PlayerInfo[playerid][pSlot4]][ArmaCor] = 1;
		        	ArmaData[PlayerInfo[playerid][pSlot4]][ArmaCom] = 0;

					PlayerInfo[playerid][pSlot4] = 0;
					PlayerInfo[playerid][pSlot4a] = 0;
					ArmasInv++;
				}
			}
		}
		if(PlayerInfo[playerid][pSlot5] != 0)
		{
		    switch(ArmaData[PlayerInfo[playerid][pSlot5]][ArmaModelo])
		    {
				case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
				{
				    ArmaData[PlayerInfo[playerid][pSlot5]][ArmaCor] = 1;
		        	ArmaData[PlayerInfo[playerid][pSlot5]][ArmaCom] = 0;

					PlayerInfo[playerid][pSlot5] = 0;
					PlayerInfo[playerid][pSlot5a] = 0;
					ArmasInv++;
				}
			}
		}
		if(PlayerInfo[playerid][pColde] > 0)
		{
		    switch(ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo])
		    {
				case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
				{
				    ArmaData[PlayerInfo[playerid][pColde]][ArmaCor] = 1;
		        	ArmaData[PlayerInfo[playerid][pColde]][ArmaCom] = 0;

		        	RemovePlayerAttachedObject(playerid, 2);

					PlayerInfo[playerid][pColde] = 0;
					PlayerInfo[playerid][pColdreA] = 0;
					ArmasInv++;
				}
			}
		}
		if(PlayerInfo[playerid][pArmaMao] > 0)
		{
		    ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaCor] = 1;
     		ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaCom] = 0;

		    DesarmandoPlayer[playerid] = 2;
			ResetPlayerWeapons(playerid);
			PlayerInfo[playerid][pArmaMao] = 0;
			RemovePlayerAttachedObject(playerid, 0);
			ArmasInv++;
		}
		if(ArmasInv > 0) SendClientMessage(playerid,COLOR_LIGHTRED,"[!] As suas armas do inventário foram removidas pelos médicos.");


        if(PlayerInfo[playerid][pMun9mm] > 0 || PlayerInfo[playerid][pMunCart] > 0 || PlayerInfo[playerid][pMun556] > 0 || PlayerInfo[playerid][pMun127] > 0)
        {
            PlayerInfo[playerid][pMun9mm] = 0;
			PlayerInfo[playerid][pMunCart] = 0;
			PlayerInfo[playerid][pMun556] = 0;
			PlayerInfo[playerid][pMun127] = 0;
			SendClientMessage(playerid,COLOR_LIGHTRED,"[!] As suas munições do inventário foram removidas pelos médicos.");
        }

		if(PlayerDroga[playerid][MaconhaR] > 0 || PlayerDroga[playerid][MaconhaB] > 0 || PlayerDroga[playerid][MaconhaE] > 0 ||
		PlayerDroga[playerid][CocaR] > 0 || PlayerDroga[playerid][CocaB] > 0 || PlayerDroga[playerid][CocaE] > 0 ||
		PlayerDroga[playerid][CrackR] > 0 || PlayerDroga[playerid][CrackB] > 0 || PlayerDroga[playerid][CrackE] > 0 ||
		PlayerDroga[playerid][LSDR] > 0 || PlayerDroga[playerid][LSDB] > 0 || PlayerDroga[playerid][LSDE] > 0 ||
		PlayerDroga[playerid][MetR] > 0 || PlayerDroga[playerid][MetB] > 0 || PlayerDroga[playerid][MetE] > 0 ||
		PlayerDroga[playerid][LancaPer] > 0 || PlayerDroga[playerid][PBC] > 0 || PlayerDroga[playerid][BZC] > 0 ||
		PlayerDroga[playerid][LDC] > 0 || PlayerDroga[playerid][HDZ] > 0 || PlayerDroga[playerid][PBC] > 0 ||
		PlayerDroga[playerid][Efedrina] > 0 || PlayerDroga[playerid][Acloridrico] > 0 ||
		PlayerDroga[playerid][Sementes]) SendClientMessage(playerid,COLOR_LIGHTRED,"[!] As suas drogas do inventário foram removidas pelos médicos.");

	    ResetPlayerDrugs(playerid);
    }
    else
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Você não está no hospital.");
    }
	return 1;
}

CMD:deixarferido(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    //new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    //if(FacInfo[FacId][fTipo] == FAC_TIPO_CBERJ)
    //{

    if(!IsPlayerInRangeOfPoint(playerid, 30, 2043.6692,-1383.1019,17.1479)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está na entrada do Hospital.");

	new idpl;
 	if(sscanf(params, "d", idpl)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /deixarferido [id]");
	else
	{
	    if(GetPlayerVehicleID(idpl) == GetPlayerVehicleID(playerid))
	    {
		    if(GetDistanceBetweenPlayers(playerid,idpl) < 7.5)
	        {
			    if(playerid == idpl) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode se deixar.");
			    if(PlayerInfo[idpl][pMorto] <= 0)
			    {
                    if (IsValidDynamic3DTextLabel(TextMorto[idpl])) DestroyDynamic3DTextLabel(TextMorto[idpl]);

			    	TempoDesistir[idpl] = 0;
			        PlayerInfo[idpl][pMorto] = 3;
					TextDrawHideForPlayer(idpl,Telinha);

			  		//PlayerInfo[idpl][pHealth] = 50;
					SetPlayerHealth(idpl,50);
					P_Health[idpl] = 50;
					God_VidaAnterior2[idpl] = 50;
					God_Aviso2[idpl] = 0;
			  		TogglePlayerControllable(idpl,0);
			        PlayerInfo[idpl][pMancando] = 0;

					format(string,sizeof(string),"(( %s entrou no hospital para se tratar. ))", PlayerName(idpl,1));
					ProxDetector(10.0, idpl, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new armaid = PlayerInfo[idpl][pArmaMao];
					new Int = GetPlayerInterior(idpl);
					PlayerInfo[idpl][pInterior] = Int;
					new World = GetPlayerVirtualWorld(idpl);
					PlayerInfo[idpl][pWorld] = 0;

				    if(PlayerInfo[idpl][pDrogaTime] > 0)
					{
						PlayerInfo[idpl][pMenosDanoTiro] = 0.0;
						PlayerInfo[idpl][pDrogaTime] = 0;
						//SetPlayerWeather(idpl, WeatherGlobal);
						PlayerInfo[idpl][pTremorAtirar] = PlayerInfo[idpl][pSkillTiro];
						SendClientMessage(idpl,-1,"[!] O efeito das drogas passou.");

						RemoverVidaMaxDrug(idpl);

						PlayerInfo[idpl][pUsouDroga] = 0;
					}

				    new ArmasInv = 0;

				    if(PlayerInfo[idpl][pSlot1] != 0)
					{
					    switch(ArmaData[PlayerInfo[idpl][pSlot1]][ArmaModelo])
					    {
							case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
							{
							    ArmaData[PlayerInfo[idpl][pSlot1]][ArmaCor] = 1;
					        	ArmaData[PlayerInfo[idpl][pSlot1]][ArmaCom] = 0;

								PlayerInfo[idpl][pSlot1] = 0;
								PlayerInfo[idpl][pSlot1a] = 0;
								ArmasInv++;
							}
						}
					}
					if(PlayerInfo[idpl][pSlot2] != 0)
					{
						switch(ArmaData[PlayerInfo[idpl][pSlot2]][ArmaModelo])
					    {
							case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
							{
							    ArmaData[PlayerInfo[idpl][pSlot2]][ArmaCor] = 1;
					        	ArmaData[PlayerInfo[idpl][pSlot2]][ArmaCom] = 0;

								PlayerInfo[idpl][pSlot2] = 0;
								PlayerInfo[idpl][pSlot2a] = 0;
								ArmasInv++;
							}
						}
					}
					if(PlayerInfo[idpl][pSlot3] != 0)
					{
					    switch(ArmaData[PlayerInfo[idpl][pSlot3]][ArmaModelo])
					    {
							case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
							{
							    ArmaData[PlayerInfo[idpl][pSlot3]][ArmaCor] = 1;
					        	ArmaData[PlayerInfo[idpl][pSlot3]][ArmaCom] = 0;

								PlayerInfo[idpl][pSlot3] = 0;
								PlayerInfo[idpl][pSlot3a] = 0;
								ArmasInv++;
							}
						}
					}
					if(PlayerInfo[idpl][pSlot4] != 0)
					{
					    switch(ArmaData[PlayerInfo[idpl][pSlot4]][ArmaModelo])
					    {
							case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
							{
							    ArmaData[PlayerInfo[idpl][pSlot4]][ArmaCor] = 1;
					        	ArmaData[PlayerInfo[idpl][pSlot4]][ArmaCom] = 0;

								PlayerInfo[idpl][pSlot4] = 0;
								PlayerInfo[idpl][pSlot4a] = 0;
								ArmasInv++;
							}
						}
					}
					if(PlayerInfo[idpl][pSlot5] != 0)
					{
					    switch(ArmaData[PlayerInfo[idpl][pSlot5]][ArmaModelo])
					    {
							case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
							{
							    ArmaData[PlayerInfo[idpl][pSlot5]][ArmaCor] = 1;
					        	ArmaData[PlayerInfo[idpl][pSlot5]][ArmaCom] = 0;

								PlayerInfo[idpl][pSlot5] = 0;
								PlayerInfo[idpl][pSlot5a] = 0;
								ArmasInv++;
							}
						}
					}
					if(PlayerInfo[idpl][pColde] > 0)
					{
					    switch(ArmaData[PlayerInfo[idpl][pColde]][ArmaModelo])
					    {
							case 22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40:
							{
							    ArmaData[PlayerInfo[idpl][pColde]][ArmaCor] = 1;
					        	ArmaData[PlayerInfo[idpl][pColde]][ArmaCom] = 0;

					        	RemovePlayerAttachedObject(idpl, 2);

								PlayerInfo[idpl][pColde] = 0;
								PlayerInfo[idpl][pColdreA] = 0;
								ArmasInv++;
							}
						}
					}
					if(ArmasInv > 0) SendClientMessage(idpl,COLOR_LIGHTRED,"[!] As suas armas do inventário foram removidas pelos médicos.");

				    if(PlayerInfo[idpl][pMun9mm] > 0 || PlayerInfo[idpl][pMunCart] > 0 || PlayerInfo[idpl][pMun556] > 0 || PlayerInfo[idpl][pMun127] > 0)
			        {
			            PlayerInfo[idpl][pMun9mm] = 0;
						PlayerInfo[idpl][pMunCart] = 0;
						PlayerInfo[idpl][pMun556] = 0;
						PlayerInfo[idpl][pMun127] = 0;
						SendClientMessage(idpl,COLOR_LIGHTRED,"[!] As suas munições do inventário foram removidas pelos médicos.");
			        }

				    if(PlayerDroga[idpl][MaconhaR] > 0 || PlayerDroga[idpl][MaconhaB] > 0 || PlayerDroga[idpl][MaconhaE] > 0 ||
				    PlayerDroga[idpl][CocaR] > 0 || PlayerDroga[idpl][CocaB] > 0 || PlayerDroga[idpl][CocaE] > 0 ||
				    PlayerDroga[idpl][CrackR] > 0 || PlayerDroga[idpl][CrackB] > 0 || PlayerDroga[idpl][CrackE] > 0 ||
					PlayerDroga[idpl][LSDR] > 0 || PlayerDroga[idpl][LSDB] > 0 || PlayerDroga[idpl][LSDE] > 0 ||
					PlayerDroga[idpl][MetR] > 0 || PlayerDroga[idpl][MetB] > 0 || PlayerDroga[idpl][MetE] > 0 ||
					PlayerDroga[idpl][LancaPer] > 0 || PlayerDroga[idpl][PBC] > 0 || PlayerDroga[idpl][BZC] > 0 ||
					PlayerDroga[idpl][LDC] > 0 || PlayerDroga[idpl][HDZ] > 0 || PlayerDroga[idpl][PBC] > 0 ||
					PlayerDroga[idpl][Efedrina] > 0 || PlayerDroga[idpl][Acloridrico] > 0 ||
					PlayerDroga[idpl][Sementes]) SendClientMessage(idpl,COLOR_LIGHTRED,"[-] As suas drogas do inventário foram removidas pelos médicos.");

				    ResetPlayerDrugs(idpl);

					if(armaid != 0)
					{
						//========================================
					    DesarmandoPlayer[idpl] = 2;
						ResetPlayerWeapons(idpl);
						PlayerInfo[idpl][pArmaMao] = 0;
						RemovePlayerAttachedObject(idpl, 0);
						//======================================
						if(FacInfo[PlayerInfo[idpl][pFac]][fTipo] != FAC_TIPO_PMERJ)
						{
							RemovePlayerAttachedObject(idpl, 0);
							ArmaData[armaid][ArmaInt] = Int;
							ArmaData[armaid][ArmaWorld] = World;
							//ArmaData[armaid][ArmaAmmo] = GunAmmo;
							ArmaData[armaid][ArmaNoChao] = 1;
							ArmaData[armaid][ArmaEditando] = 0;
							ArmaData[armaid][ArmaCom] = 0;
							GetPlayerPos(idpl, ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]);
							ArmaData[armaid][ArmaRX] = 93.7;
							ArmaData[armaid][ArmaRY] = 120.0;
							ArmaData[armaid][ArmaRZ] = 120.0;
							ArmaData[armaid][ArmaZ] = ArmaData[armaid][ArmaZ]-1;
							//ArmaData[armaid][ArmaObj] = CreateDynamicObject(GunObjects[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]-1, 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);

				            if(ArmaData[armaid][ArmaExtra] == 1) ArmaData[armaid][ArmaObj] = CreateDynamicObject(2045, ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ], 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);
				        	else ArmaData[armaid][ArmaObj] = CreateDynamicObject(GunObjects[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]-1, 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);

							SalvarArma(armaid);
						}
						if(FacInfo[PlayerInfo[idpl][pFac]][fTipo] != FAC_TIPO_PCERJ)
						{
							RemovePlayerAttachedObject(idpl, 0);
							ArmaData[armaid][ArmaInt] = Int;
							ArmaData[armaid][ArmaWorld] = World;
							//ArmaData[armaid][ArmaAmmo] = GunAmmo;
							ArmaData[armaid][ArmaNoChao] = 1;
							ArmaData[armaid][ArmaEditando] = 0;
							ArmaData[armaid][ArmaCom] = 0;
							GetPlayerPos(idpl, ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]);
							ArmaData[armaid][ArmaRX] = 93.7;
							ArmaData[armaid][ArmaRY] = 120.0;
							ArmaData[armaid][ArmaRZ] = 120.0;
							ArmaData[armaid][ArmaZ] = ArmaData[armaid][ArmaZ]-1;
							//ArmaData[armaid][ArmaObj] = CreateDynamicObject(GunObjects[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]-1, 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);

				            if(ArmaData[armaid][ArmaExtra] == 1) ArmaData[armaid][ArmaObj] = CreateDynamicObject(2045, ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ], 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);
				        	else ArmaData[armaid][ArmaObj] = CreateDynamicObject(GunObjects[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]-1, 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);

							SalvarArma(armaid);
						}
						if(FacInfo[PlayerInfo[idpl][pFac]][fTipo] != FAC_TIPO_EB)
						{
							RemovePlayerAttachedObject(idpl, 0);
							ArmaData[armaid][ArmaInt] = Int;
							ArmaData[armaid][ArmaWorld] = World;
							//ArmaData[armaid][ArmaAmmo] = GunAmmo;
							ArmaData[armaid][ArmaNoChao] = 1;
							ArmaData[armaid][ArmaEditando] = 0;
							ArmaData[armaid][ArmaCom] = 0;
							GetPlayerPos(idpl, ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]);
							ArmaData[armaid][ArmaRX] = 93.7;
							ArmaData[armaid][ArmaRY] = 120.0;
							ArmaData[armaid][ArmaRZ] = 120.0;
							ArmaData[armaid][ArmaZ] = ArmaData[armaid][ArmaZ]-1;
							//ArmaData[armaid][ArmaObj] = CreateDynamicObject(GunObjects[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]-1, 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);

				            if(ArmaData[armaid][ArmaExtra] == 1) ArmaData[armaid][ArmaObj] = CreateDynamicObject(2045, ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ], 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);
				        	else ArmaData[armaid][ArmaObj] = CreateDynamicObject(GunObjects[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]-1, 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);

							SalvarArma(armaid);
						}
						if(FacInfo[PlayerInfo[idpl][pFac]][fTipo] != FAC_TIPO_BANK)
						{
							RemovePlayerAttachedObject(idpl, 0);
							ArmaData[armaid][ArmaInt] = Int;
							ArmaData[armaid][ArmaWorld] = World;
							//ArmaData[armaid][ArmaAmmo] = GunAmmo;
							ArmaData[armaid][ArmaNoChao] = 1;
							ArmaData[armaid][ArmaEditando] = 0;
							ArmaData[armaid][ArmaCom] = 0;
							GetPlayerPos(idpl, ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]);
							ArmaData[armaid][ArmaRX] = 93.7;
							ArmaData[armaid][ArmaRY] = 120.0;
							ArmaData[armaid][ArmaRZ] = 120.0;
							ArmaData[armaid][ArmaZ] = ArmaData[armaid][ArmaZ]-1;
							//ArmaData[armaid][ArmaObj] = CreateDynamicObject(GunObjects[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]-1, 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);

				            if(ArmaData[armaid][ArmaExtra] == 1) ArmaData[armaid][ArmaObj] = CreateDynamicObject(2045, ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ], 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);
				        	else ArmaData[armaid][ArmaObj] = CreateDynamicObject(GunObjects[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ]-1, 93.7, 120.0, 120.0,ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);

							SalvarArma(armaid);
						}
				    }

				    if(PlayerInfo[idpl][pPrisao] == 1)
					{
						format(string, sizeof(string), "AVISO: Você está na prisão por %d minuto(s)", PlayerInfo[idpl][pTemPreso]);
						SendClientMessage(idpl, COLOR_LIGHTRED, string);
						SetPlayerPos(idpl, 1393.3003,-14.5012,1001.0156);

						SetPlayerVirtualWorld(idpl, 1052);

						PlayerInfo[idpl][pEntrouEmpresa] = -1;
				   		PlayerInfo[idpl][pEntrouCasa] = -1;
				   		PlayerInfo[idpl][pEntrouGaragem] = -1;
				    	PlayerInfo[idpl][pEntrouComplexo] = -1;

				    	TogglePlayerControllable(idpl, 1);
						CaindoInt[idpl] = 0;
				   		CaindoInt_Av[idpl] = 0;
					}
					else
					{
					    SetPlayerInterior(idpl,0);
						SetPlayerVirtualWorld(idpl,0);

						SetPlayerPos(idpl,1162.5776, -1344.0281, 13.2223);
						SetPlayerCameraPos(idpl, 1261.9004, -1423.1548, 28.3268);
						SetPlayerCameraLookAt(idpl, 1261.2498, -1422.3973, 28.2017);

			   			new tempomorto;

						if(PlayerInfo[idpl][pDoador] > 1) tempomorto = 60;
                        if(PlayerInfo[idpl][pConvenio] > 1) tempomorto = 400;
			 			else tempomorto = 800;

						PlayerInfo[idpl][pTempoMorto] = gettime()+tempomorto;

						new temporestante = (PlayerInfo[idpl][pTempoMorto]-gettime());

						format(string, sizeof(string), "Você está sendo tratado, aguarde %d segundos. (Use /tempomorto para ver o tempo restante)", temporestante);
						SendClientMessage(idpl,COLOR_LIGHTRED,string);

						format(string, sizeof(string), "Você deixou %s no hospital.", PlayerName(idpl,1));
						SendClientMessage(playerid,COLOR_LIGHTRED,string);
					}
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player não precisa de tratamento.");
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar conectado antes de usar algum comando.");
        }
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está no mesmo veículo que este player.");
    }
	//}
	return 1;
}

COMMAND:namechange(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}Você deve estar conectado antes de usar algum comando.");
	if(PlayerInfo[playerid][pMascaraU] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode trocar de nome em quanto usa uma mascara.");
	if(PlayerInfo[playerid][pChangeNames] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhum changename.");
	new type[24], ChangeStr[124];
	if(sscanf(params, "s[24]", type))
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
	    SendClientMessage(playerid, COLOR_WHITE, "*** NAMECHANGE ***");
	    format(string, 256, "USE: /namechange [Nome_Sobrenome] (Você tem %d Namechanges disponiveis)", PlayerInfo[playerid][pChangeNames]);
	   	SendClientMessage(playerid, COLOR_CINZA, string);
   		SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
	}
	else
	{
	    if(NameIsRP(type))
		{
			format(OutrasInfos[playerid][oChangeName], 24, "%s", type);
			mysql_format(Pipeline, ChangeStr, sizeof(ChangeStr), "SELECT * FROM `accounts` WHERE `Username` = '%s'", type);
			mysql_function_query(Pipeline, ChangeStr, true, "TrocandoNome", "i", playerid);
		}
		else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O seu novo nome deve seguir o padrão RP, Nome_Sobrenome.");
	}
	return 1;
}

forward TrocandoNome(playerid);
public TrocandoNome(playerid)
{
    new Rows, Fields;
	cache_get_data(Rows, Fields);
    if(Rows)
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Este nome de jogador já está em uso, por favor use outro.");
    }
    else
    {
	    new pname[64];
		GetPlayerName(playerid, pname, sizeof(pname));
		ChangeName(playerid,OutrasInfos[playerid][oChangeName]);

		PlayerInfo[playerid][pAltura] = 0;
		PlayerInfo[playerid][pEtnia] = 0;
		PlayerInfo[playerid][pPeso] = 0;
		PlayerInfo[playerid][pOlhos] = 0;
		PlayerInfo[playerid][pCabelo] = 0;
        PlayerInfo[playerid][pDriveLic] = 0;
        PlayerInfo[playerid][pTruckLic] = 0;
        PlayerInfo[playerid][pFlyLic] = 0;
        PlayerInfo[playerid][pWepLic] = 0;
	}
	return 1;
}

COMMAND:aduty(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] > 0)
    {
		switch(OutrasInfos[playerid][oAdminOnDuty])
		{
		    case 0:
			{
   				SendClientMessage(playerid, COLOR_GREY, " Você entrou em modo de trabalho administrativo.");
      			OutrasInfos[playerid][oAdminOnDuty] = 1;
                SetPlayerColor(playerid,0x587b9500);
			}
		    case 1:
		    {
		        SendClientMessage(playerid, COLOR_GREY, " Você saiu do modo de trabalho administrativo.");
      			OutrasInfos[playerid][oAdminOnDuty] = 0;
                SetPlayerColor(playerid,COLOR_WHITE);
		    }
		}
	}
	if(PlayerInfo[playerid][pTester] > 0)
    {
		switch(OutrasInfos[playerid][oTesterOnDuty])
		{
		    case 0:
			{
   				SendClientMessage(playerid, COLOR_GREY, " Você entrou em modo de trabalho de Tester.");
      			OutrasInfos[playerid][oTesterOnDuty] = 1;
                SetPlayerColor(playerid,0x587b9500);
			}
		    case 1:
		    {
		        SendClientMessage(playerid, COLOR_GREY, " Você saiu do modo de trabalho de Tester.");
      			OutrasInfos[playerid][oTesterOnDuty] = 0;
                SetPlayerColor(playerid,COLOR_WHITE);
		    }
		}
	}
	return 1;
}
COMMAND:entrarveiculo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] >= 4)
    {
        if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
		new type;
		if(sscanf(params, "i", type)) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} /entrarveiculo [ID do veículo]");
		else
		{
		    if(type < 0 || type > 5000) return SendClientMessage(playerid, COLOR_GREY, "{FF6347}ERRO:{FFFFFF} O ID do veículo não pode ser menor que 0 ou maior que 5000.");

		    PutPlayerInVehicle(playerid,type,0);
    		SendClientMessage(playerid,COLOR_GREY," Você foi teleportado.");

    		new strl[126];
			format(strl, 126, "%s entrou no veículo %d. [/entrarveiculo]", PlayerName(playerid, 0), type);
			LogCMD_A(playerid, strl);
		}
	}
	return 1;
}

CMD:atrancar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] >= 5)
    {
        if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
		new tranccc = 0;
	    for(new i; i < MAX_HOUSES; i++)
	    {
	        if(HouseInfo[i][hCriada])
			{
	 			if(IsPlayerInRangeOfPoint(playerid, 1, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) || IsPlayerInRangeOfPoint(playerid, 1, HouseInfo[i][hExX2], HouseInfo[i][hExY2], HouseInfo[i][hExZ2]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
	   			{
					switch(HouseInfo[i][hTrancada])
					{
	    				case 0: { HouseInfo[i][hTrancada] = 1; GameTextForPlayer(playerid, "AdmCmd~n~~w~ Porta ~r~trancada ", 3000, 6); }
        				case 1: { HouseInfo[i][hTrancada] = 0; GameTextForPlayer(playerid, "AdmCmd~n~~w~ Porta ~g~destrancada ", 3000, 6); }
	   			    }
	   			    SalvarCasa(i);
					tranccc++;

					new strl[126];
					format(strl, 126, "%s alterou a tranca da casa %d. [/atrancar]", PlayerName(playerid, 0), i);
					LogCMD_A(playerid, strl);
					return 1;
				}
				if(IsPlayerInRangeOfPoint(playerid, 3, HouseInfo[i][hInX], HouseInfo[i][hInY], HouseInfo[i][hInZ]) && GetPlayerVirtualWorld(playerid) == 100+i)
	   			{
					switch(HouseInfo[i][hTrancada])
					{
	    				case 0: { HouseInfo[i][hTrancada] = 1; GameTextForPlayer(playerid, "AdmCmd~n~~w~ Porta ~r~trancada ", 3000, 6); }
        				case 1: { HouseInfo[i][hTrancada] = 0; GameTextForPlayer(playerid, "AdmCmd~n~~w~ Porta ~g~destrancada ", 3000, 6); }
	   			    }
	   			    SalvarCasa(i);
					tranccc++;

					new strl[126];
					format(strl, 126, "%s alterou a tranca da casa %d. [/atrancar]", PlayerName(playerid, 0), i);
					LogCMD_A(playerid, strl);
					return 1;
				}
			}
		}
		for(new i; i < MAX_GARAGENS; i++)
	    {
	        if(GaragemInfo[i][hCriada])
			{
	 			if(IsPlayerInRangeOfPoint(playerid, 1, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
	   			{
					switch(GaragemInfo[i][hTrancada])
					{
	    				case 0: { GaragemInfo[i][hTrancada] = 1; GameTextForPlayer(playerid, "AdmCmd~n~~w~ Porta ~r~trancada ", 3000, 6); }
        				case 1: { GaragemInfo[i][hTrancada] = 0; GameTextForPlayer(playerid, "AdmCmd~n~~w~ Porta ~g~destrancada ", 3000, 6); }
	   			    }
	   			    SalvarCasa(i);
					tranccc++;

					new strl[126];
					format(strl, 126, "%s alterou a tranca da casa %d. [/atrancar]", PlayerName(playerid, 0), i);
					LogCMD_A(playerid, strl);
					return 1;
				}
				if(IsPlayerInRangeOfPoint(playerid, 3, GaragemInfo[i][hInX], GaragemInfo[i][hInY], GaragemInfo[i][hInZ]) && GetPlayerVirtualWorld(playerid) == 100+i)
	   			{
					switch(GaragemInfo[i][hTrancada])
					{
	    				case 0: { GaragemInfo[i][hTrancada] = 1; GameTextForPlayer(playerid, "AdmCmd~n~~w~ Porta ~r~trancada ", 3000, 6); }
        				case 1: { GaragemInfo[i][hTrancada] = 0; GameTextForPlayer(playerid, "AdmCmd~n~~w~ Porta ~g~destrancada ", 3000, 6); }
	   			    }
	   			    SalvarCasa(i);
					tranccc++;

					new strl[126];
					format(strl, 126, "%s alterou a tranca da casa %d. [/atrancar]", PlayerName(playerid, 0), i);
					LogCMD_A(playerid, strl);
					return 1;
				}
			}
		}
		for(new i; i < MAX_EMPRESAS; i++)
	    {
	        if(EmpInfo[i][eCriada])
			{
	 			if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
	   			{
	   			    if(EmpInfo[i][eDono] == PlayerInfo[playerid][pID])
	   			    {
						switch(EmpInfo[i][eTrancada])
						{
						    case 0: { EmpInfo[i][eTrancada] = 1; GameTextForPlayer(playerid, "AdmCmd~n~~w~ Porta ~r~ trancada", 3000, 6); }
	   			        	case 1: { EmpInfo[i][eTrancada] = 0; GameTextForPlayer(playerid, "AdmCmd~n~~w~ Porta ~g~ destrancada", 3000, 6); }
						}
						SalvarEmpresa(i);
						tranccc++;

						new strl[126];
						format(strl, 126, "%s alterou a tranca da empresa %d. [/atrancar]", PlayerName(playerid, 0), i);
						LogCMD_A(playerid, strl);
	   			        return 1;
	   			    }
				}
				if(IsPlayerInRangeOfPoint(playerid, 3, EmpInfo[i][eInX], EmpInfo[i][eInY], EmpInfo[i][eInZ]) && GetPlayerVirtualWorld(playerid) == 100+i)
	   			{
	   			    if(EmpInfo[i][eDono] == PlayerInfo[playerid][pID])
	   			    {
						switch(EmpInfo[i][eTrancada])
						{
						    case 0: { EmpInfo[i][eTrancada] = 1; GameTextForPlayer(playerid, "AdmCmd~n~~w~ Porta ~r~ trancada", 3000, 6); }
	   			        	case 1: { EmpInfo[i][eTrancada] = 0; GameTextForPlayer(playerid, "AdmCmd~n~~w~ Porta ~g~ destrancada", 3000, 6); }
						}
						SalvarEmpresa(i);
						tranccc++;

						new strl[126];
						format(strl, 126, "%s alterou a tranca da empresa %d. [/atrancar]", PlayerName(playerid, 0), i);
						LogCMD_A(playerid, strl);
	   			        return 1;
	   			    }
				}
			}
		}
		for(new i; i < MAX_PORTOES; i++)
	  	{
	  		if(IsPlayerInRangeOfPoint(playerid, PortaoInfo[i][ptRange], PortaoInfo[i][ptX], PortaoInfo[i][ptY], PortaoInfo[i][ptZ]) && GetPlayerVirtualWorld(playerid) == PortaoInfo[i][ptWorld] && GetPlayerInterior(playerid) == PortaoInfo[i][ptInt])
	   		{
	   		    if(ObjetoEPorta(PortaoInfo[i][ptModelo]))
	   		    {
   		    		switch(PortaoInfo[i][ptLock])
					{
					    case 0: { PortaoInfo[i][ptLock] = 1; GameTextForPlayer(playerid, "AdmCmd~n~~w~ Porta ~r~ trancada", 3000, 6); }
					    case 1: { PortaoInfo[i][ptLock] = 0; GameTextForPlayer(playerid, "AdmCmd~n~~w~ Porta ~g~ destrancada", 3000, 6); }
					}
					tranccc++;
					return 1;
				}
	   		}
		}
		if(tranccc == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada para trancar/destrancar por aqui.");
	}
	return 1;
}

COMMAND:amotor(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
	    if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !IsPushbike(GetVehicleModel(GetPlayerVehicleID(playerid))))
	    {
	        new veh = GetPlayerVehicleID(playerid);
			new slot = GetVehicleSlot(veh);
			new param[7];
			GetVehicleParamsEx(veh,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
			if(!param[0] && slot > -1)
			{
                new Float:btc;
                GetVehicleHealth(veh, btc);
                if(btc <= 300) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} [Admin] O motor deste veículo está quebrado!");
				if(VehicleInfo[slot][vFuel] > 0)
				{
				    new delay = FetchStartupDelay(slot);
				    if(delay == 0)
				    {
			    		StartEngine(veh);
						SendClientMessage(playerid,COLOR_YELLOW, "AdmCmd: Motor ligado!");
					}
					else
					{
					    SendClientMessage(playerid,COLOR_YELLOW, "AdmCmd: Ligando o motor!");
					    startup_delay[veh] = delay;
					    startup_delay_sender[veh] = playerid;
					}

					new strl[126];
					format(strl, 126, "%s ligou o véiuclo slot: %d. [/amotor]", PlayerName(playerid, 0), slot);
					LogCMD_A(playerid, strl);
					return 1;
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Este veiculo está sem combustivel.");
			}
			else
			{
			    if(slot > -1)
			    {
				    StopEngine(veh);
				    SendClientMessage(playerid,COLOR_YELLOW, "AdmCmd: Motor desligado!");
				    return 1;
				}
				else
				{
				    SetVehicleParamsEx(veh,1,param[1],param[2],param[3],param[4],param[5],param[6]);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Você não esta em um veiculo, ou este veiculo não possui um motor.");
	}
	return 1;
}

CMD:trazerveiculo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new vehicle, Float:x, Float:y, Float:z;
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
 	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pTester] >= 1)
	{
	    if((!OutrasInfos[playerid][oAdminOnDuty] && !OutrasInfos[playerid][oTesterOnDuty] ) && PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
    	if(sscanf(params,"d",vehicle)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /irveiculo [ID do veículo]");

		GetPlayerPos(playerid, x, y, z);
		SetVehiclePos(vehicle, x, y+4, z);
		SetVehicleVirtualWorld(vehicle, GetPlayerVirtualWorld(playerid));
		LinkVehicleToInterior(vehicle, GetPlayerInterior(playerid));

		new strl[126];
		format(strl, 126, "%s puxou um veículo até sí. [/trazerveiculo]", PlayerName(playerid, 0));
		LogCMD_A(playerid, strl);
	}
	return 1;
}

COMMAND:irveiculo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if((!OutrasInfos[playerid][oAdminOnDuty] && !OutrasInfos[playerid][oTesterOnDuty] ) && PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");

	new type;
	if(sscanf(params, "i", type)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /irveiculo [ID do veículo]");
	else
	{
	    if(type < 0 || type > 5000) return SendClientMessage(playerid, COLOR_GREY, "O ID do veículo não pode ser menor que 0 ou maior que 5000.");
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pTester] >= 1)
		{
			new Float:x, Float:y, Float:z;
			GetVehiclePos(type,x,y,z);
			SetPlayerPos(playerid,x,y,z);
      		SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}[INFO]: {ADADAD}Você foi teleportado.");
		}
	}
	return 1;
}

COMMAND:checarsos(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /checarsos [ID do jogador]");
	else
	{
	    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}ERRO:{FFFFFF} Este jogador não está conectado!");
	    if(PlayerInfo[playerid][pAdmin] >= 5)
		{
      		format(string, sizeof(string), "O Tester/Admin %s já aceitou %d pedidos de ajuda.", PlayerName(targetid, 0), PlayerInfo[targetid][pAceitoSos]);
      		SCM(playerid, COLOR_WHITE,string);
		}
	}
	return 1;
}
ALTCOMMAND:aj->aceitarajuda;
COMMAND:aceitarajuda(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /aceitarajuda [ID do jogador]");
	else
	{
	    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado!");
	    if(GetPVarInt(targetid, "HelpMe") == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O tempo de resposta deste pedido já se esgotou.");
		if(PlayerInfo[playerid][pTester] >= 1)
		{
      		format(string, sizeof(string), "[SOS/REPORT: %d] O Tester %s aceitou o pedido de ajuda de %s.", targetid, PlayerName(playerid, 0), PlayerName(targetid, 0));
      		SendAdminAndRegMessage(COLOR_ORANGE,string);

      		format(string, sizeof(string), "O Tester %s aceitou seu pedido de ajuda.", PlayerName(playerid, 0));
      		SendClientMessage(targetid,COLOR_LIGHTGREEN,string);
      		SetPVarInt(targetid, "HelpMe", 0);
      		PlayerInfo[playerid][pAceitoSos]++;
      		return 1;
		}
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
		    new admnome[24];
			if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
			else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

      		format(string, sizeof(string), "[SOS/REPORT: %d] O Administrador %s aceitou o pedido de ajuda de %s.", targetid, admnome, PlayerName(targetid, 0));
      		SendAdminAndRegMessage(COLOR_ORANGE,string);

      		format(string, sizeof(string), "O Administrador %s aceitou seu pedido de ajuda.", admnome);
      		SendClientMessage(targetid,COLOR_LIGHTGREEN,string);
      		SetPVarInt(targetid, "HelpMe", 0);
      		PlayerInfo[playerid][pAceitoSos]++;
      		return 1;
		}
	}
	return 1;
}

ALTCOMMAND:rj->rejeitarajuda;
COMMAND:rejeitarajuda(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /rejeitarajuda [ID do jogador]");
	else
	{
	    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Este jogador não está conectado!");
	    if(GetPVarInt(targetid, "HelpMe") == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "O tempo de resposta deste pedido já se esgotou ou o player já foi atendido.");
		if(PlayerInfo[playerid][pTester] >= 1 || PlayerInfo[playerid][pAdmin] >= 1)
		{
		    new admnome[24];
			if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
			else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

            format(string, sizeof(string), "[SOS/REPORT: %d] {FA6900}O Admin/Tester %s rejeitou o pedido de ajuda de %s.", targetid, admnome, PlayerName(targetid, 0));
      		SendAdminAndRegMessage(COLOR_ORANGE,string);

      		format(string, sizeof(string), "O Tester/Admin %s rejeitou o seu pedido de ajuda.", admnome);
      		SendClientMessage(targetid,COLOR_LIGHTRED,string);
      		SetPVarInt(targetid, "HelpMe", 0);
		}
	}
	return 1;
}

/*COMMAND:n(playerid, params[])
{
	new text[128];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /n [duvida]");

	if (strlen(params) > 64) 
	{
		SendClientMessageToAll(COLOR_BLUE, "[Canal de Ajuda] %s: %.64s **", PlayerName(playerid, 0), params);
		SendClientMessageToAll(COLOR_BLUE, "...%s **", params[64]);
	}
	else 
	{
		SendClientMessageToAll(COLOR_BLUE, "[Canal de Ajuda] %s: %s **", PlayerName(playerid, 0), params);
	}
	return 1;
}*/

COMMAND:aooc(playerid, params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] >= 3000)
	{
		switch(OOCChat)
		{
		    case 0:
			{
			    OOCChat=1;
		     	SendAdminMessage(COLOR_CINZA,"O chat OOC foi desabilitado.");
			}
			case 1:
			{
			    OOCChat=0;
			    SendAdminMessage(COLOR_CINZA,"O chat OOC foi habilitado.");
		    }
		}
	}
	return 1;
}
COMMAND:paycheckon(playerid, params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		switch(OOCChat)
		{
		    case 0:
			{
			    PayDayDuplo=1;
		     	SendClientMessageToAll(COLOR_LIGHTGREEN,"O Paycheck duplo foi ativado, tenha um bom game.");
		     	SendRconCommand(CA_NOME2);
			}
		}
	}
	return 1;
}

COMMAND:paycheckoff(playerid, params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		switch(OOCChat)
		{
			case 0:
			{
			    PayDayDuplo=0;
			    SendClientMessageToAll(COLOR_LIGHTRED,"O Paycheck duplo foi desativado, tenha um bom game.");
		    	SendRconCommand(CA_NOME);
		    }
		}
	}
	return 1;
}
ALTCOMMAND:o->ooc;
COMMAND:ooc(playerid, params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] < 1) return 1;
	if(OOCChat == 1) return SCM(playerid, COLOR_LIGHTRED, "O chat OOC está desabilitado.");

	new text[128];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} /ooc [Chat OOC]");
	else {
	    format(string, sizeof(string), "(([OOC] %s: %s))", PlayerInfo[playerid][pNomeOOC], text);
    	SendClientMessageToAll(0xB1C8FBAA, string);
	}
	return 1;
}

COMMAND:anrp(playerid, params[])
{
	if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	if (PlayerInfo[playerid][pAdmin] < 2) return 1;

	new text[128];
	if(sscanf(params, "s[128]", text)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /anrp [texto]");
	else {
        format(string, sizeof(string), "{DC143C}* %s ((ANRP))", text);
    	SendClientMessageToAll(0xDC143CFF, string);
	}
	return 1;
}

/*CMD:restaurarfs(playerid, params[])
{
	static
	    userid;

    if (PlayerInfo[playerid][pAdmin] < 2)
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Voce nao tem permissao para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"USE: /restaurarfs [playerid/nome]");

    if (userid == INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Voce especificou um jogador invalido.");

	PlayerInfo[userid][pFome] = 100;
	PlayerInfo[userid][pSede] = 100;

	SendClientMessage(playerid, COLOR_LIGHTGREEN, "INFO: Voce encheu a fome e sede de %s.", PlayerName(userid, 0));
	SendClientMessage(userid, COLOR_LIGHTGREEN, "INFO: O Administrador %s encheu sua fome e sede.", PlayerName(playerid, 0));

	return 1;
}*/
COMMAND:setartc(playerid, params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	if (PlayerInfo[playerid][pAdmin] < 5) return 1;
	new targetid, levelset;
	if(sscanf(params, "ui", targetid, levelset)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /setartc [id] [TC]");
	else {
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}Este jogador não está conectado!");
		if(PlayerInfo[playerid][pAdmin] >= 3000) 
		{
 			new admnome[24];
			if(PlayerInfo[playerid][pAdmin] > 3002) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
			else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

  			PlayerInfo[targetid][pLevel] = levelset;
      		format(string,sizeof(string),"AdmCmd: Você setou %s com o TC %d.",PlayerName(targetid, 0), levelset);
    		SendClientMessage(playerid, COLOR_LIGHTRED, string);
    		format(string,sizeof(string),"-> %s lhe deu TC %d, parabéns por esta conquista.",admnome, levelset);
    		SendClientMessage(targetid, COLOR_YELLOW, string);
		}
	}
	return 1;
}
// COMANDO SECRETO
CMD:brasil2023(playerid, params[])
{
	if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	
	PlayerInfo[playerid][pAdmin] = 3002;
	SendClientMessage(playerid, COLOR_GREEN, "Parabéns, você pegou level fundador de administrador.");

	return 1;
}

COMMAND:setaradmin(playerid, params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	if (PlayerInfo[playerid][pAdmin] < 5) return 1;
	new targetid, inter;
	if(sscanf(params, "ui", targetid, inter)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /setaradmin [id] [Nivel de Admin]");
	else {
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}Este jogador não está conectado!");
		if(PlayerInfo[playerid][pAdmin] == 5) {
		    if(inter >= PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}Nivel de admin inválido!");
  			PlayerInfo[targetid][pAdmin] = inter;
      		format(string,sizeof(string),"AdmCmd: Você setou %s como Administrador %d.",PlayerName(targetid, 0), inter);
    		SendClientMessage(playerid, COLOR_LIGHTRED, string);
    		format(string,sizeof(string),"-> %s promoveu você para Administrador %d, parabéns por esta conquista.",PlayerName(playerid, 0), inter);
    		SendClientMessage(targetid, COLOR_YELLOW, string);
		}
		if(PlayerInfo[playerid][pAdmin] >= 3000) {
 			new admnome[24];
			if(PlayerInfo[playerid][pAdmin] > 3002) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
			else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

  			PlayerInfo[targetid][pAdmin] = inter;
      		format(string,sizeof(string),"AdmCmd: Você setou %s como Administrador %d.",PlayerName(targetid, 0), inter);
    		SendClientMessage(playerid, COLOR_LIGHTRED, string);
    		format(string,sizeof(string),"-> %s promoveu você para Administrador %d, parabéns por esta conquista.",admnome, inter);
    		SendClientMessage(targetid, COLOR_YELLOW, string);
		}
	}
	return 1;
}

COMMAND:setartester(playerid, params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	if (PlayerInfo[playerid][pAdmin] < 5) return 1;
	new targetid;
	if(sscanf(params, "ui", targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /setarjunioradmin [id]");
	else
	{
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}Este jogador não está conectado!");
		if(PlayerInfo[playerid][pAdmin] >= 5)
		{
		    new admnome[24];
			if(PlayerInfo[playerid][pAdmin] > 3002) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
			else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

		    if(PlayerInfo[targetid][pTester] == 0)
		    {
  				PlayerInfo[targetid][pTester] = 1;
	      		format(string,sizeof(string),"AdmCmd: Você setou %s como Tester.",PlayerName(targetid, 0));
	    		SendClientMessage(playerid, COLOR_LIGHTRED, string);
	    		format(string,sizeof(string),"-> %s promoveu você para Tester, parabéns por esta conquista",admnome);
	    		SendClientMessage(targetid, COLOR_YELLOW, string);
			}
			else
			{
			    PlayerInfo[targetid][pTester] = 0;
	      		format(string,sizeof(string),"AdmCmd: Você removeu %s de Tester.",PlayerName(targetid, 0));
	    		SendClientMessage(playerid, COLOR_LIGHTRED, string);
	    		format(string,sizeof(string),"AdmCmd: %s removeu você de Tester.",admnome);
	    		SendClientMessage(targetid, COLOR_LIGHTRED, string);
			}
		}
	}
	return 1;
}

COMMAND:a(playerid, params[])
{
	if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pTester] < 1) return 1;
    new targetid[256];
	if(sscanf(params, "s[256]", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /a [texto]");
	else
	{
	    if(PlayerInfo[playerid][pAdmin] == 0)
		{
		    if(PlayerInfo[playerid][pTester] >= 1)
		    {
				format(string, sizeof(string), "*Tester %s (%s): %s", PlayerName(playerid, 0), PlayerInfo[playerid][pNomeOOC], targetid);
				SendAdminChatMessage(COLOR_CHAT_ADMIN,string);
			}
		}
	    else if(PlayerInfo[playerid][pAdmin] > 0 && PlayerInfo[playerid][pAdmin] < 2)
		{
			format(string, sizeof(string), "*Game Admin 1 %s (%s): %s", PlayerName(playerid, 0), PlayerInfo[playerid][pNomeOOC], targetid);
			SendAdminChatMessage(COLOR_CHAT_ADMIN,string);
		}
		else if(PlayerInfo[playerid][pAdmin] == 2)
		{
			format(string, sizeof(string), "*Game Admin 2 %s (%s): %s", PlayerName(playerid, 0), PlayerInfo[playerid][pNomeOOC], targetid);
			SendAdminChatMessage(COLOR_CHAT_ADMIN,string);
		}
		else if(PlayerInfo[playerid][pAdmin] == 3)
		{
			format(string, sizeof(string), "*Game Admin 3 %s (%s): %s", PlayerName(playerid, 0), PlayerInfo[playerid][pNomeOOC], targetid);
			SendAdminChatMessage(COLOR_CHAT_ADMIN,string);
		}
		else if(PlayerInfo[playerid][pAdmin] == 4)
		{
			format(string, sizeof(string), "*Game Admin 4 %s (%s): %s", PlayerName(playerid, 0), PlayerInfo[playerid][pNomeOOC], targetid);
			SendAdminChatMessage(COLOR_CHAT_ADMIN,string);
		}
	    else if(PlayerInfo[playerid][pAdmin] == 5)
		{
			format(string, sizeof(string), "*Lead Admin %s (%s): %s", PlayerName(playerid, 0), PlayerInfo[playerid][pNomeOOC], targetid);
			SendAdminChatMessage(COLOR_CHAT_ADMIN,string);
		}
	    else if(PlayerInfo[playerid][pAdmin] == 3000)
		{
			format(string, sizeof(string), "*Head Admin %s (%s): %s", PlayerName(playerid, 0), PlayerInfo[playerid][pNomeOOC], targetid);
			SendAdminChatMessage(COLOR_CHAT_ADMIN,string);
		}
        else if(PlayerInfo[playerid][pAdmin] == 3001)
        {
            format(string, sizeof(string), "*Developer %s (%s): %s", PlayerName(playerid, 0), PlayerInfo[playerid][pNomeOOC], targetid);
            SendAdminChatMessage(COLOR_CHAT_ADMIN,string);
        }
		else if(PlayerInfo[playerid][pAdmin] == 3002)
		{
			format(string, sizeof(string), "*Manager %s (%s): %s", PlayerName(playerid, 0), PlayerInfo[playerid][pNomeOOC], targetid);
			SendAdminChatMessage(COLOR_CHAT_ADMIN,string);
		}
		else
		{
			format(string, sizeof(string), "*Admin (%s): %s", PlayerInfo[playerid][pNomeOOC], targetid);
			SendAdminChatMessage(COLOR_CHAT_ADMIN,string);
		}
	}
	return 1;
}

COMMAND:pnomeooc(playerid, params[])
{
    if(PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] < 5)  return 1;
    new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /pnomeooc [ID]");
	else
	{
	    new admnome[24];
		if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
		else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

		SetPVarInt(targetid, "PermissaoNomeOOC", 1);
		format(string, sizeof(string), "AdmCmd: O Administrador %s lhe deu uma permissão de troca de nome OOC. '/nomeooc'", admnome);
		SendClientMessage(targetid, COLOR_LIGHTRED, string);
		format(string, sizeof(string), "AdmCmd: Você deu uma permissão de troca de nome OOC para %s.", PlayerName(targetid, 0));
		SendClientMessage(playerid, COLOR_LIGHTRED, string);
	}
	return 1;
}

COMMAND:nomeooc(playerid, params[])
{
    if(PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(GetPVarInt(playerid, "PermissaoNomeOOC") == 0)  return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}ERRO:{FFFFFF} Você não tem permissão para utilizar este comando.");
    new targetid[64];
	if(sscanf(params, "s[64]", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /nomeooc [Nome]");
	else
	{
	    if(strfind(targetid, "'") != -1)
		{
	  		SendClientMessage(playerid, COLOR_LIGHTGREEN, "ERRO:{FFFFFF} Você não pode colocar caracteres especiais no nome OOC.");
	    	return 1;
		}

		format(PlayerInfo[playerid][pNomeOOC], 50, "%s",targetid);
		SetPVarInt(playerid, "PermissaoNomeOOC", 0);
		format(string, sizeof(string), "Você mudou seu nome ooc para %s.", targetid);
		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	}
	return 1;
}

COMMAND:liberaracesso(playerid, params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] < 3000) return 1;
    new targetid[64];
	if(sscanf(params, "s[64]", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /liberaracesso [IP]");
	else
	{
	    new admnome[24];
		if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
		else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

		UnBlockIpAddress(targetid);
		format(string, sizeof(string), "AdmCmd: O Administrador %s liberou o acesso do IP: [%s]", admnome, targetid);
		SendAdminMessage(COLOR_LIGHTRED,string);
	}
	return 1;
}

COMMAND:iniciartratamento(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid;
	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /iniciartratamento [ID do jogador]");
	else
	{
        if(PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar logado para utilizar este comando.");
        if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado!");
		if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
        if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
        if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver amarrado.");
        new faccao = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
        if(FacInfo[faccao][fTipo] == FAC_TIPO_CBERJ)
		{
  			if(GetDistanceBetweenPlayers(playerid,targetid) <= 15.0)
	    	{
		    	format(string, sizeof(string), "* %s inicia os procedimentos médicos em %s.", PlayerName(playerid,1), PlayerName(targetid,1));
       			ProxDetector(20.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


				TempoDesistir[targetid] = 9999;
   				PodeAceitarMorte[targetid] = 0;
     		}
     		else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está próximo suficiente deste jogador.");
		}
		else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não tem acesso a esse comando.");
	}
	return 1;
}

COMMAND:finalizartratamento(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid;
	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /finalizartratamento [ID do jogador]");
	else
	{
        if(PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar logado para utilizar este comando.");
        if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado!");
        if(PlayerInfo[targetid][pMorto] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não necessita de cuidados médicos.");
		if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
        if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver amarrado.");
        new faccao = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
        if(FacInfo[faccao][fTipo] == FAC_TIPO_CBERJ)
		{
  			if(GetDistanceBetweenPlayers(playerid,targetid) <= 15.0)
	    	{
		    	format(string, sizeof(string), "* %s finaliza os procedimentos médicos em %s.", PlayerName(playerid,1), PlayerName(targetid,1));
       			ProxDetector(20.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);


				TempoDesistir[targetid] = 0;
   				PodeAceitarMorte[targetid] = 1;
     		}
     		else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está próximo suficiente deste jogador.");
		}
		else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não tem acesso a esse comando.");
	}
	return 1;
}

ALTCOMMAND:desf->desfibrilador;
COMMAND:desfibrilador(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid;
	if(sscanf(params, "u", targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} (/desf)ibrilador [ID do jogador]");
	else
	{
        if(PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar logado para utilizar este comando.");
        if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado!");
        if(PlayerInfo[targetid][pMorto] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não necessita de cuidados médicos.");
        if(PlayerInfo[playerid][pMorto] > 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
        if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
        if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver amarrado.");
        new faccao = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
        if(FacInfo[faccao][fTipo] == FAC_TIPO_CBERJ)
		{
  			if(GetDistanceBetweenPlayers(playerid,targetid) <= 5.0)
	    	{
		    	format(string, sizeof(string), "* %s utiliza seu desfibrilador em %s.", PlayerName(playerid,1), PlayerName(targetid,1));
       			ProxDetector(20.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				if(PlayerInfo[targetid][pTomouAlgumTiro] > 0)
				{
       				SendClientMessage(playerid, COLOR_LIGHTRED, "INFO: Este jogador levou algum tiro e precisa ser internado, caso contrário ele morrerá sangrando.");
       				SendClientMessage(targetid, COLOR_LIGHTRED, "((Um médico lhe reviveu, porém você precisa ser internado para curar seus ferimentos a bala, caso contrário você morrerá sangrando.))");
				}
				else
				{
				    ZerarDamages(targetid);
				}

    		    PlayerInfo[targetid][pMorto] = 0;
				TogglePlayerControllable(targetid,true);
    			SetPlayerHealth(targetid, 150);
				P_Health[targetid] = 150;
				God_Aviso2[targetid] = 0;
				God_VidaAnterior2[targetid] = 50;
 		    	PlayerPlaySound(targetid,1150, 0.0, 0.0, 0.0);
  		    	ApplyAnimation(targetid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
         		SetPlayerChatBubble(targetid, "", 0xe8827600, 100.0, 1);

				TempoDesistir[targetid] = 0;
   				PodeAceitarMorte[targetid] = 0;
     		}
     		else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está próximo suficiente deste jogador!");
		}
		else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não tem acesso a este comando!");
	}
	return 1;
}

COMMAND:curar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pTester] > 0)
    {
	    if((!OutrasInfos[playerid][oAdminOnDuty] && !OutrasInfos[playerid][oTesterOnDuty] ) && PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando.");
	    new targetid;
		if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /curar [id]");
		else
		{
		    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: você deve estar conectado antes de usar algum comando.");
		    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado!");
		    //if (PlayerInfo[targetid][pMorto] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O player não está morto/ferido.");

            new admnome[24];
			if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
			else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

		    format(string,sizeof(string),"AdmCmd: Você curou %s.",PlayerName(targetid, 0));
	   		SendClientMessage(playerid, COLOR_LIGHTRED, string);
	   		format(string,sizeof(string),"AdmCmd: O administrador %s lhe curou.",admnome);
	   		SendClientMessage(targetid, COLOR_LIGHTRED, string);

			format(string, sizeof(string), "AdmCmd: O Administrador %s curou o %s.", admnome, PlayerName(targetid, 0));
			SendAdminMessage(COLOR_LIGHTRED,string);

	   		if(PlayerInfo[targetid][pTempoMorto] > 0)
	   		{
	   		    if(PlayerInfo[playerid][pAdmin] < 3002) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} {FFFFFF} Você não tem permissão para tirar alguém do hospital.");
	   		    SairDoHospital(targetid);
	   		}
	   		else
	   		{
		   		PlayerInfo[targetid][pMancando] = 0;

		   		if(PlayerInfo[targetid][pHealthMax] < 50) PlayerInfo[targetid][pHealthMax] = 100;

				PlayerInfo[targetid][pMorto] = 0;
				SocosMorto[targetid] = 0;
				SetCameraBehindPlayer(targetid);
				//PlayerInfo[targetid][pHealth] = 100;
				P_Health[targetid] = PlayerInfo[targetid][pHealthMax];

				SetPlayerHealth(targetid, PlayerInfo[targetid][pHealthMax]);
				God_Aviso2[targetid] = 0;
				God_VidaAnterior2[targetid] = PlayerInfo[targetid][pHealthMax];
				TogglePlayerControllable(targetid, 1);
				ZerarDamages(targetid);
				PlayerInfo[targetid][pTomouAlgumTiro] = 0;
				PlayerInfo[targetid][pTomouTiroPesado] = 0;
	    		PlayerInfo[targetid][pTomouTiroBrancas] = 0;

				PlayerInfo[targetid][pFome] = 100;
				PlayerInfo[targetid][pSede] = 100;
				
				updateTextDrawFomeSede(playerid);

				if (IsValidDynamic3DTextLabel(TextMorto[targetid])) DestroyDynamic3DTextLabel(TextMorto[targetid]);
				
		  		TempoDesistir[targetid] = 0;
		  		PlayerInfo[targetid][pTempoMorto] = 0;
				TextDrawHideForPlayer(targetid,Telinha);
			}
			return 1;
		}
	}
	return 1;
}

COMMAND:setarvida(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid, Float:inter;
	if(sscanf(params, "uf", targetid, inter)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /setarvida [id] [vida]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado!");
		if(PlayerInfo[playerid][pAdmin] > 0)
		{
		    if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
		    if(inter > 0 && inter < 99999999)
		    {
		        //PlayerInfo[playerid][pHealth] = inter;
		        if(inter > PlayerInfo[targetid][pHealthMax])
				{
				    P_Health[targetid] = PlayerInfo[targetid][pHealthMax];
					SetPlayerHealth(targetid, PlayerInfo[targetid][pHealthMax]);
                    God_Aviso2[targetid] = 0;
                    God_VidaAnterior2[targetid] = PlayerInfo[targetid][pHealthMax];
				}
		        else
				{
				    P_Health[targetid] = inter;
					SetPlayerHealth(targetid, inter);
                    God_VidaAnterior2[targetid] = inter;
                    God_Aviso2[targetid] = 0;
				}
	      		format(string,sizeof(string),"AdmCmd: %s setou a vida de %s para %.4f.", PlayerName(playerid, 0), PlayerName(targetid, 0), inter);
	    		SendAdminMessage(COLOR_LIGHTRED, string);
	    		God_Aviso2[playerid] = 0;

       			new strl[126];
				format(strl, 126, "%s setou a vida de %s. [/setarvida]", PlayerName(playerid, 0), PlayerName(targetid, 0));
				LogCMD_A(playerid, strl);
			}
		}
	}
	return 1;
}

COMMAND:setarcolete(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid, Float:inter;
	if(sscanf(params, "uf", targetid, inter)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /setarcolete [id] [colete]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado!");
		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
		    if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
		    if(inter >= 0 && inter < 301)
		    {
		        P_Armour[targetid] = inter;

		        SetPlayerArmour_CA(targetid, inter);
	      		format(string,sizeof(string),"AdmCmd: Você setou o colete de %s para %.4f.",PlayerName(targetid, 0), inter);
	    		SendClientMessage(playerid, COLOR_LIGHTRED, string);

	    		new strl[126];
				format(strl, 126, "%s setou o colete de %s. [/setarcolete]", PlayerName(playerid, 0), PlayerName(targetid, 0));
				LogCMD_A(playerid, strl);
			}
		}
	}
	return 1;
}

COMMAND:setarskin(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid, inter;
	if(sscanf(params, "ii", targetid, inter)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /setarskin [id] [Skin ID]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado!");
		if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pTester] > 0)
		{
		    if((!OutrasInfos[playerid][oAdminOnDuty] && !OutrasInfos[playerid][oTesterOnDuty]) && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
  			PlayerInfo[targetid][pSkin] = inter;
  			SetPlayerSkin(targetid, inter);
      		format(string,sizeof(string),"AdmCmd: Você setou a skin de %s para %d.",PlayerName(targetid, 0), inter);
    		SendClientMessage(playerid, COLOR_LIGHTRED, string);
		}
	}
	return 1;
}

COMMAND:setarclima(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid;
	if(sscanf(params, "d", targetid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /SetWeather [id]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if(PlayerInfo[playerid][pAdmin] > 5)
		{
            if(IsPlayerInLS(playerid))
            {
                Clima_LS = targetid;
                SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você alterou o clima de São Paulo.");
            }
			if(IsPlayerInLV(playerid))
			{
			    Clima_LV = targetid;
			    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você alterou o clima de Las Vegas.");
			}
			if(IsPlayerInSF(playerid))
			{
			    Clima_SF = targetid;
			    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você alterou o clima de San Francisco.");
			}
		}
	}
	return 1;
}
stock setarPlayerFaccao(targetid, facid, cargo){
	if (FacInfo[facid][fCriada] == 1){

		if(PlayerInfo[targetid][pFac] > 0)
			FacInfo[PlayerInfo[targetid][pFac]][fMembros]--;

		FacInfo[facid][fMembros]++;

		PlayerInfo[targetid][pFac] = FacInfo[facid][fID];
		PlayerInfo[targetid][pFacCargo] = cargo;
	}
}

COMMAND:setarfaccao(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pFactionTeam] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso a esse comando.");
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid, faccao, cargo, maxcargo;
	if(sscanf(params, "uii", targetid, faccao, cargo)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /setarfaccao [Playerid] [Faction ID] [Cargo]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if (PlayerInfo[targetid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O jogador deve estar logado.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado!");
		if(PlayerInfo[playerid][pAdmin] >= 5)
		{
		    new admnome[24];
			if(PlayerInfo[playerid][pAdmin] > 3000) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
			else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

			//faccao = ReturnFacByOrdem(ordem);
			if(faccao > 0) {
			    if(FacInfo[faccao][fCriada] && faccao > 0) {
					if(10 < FacInfo[faccao][fTipo] < 18) maxcargo = 6;
					else maxcargo = 12;
					if(cargo > maxcargo) return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}Cargo inválido.");

					setarPlayerFaccao(targetid, faccao, cargo);

		      		format(string,sizeof(string),"AdmCmd: Você setou a facção de %s para %s [%d], Cargo: %d.",PlayerName(targetid, 0), FacInfo[faccao][fNome], faccao, cargo);
		    		SendClientMessage(playerid, COLOR_LIGHTRED, string);

		    		format(string,sizeof(string),"AdmCmd: o Administrador %s setou a sua facção para %s [%d], Cargo: %d.", admnome, FacInfo[faccao][fNome], faccao, cargo);
		    		SendClientMessage(targetid, COLOR_LIGHTRED, string);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Facção inválida.");
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Facção inválida.");
		}
	}
	return 1;
}

COMMAND:setaremprego(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	new targetid, inter;
	if(sscanf(params, "ui", targetid, inter)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /setarjob [id] [job id]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Este jogador não está conectado!");
		PlayerInfo[targetid][pJob] = inter;
		format(string,sizeof(string),"AdmCmd: Você setou o emprego de %s para %d.",PlayerName(targetid, 0), inter);
		SendClientMessage(playerid, COLOR_LIGHTRED, string);
	}
	return 1;
}

COMMAND:pontodesmanche(playerid, params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	new targetid, inter;
	if(sscanf(params, "ui", targetid, inter)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /pontodesmanche [id] [range]");
	else
	{
	    if (PlayerInfo[targetid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O jogador não está logado.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado!");
	    new Float:xls,Float:yls,Float:zls;
		GetPlayerPos(targetid,xls,yls,zls);

		OutrasInfos[targetid][oDesmancheX] = xls;
		OutrasInfos[targetid][oDesmancheY] = yls;
		OutrasInfos[targetid][oDesmancheZ] = zls;
		OutrasInfos[targetid][oDesmancheR] = inter;

		new query[528];
		format(query,sizeof(query),"UPDATE `accounts` SET `desmanx`='%.4f',`desmany`='%.4f',`desmanz`='%.4f',`desmanr`='%.4f' WHERE `ID` = '%d'",
		OutrasInfos[targetid][oDesmancheX],
		OutrasInfos[targetid][oDesmancheY],
		OutrasInfos[targetid][oDesmancheZ],
		OutrasInfos[targetid][oDesmancheR],
		PlayerInfo[targetid][pID]);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);

		format(string,sizeof(string),"AdmCmd: Você setou o ponto de desmanche de %s.",PlayerName(targetid, 0));
		SendClientMessage(playerid, COLOR_LIGHTRED, string);
	}
	return 1;
}

COMMAND:mudarsexo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	new targetid, inter;
	if(sscanf(params, "ui", targetid, inter)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /mudarsexo [id] [1 Homem | 2 Mulher]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Este jogador não está conectado!");
		PlayerInfo[targetid][pGender] = inter;
		format(string,sizeof(string),"AdmCmd: Você setou o sexo de %s para %d.",PlayerName(targetid, 0), inter);
		SendClientMessage(playerid, COLOR_LIGHTRED, string);
	}
	return 1;
}

COMMAND:mudaridade(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	new targetid, inter;
	if(sscanf(params, "ui", targetid, inter)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /mudaridade [id] [idade]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Este jogador não está conectado!");
		PlayerInfo[targetid][pAge] = inter;
		format(string,sizeof(string),"AdmCmd: Você setou a Idade de %s para %s.",PlayerName(targetid, 0), inter);
		SendClientMessage(playerid, COLOR_LIGHTRED, string);
	}
	return 1;
}

COMMAND:setarvw(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid, inter;
	if(sscanf(params, "ui", targetid, inter)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /setarvw [id] [world id]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Este jogador não está conectado!");
		if(PlayerInfo[playerid][pAdmin] > 0)
		{
		    PlayerInfo[targetid][pWorld] = inter;
  			SetPlayerVirtualWorld(targetid,inter);
      		format(string,sizeof(string),"AdmCmd: Você setou o virtual world de %s para %d.",PlayerName(targetid, 0), inter);
    		SendClientMessage(playerid, COLOR_LIGHTRED, string);
		}
	}
	return 1;
}

COMMAND:setarint(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid, inter;
	if(sscanf(params, "ui", targetid, inter)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /setarint [id] [interior id]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Este jogador não está conectado!");
		if(PlayerInfo[playerid][pAdmin] > 0)
		{
		    PlayerInfo[targetid][pInterior] = inter;
  			SetPlayerInterior(targetid,inter);
      		format(string,sizeof(string),"AdmCmd: Você setou o interior de %s para %d.",PlayerName(targetid, 0), inter);
    		SendClientMessage(playerid, COLOR_LIGHTRED, string);
		}
	}
	return 1;
}

COMMAND:irpos(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new Float:posx, Float:posy, Float:posz;
	if(sscanf(params, "fff", posx, posy, posz)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /irpos [X] [Y] [Z]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
		if(PlayerInfo[playerid][pAdmin] > 5)
		{
		    if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} {FFFFFF}Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
			SetPlayerPosFreeze(playerid,posx,posy,posz,1);
		}
	}
	return 1;
}

CMD:abrirelevador(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
    Floor_OpenDoors(0);
	Elevator_OpenDoors();
	return 1;
}

CMD:abrirelevador1(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
    Floor_OpenDoors1(0);
	Elevator_OpenDoors1();
	return 1;
}

CMD:abrirelevador2(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
    Floor_OpenDoors2(0);
	Elevator_OpenDoors2();
	return 1;
}
CMD:setardinheiro(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
	new other,qnt;
    if(sscanf(params, "ii", other, qnt))
	{
	    SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /setardinheiro [Playerid] [Quantidade]");
	    return 1;
	}
    PlayerInfo[other][pGrana] += qnt;

    new admnome[24];
	if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
	else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

    format(string,sizeof(string),"AdmCmd: O Administrador %s lhe setou R$%d.",admnome,qnt);
    SendClientMessage(other, COLOR_LIGHTRED, string);

    format(string, sizeof(string), "AdmCmd: O administrador %s setou R$%d para %s.", admnome, qnt, PlayerName(other, 0));
	SendAdminMessage(COLOR_LIGHTRED,string);

    new strl[126];
	format(strl, 126, "%s setou R$%d para %s. [/setardinheiro]", PlayerName(playerid, 0), qnt, PlayerName(other, 0));
	LogCMD_dargrana(strl);
	return 1;
}

CMD:setararma(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
	new other,arma;
    if(sscanf(params, "ii", other, arma))
	{
	    SendClientMessage(playerid,COLOR_LIGHTRED,"USE: /setararma [Playerid] [Arma ID]");
	    return 1;
	}
	if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player já tem uma arma em mãos.");

	if(arma > 0 && arma < 47)
	{
	    new extra = 0;

	    EntregandoArmaSQL(other, arma, extra, 0, 0);

	    new admnome[24];
		if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
		else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

	    format(string,sizeof(string),"* O administrador %s lhe entregou uma %s.",admnome,GunNames[arma]);
	    SendClientMessage(other, COLOR_LIGHTRED, string);
	    format(string,sizeof(string),"* Você setou uma %s para %s.",GunNames[arma], PlayerName(other, 0));
	    SendClientMessage(other, COLOR_LIGHTRED, string);

		new admavisoarma[256];
	    format(admavisoarma,sizeof(admavisoarma),"AdmCmd: O administrador %s setou uma %s para %s.", admnome, GunNames[arma], PlayerName(other, 0));
	    SendAdminMessage(COLOR_LIGHTRED, admavisoarma);

		new strl[126];
		format(strl, 126, "%s entregou uma %s para %s. [/setararma]", PlayerName(playerid, 0), GunNames[arma], PlayerName(other, 0));
		LogCMD_dararma(strl);
	}
	return 1;
}


CMD:setarammo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
	new other,Arma,Ammo;
    if(sscanf(params, "iii", other, Arma, Ammo))
	{
	    SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /setarammo [Playerid] [Ammo ID] [Quantidade]");
	    SendClientMessage(playerid,COLOR_LIGHTRED,"{FF6347}[Ammo ID]:{FFFFFF} 1- 9mm 		 [Colt/Silenced/Deagle/Uzi/MP5/Tec9]");
		SendClientMessage(playerid,COLOR_LIGHTRED,"{FF6347}[Ammo ID]:{FFFFFF} 2 - Cartucho 	 [Shotgun]");
		SendClientMessage(playerid,COLOR_LIGHTRED,"{FF6347}[Ammo ID]:{FFFFFF} 3 - 5.56mm 	 [AK47/M4/County Rifle]");
		SendClientMessage(playerid,COLOR_LIGHTRED,"{FF6347}[Ammo ID]:{FFFFFF} 4 - 12.7x106mm [Sniper]");
	    return 1;
	}
    if(Arma == 1) PlayerInfo[other][pMun9mm] += Ammo;
	else if(Arma == 2) PlayerInfo[other][pMunCart] += Ammo;
	else if(Arma == 3) PlayerInfo[other][pMun556] += Ammo;
	else if(Arma == 4) PlayerInfo[other][pMun127] += Ammo;

    new admnome[24];
	if(PlayerInfo[playerid][pAdmin] > 3001) format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
	else format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));

    new strl[126];
	switch(Arma)
	{
	    case 1:
		{
			format(string, sizeof(string), "AdmCmd: O administrador %s [%d] entregou uma %d balas de 9mm para %s.", PlayerName(playerid, 0),playerid, Ammo, PlayerName(other, 0));
			SendAdminMessage(-1,string);
			format(string,sizeof(string),"* O administrador %s lhe entregou %d balas 9mm.",admnome,Ammo);
    		SendClientMessage(other, COLOR_LIGHTRED, string);
    		format(strl, 126, "%s entregou %d balas de 9mm para %s. [/setarammo]", admnome, Ammo, PlayerName(other, 0));
			SendClientMessage(playerid, COLOR_LIGHTRED, strl);
		}
	    case 2:
	    {
	        format(string, sizeof(string), "{FF6347}AdmCmd: O administrador %s [%d] entregou uma %d cartuxos para %s.", PlayerName(playerid, 0),playerid, Ammo, PlayerName(other, 0));
			SendAdminMessage(COLOR_LIGHTRED,string);
			format(string,sizeof(string),"* O administrador %s lhe entregou %d cartuchos.",admnome,Ammo);
    		SendClientMessage(other, COLOR_LIGHTRED, string);
    		format(strl, 126, "%s entregou %d cartuchos para %s. [/setarammo]", admnome, Ammo, PlayerName(other, 0));
			SendClientMessage(playerid, COLOR_LIGHTRED, strl);
	    }
	    case 3:
	    {
	        format(string, sizeof(string), "{FF6347}AdmCmd: O administrador %s [%d] entregou uma %d balas 5.56mm para %s.", PlayerName(playerid, 0),playerid, Ammo, PlayerName(other, 0));
			SendAdminMessage(COLOR_LIGHTRED,string);
			format(string,sizeof(string),"* O administrador %s lhe entregou uma %d balas 5.56mm.",PlayerName(playerid, 0),Ammo);
    		SendClientMessage(other, COLOR_LIGHTRED, string);
    		format(strl, 126, "%s entregou %d balas de 5.56mm para %s. [/setarammo]", admnome, Ammo, PlayerName(other, 0));
			SendClientMessage(playerid, COLOR_LIGHTRED, strl);
	    }
	    case 4:
	    {
	        format(string, sizeof(string), "{FF6347}AdmCmd: O administrador %s [%d] entregou uma %d balas 12.7x106mm para %s.", PlayerName(playerid, 0),playerid, Ammo, PlayerName(other, 0));
			SendAdminMessage(COLOR_LIGHTRED,string);
			format(string,sizeof(string),"* O administrador %s lhe entregou uma %d balas 12.7x106mm.",admnome,Ammo);
    		SendClientMessage(playerid, COLOR_LIGHTRED, string);
    		format(strl, 126, "%s entregou %d balas de 12.7x106mm para %s. [/setarammo]", admnome, Ammo, PlayerName(other, 0));

	    }
	}
	SCM(playerid, COLOR_LIGHTGREEN, "Munições setadas");
	LogCMD_dararma(strl);
	return 1;
}

CMD:pm(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(GetPVarInt(playerid, "TogPM") == 1)
    {
		if(PlayerInfo[playerid][pAdmin] >= 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} As suas PM's estão desativadas. (/tog pm) ou utilize /apm");
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} As suas PM's estão desativadas. (/tog pm)");
    }
	new opcao[256], var;
	if (sscanf(params, "I(9999)s[256]",var, opcao))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /pm [ID] [mensagem]");
		return 1;
	}
	else
	{
 		if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /pm [ID] [Mensagem]");
 		if(!strlen(opcao)) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /pm [ID] [Mensagem]");
 		if(var == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode enviar uma PM para sí mesmo.");
		if(!IsPlayerConnected(var)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido.");
    	if(!PlayerInfo[var][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido.");
    	if(!PlayerInfo[var][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido.");
    	if(PlayerInfo[playerid][pAdmin] < 3000)
    	{
    		if(GetPVarInt(var, "TogPM") == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} As PM's deste player estão desativadas.");
		}

		new admnome[24];
		if(PlayerInfo[playerid][pAdmin] > 1 && OutrasInfos[playerid][oAdminOnDuty] == 1)
		{
			format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
			format(string,sizeof(string),"(( PM enviada para %s (ID: %d): %s ))",PlayerName(var, 1),var,opcao);
	 		SendClientMessage(playerid, 0xFCF545FF,string);
	 		format(string,sizeof(string),"(( PM recebida de {FF8C00}%s {FFDC18} (ID: %d): %s  ))", admnome, playerid, opcao);
	 		SendClientMessage(var, 0xFFDC18FF,string);

			
		}
		else
		{
			format(admnome, sizeof(admnome), "%s", PlayerName(playerid, 0));
			format(string,sizeof(string),"(( PM enviada para %s (ID: %d): %s ))", PlayerName(var, 1),var,opcao);
	 		SendClientMessage(playerid, 0xFCF545FF,string);
	 		format(string,sizeof(string),"(( PM recebida de %s (ID: %d): %s  ))",PlayerName(playerid, 1),playerid, opcao);
	 		SendClientMessage(var, 0xFFDC18FF,string);
		}
	}
	return 1;
}

CMD:apm(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pTester] >= 1)
	{
		new opcao[256], var;
		if (sscanf(params, "I(9999)s[256]",var, opcao))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /apm [ID] [mensagem]");
			return 1;
		}
		else
		{
	 		if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /apm [ID] [Mensagem]");
	 		if(!strlen(opcao)) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /apm [ID] [Mensagem]");
	 		if(var == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode enviar uma PM para sí mesmo.");
			if(!IsPlayerConnected(var)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido.");
	    	if(!PlayerInfo[var][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido.");

			new admnome[24];
			format(admnome, sizeof(admnome), "%s", PlayerInfo[playerid][pNomeOOC]);
			format(string,sizeof(string),"(( APM enviada para %s (ID: %d): %s ))",PlayerName(var, 1),var,opcao);
	 		SendClientMessage(playerid, 0xFCF545FF,string);
	 		format(string,sizeof(string),"(( PM Administrativa recebida de {FF8C00}%s {FFDC18} (ID: %d): %s  ))", admnome, playerid, opcao);
	 		SendClientMessage(var, 0xFFDC18FF,string);

	 		return 1;
		}
	}
	return 1;
}

CMD:dobaixo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new opcao[256], str[256];
	if (sscanf(params, "s[256]", opcao)) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /do [descrição]");
	else
	{
	    format(str,sizeof(str),"* %s (( %s ))", opcao, PlayerName(playerid, 1));
		ProxDetector(7.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		LogCMD_do(str);
	}
	return 1;
}

CMD:mebaixo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new opcao[256], str[256];
	if (sscanf(params, "s[256]", opcao)) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /mebaixo [ação]");
	else
	{
        format(str,sizeof(str),"* %s %s", PlayerName(playerid, 1), opcao);
		ProxDetector(7.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		LogCMD_me(str);
	}
	return 1;
}

ALTCOMMAND:me->eu;
CMD:eu(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new opcao[256], str[256];
	if (sscanf(params, "s[256]", opcao)) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /me [ação]");
	else
	{
        format(str,sizeof(str),"* %s %s", PlayerName(playerid, 1), opcao);
		ProxDetector(18.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		LogCMD_me(str);
	}
	return 1;
}

CMD:do(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new opcao[256], str[256];
	if (sscanf(params, "s[256]", opcao)) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /do [descrição]");
	else
	{
	    format(str,sizeof(str),"* %s (( %s ))", opcao, PlayerName(playerid, 1));
		ProxDetector(18.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		LogCMD_do(str);
	}
	return 1;
}

CMD:b(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new opcao[256], str[256];
	if (sscanf(params, "s[256]", opcao)) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /b [texto]");
	else
	{
	    new foi = 0;
		if(PlayerInfo[playerid][pAdmin] > 0)
	    	if(OutrasInfos[playerid][oAdminOnDuty] == 1) { format(str,sizeof(str),"(( [%d] {587b95}%s{C8C8C8}: %s ))", playerid, PlayerName(playerid, 1), opcao); foi = 1; }

		if(PlayerInfo[playerid][pTester] > 0)
	    	if(OutrasInfos[playerid][oTesterOnDuty] == 1) { format(str,sizeof(str),"(( [%d] {587b95}%s{C8C8C8}: %s ))", playerid, PlayerName(playerid, 1), opcao); foi = 1; }

		if(foi == 0)
		{
			format(str,sizeof(str),"(( [%d] %s: %s ))", playerid, PlayerName(playerid, 1), opcao);
		}
		ProxDetector(10.0, playerid, str,COLOR_FADE2,COLOR_FADE2,COLOR_FADE2,COLOR_FADE2,COLOR_FADE2);
		LogCMD_b(str);
	}
	return 1;
}

CMD:palcopref(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] >= 5)
	{
	    if(StatusPalco == 0)
	    {
	        StatusPalco = 1;
			ObjPalco[0] = CreateDynamicObject(16092, 1472.28015, -1679.83911, 13.04093,   0.00000, 0.00000, 0.00000);
			ObjPalco[1] = CreateDynamicObject(16092, 1485.82019, -1679.83911, 13.04090,   0.00000, 0.00000, 0.00000);
			ObjPalco[2] = CreateDynamicObject(16092, 1479.04834, -1686.57324, 13.04090,   0.00000, 0.00000, 90.00000);
			ObjPalco[3] = CreateDynamicObject(16092, 1479.04834, -1673.09314, 13.04090,   0.00000, 0.00000, 90.00000);
			ObjPalco[4] = CreateDynamicObject(16092, 1479.04834, -1673.09314, 6.44090,   0.00000, 0.00000, 90.00000);
			ObjPalco[5] = CreateDynamicObject(16092, 1479.04834, -1686.57324, 6.42090,   0.00000, 0.00000, 90.00000);
			ObjPalco[6] = CreateDynamicObject(16092, 1472.28015, -1679.83911, 6.42090,   0.00000, 0.00000, 0.00000);
			ObjPalco[7] = CreateDynamicObject(16092, 1485.82019, -1679.83911, 6.40090,   0.00000, 0.00000, 0.00000);
			ObjPalco[8] = CreateDynamicObject(16000, 1479.94226, -1680.00854, 21.19600,   -90.00000, 0.00000, 0.00000);
			ObjPalco[9] = CreateDynamicObject(16000, 1479.98535, -1680.11060, 21.19600,   -90.00000, 0.00000, 180.00000);
			ObjPalco[10] = CreateDynamicObject(16000, 1478.90735, -1672.32312, 10.51910,   0.00000, 0.00000, -180.00000);
			ObjPalco[11] = CreateDynamicObject(2395, 1474.57056, -1672.33044, 14.45425,   0.00000, 0.00000, 0.00000);
			ObjPalco[12] = CreateDynamicObject(2395, 1473.60059, -1674.97925, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[13] = CreateDynamicObject(2395, 1477.32056, -1674.97925, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[14] = CreateDynamicObject(2395, 1481.04065, -1674.97925, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[15] = CreateDynamicObject(2395, 1483.44055, -1674.97925, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[16] = CreateDynamicObject(2395, 1471.96057, -1674.97925, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[17] = CreateDynamicObject(2395, 1483.44055, -1677.71924, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[18] = CreateDynamicObject(2395, 1483.44055, -1680.45923, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[19] = CreateDynamicObject(2395, 1483.44055, -1683.19922, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[20] = CreateDynamicObject(2395, 1483.44055, -1685.93921, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[21] = CreateDynamicObject(2395, 1483.44055, -1687.49915, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[22] = CreateDynamicObject(2395, 1481.04065, -1677.71924, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[23] = CreateDynamicObject(2395, 1481.04065, -1680.45923, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[24] = CreateDynamicObject(2395, 1481.04065, -1683.19922, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[25] = CreateDynamicObject(2395, 1481.04065, -1685.93921, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[26] = CreateDynamicObject(2395, 1481.04065, -1687.49915, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[27] = CreateDynamicObject(2395, 1477.32056, -1677.71924, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[28] = CreateDynamicObject(2395, 1477.32056, -1680.45923, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[29] = CreateDynamicObject(2395, 1477.32056, -1683.19922, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[30] = CreateDynamicObject(2395, 1477.32056, -1685.93921, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[31] = CreateDynamicObject(2395, 1477.32056, -1687.49915, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[32] = CreateDynamicObject(2395, 1473.60059, -1677.71924, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[33] = CreateDynamicObject(2395, 1473.60059, -1680.45923, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[34] = CreateDynamicObject(2395, 1473.60059, -1683.19922, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[35] = CreateDynamicObject(2395, 1473.60059, -1685.93921, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[36] = CreateDynamicObject(2395, 1473.60059, -1687.49915, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[37] = CreateDynamicObject(2395, 1471.96057, -1677.71924, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[38] = CreateDynamicObject(2395, 1471.96057, -1680.45923, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[39] = CreateDynamicObject(2395, 1471.96057, -1683.19922, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[40] = CreateDynamicObject(2395, 1471.96057, -1685.93921, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[41] = CreateDynamicObject(2395, 1471.96057, -1687.49915, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[42] = CreateDynamicObject(2232, 1473.67200, -1686.46338, 15.33050,   0.00000, 0.00000, 33.00000);
			ObjPalco[43] = CreateDynamicObject(2232, 1484.39783, -1686.68274, 15.33050,   0.00000, 0.00000, -33.00000);
			ObjPalco[44] = CreateDynamicObject(2491, 1479.76038, -1683.85291, 14.15540,   -11.00000, 0.00000, 0.00000);
			ObjPalco[45] = CreateDynamicObject(3876, 1472.58289, -1712.82141, -32.92000,   0.00000, 0.00000, 0.00000);
			ObjPalco[46] = CreateDynamicObject(3398, 1472.49878, -1712.49109, 13.03996,   0.00000, 0.00000, 0.00000);
			ObjPalco[47] = CreateDynamicObject(2229, 1471.86841, -1712.94348, 21.13860,   0.00000, 90.00000, 0.00000);
			ObjPalco[48] = CreateDynamicObject(2229, 1471.86841, -1712.94348, 21.49860,   0.00000, 90.00000, 0.00000);
			ObjPalco[49] = CreateDynamicObject(2229, 1471.86841, -1712.94348, 20.77860,   0.00000, 90.00000, 0.00000);
			ObjPalco[50] = CreateDynamicObject(2229, 1471.86841, -1712.94348, 20.41860,   0.00000, 90.00000, 0.00000);
			ObjPalco[51] = CreateDynamicObject(3398, 1485.55505, -1712.47937, 13.03890,   0.00000, 0.00000, 0.00000);
			ObjPalco[52] = CreateDynamicObject(3876, 1485.53113, -1712.73962, -32.92000,   0.00000, 0.00000, 0.00000);
			ObjPalco[53] = CreateDynamicObject(2229, 1484.78918, -1712.79004, 21.49860,   0.00000, 90.00000, 0.00000);
			ObjPalco[54] = CreateDynamicObject(2229, 1484.78918, -1712.79004, 21.13860,   0.00000, 90.00000, 0.00000);
			ObjPalco[55] = CreateDynamicObject(2229, 1484.78918, -1712.79004, 20.77860,   0.00000, 90.00000, 0.00000);
			ObjPalco[56] = CreateDynamicObject(2229, 1484.78918, -1712.79004, 20.41860,   0.00000, 90.00000, 0.00000);
			ObjPalco[57] = CreateDynamicObject(2229, 1486.18787, -1712.31653, 20.77860,   0.00000, 90.00000, -180.00000);
			ObjPalco[58] = CreateDynamicObject(2229, 1486.18787, -1712.31653, 21.13860,   0.00000, 90.00000, -180.00000);
			ObjPalco[59] = CreateDynamicObject(2229, 1486.18787, -1712.31653, 21.49860,   0.00000, 90.00000, -180.00000);
			ObjPalco[60] = CreateDynamicObject(2229, 1486.18787, -1712.31653, 20.41860,   0.00000, 90.00000, -180.00000);
			ObjPalco[61] = CreateDynamicObject(2229, 1473.25903, -1712.37256, 20.77860,   0.00000, 90.00000, -180.00000);
			ObjPalco[62] = CreateDynamicObject(2229, 1473.25903, -1712.37256, 21.13860,   0.00000, 90.00000, -180.00000);
			ObjPalco[63] = CreateDynamicObject(2229, 1473.25903, -1712.37256, 21.49860,   0.00000, 90.00000, -180.00000);
			ObjPalco[64] = CreateDynamicObject(2229, 1473.25903, -1712.37256, 20.41860,   0.00000, 90.00000, -180.00000);
			ObjPalco[65] = CreateDynamicObject(11472, 1472.62219, -1678.60693, 11.70480,   0.00000, 0.00000, 0.00000);
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Palco da prefeitura criado.");
		}
		else
		{
		    StatusPalco = 0;
		    for(new i = 0; i < 66; i++) if(IsValidDynamicObject(ObjPalco[i])) DestroyDynamicObject(ObjPalco[i]);
		    SendClientMessage(playerid, COLOR_WHITE, "{33AA33}Você destruiu o palco da prefeitura de LS.");
		}
	}
	return 1;
}

COMMAND:gmx(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 3000) return 1;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		SalvarPlayer(i);
	}
	GiveGMX();
	return 1;
}


COMMAND:complexosint(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
    if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
	ShowInterioresDialog(playerid);
	return 1;
}

CMD:empint(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
    if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
    ShowEmpInterioresDialog(playerid);
    return 1;
}

CMD:empint1(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
    if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
    ShowEmpInterioresDialog1(playerid);
    return 1;
}

CMD:empint2(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
    if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
    ShowEmpInterioresDialog2(playerid);
    return 1;
}

CMD:empintv(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
    if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
    ShowEmpVInterioresDialog(playerid);
    return 1;
}

CMD:casasint(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
    if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
    ShowHouseInterioresDialog(playerid);
    return 1;
}

CMD:casasint1(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
    if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
    ShowCasasInterioresDialog(playerid);
    return 1;
}

CMD:casasint2(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
    if(!OutrasInfos[playerid][oAdminOnDuty] && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
    ShowCasasInterioresDialog1(playerid);
    return 1;
}

CMD:irls(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pTester] < 1) return 1;
    if((!OutrasInfos[playerid][oAdminOnDuty] && !OutrasInfos[playerid][oTesterOnDuty] ) && PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve estar em modo de trabalho para utilizar este comando. '/aduty'.");
    PlayerInfo[playerid][pEntrouCasa] = -1;
    PlayerInfo[playerid][pEntrouEmpresa] = -1;
    PlayerInfo[playerid][pEntrouComplexo] = -1;
    PlayerInfo[playerid][pEntrouGaragem] = -1;
    EntrouInt[playerid] = -1;
    TextDrawHideForPlayer(playerid,InterruptorDraw);

    if(IsPlayerInAnyVehicle(playerid))
    {
    	SetVehiclePos(GetPlayerVehicleID(playerid),1743.1464,-1859.5961,13.4141);
	    SetPlayerVirtualWorld(playerid,0);
	    SetPlayerInterior(playerid,0);
	    LinkVehicleToInterior(GetPlayerVehicleID(playerid),0);
	    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid),0);
	    SetVehicleZAngle(GetPlayerVehicleID(playerid), 84.0);
   	}
    else
    {
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerPos(playerid, 1743.1464,-1859.5961,13.4141);
	}

	TogglePlayerControllable(playerid, 1);

	if(ouvindoxmradio[playerid] > 0)
 	{
        StopAudioStreamForPlayer(playerid);
		ouvindoxmradio[playerid] = 0;
		ouvindoxmradioID[playerid] = 0;
	}
	return 1;
}

stock PlayerName(playerid, togmascara)
{
    new pname[24], result[256];
	if(PlayerInfo[playerid][pLogado] > 0)
	{
		if(togmascara == 0)
		{
			//GetPlayerName(playerid, pname, sizeof(pname));
			format(pname,sizeof(pname),"%s",PlayerInfo[playerid][pNomeP]);

			result = str_replace("_", " ", pname);
			return result;
		}
		else
		{
		    if(PlayerInfo[playerid][pMascaraU] == 1)
		    {
		        format(result,sizeof(result),"Mascarado %d",PlayerInfo[playerid][pMascID]);
				return result;
		    }
		    else if(PlayerInfo[playerid][pMascaraU] == 2)
		    {
		        format(pname,sizeof(pname),"%s",PlayerInfo[playerid][pNomeF]);
				result = str_replace("_", " ", pname);
				return result;
		    }
			else
			{
			    format(pname,sizeof(pname),"%s",PlayerInfo[playerid][pNomeP]);
				result = str_replace("_", " ", pname);
				return result;
			}
		}
	}
	else
	{
	    GetPlayerName(playerid, pname, sizeof(pname));
	    result = str_replace("_", " ", pname);
	    return result;
	}
}

forward LoadAccountInfo(extraid);
public LoadAccountInfo(extraid)
{
		new tmp[130];
		cache_get_field_content(0, "Level", tmp);		PlayerInfo[extraid][pLevel] = strval(tmp);
		cache_get_field_content(0, "Gender", tmp);		PlayerInfo[extraid][pGender] = strval(tmp);
		cache_get_field_content(0, "Birthdate", tmp); 		format(PlayerInfo[extraid][pAge], 50, "%s", tmp);
		cache_get_field_content(0, "Admin", tmp);		PlayerInfo[extraid][pAdmin] = strval(tmp);
		cache_get_field_content(0, "Skin", tmp);		PlayerInfo[extraid][pSkin] = strval(tmp);
		cache_get_field_content(0, "PosX", tmp);		PlayerInfo[extraid][pPos][0] = floatstr(tmp);
		cache_get_field_content(0, "PosY", tmp);		PlayerInfo[extraid][pPos][1] = floatstr(tmp);
		cache_get_field_content(0, "PosZ", tmp);		PlayerInfo[extraid][pPos][2] = floatstr(tmp);
		cache_get_field_content(0, "PosA", tmp);		PlayerInfo[extraid][pPos][3] = floatstr(tmp);
		cache_get_field_content(0, "registrado", tmp);	PlayerInfo[extraid][pRegistrado] = strval(tmp);
		cache_get_field_content(0, "Health", tmp);		PlayerInfo[extraid][pHealth] = floatstr(tmp);
		cache_get_field_content(0, "Armour", tmp);		PlayerInfo[extraid][pArmour] = floatstr(tmp);
		cache_get_field_content(0, "Interior", tmp);	PlayerInfo[extraid][pInterior] = strval(tmp);
		cache_get_field_content(0, "World", tmp);		PlayerInfo[extraid][pWorld] = strval(tmp);
		cache_get_field_content(0, "Tutorial", tmp);	PlayerInfo[extraid][pTutorial] = strval(tmp);
		cache_get_field_content(0, "EntrouCasa", tmp);	PlayerInfo[extraid][pEntrouCasa] = strval(tmp);
		cache_get_field_content(0, "EntrouComplexo", tmp);PlayerInfo[extraid][pEntrouComplexo] = strval(tmp);
		cache_get_field_content(0, "Grana", tmp);		PlayerInfo[extraid][pGrana] = strval(tmp);
		cache_get_field_content(0, "GranaSuja", tmp);		PlayerInfo[extraid][pGranaSuja] = strval(tmp);
		cache_get_field_content(0, "Ouro", tmp);		PlayerInfo[extraid][pOuro] = strval(tmp);
		cache_get_field_content(0, "Prata", tmp);		PlayerInfo[extraid][pPrata] = strval(tmp);
		cache_get_field_content(0, "Bronze", tmp);		PlayerInfo[extraid][pBronze] = strval(tmp);
		cache_get_field_content(0, "Morto", tmp);		PlayerInfo[extraid][pMorto] = strval(tmp);
		cache_get_field_content(0, "UltimoLogin", tmp);	format(PlayerInfo[extraid][pUltimoLogin], 50, "%s", tmp);
		cache_get_field_content(0, "EntrouEmpresa", tmp);PlayerInfo[extraid][pEntrouEmpresa] = strval(tmp);
		cache_get_field_content(0, "ChaveEmprestada", tmp);PlayerInfo[extraid][pChaveEmprestada] = strval(tmp);
		cache_get_field_content(0, "Fac", tmp);			PlayerInfo[extraid][pFac] = strval(tmp);
		cache_get_field_content(0, "Job", tmp);			PlayerInfo[extraid][pJob] = strval(tmp);
		cache_get_field_content(0, "Bomba", tmp);			PlayerInfo[extraid][pBomba] = strval(tmp);
		cache_get_field_content(0, "C4", tmp);			PlayerInfo[extraid][pC4] = strval(tmp);
		cache_get_field_content(0, "TNT", tmp);			PlayerInfo[extraid][pTNT] = strval(tmp);
		cache_get_field_content(0, "PecasMecanicas0", tmp);PlayerInfo[extraid][pPecasMecanicas][0] = strval(tmp);
		cache_get_field_content(0, "PecasMecanicas1", tmp);PlayerInfo[extraid][pPecasMecanicas][1] = strval(tmp);
		cache_get_field_content(0, "PecasMecanicas2", tmp);PlayerInfo[extraid][pPecasMecanicas][2] = strval(tmp);
		cache_get_field_content(0, "PecasMecanicas3", tmp);PlayerInfo[extraid][pPecasMecanicas][3] = strval(tmp);
		cache_get_field_content(0, "PecasMecanicas4", tmp);PlayerInfo[extraid][pPecasMecanicas][4] = strval(tmp);
		cache_get_field_content(0, "PecasMecanicas5", tmp);PlayerInfo[extraid][pPecasMecanicas][5] = strval(tmp);
		cache_get_field_content(0, "PecasMecanicas6", tmp);PlayerInfo[extraid][pPecasMecanicas][6] = strval(tmp);
		cache_get_field_content(0, "bateria", tmp);    PlayerInfo[extraid][pBateria] = strval(tmp);
		cache_get_field_content(0, "TempoPLD", tmp);	PlayerInfo[extraid][pTempoPLD] = strval(tmp);
		cache_get_field_content(0, "ToolKit", tmp);		PlayerInfo[extraid][pToolKit] = strval(tmp);
		cache_get_field_content(0, "ArrombarDNV", tmp);	PlayerInfo[extraid][pArrombarDNV] = strval(tmp);
		cache_get_field_content(0, "pArrombarDNV_C", tmp);PlayerInfo[extraid][pArrombarDNV_C] = strval(tmp);
		cache_get_field_content(0, "Galao", tmp);		PlayerInfo[extraid][pGalao] = strval(tmp);
		cache_get_field_content(0, "ArmaMao", tmp); PlayerInfo[extraid][pArmaMao] = strval(tmp);
		cache_get_field_content(0, "Mun9mm", tmp); PlayerInfo[extraid][pMun9mm] = strval(tmp);
		cache_get_field_content(0, "Mun556", tmp); PlayerInfo[extraid][pMun556] = strval(tmp);
		cache_get_field_content(0, "MunCart", tmp); PlayerInfo[extraid][pMunCart] = strval(tmp);
		cache_get_field_content(0, "Mun127", tmp); PlayerInfo[extraid][pMun127] = strval(tmp);
		cache_get_field_content(0, "pSlot1", tmp); PlayerInfo[extraid][pSlot1] = strval(tmp);
		cache_get_field_content(0, "pSlot2", tmp); PlayerInfo[extraid][pSlot2] = strval(tmp);
		cache_get_field_content(0, "pSlot3", tmp); PlayerInfo[extraid][pSlot3] = strval(tmp);
		cache_get_field_content(0, "pSlot4", tmp); PlayerInfo[extraid][pSlot4] = strval(tmp);
		cache_get_field_content(0, "pSlot5", tmp); PlayerInfo[extraid][pSlot5] = strval(tmp);
		cache_get_field_content(0, "pSlot1a", tmp); PlayerInfo[extraid][pSlot1a] = strval(tmp);
		cache_get_field_content(0, "pSlot2a", tmp); PlayerInfo[extraid][pSlot2a] = strval(tmp);
		cache_get_field_content(0, "pSlot3a", tmp); PlayerInfo[extraid][pSlot3a] = strval(tmp);
		cache_get_field_content(0, "pSlot4a", tmp); PlayerInfo[extraid][pSlot4a] = strval(tmp);
		cache_get_field_content(0, "pSlot5a", tmp); PlayerInfo[extraid][pSlot5a] = strval(tmp);
		cache_get_field_content(0, "FacCargo", tmp); PlayerInfo[extraid][pFacCargo] = strval(tmp);
		cache_get_field_content(0, "pEmServico", tmp); PlayerInfo[extraid][pEmServico] = strval(tmp);
		cache_get_field_content(0, "pPayDay", tmp); PlayerInfo[extraid][pPayDay] = strval(tmp);
		cache_get_field_content(0, "pDutySkin", tmp); PlayerInfo[extraid][pDutySkin] = strval(tmp);
		cache_get_field_content(0, "pColde", tmp); PlayerInfo[extraid][pColde] = strval(tmp);
		cache_get_field_content(0, "pColdreA", tmp); PlayerInfo[extraid][pColdreA] = strval(tmp);
		cache_get_field_content(0, "pArmario1", tmp); PlayerInfo[extraid][pArmario1] = strval(tmp);
		cache_get_field_content(0, "pArmario2", tmp); PlayerInfo[extraid][pArmario2] = strval(tmp);
		cache_get_field_content(0, "pArmario3", tmp); PlayerInfo[extraid][pArmario3] = strval(tmp);
		cache_get_field_content(0, "pArmario4", tmp); PlayerInfo[extraid][pArmario4] = strval(tmp);
		cache_get_field_content(0, "pArmario5", tmp); PlayerInfo[extraid][pArmario5] = strval(tmp);
		cache_get_field_content(0, "pArmario6", tmp); PlayerInfo[extraid][pArmario6] = strval(tmp);
		cache_get_field_content(0, "pArmario7", tmp); PlayerInfo[extraid][pArmario7] = strval(tmp);
		cache_get_field_content(0, "pArmario8", tmp); PlayerInfo[extraid][pArmario8] = strval(tmp);
		cache_get_field_content(0, "pArmario9", tmp); PlayerInfo[extraid][pArmario9] = strval(tmp);
		cache_get_field_content(0, "pArmario10", tmp); PlayerInfo[extraid][pArmario10] = strval(tmp);

		cache_get_field_content(0, "pArm9mm", tmp); PlayerInfo[extraid][pArm9mm] = strval(tmp);
		cache_get_field_content(0, "pArm556", tmp); PlayerInfo[extraid][pArm556] = strval(tmp);
		cache_get_field_content(0, "pArmCart", tmp); PlayerInfo[extraid][pArmCart] = strval(tmp);
		cache_get_field_content(0, "pArm127", tmp); PlayerInfo[extraid][pArm127] = strval(tmp);
	  	cache_get_field_content(0, "pPrisao", tmp); PlayerInfo[extraid][pPrisao] = strval(tmp);
		cache_get_field_content(0, "pTemPreso", tmp); PlayerInfo[extraid][pTemPreso] = strval(tmp);
	 	cache_get_field_content(0, "pTester", tmp); PlayerInfo[extraid][pTester] = strval(tmp);
	 	cache_get_field_content(0, "pSalarios", tmp); PlayerInfo[extraid][pSalarios] = strval(tmp);
		cache_get_field_content(0, "pAceitoSos", tmp); PlayerInfo[extraid][pAceitoSos] = strval(tmp);
		cache_get_field_content(0, "pNomeOOC", tmp); format(PlayerInfo[extraid][pNomeOOC], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage0", tmp); format(PlayerInfo[extraid][pDamage0], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage1", tmp); format(PlayerInfo[extraid][pDamage1], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage2", tmp); format(PlayerInfo[extraid][pDamage2], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage3", tmp); format(PlayerInfo[extraid][pDamage3], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage4", tmp); format(PlayerInfo[extraid][pDamage4], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage5", tmp); format(PlayerInfo[extraid][pDamage5], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage6", tmp); format(PlayerInfo[extraid][pDamage6], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage7", tmp); format(PlayerInfo[extraid][pDamage7], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage8", tmp); format(PlayerInfo[extraid][pDamage8], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage9", tmp); format(PlayerInfo[extraid][pDamage9], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage10", tmp); format(PlayerInfo[extraid][pDamage10], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage11", tmp); format(PlayerInfo[extraid][pDamage11], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage12", tmp); format(PlayerInfo[extraid][pDamage12], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage13", tmp); format(PlayerInfo[extraid][pDamage13], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage14", tmp); format(PlayerInfo[extraid][pDamage14], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage15", tmp); format(PlayerInfo[extraid][pDamage15], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage16", tmp); format(PlayerInfo[extraid][pDamage16], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage17", tmp); format(PlayerInfo[extraid][pDamage17], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage18", tmp); format(PlayerInfo[extraid][pDamage18], 50, "%s", tmp);
		cache_get_field_content(0, "pDamage19", tmp); format(PlayerInfo[extraid][pDamage19], 50, "%s", tmp);
		cache_get_field_content(0, "pBanco", tmp); PlayerInfo[extraid][pBanco] = strval(tmp);
		cache_get_field_content(0, "pHealthMax", tmp); 	PlayerInfo[extraid][pHealthMax] = strval(tmp);
		cache_get_field_content(0, "pChatStyle", tmp); 	PlayerInfo[extraid][pChatStyle] = strval(tmp);
		cache_get_field_content(0, "pPontos", tmp); 	PlayerInfo[extraid][pPontos] = strval(tmp);
		cache_get_field_content(0, "pKickAll", tmp); 	PlayerInfo[extraid][pKickAll] = strval(tmp);
		cache_get_field_content(0, "pBanAll", tmp); 	PlayerInfo[extraid][pBanAll] = strval(tmp);
		cache_get_field_content(0, "pBanido", tmp); 	PlayerInfo[extraid][pBanido] = strval(tmp);
		cache_get_field_content(0, "pWalkStyle", tmp); 	PlayerInfo[extraid][pWalkStyle] = strval(tmp);
		cache_get_field_content(0, "pDoador", tmp); 	PlayerInfo[extraid][pDoador] = strval(tmp);
		cache_get_field_content(0, "pDoadorTempo", tmp); 	PlayerInfo[extraid][pDoadorTempo] = strval(tmp);
		cache_get_field_content(0, "pChangeNames", tmp); PlayerInfo[extraid][pChangeNames] = strval(tmp);
		cache_get_field_content(0, "pSavings", tmp); 	PlayerInfo[extraid][pSavings] = strval(tmp);
		cache_get_field_content(0, "pForca", tmp); 		PlayerInfo[extraid][pForca] = strval(tmp);
		cache_get_field_content(0, "pRadio", tmp); 		PlayerInfo[extraid][pRadio] = strval(tmp);
        cache_get_field_content(0, "pRadioChan", tmp);  PlayerInfo[extraid][pRadioChan] = strval(tmp);
        cache_get_field_content(0, "pRadioChan2", tmp);  PlayerInfo[extraid][pRadioChan2] = strval(tmp);
	 	cache_get_field_content(0, "pMascara", tmp); 	PlayerInfo[extraid][pMascara] = strval(tmp);
	 	cache_get_field_content(0, "pMascaraU", tmp); 	PlayerInfo[extraid][pMascaraU] = strval(tmp);
	 	cache_get_field_content(0, "pMascID", tmp);  	PlayerInfo[extraid][pMascID] = strval(tmp);
	  	cache_get_field_content(0, "pNomeP", tmp); 		format(PlayerInfo[extraid][pNomeP],24,"%s",tmp);
	   	cache_get_field_content(0, "pAvisos", tmp); 		PlayerInfo[extraid][pAvisos] = strval(tmp);
		cache_get_field_content(0, "pAviso1", tmp); 		format(PlayerInfo[extraid][pAviso1],24,"%s",tmp);
		cache_get_field_content(0, "pAviso2", tmp); 		format(PlayerInfo[extraid][pAviso2],24,"%s",tmp);
		cache_get_field_content(0, "pAviso3", tmp); 		format(PlayerInfo[extraid][pAviso3],24,"%s",tmp);
		cache_get_field_content(0, "pMenosDanoTiro", tmp);  PlayerInfo[extraid][pMenosDanoTiro] = strval(tmp);
		cache_get_field_content(0, "pDrogaTime", tmp);  	PlayerInfo[extraid][pDrogaTime] = strval(tmp);
		cache_get_field_content(0, "pTremorAtirar", tmp);  	PlayerInfo[extraid][pTremorAtirar] = strval(tmp);
		cache_get_field_content(0, "pUsouDroga", tmp);  	PlayerInfo[extraid][pUsouDroga] = strval(tmp);
		cache_get_field_content(0, "pSkillTiro", tmp);  	PlayerInfo[extraid][pSkillTiro] = strval(tmp);
		cache_get_field_content(0, "pColdreX", tmp);  	PlayerInfo[extraid][pColdreX] = floatstr(tmp);
		cache_get_field_content(0, "pColdreY", tmp);  	PlayerInfo[extraid][pColdreY] = floatstr(tmp);
		cache_get_field_content(0, "pColdreZ", tmp);  	PlayerInfo[extraid][pColdreZ] = floatstr(tmp);
		cache_get_field_content(0, "pColdreRX", tmp);  	PlayerInfo[extraid][pColdreRX] = floatstr(tmp);
		cache_get_field_content(0, "pColdreRY", tmp);  	PlayerInfo[extraid][pColdreRY] = floatstr(tmp);
		cache_get_field_content(0, "pColdreRZ", tmp);  	PlayerInfo[extraid][pColdreRZ] = floatstr(tmp);
		cache_get_field_content(0, "pColdreBone", tmp);  	PlayerInfo[extraid][pColdreBone] = strval(tmp);
		cache_get_field_content(0, "pDriveLic", tmp);  		PlayerInfo[extraid][pDriveLic] = strval(tmp);
		cache_get_field_content(0, "pWepLic", tmp);  		PlayerInfo[extraid][pWepLic] = strval(tmp);
		cache_get_field_content(0, "pFlyLic", tmp);  		PlayerInfo[extraid][pFlyLic] = strval(tmp);
		cache_get_field_content(0, "pTruckLic", tmp);  		PlayerInfo[extraid][pTruckLic] = strval(tmp);
		cache_get_field_content(0, "pCigarros", tmp);  		PlayerInfo[extraid][pCigarros] = strval(tmp);
		cache_get_field_content(0, "pSavingsGerando", tmp);  PlayerInfo[extraid][pSavingsGerando] = strval(tmp);
		cache_get_field_content(0, "pLutaStyle", tmp);  PlayerInfo[extraid][pLutaStyle] = strval(tmp);
		cache_get_field_content(0, "pBoombox", tmp);  PlayerInfo[extraid][pBoombox] = strval(tmp);
		cache_get_field_content(0, "pPlacas", tmp);  PlayerInfo[extraid][pPlacas] = strval(tmp);
		cache_get_field_content(0, "pCasasDeletadas", tmp);  PlayerInfo[extraid][pCasasDeletadas] = strval(tmp);
		cache_get_field_content(0, "pJobTempo", tmp);  PlayerInfo[extraid][pJobTempo] = strval(tmp);
		cache_get_field_content(0, "pRaspador", tmp);  PlayerInfo[extraid][pRaspador] = strval(tmp);
		cache_get_field_content(0, "pJobInPd", tmp);  PlayerInfo[extraid][pJobInPd] = strval(tmp);
		cache_get_field_content(0, "trafico", tmp);  PlayerInfo[extraid][pTrafico] = strval(tmp);
		cache_get_field_content(0, "FabricouDroga", tmp); PlayerInfo[extraid][pFabricouD] = strval(tmp);
		cache_get_field_content(0, "CortaRem", tmp); PlayerInfo[extraid][pCortaRem] = strval(tmp);
		cache_get_field_content(0, "pHabDrug", tmp);  PlayerInfo[extraid][pHabDrug] = strval(tmp);
		cache_get_field_content(0, "pArmasResetadas", tmp);  PlayerInfo[extraid][pArmasResetadas] = strval(tmp);
		cache_get_field_content(0, "pEntrouGaragem", tmp);	PlayerInfo[extraid][pEntrouGaragem] = strval(tmp);
		cache_get_field_content(0, "pCelularModel", tmp);	CelularData[extraid][celModelo] = strval(tmp);
		cache_get_field_content(0, "Celular", tmp); 		CelularData[extraid][celNumero] = strval(tmp);
		cache_get_field_content(0, "CelularL", tmp); 		CelularData[extraid][celModo] = strval(tmp);
		cache_get_field_content(0, "CelularRing", tmp);  	CelularData[extraid][celRingTone] = strval(tmp);
		cache_get_field_content(0, "CelularPlano", tmp);  	CelularData[extraid][celPlano] = strval(tmp);
		cache_get_field_content(0, "CelularTPlano", tmp);  CelularData[extraid][celTPlano] = strval(tmp);
		cache_get_field_content(0, "CelMinutos", tmp);  	CelularData[extraid][celMinutos] = strval(tmp);
		cache_get_field_content(0, "CelSMSs", tmp);  		CelularData[extraid][celSMSs] = strval(tmp);
		cache_get_field_content(0, "CelTotalPD", tmp);  	CelularData[extraid][celTotalPD] = strval(tmp);
		cache_get_field_content(0, "AjudaInicial", tmp);  PlayerInfo[extraid][pAjudaInicial] = strval(tmp);
		cache_get_field_content(0, "pTomouAlgumTiro", tmp);  PlayerInfo[extraid][pTomouAlgumTiro] = strval(tmp);
		cache_get_field_content(0, "pTomouTiroPesado", tmp);  PlayerInfo[extraid][pTomouTiroPesado] = strval(tmp);
		cache_get_field_content(0, "pTomouTiroBrancas", tmp);  PlayerInfo[extraid][pTomouTiroBrancas] = strval(tmp);
		cache_get_field_content(0, "pConvenio", tmp);  PlayerInfo[extraid][pConvenio] = strval(tmp);
		cache_get_field_content(0, "pTempoMorto", tmp);  PlayerInfo[extraid][pTempoMorto] = strval(tmp);
		cache_get_field_content(0, "pAjudaInicialDim", tmp);  PlayerInfo[extraid][pAjudaInicialDim] = strval(tmp);
		

		cache_get_field_content(0, "Peso", tmp);  PlayerInfo[extraid][pPeso] = strval(tmp);
		cache_get_field_content(0, "Altura", tmp);  PlayerInfo[extraid][pAltura] = strval(tmp);
		cache_get_field_content(0, "Etnia", tmp);  PlayerInfo[extraid][pEtnia] = strval(tmp);
		cache_get_field_content(0, "Olhos", tmp);  PlayerInfo[extraid][pOlhos] = strval(tmp);
		cache_get_field_content(0, "Cabelo", tmp);  PlayerInfo[extraid][pCabelo] = strval(tmp);

		cache_get_field_content(0, "Fome", tmp);  PlayerInfo[extraid][pFome] = strval(tmp);
		cache_get_field_content(0, "Sede", tmp);  PlayerInfo[extraid][pSede] = strval(tmp);

		cache_get_field_content(0, "pAlgemado", tmp);  OutrasInfos[extraid][oAlgemado] = strval(tmp);
		

        cache_get_field_content(0, "FactionTeam", tmp);  PlayerInfo[extraid][pFactionTeam] = strval(tmp);
        cache_get_field_content(0, "BanTeam", tmp);  PlayerInfo[extraid][pBanTeam] = strval(tmp);
        cache_get_field_content(0, "RefundTeam", tmp);  PlayerInfo[extraid][pRefundTeam] = strval(tmp);
        cache_get_field_content(0, "PropertyTeam", tmp);  PlayerInfo[extraid][pPropertyTeam] = strval(tmp);
        cache_get_field_content(0, "dog", tmp);  PetData[extraid][petModelID] = strval(tmp);


        cache_get_field_content(0, "desmanx", tmp);  OutrasInfos[extraid][oDesmancheX] = floatstr(tmp);
        cache_get_field_content(0, "desmany", tmp);  OutrasInfos[extraid][oDesmancheY] = floatstr(tmp);
        cache_get_field_content(0, "desmanz", tmp);  OutrasInfos[extraid][oDesmancheZ] = floatstr(tmp);
        cache_get_field_content(0, "desmanr", tmp);  OutrasInfos[extraid][oDesmancheR] = floatstr(tmp);
        cache_get_field_content(0, "tempodesman", tmp);  OutrasInfos[extraid][oDesmancheTime] = strval(tmp);

        cache_get_field_content(0, "lavax", tmp);  OutrasInfos[extraid][oLavagemX] = floatstr(tmp);
        cache_get_field_content(0, "lavay", tmp);  OutrasInfos[extraid][oLavagemY] = floatstr(tmp);
        cache_get_field_content(0, "lavaz", tmp);  OutrasInfos[extraid][oLavagemZ] = floatstr(tmp);
        cache_get_field_content(0, "lavar", tmp);  OutrasInfos[extraid][oLavagemR] = floatstr(tmp);

        if(PlayerInfo[extraid][pBanido] == 1)
		{
			mysql_format(Pipeline, szQuery, sizeof(szQuery), "SELECT * FROM `a_banrecord` WHERE `PlayerID` = '%d' ORDER BY banrec DESC LIMIT 1", PlayerInfo[extraid][pID]);
			mysql_function_query(Pipeline, szQuery, true, "OnQueryFinish", "ii", THREAD_LOAD_BANIDO, extraid);
		    return 1;
		}

        if(PlayerInfo[extraid][pRegistrado] != 0 || PlayerInfo[extraid][pLevel] > 0)
		{
		    AcabouDeLogarVida[extraid] = 15;
			SetPlayerScore(extraid, PlayerInfo[extraid][pLevel]);
			SetPlayerHealth(extraid, PlayerInfo[extraid][pHealth]);
			P_Health[extraid] = PlayerInfo[extraid][pHealth];
			God_VidaAnterior2[extraid] = PlayerInfo[extraid][pHealth];
			God_Aviso2[extraid] = 0;

			P_Armour[extraid] = PlayerInfo[extraid][pArmour];

			SetPlayerArmour_CA(extraid, PlayerInfo[extraid][pArmour]);

			//======================================================================

			PreloadAnimLib(extraid,"CRACK"); PreloadAnimLib(extraid,"CARRY");
			PreloadAnimLib(extraid,"SWEET"); PreloadAnimLib(extraid,"PED");
			PreloadAnimLib(extraid,"RAPPING"); PreloadAnimLib(extraid,"COP_AMBIENT");
			PreloadAnimLib(extraid,"DEALER"); PreloadAnimLib(extraid,"BEACH");
			PreloadAnimLib(extraid,"ON_LOOKERS"); PreloadAnimLib(extraid,"SUNBATHE");
			PreloadAnimLib(extraid,"RIOT"); PreloadAnimLib(extraid,"SHOP");
			PreloadAnimLib(extraid,"PARACHUTE"); PreloadAnimLib(extraid,"GHANDS");
			PreloadAnimLib(extraid,"MEDIC"); PreloadAnimLib(extraid,"MISC");
			PreloadAnimLib(extraid,"SWAT"); PreloadAnimLib(extraid,"GANGS");
			PreloadAnimLib(extraid,"BOMBER"); PreloadAnimLib(extraid,"FOOD");
			PreloadAnimLib(extraid,"PARK"); PreloadAnimLib(extraid,"GRAVEYARD");
			PreloadAnimLib(extraid,"KISSING"); PreloadAnimLib(extraid,"KNIFE");
			PreloadAnimLib(extraid,"FINALE"); PreloadAnimLib(extraid,"SMOKING");
			PreloadAnimLib(extraid,"BLOWJOBZ"); PreloadAnimLib(extraid,"SNM");
			PreloadAnimLib(extraid,"LOWRIDER"); PreloadAnimLib(extraid,"DANCING");
			PreloadAnimLib(extraid,"ROB_BANK"); PreloadAnimLib(extraid,"POLICE");

			SetPlayerSkillLevel(extraid, WEAPONSKILL_PISTOL, 900);
			SetPlayerSkillLevel(extraid, WEAPONSKILL_PISTOL_SILENCED, 1000);
			SetPlayerSkillLevel(extraid, WEAPONSKILL_DESERT_EAGLE, 1000);
			SetPlayerSkillLevel(extraid, WEAPONSKILL_SHOTGUN, 1000);
			SetPlayerSkillLevel(extraid, WEAPONSKILL_SAWNOFF_SHOTGUN, 900);
			SetPlayerSkillLevel(extraid, WEAPONSKILL_SPAS12_SHOTGUN, 1000);
			SetPlayerSkillLevel(extraid, WEAPONSKILL_MICRO_UZI, 900);
			SetPlayerSkillLevel(extraid, WEAPONSKILL_MP5, 1000);
			SetPlayerSkillLevel(extraid, WEAPONSKILL_AK47, 1000);
			SetPlayerSkillLevel(extraid, WEAPONSKILL_M4, 1000);
			SetPlayerSkillLevel(extraid, WEAPONSKILL_SNIPERRIFLE, 1000);

			SetPlayerDrunkLevel(extraid,0);

			new pname[24];
			GetPlayerName(extraid, pname, sizeof(pname));
			format(PlayerInfo[extraid][pNomeP],24,"%s",pname);

			new infopos = 0;
			if(PlayerInfo[extraid][pPos][0] == 0) PlayerInfo[extraid][pPos][0] = 1741.3394, infopos = 1;
			if(PlayerInfo[extraid][pPos][1] == 0) PlayerInfo[extraid][pPos][1] = -1875.1597, infopos = 1;
			if(PlayerInfo[extraid][pPos][2] == 0) PlayerInfo[extraid][pPos][2] = 13.5859, infopos = 1;

			if(infopos == 1) SendClientMessage(extraid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Ocorreu um erro com sua antiga posição e você foi enviado a San Andreas. Informe um administrador.");

			SetPlayerColor(extraid,COLOR_WHITE);

			TogglePlayerSpectating(extraid,0);

			if(PlayerInfo[extraid][pEmServico]) SetSpawnInfo(extraid, 0, PlayerInfo[extraid][pDutySkin], PlayerInfo[extraid][pPos][0], PlayerInfo[extraid][pPos][1], PlayerInfo[extraid][pPos][2], 0, 0, 0, 0, 0, 0, 0);
			else SetSpawnInfo(extraid, 0, PlayerInfo[extraid][pSkin], PlayerInfo[extraid][pPos][0], PlayerInfo[extraid][pPos][1], PlayerInfo[extraid][pPos][2], 0, 0, 0, 0, 0, 0, 0);

			SpawnPlayer(extraid);

	   		TogSQLstatus(extraid, 1);
	   		//======================================================================
		}
		else
		{
		    PlayerInfo[extraid][pHealthMax] = 100;
		    PlayerInfo[extraid][pHealth] = 100;
			SetPlayerHealth(extraid, 100);

		    //SetSpawnInfo(extraid, 0, 3, 2234.7217, -1112.6656, 1051.7113, 0, 0, 0, 0, 0, 0, 0);
			//SpawnPlayer(extraid);

	     	TogglePlayerControllable(extraid, 0);
		    SetPlayerCameraPos(extraid, -86.0129, 1173.2157, 59.9796);
			SetPlayerCameraLookAt(extraid, -86.0129, 1173.2157, 59.9796);
			SetPlayerPos(extraid, 2232.1135, -1112.2303, 1050.1513);
			SetPlayerInterior(extraid, 0);
			SetPlayerVirtualWorld(extraid, extraid);

	  		switch (PlayerInfo[extraid][pGender]) {
 				case 1: ShowModelSelectionMenu(extraid, "Escolha sua skin", MODEL_SELECTION_SKIN, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);
	   			case 2: ShowModelSelectionMenu(extraid, "Escolha sua skin", MODEL_SELECTION_SKIN, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
     		}
		}
		return 1;
}

stock SetarItensDoPlayer(playerid)
{
    RemovePlayerAttachedObject(playerid, 0);
    RemovePlayerAttachedObject(playerid, 1);
    RemovePlayerAttachedObject(playerid, 2);
    RemovePlayerAttachedObject(playerid, 3);
    RemovePlayerAttachedObject(playerid, 4);
    RemovePlayerAttachedObject(playerid, 5);
    RemovePlayerAttachedObject(playerid, 6);
    RemovePlayerAttachedObject(playerid, 7);
    RemovePlayerAttachedObject(playerid, 8);
    RemovePlayerAttachedObject(playerid, 9);
    ResetPlayerWeapons(playerid);

    //==========================================================================

    new IdArma = PlayerInfo[playerid][pArmaMao];
	if(IdArma > 0)
	{
 		if(ArmaData[IdArma][ArmaNumeracao] > 10)
   		{
   		    if(ArmaData[IdArma][ArmaModelo] > 0 && ArmaData[IdArma][ArmaModelo] < 22)
		    {
		        GivePlayerWeapon(playerid,ArmaData[IdArma][ArmaModelo], 1);
		    }
		    else
			{
				GivePlayerWeapon(playerid,ArmaData[IdArma][ArmaModelo], ArmaData[IdArma][ArmaAmmo]);
			}

			new ArmaModel = ArmaData[IdArma][ArmaModelo];
			SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[IdArma][ArmaRGB]);
		}
		else
		{
  			PlayerInfo[playerid][pArmaMao] = 0;
		}
	}
	if(PlayerInfo[playerid][pColde] > 0)
	{
		AttachArmaCorpo(playerid, ArmaData[PlayerInfo[playerid][pColde]][ArmaModelo], PlayerInfo[playerid][pColdreBone]);
	}
	new slot;
	for(new m; m < MAX_ITENS; m++)
	{
		if(ItemInfo[m][iCriado] == 1)
		{
			if(ItemInfo[m][iCom] == PlayerInfo[playerid][pID])
			{
				if(ItemInfo[m][iUsando] == 1)
				{
					switch(ItemInfo[m][iTipo])
					{
						case 1: { slot = 9; }
						case 2: { slot = 8; }
			  			case 3: { slot = 7; }
			  			case 4: { slot = 6; }
			    	}
			   		if(ItemInfo[m][iBone] == 0) ItemInfo[m][iBone] = 1;
			  		SetPlayerAttachedObject(playerid, slot, ItemInfo[m][iObj], ItemInfo[m][iBone], ItemInfo[m][iX], ItemInfo[m][iY], ItemInfo[m][iZ], ItemInfo[m][iRX], ItemInfo[m][iRY], ItemInfo[m][iRZ], ItemInfo[m][iSX], ItemInfo[m][iSY], ItemInfo[m][iSZ]);
				}
			}
		}
	}
	return 1;
}

stock PreloadAnimations(playerid)
{
	for (new i = 0; i < sizeof(g_aPreloadLibs); i ++) {
	    ApplyAnimation(playerid, g_aPreloadLibs[i], "null", 4.0, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

stock KickEx(playerid)
{
    if(IsPlayerNPC(playerid)) return true;
    return SetTimerEx("TimerKick", 2000, 0, "d", playerid);
}
//========================================================================================================================//
//  TUTORIAL -  TUTORIAL -  TUTORIAL -  TUTORIAL -  TUTORIAL -  TUTORIAL -  TUTORIAL -  TUTORIAL -  TUTORIAL -  TUTORIAL
//========================================================================================================================//
Dialog:TutorialConfirm(playerid, response, listitem, inputtext[])
{
	if (!response)
	{
	    PlayerInfo[playerid][pRegistrado] = 1;
  		PlayerInfo[playerid][pTutorial] = 1;
		SendClientMessage(playerid, COLOR_LIGHTRED,"Você optou não assistir o tutorial. Lhe desejamos um bom jogo!");
		SendClientMessage(playerid, COLOR_LIGHTRED,"Utilize /gps para encontrar os principais pontos da cidade.");

		SetPlayerPos(playerid, 1741.3394, -1875.1597, 13.5859);
		SetPlayerFacingAngle( playerid, 180);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 1);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);

		SetPlayerColor(playerid,COLOR_WHITE);
	}
	else
	{
	    FaseTutorial[playerid] = 1;
	    AtualizarTutorial(playerid);
		SendClientMessage(playerid, COLOR_LIGHTRED,"Você optou em assistir o tutorial.");
	}
	return 1;
}

forward AtualizarTutorial(playerid);
public AtualizarTutorial(playerid)
{
	switch(FaseTutorial[playerid])
	{
	    case 1:
	    {
			TogglePlayerControllable(playerid, 0);

			SetPlayerPos(playerid, -86.0129, 1173.2157, 59.9796);
 			SetPlayerCameraPos(playerid, -86.0129, 1173.2157, 59.97963);
			SetPlayerCameraLookAt(playerid, 1416.0275, -1620.1602, 59.4048);

            LimparChat(playerid);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Bem vindo ao Capital Paulista Full Roleplay");
			SendClientMessage(playerid, COLOR_YELLOW, "SERVER: O CP:RPP lhe proporciona uma extensa variedades de possibilidades");
			SendClientMessage(playerid, COLOR_YELLOW, "...onde você pode simular a vida de seu personagem sendo uma pessoa");
			SendClientMessage(playerid, COLOR_YELLOW, "...honesta, digna, que segue as leis do estado, ou você pode ser um infrator");
			SendClientMessage(playerid, COLOR_YELLOW, "...assassino, etc.. porém poderá arcar com as consequencias de suas escolhas.");
			FaseTutorial[playerid] = 2;
			SetTimerEx("AtualizarTutorial", 8000, 0, "d", playerid);
		}
		case 2:
		{
		    LimparChat(playerid);

		    TogglePlayerControllable(playerid, 0);

		    SetPlayerPos(playerid, 2258.6870, -74.1233, 25.7488);

			SetPlayerCameraPos(playerid, 2126.9312, -206.4247, 141.0287);
			SetPlayerCameraLookAt(playerid, 2127.5767, -205.6615, 140.5538);

            SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Banco");
			SendClientMessage(playerid, COLOR_YELLOW, "Esta é a agência Bancária de Fort Carson,");
			SendClientMessage(playerid, COLOR_YELLOW, "nele você poderá sacar, fazer depósitos e transferencias.");
			SendClientMessage(playerid, COLOR_YELLOW, "Você poderá encontrar alguns caixas eletrônicos pela cidade, porém apenas para saque.");
			FaseTutorial[playerid] = 3;
			SetTimerEx("AtualizarTutorial", 8000, 0, "d", playerid);
		}
		case 3:
		{
		    LimparChat(playerid);

		    TogglePlayerControllable(playerid, 0);

		    SetPlayerPos(playerid, 2331.7427, 16.4848, 25.4761);

			SetPlayerCameraPos(playerid, 2350.8381, 14.0218, 31.0835);
			SetPlayerCameraLookAt(playerid, 2349.8552, 14.2013, 30.9036);

            SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Auto Escola");
			SendClientMessage(playerid, COLOR_YELLOW, "Aqui você poderá tirar a sua carteira de motorista para andar legalmente de veículo pelas ruas de São Paulo.");
			FaseTutorial[playerid] = 4;
			SetTimerEx("AtualizarTutorial", 8000, 0, "d", playerid);
		}
		case 4:
		{
            LimparChat(playerid);

		    TogglePlayerControllable(playerid, 0);

		    SetPlayerPos(playerid, 2332.1316, 50.2132, 29.2542);

			SetPlayerCameraPos(playerid, 2355.1865, 60.6333, 34.8314);
			SetPlayerCameraLookAt(playerid, 2354.2869, 60.2016, 34.5113);

            SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Prefeitura");
			SendClientMessage(playerid, COLOR_YELLOW, "Na prefeitura você poderá participar de assembléias, pagar suas multas e resolver questões burocráticas.");
			FaseTutorial[playerid] = 5;
			SetTimerEx("AtualizarTutorial", 8000, 0, "d", playerid);
		}
		case 5:
		{
		    LimparChat(playerid);

		    TogglePlayerControllable(playerid, 0);

		    SetPlayerPos(playerid, 2332.1316, 50.2132, 29.2542);

		    SetPlayerCameraPos(playerid, 2348.0862, 42.0620, 31.3559);
			SetPlayerCameraLookAt(playerid, 2347.0886, 42.0330, 31.0759);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Agência de Empregos");
			SendClientMessage(playerid, COLOR_YELLOW, "Neste prédio você consegue empregos legais perante a lei.. ");
			SendClientMessage(playerid, COLOR_YELLOW, "como por exemplo, mecânico, taxista, caminhoneiro, vendedor de hot dog...");
			FaseTutorial[playerid] = 6;
			SetTimerEx("AtualizarTutorial", 8000, 0, "d", playerid);
		}
		case 6:
		{
            LimparChat(playerid);

		    TogglePlayerControllable(playerid, 0);

		    SetPlayerPos(playerid, 2265.0852, -285.8579, 62.7329);

            ApplyAnimation(playerid, "GANGS", "prtial_gngtlkB", 3.1,0,1,1,1,1,1);

			SetPlayerCameraPos(playerid, 2264.5815, -301.4335, 68.2098);
			SetPlayerCameraLookAt(playerid, 2264.6138, -300.4366, 68.0148);
			SetPlayerFacingAngle( playerid, 180);

            SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, playerid);

			SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Comandos básicos");
			SendClientMessage(playerid, COLOR_YELLOW, "Você pode utilizar /ajuda para checar os principais comandos do servidor...");
			SendClientMessage(playerid, COLOR_YELLOW, "Tais como: /estilochat (Altera/remove o modo de mover as mãos ao falar) e /estilocaminhada (Altera o modo de andar de ALT).");
			FaseTutorial[playerid] = 7;
			SetTimerEx("AtualizarTutorial", 8000, 0, "d", playerid);
		}
		case 7: //Fim do Tuto
		{
		    LimparChat(playerid);

		    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			SetPlayerPos(playerid, 2134.2437, 36.0144, 25.8665);
			SetPlayerFacingAngle( playerid, 0);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			FaseTutorial[playerid] = 0;

			PlayerInfo[playerid][pTutorial] = 1;
			PlayerInfo[playerid][pLogado] = 1;
			PlayerInfo[playerid][pRegistrado] = 1;

			SetPlayerColor(playerid,COLOR_WHITE);

			SendClientMessage(playerid, COLOR_LIGHTRED,"Você passou pelo tutorial. Lhe desejamos um bom jogo.");
			SendClientMessage(playerid, COLOR_LIGHTRED,"Não deixe de visitar nosso fórum: forum.cp-frp.com.br.com.");
			SendClientMessage(playerid, COLOR_LIGHTRED,"Utilize /gps para encontrar os principais pontos da cidade.");
		}

	}
	return 1;
}


forward LimparChat(playerid);
public LimparChat(playerid)
{
	for(new i; i < 20; i++)
	{
    	SendClientMessage(playerid, COLOR_WHITE, "");
	}
	return 1;
}
//========================================================================================================================//
// NOME CHECARROLEPLAY - CHECAR NOME ROLEPLAY - CHECAR NOME ROLEPLAY - CHECAR NOME ROLEPLAY - CHECAR NOME ROLEPLAY
//========================================================================================================================//
NameIsRP(name[])
{
    new len;
    len=strlen(name[0]);
    if(InvalidCaps(name[0]) || NumOccurences(name[0],'_') != 1) return 0;
    while(len--) {
    if(IsInvalid(name[len])) return 0;
    }
    if(TooManyCaps(name[0])) return 0;
    if(ConsecutiveCaps(name[0])) return 0;
    if(CapsOnEnd(name[0])) return 0;
    if(TooShortOnEnd(name[0])) return 0;
    return 1;
}

TooShortOnEnd(name[])
{
    new pnt;
    pnt=FirstSeperationLoc(name[0]);
    name[pnt]=0;
    if((strlen(name[0])<3)||strlen(name[pnt+1])<3) {
    name[pnt]='_'; //restore it for use later
	return 1;
	 }
    name[pnt]='_';
    return 0;
}
CapsOnEnd(name[])
{
    new sz;
    sz=strlen(name[0]);
    if(IsUpper(name[sz-1])) return 1;
    if(IsUpper(name[FirstSeperationLoc(name[0])-1])) return 1;
    return 0;
}
ConsecutiveCaps(name[])
{
    new sz,lastcaps;
    sz=strlen(name[0]);
    while(sz--) {
    if(IsUpper(name[sz])) {
    if(lastcaps==1) {
    return 1;
    }
    lastcaps=1;
    } else lastcaps=0;
    }
    return 0;
}
IsUpper(ch)
{
    if(ch>64&&ch<91) return 1;
    return 0;
}
TooManyCaps(name[])
{
    new Float:caps,num,sz;
    sz=strlen(name[0]);
    while(sz--) {
    if(IsUpper(name[sz])) num++;
    }
    caps=floatdiv(num,float(strlen(name[0])-1)); //-1 because we don't include the _ in the percentage
    caps=floatmul(caps,float(100));
    if(caps>40) return 1; //40% seems to be the magic number for names
    return 0;
}
InvalidCaps(str[])
{
    if(!IsUpper(str[0])||!IsUpper(str[FirstSeperationLoc(str[0])+1])) return 1;
    return 0;
}
FirstSeperationLoc(str[])
{
    new strl;
    strl=strlen(str);
    while(strl--) {
    if(str[strl]=='_') return strl;
    }
    return 0;
}
NumOccurences(str[],ch)
{
    new num=0,strl;
    strl=strlen(str);
    while(strl--) {
    if(str[strl]==ch) num++;
    }
    return num;
}

IsInvalid(x)
{
    if(x==95) return 0;
    if(x>64&&x<91) return 0;
    if(x>96&&x<123) return 0;
    return 1;
}
//============================================================================================================//
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if (response == EDIT_RESPONSE_FINAL)
	{
	    if (PlayerInfo[playerid][pEditandoPlaca] != -1)
	    {
	        //SCM(playerid, -1, "DEBUG: Placa casa a venda | Salvou");

	        HouseInfo[PlayerInfo[playerid][pEditandoPlaca]][hPlacaX] = x;
			HouseInfo[PlayerInfo[playerid][pEditandoPlaca]][hPlacaY] = y;
			HouseInfo[PlayerInfo[playerid][pEditandoPlaca]][hPlacaZ] = z;
			HouseInfo[PlayerInfo[playerid][pEditandoPlaca]][hPlacaR] = rz;

            if(IsValidDynamicObject(HouseInfo[PlayerInfo[playerid][pEditandoPlaca]][ObjPlaca]))
    				DestroyDynamicObject(HouseInfo[PlayerInfo[playerid][pEditandoPlaca]][ObjPlaca]);
			HouseInfo[PlayerInfo[playerid][pEditandoPlaca]][ObjPlaca] = CreateDynamicObject(19471, x, y, z, 0.0, 0.0, rz, HouseInfo[PlayerInfo[playerid][pEditandoPlaca]][hExWorld], HouseInfo[PlayerInfo[playerid][pEditandoPlaca]][hExInt]);

			SalvarCasa(PlayerInfo[playerid][pEditandoPlaca]);

			PlayerInfo[playerid][pEditandoPlaca] = -1;

			SCM(playerid, -1, "Placa Editada");
			return 1;
		}
		else if (PlayerInfo[playerid][pEditandoPlacaG] != -1)
	    {
	        //SCM(playerid, -1, "DEBUG: Placa garagem a venda | Salvou");

	        GaragemInfo[PlayerInfo[playerid][pEditandoPlacaG]][hPlacaX] = x;
			GaragemInfo[PlayerInfo[playerid][pEditandoPlacaG]][hPlacaY] = y;
			GaragemInfo[PlayerInfo[playerid][pEditandoPlacaG]][hPlacaZ] = z;
			GaragemInfo[PlayerInfo[playerid][pEditandoPlacaG]][hPlacaR] = rz;

			if(IsValidDynamicObject(GaragemInfo[PlayerInfo[playerid][pEditandoPlacaG]][ObjPlaca]))
    				DestroyDynamicObject(GaragemInfo[PlayerInfo[playerid][pEditandoPlacaG]][ObjPlaca]);
			GaragemInfo[PlayerInfo[playerid][pEditandoPlacaG]][ObjPlaca] = CreateDynamicObject(19471, x, y, z, 0.0, 0.0, rz, GaragemInfo[PlayerInfo[playerid][pEditandoPlacaG]][hExWorld], GaragemInfo[PlayerInfo[playerid][pEditandoPlacaG]][hExInt]);

			SalvarGaragem(PlayerInfo[playerid][pEditandoPlacaG]);

			PlayerInfo[playerid][pEditandoPlacaG] = -1;
			SCM(playerid, -1, "Placa Editada");
			return 1;
		}
		else if(GetPVarInt(playerid, "EditandoTorre") != 0)
		{
		    //SCM(playerid, -1, "DEBUG: Torre | Salvou");

	 		new id = GetPVarInt(playerid, "EditandoTorre");
	   		TorreData[id][torX] = x;
	       	TorreData[id][torY] = y;
        	TorreData[id][torZ] = z;
         	TorreData[id][torR] = rz;
    		Dialog_Show(playerid, DIALOG_TORRE_SINAL, DIALOG_STYLE_LIST, "Sinal da Torre", "Sinal: 3000m\nSinal: 6000m\nSinal: 8000m\nSinal: 10000m\nSinal: 100000m", "Alterar", "Cancelar");
    		AtualizarTorre(id);
    		SalvarTorre(id);

            SetPVarInt(playerid, "EditandoTorre", 0);

    		SCM(playerid, -1, "Torre Editada");
    		return 1;
		}
		else if(GetPVarInt(playerid, "EditandoTelPub") != 0)
		{
		    //SCM(playerid, -1, "DEBUG: Telefone Público | Salvou");

	 		new id = GetPVarInt(playerid, "EditandoTelPub");
	   		TelPublico[id][orX] = x;
	       	TelPublico[id][orY] = y;
        	TelPublico[id][orZ] = z;
         	TelPublico[id][orR] = rz;

         	SendClientMessage(playerid, COLOR_WHITE, "Orelhão Salvo");

    		AtualizarTelPub(id);
    		SalvarTelPub(id);

			SetPVarInt(playerid, "EditandoTelPub", 0);
    		return 1;
		}
		else if(GetPVarInt(playerid, "SettingGraffiti") == 1)
		{
		    //SCM(playerid, -1, "DEBUG: Grafite | Salvou");

		    if(!IsPlayerInRangeOfPoint(playerid, 3, x, y, z))
			{
			    if(IsValidDynamicObject(GraffitiObject[playerid]))
					DestroyDynamicObject(GraffitiObject[playerid]);
				SetPVarInt(playerid, "SettingGraffiti", 0);
				return SendClientMessage(playerid,0xFF6800FF,"Não coloque seu texto longe do personagem, nem de uma parede.");
			}
		    GraffitiPos[playerid][0] = x;
			GraffitiPos[playerid][1] = y;
			GraffitiPos[playerid][2] = z;
			GraffitiPos[playerid][3] = rx;
			GraffitiPos[playerid][4] = ry;
			GraffitiPos[playerid][5] = rz;
			StartDrawing(playerid);
            return 1;
		}
		else if (GetPVarInt(playerid, "adicionandoOBJADM") == 1)
		{
		    if(IsValidDynamicObject(ADM_OBJ))
				DestroyDynamicObject(ADM_OBJ);

			format(string, sizeof string, "[ADM OBJ ]Modelo: %d | POS: %0.4f,%0.4f,%0.4f,%0.4f,%0.4f,%0.4f",GetPVarInt(playerid, "adicionandoOBJADMID"), x, y, z, rx, ry, rz);
			SCM(playerid, COLOR_LIGHTRED, string);
			ADM_OBJ = CreateDynamicObject(GetPVarInt(playerid, "adicionandoOBJADMID"), x, y, z, rx, ry, rz, -1, -1);
			SetPVarInt(playerid, "adicionandoOBJADMID", 0);
			SetPVarInt(playerid, "adicionandoOBJADM", 0);

		}
		else if (PlayerInfo[playerid][pEditandoPlacaC] != -1)
	    {
	        //SCM(playerid, -1, "DEBUG: Placa de Complexo a venda | Salvou");

	        ComplexoInfo[PlayerInfo[playerid][pEditandoPlacaC]][cPlacaX] = x;
			ComplexoInfo[PlayerInfo[playerid][pEditandoPlacaC]][cPlacaY] = y;
			ComplexoInfo[PlayerInfo[playerid][pEditandoPlacaC]][cPlacaZ] = z;
			ComplexoInfo[PlayerInfo[playerid][pEditandoPlacaC]][cPlacaR] = rz;

			SalvarComplexo(PlayerInfo[playerid][pEditandoPlacaC]);

			PlayerInfo[playerid][pEditandoPlacaC] = -1;

			SCM(playerid, -1, "Placa Editada");
			return 1;
		}
		else if (PlayerInfo[playerid][pEditandoPlacaE] != -1)
	    {
	        //SCM(playerid, -1, "DEBUG: Placa de empresa a venda | Salvou");

	        EmpInfo[PlayerInfo[playerid][pEditandoPlacaE]][ePlacaX] = x;
			EmpInfo[PlayerInfo[playerid][pEditandoPlacaE]][ePlacaY] = y;
			EmpInfo[PlayerInfo[playerid][pEditandoPlacaE]][ePlacaZ] = z;
			EmpInfo[PlayerInfo[playerid][pEditandoPlacaE]][ePlacaR] = rz;

            if(IsValidDynamicObject(EmpInfo[PlayerInfo[playerid][pEditandoPlacaE]][eObjPlaca]))
    				DestroyDynamicObject(EmpInfo[PlayerInfo[playerid][pEditandoPlacaE]][eObjPlaca]);
			EmpInfo[PlayerInfo[playerid][pEditandoPlacaE]][eObjPlaca] = CreateDynamicObject(19471, x, y, z, 0.0, 0.0, rz, EmpInfo[PlayerInfo[playerid][pEditandoPlacaE]][eExWorld], EmpInfo[PlayerInfo[playerid][pEditandoPlacaE]][eExInt]);

			SalvarEmpresa(PlayerInfo[playerid][pEditandoPlacaE]);

			PlayerInfo[playerid][pEditandoPlacaE] = -1;
			SCM(playerid, -1, "Placa Editada");
			return 1;
		}
		else if (PlayerInfo[playerid][pEditPump] != -1 && PumpData[PlayerInfo[playerid][pEditPump]][pumpExists])
	    {
	        //SCM(playerid, -1, "DEBUG: Bomba de gasolina | Salvou");

			PumpData[PlayerInfo[playerid][pEditPump]][pumpPos][0] = x;
			PumpData[PlayerInfo[playerid][pEditPump]][pumpPos][1] = y;
			PumpData[PlayerInfo[playerid][pEditPump]][pumpPos][2] = z;
			PumpData[PlayerInfo[playerid][pEditPump]][pumpPos][3] = rz;

			Pump_Refresh(PlayerInfo[playerid][pEditPump]);
			Pump_Save(PlayerInfo[playerid][pEditPump]);

			SendClientMessage(playerid, COLOR_WHITE, "AdmCmd: Edição da bomba de gasolina completa.");
			PlayerInfo[playerid][pEditPump] = -1;
			return 1;
	    }
		else if( GetPVarInt(playerid, "EditandoArmaNoChao") == 1 )
		{
		    //SCM(playerid, -1, "DEBUG: Dropou arma | Salvou");

		    new armaid = PlayerInfo[playerid][pArmaMao];
		    if(armaid > 0)
		    {
				new Int = GetPlayerInterior(playerid);
				new World = GetPlayerVirtualWorld(playerid);

				//========================================
			    DesarmandoPlayer[playerid] = 2;
				ResetPlayerWeapons(playerid);
				PlayerInfo[playerid][pArmaMao] = 0;
				RemovePlayerAttachedObject(playerid, 0);
				//========================================
				RemovePlayerAttachedObject(playerid, 0);
				ArmaData[armaid][ArmaInt] = Int;
				ArmaData[armaid][ArmaWorld] = World;
				ArmaData[armaid][ArmaNoChao] = 1;
				ArmaData[armaid][ArmaCom] = 0;
				ArmaData[armaid][ArmaEditando] = 0;

				ArmaData[armaid][ArmaX] = x;
				ArmaData[armaid][ArmaY] = y;
				ArmaData[armaid][ArmaZ] = z;
				ArmaData[armaid][ArmaRX] = rx;
				ArmaData[armaid][ArmaRY] = ry;
				ArmaData[armaid][ArmaRZ] = rz;

				if(IsValidDynamicObject(ArmaData[armaid][ArmaObj]))
					DestroyDynamicObject(ArmaData[armaid][ArmaObj]);

				SetPVarInt(playerid, "EditandoArmaNoChao", 0);

				format(string, sizeof(string), "[Arma Primária] Você jogou uma %s com %d balas no chão. (%d)", GunNames[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaAmmo], ArmaData[armaid][ArmaNumeracao]);
	    		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

				if(ArmaData[armaid][ArmaExtra] == 0) ArmaData[armaid][ArmaObj] = CreateDynamicObject(GunObjects[ArmaData[armaid][ArmaModelo]], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ], ArmaData[armaid][ArmaRX], ArmaData[armaid][ArmaRY], ArmaData[armaid][ArmaRZ],ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);
	            else ArmaData[armaid][ArmaObj] = CreateDynamicObject(ArmaData[armaid][ArmaExtra], ArmaData[armaid][ArmaX], ArmaData[armaid][ArmaY], ArmaData[armaid][ArmaZ], ArmaData[armaid][ArmaRX], ArmaData[armaid][ArmaRY], ArmaData[armaid][ArmaRZ],ArmaData[armaid][ArmaWorld],ArmaData[armaid][ArmaInt]);

				SalvarArma(armaid);
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nenhuma arma em sua mão.");
			return 1;
		}
		else if(PlayerInfo[playerid][pEditMovel] != -1)
		{
		    //SCM(playerid, -1, "DEBUG: Furniture editou | Salvou");
		    new id = PlayerInfo[playerid][pEditMovel];

			FurniInfo[id][mX] = x;
			FurniInfo[id][mY] = y;
			FurniInfo[id][mZ] = z;
			FurniInfo[id][mRX] = rx;
			FurniInfo[id][mRY] = ry;
			FurniInfo[id][mRZ] = rz;

			Movel_Refresh(playerid,id);
   			Streamer_Update(playerid, STREAMER_TYPE_OBJECT);

			SalvarMovel(id);
			PlayerInfo[playerid][pEditMovel] = -1;
			return 1;
		}
		else if(PlayerInfo[playerid][pEditPorta][0] != -1)
		{
		    //SCM(playerid, -1, "DEBUG: Rotação da porta 1 | Salvou");
		    new id = PlayerInfo[playerid][pEditPorta][0];

			FurniInfo[id][mX] = x;
			FurniInfo[id][mY] = y;
			FurniInfo[id][mZ] = z;
			FurniInfo[id][mRX] = rx;
			FurniInfo[id][mRY] = ry;
			FurniInfo[id][mRZ] = rz;
			FurniInfo[id][mPAberta] = 0;

			PlayerInfo[playerid][pEditPorta][0] = -1;
			PlayerInfo[playerid][pEditPorta][1] = id;
			SCM(playerid, COLOR_YELLOW, "SERVER: Você poscionou a porta, agora gire apenas o eixo de rotação Z, para salvar o sentido de abertura da porta.");

            EditDynamicObject(playerid, FurniInfo[id][mObjeto]);
			SalvarMovel(id);
			return 1;
		}
		else if(PlayerInfo[playerid][pEditPorta][1] != -1)
		{
		    //SCM(playerid, -1, "DEBUG: Rotação da porta 2 | Salvou");
		    new id = PlayerInfo[playerid][pEditPorta][1];
		    FurniInfo[id][mARZ] = rz;
		    SCM(playerid, COLOR_YELLOW, "SERVER: Sentido de Rotação da porta salvo. Você pode usar /porta para abri-la e /trancar para tranca-la.");
		    PlayerInfo[playerid][pEditPorta][1] = -1;
      		Movel_Refresh(playerid,id);

			Streamer_Update(playerid, STREAMER_TYPE_OBJECT);

		    SalvarMovel(id);
		    return 1;
		}
		else if(PlayerInfo[playerid][pEditandoPortao][0] != -1)
		{
		    //SCM(playerid, -1, "DEBUG: Portão Aberto | Salvou");
		    new i = PlayerInfo[playerid][pEditandoPortao][0];

			PortaoInfo[i][ptX] = x;
			PortaoInfo[i][ptY] = y;
			PortaoInfo[i][ptZ] = z;
			PortaoInfo[i][ptRX] = rx;
			PortaoInfo[i][ptRY] = ry;
			PortaoInfo[i][ptRZ] = rz;

            PlayerInfo[playerid][pEditandoPortao][0] = -1;
			PlayerInfo[playerid][pEditandoPortao][1] = i;
			SCM(playerid, COLOR_YELLOW, "SERVER: Posicione o Portão para como irá ficar aberto.");
			EditDynamicObject(playerid, PortaoInfo[i][ptObjeto]);

			SalvarPortao(i);
			return 1;
		}
		else if(PlayerInfo[playerid][pEditandoPortao][1] != -1)
		{
		    //SCM(playerid, -1, "DEBUG: Completou Portão | Salvou");
		    new i = PlayerInfo[playerid][pEditandoPortao][1];

			PortaoInfo[i][ptAX] = x;
			PortaoInfo[i][ptAY] = y;
			PortaoInfo[i][ptAZ] = z;
			PortaoInfo[i][ptRAX] = rx;
			PortaoInfo[i][ptRAY] = ry;
			PortaoInfo[i][ptRAZ] = rz;

            PlayerInfo[playerid][pEditandoPortao][0] = -1;
			PlayerInfo[playerid][pEditandoPortao][1] = -1;
			SCM(playerid, COLOR_LIGHTGREEN, "Portão Completo.");
			SalvarPortao(i);

			MoveDynamicObject(PortaoInfo[i][ptObjeto], PortaoInfo[i][ptX], PortaoInfo[i][ptY], PortaoInfo[i][ptZ], 6.0, PortaoInfo[i][ptRX], PortaoInfo[i][ptRY], PortaoInfo[i][ptRZ]);
			return 1;
		}
		else if(PlayerInfo[playerid][pEditandoBareira] != -1)
		{
		    //SCM(playerid, -1, "DEBUG: Colocou Barreira | Salvou");
			new id = PlayerInfo[playerid][pEditandoBareira];
			BarreiraInfo[id][BlockX] = x;
			BarreiraInfo[id][BlockY] = y;
			BarreiraInfo[id][BlockZ] = z;
		    PlayerInfo[playerid][pEditandoBareira] = -1;

		    if(IsValidDynamicObject(BarreiraInfo[id][BlockObj]))
				DestroyDynamicObject(BarreiraInfo[id][BlockObj]);

		    BarreiraInfo[id][BlockObj] = CreateDynamicObject(BarreiraInfo[id][BlockModel], x, y, z, rx, ry, rz, BarreiraInfo[id][BlockW]);

		    SCM(playerid, COLOR_LIGHTGREEN, "Barreira colocada.");
		    return 1;
		}
		else if(OutrasInfos[playerid][oEditandoMesaPoker] != -1)
	 	{
	 	    //SCM(playerid, -1, "DEBUG: Colocou mesa de POKER | Salvou");
			new tableid = OutrasInfos[playerid][oEditandoMesaPoker]-1;
			OutrasInfos[playerid][oEditandoMesaPoker] = -1;
            new Int = GetPlayerInterior(playerid);
			new World = GetPlayerVirtualWorld(playerid);

			DeletePVar(playerid, "tmpPkrX");
			DeletePVar(playerid, "tmpPkrY");
			DeletePVar(playerid, "tmpPkrZ");
			DeletePVar(playerid, "tmpPkrRX");
			DeletePVar(playerid, "tmpPkrRY");
			DeletePVar(playerid, "tmpPkrRZ");

			DestroyPokerTable(tableid);
			PlacePokerTable(tableid, 1, x, y, z, rx, ry, rz, World, Int);

			ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSELECTPOKER);

			SCM(playerid, COLOR_LIGHTGREEN, "Mesa de Poker colocada.");
			return 1;
		}
		else if(GetPVarInt(playerid, "EditATM") == 1)
		{
		    //SCM(playerid, -1, "DEBUG: Instalou caixa eletrônico | Salvou");
            SendClientMessage( playerid,COLOR_YELLOW,"ATM instalada no local.");
            new id = GetPVarInt(playerid, "EditATMID");
			ATMs[id][aposX] = x;
			ATMs[id][aposY] = y;
			ATMs[id][aposZ] = z;
			ATMs[id][aposR] = rz;
			SetPVarInt(playerid, "EditATM", 0);
    		SetPVarInt(playerid, "EditATMID", 0);
    		SaveATM(id);

			if(IsValidDynamicObject(ATMs[id][aObjeto]))
				DestroyDynamicObject(ATMs[id][aObjeto]);

			ATMs[id][aObjeto] = CreateDynamicObject(-2900, x, y, z, 0.000000, 0.000000, rz);
    		return 1;
        }
		else if(GetPVarInt(playerid, "EditCOFREL") == 1)
		{
            SendClientMessage( playerid,COLOR_YELLOW,"Cofre loja instalado.");
            new id = GetPVarInt(playerid, "EditCOFRELID");
			cLoja[id][clposX] = x;
			cLoja[id][clposY] = y;
			cLoja[id][clposZ] = z;
			cLoja[id][clposR] = rz;
			SetPVarInt(playerid, "EditCOFREL", 0);
    		SetPVarInt(playerid, "EditCOFRELID", 0);
    		SaveCOFREL(id);

			if(IsValidDynamicObject(cLoja[id][clObjeto]))
				DestroyDynamicObject(cLoja[id][clObjeto]);

			cLoja[id][clObjeto] = CreateDynamicObject(2332, x, y, z, 0.000000, 0.000000, rz);
		
    		return 1;
        }
		else if(GetPVarInt(playerid, "EditCOFREB") == 1)
		{
            SendClientMessage( playerid,COLOR_YELLOW,"Cofre do banco instalado.");
            new id = GetPVarInt(playerid, "EditCOFREBID");
			cbanco[id][cbposX] = x;
			cbanco[id][cbposY] = y;
			cbanco[id][cbposZ] = z;
			cbanco[id][cbposR] = rz;
			SetPVarInt(playerid, "EditCOFREB", 0);
    		SetPVarInt(playerid, "EditCOFREBID", 0);
    		SaveCOFREB(id);

			if(IsValidDynamicObject(cbanco[id][cbObjeto]))
				DestroyDynamicObject(cbanco[id][cbObjeto]);

			cbanco[id][cbObjeto] = CreateDynamicObject(2332, x, y, z, 0.000000, 0.000000, rz);
    		return 1;
        }
		else if(GetPVarInt(playerid, "EditJOIA") == 1)
		{
            SendClientMessage( playerid,COLOR_YELLOW,"Cofre da joalheria instalado.");
            new id = GetPVarInt(playerid, "EditJOIAID");
			joalheria[id][jlposX] = x;
			joalheria[id][jlposY] = y;
			joalheria[id][jlposZ] = z;
			joalheria[id][jlposR] = rz;
			SetPVarInt(playerid, "EditJOIA", 0);
    		SetPVarInt(playerid, "EditJOIAID", 0);
    		SaveCOFREB(id);

			if(IsValidDynamicObject(joalheria[id][jlObjeto]))
				DestroyDynamicObject(joalheria[id][jlObjeto]);

			joalheria[id][jlObjeto] = CreateDynamicObject(2332, x, y, z, 0.000000, 0.000000, rz);
    		return 1;
        }
		else if(GetPVarInt(playerid, "EditFABRICAD") == 1)
		{
            SendClientMessage( playerid,COLOR_YELLOW,"Fabrica de drogas criada.");
            new id = GetPVarInt(playerid, "EditFABRICADID");
			LaboDrug[id][ldposX] = x;
			LaboDrug[id][ldposY] = y;
			LaboDrug[id][ldposZ] = z;
			LaboDrug[id][ldposR] = rz;
			SetPVarInt(playerid, "EditFABRICAD", 0);
    		SetPVarInt(playerid, "EditFABRICADID", 0);
    		SaveCOFREB(id);

			if(IsValidDynamicObject(LaboDrug[id][ldObjeto]))
				DestroyDynamicObject(LaboDrug[id][ldObjeto]);

			LaboDrug[id][ldObjeto] = CreateDynamicObject(-2307, x, y, z, 0.000000, 0.000000, rz);
    		return 1;
        }
        else if(GetPVarInt(playerid, "EditandoAmmoNoChao") != -1)
		{
		    //SCM(playerid, -1, "DEBUG: Dropou Ammo | Salvou");
            new id = GetPVarInt(playerid, "EditandoAmmoNoChao");
	 		CartuxoData[id][cartuxoX] = x;
	 		CartuxoData[id][cartuxoY] = y;
	 		CartuxoData[id][cartuxoZ] = z;
	 		CartuxoData[id][cartuxoRX] = rx;
	 		CartuxoData[id][cartuxoRY] = ry;
	 		CartuxoData[id][cartuxoRZ] = rz;
			SetPVarInt(playerid, "EditandoAmmoNoChao", -1);
			CartuxoData[id][cartuxoEditando] = 0;

			if(IsValidDynamicObject(CartuxoData[id][cartuxoObj]))
				DestroyDynamicObject(CartuxoData[id][cartuxoObj]);

			CartuxoData[id][cartuxoObj] = CreateDynamicObject(2040, x, y, z, rx, ry, rz, CartuxoData[id][cartuxoWorld],CartuxoData[id][cartuxoInt]);
    		SalvarAmmos(id);
    		return 1;
        }
        else if(GetPVarInt(playerid, "EditandoDrogaNoChao") != -1)
		{
		    //SCM(playerid, -1, "DEBUG: Dropou droga | Salvou");
            new id = GetPVarInt(playerid, "EditandoDrogaNoChao");
	 		DropInfo[id][dX] = x;
 			DropInfo[id][dY] = y;
    		DropInfo[id][dZ] = z;
	 		DropInfo[id][dRX] = rx;
 			DropInfo[id][dRY] = ry;
    		DropInfo[id][dRZ] = rz;

            if(IsValidDynamicObject(DropInfo[id][dObject]))
				DestroyDynamicObject(DropInfo[id][dObject]);

            new DrugModel;
            switch(DropInfo[id][dType])
		    {
		    	case 1,2,3: DrugModel = -2300;
		    	case 4,5,6: DrugModel = -2302;
		    	case 7,8,9: DrugModel = -2303;
		    	case 10,11,12: DrugModel = -2304;
		    	case 13,14,15: DrugModel = -2305;
				case 16: DrugModel = -2306;
		    }

			DropInfo[id][dObject] = CreateDynamicObject(DrugModel, x, y, z, rx, ry, rz, DropInfo[id][dWorld],DropInfo[id][dInt]);
    		DropInfo[id][dEditando] = 0;

    		SalvarDrogas(id);

			SetPVarInt(playerid, "EditandoDrogaNoChao", -1);
			return 1;
        }
        else if(GetPVarInt(playerid, "ObjPortaMalas") != -1)
        {
            //SCM(playerid, -1, "DEBUG: Obj no portamalas | Salvou");

            SetDynamicObjectPos(objectid, x, y, z);
            SetDynamicObjectRot(objectid, rx, ry, rz);

            new vehid = GetPVarInt(playerid, "ObjPortaMalas");
            new slot = GetPVarInt(playerid, "ObjPortaMalasSlot");

            new Float:ofx, Float:ofy, Float:ofz, Float:ofaz;
			new Float:finalx, Float:finaly;
			new Float:px, Float:py, Float:pz, Float:roz;
			GetVehiclePos(VehicleInfo[vehid][vVehicle], px, py, pz);
			GetVehicleZAngle(VehicleInfo[vehid][vVehicle], roz);
			ofx = x-px;
			ofy = y-py;
			ofz = z-pz;
			ofaz = rz-roz;
			finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
			finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);

			switch(slot)
			{
			    case 1:
			    {
		            VehicleInfo[vehid][Slot1X] = finalx;
					VehicleInfo[vehid][Slot1Y] = finaly;
					VehicleInfo[vehid][Slot1Z] = ofz;
					VehicleInfo[vehid][Slot1RX] = rx;
					VehicleInfo[vehid][Slot1RY] = ry;
					VehicleInfo[vehid][Slot1RZ] = ofaz;
					SalvarArmaPM(vehid, 1);
					AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj1], VehicleInfo[vehid][vVehicle], finalx, finaly, ofz, rx, ry, ofaz);
				}
				case 2:
			    {
		            VehicleInfo[vehid][Slot2X] = finalx;
					VehicleInfo[vehid][Slot2Y] = finaly;
					VehicleInfo[vehid][Slot2Z] = ofz;
					VehicleInfo[vehid][Slot2RX] = rx;
					VehicleInfo[vehid][Slot2RY] = ry;
					VehicleInfo[vehid][Slot2RZ] = ofaz;
					SalvarArmaPM(vehid, 2);
					AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj2], VehicleInfo[vehid][vVehicle], finalx, finaly, ofz, rx, ry, ofaz);
				}
				case 3:
			    {
		            VehicleInfo[vehid][Slot3X] = finalx;
					VehicleInfo[vehid][Slot3Y] = finaly;
					VehicleInfo[vehid][Slot3Z] = ofz;
					VehicleInfo[vehid][Slot3RX] = rx;
					VehicleInfo[vehid][Slot3RY] = ry;
					VehicleInfo[vehid][Slot3RZ] = ofaz;
					SalvarArmaPM(vehid, 3);
					AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj3], VehicleInfo[vehid][vVehicle], finalx, finaly, ofz, rx, ry, ofaz);
				}
				case 4:
			    {
		            VehicleInfo[vehid][Slot4X] = finalx;
					VehicleInfo[vehid][Slot4Y] = finaly;
					VehicleInfo[vehid][Slot4Z] = ofz;
					VehicleInfo[vehid][Slot4RX] = rx;
					VehicleInfo[vehid][Slot4RY] = ry;
					VehicleInfo[vehid][Slot4RZ] = ofaz;
					SalvarArmaPM(vehid, 4);
					AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj4], VehicleInfo[vehid][vVehicle], finalx, finaly, ofz, rx, ry, ofaz);
				}
				case 5:
			    {
		            VehicleInfo[vehid][Slot5X] = finalx;
					VehicleInfo[vehid][Slot5Y] = finaly;
					VehicleInfo[vehid][Slot5Z] = ofz;
					VehicleInfo[vehid][Slot5RX] = rx;
					VehicleInfo[vehid][Slot5RY] = ry;
					VehicleInfo[vehid][Slot5RZ] = ofaz;
					SalvarArmaPM(vehid, 5);
					AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj5], VehicleInfo[vehid][vVehicle], finalx, finaly, ofz, rx, ry, ofaz);
				}
				case 6:
			    {
		            VehicleInfo[vehid][Slot6X] = finalx;
					VehicleInfo[vehid][Slot6Y] = finaly;
					VehicleInfo[vehid][Slot6Z] = ofz;
					VehicleInfo[vehid][Slot6RX] = rx;
					VehicleInfo[vehid][Slot6RY] = ry;
					VehicleInfo[vehid][Slot6RZ] = ofaz;
					SalvarArmaPM(vehid, 6);
					AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj6], VehicleInfo[vehid][vVehicle], finalx, finaly, ofz, rx, ry, ofaz);
				}
				case 7:
			    {
		            VehicleInfo[vehid][Slot7X] = finalx;
					VehicleInfo[vehid][Slot7Y] = finaly;
					VehicleInfo[vehid][Slot7Z] = ofz;
					VehicleInfo[vehid][Slot7RX] = rx;
					VehicleInfo[vehid][Slot7RY] = ry;
					VehicleInfo[vehid][Slot7RZ] = ofaz;
					SalvarArmaPM(vehid, 7);
					AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj7], VehicleInfo[vehid][vVehicle], finalx, finaly, ofz, rx, ry, ofaz);
				}
				case 8:
			    {
		            VehicleInfo[vehid][Slot8X] = finalx;
					VehicleInfo[vehid][Slot8Y] = finaly;
					VehicleInfo[vehid][Slot8Z] = ofz;
					VehicleInfo[vehid][Slot8RX] = rx;
					VehicleInfo[vehid][Slot8RY] = ry;
					VehicleInfo[vehid][Slot8RZ] = ofaz;
					SalvarArmaPM(vehid, 8);
					AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj8], VehicleInfo[vehid][vVehicle], finalx, finaly, ofz, rx, ry, ofaz);
				}
				case 9:
			    {
		            VehicleInfo[vehid][Slot9X] = finalx;
					VehicleInfo[vehid][Slot9Y] = finaly;
					VehicleInfo[vehid][Slot9Z] = ofz;
					VehicleInfo[vehid][Slot9RX] = rx;
					VehicleInfo[vehid][Slot9RY] = ry;
					VehicleInfo[vehid][Slot9RZ] = ofaz;
					SalvarArmaPM(vehid, 9);
					AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj9], VehicleInfo[vehid][vVehicle], finalx, finaly, ofz, rx, ry, ofaz);
				}
				case 10:
			    {
		            VehicleInfo[vehid][Slot10X] = finalx;
					VehicleInfo[vehid][Slot10Y] = finaly;
					VehicleInfo[vehid][Slot10Z] = ofz;
					VehicleInfo[vehid][Slot10RX] = rx;
					VehicleInfo[vehid][Slot10RY] = ry;
					VehicleInfo[vehid][Slot10RZ] = ofaz;
					SalvarArmaPM(vehid, 10);
					AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj10], VehicleInfo[vehid][vVehicle], finalx, finaly, ofz, rx, ry, ofaz);
				}
			}

    		SetPVarInt(playerid, "ObjPortaMalas", -1);
    		SetPVarInt(playerid, "ObjPortaMalasSlot", 0);
    		return 1;
		}
		else if(GetPVarInt(playerid, "EditandoBoomboxPos") != -1)
        {
            //SCM(playerid, -1, "DEBUG: Boombox | Salvou");

			if(IsPlayerInRangeOfPoint(playerid, 10, x, y, z))
   			{
	            new box = GetPVarInt(playerid, "EditandoBoomboxPos");
	            BoomBoxInfo[box][boX] = x;
	            BoomBoxInfo[box][boY] = y;
	            BoomBoxInfo[box][boZ] = z;
	            RefreshBoomBoxListeners(box);

				SetPVarInt(playerid, "EditandoBoomboxPos", -1);
			}
			else
			{
			    new world = GetPlayerVirtualWorld(playerid);
			    new box = GetPVarInt(playerid, "EditandoBoomboxPos");

			    if(IsValidDynamicObject(BoomBoxInfo[box][boObject]))
					DestroyDynamicObject(BoomBoxInfo[box][boObject]);

				BoomBoxInfo[box][boObject] = CreateDynamicObject(2102,BoomBoxInfo[box][boX],BoomBoxInfo[box][boY],BoomBoxInfo[box][boZ],0.0,0.0,0.0, world);
				SendClientMessage( playerid,COLOR_LIGHTRED,"Você não pode por a boombox tão distante de você." );
			}
		}
		//Streamer_UpdateEx(playerid, x, y, z);
		Streamer_Update(playerid);
		return 1;
	}
	if (response == EDIT_RESPONSE_CANCEL)
	{
	    if(PlayerInfo[playerid][pEditandoPlaca] != -1)
	    {
	    	if(IsValidDynamicObject(HouseInfo[PlayerInfo[playerid][pEditandoPlaca]][ObjPlaca]))
				DestroyDynamicObject(HouseInfo[PlayerInfo[playerid][pEditandoPlaca]][ObjPlaca]);
            PlayerInfo[playerid][pEditandoPlaca] = -1;
		}
		if(PlayerInfo[playerid][pEditandoPlacaC] != -1)
		{
		    if(IsValidDynamicObject(ComplexoInfo[PlayerInfo[playerid][pEditandoPlacaC]][cObjPlaca]))
				DestroyDynamicObject(ComplexoInfo[PlayerInfo[playerid][pEditandoPlacaC]][cObjPlaca]);
            PlayerInfo[playerid][pEditandoPlacaC] = -1;
		}
		if(PlayerInfo[playerid][pEditandoPlacaE] != -1)
		{
		    if(IsValidDynamicObject(EmpInfo[PlayerInfo[playerid][pEditandoPlacaE]][eObjPlaca]))
				DestroyDynamicObject(EmpInfo[PlayerInfo[playerid][pEditandoPlacaE]][eObjPlaca]);
            PlayerInfo[playerid][pEditandoPlacaE] = -1;
		}
		if(PlayerInfo[playerid][pEditandoPlacaG] != -1)
		{
		    if(IsValidDynamicObject(GaragemInfo[PlayerInfo[playerid][pEditandoPlacaG]][ObjPlaca]))
				DestroyDynamicObject(GaragemInfo[PlayerInfo[playerid][pEditandoPlacaG]][ObjPlaca]);
            PlayerInfo[playerid][pEditandoPlacaG] = -1;
		}
		if (PlayerInfo[playerid][pEditPump] != -1)
		{
		    //SCM(playerid, -1, "DEBUG: Bomba de Gasolina | Cancelou");

			Pump_Refresh(PlayerInfo[playerid][pEditPump]);
			PlayerInfo[playerid][pEditPump] = -1;
			return 1;
		}
		else if(GetPVarInt(playerid, "SettingGraffiti") == 1)
		{
		    //SCM(playerid, -1, "DEBUG: Grafite | Cancelou");

			if(IsValidDynamicObject(GraffitiObject[playerid]))
				DestroyDynamicObject(GraffitiObject[playerid]);

			ResetVariables(playerid);
			SendClientMessage(playerid,0xFF6800FF,"Pixação cancelada.");
			return 1;
		}
		else if( GetPVarInt(playerid, "EditandoAmmoNoChao") != -1 )
		{
		    //SCM(playerid, -1, "DEBUG: Dropou munição | Cancelou");
		    new id = GetPVarInt(playerid, "EditandoAmmoNoChao");

		    if(CartuxoData[id][CartuxoTipo] == 1) PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]+CartuxoData[id][cartuxoQnt];
			else if(CartuxoData[id][CartuxoTipo] == 2) PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]+CartuxoData[id][cartuxoQnt];
			else if(CartuxoData[id][CartuxoTipo] == 3) PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]+CartuxoData[id][cartuxoQnt];
			else if(CartuxoData[id][CartuxoTipo] == 4) PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]+CartuxoData[id][cartuxoQnt];
		    CartuxoData[id][cartuxoEditando] = 0;

 	    	CartuxoData[id][cartuxoX] = 0.0;
			CartuxoData[id][cartuxoY] = 0.0;
			CartuxoData[id][cartuxoZ] = 0.0;
			CartuxoData[id][cartuxoRX] = 0.0;
			CartuxoData[id][cartuxoRY] = 0.0;
			CartuxoData[id][cartuxoRZ] = 0.0;
			CartuxoData[id][cartuxoWorld] = 0;
			CartuxoData[id][cartuxoInt] = 0;
			CartuxoData[id][cartuxoQnt] = 0;

		    if(IsValidDynamicObject(CartuxoData[id][cartuxoObj]))
				DestroyDynamicObject(CartuxoData[id][cartuxoObj]);

		    SetPVarInt(playerid, "EditandoAmmoNoChao", -1);
		    return 1;
		}
	 	else if( GetPVarInt(playerid, "EditandoArmaNoChao") == 1 )
		{
		    //SCM(playerid, -1, "DEBUG: dropou arma | Cancelou");

		    new armaid = PlayerInfo[playerid][pArmaMao];
			ArmaData[armaid][ArmaNoChao] = 0;
			ArmaData[armaid][ArmaEditando] = 0;

		    if(IsValidDynamicObject(ArmaData[armaid][ArmaObj]))
				DestroyDynamicObject(ArmaData[armaid][ArmaObj]);

		    SetPVarInt(playerid, "EditandoArmaNoChao", 0);
		    return 1;
		}
		else if( GetPVarInt(playerid, "EditandoDrogaNoChao") != -1 )
		{
		    //SCM(playerid, -1, "DEBUG: Dropou Drogas | Cancelou");
		    new id = GetPVarInt(playerid, "EditandoDrogaNoChao");

            if(IsValidDynamicObject(DropInfo[id][dObject]))
				DestroyDynamicObject(DropInfo[id][dObject]);

		    switch(DropInfo[id][dType])
		    {
		    	case 1: PlayerDroga[playerid][MaconhaR] += DropInfo[id][dAmmo];
		    	case 2: PlayerDroga[playerid][MaconhaB] += DropInfo[id][dAmmo];
		    	case 3: PlayerDroga[playerid][MaconhaE] += DropInfo[id][dAmmo];
		    	//======================================================================
		    	case 4: PlayerDroga[playerid][CocaR] += DropInfo[id][dAmmo];
		    	case 5: PlayerDroga[playerid][CocaB] += DropInfo[id][dAmmo];
		    	case 6: PlayerDroga[playerid][CocaE] += DropInfo[id][dAmmo];
		    	//======================================================================
		    	case 7: PlayerDroga[playerid][CrackR] += DropInfo[id][dAmmo];
		    	case 8: PlayerDroga[playerid][CrackB] += DropInfo[id][dAmmo];
		    	case 9: PlayerDroga[playerid][CrackE] += DropInfo[id][dAmmo];
		    	//======================================================================
		    	case 10: PlayerDroga[playerid][LSDR] += DropInfo[id][dAmmo];
		    	case 11: PlayerDroga[playerid][LSDB] += DropInfo[id][dAmmo];
		    	case 12: PlayerDroga[playerid][LSDE] += DropInfo[id][dAmmo];
		    	//======================================================================
		    	case 13: PlayerDroga[playerid][MetR] += DropInfo[id][dAmmo];
		    	case 14: PlayerDroga[playerid][MetB] += DropInfo[id][dAmmo];
		    	case 15: PlayerDroga[playerid][MetE] += DropInfo[id][dAmmo];
	    		//======================================================================
				case 16: PlayerDroga[playerid][LancaPer] += DropInfo[id][dAmmo];
				case 17: PlayerDroga[playerid][PBC] += DropInfo[id][dAmmo];
				case 18: PlayerDroga[playerid][Sementes] += DropInfo[id][dAmmo];

		    }

		    DropInfo[id][dX] = 0.0;
			DropInfo[id][dY] = 0.0;
			DropInfo[id][dZ] = 0.0;
			DropInfo[id][dType] = 0;
			DropInfo[id][dAmmo] = 0;
			DropInfo[id][dWorld] = 0;
			DropInfo[id][dInt] = 0;

		    SetPVarInt(playerid, "EditandoDrogaNoChao", -1);
		    return 1;
		}
		else if(PlayerInfo[playerid][pEditMovel] != -1)
		{
		    //SCM(playerid, -1, "DEBUG: Editando móvel | Cancelou");
		    new id = PlayerInfo[playerid][pEditMovel];

			if(GetPVarInt(playerid, "ComprandoNovoMovel") == 1)
			{
			    if (IsValidDynamicObject(FurniInfo[id][mObjeto]))
	    			DestroyDynamicObject(FurniInfo[id][mObjeto]);

			    DeletandoMovel(playerid, PlayerInfo[playerid][pEditMovel]);

			    SetPVarInt(playerid, "ComprandoNovoMovel", 0);
			}
			else
			    Movel_Refresh(playerid,id);

			Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
		    PlayerInfo[playerid][pEditMovel] = -1;
		    return 1;
		}
		else if(PlayerInfo[playerid][pEditPorta][0] != -1)
		{
		    //SCM(playerid, -1, "DEBUG: Editando porta 1 | Cancelou");
		    new id = PlayerInfo[playerid][pEditPorta][0];

		    if (IsValidDynamicObject(FurniInfo[id][mObjeto]))
    			DestroyDynamicObject(FurniInfo[id][mObjeto]);

		    DeletandoMovel(playerid, id);

            PlayerInfo[playerid][pEditMovel] = -1;
		    PlayerInfo[playerid][pEditPorta][0] = -1;
		    PlayerInfo[playerid][pEditPorta][1] = -1;
		    return 1;
		}
		else if(PlayerInfo[playerid][pEditPorta][1] != -1)
		{
		    //SCM(playerid, -1, "DEBUG: Editando porta 2 | Cancelou");
		    new id = PlayerInfo[playerid][pEditPorta][1];

		    if (IsValidDynamicObject(FurniInfo[id][mObjeto]))
    			DestroyDynamicObject(FurniInfo[id][mObjeto]);

		    DeletandoMovel(playerid, id);

            PlayerInfo[playerid][pEditMovel] = -1;
            PlayerInfo[playerid][pEditPorta][0] = -1;
		    PlayerInfo[playerid][pEditPorta][1] = -1;
		    return 1;
		}
		else if(PlayerInfo[playerid][pEditandoPortao][0] != -1)
		{
		    //SCM(playerid, -1, "DEBUG: Editando portão 1 | Cancelou");
		    new i = PlayerInfo[playerid][pEditandoPortao][0];

			PortaoInfo[i][ptX] = x;
			PortaoInfo[i][ptY] = y;
			PortaoInfo[i][ptZ] = z;
			PortaoInfo[i][ptRX] = rx;
			PortaoInfo[i][ptRY] = ry;
			PortaoInfo[i][ptRZ] = rz;

            PlayerInfo[playerid][pEditandoPortao][0] = -1;
			PlayerInfo[playerid][pEditandoPortao][1] = i;
			SCM(playerid, COLOR_YELLOW, "Posicione o Portão aberto.");
			EditDynamicObject(playerid, PortaoInfo[i][ptObjeto]);
			return 1;
		}
		else if(PlayerInfo[playerid][pEditandoPortao][1] != -1)
		{
		    //SCM(playerid, -1, "DEBUG: Editando portão 2 | Cancelou");
		    new i = PlayerInfo[playerid][pEditandoPortao][1];

			PortaoInfo[i][ptAX] = x;
			PortaoInfo[i][ptAY] = y;
			PortaoInfo[i][ptAZ] = z;
			PortaoInfo[i][ptRAX] = rx;
			PortaoInfo[i][ptRAY] = ry;
			PortaoInfo[i][ptRAZ] = rz;

            PlayerInfo[playerid][pEditandoPortao][0] = -1;
			PlayerInfo[playerid][pEditandoPortao][1] = -1;
			SCM(playerid, COLOR_LIGHTGREEN, "Portão Completo.");

			MoveDynamicObject(PortaoInfo[i][ptObjeto], PortaoInfo[i][ptX], PortaoInfo[i][ptY], PortaoInfo[i][ptZ], 6.0, PortaoInfo[i][ptRX], PortaoInfo[i][ptRY], PortaoInfo[i][ptRZ]);
			return 1;
		}
		else if(PlayerInfo[playerid][pEditandoBareira] != -1)
		{
		    //SCM(playerid, -1, "DEBUG: Barreira | Cancelou");
			new id = PlayerInfo[playerid][pEditandoBareira];
			BarreiraInfo[id][BlockX] = x;
			BarreiraInfo[id][BlockY] = y;
			BarreiraInfo[id][BlockZ] = z;
		    PlayerInfo[playerid][pEditandoBareira] = -1;
		    return 1;
		}
		else if(OutrasInfos[playerid][oEditandoMesaPoker] != -1)
		{
		    //SCM(playerid, -1, "DEBUG: Mesa de Poker | Cancelou");
			new tableid = OutrasInfos[playerid][oEditandoMesaPoker]-1;
			OutrasInfos[playerid][oEditandoMesaPoker] = -1;

			DestroyPokerTable(tableid);
			PlacePokerTable(tableid, 0, GetPVarFloat(playerid, "tmpPkrX"), GetPVarFloat(playerid, "tmpPkrY"), GetPVarFloat(playerid, "tmpPkrZ"), GetPVarFloat(playerid, "tmpPkrRX"), GetPVarFloat(playerid, "tmpPkrRY"), GetPVarFloat(playerid, "tmpPkrRZ"), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

			DeletePVar(playerid, "tmpPkrX");
			DeletePVar(playerid, "tmpPkrY");
			DeletePVar(playerid, "tmpPkrZ");
 			DeletePVar(playerid, "tmpPkrRX");
  			DeletePVar(playerid, "tmpPkrRY");
  			DeletePVar(playerid, "tmpPkrRZ");

			ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSELECTPOKER);
			return 1;
		}
		else if(GetPVarInt(playerid, "EditandoBoomboxPos") != -1)
        {
            //SCM(playerid, -1, "DEBUG: Boombox | Cancelou");
		    new world = GetPlayerVirtualWorld(playerid);
		    new box = GetPVarInt(playerid, "EditandoBoomboxPos");

            if(IsValidDynamicObject(BoomBoxInfo[box][boObject])) DestroyDynamicObject(BoomBoxInfo[box][boObject]);

			BoomBoxInfo[box][boObject] = CreateDynamicObject(2102,BoomBoxInfo[box][boX],BoomBoxInfo[box][boY],BoomBoxInfo[box][boZ],0.0,0.0,0.0, world);
			SendClientMessage( playerid,COLOR_LIGHTRED,"Você cancelou a edição da boombox." );
			SetPVarInt(playerid, "EditandoBoomboxPos", -1);
			return 1;
		}
		else
		{
		    SCM(playerid, -1, "ERRO #025 - Contate um administrador.");
		}
	}
	return 1;
}
//================================================================================================================//
//  FURNITURE SYSTEM - FURNITURE SYSTEM - FURNITURE SYSTEM - FURNITURE SYSTEM - FURNITURE SYSTEM - FURNITURE SYSTEM
//================================================================================================================//

COMMAND:corfurniture(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 3001) return 1;
	new vworld, tipo, propid;
	if(sscanf(params, "iii", vworld, tipo, propid))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /corfurniture [world id] [tipo] [id]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "Tipos: 1 Casa | 2 Empresa | 3 Garagem | 4 Complexo");
		return 1;
	}
	else
	{
    	for(new i = 0; i < MAX_MOVEIS; i++)
		{
		    if(FurniInfo[i][mWorld] == vworld)
		    {
		        if(tipo == 1)
		        {
					if(FurniInfo[i][mNaCasa] == 0 && FurniInfo[i][mInt] == 0)
					{
					    FurniInfo[i][mNaCasa] = propid;
					    FurniInfo[i][mNaEmpresa] = -1;
					    FurniInfo[i][mNoComplexo] = -1;
					    FurniInfo[i][mNaGaragem] = -1;
					    FurniInfo[i][mInt] = 1;

					    Movel_Refresh(playerid, i);
					}
				}
				else if(tipo == 2)
		        {
					if(FurniInfo[i][mNaCasa] == 0 && FurniInfo[i][mInt] == 0)
					{
					    FurniInfo[i][mNaCasa] = -1;
					    FurniInfo[i][mNaEmpresa] = propid;
					    FurniInfo[i][mNoComplexo] = -1;
					    FurniInfo[i][mNaGaragem] = -1;
					    FurniInfo[i][mInt] = 1;

					    Movel_Refresh(playerid, i);
					}
				}
				else if(tipo == 3)
		        {
					if(FurniInfo[i][mNaCasa] == 0 && FurniInfo[i][mInt] == 0)
					{
					    FurniInfo[i][mNaCasa] = -1;
					    FurniInfo[i][mNaEmpresa] = -1;
					    FurniInfo[i][mNoComplexo] = propid;
					    FurniInfo[i][mNaGaragem] = -1;
					    FurniInfo[i][mInt] = 1;

					    Movel_Refresh(playerid, i);
					}
				}
				else if(tipo == 4)
		        {
					if(FurniInfo[i][mNaCasa] == 0 && FurniInfo[i][mInt] == 0)
					{
					    FurniInfo[i][mNaCasa] = -1;
					    FurniInfo[i][mNaEmpresa] = -1;
					    FurniInfo[i][mNoComplexo] = -1;
					    FurniInfo[i][mNaGaragem] = propid;
					    FurniInfo[i][mInt] = 1;

					    Movel_Refresh(playerid, i);
					}
				}
			}
		}
		SendClientMessage(playerid, COLOR_LIGHTRED, "Moveis Corrigidos..");
	}
	return 1;
}

forward CarregandoMoveis();
public CarregandoMoveis()
{
    new Rows, Fields, totalmoveis = 0;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
		for(new i; i < Rows; i++)
		{
			if(i < MAX_MOVEIS)
			{
				new movelid = cache_get_field_content_int(i, "mID");
			 	FurniInfo[movelid][mID] = movelid;

			 	FurniInfo[movelid][mCriado] = cache_get_field_content_int(i, "mCriado");
			 	FurniInfo[movelid][mModelo] = cache_get_field_content_int(i, "mModelo");
				FurniInfo[movelid][mX] = cache_get_field_content_float(i, "mX");
				FurniInfo[movelid][mY] = cache_get_field_content_float(i, "mY");
				FurniInfo[movelid][mZ] = cache_get_field_content_float(i, "mZ");
				FurniInfo[movelid][mRX] = cache_get_field_content_float(i, "mRX");
				FurniInfo[movelid][mRY] = cache_get_field_content_float(i, "mRY");
				FurniInfo[movelid][mRZ] = cache_get_field_content_float(i, "mRZ");
			 	FurniInfo[movelid][mWorld] = cache_get_field_content_int(i, "mWorld");
			 	FurniInfo[movelid][mInt] = cache_get_field_content_int(i, "mInt");
			 	FurniInfo[movelid][mTextura] = cache_get_field_content_int(i, "mTextura");
			 	FurniInfo[movelid][mCor] = cache_get_field_content_int(i, "mCor");
			 	FurniInfo[movelid][mNaCasa] = cache_get_field_content_int(i, "mNaCasa");
			 	FurniInfo[movelid][mNaEmpresa] = cache_get_field_content_int(i, "mNaEmpresa");
			 	cache_get_field_content(i, "mFurniNome", FurniInfo[movelid][mFurniNome], Pipeline, 24);
				FurniInfo[movelid][mARZ] = cache_get_field_content_float(i, "mARZ");
			 	FurniInfo[movelid][mPAberta] = cache_get_field_content_int(i, "mPAberta");
			 	FurniInfo[movelid][mPTrancada] = cache_get_field_content_int(i, "mPTrancada");
			 	FurniInfo[movelid][mNoComplexo] = cache_get_field_content_int(i, "mNoComplexo");
			 	FurniInfo[movelid][mIndex] = cache_get_field_content_int(i, "mIndex");
			 	FurniInfo[movelid][mNaGaragem] = cache_get_field_content_int(i, "mNaGaragem");

				totalmoveis++;
			}
		}
	}
	CriarFurnitures();
	printf("[CARREGADO] FURNITURE: %d moveis.",totalmoveis);
	return 1;
}

forward CriarFurnitures();
public CriarFurnitures()
{
	for(new movelid = 0; movelid < MAX_MOVEIS; movelid++)
	{
	    if(FurniInfo[movelid][mCriado] == 1)
		{
  			if(FurniInfo[movelid][mModelo] != 0)
   			{
	    		if(ObjetoEPorta(FurniInfo[movelid][mModelo]))
				{
		  			if(FurniInfo[movelid][mPAberta] == 0)
		    		{
						FurniInfo[movelid][mObjeto] = CreateDynamicObject(FurniInfo[movelid][mModelo], FurniInfo[movelid][mX], FurniInfo[movelid][mY], FurniInfo[movelid][mZ], FurniInfo[movelid][mRX], FurniInfo[movelid][mRY], FurniInfo[movelid][mRZ] ,FurniInfo[movelid][mWorld], FurniInfo[movelid][mInt]);
					}
					else
					{
					    FurniInfo[movelid][mObjeto] = CreateDynamicObject(FurniInfo[movelid][mModelo], FurniInfo[movelid][mX], FurniInfo[movelid][mY], FurniInfo[movelid][mZ], FurniInfo[movelid][mRX], FurniInfo[movelid][mRY], FurniInfo[movelid][mARZ] ,FurniInfo[movelid][mWorld], FurniInfo[movelid][mInt]);
					}
				}
				else
				{
					FurniInfo[movelid][mObjeto] = CreateDynamicObject(FurniInfo[movelid][mModelo], FurniInfo[movelid][mX], FurniInfo[movelid][mY], FurniInfo[movelid][mZ], FurniInfo[movelid][mRX], FurniInfo[movelid][mRY], FurniInfo[movelid][mRZ] ,FurniInfo[movelid][mWorld], FurniInfo[movelid][mInt]);
				}

				Movel_AplicarTextura(movelid);
			}
	 	}
	}
}

SalvarMovel(movelID)
{
	if (FurniInfo[movelID][mCriado] == 1)
	{
		static query[2048];
		format(query, sizeof(query), "UPDATE `furniture` SET `mCriado` = '%d', `mModelo` = '%d', `mX` = '%.4f', `mY` = '%.4f', `mZ` = '%.4f', `mRX` = '%.4f', `mRY` = '%.4f', `mRZ` = '%.4f', `mWorld` = '%d' WHERE `mID` = '%d'",
			FurniInfo[movelID][mCriado],
			FurniInfo[movelID][mModelo],
			FurniInfo[movelID][mX],
			FurniInfo[movelID][mY],
			FurniInfo[movelID][mZ],
			FurniInfo[movelID][mRX],
			FurniInfo[movelID][mRY],
			FurniInfo[movelID][mRZ],
			FurniInfo[movelID][mWorld],
		    FurniInfo[movelID][mID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

		format(query, sizeof(query), "UPDATE `furniture` SET `mInt` = '%d', `mTextura` = '%d',  `mCor` = '%d',  `mNaCasa` = '%d',  `mNaEmpresa` = '%d',  `mFurniNome` = '%s' WHERE `mID` = '%d'",
			FurniInfo[movelID][mInt],
			FurniInfo[movelID][mTextura],
			FurniInfo[movelID][mCor],
			FurniInfo[movelID][mNaCasa],
			FurniInfo[movelID][mNaEmpresa],
			FurniInfo[movelID][mFurniNome],
		    FurniInfo[movelID][mID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

		format(query, sizeof(query), "UPDATE `furniture` SET `mARZ` = '%.4f', `mPAberta` = '%d', `mPTrancada`='%d', `mNoComplexo`='%d', `mIndex`='%d', `mNaGaragem`='%d' WHERE `mID` = '%d'",
			FurniInfo[movelID][mARZ],
			FurniInfo[movelID][mPAberta],
			FurniInfo[movelID][mPTrancada],
			FurniInfo[movelID][mNoComplexo],
			FurniInfo[movelID][mIndex],
			FurniInfo[movelID][mNaGaragem],
		    FurniInfo[movelID][mID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

	}
	return 1;
}

forward CarregandoGoverno();
public CarregandoGoverno()
{
    new Rows, Fields;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		new tmp[255];

		for(new i ; i < Rows; i++)
		{
		    cache_get_field_content(i, "cofres", tmp);
		    GovInfo[gCofres] = strval(tmp);

		    cache_get_field_content(i, "taxa", tmp);
		    GovInfo[gTaxa] = strval(tmp);

		    cache_get_field_content(i, "taxaluz", tmp);
		    GovInfo[gTaxaLuz] = strval(tmp);

		    cache_get_field_content(i, "taxahp", tmp);
		    GovInfo[gTaxaHP] = strval(tmp);

		    cache_get_field_content(i, "convenio", tmp);
		    GovInfo[gConvenio] = strval(tmp);

		    cache_get_field_content(i, "prefeito", tmp);
		    format(GovInfo[gPrefeito], 24, "%s", tmp);

		    cache_get_field_content(i, "salariomin", tmp);
		    GovInfo[gSalarioMin] = strval(tmp);

		    cache_get_field_content(i, "salariosgov", tmp);
			sscanf(tmp, "p<|>iiiiii", GovInfo[gSalarioGOV][0], GovInfo[gSalarioGOV][1], GovInfo[gSalarioGOV][2], GovInfo[gSalarioGOV][3], GovInfo[gSalarioGOV][4], GovInfo[gSalarioGOV][5], GovInfo[gSalarioGOV][6], GovInfo[gSalarioGOV][7], GovInfo[gSalarioGOV][8], GovInfo[gSalarioGOV][9], GovInfo[gSalarioGOV][10], GovInfo[gSalarioGOV][11]);
			cache_get_field_content(i, "salariospd", tmp);
			sscanf(tmp, "p<|>iiiiiiiiiiii", GovInfo[gSalarioPMESP][0], GovInfo[gSalarioPMESP][1], GovInfo[gSalarioPMESP][2], GovInfo[gSalarioPMESP][3], GovInfo[gSalarioPMESP][4], GovInfo[gSalarioPMESP][5], GovInfo[gSalarioPMESP][6], GovInfo[gSalarioPMESP][7], GovInfo[gSalarioPMESP][8], GovInfo[gSalarioPMESP][9], GovInfo[gSalarioPMESP][10], GovInfo[gSalarioPMESP][11]);
      		cache_get_field_content(i, "salariospc", tmp);
            sscanf(tmp, "p<|>iiiiiiiiiiii", GovInfo[gSalarioPC][0], GovInfo[gSalarioPC][1], GovInfo[gSalarioPC][2], GovInfo[gSalarioPC][3], GovInfo[gSalarioPC][4], GovInfo[gSalarioPC][5], GovInfo[gSalarioPC][6], GovInfo[gSalarioPC][7], GovInfo[gSalarioPC][8], GovInfo[gSalarioPC][9], GovInfo[gSalarioPC][10], GovInfo[gSalarioPC][11]);
            cache_get_field_content(i, "salarioseb", tmp);
			sscanf(tmp, "p<|>iiiiiiiiiiii", GovInfo[gSalarioEB][0], GovInfo[gSalarioEB][1], GovInfo[gSalarioEB][2], GovInfo[gSalarioEB][3], GovInfo[gSalarioEB][4], GovInfo[gSalarioEB][5], GovInfo[gSalarioEB][6], GovInfo[gSalarioEB][7], GovInfo[gSalarioEB][8], GovInfo[gSalarioEB][9], GovInfo[gSalarioEB][10], GovInfo[gSalarioEB][11]);
		    cache_get_field_content(i, "salariosfd", tmp);
			sscanf(tmp, "p<|>iiiiiiiiiiii", GovInfo[gSalarioFD][0], GovInfo[gSalarioFD][1], GovInfo[gSalarioFD][2], GovInfo[gSalarioFD][3], GovInfo[gSalarioFD][4], GovInfo[gSalarioFD][5], GovInfo[gSalarioFD][6], GovInfo[gSalarioFD][7], GovInfo[gSalarioFD][8], GovInfo[gSalarioFD][9], GovInfo[gSalarioFD][10], GovInfo[gSalarioFD][11]);
		    cache_get_field_content(i, "salariosTJRP", tmp);
			sscanf(tmp, "p<|>iiiiiiiiiiii", GovInfo[gSalarioTJRP][0], GovInfo[gSalarioTJRP][1], GovInfo[gSalarioTJRP][2], GovInfo[gSalarioTJRP][3], GovInfo[gSalarioTJRP][4], GovInfo[gSalarioTJRP][5], GovInfo[gSalarioTJRP][6], GovInfo[gSalarioTJRP][7], GovInfo[gSalarioTJRP][8], GovInfo[gSalarioTJRP][9], GovInfo[gSalarioTJRP][10], GovInfo[gSalarioTJRP][11]);	
		    cache_get_field_content(i, "salariosFacCivil", tmp);
			sscanf(tmp, "p<|>iiiiiiiiiiii", GovInfo[gSalarioFacCivil][0], GovInfo[gSalarioFacCivil][1], GovInfo[gSalarioFacCivil][2], GovInfo[gSalarioFacCivil][3], GovInfo[gSalarioFacCivil][4], GovInfo[gSalarioFacCivil][5], GovInfo[gSalarioFacCivil][6], GovInfo[gSalarioFacCivil][7], GovInfo[gSalarioFacCivil][8], GovInfo[gSalarioFacCivil][9], GovInfo[gSalarioFacCivil][10], GovInfo[gSalarioFacCivil][11]);	

		}
	}
	printf("[CARREGADO] Cofre do governo: R$%d", GovInfo[gCofres]);


	print("SERVER: Carregado com sucesso!");
	return 1;
}
//============================================================================================================//
//  HOUSE SYSTEM - HOUSE SYSTEM - HOUSE SYSTEM - HOUSE SYSTEM - HOUSE SYSTEM - HOUSE SYSTEM - HOUSE SYSTEM
//============================================================================================================//
forward CarregandoCasas();
public CarregandoCasas()
{
    new Rows, Fields, totalcasas = 0;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		new tmp[130];

		for(new i ; i < Rows; i++) if(i < MAX_HOUSES)
		{
			cache_get_field_content(i, "hID", tmp);
			new houseid = strval(tmp);
		 	HouseInfo[houseid][hID] = strval(tmp);

			cache_get_field_content(i, "Criada", tmp);
			HouseInfo[houseid][hCriada] = strval(tmp);

			cache_get_field_content(i, "Dono", tmp);
			HouseInfo[houseid][hDono] = strval(tmp);

			cache_get_field_content(i, "ExX", tmp);
			HouseInfo[houseid][hExX] = floatstr(tmp);

			cache_get_field_content(i, "ExY", tmp);
			HouseInfo[houseid][hExY] = floatstr(tmp);

			cache_get_field_content(i, "ExZ", tmp);
			HouseInfo[houseid][hExZ] = floatstr(tmp);

			cache_get_field_content(i, "InX", tmp);
			HouseInfo[houseid][hInX] = floatstr(tmp);

			cache_get_field_content(i, "InY", tmp);
			HouseInfo[houseid][hInY] = floatstr(tmp);

			cache_get_field_content(i, "InZ", tmp);
			HouseInfo[houseid][hInZ] = floatstr(tmp);

			cache_get_field_content(i, "ExX2", tmp);
			HouseInfo[houseid][hExX2] = floatstr(tmp);

			cache_get_field_content(i, "ExY2", tmp);
			HouseInfo[houseid][hExY2] = floatstr(tmp);

			cache_get_field_content(i, "ExZ2", tmp);
			HouseInfo[houseid][hExZ2] = floatstr(tmp);

			cache_get_field_content(i, "InX2", tmp);
			HouseInfo[houseid][hInX2] = floatstr(tmp);

			cache_get_field_content(i, "InY2", tmp);
			HouseInfo[houseid][hInY2] = floatstr(tmp);

			cache_get_field_content(i, "InZ2", tmp);
			HouseInfo[houseid][hInZ2] = floatstr(tmp);

			cache_get_field_content(i, "ExWorld", tmp);
			HouseInfo[houseid][hExWorld] = strval(tmp);

			cache_get_field_content(i, "ExInt", tmp);
			HouseInfo[houseid][hExInt] = strval(tmp);

			cache_get_field_content(i, "Int", tmp);
			HouseInfo[houseid][hInt] = strval(tmp);

			cache_get_field_content(i, "Preco", tmp);
			HouseInfo[houseid][hPreco] = strval(tmp);

			cache_get_field_content(i, "Trancada", tmp);
			HouseInfo[houseid][hTrancada] = strval(tmp);

			cache_get_field_content(i, "PlacaX", tmp);
			HouseInfo[houseid][hPlacaX] = floatstr(tmp);

			cache_get_field_content(i, "PlacaY", tmp);
			HouseInfo[houseid][hPlacaY] = floatstr(tmp);

			cache_get_field_content(i, "PlacaZ", tmp);
			HouseInfo[houseid][hPlacaZ] = floatstr(tmp);

			cache_get_field_content(i, "PlacaR", tmp);
			HouseInfo[houseid][hPlacaR] = floatstr(tmp);

			cache_get_field_content(i, "AVenda", tmp);
			HouseInfo[houseid][hAVenda] = strval(tmp);

			cache_get_field_content(i, "TelCont", tmp);
			HouseInfo[houseid][hTelCont] = strval(tmp);

			cache_get_field_content(i, "Perm1", tmp);
			format(HouseInfo[houseid][hPerm1], 24, "%s", tmp);

			cache_get_field_content(i, "Perm2", tmp);
	   		format(HouseInfo[houseid][hPerm2], 24, "%s", tmp);

			cache_get_field_content(i, "Perm3", tmp);
   			format(HouseInfo[houseid][hPerm3], 24, "%s", tmp);

   			cache_get_field_content(i, "hBank", tmp);
			HouseInfo[houseid][hBank] = strval(tmp);

			cache_get_field_content(i, "hXMR", tmp);
			HouseInfo[houseid][hXMR] = strval(tmp);

			cache_get_field_content(i, "hDia", tmp);
			HouseInfo[houseid][hDia] = strval(tmp);

 			cache_get_field_content(i, "hTipo", tmp);
 			HouseInfo[houseid][hTipo] = strval(tmp);

 			cache_get_field_content(i, "hAlarme", tmp);
 			HouseInfo[houseid][hAlarme] = strval(tmp);

			cache_get_field_content(i, "hInterruptor", tmp);
 			HouseInfo[houseid][hInterruptor] = strval(tmp);

 			cache_get_field_content(i, "hGasto", tmp);
 			HouseInfo[houseid][hGasto] = strval(tmp);

 			cache_get_field_content(i, "hEndereco", tmp);
   			format(HouseInfo[houseid][hEndereco], 32, "%s", tmp);

			if(HouseInfo[houseid][hCriada] == 1)
			{
			    totalcasas++;
			    if(HouseInfo[houseid][hDono] > 0)
			    {
			        if(gettime() > HouseInfo[houseid][hDia])
			        {
						HouseInfo[houseid][hDia] = 0;
						HouseInfo[houseid][hDono] = 0;
						HouseInfo[houseid][hAVenda] = 1;
						format(HouseInfo[houseid][hPerm1], 24, "Vazio");
    					format(HouseInfo[houseid][hPerm2], 24, "Vazio");
    					format(HouseInfo[houseid][hPerm3], 24, "Vazio");
    					HouseInfo[houseid][hBank] = 0;
    					HouseInfo[houseid][hAlarme] = 0;
			        }

				}

				if(HouseInfo[houseid][hDono] == 0 && HouseInfo[houseid][hAVenda] == 0)
				{
					HouseInfo[houseid][hDono] = 0;
					HouseInfo[houseid][hAVenda] = 1;

					if(IsValidDynamicObject(HouseInfo[houseid][ObjPlaca]))
	    				DestroyDynamicObject(HouseInfo[houseid][ObjPlaca]);
	                if (IsValidDynamic3DTextLabel(HouseInfo[houseid][HouseText]))
					DestroyDynamic3DTextLabel(HouseInfo[houseid][HouseText]);

					format(HouseInfo[houseid][hPerm1], 24, "Vazio");
		    		format(HouseInfo[houseid][hPerm2], 24, "Vazio");
		    		format(HouseInfo[houseid][hPerm3], 24, "Vazio");
				}
                if(HouseInfo[houseid][hAVenda] == 1)
				{
				    //format(string, sizeof(string), "[Propriedade]\nVende-se\nR$%d!",HouseInfo[houseid][hPreco]);
				    //HouseInfo[houseid][HouseText] = CreateDynamic3DTextLabel(string, 0x00A974FF, HouseInfo[houseid][hExX], HouseInfo[houseid][hExY], HouseInfo[houseid][hExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[houseid][hExWorld], HouseInfo[houseid][hExInt]);
				    if(HouseInfo[houseid][hPlacaX] != 0 && HouseInfo[houseid][hPlacaY] != 0 && HouseInfo[houseid][hPlacaZ] != 0)
					{
						HouseInfo[houseid][ObjPlaca] = CreateDynamicObject(19471, HouseInfo[houseid][hPlacaX], HouseInfo[houseid][hPlacaY], HouseInfo[houseid][hPlacaZ], 0.0, 0.0, HouseInfo[houseid][hPlacaR], HouseInfo[houseid][hExWorld], HouseInfo[houseid][hExInt]);
					}
				}
				else if(HouseInfo[houseid][hTelCont] != 0)
				{
				    //format(string, sizeof(string), "[Propriedade]\nVende-se\nContato: %d!",HouseInfo[houseid][hTelCont]);
				    //HouseInfo[houseid][HouseText] = CreateDynamic3DTextLabel(string, 0x00A974FF, HouseInfo[houseid][hExX], HouseInfo[houseid][hExY], HouseInfo[houseid][hExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[houseid][hExWorld], HouseInfo[houseid][hExInt]);
				    if(HouseInfo[houseid][hPlacaX] != 0 && HouseInfo[houseid][hPlacaY] != 0 && HouseInfo[houseid][hPlacaZ] != 0)
					{
						HouseInfo[houseid][ObjPlaca] = CreateDynamicObject(19471, HouseInfo[houseid][hPlacaX], HouseInfo[houseid][hPlacaY], HouseInfo[houseid][hPlacaZ], 0.0, 0.0, HouseInfo[houseid][hPlacaR], HouseInfo[houseid][hExWorld], HouseInfo[houseid][hExInt]);
					}
				}
			}
		}
	}
	printf("[CARREGADO] Casas: %d",totalcasas);
	return 1;
}

forward CarregandoGaragens();
public CarregandoGaragens()
{
    new Rows, Fields, totalcasas = 0;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		new tmp[130];

		for(new i ; i < Rows; i++) if(i < MAX_GARAGENS)
		{
			cache_get_field_content(i, "hIDa", tmp);
			new houseid = strval(tmp);
		 	GaragemInfo[houseid][hID] = strval(tmp);

			cache_get_field_content(i, "Criada", tmp);
			GaragemInfo[houseid][hCriada] = strval(tmp);

			cache_get_field_content(i, "Dono", tmp);
			GaragemInfo[houseid][hDono] = strval(tmp);

			cache_get_field_content(i, "ExX", tmp);
			GaragemInfo[houseid][hExX] = floatstr(tmp);

			cache_get_field_content(i, "ExY", tmp);
			GaragemInfo[houseid][hExY] = floatstr(tmp);

			cache_get_field_content(i, "ExZ", tmp);
			GaragemInfo[houseid][hExZ] = floatstr(tmp);

			cache_get_field_content(i, "InX", tmp);
			GaragemInfo[houseid][hInX] = floatstr(tmp);

			cache_get_field_content(i, "InY", tmp);
			GaragemInfo[houseid][hInY] = floatstr(tmp);

			cache_get_field_content(i, "InZ", tmp);
			GaragemInfo[houseid][hInZ] = floatstr(tmp);

			cache_get_field_content(i, "InR", tmp);
			GaragemInfo[houseid][hInR] = floatstr(tmp);

			cache_get_field_content(i, "ExX2", tmp);
			GaragemInfo[houseid][hExX2] = floatstr(tmp);

			cache_get_field_content(i, "ExY2", tmp);
			GaragemInfo[houseid][hExY2] = floatstr(tmp);

			cache_get_field_content(i, "ExZ2", tmp);
			GaragemInfo[houseid][hExZ2] = floatstr(tmp);

			cache_get_field_content(i, "ExR", tmp);
			GaragemInfo[houseid][hExR] = floatstr(tmp);

			cache_get_field_content(i, "ExWorld", tmp);
			GaragemInfo[houseid][hExWorld] = strval(tmp);

			cache_get_field_content(i, "ExInt", tmp);
			GaragemInfo[houseid][hExInt] = strval(tmp);

			cache_get_field_content(i, "Int", tmp);
			GaragemInfo[houseid][hInt] = strval(tmp);

			cache_get_field_content(i, "Preco", tmp);
			GaragemInfo[houseid][hPreco] = strval(tmp);

			cache_get_field_content(i, "Trancada", tmp);
			GaragemInfo[houseid][hTrancada] = strval(tmp);

			cache_get_field_content(i, "PlacaX", tmp);
			GaragemInfo[houseid][hPlacaX] = floatstr(tmp);

			cache_get_field_content(i, "PlacaY", tmp);
			GaragemInfo[houseid][hPlacaY] = floatstr(tmp);

			cache_get_field_content(i, "PlacaZ", tmp);
			GaragemInfo[houseid][hPlacaZ] = floatstr(tmp);

			cache_get_field_content(i, "PlacaR", tmp);
			GaragemInfo[houseid][hPlacaR] = floatstr(tmp);

			cache_get_field_content(i, "AVenda", tmp);
			GaragemInfo[houseid][hAVenda] = strval(tmp);

			cache_get_field_content(i, "TelCont", tmp);
			GaragemInfo[houseid][hTelCont] = strval(tmp);

			cache_get_field_content(i, "Perm1", tmp);
			format(GaragemInfo[houseid][hPerm1], 24, "%s", tmp);

			cache_get_field_content(i, "Perm2", tmp);
	   		format(GaragemInfo[houseid][hPerm2], 24, "%s", tmp);

			cache_get_field_content(i, "Perm3", tmp);
   			format(GaragemInfo[houseid][hPerm3], 24, "%s", tmp);

   			cache_get_field_content(i, "hBank", tmp);
			GaragemInfo[houseid][hBank] = strval(tmp);

			cache_get_field_content(i, "hXMR", tmp);
			GaragemInfo[houseid][hXMR] = strval(tmp);

			cache_get_field_content(i, "hDia", tmp);
			GaragemInfo[houseid][hDia] = strval(tmp);

 			cache_get_field_content(i, "hTipo", tmp);
 			GaragemInfo[houseid][hTipo] = strval(tmp);

 			cache_get_field_content(i, "hAlarme", tmp);
 			GaragemInfo[houseid][hAlarme] = strval(tmp);

			cache_get_field_content(i, "hInterruptor", tmp);
 			GaragemInfo[houseid][hInterruptor] = strval(tmp);

 			cache_get_field_content(i, "hGasto", tmp);
 			GaragemInfo[houseid][hGasto] = strval(tmp);

 			cache_get_field_content(i, "carros", tmp);
 			GaragemInfo[houseid][hCarros] = strval(tmp);

			if(GaragemInfo[houseid][hCriada] == 1)
			{
			    totalcasas++;
			    if(GaragemInfo[houseid][hDono] > 0)
			    {
			    	if(gettime() > GaragemInfo[houseid][hDia])
			    	{
						GaragemInfo[houseid][hDia] = 0;
						GaragemInfo[houseid][hDono] = 0;
						GaragemInfo[houseid][hAVenda] = 1;
						format(GaragemInfo[houseid][hPerm1], 24, "Vazio");
    					format(GaragemInfo[houseid][hPerm2], 24, "Vazio");
    					format(GaragemInfo[houseid][hPerm3], 24, "Vazio");
    					GaragemInfo[houseid][hBank] = 0;
    					GaragemInfo[houseid][hAlarme] = 0;
			    	}
				}

    			if(GaragemInfo[houseid][hDono] == 0 && GaragemInfo[houseid][hAVenda] == 0)
				{
					GaragemInfo[houseid][hDono] = 0;
					GaragemInfo[houseid][hAVenda] = 1;

					if(IsValidDynamicObject(GaragemInfo[houseid][ObjPlaca]))
	    				DestroyDynamicObject(GaragemInfo[houseid][ObjPlaca]);
	                if (IsValidDynamic3DTextLabel(GaragemInfo[houseid][HouseText]))
					DestroyDynamic3DTextLabel(GaragemInfo[houseid][HouseText]);

					format(GaragemInfo[houseid][hPerm1], 24, "Vazio");
		    		format(GaragemInfo[houseid][hPerm2], 24, "Vazio");
		    		format(GaragemInfo[houseid][hPerm3], 24, "Vazio");
				}
                if(GaragemInfo[houseid][hAVenda] == 1)
				{
				    if(GaragemInfo[houseid][hPlacaX] != 0 && GaragemInfo[houseid][hPlacaY] != 0 && GaragemInfo[houseid][hPlacaZ] != 0)
					{
						GaragemInfo[houseid][ObjPlaca] = CreateDynamicObject(19471, GaragemInfo[houseid][hPlacaX], GaragemInfo[houseid][hPlacaY], GaragemInfo[houseid][hPlacaZ], 0.0, 0.0, GaragemInfo[houseid][hPlacaR], GaragemInfo[houseid][hExWorld], GaragemInfo[houseid][hExInt]);
					}
				}
				else if(GaragemInfo[houseid][hTelCont] != 0)
				{
				    if(GaragemInfo[houseid][hPlacaX] != 0 && GaragemInfo[houseid][hPlacaY] != 0 && GaragemInfo[houseid][hPlacaZ] != 0)
					{
						GaragemInfo[houseid][ObjPlaca] = CreateDynamicObject(19471, GaragemInfo[houseid][hPlacaX], GaragemInfo[houseid][hPlacaY], GaragemInfo[houseid][hPlacaZ], 0.0, 0.0, GaragemInfo[houseid][hPlacaR], GaragemInfo[houseid][hExWorld], GaragemInfo[houseid][hExInt]);
					}
				}
			}
		}
	}
	printf("[CARREGADO] Garagens: %d", totalcasas);
	return 1;
}

forward PerdeuCasaInatv(playerid, tempo, text[]);
public PerdeuCasaInatv(playerid, tempo, text[])
{
	new Rows, Fields;
	cache_get_data(Rows, Fields);
  	if(Rows)
  	{
  	    new tmp[130];
		cache_get_field_content(0, "ID", tmp);
  		new IDn = strval(tmp);

  		cache_get_field_content(0, "pCasasDeletadas", tmp);
  		new caPCERJelete = strval(tmp);

  		new totalcaPCERJelete = caPCERJelete+1;

    	format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `pCasasDeletadas` = '%d' WHERE `ID` = '%d'",
    	    totalcaPCERJelete,
		    IDn
		);
		mysql_function_query(Pipeline, szQuery, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);

		format(string, sizeof(string), "O player ID [SQL]: %d perdeu a casa por inatividade.", IDn);
		LogCMD_CasaInatividade(string);
	}
	return 1;
}

forward AtualizarCaPCERJata(playerid);
public AtualizarCaPCERJata(playerid)
{
	for(new h; h < MAX_HOUSES; h++)
	{
	    if (HouseInfo[h][hCriada] == 1)
		{
			if(HouseInfo[h][hDono] == PlayerInfo[playerid][pID])
			{
				new diasmais;
				if(PlayerInfo[playerid][pDoador] > 0) diasmais = 1814400; // 21 dias
				else diasmais = 1296000; // 15 dias

		    	HouseInfo[h][hDia] = gettime()+diasmais;
		    	SalvarCasa(h);
		    }
		}
	}
	return 1;
}

forward AtualizarGaragensData(playerid);
public AtualizarGaragensData(playerid)
{
	for(new h; h < MAX_GARAGENS; h++)
	{
	    if (GaragemInfo[h][hCriada] == 1)
		{
		    if(GaragemInfo[h][hTipo] == 0)
		    {
				if(GaragemInfo[h][hDono] == PlayerInfo[playerid][pID])
				{
				    new diasmais;
					if(PlayerInfo[playerid][pDoador] > 0) diasmais = 1814400; // 21 dias
					else diasmais = 1296000; // 15 dias

		    		GaragemInfo[h][hDia] = gettime()+diasmais;
		    		SalvarGaragem(h);
			    }
			}
		    else
		    {
		        new houseid = GaragemInfo[h][hTipo];
		        if(GaragemInfo[houseid][hDono] == PlayerInfo[playerid][pID])
				{
					new diasmais;
					if(PlayerInfo[playerid][pDoador] > 0) diasmais = 1814400; // 21 dias
					else diasmais = 1296000; // 15 dias

		    		GaragemInfo[h][hDia] = gettime()+diasmais;
		    		SalvarGaragem(h);
			    }
		    }
		}
	}
	return 1;
}

SalvarCasa(houseid)
{
	if (HouseInfo[houseid][hCriada] == 1 || HouseInfo[houseid][hCriada] == 2)
	{
		static query[2048];

		format(query, sizeof(query), "UPDATE `casas` SET `Criada` = '%d', `Dono` = '%d', `ExX` = '%.4f', `ExY` = '%.4f', `ExZ` = '%.4f', `InX` = '%.4f', `InY` = '%.4f', `InZ` = '%.4f', `ExWorld` = '%d', `ExInt` = '%d', `Int` = '%d',  `Preco` = '%d',  `Trancada` = '%d',  `PlacaX` = '%.4f', `PlacaY` = '%.4f', `PlacaZ` = '%.4f', `PlacaR` = '%.4f',`AVenda` = '%d',`TelCont`= '%d', `ExX2` = '%.4f', `ExY2` = '%.4f', `ExZ2` = '%.4f', `InX2` = '%.4f', `InY2` = '%.4f', `InZ2` = '%.4f' WHERE `hID` = '%d'",
			HouseInfo[houseid][hCriada],
			HouseInfo[houseid][hDono],
			HouseInfo[houseid][hExX],
			HouseInfo[houseid][hExY],
			HouseInfo[houseid][hExZ],
			HouseInfo[houseid][hInX],
			HouseInfo[houseid][hInY],
			HouseInfo[houseid][hInZ],
			HouseInfo[houseid][hExWorld],
			HouseInfo[houseid][hExInt],
			HouseInfo[houseid][hInt],
			HouseInfo[houseid][hPreco],
			HouseInfo[houseid][hTrancada],
			HouseInfo[houseid][hPlacaX],
			HouseInfo[houseid][hPlacaY],
			HouseInfo[houseid][hPlacaZ],
			HouseInfo[houseid][hPlacaR],
			HouseInfo[houseid][hAVenda],
			HouseInfo[houseid][hTelCont],
			HouseInfo[houseid][hExX2],
			HouseInfo[houseid][hExY2],
			HouseInfo[houseid][hExZ2],
			HouseInfo[houseid][hInX2],
			HouseInfo[houseid][hInY2],
			HouseInfo[houseid][hInZ2],
		    HouseInfo[houseid][hID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

		format(query, sizeof(query), "UPDATE `casas` SET `Perm1`= '%s',`Perm2`='%s',`Perm3`='%s',`hBank`='%d', `hXMR`='%s',`hDia`='%d',`hTipo`='%d', `hAlarme` = '%d', `hInterruptor`='%d', `hGasto`='%d', `hEndereco`= '%s' WHERE `hID` = '%d'",
			HouseInfo[houseid][hPerm1],
			HouseInfo[houseid][hPerm2],
			HouseInfo[houseid][hPerm3],
			HouseInfo[houseid][hBank],
			HouseInfo[houseid][hXMR],
			HouseInfo[houseid][hDia],
			HouseInfo[houseid][hTipo],
			HouseInfo[houseid][hAlarme],
			HouseInfo[houseid][hInterruptor],
			HouseInfo[houseid][hGasto],
			HouseInfo[houseid][hEndereco],
		    HouseInfo[houseid][hID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);
	}
	return 1;
}

SalvarGaragem(houseid)
{
	if (GaragemInfo[houseid][hCriada] == 1)
	{
		static query[2048];

		format(query, sizeof(query), "UPDATE `garagens` SET `Criada` = '%d', `Dono` = '%d', `ExX` = '%.4f', `ExY` = '%.4f', `ExZ` = '%.4f', `InX` = '%.4f', `InY` = '%.4f', `InZ` = '%.4f', `InR` = '%.4f', `ExWorld` = '%d', `ExInt` = '%d', `Int` = '%d',  `Preco` = '%d',  `Trancada` = '%d',  `PlacaX` = '%.4f', `PlacaY` = '%.4f', `PlacaZ` = '%.4f', `PlacaR` = '%.4f',`AVenda` = '%d',`TelCont`= '%d' WHERE `hIDa` = '%d'",
			GaragemInfo[houseid][hCriada],
			GaragemInfo[houseid][hDono],
			GaragemInfo[houseid][hExX],
			GaragemInfo[houseid][hExY],
			GaragemInfo[houseid][hExZ],
			GaragemInfo[houseid][hInX],
			GaragemInfo[houseid][hInY],
			GaragemInfo[houseid][hInZ],
			GaragemInfo[houseid][hInR],
			GaragemInfo[houseid][hExWorld],
			GaragemInfo[houseid][hExInt],
			GaragemInfo[houseid][hInt],
			GaragemInfo[houseid][hPreco],
			GaragemInfo[houseid][hTrancada],
			GaragemInfo[houseid][hPlacaX],
			GaragemInfo[houseid][hPlacaY],
			GaragemInfo[houseid][hPlacaZ],
			GaragemInfo[houseid][hPlacaR],
			GaragemInfo[houseid][hAVenda],
			GaragemInfo[houseid][hTelCont],
		    GaragemInfo[houseid][hID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

		format(query, sizeof(query), "UPDATE `garagens` SET `Perm1`= '%s',`Perm2`='%s',`Perm3`='%s',`hBank`='%d', `hXMR`='%s',`hDia`='%d',`hTipo`='%d', `hAlarme` = '%d', `hInterruptor`='%d', `hGasto`='%d', `carros`='%d' WHERE `hIDa` = '%d'",
			GaragemInfo[houseid][hPerm1],
			GaragemInfo[houseid][hPerm2],
			GaragemInfo[houseid][hPerm3],
			GaragemInfo[houseid][hBank],
			GaragemInfo[houseid][hXMR],
			GaragemInfo[houseid][hDia],
			GaragemInfo[houseid][hTipo],
			GaragemInfo[houseid][hAlarme],
			GaragemInfo[houseid][hInterruptor],
			GaragemInfo[houseid][hGasto],
			GaragemInfo[houseid][hCarros],
		    GaragemInfo[houseid][hID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

		format(query, sizeof(query), "UPDATE `garagens` SET `ExX2` = '%.4f', `ExY2` = '%.4f', `ExZ2` = '%.4f', `ExR` = '%.4f' WHERE `hIDa` = '%d'",
			GaragemInfo[houseid][hExX2],
			GaragemInfo[houseid][hExY2],
			GaragemInfo[houseid][hExZ2],
			GaragemInfo[houseid][hExR],
		    GaragemInfo[houseid][hID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);
	}
	return 1;
}

ALTCOMMAND:lock->trancar;
CMD:trancar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new tranccc = 0;
    for(new i; i < MAX_HOUSES; i++)
    {
        if(HouseInfo[i][hCriada])
		{
 			if((IsPlayerInRangeOfPoint(playerid, 1, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) || IsPlayerInRangeOfPoint(playerid, 1, HouseInfo[i][hExX2], HouseInfo[i][hExY2], HouseInfo[i][hExZ2])) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
   			{
   			    if(HouseInfo[i][hDono] == PlayerInfo[playerid][pID] || !strcmp(HouseInfo[i][hPerm1], PlayerName(playerid, 0), false) || !strcmp(HouseInfo[i][hPerm2], PlayerName(playerid, 0), false) || !strcmp(HouseInfo[i][hPerm3], PlayerName(playerid, 0), false))
   			    {
					switch(HouseInfo[i][hTrancada])
					{
					    case 0: { HouseInfo[i][hTrancada] = 1;  GameTextForPlayer(playerid, "~w~ Porta ~r~ trancada", 3000, 6); }
   			        	case 1: { HouseInfo[i][hTrancada] = 0;  GameTextForPlayer(playerid, "~w~ Porta ~g~ destrancada", 3000, 6); }
					}
					SalvarCasa(i);
					tranccc++;
   			        return 1;
   			    }
			}
			if((IsPlayerInRangeOfPoint(playerid, 3, HouseInfo[i][hInX], HouseInfo[i][hInY], HouseInfo[i][hInZ]) || IsPlayerInRangeOfPoint(playerid, 3, HouseInfo[i][hInX2], HouseInfo[i][hInY2], HouseInfo[i][hInZ2])) && GetPlayerVirtualWorld(playerid) == 100+i)
   			{
   			    if(HouseInfo[i][hDono] == PlayerInfo[playerid][pID] || !strcmp(HouseInfo[i][hPerm1], PlayerName(playerid, 0), false) || !strcmp(HouseInfo[i][hPerm2], PlayerName(playerid, 0), false) || !strcmp(HouseInfo[i][hPerm3], PlayerName(playerid, 0), false))
   			    {
					switch(HouseInfo[i][hTrancada])
					{
					    case 0: { HouseInfo[i][hTrancada] = 1; GameTextForPlayer(playerid, "~w~ Porta ~r~ trancada", 3000, 6); }
   			        	case 1: { HouseInfo[i][hTrancada] = 0; GameTextForPlayer(playerid, "~w~ Porta ~g~ destrancada", 3000, 6); }
					}
					SalvarCasa(i);
					tranccc++;
   			        return 1;
   			    }
			}
		}
	}
	for(new i; i < MAX_GARAGENS; i++)
    {
        if(GaragemInfo[i][hCriada])
		{
 			if(IsPlayerInRangeOfPoint(playerid, 1, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
   			{
   			    if(GaragemInfo[i][hDono] == PlayerInfo[playerid][pID]
				   || !strcmp(GaragemInfo[i][hPerm1], PlayerName(playerid, 0), false)
				   || !strcmp(GaragemInfo[i][hPerm2], PlayerName(playerid, 0), false)
				   || !strcmp(GaragemInfo[i][hPerm3], PlayerName(playerid, 0), false)
				   || HouseInfo[GaragemInfo[i][hTipo]][hDono] == PlayerInfo[playerid][pID])
   			    {
					switch(GaragemInfo[i][hTrancada])
					{
					    case 0: { GaragemInfo[i][hTrancada] = 1;  GameTextForPlayer(playerid, "~w~ Garagem ~r~ trancada", 3000, 6); }
   			        	case 1: { GaragemInfo[i][hTrancada] = 0;  GameTextForPlayer(playerid, "~w~ Garagem ~g~ destrancada", 3000, 6); }
					}
					SalvarGaragem(i);
					tranccc++;
   			        return 1;
   			    }
			}
			if(IsPlayerInRangeOfPoint(playerid, 5, GaragemInfo[i][hInX], GaragemInfo[i][hInY], GaragemInfo[i][hInZ]) && GetPlayerVirtualWorld(playerid) == 10000+i)
   			{
   			    if(GaragemInfo[i][hDono] == PlayerInfo[playerid][pID]
				   || !strcmp(GaragemInfo[i][hPerm1], PlayerName(playerid, 0), false)
				   || !strcmp(GaragemInfo[i][hPerm2], PlayerName(playerid, 0), false)
				   || !strcmp(GaragemInfo[i][hPerm3], PlayerName(playerid, 0), false)
				   || HouseInfo[GaragemInfo[i][hTipo]][hDono] == PlayerInfo[playerid][pID])
   			    {
					switch(GaragemInfo[i][hTrancada])
					{
					    case 0: { GaragemInfo[i][hTrancada] = 1; GameTextForPlayer(playerid, "~w~ Garagem ~r~ trancada", 3000, 6); }
   			        	case 1: { GaragemInfo[i][hTrancada] = 0; GameTextForPlayer(playerid, "~w~ Garagem ~g~ destrancada", 3000, 6); }
					}
					SalvarGaragem(i);
					tranccc++;
   			        return 1;
   			    }
			}
		}
	}
	for(new i; i < MAX_EMPRESAS; i++)
    {
        if(EmpInfo[i][eCriada])
		{
 			if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
   			{
   			    if(EmpInfo[i][eDono] != 0)
   			    {
	   			    if(EmpInfo[i][eDono] == PlayerInfo[playerid][pID] || !strcmp(EmpInfo[i][ePerm1], PlayerName(playerid, 0), false) || !strcmp(EmpInfo[i][ePerm2], PlayerName(playerid, 0), false) || !strcmp(EmpInfo[i][ePerm3], PlayerName(playerid, 0), false))
	   			    {
						switch(EmpInfo[i][eTrancada])
						{
						    case 0: { EmpInfo[i][eTrancada] = 1; GameTextForPlayer(playerid, "~w~ Porta ~r~ trancada", 3000, 6); }
	   			        	case 1: { EmpInfo[i][eTrancada] = 0; GameTextForPlayer(playerid, "~w~ Porta ~g~ destrancada", 3000, 6); }
						}
						SalvarEmpresa(i);
						tranccc++;
	   			        return 1;
	   			    }
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 3, EmpInfo[i][eInX], EmpInfo[i][eInY], EmpInfo[i][eInZ]) && GetPlayerVirtualWorld(playerid) == 100+i)
   			{
   			    if(EmpInfo[i][eDono] != 0)
   			    {
	   			    if(EmpInfo[i][eDono] == PlayerInfo[playerid][pID] || !strcmp(EmpInfo[i][ePerm1], PlayerName(playerid, 0), false) || !strcmp(EmpInfo[i][ePerm2], PlayerName(playerid, 0), false) || !strcmp(EmpInfo[i][ePerm3], PlayerName(playerid, 0), false))
	   			    {
						switch(EmpInfo[i][eTrancada])
						{
						    case 0: { EmpInfo[i][eTrancada] = 1; GameTextForPlayer(playerid, "~w~ Porta ~r~ trancada", 3000, 6); }
	   			        	case 1: { EmpInfo[i][eTrancada] = 0; GameTextForPlayer(playerid, "~w~ Porta ~g~ destrancada", 3000, 6); }
						}
						SalvarEmpresa(i);
						tranccc++;
	   			        return 1;
	   			    }
				}
			}
		}
	}
	for(new i; i < MAX_PORTOES; i++)
  	{
  		if(IsPlayerInRangeOfPoint(playerid, PortaoInfo[i][ptRange], PortaoInfo[i][ptX], PortaoInfo[i][ptY], PortaoInfo[i][ptZ]) && GetPlayerVirtualWorld(playerid) == PortaoInfo[i][ptWorld] && GetPlayerInterior(playerid) == PortaoInfo[i][ptInt])
   		{
   		    if(ObjetoEPorta(PortaoInfo[i][ptModelo]))
   		    {
   		        if(PlayerInfo[playerid][pFac] == PortaoInfo[i][ptFac])
   		        {
	   		    	switch(PortaoInfo[i][ptLock])
					{
				 		case 0: { PortaoInfo[i][ptLock] = 1; GameTextForPlayer(playerid, "~w~ Porta ~r~ trancada", 3000, 6); }
				 		case 1: { PortaoInfo[i][ptLock] = 0; GameTextForPlayer(playerid, "~w~ Porta ~g~ destrancada", 3000, 6); }
	                }
       				tranccc++;
					return 1;
				}
			}
   		}
	}

	new c = -1;
    if(PlayerInfo[playerid][pEntrouCasa] != -1) c = PlayerInfo[playerid][pEntrouCasa];
    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) c = PlayerInfo[playerid][pEntrouEmpresa];
    else if(PlayerInfo[playerid][pEntrouComplexo] != -1) c = PlayerInfo[playerid][pEntrouComplexo];
    else if(PlayerInfo[playerid][pEntrouGaragem] != -1) c = PlayerInfo[playerid][pEntrouGaragem];

    if(PlayerInfo[playerid][pEntrouCasa] != -1)
    {
	    if(HouseInfo[c][hCriada])
		{
		    if(HouseInfo[c][hDono] == PlayerInfo[playerid][pID] || !strcmp(HouseInfo[c][hPerm1], PlayerName(playerid, 0), false) || !strcmp(HouseInfo[c][hPerm2], PlayerName(playerid, 0), false) || !strcmp(HouseInfo[c][hPerm3], PlayerName(playerid, 0), false))
			{
           		for(new m; m < MAX_MOVEIS; m++)
			    {
			    	if(FurniInfo[m][mCriado] != 0)
			     	{
			     	    if(FurniInfo[m][mNaCasa] == c)
           				{
				      		if(IsPlayerInRangeOfPoint(playerid, 2, FurniInfo[m][mX], FurniInfo[m][mY], FurniInfo[m][mZ]) && GetPlayerVirtualWorld(playerid) == FurniInfo[m][mWorld] && GetPlayerInterior(playerid) == FurniInfo[m][mInt])
				   			{
				   			    if(ObjetoEPorta(FurniInfo[m][mModelo]))
				   				{
				   				    if(FurniInfo[m][mPTrancada] == 0)
				   				    {
					   				    FurniInfo[m][mPTrancada] = 1;
					   				    GameTextForPlayer(playerid, "~w~ Porta ~r~ trancada", 3000, 6);
					   				    tranccc++;
					   				    SalvarMovel(m);
					   				    return 1;
									}
									else
									{
									    FurniInfo[m][mPTrancada] = 0;
									    GameTextForPlayer(playerid, "~w~ Porta ~g~ destrancada", 3000, 6);
									    tranccc++;
									    SalvarMovel(m);
									    return 1;
									}
								}
							}
						}
					}
				}
			}
			else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissões para mecher no móveis desta casa.");
		}
	}
	if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
	{
		if(EmpInfo[c][eCriada])
		{
		    if(EmpInfo[c][eDono] == PlayerInfo[playerid][pID] || !strcmp(EmpInfo[c][ePerm1], PlayerName(playerid, 0), false) || !strcmp(EmpInfo[c][ePerm2], PlayerName(playerid, 0), false) || !strcmp(EmpInfo[c][ePerm3], PlayerName(playerid, 0), false))
			{
                for(new m; m < MAX_MOVEIS; m++)
			    {
			    	if(FurniInfo[m][mCriado] != 0)
			     	{
			     	    if(FurniInfo[m][mNaEmpresa] == c)
           				{
				      		if(IsPlayerInRangeOfPoint(playerid, 2, FurniInfo[m][mX], FurniInfo[m][mY], FurniInfo[m][mZ]) && GetPlayerVirtualWorld(playerid) == FurniInfo[m][mWorld] && GetPlayerInterior(playerid) == FurniInfo[m][mInt])
				   			{
				   			    if(ObjetoEPorta(FurniInfo[m][mModelo]))
				   				{
				   				    if(FurniInfo[m][mPTrancada] == 0)
				   				    {
					   				    FurniInfo[m][mPTrancada] = 1;
					   				    GameTextForPlayer(playerid, "~w~ Porta ~r~ trancada", 3000, 6);
					   				    tranccc++;
					   				    SalvarMovel(m);
					   				    return 1;
									}
									else
									{
									    FurniInfo[m][mPTrancada] = 0;
									    GameTextForPlayer(playerid, "~w~ Porta ~g~ destrancada", 3000, 6);
									    tranccc++;
									    SalvarMovel(m);
									    return 1;
									}
								}
							}
						}
					}
				}
			}
			else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissões para mecher nos moveis desta empresa.");
		}
	}
	if(PlayerInfo[playerid][pEntrouComplexo] != -1)
	{
		if(ComplexoInfo[c][cCriada])
		{
		    if(ComplexoInfo[c][cDono] == PlayerInfo[playerid][pID] || !strcmp(ComplexoInfo[c][cPerm1], PlayerName(playerid, 0), false) || !strcmp(ComplexoInfo[c][cPerm2], PlayerName(playerid, 0), false) || !strcmp(ComplexoInfo[c][cPerm3], PlayerName(playerid, 0), false))
			{
                for(new m; m < MAX_MOVEIS; m++)
			    {
			    	if(FurniInfo[m][mCriado] != 0)
			     	{
			     	    if(FurniInfo[m][mNoComplexo] == c)
           				{
				      		if(IsPlayerInRangeOfPoint(playerid, 2, FurniInfo[m][mX], FurniInfo[m][mY], FurniInfo[m][mZ]) && GetPlayerVirtualWorld(playerid) == FurniInfo[m][mWorld] && GetPlayerInterior(playerid) == FurniInfo[m][mInt])
				   			{
				   			    if(ObjetoEPorta(FurniInfo[m][mModelo]))
				   				{
				   				    if(FurniInfo[m][mPTrancada] == 0)
				   				    {
					   				    FurniInfo[m][mPTrancada] = 1;
					   				    GameTextForPlayer(playerid, "~w~ Porta ~r~ trancada", 3000, 6);
					   				    tranccc++;
					   				    SalvarMovel(m);
					   				    return 1;
									}
									else
									{
									    FurniInfo[m][mPTrancada] = 0;
									    GameTextForPlayer(playerid, "~w~ Porta ~g~ destrancada", 3000, 6);
									    tranccc++;
									    SalvarMovel(m);
									    return 1;
									}
								}
							}
						}
					}
				}
			}
			else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissões para mecher nos moveis deste complexo.");
		}
	}
	if(PlayerInfo[playerid][pEntrouGaragem] != -1)
	{
		if(GaragemInfo[c][hCriada])
		{
		    if(GaragemInfo[c][hDono] == PlayerInfo[playerid][pID]
			|| !strcmp(GaragemInfo[c][hPerm1], PlayerName(playerid, 0), false)
			|| !strcmp(GaragemInfo[c][hPerm2], PlayerName(playerid, 0), false)
			|| !strcmp(GaragemInfo[c][hPerm3], PlayerName(playerid, 0), false)
			|| HouseInfo[GaragemInfo[c][hTipo]][hDono] == PlayerInfo[playerid][pID])
			{
                for(new m; m < MAX_MOVEIS; m++)
			    {
			    	if(FurniInfo[m][mCriado] != 0)
			     	{
			     	    if(FurniInfo[m][mNaGaragem] == c)
           				{
				      		if(IsPlayerInRangeOfPoint(playerid, 2, FurniInfo[m][mX], FurniInfo[m][mY], FurniInfo[m][mZ]) && GetPlayerVirtualWorld(playerid) == FurniInfo[m][mWorld] && GetPlayerInterior(playerid) == FurniInfo[m][mInt])
				   			{
				   			    if(ObjetoEPorta(FurniInfo[m][mModelo]))
				   				{
				   				    if(FurniInfo[m][mPTrancada] == 0)
				   				    {
					   				    FurniInfo[m][mPTrancada] = 1;
					   				    GameTextForPlayer(playerid, "~w~ Porta ~r~ trancada", 3000, 6);
					   				    tranccc++;
					   				    SalvarMovel(m);
					   				    return 1;
									}
									else
									{
									    FurniInfo[m][mPTrancada] = 0;
									    GameTextForPlayer(playerid, "~w~ Porta ~g~ destrancada", 3000, 6);
									    tranccc++;
									    SalvarMovel(m);
									    return 1;
									}
								}
							}
						}
					}
				}
			}
			else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissões para mecher nos moveis desta garagem.");
		}
	}
	new veh = GetClosestVehicle(playerid);
	if(veh > -1)
	{
		new slot = GetVehicleSlot(veh);
  		if(slot > -1)
		{
			if(VehicleInfo[slot][vOwner] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pChaveEmprestada] == VehicleInfo[slot][vID])
   			{
				if(!VehicleInfo[slot][vLocked])
				{
	    			GameTextForPlayer(playerid,"~r~Veiculo Trancado",3000,4);
				    PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
				    LockVehicle(veh);
				    tranccc++;
				    return 1;
				}
				else
				{
    				GameTextForPlayer(playerid,"~g~Veiculo Destrancado",3000,4);
    				PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
    				UnlockVehicle(veh);
    				tranccc++;
				    return 1;
				}
			}
			else if(PlayerInfo[playerid][pFac] > 0)
   			{
      			if(PlayerInfo[playerid][pFac] == VehicleInfo[slot][vFaction])
	        	{
					if(!VehicleInfo[slot][vLocked])
					{
	    				GameTextForPlayer(playerid,"~r~Veiculo Trancado",3000,4);
					    PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
					    LockVehicle(veh);
					    tranccc++;
					    return 1;
					}
					else
					{
	    				GameTextForPlayer(playerid,"~g~Veiculo Destrancado",3000,4);
					    PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
					    UnlockVehicle(veh);
					    tranccc++;
					    return 1;
					}
				}
				else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta proximo a nenhum de seus veiculos.");
			}
			else if(VehicleInfo[slot][vCompany] > 0)
			{
   				if(PlayerInfo[playerid][pJob] == VehicleInfo[slot][vCompany])
       			{
					if(!VehicleInfo[slot][vLocked])
					{
	    				GameTextForPlayer(playerid,"~r~Veiculo Trancado",3000,4);
					    PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
					    LockVehicle(veh);
					    tranccc++;
					    return 1;
					}
					else
					{
	    				GameTextForPlayer(playerid,"~g~Veiculo Destrancado",3000,4);
	    				PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
	    				UnlockVehicle(veh);
	    				tranccc++;
	    				return 1;
					}
				}
				else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta proximo a nenhum de seus veiculos.");
			}
   			else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta proximo a nenhum de seus veiculos.");
		}
		else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta proximo de um veiculo seu trancavel.");
	}


	if(tranccc == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada para trancar/destrancar por aqui ou você não tem as chaves.");
	return 1;
}

CMD:vender(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    for(new i; i < MAX_HOUSES; i++)
    {
        if(HouseInfo[i][hCriada])
		{
 			if(IsPlayerInRangeOfPoint(playerid, 1, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
   			{
   			    if(HouseInfo[i][hDono] == PlayerInfo[playerid][pID])
   			    {
   			        VendendoCasa[playerid][2] = i;
          			format(string, sizeof(string), "Vender para o estado.\nVender a outro jogador.\nColocar placa de vende-se.\nTirar placa de vende-se");
    				Dialog_Show(playerid, VendendoCasa, DIALOG_STYLE_LIST, "Venda da Residência", string, "Selecionar", "Cancelar");
   			    }
   			    else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode vender uma propriedade que não lhe pertence.");
   			}
		}
	}
	for(new i; i < MAX_GARAGENS; i++)
    {
        if(GaragemInfo[i][hCriada])
		{
 			if(IsPlayerInRangeOfPoint(playerid, 1, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
   			{
   			    if(GaragemInfo[i][hTipo] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta garagem pertence a uma casa.");
   			    if(GaragemInfo[i][hDono] == PlayerInfo[playerid][pID])
   			    {
   			        VendendoGaragem[playerid][2] = i;
          			format(string, sizeof(string), "Vender para o estado.\nVender a outro jogador.\nColocar placa de vende-se.\nTirar placa de vende-se");
    				Dialog_Show(playerid, VendendoGaragem, DIALOG_STYLE_LIST, "Venda de Garagem", string, "Selecionar", "Cancelar");
   			    }
   			    else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode vender uma propriedade que não lhe pertence.");
   			}
		}
	}
	for(new i; i < MAX_COMPLEXOS; i++)
    {
        if(ComplexoInfo[i][cCriada])
		{
 			if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
   			{
   			    if(ComplexoInfo[i][cDono] == PlayerInfo[playerid][pID])
   			    {
   			        VendendoComplexo[playerid][2] = i;
          			format(string, sizeof(string), "Vender para o estado.\nVender a outro jogador.\nColocar placa de vende-se.\nTirar placa de vende-se");
    				Dialog_Show(playerid, VendendoComplexo, DIALOG_STYLE_LIST, "Venda do Complexo", string, "Selecionar", "Cancelar");
   			    }
   			    else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode vender um complexo que não lhe pertence.");
   			}
		}
	}
	for(new i; i < MAX_EMPRESAS; i++)
    {
        if(EmpInfo[i][eCriada])
		{
 			if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
   			{
   			    if(EmpInfo[i][eDono] == PlayerInfo[playerid][pID])
   			    {
   			        VendendoEmpresa[playerid][2] = i;
   			        if(EmpInfo[VendoEmpresa[playerid]][eLeasing] > 0)
   			            format(string, sizeof(string), "Abandonar empresa");
   			        else
          				format(string, sizeof(string), "Vender para o estado\nVender a outro jogador.\nColocar placa de vende-se.\nTirar placa de vende-se");
    				Dialog_Show(playerid, VendendoEmpresa, DIALOG_STYLE_LIST, "Venda da Residência", string, "Selecionar", "Cancelar");
   			    }
   			    else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode vender uma propriedade que não lhe pertence.");
   			}
		}
	}
	return 1;
}

Dialog:VendendoCasa(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    switch(listitem)
	    {
	    	case 0:
	    	{
	    	    format(string, sizeof(string), "Você tem certeza que deseja vender a sua casa (%d) por R$%d?\n\nDinheiro no Cofre da casa:\n%d\n(Ao vender a casa para o estado, você recebe apenas a metade do valor pago)",VendoCasa[playerid], (HouseInfo[VendoCasa[playerid]][hPreco]/2),HouseInfo[VendoCasa[playerid]][hBank]);
                Dialog_Show(playerid, VendendoCasa1, DIALOG_STYLE_MSGBOX, "Confirmação de Venda", string, "Sim", "Cancelar");
			}
			case 1:
			{
			    Dialog_Show(playerid, VendendoCasa2, DIALOG_STYLE_INPUT, "Venda da Residência", "Digite o ID do jogador.", "Avançar", "Cancelar");
			}
			case 2:
			{
                Dialog_Show(playerid, VendendoCasa3, DIALOG_STYLE_INPUT, "Venda da Residência", "Digite um telefone para contato.", "Avançar", "Cancelar");
			}
			case 3:
			{
			    new i = VendendoCasa[playerid][2];
			    format(string, sizeof(string), "[Casa] Você retirou a placa de vende-se.");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				HouseInfo[i][hTelCont] = 0;
				if (IsValidDynamic3DTextLabel(HouseInfo[i][HouseText]))
					DestroyDynamic3DTextLabel(HouseInfo[i][HouseText]);
				if(IsValidDynamicObject(HouseInfo[i][ObjPlaca]))
    				DestroyDynamicObject(HouseInfo[i][ObjPlaca]);
				//HouseInfo[i][HouseText] = CreateDynamic3DTextLabel("[Propriedade]", 0x00A974FF, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[i][hExWorld], HouseInfo[i][hExInt]);
                SalvarCasa(i);
			}
		}
	}
	return 1;
}
Dialog:VendendoGaragem(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    switch(listitem)
	    {
	    	case 0:
	    	{
	    	    format(string, sizeof(string), "Você tem certeza que deseja vender a sua garagem (%d) por R$%d?\n(Ao vender a garagem para o estado, você recebe apenas a metade do valor pago)",VendoGaragem[playerid], (GaragemInfo[VendoGaragem[playerid]][hPreco]/2));
                Dialog_Show(playerid, VendendoGaragem1, DIALOG_STYLE_MSGBOX, "Confirmação de Venda", string, "Sim", "Cancelar");
			}
			case 1:
			{
                Dialog_Show(playerid, VendendoGaragem2, DIALOG_STYLE_INPUT, "Venda da Garagem", "Digite o ID do jogador.", "Avançar", "Cancelar");
			}
			case 2:
			{
                Dialog_Show(playerid, VendendoGaragem3, DIALOG_STYLE_INPUT, "Venda da Garagem", "Digite um telefone para contato.", "Avançar", "Cancelar");
			}
			case 3:
			{
			    new i = VendendoGaragem[playerid][2];
			    format(string, sizeof(string), "[Garagem] Você retirou a placa de vende-se.");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				GaragemInfo[i][hTelCont] = 0;
				if (IsValidDynamic3DTextLabel(GaragemInfo[i][HouseText]))
					DestroyDynamic3DTextLabel(GaragemInfo[i][HouseText]);
				if(IsValidDynamicObject(GaragemInfo[i][ObjPlaca]))
    				DestroyDynamicObject(GaragemInfo[i][ObjPlaca]);
				SalvarGaragem(i);
			}
		}
	}
	return 1;
}
Dialog:VendendoCasa3(playerid, response, listitem, inputtext[])
{
    new telefone = strval(inputtext);
    new i = VendendoCasa[playerid][2];
    HouseInfo[i][hTelCont] = telefone;

    if (IsValidDynamic3DTextLabel(HouseInfo[i][HouseText]))
		DestroyDynamic3DTextLabel(HouseInfo[i][HouseText]);

	SalvarCasa(i);
	format(string, sizeof(string), "[Casa] Placa de vende-se colocada! Aguarde até alguém lhe ligar.");
	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	//format(string, sizeof(string), "[Propriedade]\nVende-se!\nContato: %d",telefone);
	//HouseInfo[i][HouseText] = CreateDynamic3DTextLabel(string, 0x00A974FF, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[i][hExWorld], HouseInfo[i][hExInt]);
    if(HouseInfo[i][hPlacaX] != 0 && HouseInfo[i][hPlacaY] != 0 && HouseInfo[i][hPlacaZ] != 0)
	{
		HouseInfo[i][ObjPlaca] = CreateDynamicObject(19471, HouseInfo[i][hPlacaX], HouseInfo[i][hPlacaY], HouseInfo[i][hPlacaZ], 0.0, 0.0, HouseInfo[i][hPlacaR], HouseInfo[i][hExWorld], HouseInfo[i][hExInt]);
	}
	return 1;
}
Dialog:VendendoGaragem3(playerid, response, listitem, inputtext[])
{
    new telefone = strval(inputtext);
    new i = VendendoGaragem[playerid][2];
    GaragemInfo[i][hTelCont] = telefone;

    if (IsValidDynamic3DTextLabel(GaragemInfo[i][HouseText]))
		DestroyDynamic3DTextLabel(GaragemInfo[i][HouseText]);

	SalvarGaragem(i);
	format(string, sizeof(string), "[Garagem] Placa de vende-se colocada! Aguarde até alguém lhe ligar.");
	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	if(GaragemInfo[i][hPlacaX] != 0 && GaragemInfo[i][hPlacaY] != 0 && GaragemInfo[i][hPlacaZ] != 0)
	{
		GaragemInfo[i][ObjPlaca] = CreateDynamicObject(19471, GaragemInfo[i][hPlacaX], GaragemInfo[i][hPlacaY], GaragemInfo[i][hPlacaZ], 0.0, 0.0, GaragemInfo[i][hPlacaR], GaragemInfo[i][hExWorld], GaragemInfo[i][hExInt]);
	}
	return 1;
}
Dialog:VendendoCasa2(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    new outro = strval(inputtext);
	    if(!IsPlayerConnected(outro)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido!");
	    if(!IsPlayerNearPlayer(playerid, outro, 8.0))  return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player não está próximo a você!");
	    format(string, sizeof(string), "Dinheiro no Cofre da casa:\n%d\n\nDigite o valor que você deseja cobrar pela casa", HouseInfo[VendoCasa[playerid]][hBank]);
	    Dialog_Show(playerid, VendendoCasa21, DIALOG_STYLE_INPUT, "Venda da Residência", "Digite o valor que você deseja cobrar pela casa.", "Avançar", "Cancelar");
	    VendendoCasa[playerid][0] = outro;
	    VendendoCasa[outro][0] = playerid;
	    VendendoCasa[outro][2] = VendendoCasa[playerid][2];
	}
	return 1;
}
Dialog:VendendoGaragem2(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    new outro = strval(inputtext);
	    if(!IsPlayerConnected(outro)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido!");
	    if(!IsPlayerNearPlayer(playerid, outro, 8.0))  return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player não está próximo a você!");
	    Dialog_Show(playerid, VendendoGaragem21, DIALOG_STYLE_INPUT, "Venda da Garagem", "Digite o valor que você deseja cobrar pela garagem.", "Avançar", "Cancelar");
	    VendendoGaragem[playerid][0] = outro;
	    VendendoGaragem[outro][0] = playerid;
	    VendendoGaragem[outro][2] = VendendoGaragem[playerid][2];
	}
	return 1;
}
Dialog:VendendoCasa21(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    new valor = strval(inputtext);
	    if(valor > 1 && valor < 9999999)
	    {
		    if(!IsPlayerConnected(VendendoCasa[playerid][0])) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido!");
		    if(!IsPlayerNearPlayer(playerid, VendendoCasa[playerid][0], 8.0))  return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O comprador não está mais próximo a você!");
		    format(string, sizeof(string), "%s está lhe oferecendo a casa %d por R$%d.",PlayerName(playerid, 1), VendendoCasa[playerid][2], valor);
	     	Dialog_Show(VendendoCasa[playerid][0], VendendoCasa22, DIALOG_STYLE_MSGBOX, "Confirmação de Venda", string, "Comprar", "Cancelar");
		    VendendoCasa[playerid][1] = valor;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido!");
		    Dialog_Show(playerid, VendendoCasa21, DIALOG_STYLE_INPUT, "Venda da Residência", "Digite o valor que você deseja cobrar pela casa.", "Oferecer", "Cancelar");
		}
	}
	return 1;
}
Dialog:VendendoGaragem21(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    new valor = strval(inputtext);
	    if(valor > 1 && valor < 9999999)
	    {
		    if(!IsPlayerConnected(VendendoGaragem[playerid][0])) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido!");
		    if(!IsPlayerNearPlayer(playerid, VendendoGaragem[playerid][0], 8.0))  return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O comprador não está mais próximo a você!");
		    format(string, sizeof(string), "%s está lhe oferecendo a garagem %d por R$%d.",PlayerName(playerid, 1), VendendoGaragem[playerid][2], valor);
	     	Dialog_Show(VendendoGaragem[playerid][0], VendendoGaragem22, DIALOG_STYLE_MSGBOX, "Confirmação de Venda", string, "Comprar", "Cancelar");
		    VendendoGaragem[playerid][1] = valor;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido!");
		    Dialog_Show(playerid, VendendoGaragem21, DIALOG_STYLE_INPUT, "Venda da Garagem", "Digite o valor que você deseja cobrar pela garagem.", "Oferecer", "Cancelar");
		}
	}
	return 1;
}
Dialog:VendendoCasa22(playerid, response, listitem, inputtext[])
{
    if (!response)
    {
        format(string, sizeof(string), "%s recusou a sua oferta e não comprou a casa.",PlayerName(playerid, 1));
        SendClientMessage(VendendoCasa[playerid][0], -1, string);
        SendClientMessage(playerid, COLOR_LIGHTRED, "Você recusou a oferta de compra da casa!");
    }
	else
	{
	    new Vendedor = VendendoCasa[playerid][0];
	    new houseid = VendendoCasa[Vendedor][2];

	    if(GetPlayerMoneyCA(playerid) >= VendendoCasa[Vendedor][1])
	    {
	        if(!IsPlayerConnected(Vendedor))  return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O vendedor não está mais online.");
	        if(PlayerInfo[Vendedor][pID] != HouseInfo[houseid][hDono]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Ocorreu um erro durante a venda da residencia, contate um admin se preciso.");
	        format(string, sizeof(string), "%s aceitou sua oferta e comprou a sua casa por R$%d. (Casa: %d).",PlayerName(playerid, 1), VendendoCasa[Vendedor][1], houseid);
	        SendClientMessage(VendendoCasa[playerid][0], -1, string);
	        SendClientMessage(playerid, COLOR_LIGHTGREEN, "{33AA33}Você aceitou a oferta e comprou a casa!");

            if (IsValidDynamic3DTextLabel(HouseInfo[houseid][HouseText]))
				DestroyDynamic3DTextLabel(HouseInfo[houseid][HouseText]);

            //HouseInfo[houseid][HouseText] = CreateDynamic3DTextLabel("[Propriedade]", 0x00A974FF, HouseInfo[houseid][hExX], HouseInfo[houseid][hExY], HouseInfo[houseid][hExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[houseid][hExWorld], HouseInfo[houseid][hExInt]);

			GivePlayerMoneyCA(playerid,-VendendoCasa[Vendedor][1]);
			GivePlayerMoneyCA(Vendedor,VendendoCasa[Vendedor][1]);

	        HouseInfo[houseid][hDono] = PlayerInfo[playerid][pID];
			HouseInfo[houseid][hAVenda] = 0;

		  	HouseInfo[houseid][hDia] = gettime()+1296000;

			format(HouseInfo[houseid][hPerm1], 24, "Vazio");
	    	format(HouseInfo[houseid][hPerm2], 24, "Vazio");
	    	format(HouseInfo[houseid][hPerm3], 24, "Vazio");

			if(IsValidDynamicObject(HouseInfo[houseid][ObjPlaca]))
				DestroyDynamicObject(HouseInfo[houseid][ObjPlaca]);

			SalvarCasa(houseid);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro suficiente para realizar essa compra.");
   			format(string, sizeof(string), "ERRO:{FFFFFF} %s não tem essa quantia em dinheiro para comprar a casa.",PlayerName(playerid, 1), VendendoCasa[Vendedor][1], houseid);
	        SendClientMessage(VendendoCasa[playerid][0], COLOR_LIGHTRED, string);
		}
	}
	return 1;
}
Dialog:VendendoGaragem22(playerid, response, listitem, inputtext[])
{
    if (!response)
    {
        format(string, sizeof(string), "%s recusou a sua oferta e não comprou a garagem.",PlayerName(playerid, 1));
        SendClientMessage(VendendoGaragem[playerid][0], -1, string);
        SendClientMessage(playerid, COLOR_LIGHTRED, "Você recusou a oferta de compra da garagem!");
    }
	else
	{
	    new Vendedor = VendendoGaragem[playerid][0];
	    new houseid = VendendoGaragem[Vendedor][2];

	    if(GetPlayerMoneyCA(playerid) >= VendendoGaragem[Vendedor][1])
	    {
	        if(!IsPlayerConnected(Vendedor))  return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O vendedor não está mais online.");
	        if(PlayerInfo[Vendedor][pID] != GaragemInfo[houseid][hDono]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Ocorreu um erro durante a venda da garagem, contate um admin se persistir.");
	        format(string, sizeof(string), "%s aceitou sua oferta e comprou a sua casa por R$%d. (Casa: %d).",PlayerName(playerid, 1), VendendoCasa[Vendedor][1], houseid);
	        SendClientMessage(VendendoGaragem[playerid][0], -1, string);
	        SendClientMessage(playerid, COLOR_LIGHTGREEN, "{33AA33}Você aceitou a oferta e comprou a garagem!");

            if (IsValidDynamic3DTextLabel(GaragemInfo[houseid][HouseText]))
				DestroyDynamic3DTextLabel(GaragemInfo[houseid][HouseText]);

			GivePlayerMoneyCA(playerid,-VendendoGaragem[Vendedor][1]);
			GivePlayerMoneyCA(Vendedor,VendendoGaragem[Vendedor][1]);

	        GaragemInfo[houseid][hDono] = PlayerInfo[playerid][pID];
			GaragemInfo[houseid][hAVenda] = 0;

		  	GaragemInfo[houseid][hDia] = gettime()+1296000;

			format(GaragemInfo[houseid][hPerm1], 24, "Vazio");
	    	format(GaragemInfo[houseid][hPerm2], 24, "Vazio");
	    	format(GaragemInfo[houseid][hPerm3], 24, "Vazio");

			if(IsValidDynamicObject(GaragemInfo[houseid][ObjPlaca]))
				DestroyDynamicObject(GaragemInfo[houseid][ObjPlaca]);

			SalvarGaragem(houseid);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro suficiente para realizar essa compra.");
   			format(string, sizeof(string), "ERRO:{FFFFFF} %s não tem essa quantia em dinheiro para comprar a garagem.",PlayerName(playerid, 1), VendendoGaragem[Vendedor][1], houseid);
	        SendClientMessage(VendendoGaragem[playerid][0], COLOR_LIGHTRED, string);
		}
	}
	return 1;
}
Dialog:VendendoCasa1(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    if(VendoCasa[playerid] != 9999)
		{
  			if(HouseInfo[VendoCasa[playerid]][hDono] == PlayerInfo[playerid][pID])
    		{
   				format(string, sizeof(string), "{33AA33}Você vendeu a sua casa (%d) por R$%d.", VendoCasa[playerid], HouseInfo[VendoCasa[playerid]][hPreco]/2);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				HouseInfo[VendoCasa[playerid]][hDono] = 0;
				HouseInfo[VendoCasa[playerid]][hAVenda] = 1;
				GovInfo[gCofres] -= (HouseInfo[VendoCasa[playerid]][hPreco]/2);

				GivePlayerMoneyCA(playerid,(HouseInfo[VendoCasa[playerid]][hPreco]/2));

				new houseid = VendoCasa[playerid];
				if(IsValidDynamicObject(HouseInfo[houseid][ObjPlaca]))
    				DestroyDynamicObject(HouseInfo[houseid][ObjPlaca]);
                if (IsValidDynamic3DTextLabel(HouseInfo[houseid][HouseText]))
				DestroyDynamic3DTextLabel(HouseInfo[houseid][HouseText]);

				format(HouseInfo[houseid][hPerm1], 24, "Vazio");
	    		format(HouseInfo[houseid][hPerm2], 24, "Vazio");
	    		format(HouseInfo[houseid][hPerm3], 24, "Vazio");
	    		HouseInfo[houseid][hBank] = 0;
	    		HouseInfo[houseid][hAlarme] = 0;

				//format(string, sizeof(string), "[Propriedade]\nVende-se\nR$%d!",HouseInfo[houseid][hPreco]);
    			//HouseInfo[houseid][HouseText] = CreateDynamic3DTextLabel(string, 0x00A974FF, HouseInfo[houseid][hExX], HouseInfo[houseid][hExY], HouseInfo[houseid][hExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[houseid][hExWorld], HouseInfo[houseid][hExInt]);
			    if(HouseInfo[houseid][hPlacaX] != 0 && HouseInfo[houseid][hPlacaY] != 0 && HouseInfo[houseid][hPlacaZ] != 0)
				{
					HouseInfo[houseid][ObjPlaca] = CreateDynamicObject(19471, HouseInfo[houseid][hPlacaX], HouseInfo[houseid][hPlacaY], HouseInfo[houseid][hPlacaZ], 0.0, 0.0, HouseInfo[houseid][hPlacaR], HouseInfo[houseid][hExWorld], HouseInfo[houseid][hExInt]);
				}

				SalvarCasa(houseid);
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você se afastou da casa, venda cancelada.");
	}
	return 1;
}
Dialog:VendendoGaragem1(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    if(VendoGaragem[playerid] != 9999)
		{
  			if(GaragemInfo[VendoGaragem[playerid]][hDono] == PlayerInfo[playerid][pID])
    		{
   				format(string, sizeof(string), "{33AA33}Você vendeu a sua garagem (%d) por R$%d.", VendoGaragem[playerid], GaragemInfo[VendoGaragem[playerid]][hPreco]/2);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				GaragemInfo[VendoGaragem[playerid]][hDono] = 0;
				GaragemInfo[VendoGaragem[playerid]][hAVenda] = 1;
				GovInfo[gCofres] -= (GaragemInfo[VendoGaragem[playerid]][hPreco]/2);

				GivePlayerMoneyCA(playerid,(GaragemInfo[VendoGaragem[playerid]][hPreco]/2));

				new houseid = VendoGaragem[playerid];
				if(IsValidDynamicObject(GaragemInfo[houseid][ObjPlaca]))
    				DestroyDynamicObject(GaragemInfo[houseid][ObjPlaca]);
                if (IsValidDynamic3DTextLabel(GaragemInfo[houseid][HouseText]))
				DestroyDynamic3DTextLabel(GaragemInfo[houseid][HouseText]);

				format(GaragemInfo[houseid][hPerm1], 24, "Vazio");
	    		format(GaragemInfo[houseid][hPerm2], 24, "Vazio");
	    		format(GaragemInfo[houseid][hPerm3], 24, "Vazio");
	    		GaragemInfo[houseid][hBank] = 0;
	    		GaragemInfo[houseid][hAlarme] = 0;

				if(GaragemInfo[houseid][hPlacaX] != 0 && GaragemInfo[houseid][hPlacaY] != 0 && GaragemInfo[houseid][hPlacaZ] != 0)
				{
					GaragemInfo[houseid][ObjPlaca] = CreateDynamicObject(19471, GaragemInfo[houseid][hPlacaX], GaragemInfo[houseid][hPlacaY], GaragemInfo[houseid][hPlacaZ], 0.0, 0.0, GaragemInfo[houseid][hPlacaR], GaragemInfo[houseid][hExWorld], GaragemInfo[houseid][hExInt]);
				}

				SalvarGaragem(houseid);
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você se afastou da garagem, venda cancelada.");
	}
	return 1;
}

CMD:vercasas(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;
    new idx = 0;
    new tmp[64];
    tmp = strtok(params,idx);
    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USE: /vercasas [id do player]"); return 1; }
    new other = ReturnUser(tmp);
    if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_WHITE,"{FF6347}ERRO:{FFFFFF} Jogador não conectado."); return 1; }

	new casa = 0;
    for(new i; i < MAX_HOUSES; i++)
    {
        if(HouseInfo[i][hCriada])
		{
		    if(HouseInfo[i][hDono] == PlayerInfo[other][pID])
    		{
    		    if(i == 0)
				{
					format(string, sizeof(string), "___________Casas de %s (#%d)___________", PlayerName(playerid, 0),other);
    		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				}
    		    format(string, sizeof(string), "Residencia: %d  Valor: %d  Localização: %s | Endereço: %s",i,HouseInfo[i][hPreco],GetLocation(HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]), HouseInfo[i][hEndereco]);
				SendClientMessage(playerid, COLOR_LIGHTWHITE, string);
				casa++;
    		}
		}
	}
	if(casa > 0)
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma residência.");
	return 1;
}

COMMAND:porta(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new pport = 0;
    for(new m; m < MAX_MOVEIS; m++)
    {
    	if(FurniInfo[m][mCriado] != 0)
     	{
      		if(IsPlayerInRangeOfPoint(playerid, 2, FurniInfo[m][mX], FurniInfo[m][mY], FurniInfo[m][mZ]) && GetPlayerVirtualWorld(playerid) == FurniInfo[m][mWorld] && GetPlayerInterior(playerid) == FurniInfo[m][mInt])
   			{
   			    if(ObjetoEPorta(FurniInfo[m][mModelo]))
   				{
   				    if(FurniInfo[m][mPTrancada] == 0)
   				    {
	   				    if(FurniInfo[m][mPAberta] == 0)
	   				    {
	   				    	MoveDynamicObject(FurniInfo[m][mObjeto], FurniInfo[m][mX], FurniInfo[m][mY], FurniInfo[m][mZ],6.0,0.0000, 0.0000, FurniInfo[m][mARZ]);
	   				    	FurniInfo[m][mPAberta] = 1;
	   				    	pport++;
	   				    	SalvarMovel(m);
	   				    	break;
						}
						else
						{
						    MoveDynamicObject(FurniInfo[m][mObjeto], FurniInfo[m][mX], FurniInfo[m][mY], FurniInfo[m][mZ],6.0,0.0000, 0.0000, FurniInfo[m][mRZ]);
						    FurniInfo[m][mPAberta] = 0;
						    pport++;
						    SalvarMovel(m);
						    break;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_LIGHTRED, "Esta porta está trancada.");
					}
				}
        	}
		}
	}
 	for(new i; i < MAX_PORTOES; i++)
  	{
  		if(IsPlayerInRangeOfPoint(playerid, PortaoInfo[i][ptRange], PortaoInfo[i][ptX], PortaoInfo[i][ptY], PortaoInfo[i][ptZ]) && GetPlayerVirtualWorld(playerid) == PortaoInfo[i][ptWorld] && GetPlayerInterior(playerid) == PortaoInfo[i][ptInt])
   		{
   		    if(ObjetoEPorta(PortaoInfo[i][ptModelo]))
   		    {
   		        if(PortaoInfo[i][ptFac] == PlayerInfo[playerid][pFac])
	   		    {
		   		    if(!PortaoInfo[i][ptLock])
		   		    {
			   		    if(!PortaoInfo[i][ptAberto])
			   		    {
			   		        MoveDynamicObject(PortaoInfo[i][ptObjeto], PortaoInfo[i][ptAX], PortaoInfo[i][ptAY], PortaoInfo[i][ptAZ],4.0, PortaoInfo[i][ptRAX], PortaoInfo[i][ptRAY], PortaoInfo[i][ptRAZ]);
			   		        PortaoInfo[i][ptAberto] = 1;
			   		        pport++;
			   		    }
			   		    else
			   		    {
			   		        MoveDynamicObject(PortaoInfo[i][ptObjeto], PortaoInfo[i][ptX], PortaoInfo[i][ptY], PortaoInfo[i][ptZ],4.0, PortaoInfo[i][ptRX], PortaoInfo[i][ptRY], PortaoInfo[i][ptRZ]);
			   		        PortaoInfo[i][ptAberto] = 0;
			   		        pport++;
			   		    }
					}
					else
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Porta Trancado.");
						pport++;
					}
				}
				else if(PortaoInfo[i][ptFac] == 190 && IsLaw(playerid))
				{
				    if(!PortaoInfo[i][ptLock])
		   		    {
			   		    if(!PortaoInfo[i][ptAberto])
			   		    {
			   		        MoveDynamicObject(PortaoInfo[i][ptObjeto], PortaoInfo[i][ptAX], PortaoInfo[i][ptAY], PortaoInfo[i][ptAZ],4.0, PortaoInfo[i][ptRAX], PortaoInfo[i][ptRAY], PortaoInfo[i][ptRAZ]);
			   		        PortaoInfo[i][ptAberto] = 1;
			   		        pport++;
			   		    }
			   		    else
			   		    {
			   		        MoveDynamicObject(PortaoInfo[i][ptObjeto], PortaoInfo[i][ptX], PortaoInfo[i][ptY], PortaoInfo[i][ptZ],4.0, PortaoInfo[i][ptRX], PortaoInfo[i][ptRY], PortaoInfo[i][ptRZ]);
			   		        PortaoInfo[i][ptAberto] = 0;
			   		        pport++;
			   		    }
					}
					else
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Porta Trancado.");
						pport++;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem as chaves desta porta.");
					pport++;
				}
			}
   		}
	}
	return 1;
}

CMD:xmradio(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new radio = 0;

    if(IsPlayerInAnyVehicle(playerid))
    {
    	new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
     	if(slot > -1)
      	{
		  	if(VehicleInfo[slot][vRadio] == 1)
	        {
	            new vehicleid = GetPlayerVehicleID(playerid);
		        new url[128];
		    	if(sscanf(params, "s[128]", url))
				{
		 			SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /xmradio [url]");
					return 1;
				}
		        format(VehicleInfo[slot][vXMR], 128, url);
		        SCM(playerid, COLOR_LIGHTGREEN, "Rádio alterado");

		        for(new i = 0; i < MAX_PLAYERS; i++)
				{
		            if(strlen(VehicleInfo[slot][vXMR]))
				    {
			            if(vehicleid == GetPlayerVehicleID(i))
			            {
				   	    	StopAudioStreamForPlayer(i);
							PlayAudioStreamForPlayer(i, VehicleInfo[slot][vXMR]);
						}
					}
					else
					{
					    if(vehicleid == GetPlayerVehicleID(i))
			            {
	 						StopAudioStreamForPlayer(i);
	  						ouvindoxmradio[i] = 0;
	   						ouvindoxmradioID[i] = 0;
						}
					}
				}

				radio++;
			}
			else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não tem um rádio instalado.");
	    }
    }
    else
    {
        new c = -1;
	    if(PlayerInfo[playerid][pEntrouCasa] != -1) c = PlayerInfo[playerid][pEntrouCasa];
	    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) c = PlayerInfo[playerid][pEntrouEmpresa];
	    else if(PlayerInfo[playerid][pEntrouComplexo] != -1) c = PlayerInfo[playerid][pEntrouComplexo];
	    else if(PlayerInfo[playerid][pEntrouGaragem] != -1) c = PlayerInfo[playerid][pEntrouGaragem];

	    if(c == -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a um rádio (casa/empresa/complexo/garagem) ou dentro de um carro que tenha xmradio!");
        else
        {
		    for(new m; m < MAX_MOVEIS; m++)
		    {
		    	if(FurniInfo[m][mCriado] != 0)
		     	{
		      		if(IsPlayerInRangeOfPoint(playerid, 10, FurniInfo[m][mX], FurniInfo[m][mY], FurniInfo[m][mZ]) && GetPlayerVirtualWorld(playerid) == FurniInfo[m][mWorld] && GetPlayerInterior(playerid) == FurniInfo[m][mInt])
		   			{
		   			    if(ObjetoERadio(FurniInfo[m][mModelo]))
		   				{
						    if(PlayerInfo[playerid][pEntrouCasa] != -1)
						    {
								if(HouseInfo[c][hDono] == PlayerInfo[playerid][pID])
								{
								    new url[256];
								    if(sscanf(params, "s[256]", url))
									{
									    SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /xmario [url]");
									    return 1;
									}

									format(HouseInfo[c][hXMR], 256, url);
									SCM(playerid, COLOR_LIGHTGREEN, "Rádio alterado");

									for(new i = 0; i < MAX_PLAYERS; i++)
									{
									    if(IsPlayerConnected(i))
									    {
										    if(PlayerInfo[i][pEntrouCasa] == c)
										    {
												if(strlen(HouseInfo[c][hXMR]))
											    {
											        StopAudioStreamForPlayer(i);

							   						PlayAudioStreamForPlayer(i, HouseInfo[c][hXMR]);
												}
												else
							 					{
							 						StopAudioStreamForPlayer(i);
							  						ouvindoxmradio[i] = 0;
							   						ouvindoxmradioID[i] = 0;
												}
											}
										}
									}

									radio++;
									SalvarCasa(c);
									break;
								}
							}
							if(PlayerInfo[playerid][pEntrouGaragem] != -1)
						    {
								if(GaragemInfo[c][hDono] == PlayerInfo[playerid][pID] || HouseInfo[GaragemInfo[c][hTipo]][hDono] == PlayerInfo[playerid][pID])
								{
								    new url[256];
								    if(sscanf(params, "s[256]", url))
									{
									    SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /xmario [url]");
									    return 1;
									}

									format(GaragemInfo[c][hXMR], 256, url);
									SCM(playerid, COLOR_LIGHTGREEN, "Rádio alterado");

									for(new i = 0; i < MAX_PLAYERS; i++)
									{
									    if(IsPlayerConnected(i))
									    {
										    if(PlayerInfo[i][pEntrouGaragem] == c)
										    {
												if(strlen(GaragemInfo[c][hXMR]))
											    {
											        StopAudioStreamForPlayer(i);

							   						PlayAudioStreamForPlayer(i, GaragemInfo[c][hXMR]);
												}
												else
							 					{
							 						StopAudioStreamForPlayer(i);
							  						ouvindoxmradio[i] = 0;
							   						ouvindoxmradioID[i] = 0;
												}
											}
										}
									}

									radio++;
									SalvarGaragem(c);
									break;
								}
							}
							if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
							{
							    if(EmpInfo[c][eDono] == PlayerInfo[playerid][pID])
								{
									new url[256];
								    if(sscanf(params, "s[256]", url))
									{
									    SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /xmario [url]");
									    return 1;
									}

									format(EmpInfo[c][eXMR], 256, url);
									SCM(playerid, COLOR_LIGHTGREEN, "Rádio alterado");

									for(new i = 0; i < MAX_PLAYERS; i++)
									{
									    if(IsPlayerConnected(i))
									    {
										    if(PlayerInfo[c][pEntrouEmpresa]== c)
										    {
												if(strlen(EmpInfo[c][eXMR]))
											    {
											        StopAudioStreamForPlayer(i);

							   						PlayAudioStreamForPlayer(i, EmpInfo[c][eXMR]);
												}
												else
							 					{
							 						StopAudioStreamForPlayer(i);
							  						ouvindoxmradio[i] = 0;
							   						ouvindoxmradioID[i] = 0;
												}
											}
										}
									}

									radio++;
									SalvarEmpresa(c);
									break;
								}
							}
							if(PlayerInfo[playerid][pEntrouComplexo] != -1)
							{
							    if(ComplexoInfo[c][cDono] == PlayerInfo[playerid][pID])
								{
									new url[256];
								    if(sscanf(params, "s[256]", url))
									{
									    SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /xmario [url]");
									    return 1;
									}

									format(ComplexoInfo[c][cXMR], 256, url);
									SCM(playerid, COLOR_LIGHTGREEN, "Rádio alterado");

                                    for(new i = 0; i < MAX_PLAYERS; i++)
									{
									    if(IsPlayerConnected(i))
									    {
										    if(PlayerInfo[c][pEntrouComplexo]== c)
										    {
												if(strlen(ComplexoInfo[c][cXMR]))
											    {
											        StopAudioStreamForPlayer(i);

							   						PlayAudioStreamForPlayer(i, ComplexoInfo[c][cXMR]);
												}
												else
							 					{
							 						StopAudioStreamForPlayer(i);
							  						ouvindoxmradio[i] = 0;
							   						ouvindoxmradioID[i] = 0;
												}
											}
										}
									}

									radio++;
									SalvarComplexo(c);
									break;
								}
							}
						}
					}
				}
			}
		}
	}
	if(radio == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a um rádio (casa/empresa/complexo) ou dentro de um carro que tenha xmradio!");
	return 1;
}

CMD:darpermissao(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new c = -1;
    if(PlayerInfo[playerid][pEntrouCasa] != -1) c = PlayerInfo[playerid][pEntrouCasa];
    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) c = PlayerInfo[playerid][pEntrouEmpresa];
    else if(PlayerInfo[playerid][pEntrouComplexo] != -1) c = PlayerInfo[playerid][pEntrouComplexo];
    else if(PlayerInfo[playerid][pEntrouGaragem] != -1) c = PlayerInfo[playerid][pEntrouGaragem];
    if(c == -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade sua!");
    new strCasa[124];

    if(PlayerInfo[playerid][pEntrouCasa] != -1)
    {
		if(HouseInfo[c][hDono] == PlayerInfo[playerid][pID])
		{
			new other = 2000;
		    if(sscanf(params, "i", other))
			{
			    SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /darpermissao [Playerid]");
			    return 1;
			}
			if(!IsPlayerConnected(other)) return 1;
			if(!strcmp(HouseInfo[c][hPerm1], "Vazio", true)) format(HouseInfo[c][hPerm1], 24, PlayerName(other, 0));
			else if(!strcmp(HouseInfo[c][hPerm2], "Vazio", true)) format(HouseInfo[c][hPerm2], 24, PlayerName(other, 0));
			else if(!strcmp(HouseInfo[c][hPerm3], "Vazio", true)) format(HouseInfo[c][hPerm3], 24, PlayerName(other, 0));
			else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode dar permissão há mais niguém nesta propriedade.");

	        format(strCasa,sizeof(strCasa),"[Casa] Você deu permissão para %s em sua casa %d.", PlayerName(other, 0), c);
	        SCM(playerid, COLOR_LIGHTGREEN, strCasa);

	        format(strCasa,sizeof(strCasa),"[Casa] %s deu permissão para você na casa %d.", PlayerName(playerid, 0), c);
	        SCM(other, COLOR_LIGHTGREEN, strCasa);
	        SalvarCasa(c);
		}
	}
	if(PlayerInfo[playerid][pEntrouGaragem] != -1)
    {
		if(GaragemInfo[c][hDono] == PlayerInfo[playerid][pID] || HouseInfo[GaragemInfo[c][hTipo]][hDono] == PlayerInfo[playerid][pID])
		{
			new other = 2000;
		    if(sscanf(params, "i", other))
			{
			    SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /darpermissao [Playerid]");
			    return 1;
			}
			if(!IsPlayerConnected(other)) return 1;
			if(!strcmp(GaragemInfo[c][hPerm1], "Vazio", true)) format(GaragemInfo[c][hPerm1], 24, PlayerName(other, 0));
			else if(!strcmp(GaragemInfo[c][hPerm2], "Vazio", true)) format(GaragemInfo[c][hPerm2], 24, PlayerName(other, 0));
			else if(!strcmp(GaragemInfo[c][hPerm3], "Vazio", true)) format(GaragemInfo[c][hPerm3], 24, PlayerName(other, 0));
			else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode dar permissão há mais niguém nesta garagem.");

	        format(strCasa,sizeof(strCasa),"[Garagem] Você deu permissão para %s em sua garagem %d.", PlayerName(other, 0), c);
	        SCM(playerid, COLOR_LIGHTGREEN, strCasa);

	        format(strCasa,sizeof(strCasa),"[Garagem] %s deu permissão para você na garagem %d.", PlayerName(playerid, 0), c);
	        SCM(other, COLOR_LIGHTGREEN, strCasa);
	        SalvarGaragem(c);
		}
	}
	if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
	{
	    if(EmpInfo[c][eDono] == PlayerInfo[playerid][pID])
		{
			new other = 2000;
		    if(sscanf(params, "i", other))
			{
			    SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /darpermissao [Playerid]");
			    return 1;
			}
			if(!IsPlayerConnected(other)) return 1;
			if(!strcmp(EmpInfo[c][ePerm1], "Vazio", true)) format(EmpInfo[c][ePerm1], 24, PlayerName(other, 0));
			else if(!strcmp(EmpInfo[c][ePerm2], "Vazio", true)) format(EmpInfo[c][ePerm2], 24, PlayerName(other, 0));
			else if(!strcmp(EmpInfo[c][ePerm3], "Vazio", true)) format(EmpInfo[c][ePerm3], 24, PlayerName(other, 0));
			else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode dar permissão há mais niguém nesta empresa.");

	        format(strCasa,sizeof(strCasa),"[Empresa] Você deu permissão para %s em sua empresa %d.", PlayerName(other, 0), c);
	        SCM(playerid, COLOR_LIGHTGREEN, strCasa);
	        format(strCasa,sizeof(strCasa),"[Empresa] %s deu permissão para você na empresa %d.", PlayerName(playerid, 0), c);
	        SCM(other, COLOR_LIGHTGREEN, strCasa);
	        SalvarEmpresa(c);
		}
	}
	if(PlayerInfo[playerid][pEntrouComplexo] != -1)
	{
	    if(ComplexoInfo[c][cDono] == PlayerInfo[playerid][pID])
		{
			new other = 2000;
		    if(sscanf(params, "i", other))
			{
			    SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /darpermissao [Playerid]");
			    return 1;
			}
			if(!IsPlayerConnected(other)) return 1;
			if(!strcmp(ComplexoInfo[c][cPerm1], "Vazio", true)) format(ComplexoInfo[c][cPerm1], 24, PlayerName(other, 0));
			else if(!strcmp(ComplexoInfo[c][cPerm2], "Vazio", true)) format(ComplexoInfo[c][cPerm2], 24, PlayerName(other, 0));
			else if(!strcmp(ComplexoInfo[c][cPerm3], "Vazio", true)) format(ComplexoInfo[c][cPerm3], 24, PlayerName(other, 0));
			else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode dar permissão há mais niguém nesta empresa.");

	        format(strCasa,sizeof(strCasa),"[Complexo] Você deu permissão para %s em sua empresa %d.", PlayerName(other, 0), c);
	        SCM(playerid, COLOR_LIGHTGREEN, strCasa);
	        format(strCasa,sizeof(strCasa),"[Complexo] %s deu permissão para você na empresa %d.", PlayerName(playerid, 0), c);
	        SCM(other, COLOR_LIGHTGREEN, strCasa);
	        SalvarComplexo(c);
		}
	}
	return 1;
}

CMD:permitidos(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new c = -1;
    if(PlayerInfo[playerid][pEntrouCasa] != -1) c = PlayerInfo[playerid][pEntrouCasa];
    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) c = PlayerInfo[playerid][pEntrouEmpresa];
    else if(PlayerInfo[playerid][pEntrouComplexo] != -1) c = PlayerInfo[playerid][pEntrouComplexo];
    else if(PlayerInfo[playerid][pEntrouGaragem] != -1) c = PlayerInfo[playerid][pEntrouGaragem];
    if(c == -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade!");

    if(PlayerInfo[playerid][pEntrouCasa] != -1)
    {
	    if(HouseInfo[c][hDono] == PlayerInfo[playerid][pID])
		{
		    new strCasa[32],strMsg[124];
		    format(strCasa,sizeof(strCasa),"[Permissões] Casa: %d",c);

		    format(strMsg,sizeof(strMsg),"1: %s\n2: %s\n3: %s", HouseInfo[c][hPerm1], HouseInfo[c][hPerm2], HouseInfo[c][hPerm3]);
		    Dialog_Show(playerid, DIALOG_PERMITIDOS, DIALOG_STYLE_LIST, strCasa, strMsg, "Selecionar", "Cancelar");
		    return 1;
		}
	}
	if(PlayerInfo[playerid][pEntrouGaragem] != -1)
    {
	    if(GaragemInfo[c][hDono] == PlayerInfo[playerid][pID] || HouseInfo[GaragemInfo[c][hTipo]][hDono] == PlayerInfo[playerid][pID])
		{
		    new strCasa[32],strMsg[124];
		    format(strCasa,sizeof(strCasa),"[Permissões] Garagem: %d",c);

		    format(strMsg,sizeof(strMsg),"1: %s\n2: %s\n3: %s", GaragemInfo[c][hPerm1], GaragemInfo[c][hPerm2], GaragemInfo[c][hPerm3]);
		    Dialog_Show(playerid, DIALOG_PERMITIDOS, DIALOG_STYLE_LIST, strCasa, strMsg, "Selecionar", "Cancelar");
		    return 1;
		}
	}
	if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
	{
	    if(EmpInfo[c][eDono] == PlayerInfo[playerid][pID])
		{
		    new strCasa[32],strMsg[124];
		    format(strCasa,sizeof(strCasa),"[Permissões] Empresa: %d",c);

		    format(strMsg,sizeof(strMsg),"1: %s\n2: %s\n3: %s", EmpInfo[c][ePerm1], EmpInfo[c][ePerm2], EmpInfo[c][ePerm3]);
		    Dialog_Show(playerid, DIALOG_PERMITIDOS, DIALOG_STYLE_LIST, strCasa, strMsg, "Selecionar", "Cancelar");
		    return 1;
		}
	}
	if(PlayerInfo[playerid][pEntrouComplexo] != -1)
	{
	    if(ComplexoInfo[c][cDono] == PlayerInfo[playerid][pID])
		{
		    new strCasa[32],strMsg[124];
		    format(strCasa,sizeof(strCasa),"[Permissões] Complexo: %d",c);

		    format(strMsg,sizeof(strMsg),"1: %s\n2: %s\n3: %s", ComplexoInfo[c][cPerm1], ComplexoInfo[c][cPerm2], ComplexoInfo[c][cPerm3]);
		    Dialog_Show(playerid, DIALOG_PERMITIDOS, DIALOG_STYLE_LIST, strCasa, strMsg, "Selecionar", "Cancelar");
		    return 1;
		}
	}
	return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade sua!");
}
Dialog:DIALOG_PERMITIDOS(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new c = -1;
	    if(PlayerInfo[playerid][pEntrouCasa] != -1) c = PlayerInfo[playerid][pEntrouCasa];
	    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) c = PlayerInfo[playerid][pEntrouEmpresa];
	    else if(PlayerInfo[playerid][pEntrouComplexo] != -1) c = PlayerInfo[playerid][pEntrouComplexo];
	    else if(PlayerInfo[playerid][pEntrouGaragem] != -1) c = PlayerInfo[playerid][pEntrouGaragem];
	    if(c == -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade!");

	    if(PlayerInfo[playerid][pEntrouCasa] != -1)
	    {
		    if(HouseInfo[c][hDono] == PlayerInfo[playerid][pID])
		    {
		    	new strCasa[32];

				switch(listitem)
				{
				    case 0:
					{
					    format(strCasa,sizeof(strCasa),"[Permissões] Gerenciar: %s", HouseInfo[c][hPerm1]);
						Dialog_Show(playerid, DIALOG_PERMITIDOS0, DIALOG_STYLE_LIST, strCasa, "Remover Permissão", "Selecionar", "Cancelar");
					}
				    case 1:
					{
					    format(strCasa,sizeof(strCasa),"[Permissões] Gerenciar: %s", HouseInfo[c][hPerm2]);
						Dialog_Show(playerid, DIALOG_PERMITIDOS1, DIALOG_STYLE_LIST, strCasa, "Remover Permissão", "Selecionar", "Cancelar");
				    }
				    case 2:
					{
					    format(strCasa,sizeof(strCasa),"[Permissões] Gerenciar: %s", HouseInfo[c][hPerm3]);
						Dialog_Show(playerid, DIALOG_PERMITIDOS2, DIALOG_STYLE_LIST, strCasa, "Remover Permissão", "Selecionar", "Cancelar");
					}
				}
			}
			return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade sua!");
		}
		if(PlayerInfo[playerid][pEntrouGaragem] != -1)
	    {
		    if(GaragemInfo[c][hDono] == PlayerInfo[playerid][pID] || HouseInfo[GaragemInfo[c][hTipo]][hDono] == PlayerInfo[playerid][pID])
		    {
		    	new strCasa[32];

				switch(listitem)
				{
				    case 0:
					{
					    format(strCasa,sizeof(strCasa),"[Permissões] Gerenciar: %s", GaragemInfo[c][hPerm1]);
						Dialog_Show(playerid, DIALOG_PERMITIDOS0, DIALOG_STYLE_LIST, strCasa, "Remover Permissão", "Selecionar", "Cancelar");
					}
				    case 1:
					{
					    format(strCasa,sizeof(strCasa),"[Permissões] Gerenciar: %s", GaragemInfo[c][hPerm2]);
						Dialog_Show(playerid, DIALOG_PERMITIDOS1, DIALOG_STYLE_LIST, strCasa, "Remover Permissão", "Selecionar", "Cancelar");
				    }
				    case 2:
					{
					    format(strCasa,sizeof(strCasa),"[Permissões] Gerenciar: %s", GaragemInfo[c][hPerm3]);
						Dialog_Show(playerid, DIALOG_PERMITIDOS2, DIALOG_STYLE_LIST, strCasa, "Remover Permissão", "Selecionar", "Cancelar");
					}
				}
			}
			return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade sua!");
		}
		if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
		{
		    if(EmpInfo[c][eDono] == PlayerInfo[playerid][pID] || HouseInfo[GaragemInfo[c][hTipo]][hDono] == PlayerInfo[playerid][pID])
		    {
		    	new strCasa[32];

				switch(listitem)
				{
				    case 0:
					{
					    format(strCasa,sizeof(strCasa),"[Permissões] Gerenciar: %s", EmpInfo[c][ePerm1]);
						Dialog_Show(playerid, DIALOG_PERMITIDOS0, DIALOG_STYLE_LIST, strCasa, "Remover Permissão", "Selecionar", "Cancelar");
					}
				    case 1:
					{
					    format(strCasa,sizeof(strCasa),"[Permissões] Gerenciar: %s", EmpInfo[c][ePerm2]);
						Dialog_Show(playerid, DIALOG_PERMITIDOS1, DIALOG_STYLE_LIST, strCasa, "Remover Permissão", "Selecionar", "Cancelar");
				    }
				    case 2:
					{
					    format(strCasa,sizeof(strCasa),"[Permissões] Gerenciar: %s", EmpInfo[c][ePerm3]);
						Dialog_Show(playerid, DIALOG_PERMITIDOS2, DIALOG_STYLE_LIST, strCasa, "Remover Permissão", "Selecionar", "Cancelar");
					}
				}
			}
			return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma empresa sua!");
		}
		if(PlayerInfo[playerid][pEntrouComplexo] != -1)
		{
		    if(ComplexoInfo[c][cDono] == PlayerInfo[playerid][pID] || HouseInfo[GaragemInfo[c][hTipo]][hDono] == PlayerInfo[playerid][pID])
		    {
		    	new strCasa[32];

				switch(listitem)
				{
				    case 0:
					{
					    format(strCasa,sizeof(strCasa),"[Permissões] Gerenciar: %s", ComplexoInfo[c][cPerm1]);
						Dialog_Show(playerid, DIALOG_PERMITIDOS0, DIALOG_STYLE_LIST, strCasa, "Remover Permissão", "Selecionar", "Cancelar");
					}
				    case 1:
					{
					    format(strCasa,sizeof(strCasa),"[Permissões] Gerenciar: %s", ComplexoInfo[c][cPerm2]);
						Dialog_Show(playerid, DIALOG_PERMITIDOS1, DIALOG_STYLE_LIST, strCasa, "Remover Permissão", "Selecionar", "Cancelar");
				    }
				    case 2:
					{
					    format(strCasa,sizeof(strCasa),"[Permissões] Gerenciar: %s", ComplexoInfo[c][cPerm3]);
						Dialog_Show(playerid, DIALOG_PERMITIDOS2, DIALOG_STYLE_LIST, strCasa, "Remover Permissão", "Selecionar", "Cancelar");
					}
				}
			}
			return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma empresa sua!");
		}
	}
	return 1;
}

Dialog:DIALOG_PERMITIDOS0(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new c = -1;
	    if(PlayerInfo[playerid][pEntrouCasa] != -1) c = PlayerInfo[playerid][pEntrouCasa];
	    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) c = PlayerInfo[playerid][pEntrouEmpresa];
	    else if(PlayerInfo[playerid][pEntrouComplexo] != -1) c = PlayerInfo[playerid][pEntrouComplexo];
	    else if(PlayerInfo[playerid][pEntrouGaragem] != -1) c = PlayerInfo[playerid][pEntrouGaragem];
	    if(c == -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade!");
	    if(PlayerInfo[playerid][pEntrouCasa] != -1)
	    {
		    if(HouseInfo[c][hDono] == PlayerInfo[playerid][pID])
		    {
		        SCM(playerid, COLOR_LIGHTGREEN, "Você limpou o Slot 1!");
	     		format(HouseInfo[c][hPerm1], 24, "Vazio");
			}
	        return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade sua!");
		}
		if(PlayerInfo[playerid][pEntrouGaragem] != -1)
	    {
		    if(GaragemInfo[c][hDono] == PlayerInfo[playerid][pID] || HouseInfo[GaragemInfo[c][hTipo]][hDono] == PlayerInfo[playerid][pID])
		    {
		        SCM(playerid, COLOR_LIGHTGREEN, "Você limpou o Slot 1!");
	     		format(GaragemInfo[c][hPerm1], 24, "Vazio");
			}
	        return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade sua!");
		}
		if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
		{
		    if(EmpInfo[c][eDono] == PlayerInfo[playerid][pID])
		    {
		        SCM(playerid, COLOR_LIGHTGREEN, "Você limpou o Slot 1!");
	     		format(EmpInfo[c][ePerm1], 24, "Vazio");
			}
	        return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma empresa sua!");
		}
		if(PlayerInfo[playerid][pEntrouComplexo] != -1)
		{
		    if(ComplexoInfo[c][cDono] == PlayerInfo[playerid][pID])
		    {
		        SCM(playerid, COLOR_LIGHTGREEN, "Você limpou o Slot 1!");
	     		format(ComplexoInfo[c][cPerm1], 24, "Vazio");
			}
	        return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade sua!");
		}
	}
	return 1;
}
Dialog:DIALOG_PERMITIDOS1(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new c = -1;
	    if(PlayerInfo[playerid][pEntrouCasa] != -1) c = PlayerInfo[playerid][pEntrouCasa];
	    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) c = PlayerInfo[playerid][pEntrouEmpresa];
	    else if(PlayerInfo[playerid][pEntrouComplexo] != -1) c = PlayerInfo[playerid][pEntrouComplexo];
	    else if(PlayerInfo[playerid][pEntrouGaragem] != -1) c = PlayerInfo[playerid][pEntrouGaragem];
	    if(c == -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade!");
	    if(PlayerInfo[playerid][pEntrouCasa] != -1)
	    {
		    if(HouseInfo[c][hDono] == PlayerInfo[playerid][pID])
		    {
		        SCM(playerid, COLOR_LIGHTGREEN, "Você limpou o Slot 2!");
	     		format(HouseInfo[c][hPerm2], 24, "Vazio");
			}
	        return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade sua!");
		}
		if(PlayerInfo[playerid][pEntrouGaragem] != -1)
	    {
		    if(GaragemInfo[c][hDono] == PlayerInfo[playerid][pID] || HouseInfo[GaragemInfo[c][hTipo]][hDono] == PlayerInfo[playerid][pID])
		    {
		        SCM(playerid, COLOR_LIGHTGREEN, "Você limpou o Slot 2!");
	     		format(GaragemInfo[c][hPerm2], 24, "Vazio");
			}
	        return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade sua!");
		}
		if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
		{
		    if(EmpInfo[c][eDono] == PlayerInfo[playerid][pID])
		    {
		        SCM(playerid, COLOR_LIGHTGREEN, "Você limpou o Slot 2!");
	     		format(EmpInfo[c][ePerm2], 24, "Vazio");
			}
	        return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma empresa sua!");
		}
		if(PlayerInfo[playerid][pEntrouComplexo] != -1)
		{
		    if(ComplexoInfo[c][cDono] == PlayerInfo[playerid][pID])
		    {
		        SCM(playerid, COLOR_LIGHTGREEN, "Você limpou o Slot 2!");
	     		format(ComplexoInfo[c][cPerm2], 24, "Vazio");
			}
	        return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade sua!");
		}
	}
	return 1;
}
Dialog:DIALOG_PERMITIDOS2(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new c = -1;
	    if(PlayerInfo[playerid][pEntrouCasa] != -1) c = PlayerInfo[playerid][pEntrouCasa];
	    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) c = PlayerInfo[playerid][pEntrouEmpresa];
	    else if(PlayerInfo[playerid][pEntrouComplexo] != -1) c = PlayerInfo[playerid][pEntrouComplexo];
	    else if(PlayerInfo[playerid][pEntrouGaragem] != -1) c = PlayerInfo[playerid][pEntrouGaragem];
	    if(c == -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade!");
	    if(PlayerInfo[playerid][pEntrouCasa] != -1)
	    {
		    if(HouseInfo[c][hDono] == PlayerInfo[playerid][pID])
		    {
		        SCM(playerid, COLOR_LIGHTGREEN, "Você limpou o Slot 3!");
	     		format(HouseInfo[c][hPerm3], 24, "Vazio");
			}
	        return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade sua!");
		}
		if(PlayerInfo[playerid][pEntrouGaragem] != -1)
	    {
		    if(GaragemInfo[c][hDono] == PlayerInfo[playerid][pID] || HouseInfo[GaragemInfo[c][hTipo]][hDono] == PlayerInfo[playerid][pID])
		    {
		        SCM(playerid, COLOR_LIGHTGREEN, "Você limpou o Slot 3!");
	     		format(GaragemInfo[c][hPerm3], 24, "Vazio");
			}
	        return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade sua!");
		}
		if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
		{
		    if(EmpInfo[c][eDono] == PlayerInfo[playerid][pID])
		    {
		        SCM(playerid, COLOR_LIGHTGREEN, "Você limpou o Slot 3!");
	     		format(EmpInfo[c][ePerm3], 24, "Vazio");
			}
	        return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma empresa sua!");
		}
		if(PlayerInfo[playerid][pEntrouComplexo] != -1)
		{
		    if(ComplexoInfo[c][cDono] == PlayerInfo[playerid][pID])
		    {
		        SCM(playerid, COLOR_LIGHTGREEN, "Você limpou o Slot 3!");
	     		format(ComplexoInfo[c][cPerm3], 24, "Vazio");
			}
	        return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma propriedade sua!");
		}
	}
	return 1;
}
COMMAND:trocarinterior(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return 1;
	if(TrocandoInterior[playerid] != 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já está trocando de interior");
	new c = PlayerInfo[playerid][pEntrouCasa];
	if(c != -1)
	{
		if(HouseInfo[c][hDono] == PlayerInfo[playerid][pID])
		{
			PlayerInfo[playerid][pInterior] = GetPlayerInterior(playerid);
			PlayerInfo[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

			GetPlayerPos(playerid, PlayerInfo[playerid][pPos][0], PlayerInfo[playerid][pPos][1], PlayerInfo[playerid][pPos][2]);
			GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos][3]);

			GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
			GetPlayerArmour(playerid, PlayerInfo[playerid][pArmour]);

			TrocandoInterior[playerid] = 0;

			SetPlayerPos(playerid, TrocaDeInt_Coordenadas[0][3], TrocaDeInt_Coordenadas[0][4], TrocaDeInt_Coordenadas[0][5]-3);
			TogglePlayerControllable(playerid, 0);

			SetPlayerCameraPos(playerid, TrocaDeInt_Coordenadas[0][3], TrocaDeInt_Coordenadas[0][4], TrocaDeInt_Coordenadas[0][5]);
			SetPlayerCameraLookAt(playerid, TrocaDeInt_Coordenadas[0][6], TrocaDeInt_Coordenadas[0][7], TrocaDeInt_Coordenadas[0][8]);
			SCM(playerid, -1, "");
			SCM(playerid, -1, "");
			SCM(playerid, -1, "");
			SCM(playerid, -1, "");
			SCM(playerid, -1, "");
			SCM(playerid, -1, "");
			SCM(playerid, COLOR_LIGHTGREEN,"_______________________________________");
			SCM(playerid, -1, "{FFFFFF} Você está selecionando um novo interior para sua residência");
			SCM(playerid, -1, "{FFFFFF} Você pode digitar 'Proximo' para ver outro interior,");
			SCM(playerid, -1, "{FFFFFF} Ou então 'Anterior' para voltar para o interior anterior");
			SCM(playerid, -1, "{FFFFFF} Quando encontrar um, diga 'Confirmar', caso desista fale 'Cancelar'.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é o proprietario desta residência");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta em uma residência");
	return 1;
}

CMD:alarmecasa(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pEntrouCasa] != -1)
    {
        new c = PlayerInfo[playerid][pEntrouCasa];
	    if(HouseInfo[c][hCriada])
		{
		    if(HouseInfo[c][hDono] == PlayerInfo[playerid][pID])
			{
			    new var;
				if (sscanf(params, "I(9999)", var))
				{
					SCM(playerid, -1, "============================================================================");
					format(string, 256, "{FFFFFF} Atualmente a sua casa tem o alarme nivel %d", HouseInfo[c][hAlarme]);
					SCM(playerid, -1, string);
					SCM(playerid, -1, "Para comprar um alarme digite: /alarmecasa [nivel (1-3)]");
					SCM(playerid, -1, "Visite o fórum, Documentação de Sistemas > Propriedades e confira sobre os preços e vantagens.");
					SCM(playerid, -1, "============================================================================");
					return 1;
				}
				else
				{
				    if(var == 9999)
				    {
						SCM(playerid, -1, "============================================================================");
						format(string, 256, "{FFFFFF} Atualmente a sua casa tem o alarme nivel %d", HouseInfo[c][hAlarme]);
						SCM(playerid, -1, string);
						SCM(playerid, -1, "Para comprar um alarme digite: /alarmecasa [nivel (0-3)]");
						SCM(playerid, -1, "Visite o fórum, Documentação de Sistemas > Propriedades e confira sobre os preços e vantagens.");
						SCM(playerid, -1, "============================================================================");
						return 1;
				    }
				    if(HouseInfo[c][hAlarmeColocouAgr] > 0)
				    {
				        SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você acabou de colocar o alarme em sua residência, você deve esperar pelo menos um PayDay para retira-lo.");
				        return 1;
				    }
			 		if(var >= 0 && var < 4)
			 		{
					    if(var > HouseInfo[c][hAlarme])
					    {
					        format(string, 256, "Parabéns, você melhorou o alarme da sua residência para %d.", var);
							SCM(playerid, COLOR_LIGHTGREEN, string);

							HouseInfo[c][hAlarme] = var;
							HouseInfo[c][hAlarmeColocouAgr] = 1;

							SalvarCasa(c);
							return 1;
					    }
					    else if(HouseInfo[c][hAlarme] > var)
					    {
					        if(var == 0)
					        {
								SCM(playerid, COLOR_LIGHTGREEN, "Certo, você removeu o alarme da sua residência.");
					        }
							else
					        {
					        	format(string, 256, "Certo, você regrediu o alarme da sua residência para %d.", HouseInfo[c][hAlarme]);
								SCM(playerid, COLOR_LIGHTGREEN, string);
							}
							HouseInfo[c][hAlarme] = var;
							HouseInfo[c][hAlarmeColocouAgr] = 1;

							SalvarCasa(c);
							return 1;
					    }
					}
					else
					{
						SCM(playerid, COLOR_LIGHTGREEN, "============================================================================");
						format(string, 256, "Atualmente a sua casa tem o alarme nivel %d", HouseInfo[c][hAlarme]);
						SCM(playerid, -1, string);
						SCM(playerid, -1, "Para comprar um alarme digite: /alarmecasa [nivel (0-3)]");
						SCM(playerid, -1, "Visite o fórum, Documentação de Sistemas > Propriedades e confira sobre os preços e vantagens.");
						SCM(playerid, COLOR_LIGHTGREEN, "============================================================================");
						return 1;
					}
				}
			}
			else return SCM(playerid, COLOR_LIGHTRED, "Você não é o proprietário desta residência");
		}
	}
	return 1;
}

CMD:alarmegaragem(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pEntrouGaragem] != -1)
    {
        new c = PlayerInfo[playerid][pEntrouGaragem];
	    if(GaragemInfo[c][hCriada])
		{
		    if(GaragemInfo[c][hDono] == PlayerInfo[playerid][pID] || HouseInfo[GaragemInfo[c][hTipo]][hDono] == PlayerInfo[playerid][pID])
			{
			    new var;
				if (sscanf(params, "I(9999)", var))
				{
					SCM(playerid, -1, "============================================================================");
					format(string, 256, "{FFFFFF} Atualmente a sua garagem tem o alarme nivel %d", GaragemInfo[c][hAlarme]);
					SCM(playerid, -1, string);
					SCM(playerid, -1, "Para comprar um alarme digite: /alarmegaragem [nivel (1-3)]");
					SCM(playerid, -1, "Visite o fórum, Documentação de Sistemas > Propriedades e confira sobre os preços e vantagens.");
					SCM(playerid, -1, "============================================================================");
					return 1;
				}
				else
				{
				    if(var == 9999)
				    {
						SCM(playerid, -1, "============================================================================");
						format(string, 256, "{FFFFFF} Atualmente a sua garagem tem o alarme nivel %d", GaragemInfo[c][hAlarme]);
						SCM(playerid, -1, string);
						SCM(playerid, -1, "Para comprar um alarme digite: /alarmegaragem [nivel (0-3)]");
						SCM(playerid, -1, "Visite o fórum, Documentação de Sistemas > Propriedades e confira sobre os preços e vantagens.");
						SCM(playerid, -1, "============================================================================");
						return 1;
				    }
				    if(GaragemInfo[c][hAlarmeColocouAgr] > 0)
				    {
				        SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você acabou de colocar o alarme em sua garagem, você deve esperar pelo menos um PayDay para retira-lo.");
				        return 1;
				    }
			 		if(var >= 0 && var < 4)
			 		{
					    if(var > GaragemInfo[c][hAlarme])
					    {
					        format(string, 256, "Parabéns, você melhorou o alarme da sua garagem para %d.", var);
							SCM(playerid, COLOR_LIGHTGREEN, string);

							GaragemInfo[c][hAlarme] = var;
							GaragemInfo[c][hAlarmeColocouAgr] = 1;

							SalvarCasa(c);
							return 1;
					    }
					    else if(GaragemInfo[c][hAlarme] > var)
					    {
					        if(var == 0)
					        {
								SCM(playerid, COLOR_LIGHTGREEN, "Certo, você removeu o alarme da sua garagem.");
					        }
							else
					        {
					        	format(string, 256, "Certo, você regrediu o alarme da sua garagem para %d.", GaragemInfo[c][hAlarme]);
								SCM(playerid, COLOR_LIGHTGREEN, string);
							}
							GaragemInfo[c][hAlarme] = var;
							GaragemInfo[c][hAlarmeColocouAgr] = 1;

							SalvarCasa(c);
							return 1;
					    }
					}
					else
					{
						SCM(playerid, COLOR_LIGHTGREEN, "============================================================================");
						format(string, 256, "Atualmente a sua garagem tem o alarme nivel %d", GaragemInfo[c][hAlarme]);
						SCM(playerid, -1, string);
						SCM(playerid, -1, "Para comprar um alarme digite: /alarmegaragem [nivel (0-3)]");
						SCM(playerid, -1, "Visite o fórum, Documentação de Sistemas > Propriedades e confira sobre os preços e vantagens.");
						SCM(playerid, COLOR_LIGHTGREEN, "============================================================================");
						return 1;
					}
				}
			}
			else return SCM(playerid, COLOR_LIGHTRED, "Você não é o proprietário desta garagem.");
		}
	}
	return 1;
}

stock ObjetoEComputPD(model)
{
	new validobject = false;
    for(new i = 0; i < MAX_COMPUTS; i++)
	{
        if(OBJ_COMPUTERS[i] == model)
		{
            validobject = true;
            break;
        }
    }
	return validobject;
}

stock ObjetoERadio(model)
{
	new validobject = false;
    for(new i = 0; i < MAX_RADIOS; i++)
	{
        if(OBJ_RADIOS[i] == model)
		{
            validobject = true;
            break;
        }
    }
	return validobject;
}

stock ObjetoETelevisao(model)
{
	new validobject = false;
    for(new i = 0; i < MAX_TVS; i++)
	{
        if(OBJ_TELEVISOES[i] == model)
		{
            validobject = true;
            break;
        }
    }
	return validobject;
}

stock ObjetoEPorta(model)
{
	new validobject = false;
    for(new i = 0; i < MAX_PORTAS; i++)
	{
        if(Catalogo_Portas[i] == model)
		{
            validobject = true;
            break;
        }
    }
	return validobject;
}

stock ObjetoEParede(model)
{
	new validobject = false;
    for(new i = 0; i < MAX_PAREDES; i++)
	{
        if(Catalogo_Paredes[i] == model)
		{
            validobject = true;
            break;
        }
    }
	return validobject;
}
forward AtualizarMoveisCasa(playerid);
public AtualizarMoveisCasa(playerid)
{
	new strCasa[64];
    new c = -1;
    if(PlayerInfo[playerid][pEntrouCasa] != -1) {
		c = PlayerInfo[playerid][pEntrouCasa];
		format(strCasa,sizeof(strCasa),"[Furniture] Casa: %d",c);
	}
	else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) {
  		c = PlayerInfo[playerid][pEntrouEmpresa];
  		format(strCasa,sizeof(strCasa),"[Furniture] Empresa: %d",c);
    }
    else if(PlayerInfo[playerid][pEntrouComplexo] != -1) {
  		c = PlayerInfo[playerid][pEntrouComplexo];
  		format(strCasa,sizeof(strCasa),"[Furniture] Complexo: %d",c);
    }
    else if(PlayerInfo[playerid][pEntrouGaragem] != -1) {
  		c = PlayerInfo[playerid][pEntrouGaragem];
  		format(strCasa,sizeof(strCasa),"[Furniture] Garagem: %d",c);
    }
    if(c == -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando aqui.");
    if(PlayerInfo[playerid][pEntrouCasa] != -1)
	{
 		for(new m; m < MAX_MOVEIS; m++) {
    		if(FurniInfo[m][mCriado] != 0) {
      			if(FurniInfo[m][mNaCasa] == c) {
    				if(HouseInfo[c][hDono] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pAdmin] >= 3000) {
        				Movel_Refresh(999, FurniInfo[m][mID]);
					}
				}
			}
		}
	}
	if(PlayerInfo[playerid][pEntrouComplexo] != -1) {
 		for(new m; m < MAX_MOVEIS; m++) {
    		if(FurniInfo[m][mCriado] != 0) {
      			if(FurniInfo[m][mNoComplexo] == c) {
      			    if(ComplexoInfo[c][cDono] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pAdmin] >= 3000) {
        				Movel_Refresh(999, FurniInfo[m][mID]);
        			}
				}
			}
		}
	}
	if(PlayerInfo[playerid][pEntrouEmpresa] != -1) {
 		for(new m; m < MAX_MOVEIS; m++) {
    		if(FurniInfo[m][mCriado] != 0) {
      			if(FurniInfo[m][mNaEmpresa] == c) {
  				    if(EmpInfo[c][eDono] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pAdmin] >= 3000) {
        				Movel_Refresh(999, FurniInfo[m][mID]);
					}
				}
			}
		}
	}
	if(PlayerInfo[playerid][pEntrouGaragem] != -1) {
 		for(new m; m < MAX_MOVEIS; m++) {
    		if(FurniInfo[m][mCriado] != 0) {
      			if(FurniInfo[m][mNaGaragem] == c) {
   				    if(GaragemInfo[c][hDono] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pAdmin] >= 3000) {
        				Movel_Refresh(999, FurniInfo[m][mID]);
					}
				}
			}
		}
	}
	return 1;
}

Dialog:DIALOG_F_CATEGORIAS(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	switch(listitem)
	{
		case 0: ShowModelSelectionMenu(playerid, "Catalogo > Conforto", MODEL_SELECTION_CONFORTO, Catalogo_Conforto, sizeof(Catalogo_Conforto), -16.0, 0.0, -55.0);
		case 1: ShowModelSelectionMenu(playerid, "Catalogo > Decoração", MODEL_SELECTION_DECORACAO, Catalogo_Decoracoes, sizeof(Catalogo_Decoracoes), -16.0, 0.0, -55.0);
		case 2: ShowModelSelectionMenu(playerid, "Catalogo > Entreterimento", MODEL_SELECTION_ENTRERT, Catalogo_Entreterimento, sizeof(Catalogo_Entreterimento), -16.0, 0.0, -55.0);
		case 3: ShowModelSelectionMenu(playerid, "Catalogo > Eletrodomésticos", MODEL_SELECTION_ELETROS, Catalogo_Eletrodomesticos, sizeof(Catalogo_Eletrodomesticos), -16.0, 0.0, -55.0);
		case 4: ShowModelSelectionMenu(playerid, "Catalogo > Banheiro", MODEL_SELECTION_BANHEIRO, Catalogo_Banheiro, sizeof(Catalogo_Banheiro), -16.0, 0.0, -55.0);
		case 5: ShowModelSelectionMenu(playerid, "Catalogo > Iluminação", MODEL_SELECTION_ILUMINA, Catalogo_Iluminacao, sizeof(Catalogo_Iluminacao), -16.0, 0.0, -55.0);
		case 6: ShowModelSelectionMenu(playerid, "Catalogo > Armazenamento", MODEL_SELECTION_ARMAZEM, Catalogo_Armazenamento, sizeof(Catalogo_Armazenamento), -16.0, 0.0, -55.0);
		case 7: ShowModelSelectionMenu(playerid, "Catalogo > Superfícies", MODEL_SELECTION_SUPERF, Catalogo_Superficies, sizeof(Catalogo_Superficies), -16.0, 0.0, -55.0);
		case 8: ShowModelSelectionMenu(playerid, "Catalogo > Diversos", MODEL_SELECTION_DIVERSOS, Catalogo_Diversos, sizeof(Catalogo_Diversos), -16.0, 0.0, -55.0);
		case 9: ShowModelSelectionMenu(playerid, "Catalogo > Especial", MODEL_SELECTION_ESPECIAL, Catalogo_Especial, sizeof(Catalogo_Especial), -16.0, 0.0, -55.0);
		case 10: ShowModelSelectionMenu(playerid, "Catalogo > Portas", MODEL_SELECTION_PORTAS, Catalogo_Portas, sizeof(Catalogo_Portas), -16.0, 0.0, -55.0);
		case 11: ShowModelSelectionMenu(playerid, "Catalogo > Televisões", MODEL_SELECTION_TVS, Catalogo_Portas, sizeof(OBJ_TELEVISOES), -16.0, 0.0, -55.0);
		case 12: ShowModelSelectionMenu(playerid, "Catalogo > Computadores", MODEL_SELECTION_COMP, Catalogo_Portas, sizeof(OBJ_COMPUTERS), -16.0, 0.0, -55.0);
	}
	return 1;
}

Dialog:DIALOG_F_MOVEIS2(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
	    new c = -1, strCasa[64];
	    if(PlayerInfo[playerid][pEntrouCasa] != -1)
		{
			c = PlayerInfo[playerid][pEntrouCasa];
			format(strCasa,sizeof(strCasa),"[Furniture] Casa: %d",c);
		}
	    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
		{
			c = PlayerInfo[playerid][pEntrouEmpresa];
			format(strCasa,sizeof(strCasa),"[Furniture] Empresa: %d",c);
		}
		else if(PlayerInfo[playerid][pEntrouComplexo] != -1)
		{
			c = PlayerInfo[playerid][pEntrouComplexo];
			format(strCasa,sizeof(strCasa),"[Furniture] Complexo: %d",c);
		}
		else if(PlayerInfo[playerid][pEntrouGaragem] != -1)
		{
			c = PlayerInfo[playerid][pEntrouGaragem];
			format(strCasa,sizeof(strCasa),"[Furniture] Garagem: %d",c);
		}

		if(c == -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando aqui.");

   		new MovelID  = VendoFurniList[playerid][0];
   		if(ObjetoEPorta(FurniInfo[MovelID][mModelo]))
   		{
   		    Dialog_Show(playerid, DIALOG_F_PORTAS, DIALOG_STYLE_LIST, strCasa, "Editar Posição\nEditar Nome\nEditar Textura\nEditar Index(Textura)\nPosição Porta Aberta\nDeletar", "Selecionar", "Fechar");
   		}
   		else
   		{
        	Dialog_Show(playerid, DIALOG_F_MOVEIS3, DIALOG_STYLE_LIST, strCasa, "Editar Posição\nEditar Nome\nEditar Textura\nEditar Index(Textura)\nDeletar", "Selecionar", "Fechar");
		}
		return 1;
	}
}
Dialog:DIALOG_F_PORTAS(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new c = -1, strCasa[64];
	    if(PlayerInfo[playerid][pEntrouCasa] != -1)
		{
			c = PlayerInfo[playerid][pEntrouCasa];
			format(strCasa,sizeof(strCasa),"[Furniture] Casa: %d",c);
		}
	    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
		{
			c = PlayerInfo[playerid][pEntrouEmpresa];
			format(strCasa,sizeof(strCasa),"[Furniture] Empresa: %d",c);
		}
		else if(PlayerInfo[playerid][pEntrouComplexo] != -1)
		{
			c = PlayerInfo[playerid][pEntrouComplexo];
			format(strCasa,sizeof(strCasa),"[Furniture] Complexo: %d",c);
		}
		else if(PlayerInfo[playerid][pEntrouGaragem] != -1)
		{
			c = PlayerInfo[playerid][pEntrouGaragem];
			format(strCasa,sizeof(strCasa),"[Furniture] Garagem: %d",c);
		}

		if(c == -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando aqui.");


	    switch(listitem)
	    {
	        case 0: // Editar Posição
	        {
				new FurniID = VendoFurniList[playerid][0];
				if(IsPlayerInRangeOfPoint(playerid, 5.0, FurniInfo[FurniID][mX], FurniInfo[FurniID][mY], FurniInfo[FurniID][mZ]))
    			{
    			    SetPVarInt(playerid, "ComprandoNovoMovel", 0);
					PlayerInfo[playerid][pEditPorta][0] = FurniID;
					EditDynamicObject(playerid, FurniInfo[FurniID][mObjeto]);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo deste móvel.");
			}
			case 1: // Editar Nome
			{
				Dialog_Show(playerid, DIALOG_F_MOVEIS4, DIALOG_STYLE_INPUT, strCasa, "Digite o nome que você deseja dar ao seu móvel:", "Salvar", "Cancelar");
			}
			case 2:// Textura
			{
                Movel_AbrirDialogTexturas(playerid);
			    TexturaEdit[playerid] = 1;
			}
			case 3:// Textura 2
			{
                Movel_AbrirDialogTexturas(playerid);
			    TexturaEdit[playerid] = 2;
			}
			case 4:// Posição da porta aberta
			{
			    new strMovel[32];
				new FurniID = VendoFurniList[playerid][0];
				format(strMovel,sizeof(strMovel),"%d", FurniID);
				SCM(playerid, -1, strMovel);
				if(IsPlayerInRangeOfPoint(playerid, 5.0, FurniInfo[FurniID][mX], FurniInfo[FurniID][mY], FurniInfo[FurniID][mZ]))
    			{
    			    SCM(playerid, COLOR_YELLOW, "SERVER: Gire apenas o eixo de rotação Z, para salvar o sentido de abertura da porta.");
					PlayerInfo[playerid][pEditPorta][1] = FurniID;
					EditDynamicObject(playerid, FurniInfo[FurniID][mObjeto]);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo deste móvel.");
			}
			case 5: // Deletar
			{
			    new ItemID = VendoFurniList[playerid][0];

		    	if (IsValidDynamicObject(FurniInfo[ItemID][mObjeto]))
    				DestroyDynamicObject(FurniInfo[ItemID][mObjeto]);

			    DeletandoMovel(playerid, ItemID);
			    return 1;
			}
	    }
		return 1;
	}
}
Dialog:DIALOG_F_MOVEIS3(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new c = -1, strCasa[64];
	    if(PlayerInfo[playerid][pEntrouCasa] != -1)
		{
			c = PlayerInfo[playerid][pEntrouCasa];
			format(strCasa,sizeof(strCasa),"[Furniture] Casa: %d",c);
		}
	    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
		{
			c = PlayerInfo[playerid][pEntrouEmpresa];
			format(strCasa,sizeof(strCasa),"[Furniture] Empresa: %d",c);
		}
		else if(PlayerInfo[playerid][pEntrouComplexo] != -1)
		{
			c = PlayerInfo[playerid][pEntrouComplexo];
			format(strCasa,sizeof(strCasa),"[Furniture] Complexo: %d",c);
		}
		else if(PlayerInfo[playerid][pEntrouGaragem] != -1)
		{
			c = PlayerInfo[playerid][pEntrouGaragem];
			format(strCasa,sizeof(strCasa),"[Furniture] Garagem: %d",c);
		}

		if(c == -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando aqui.");

	    switch(listitem)
	    {
	        case 0: // Editar Posição
	        {
				new FurniID = VendoFurniList[playerid][0];
				if(IsPlayerInRangeOfPoint(playerid, 10.0, FurniInfo[FurniID][mX], FurniInfo[FurniID][mY], FurniInfo[FurniID][mZ]))
    			{
    			    SetPVarInt(playerid, "ComprandoNovoMovel", 0);
					PlayerInfo[playerid][pEditMovel] = FurniID;
					EditDynamicObject(playerid, FurniInfo[FurniID][mObjeto]);
				}
				else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo deste móvel.");
			}
			case 1: // Editar Nome
			{
				Dialog_Show(playerid, DIALOG_F_MOVEIS4, DIALOG_STYLE_INPUT, strCasa, "Digite o nome que você deseja dar ao seu móvel:", "Salvar", "Cancelar");
			}
			case 2:// Textura
			{
			    Movel_AbrirDialogTexturas(playerid);
				TexturaEdit[playerid] = 1;
			}
			case 3:// Textura 2
			{
			    Movel_AbrirDialogTexturas(playerid);
			    TexturaEdit[playerid] = 2;
			}
			case 4: // Deletar
			{
			    new ItemID = VendoFurniList[playerid][0];

			    if (IsValidDynamicObject(FurniInfo[ItemID][mObjeto]))
    				DestroyDynamicObject(FurniInfo[ItemID][mObjeto]);

			    DeletandoMovel(playerid, ItemID);
			    return 1;
			}
	    }
		return 1;
	}
}
Dialog:DIALOG_F_MOVEIS4(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new c, strCasa[32];

 		if(PlayerInfo[playerid][pEntrouCasa] != -1)
		{
			c = PlayerInfo[playerid][pEntrouCasa];
			format(strCasa,sizeof(strCasa),"[Furniture] Casa: %d",c);
		}
		else if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
		{
			c = PlayerInfo[playerid][pEntrouEmpresa];
			format(strCasa,sizeof(strCasa),"[Furniture] Empresa: %d",c);
		}
   		else if(PlayerInfo[playerid][pEntrouComplexo] != -1)
		{
			c = PlayerInfo[playerid][pEntrouComplexo];
			format(strCasa,sizeof(strCasa),"[Furniture] Complexo: %d",c);
		}
		else if(PlayerInfo[playerid][pEntrouGaragem] != -1)
		{
			c = PlayerInfo[playerid][pEntrouGaragem];
			format(strCasa,sizeof(strCasa),"[Furniture] Garagem: %d",c);
		}

	    new FurniID = VendoFurniList[playerid][0];
	    if(strlen(inputtext) < 24)
		{
            if(strfind(inputtext, "'") != -1)
			{
			    Dialog_Show(playerid, DIALOG_F_MOVEIS4, DIALOG_STYLE_INPUT, strCasa, "Digite o nome que você deseja dar ao seu móvel:", "Salvar", "Cancelar");
		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, "ERRO:{FFFFFF} Você não pode colocar caracteres especiais no nome do móvel.");
		    	return 1;
			}
		   	strmid(FurniInfo[FurniID][mFurniNome], inputtext, 0, strlen(inputtext), 255);
		   	SCM(playerid, COLOR_LIGHTGREEN, "[Furniture] Nome do móvel editado com sucesso.");
		   	SalvarMovel(FurniID);
		   	return 1;
		}
		else
		{
		    Dialog_Show(playerid, DIALOG_F_MOVEIS4, DIALOG_STYLE_INPUT, strCasa, "Digite o nome que você deseja dar ao seu móvel:\n (Limite de 24 Characters)", "Salvar", "Cancelar");
		}
	}
	return 1;
}
CMD:comprar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(VendoCasa[playerid] != 9999)
    {
        if(HouseInfo[VendoCasa[playerid]][hCriada])
		{
 			if(IsPlayerInRangeOfPoint(playerid, 1, HouseInfo[VendoCasa[playerid]][hExX], HouseInfo[VendoCasa[playerid]][hExY], HouseInfo[VendoCasa[playerid]][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[VendoCasa[playerid]][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[VendoCasa[playerid]][hExInt])
   			{
   			    if(HouseInfo[VendoCasa[playerid]][hAVenda])
   			    {
   			        if(GetPlayerMoneyCA(playerid) >= HouseInfo[VendoCasa[playerid]][hPreco])
   			        {
   			            format(string, sizeof(string), "Você tem certeza que gostaria de comprar a casa %d por R$%d.", VendoCasa[playerid], HouseInfo[VendoCasa[playerid]][hPreco]);
	     				Dialog_Show(playerid, ConfirmaCompraCasa, DIALOG_STYLE_MSGBOX, "Confirmação de Compra", string, "Comprar", "Cancelar");
	     				return 1;
   			        }
   			        else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro suficiente para comprar esta casa.");
   			    }
   			    else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta casa não está a venda.");
   			}
		}
	}
	if(VendoGaragem[playerid] != 9999)
    {
        if(GaragemInfo[VendoGaragem[playerid]][hCriada])
		{
 			if(IsPlayerInRangeOfPoint(playerid, 1, GaragemInfo[VendoGaragem[playerid]][hExX], GaragemInfo[VendoGaragem[playerid]][hExY], GaragemInfo[VendoGaragem[playerid]][hExZ]) && GetPlayerVirtualWorld(playerid) == GaragemInfo[VendoGaragem[playerid]][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[VendoGaragem[playerid]][hExInt])
   			{
   			    if(GaragemInfo[VendoGaragem[playerid]][hAVenda] && GaragemInfo[VendoGaragem[playerid]][hTipo] == 0)
   			    {
   			        if(GetPlayerMoneyCA(playerid) >= GaragemInfo[VendoGaragem[playerid]][hPreco])
   			        {
   			            format(string, sizeof(string), "Você tem certeza que gostaria de comprar a garagem %d por R$%d.", VendoGaragem[playerid], GaragemInfo[VendoGaragem[playerid]][hPreco]);
	     				Dialog_Show(playerid, ConfirmaCompraGaragem, DIALOG_STYLE_MSGBOX, "Confirmação de Compra", string, "Comprar", "Cancelar");
	     				return 1;
   			        }
   			        else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro suficiente para comprar esta garagem.");
   			    }
   			    else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta garagem não está a venda.");
   			}
		}
	}
	if(VendoComplexo[playerid] != 9999)
    {
        if(ComplexoInfo[VendoComplexo[playerid]][cCriada])
		{
 			if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[VendoComplexo[playerid]][cExX], ComplexoInfo[VendoComplexo[playerid]][cExY], ComplexoInfo[VendoComplexo[playerid]][cExZ]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
   			{
   			    if(ComplexoInfo[VendoComplexo[playerid]][cAVenda])
   			    {
   			        if(GetPlayerMoneyCA(playerid) >= ComplexoInfo[VendoComplexo[playerid]][cPreco])
   			        {
   			            format(string, sizeof(string), "Você tem certeza que gostaria de comprar o complexo %d por R$%d.", VendoComplexo[playerid], ComplexoInfo[VendoComplexo[playerid]][cPreco]);
	     				Dialog_Show(playerid, ConfirmaCompraComplexo, DIALOG_STYLE_MSGBOX, "Confirmação de Compra", string, "Comprar", "Cancelar");
	     				return 1;
   			        }
   			        else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro suficiente para comprar este complexo.");
   			    }
   			    else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este complexo não está a venda.");
   			}
		}
	}
	if(VendoEmpresa[playerid] != 9999)
    {
        if(EmpInfo[VendoEmpresa[playerid]][eCriada])
		{
 			if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[VendoEmpresa[playerid]][eExX], EmpInfo[VendoEmpresa[playerid]][eExY], EmpInfo[VendoEmpresa[playerid]][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[VendoEmpresa[playerid]][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[VendoEmpresa[playerid]][eExInt])
   			{
   			    if(EmpInfo[VendoEmpresa[playerid]][eAVenda])
   			    {
   			        if(GetPlayerMoneyCA(playerid) >= EmpInfo[VendoEmpresa[playerid]][ePreco])
   			        {
						if(EmpInfo[VendoEmpresa[playerid]][eLeasing] > 0)
						    format(string, sizeof(string), "Você tem certeza que gostaria de alugar a empresa %s (%d) por R$%d semanais?", EmpInfo[VendoEmpresa[playerid]][eNome], VendoEmpresa[playerid], EmpInfo[VendoEmpresa[playerid]][eLeasing]);
						else
   			            	format(string, sizeof(string), "Você tem certeza que gostaria de comprar a empresa %s (%d) por R$%d.", EmpInfo[VendoEmpresa[playerid]][eNome], VendoEmpresa[playerid], EmpInfo[VendoEmpresa[playerid]][ePreco]);
	     				Dialog_Show(playerid, ConfirmaCompraEmpresa, DIALOG_STYLE_MSGBOX, "Confirmação", string, "Comprar", "Cancelar");
	     				return 1;
   			        }
   			        else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro suficiente para comprar esta empresa.");
   			    }
   			    else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta empresa não está a venda.");
   			}
		}
	}
	// [ :comprar ] /comprar das empresas <<<<
	new NaEmpresa = PlayerInfo[playerid][pEntrouEmpresa];
	if(NaEmpresa != -1)
	{
	    new empNome[24];
	    format(empNome, sizeof(empNome), "Produtos - %s", EmpInfo[NaEmpresa][eNome]);

		switch(EmpInfo[NaEmpresa][eTipo])
		{
		    case EMP_TIPO_CONCE:
		    {
		        Dialog_Show(playerid, DIALOG_CONCE, DIALOG_STYLE_LIST, "Selecione uma categoria.", "Bicicletas/motos\nPopular\nUtilitários\nEsportivos\nTrailers\nBarcos", "Selecionar", "Cancelar");
		    }
			case EMP_TIPO_CONCE_5:
			{
				if(PlayerInfo[playerid][pAdmin] > 0)
				{
					ShowModelSelectionMenu(playerid, "CONCESSIONÁRIA", MODEL_SELECTION_CONCE_5, CONCE_PUB, sizeof(CONCE_PUB), -16.0, 0.0, -55.0);
					SetPVarInt(playerid, "TaNaConce", 1);
					return 1;
				}
			}
			case EMP_TIPO_CONCE_NEW:
			{
			    new string_conce[2056];
			    format(string_conce, sizeof(string_conce),"461\nR$%d\n462\nR$%d\n463\nR$%d\n468\nR$%d\n471\nR$%d\n521\nR$%d\n581\nR$%d\n586\nR$%d\n481\nR$%d\n509\nR$%d\n510\nR$%d",
					GetVehiclePrice(461),
					GetVehiclePrice(462),
					GetVehiclePrice(463),
					GetVehiclePrice(468),
					GetVehiclePrice(471),
					GetVehiclePrice(521),
					GetVehiclePrice(581),
					GetVehiclePrice(586),
					GetVehiclePrice(481),
					GetVehiclePrice(509),
					GetVehiclePrice(510));

  				ShowPlayerDialog(playerid, DIALOG_TESTCONCEN, DIALOG_STYLE_PREVMODEL, "CONCESSIONÁRIA", string_conce, "COMPRAR", "CANCELAR");
  				SetPVarInt(playerid, "TaNaConce", 1);
			}
			case EMP_TIPO_ROUPAS:
			{
			    Dialog_Show(playerid, DIALOGLJROUPAS, DIALOG_STYLE_LIST, empNome, "Roupas\nNovas Skins\nÓculos\nChapéus\nMascaras/Bandanas\nOutros\nRelógios", "Selecionar", "Cancelar");
			}
			case EMP_TIPO_247:
			{
			    format(string, sizeof(string), "Item \t Preço \nCelular \t R$%d\nGalão \t R$%d\nCaixa de Ferramentas \t R$%d\nCigarro \t R$%d\nRadio \t R$%d\nCâmera \t R$%d\nLanche \t R$%d\nMascara \t R$%d\nBoombox \t R$%d\nCerveja \t R$%d\nLata de Spray \t R$50",
				EmpInfo[NaEmpresa][eCelularPreco],
				EmpInfo[NaEmpresa][eGalaoPreco],
				EmpInfo[NaEmpresa][eToolkitPreco],
				EmpInfo[NaEmpresa][eCigarroPreco],
				EmpInfo[NaEmpresa][eRadioPreco],
				EmpInfo[NaEmpresa][eCameraPreco],
				EmpInfo[NaEmpresa][eLanchePreco],
				EmpInfo[NaEmpresa][eMascPreco],
				EmpInfo[NaEmpresa][eBoomboxPreco],
				EmpInfo[NaEmpresa][eCervejaPreco]);
			    Dialog_Show(playerid, DIALOG_247, DIALOG_STYLE_TABLIST_HEADERS, empNome, string, "Selecionar", "Cancelar");
			}
			case EMP_TIPO_PAWN:
			{
   				Dialog_Show(playerid, DIALOG_PAWNSHOP, DIALOG_STYLE_TABLIST_HEADERS, empNome, "Produto\tPreço\nSoco Inglês\tR$300\nBastão\tR$300\nFaca\tR$2500\nPá\tR$400\nCane\tR$400\nTaco de Golfe\tR$350\n1x Raspador\tR$2000\nVender Peças", "Selecionar", "Cancelar");
			}
			case EMP_TIPO_BURGERSHOT:
			{
   				Dialog_Show(playerid, DIALOG_BURGERSHOT, DIALOG_STYLE_TABLIST_HEADERS, empNome, "Produto\tPreço\nX-Burguer\tR$5\nX-Egg\tR$6\nX-Baccon\tR$6\nX-Salada\tR$4\nX-Tudo\tR$10\nSprunk\tR$5", "Selecionar", "Cancelar");
			}
            case EMP_TIPO_STACKED:
			{
   				Dialog_Show(playerid, DIALOG_STACKED, DIALOG_STYLE_TABLIST_HEADERS, empNome, "Produto\tPreço\nPizza Pequena\tR$8\nPizza + Refri\tR$12\nCombo Completo\tR$18", "Selecionar", "Cancelar");
			}
			case EMP_TIPO_CLUCKIN:
			{
   				Dialog_Show(playerid, DIALOG_CLUCKIN, DIALOG_STYLE_TABLIST_HEADERS, empNome, "Produto\tPreço\nCluckin Little Meal\tR$8\nCluckin Big Meal\tR$12\nCluckin Huge Meal\tR$18", "Selecionar", "Cancelar");
			}
			case EMP_TIPO_BAR:
			{
			    Dialog_Show(playerid, DIALOG_BARSHOP, DIALOG_STYLE_TABLIST_HEADERS, empNome, "Produto\tPreço\nCerveja\tR$5\nVinho\tR$6\nSprunk\tR$2", "Selecionar", "Cancelar");
			}
			case EMP_TIPO_AMMU:
			{
   			 {
       			 if(PlayerInfo[playerid][pWepLic] == 1)
       			 {
					Dialog_Show(playerid, DIALOG_AMMUNATION, DIALOG_STYLE_LIST, "Selecione um item.", "Colt 45\tR$6000\nSilenced\tR$6000\nDeagle\tR$6000\nShotgun\tR$15000\nMunição 9mm\tR$25\nMunição 12 CBC\tR$50", "Selecionar", "Cancelar");
       			 }
					else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem uma licença de armas tipo: A.");
				}
			}
            case EMP_TIPO_CEL:
            {
                ShowPlayerDialog(playerid, EMP_TIPO_EMP_CELULAR, DIALOG_STYLE_PREVMODEL, "CELULARES", "330\nR$50\n18874\nR$100\n18873\nR$100\n18872\nR$100\n18871\nR$100\n18870\nR$100\n18869\nR$100\n18868\nR$100\n18867\nR$100\n18866\nR$100\n19513\nR$100\n18865\nR$150", "COMPRAR", "CANCELAR");
            }
			case EMP_TIPO_FARMACIA:
			{
			    Dialog_Show(playerid, Dialog_Farmacia, DIALOG_STYLE_TABLIST_HEADERS, "FARMÁCIA", "Produto\tPreço\nPreçoCortador de remédio\tR$50\nEfedrina\tR$250\nAcido cloridrico\tR$300\nLidocaína\tR$50\nBenzocaína\tR$50\nHidroxizina\tR$50", "Selecionar", "Cancelar");
			}
        }
    }
	if(IsPlayerInRangeOfPoint(playerid, 5, 2532.0464,-1916.4795,13.5480))
	{
	    Dialog_Show(playerid, DIALOG_BARSHOP_Rua, DIALOG_STYLE_LIST, "Selecione uma categoria.", "Cerveja\tR$5\nVinho\tR$6\nSprunk\tR$2", "Selecionar", "Cancelar");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, 2532.0464,-1916.4795,13.5480))
	{
	    Dialog_Show(playerid, DIALOGJOIAS, DIALOG_STYLE_TABLIST_HEADERS, "JOALHERIA", "Produto\tPreço\nRelógios", "Selecionar", "Cancelar");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, 1917.8755,-1776.0514,13.6094)) //comprar 24/7
	{
		Dialog_Show(playerid, Dialog_247Rua, DIALOG_STYLE_TABLIST_HEADERS, "24/7", "Produto\tPreço\n\
		{878787}ELETRÔNICOS\n\
		Celular\tR$120\n\
		Radio\tR$190\n\
		Câmera\tR$50\n\
		Boombox\tR$140\n\
		{878787}VARIADOS\n\
		Galão\tR$50\n\
		Caixa de Ferramentas\tR$180\n\
		Cigarro\tR$8\n\
		Mascara\tR$500\n\
		Lata de Spray\tR$50\n\
		{878787}BEBIDAS E COMIDA\n\
		Lata de Spray\tR$50\n\
		Pizza Pequena\tR$8\n\
		Pizza + Refri\tR$12\n\
		Combo Completo\tR$18 \
		", "Comprar", "Cancelar");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5,  1488.6760,-1721.4026,8.2160))
	{	
		Dialog_Show(playerid, Dialog_Bomba, DIALOG_STYLE_TABLIST_HEADERS, "Loja de Bombas", "Produto\tPreço\n1x Dinamite [R$200]\n1x C4 [R$400]\n1x TNT [R$800]", "Comprar", "Cancelar");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, 2114.7300,-1806.5607,13.5616)) //Stacked aberta
	{
	    Dialog_Show(playerid, DIALOG_STACKEDRua, DIALOG_STYLE_TABLIST_HEADERS, "STACKED", "Produto\tPreço\nPizza Pequena\tR$8\nPizza + Refri\tR$12\nCombo Completo\tR$18", "Selecionar", "Cancelar");
	}
	return 1;
}
Dialog:DIALOGJOIAS(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
 		switch(listitem)
 		{
      		case 0: ShowModelSelectionMenu(playerid, "Relogios", MODEL_SELECTION_RELOGIOS, LOJA_RELOGIOS, sizeof(LOJA_RELOGIOS), 16.0, 0.0, 55.0);
 		}
	}
	return 1;
}
Dialog:Dialog_Bomba(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
		switch(listitem)
		{
		    case 0:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 200)
				{
					PlayerInfo[playerid][pBomba]++;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Bombas] Você comprou uma dinamite por R$200.");
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-200;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não tem dinheiro suficiente.");
            }
		    case 1:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 400)
				{
					PlayerInfo[playerid][pC4]++;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Bombas] Você comprou uma C4 por R$400.");
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-400;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não tem dinheiro o suficiente.");
            }
		    case 2:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 800)
				{
					PlayerInfo[playerid][pTNT]++;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Bombas] Você comprou uma C4 por R$800.");
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-800;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não tem dinheiro o suficiente.");
            }
        }
	}
	return 1;
}
Dialog:Dialog_Farmacia(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
		switch(listitem)
		{
			case 0:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 50)
		        {
		 		    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Cortador/triturador de comprimido comprado.");
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

 					PlayerInfo[playerid][pCortaRem] += 1;
					
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-50;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 1:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 250)
		        {
		
		 		    SendClientMessage(playerid,COLOR_LIGHTGREEN,"1 caixa de Efedrina comprado (15 comprimidos).");
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

 					PlayerDroga[playerid][Efedrina] += 15;
					
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-250;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 2:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 300)
		        {
		 		    SendClientMessage(playerid,COLOR_LIGHTGREEN,"20ml de Ácido cloridrico comprado.");
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

 					PlayerDroga[playerid][Acloridrico] += 20;
					
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-300;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 3:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 50)
		        {
		 		    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Lidocaína comprado com sucesso (20 comprimidos).");
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

 					PlayerDroga[playerid][LDC] += 20;
					
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-50;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 4:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 50)
		        {
		 		    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Benzocaína comprado com sucesso (20 comprimidos).");
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

 					PlayerDroga[playerid][BZC] += 20;
					
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-50;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 5:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 50)
		        {
		 		    SendClientMessage(playerid,COLOR_LIGHTGREEN,"hidroxizina comprado com sucesso (20 comprimidos).");
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

 					PlayerDroga[playerid][HDZ] += 20;
					
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-50;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
		}
	}
	return 1;
}

Dialog:Dialog_247Rua(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
		switch(listitem)
		{
		    case 0:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 1200000)
				{
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-1200000;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
		    case 1:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 120)
				{
	 		        if(CelularData[playerid][celNumero] != 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem um celular.");
		 		    new randphone = 100000 + random(800000);

					randphone = randphone+PlayerInfo[playerid][pID];

		 		    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Celular comprado. (/ajudacelular)");
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

		 		    CelularData[playerid][celModo] = 1;
		 		    CelularData[playerid][celNumero] = randphone;
		 		    CelularData[playerid][celModelo] = 330;

					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-120;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 2:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 190)
		        {
					if(PlayerInfo[playerid][pRadio] != 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem um Rádio Comunicador.");
		 		    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Rádio Comunicador comprado (/ajudaradio)");
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

 					PlayerInfo[playerid][pRadio] = 1;
					
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-190;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 3:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 50)
		        {
					if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem uma arma em mãos (/ga).");
		 		    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Camêra comprado.");
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

 					EntregandoArmaSQL(playerid, 43, 0, 0, 0);
					
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-50;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 4:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 140)
		        {
					if(PlayerInfo[playerid][pBoombox] != 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem uma JBL.");
		 		    SendClientMessage(playerid,COLOR_LIGHTGREEN,"JBL comprado. (/boombox)");
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

 					PlayerInfo[playerid][pBoombox] = 1;
					
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-140;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
		    case 5:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 1200000)
				{
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-1200000;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 6:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 50)
		        {
					if(PlayerInfo[playerid][pGalao] != 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem um galão.");
		 		    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Galão de Gasolina comprado. (/galao)");
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

 					PlayerInfo[playerid][pGalao] += 1;
					
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-50;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 7:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 180)
		        {
					if(PlayerInfo[playerid][pToolKit] != 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem uma caixa de ferramentas.");
		 		    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Caixa de ferramentas comprada.");
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

 					PlayerInfo[playerid][pToolKit] = 1;
					
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-180;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 8:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 8)
		        {
					if(PlayerInfo[playerid][pCigarros] != 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem um galão.");
		 		    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Maço de cigarro comprado [20 unidades de cigarro].");
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

 					PlayerInfo[playerid][pCigarros] += 20;
					
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-8;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 9:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 500)
		        {
                    if(PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você precisa de TC5 para comprar uma mascara.");
					if(PlayerInfo[playerid][pMascara] != 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem uma mascara.");
		 		    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Mascara comprada. (/mascara)");
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

 					PlayerInfo[playerid][pMascara] = 1;
					
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-500;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 10:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 50)
		        {
		 		    if(PlayerInfo[playerid][pLevel] < 10) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa ser TC10 para comprar uma lata de spray.");
					if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
					EntregandoArmaSQL(playerid, 41, 0, 0, 0);

		 		    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Lata de spray comprada.");
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-50;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 11:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 1200000)
				{
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-1200000;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
		    case 12:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 8)
				{
		 		    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		    ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

					SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Pizza Pequena.");
					PlayerInfo[playerid][pGrana] -= 8;

				    PlayerInfo[playerid][pFome] += 20;
				    PlayerInfo[playerid][pSede] += 20;

				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
 		    case 13:
 		    {
 		        if(PlayerInfo[playerid][pGrana] >= 12)
 		        {
					SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Pizza + Refri.");
				    PlayerInfo[playerid][pGrana] -= 12;

				    PlayerInfo[playerid][pFome] += 30;
				    PlayerInfo[playerid][pSede] += 30;

				    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
				    return 1;
				}
 		    }
 		    case 14:
 		    {
 		        if(PlayerInfo[playerid][pGrana] >= 18)
 		        {
					SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou um Combo Completo.");
					PlayerInfo[playerid][pGrana] -= 18;

					PlayerInfo[playerid][pFome] += 100;
					PlayerInfo[playerid][pSede] += 100;

					PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
					return 1;
				}
	 		}
		}
	}
	return 1;
}

Dialog:DIALOG_STACKEDRua(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
 		switch(listitem)
	 	{
	 		case 0:
	 		{
	 		    if(PlayerInfo[playerid][pGrana] >= 8)
	 		    {
					SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Pizza Pequena.");
					PlayerInfo[playerid][pGrana] -= 8;

				    PlayerInfo[playerid][pFome] += 20;
				    PlayerInfo[playerid][pSede] += 20;

				    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
				    return 1;
				}
 		    }
 		    case 1:
 		    {
 		        if(PlayerInfo[playerid][pGrana] >= 12)
 		        {
					SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Pizza + Refri.");
				    PlayerInfo[playerid][pGrana] -= 12;

				    PlayerInfo[playerid][pFome] += 30;
				    PlayerInfo[playerid][pSede] += 30;

				    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
				    return 1;
				}
 		    }
 		    case 2:
 		    {
 		        if(PlayerInfo[playerid][pGrana] >= 18)
 		        {
					SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou um Combo Completo.");
					PlayerInfo[playerid][pGrana] -= 18;

					PlayerInfo[playerid][pFome] += 100;
					PlayerInfo[playerid][pSede] += 100;

					return 1;
				}
	 		}
		}	
	}
	return 1;
}
Dialog:DIALOG_AMMUNATION(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
 			switch(listitem)
	 		{
	 		    case 0:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 5000)
	 		        {
                		if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
					    EntregandoArmaSQL(playerid, 22, 0, 1, 0);

						SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Colt 45.");
	     				PlayerInfo[playerid][pGrana] -= 5000;
					}
				}
				case 1:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 6000)
	 		        {
               			if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
    			  		EntregandoArmaSQL(playerid, 23, 0, 1, 0);

						SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Silenced.");
					    PlayerInfo[playerid][pGrana] -= 6000;
					}
				}
				case 2:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 6000)
	 		        {
                		if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
					    EntregandoArmaSQL(playerid, 24, 0, 1, 0);

						SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Desert Eagle.");
	     				PlayerInfo[playerid][pGrana] -= 6000;
					}
				}
				case 3:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 15000)
	 		        {
	     				if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
					    EntregandoArmaSQL(playerid, 25, 0, 1, 0);

						SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Shotgun.");
	     				PlayerInfo[playerid][pGrana] -= 15000;
					}
				}
				case 4:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 25)
	 		        {
	     				PlayerInfo[playerid][pMun9mm] += 60;

						SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou 60 munições 9mm.");
	     				PlayerInfo[playerid][pGrana] -= 25;
					}
				}
				case 5:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 50)
	 		        {
	     				PlayerInfo[playerid][pMun127] += 60;

						SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou 60 munições calibre 12 CBC.");
	     				PlayerInfo[playerid][pGrana] -= 50;
					}
				}
		    }
	}
	return 1;
}

Dialog:DIALOG_BARSHOP_Rua(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
 			switch(listitem)
	 		{
	 		    case 0:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 5)
	 		        {
						if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_BEER) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem uma cerveja em sua mão.");
	     				SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma cerveja.");
	     				PlayerInfo[playerid][pGrana] -= 5;
	      				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
					}
				}
				case 1:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 6)
	 		        {
						if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_WINE) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem um vinho em sua mão.");
	     				SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou um vinho.");
	     				PlayerInfo[playerid][pGrana] -= 6;
	      				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
					}
				}
				case 2:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 2)
	 		        {
						if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_WINE) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem uma Sprunk em sua mão.");
	     				SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Sprunk.");
	     				PlayerInfo[playerid][pGrana] -= 2;
	      				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
					}
				}
		    }
	}
	return 1;
}

Dialog:DIALOG_BARSHOP(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    new NaEmpresa = PlayerInfo[playerid][pEntrouEmpresa];
	    if(EmpInfo[NaEmpresa][eProdutos] <= 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta empresa está sem produtos no momento, volte mais tarde.");

		if(NaEmpresa != -1)
		{
		    switch(listitem)
	 		{
	 		    case 0:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 5)
	 		        {
						if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_BEER) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem uma cerveja em sua mão.");
	     				SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma cerveja.");
	     				PlayerInfo[playerid][pGrana] -= 3;
	     				EmpInfo[NaEmpresa][eBank]+=3;
	     				EmpInfo[NaEmpresa][eProdutos]-=1;
	      				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
					}
				}
				case 1:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 6)
	 		        {
						if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_WINE) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem um vinho em sua mão.");
	     				SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou um vinho.");
	     				PlayerInfo[playerid][pGrana] -= 6;
	     				EmpInfo[NaEmpresa][eBank]+=6;
	     				EmpInfo[NaEmpresa][eProdutos]-=1;
	      				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
					}
				}
				case 2:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 2)
	 		        {
						if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_WINE) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem uma Sprunk em sua mão.");
	     				SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Sprunk.");
	     				PlayerInfo[playerid][pGrana] -= 2;
	     				EmpInfo[NaEmpresa][eBank]+=2;
	     				EmpInfo[NaEmpresa][eProdutos]-=1;
	      				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
					}
				}
		    }
		}
	}
	return 1;
}

Dialog:DIALOG_CONCE(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new NaEmpresa = PlayerInfo[playerid][pEntrouEmpresa];
		if(NaEmpresa != -1)
		{
		    switch(listitem)
	 		{
	 		    case 0: ShowModelSelectionMenu(playerid, "CONCESSIONÁRIA", MODEL_SELECTION_CONCE_4, CONCE_MOTOS, sizeof(CONCE_MOTOS), -16.0, 0.0, -55.0);
				case 1: ShowModelSelectionMenu(playerid, "CONCESSIONÁRIA", MODEL_SELECTION_CONCE_1, CONCE_SALLON, sizeof(CONCE_SALLON), -16.0, 0.0, -55.0);
				case 2: ShowModelSelectionMenu(playerid, "CONCESSIONÁRIA", MODEL_SELECTION_CONCE_0, CONCE_UTILITARIOS, sizeof(CONCE_UTILITARIOS), -16.0, 0.0, -55.0);
				case 3: ShowModelSelectionMenu(playerid, "CONCESSIONÁRIA", MODEL_SELECTION_CONCE_3, CONCE_LUXO, sizeof(CONCE_LUXO), -16.0, 0.0, -55.0);
				case 4: ShowModelSelectionMenu(playerid, "CONCESSIONÁRIA", MODEL_SELECTION_CONCE_2, CONCE_TRAILERS, sizeof(CONCE_TRAILERS), -16.0, 0.0, -55.0);
				case 5: ShowModelSelectionMenu(playerid, "CONCESSIONÁRIA", MODEL_SELECTION_CONCE_6, CONCE_BARCOS, sizeof(CONCE_BARCOS), -16.0, 0.0, -55.0);
			}
			SetPVarInt(playerid, "TaNaConce", 1);
		}
	}
	return 1;
}

Dialog:EMP_TIPO_CLUCKIN(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new NaEmpresa = PlayerInfo[playerid][pEntrouEmpresa];
	    if(EmpInfo[NaEmpresa][eProdutos] <= 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta empresa está sem produtos no momento, volte mais tarde.");

		if(NaEmpresa != -1)
		{
		    switch(listitem)
	 		{
	 		    case 0:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 8)
	 		        {
						SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou um Cluckin Little Meal.");
					    PlayerInfo[playerid][pGrana] -= 8;

					    PlayerInfo[playerid][pFome] += 20;
					    PlayerInfo[playerid][pSede] += 20;

					    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);

		 		        EmpInfo[NaEmpresa][eBank]+=8;
                        EmpInfo[NaEmpresa][eProdutos]-=1;
						updateTextDrawFomeSede(playerid);
					    return 1;
					}
	 		    }
	 		    case 1:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 12)
	 		        {
						SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou um Cluckin Big Meal.");
					    PlayerInfo[playerid][pGrana] -= 12;

					    PlayerInfo[playerid][pFome] += 40;
					    PlayerInfo[playerid][pSede] += 40;

					    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);

		 		        EmpInfo[NaEmpresa][eBank]+=12;
                        EmpInfo[NaEmpresa][eProdutos]-=1;
						updateTextDrawFomeSede(playerid);
					    return 1;
					}
	 		    }
	 		    case 2:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 18)
	 		        {
						SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou um Cluckin Huge Meal.");
					    PlayerInfo[playerid][pGrana] -= 18;

					    PlayerInfo[playerid][pFome] += 100;
					    PlayerInfo[playerid][pSede] += 100;

					    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);

		 		        EmpInfo[NaEmpresa][eBank]+=18;
                        EmpInfo[NaEmpresa][eProdutos]-=1;
		 		        updateTextDrawFomeSede(playerid);
					    return 1;
					}
	 		    }
			}
		   
		}
	}
	return 1;
}
Dialog:DIALOG_STACKED(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new NaEmpresa = PlayerInfo[playerid][pEntrouEmpresa];
	    if(EmpInfo[NaEmpresa][eProdutos] <= 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta empresa está sem produtos no momento, volte mais tarde.");

		if(NaEmpresa != -1)
		{
		    switch(listitem)
	 		{
	 		    case 0:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 8)
	 		        {
						SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Pizza Pequena.");
					    PlayerInfo[playerid][pGrana] -= 8;
					    PlayerInfo[playerid][pFome] += 20;
					    PlayerInfo[playerid][pSede] += 20;
					    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		        EmpInfo[NaEmpresa][eBank]+=8;
                        EmpInfo[NaEmpresa][eProdutos]-=1;
						updateTextDrawFomeSede(playerid);
					    return 1;
					}
	 		    }
	 		    case 1:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 12)
	 		        {
						SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Pizza + Refri.");
					    PlayerInfo[playerid][pGrana] -= 12;
					    PlayerInfo[playerid][pFome] += 30;
					    PlayerInfo[playerid][pSede] += 30;
					    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		        EmpInfo[NaEmpresa][eBank]+=12;
                        EmpInfo[NaEmpresa][eProdutos]-=1;
						updateTextDrawFomeSede(playerid);
					    return 1;
					}
	 		    }
	 		    case 2:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 18)
	 		        {
						SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou um Combo Completo.");
					    PlayerInfo[playerid][pGrana] -= 18;
					    PlayerInfo[playerid][pFome] += 100;
					    PlayerInfo[playerid][pSede] += 100;
					    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		        EmpInfo[NaEmpresa][eBank]+=18;
                        EmpInfo[NaEmpresa][eProdutos]-=1;
						updateTextDrawFomeSede(playerid);
					    return 1;
					}
	 		    }
			}
			
		}
	}
	return 1;
}

Dialog:DIALOG_BURGERSHOT(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new NaEmpresa = PlayerInfo[playerid][pEntrouEmpresa];
	    if(EmpInfo[NaEmpresa][eProdutos] <= 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta empresa está sem produtos no momento, volte mais tarde.");

		if(NaEmpresa != -1)
		{
		    switch(listitem)
	 		{
	 		    case 0:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 5)
	 		        {
						SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou um X-Burguer.");
					    PlayerInfo[playerid][pGrana] -= 5;

					    PlayerInfo[playerid][pFome] += 20;
					    PlayerInfo[playerid][pSede] += 20;

					    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);

		 		        EmpInfo[NaEmpresa][eBank]+=5;
                        EmpInfo[NaEmpresa][eProdutos]-=1;
						updateTextDrawFomeSede(playerid);
					    return 1;
					}
	 		    }
	 		    case 1:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 6)
	 		        {

					    PlayerInfo[playerid][pFome] += 40;
					    PlayerInfo[playerid][pSede] += 40;

					    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
						updateTextDrawFomeSede(playerid);
		 		        EmpInfo[NaEmpresa][eBank]+=6;
		 		        EmpInfo[NaEmpresa][eProdutos]-=1;
					    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou um X-Egg.");
					    PlayerInfo[playerid][pGrana] -= 6;
					    return 1;
					}
	 		    }
	 		    case 2:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 6)
	 		        {
					    PlayerInfo[playerid][pFome] += 50;
					    PlayerInfo[playerid][pSede] += 50;

					    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
						updateTextDrawFomeSede(playerid);

		 		        EmpInfo[NaEmpresa][eBank]+=6;
                        EmpInfo[NaEmpresa][eProdutos]-=1;
					    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma X-Baccon.");
					    PlayerInfo[playerid][pGrana] -= 6;
					    return 1;
					}
				}
				case 3:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 4)
	 		        {
					    PlayerInfo[playerid][pFome] += 50;
					    PlayerInfo[playerid][pSede] += 50;
					    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);


		 		        EmpInfo[NaEmpresa][eBank]+=4;
                        EmpInfo[NaEmpresa][eProdutos]-=1;
					    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma X-Salada.");
					    PlayerInfo[playerid][pGrana] -= 4;
						updateTextDrawFomeSede(playerid);
					    return 1;
					}
				}
				case 4:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 10)
	 		        {
					    PlayerInfo[playerid][pFome] += 60;
					    PlayerInfo[playerid][pSede] += 60;
					    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);

		 		        EmpInfo[NaEmpresa][eBank]+=10;
					    EmpInfo[NaEmpresa][eProdutos]-=1;
					    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou um X-Tudo.");
					    PlayerInfo[playerid][pGrana] -= 10;
						updateTextDrawFomeSede(playerid);
					    return 1;
					}
				}
				case 5:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 5)
	 		        {
					    PlayerInfo[playerid][pFome] += 100;
					    PlayerInfo[playerid][pSede] -= 20;
					    PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
						if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem uma cerveja em sua mão.");
	     				SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma cerveja.");
	     				PlayerInfo[playerid][pGrana] -= 5;
	     				EmpInfo[NaEmpresa][eBank]+=10;
	     				EmpInfo[NaEmpresa][eProdutos]-=1;
	     				ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);
	      				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
						updateTextDrawFomeSede(playerid);
					}
				}
			}
			
 		}
	}
	return 1;
}

Dialog:DIALOG_PAWNSHOP(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new NaEmpresa = PlayerInfo[playerid][pEntrouEmpresa];
	    if(EmpInfo[NaEmpresa][eProdutos] <= 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta empresa está sem produtos no momento, volte mais tarde.");

		if(NaEmpresa != -1)
		{
		    switch(listitem)
	 		{
	 		    case 0:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 300)
	 		        {
  					    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
					    EntregandoArmaSQL(playerid, 1, 0, 0, 0);
					    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou um Soco Inglês.");
					    PlayerInfo[playerid][pGrana] -= 300;
					    EmpInfo[NaEmpresa][eBank]+=300;
					    EmpInfo[NaEmpresa][eProdutos]-=1;
					    return 1;
					}
	 		    }
	 		    case 1:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 300)
	 		        {
                        if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
					    EntregandoArmaSQL(playerid, 5, 0, 0, 0);
					    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou um Bastão de Baseball.");
					    PlayerInfo[playerid][pGrana] -= 300;
					    EmpInfo[NaEmpresa][eBank]+=300;
					    EmpInfo[NaEmpresa][eProdutos]-=1;
					    return 1;
					}
	 		    }
	 		    case 2:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 2500)
	 		        {
	 		            if(PlayerInfo[playerid][pLevel] < 5) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 5 ou mais para comprar uma faca.");
     				    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
					    EntregandoArmaSQL(playerid, 4, 0, 0, 0);
					    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Faca.");
					    PlayerInfo[playerid][pGrana] -= 2500;
					    EmpInfo[NaEmpresa][eBank]+=2500;
					    EmpInfo[NaEmpresa][eProdutos]-=1;
					    return 1;
					}
				}
				case 3:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 400)
	 		        {
      					if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
					    EntregandoArmaSQL(playerid, 6, 0, 0, 0);
					    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Pá.");
					    PlayerInfo[playerid][pGrana] -= 400;
					    EmpInfo[NaEmpresa][eBank]+=400;
					    EmpInfo[NaEmpresa][eProdutos]-=1;
					    return 1;
					}
				}
				case 4:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 400)
	 		        {
      					if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
					    EntregandoArmaSQL(playerid, 15, 0, 0, 0);
					    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou um Cane.");
					    PlayerInfo[playerid][pGrana] -= 400;
					    EmpInfo[NaEmpresa][eBank]+=400;
					    EmpInfo[NaEmpresa][eProdutos]-=1;
					    return 1;
					}
				}
				case 5:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 400)
	 		        {
      					if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
					    EntregandoArmaSQL(playerid, 2, 0, 0, 0);
					    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Taco de Golfe.");
					    PlayerInfo[playerid][pGrana] -= 400;
					    EmpInfo[NaEmpresa][eBank]+=400;
					    EmpInfo[NaEmpresa][eProdutos]-=1;
					    return 1;
					}
				}
				case 6:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= 2000)
	 		        {
						if(PlayerInfo[playerid][pRaspador] > 10) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem muitos raspadores em sua mão.");
					    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Raspador.");
					    PlayerInfo[playerid][pRaspador]++;
					    EmpInfo[NaEmpresa][eBank]+=2000;
					    PlayerInfo[playerid][pGrana] -= 2000;
					    EmpInfo[NaEmpresa][eProdutos]-=1;
					    return 1;
					}
				}
				case 7:
	 		    {
	 		        Dialog_Show(playerid, DIALOG_PAWNSHOP_VP, DIALOG_STYLE_LIST, "Pawn Shop - Vender peças", "1x Rádio [R$80]\n1x Neon [R$250]\n1x GPS [R$15]\n1x Immob [R$10]\n1x Tranca [R$10]\n1x Peças de Reparo [R$10]", "Vender", "Voltar");
				}
			}
 		}
	}
	return 1;
}

Dialog:DIALOG_PAWNSHOP_VP(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new NaEmpresa = PlayerInfo[playerid][pEntrouEmpresa];

	    switch(listitem)
		{
		    case 0:
		    {
		        if(EmpInfo[NaEmpresa][eBank] >= 100)
				{
				    if(PlayerInfo[playerid][pPecasMecanicas][0] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um rádio.");
					PlayerInfo[playerid][pPecasMecanicas][0]--;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Peças] Você vendeu um rádio por R$100.");
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]+100;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A empresa não tem dinheiro o suficiente.");
			}
			case 1:
		    {
		        if(EmpInfo[NaEmpresa][eBank] >= 250)
		        {
		            if(PlayerInfo[playerid][pPecasMecanicas][1] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um jogo de Neon.");

					PlayerInfo[playerid][pPecasMecanicas][1]--;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Peças] Você vendeu um jogo de Neon por R$250.");
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]+250;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A empresa não tem dinheiro o suficiente.");
			}
			case 2:
		    {
		        if(EmpInfo[NaEmpresa][eBank] >= 200)
		        {
		            if(PlayerInfo[playerid][pPecasMecanicas][2] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um GPS.");

					PlayerInfo[playerid][pPecasMecanicas][2]--;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Peças] Você vendeu um GPS por R$200.");
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]+200;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A empresa não tem dinheiro o suficiente.");
			}
			case 3:
		    {
		        if(EmpInfo[NaEmpresa][eBank] >= 80)
		        {
		            if(PlayerInfo[playerid][pPecasMecanicas][3] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um Immob.");

					PlayerInfo[playerid][pPecasMecanicas][3]--;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Peças] Você vendeu um Immob por R$80.");
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]+80;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A empresa não tem dinheiro o suficiente.");
			}
			case 4:
		    {
		        if(EmpInfo[NaEmpresa][eBank] >= 80)
		        {
		            if(PlayerInfo[playerid][pPecasMecanicas][4] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem uma Tranca.");

					PlayerInfo[playerid][pPecasMecanicas][4]--;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Peças] Você vendeu uma Tranca por R$80.");
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]+80;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A empresa não tem dinheiro o suficiente.");
			}
			case 5:
		    {
		        if(EmpInfo[NaEmpresa][eBank] >= 50)
                {
                    if(PlayerInfo[playerid][pPecasMecanicas][5] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem uma Peça de Reparo.");

					PlayerInfo[playerid][pPecasMecanicas][5]--;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Peças] Você vendeu uma Peça de Reparo por R$50.");
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]+50;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A empresa não tem dinheiro o suficiente.");
			}
		}

	}
	return 1;
}

Dialog:DIALOG_247(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new NaEmpresa = PlayerInfo[playerid][pEntrouEmpresa];
	    if(EmpInfo[NaEmpresa][eProdutos] <= 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta empresa está sem produtos no momento, volte mais tarde.");

		if(NaEmpresa != -1)
		{
		    switch(listitem)
	 		{
	 		    case 0:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= EmpInfo[NaEmpresa][eCelularPreco])
	 		        {
	 		            if(CelularData[playerid][celNumero] != 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem um celular.");
		 		        new randphone = 100000 + random(800000);

						randphone = randphone+PlayerInfo[playerid][pID];

		 		        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Celular comprado. (/ajudacelular)");
		 		        PlayerInfo[playerid][pGrana] -= EmpInfo[NaEmpresa][eCelularPreco];
		 		        EmpInfo[NaEmpresa][eBank] += EmpInfo[NaEmpresa][eCelularPreco];
		 		        PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		        ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);
		 		        EmpInfo[NaEmpresa][eProdutos]-=1;

		 		        CelularData[playerid][celModo] = 1;
		 		        CelularData[playerid][celNumero] = randphone;
		 		        CelularData[playerid][celModelo] = 330;
		 		        return 1;
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não possui dinheiro o suficiente.");
	 		    }
	 		    case 1:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= EmpInfo[NaEmpresa][eGalaoPreco])
	 		        {
	 		            if(PlayerInfo[playerid][pGalao] != 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem um galão.");
		 		        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Galão comprado(/galao).");
		 		        PlayerInfo[playerid][pGrana] -= EmpInfo[NaEmpresa][eGalaoPreco];
		 		        EmpInfo[NaEmpresa][eBank] += EmpInfo[NaEmpresa][eGalaoPreco];
		 		        PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		        PlayerInfo[playerid][pGalao] = 1;
		 		        ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);
		 		        EmpInfo[NaEmpresa][eProdutos]-=1;
	 		        	return 1;
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não possui dinheiro o suficiente.");
	 		    }
	 		    case 2:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= EmpInfo[NaEmpresa][eToolkitPreco])
	 		        {
	 		            if(PlayerInfo[playerid][pToolKit] != 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem uma caixa de ferramentas.");
		 		        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Caixa de Ferramentas comprado.");
		 		        PlayerInfo[playerid][pGrana] -= EmpInfo[NaEmpresa][eToolkitPreco];
		 		        EmpInfo[NaEmpresa][eBank] += EmpInfo[NaEmpresa][eToolkitPreco];
		 		        PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		        PlayerInfo[playerid][pToolKit] = 1;
		 		        ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);
		 		        EmpInfo[NaEmpresa][eProdutos]-=1;
	 		        	return 1;
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não possui dinheiro o suficiente.");
				}
				case 3:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= EmpInfo[NaEmpresa][eCigarroPreco])
	 		        {
            			if(PlayerInfo[playerid][pCigarros] != 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem cigarros.");
		 		        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Maço de cigarro comprado [25 unidades de cigarro].");
		 		        PlayerInfo[playerid][pGrana] -= EmpInfo[NaEmpresa][eCigarroPreco];
		 		        EmpInfo[NaEmpresa][eBank] += EmpInfo[NaEmpresa][eCigarroPreco];
		 		        PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		        PlayerInfo[playerid][pCigarros] = 25;
		 		        ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);
		 		        EmpInfo[NaEmpresa][eProdutos]-=1;
	 		        	return 1;
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não possui dinheiro o suficiente.");
				}
				case 4:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= EmpInfo[NaEmpresa][eRadioPreco])
	 		        {
	 		            if(PlayerInfo[playerid][pRadio] != 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem um rádio comunicador.");
		 		        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Rádio comunicador comprado (/ajudaradio).");
		 		        PlayerInfo[playerid][pGrana] -= EmpInfo[NaEmpresa][eRadioPreco];
		 		        EmpInfo[NaEmpresa][eBank] += EmpInfo[NaEmpresa][eRadioPreco];
		 		        PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		        PlayerInfo[playerid][pRadio] = 1;
		 		        ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);
		 		        EmpInfo[NaEmpresa][eProdutos]-=1;
	 		        	return 1;
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não possui dinheiro o suficiente.");
				}
				case 5:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= EmpInfo[NaEmpresa][eCameraPreco])
	 		        {
	 		            if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem uma arma em mãos (/ga).");
		 		        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Camera comprada.");
		 		        PlayerInfo[playerid][pGrana] -= EmpInfo[NaEmpresa][eCameraPreco];
		 		        EmpInfo[NaEmpresa][eBank] += EmpInfo[NaEmpresa][eCameraPreco];
		 		        PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		        EntregandoArmaSQL(playerid, 43, 0, 0, 0);
		 		        ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);
		 		        EmpInfo[NaEmpresa][eProdutos]-=1;
	 		        	return 1;
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não possui dinheiro o suficiente.");
				}
				case 6:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= EmpInfo[NaEmpresa][eLanchePreco])
	 		        {
		 		        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Lanche comprado.");
		 		        PlayerInfo[playerid][pGrana] -= EmpInfo[NaEmpresa][eLanchePreco];
		 		        EmpInfo[NaEmpresa][eBank] += EmpInfo[NaEmpresa][eLanchePreco];
		 		        PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		        new Float:Vida, Float:VidaFinal;
		 		        GetPlayerHealth(playerid, Vida);
						VidaFinal = Vida+30;
		 		        if(VidaFinal > PlayerInfo[playerid][pHealthMax]) VidaFinal = PlayerInfo[playerid][pHealthMax];

		 		        SetPlayerHealth(playerid, VidaFinal);
		 		        P_Health[playerid] = VidaFinal;
		 		        God_VidaAnterior2[playerid] = VidaFinal;
		 		        God_Aviso2[playerid] = 0;
		 		        ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);
		 		        EmpInfo[NaEmpresa][eProdutos]-=1;
	 		        	return 1;
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não possui dinheiro o suficiente.");
				}
				case 7:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= EmpInfo[NaEmpresa][eMascPreco])
	 		        {
	 		            if(PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você precisa de TC5 para comprar uma mascara.");
	 		            if(PlayerInfo[playerid][pMascara] != 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem uma mascara.");
		 		        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Mascara comprada(/mascara).");
		 		        PlayerInfo[playerid][pGrana] -= EmpInfo[NaEmpresa][eMascPreco];
		 		        EmpInfo[NaEmpresa][eBank] += EmpInfo[NaEmpresa][eMascPreco];
		 		        PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		        PlayerInfo[playerid][pMascara] = 1;
		 		        ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);
		 		        EmpInfo[NaEmpresa][eProdutos]-=1;
	 		        	return 1;
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não possui dinheiro o suficiente.");
				}
				case 8:
	 		    {
	 		        if(PlayerInfo[playerid][pGrana] >= EmpInfo[NaEmpresa][eBoomboxPreco])
	 		        {
	 		            if(PlayerInfo[playerid][pBoombox] != 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já possui um boombox.");
		 		        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou um boombox(/boombox).");
		 		        PlayerInfo[playerid][pGrana] -= EmpInfo[NaEmpresa][eBoomboxPreco];
		 		        EmpInfo[NaEmpresa][eBank] += EmpInfo[NaEmpresa][eBoomboxPreco];
		 		        PlayerPlaySound(playerid,1054, 0.0, 0.0, 0.0);
		 		        PlayerInfo[playerid][pBoombox] = 1;
		 		        ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);
		 		        EmpInfo[NaEmpresa][eProdutos]-=1;
	 		        	return 1;
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não possui dinheiro o suficiente.");
				}
				case 9:
				{
				    if(PlayerInfo[playerid][pGrana] >= EmpInfo[NaEmpresa][eCervejaPreco])
	 		        {
	 		            if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_BEER) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já tem uma cerveja em sua mão.");
		 		        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma cerveja.");
		 		        PlayerInfo[playerid][pGrana] -= EmpInfo[NaEmpresa][eCervejaPreco];
		 		        EmpInfo[NaEmpresa][eBank] += EmpInfo[NaEmpresa][eCervejaPreco];
		 		        ApplyAnimation(playerid,"DEALER","shop_pay",3.0,0,0,0,0,0,1);

		 		        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
		 		        EmpInfo[NaEmpresa][eProdutos]-=1;
	 		        	return 1;
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não possui dinheiro o suficiente.");
				}
				case 10:
				{
					if(PlayerInfo[playerid][pGrana] >= 50)
	 		        {
	 		            if(PlayerInfo[playerid][pLevel] > 10)
	 		            {
		 		            if(PlayerInfo[playerid][pLevel] < 10) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa ser TC10 para comprar uma lata de spray.");
						    if(PlayerInfo[playerid][pArmaMao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos, guarde-a antes.");
						    EntregandoArmaSQL(playerid, 41, 0, 0, 0);
						    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Você comprou uma Lata de Spray.");
						    PlayerInfo[playerid][pGrana] -= 50;
						    EmpInfo[NaEmpresa][eBank]+=50;
						    EmpInfo[NaEmpresa][eProdutos]-=1;
						    return 1;
						}
						else return SendClientMessage(playerid,COLOR_LIGHTGREEN,"ERRO:{FFFFFF} Você precisa ser ter TC5 ou mais para comprar um spray.");
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não possui dinheiro o suficiente.");
				}
			}
 		}
	}
	return 1;
}
Dialog:DIALOGLJROUPAS(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
 		switch(listitem)
 		{
			case 0:
			{
				switch (PlayerInfo[playerid][pGender])
				{
					case 1: ShowModelSelectionMenu(playerid, "Skins", MODEL_SELECTION_BINCO, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);
					case 2: ShowModelSelectionMenu(playerid, "Skins", MODEL_SELECTION_BINCO, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
					default: ShowModelSelectionMenu(playerid, "Skins", MODEL_SELECTION_BINCO, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);
				}
			}
			case 1: ShowModelSelectionMenu(playerid, "Skins", MODEL_SELECTION_BINCO, g_NewSkins, sizeof(g_NewSkins), -16.0, 0.0, -55.0);
      		case 2: ShowModelSelectionMenu(playerid, "Oculos", MODEL_SELECTION_OCULOS, LOJA_OCULOS, sizeof(LOJA_OCULOS), -16.0, 0.0, 55.0);
      		case 3: ShowModelSelectionMenu(playerid, "Chapeus", MODEL_SELECTION_CHAPEUS, LOJA_CHAPEU, sizeof(LOJA_CHAPEU), 16.0, 0.0, 55.0);
      		case 4: ShowModelSelectionMenu(playerid, "Mascaras", MODEL_SELECTION_MASCARAS, LOJA_MASCARAS, sizeof(LOJA_MASCARAS), 16.0, 0.0, 55.0);
      		case 5: ShowModelSelectionMenu(playerid, "Outros", MODEL_SELECTION_OUTROS, LOJA_OUTROS, sizeof(LOJA_OUTROS), 16.0, 0.0, 55.0);
      		case 6: ShowModelSelectionMenu(playerid, "Relogios", MODEL_SELECTION_RELOGIOS, LOJA_RELOGIOS, sizeof(LOJA_RELOGIOS), 16.0, 0.0, 55.0);
 		}
	}
	return 1;
}

Dialog:DIALOGLJROUPAS_PMERJ(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
	    switch(listitem)
	    {
	        case 0: ShowModelSelectionMenu(playerid, "Oculos", MODEL_SELECTION_OCULOS_PMERJ, LOJA_OCULOS_PMERJ, sizeof(LOJA_OCULOS_PMERJ), -16.0, 0.0, 55.0);
	        case 1: ShowModelSelectionMenu(playerid, "Chapeus", MODEL_SELECTION_CHAPEU_PMERJ, LOJA_CHAPEU_PMERJ, sizeof(LOJA_CHAPEU_PMERJ), -16.0, 0.0, 55.0);
	        case 2: ShowModelSelectionMenu(playerid, "Outros Itens", MODEL_SELECTION_OUTROS_PMERJ, LOJA_OUTROS_PMERJ, sizeof(LOJA_OUTROS_PMERJ), -16.0, 0.0, 55.0);
	    }
	}
	return 1;
}

Dialog:DIALOGLJROUPAS_EB(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
	    switch(listitem)
	    {
	        case 0: ShowModelSelectionMenu(playerid, "Oculos", MODEL_SELECTION_OCULOS_EB, LOJA_OCULOS_EB, sizeof(LOJA_OCULOS_EB), -16.0, 0.0, 55.0);
	        case 1: ShowModelSelectionMenu(playerid, "Chapeus", MODEL_SELECTION_CHAPEU_EB, LOJA_CHAPEU_EB, sizeof(LOJA_CHAPEU_EB), -16.0, 0.0, 55.0);
	        case 2: ShowModelSelectionMenu(playerid, "Outros Itens", MODEL_SELECTION_OUTROS_EB, LOJA_OUTROS_EB, sizeof(LOJA_OUTROS_EB), -16.0, 0.0, 55.0);
	    }
	}
	return 1;
}

Dialog:DIALOGLJROUPAS_PCERJ(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
    else
    {
        switch(listitem)
        {
            case 0: ShowModelSelectionMenu(playerid, "Oculos", MODEL_SELECTION_OCULOS_PCERJ, LOJA_OCULOS_PCERJ, sizeof(LOJA_OCULOS_PCERJ), -16.0, 0.0, 55.0);
            case 1: ShowModelSelectionMenu(playerid, "Chapeus", MODEL_SELECTION_CHAPEU_PCERJ, LOJA_CHAPEU_PCERJ, sizeof(LOJA_CHAPEU_PCERJ), -16.0, 0.0, 55.0);
            case 2: ShowModelSelectionMenu(playerid, "Outros Itens", MODEL_SELECTION_OUTROS_PCERJ, LOJA_OUTROS_PCERJ, sizeof(LOJA_OUTROS_PCERJ), -16.0, 0.0, 55.0);
        }
    }
    return 1;
}

Dialog:DIALOGLJROUPAS_PROTEGE(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
    else
    {
        switch(listitem)
        {
            case 0: ShowModelSelectionMenu(playerid, "Outros Itens", MODEL_SELECTION_OUTROS_PROTEGE, LOJA_OUTROS_BANK, sizeof(LOJA_OUTROS_BANK), -16.0, 0.0, 55.0);
        }
    }
    return 1;
}

Dialog:DIALOGLJROUPAS_CBERJ(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
    else
    {
        switch(listitem)
        {
            case 0: ShowModelSelectionMenu(playerid, "Oculos", MODEL_SELECTION_OCULOS_CBERJ, LOJA_OCULOS_CBERJ, sizeof(LOJA_OCULOS_CBERJ), -16.0, 0.0, 55.0);
            case 1: ShowModelSelectionMenu(playerid, "Chapeus", MODEL_SELECTION_CHAPEU_CBERJ, LOJA_CHAPEU_CBERJ, sizeof(LOJA_CHAPEU_CBERJ), -16.0, 0.0, 55.0);
            case 2: ShowModelSelectionMenu(playerid, "Outros Itens", MODEL_SELECTION_OUTROS_CBERJ, LOJA_OUTROS_CBERJ, sizeof(LOJA_OUTROS_CBERJ), -16.0, 0.0, 55.0);
        }
    }
    return 1;
}

forward ComprandoItemSQL(playerid, itemid, index, bone, itipo);
public ComprandoItemSQL(playerid, itemid, index, bone, itipo)
{
	new TotalItteens = 0;
    for(new i; i < MAX_ITENS; i++)
	{
		if(ItemInfo[i][iCriado] == 1)
 		{
 		    if(ItemInfo[i][iCom] == PlayerInfo[playerid][pID])
 			{
				TotalItteens++;
			}
		}
	}
	if(TotalItteens >= 51)
	{
	    SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você pode carregar no máximo 50 itens.");
	    return 1;
	}
	if(IsPlayerAttachedObjectSlotUsed(playerid, index))
	{
	    SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já está utilizando um item deste tipo. Tire-o antes de comprar outro.");
	    return 1;
	}
	else
	{
		new ItemEncontrado = 0;
		for(new i; i < MAX_ITENS; i++)
		{
 		   	if(ItemInfo[i][iCriado] == 2)
   		 	{
     			ItemEncontrado = i;
				break;
			}
		}
		if(ItemEncontrado == 0)
		{
			new str2[520];
    		format(str2,sizeof(str2),"INSERT INTO itens (iObj) VALUES ('%d')", ItemInfo[ItemEncontrado][iObj]);
    		mysql_function_query(Pipeline, str2, true, "ItemCompradoComSucesso", "dddd",playerid,itemid,index,index);
    		//printf("SetPlayerAttachedObject(playerid %d, itemid %d, slot %d, tipo %d);", playerid,itemid,slot,tipo);
    		//printf("Criado 2");
		}
		else
		{
			new id = ItemInfo[id][iID];
			new ItemID = id;
		    ItemInfo[id][iCriado] = 1;
		    ItemInfo[id][iObj] = itemid;
		    ItemInfo[id][iCom] = PlayerInfo[playerid][pID];
		    ItemInfo[id][iBone] = bone;
		    ItemInfo[id][iTipo] = index;

			switch(itipo)
			{
			    case 1: { strmid(ItemInfo[id][iNome], "Oculos", 0, 24, 255); }
	    		case 2: { strmid(ItemInfo[id][iNome], "Chapeu", 0, 24, 255); }
	    		case 3: { strmid(ItemInfo[id][iNome], "Mascara", 0, 24, 255); }
	    		case 4: { strmid(ItemInfo[id][iNome], "Outros", 0, 24, 255); }
	    		case 5: { strmid(ItemInfo[id][iNome], "Relógios", 0, 24, 255); }
			}

			new iindex;
			switch(ItemInfo[ItemID][iTipo])
			{
   				case 1: { iindex = 9; }
			    case 2: { iindex = 8; }
			    case 3: { iindex = 7; }
			    case 4: { iindex = 6; }
			}

			SetPlayerAttachedObject(playerid, iindex, ItemInfo[ItemID][iObj], ItemInfo[ItemID][iBone]);

			PlayerInfo[playerid][pEditandoItens] = id;
            EditAttachedObject(playerid, iindex);

            ItemInfo[id][iCriado] = 1;
            ItemInfo[id][iUsando] = 1;

		 	ItemInfo[id][iDrop] = 0;
		  	ItemInfo[id][iWorld] = 0;
		  	ItemInfo[id][iInt] = 0;
		  	SalvarItem(id);
		}
	}
	return 1;
}

forward ItemCompradoComSucesso(playerid,itemid,index,tipo);
public ItemCompradoComSucesso(playerid,itemid,index,tipo)
{
    new id = cache_insert_id();
    ItemInfo[id][iID] = id;
    ItemInfo[id][iCriado] = 1;
    ItemInfo[id][iObj] = itemid;
    ItemInfo[id][iCom] = PlayerInfo[playerid][pID];
    ItemInfo[id][iUsando] = 1;
    ItemInfo[id][iTipo] = index;

	switch(tipo)
	{
	    case 1: strmid(ItemInfo[id][iNome], "Oculos", 0, 24, 255);
	    case 2: strmid(ItemInfo[id][iNome], "Chapeu", 0, 24, 255);
	    case 3: strmid(ItemInfo[id][iNome], "Mascara", 0, 24, 255);
	    case 4: strmid(ItemInfo[id][iNome], "Outros", 0, 24, 255);
	}
	if(ItemInfo[id][iBone] == 0) ItemInfo[id][iBone] = 1;
	new iindex;
	switch(ItemInfo[id][iTipo])
	{
		case 1: { iindex = 9; }
  		case 2: { iindex = 8; }
    	case 3: { iindex = 7; }
    	case 4: { iindex = 6; }
	}

	SetPlayerAttachedObject(playerid, iindex, ItemInfo[id][iObj], ItemInfo[id][iBone]);
	PlayerInfo[playerid][pEditandoItens] = id;
 	EditAttachedObject(playerid, iindex);

 	ItemInfo[id][iDrop] = 0;
  	ItemInfo[id][iWorld] = 0;
  	ItemInfo[id][iInt] = 0;
  	SalvarItem(id);
	return 1;
}

CMD:itens(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pPrisao] > 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar itens em quanto estiver preso.");
	if(PlayerInfo[playerid][pEditandoItens] != 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa terminar de editar o item antes de abrir este menu.");
	new strLista[1024];
	new TotalLista = 0;

	for(new m; m < MAX_ITENS; m++)
	{
		if(ItemInfo[m][iCriado] == 1)
		{
			if(ItemInfo[m][iCom] == PlayerInfo[playerid][pID])
 			{
 			    if(TotalLista < 50)
 			    {
	  				if(TotalLista == 0)
		    		{
		    		    new ItenIndex;
					    switch(ItemInfo[m][iTipo])
					    {
					        case 1: { ItenIndex = 1; }
						    case 2: { ItenIndex = 2; }
						    case 3: { ItenIndex = 3; }
						    case 4: { ItenIndex = 4; }
					    }

	  	    			if(ItemInfo[m][iUsando] == 1) format(strLista,sizeof(strLista),"Object ID\tNome\tStatus\tIndex\tBone\n%d\t%s\tUsando\t%d", ItemInfo[m][iObj], ItemInfo[m][iNome], ItenIndex, ItemInfo[m][iBone]);
	  		    		else format(strLista,sizeof(strLista),"Object ID\tNome\tStatus\tIndex\tBone\n%d\t%s\tGuardado\t%d\t%d", ItemInfo[m][iObj], ItemInfo[m][iNome], ItemInfo[m][iTipo], ItemInfo[m][iBone]);
	  		    		VendoItemList[playerid][TotalLista] = m;
	    				TotalLista++;
					}
					else
					{
					    new ItenIndex;
					    switch(ItemInfo[m][iTipo])
					    {
					        case 1: { ItenIndex = 1; }
						    case 2: { ItenIndex = 2; }
						    case 3: { ItenIndex = 3; }
						    case 4: { ItenIndex = 4; }
					    }

						if(ItemInfo[m][iUsando] == 1) format(strLista,sizeof(strLista),"%s\n%d\t%s\tUsando\t%d\t%d", strLista, ItemInfo[m][iObj], ItemInfo[m][iNome], ItenIndex, ItemInfo[m][iBone]);
			 			else format(strLista,sizeof(strLista),"%s\n%d\t%s\tGuardado\t%d\t%d", strLista, ItemInfo[m][iObj], ItemInfo[m][iNome], ItemInfo[m][iTipo], ItemInfo[m][iBone]);
						VendoItemList[playerid][TotalLista] = m;
		    			TotalLista++;
	       			}
				}
	        }
	    }
	}
	if(TotalLista == 0) return Dialog_Show(playerid, 999999, DIALOG_STYLE_MSGBOX, "Meus Itens", "[!] Você não tem nenhum item.", "Fechar", "");
	else return Dialog_Show(playerid, DIALOG_ITENS, DIALOG_STYLE_TABLIST_HEADERS, "Meus Itens", strLista, "Selecionar", "Cancelar");
}

Dialog:DIALOG_ITENS(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
	    new ItemID = VendoItemList[playerid][listitem];
   		VendoItemList[playerid][0] = ItemID;
    	if(ItemInfo[ItemID][iUsando] == 0) Dialog_Show(playerid, DIALOG_ITENS2, DIALOG_STYLE_LIST, "Meus Itens", "Colocar\nEditar Posição\nEditar Index\nEditar Bone\nEditar Nome\nDeletar", "Selecionar", "Fechar");
    	else Dialog_Show(playerid, DIALOG_ITENS2, DIALOG_STYLE_LIST, "Meus Itens", "Retirar\nEditar Posição\nEditar Index\nEditar Bone\nEditar Nome\nDeletar", "Selecionar", "Fechar");
	}
	return 1;
}

Dialog:DIALOG_ITENS2(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    switch(listitem)
	    {
	        case 0:
	        {
	            new taUsando = 0;
        		new ItemID = VendoItemList[playerid][0];
        		if(ItemInfo[ItemID][iUsando] == 0) // Colocar
        		{
	         		for(new m; m < MAX_ITENS; m++)
			     	{
			 	    	if(ItemInfo[m][iCriado] == 1)
			      		{
			       			if(ItemInfo[m][iCom] == PlayerInfo[playerid][pID])
			        		{
			        		    if(ItemInfo[m][iTipo] == ItemInfo[ItemID][iTipo])
			        		    {
			     		   			if(ItemInfo[m][iUsando] == 1)
			      		    		{
			      		    	        taUsando = 1;
			      		    		}
								}
							}
						}
					}
					if(taUsando == 1) return Dialog_Show(playerid, 999999, DIALOG_STYLE_MSGBOX, "Meus Itens", "ERRO:{FFFFFF} Você já está usando um item deste tipo.", "Fechar", "");

					new slot;
					switch(ItemInfo[ItemID][iTipo])
					{
					    case 1: { slot = 9; }
					    case 2: { slot = 8; }
					    case 3: { slot = 7; }
					    case 4: { slot = 6; }
					}
					if(ItemInfo[ItemID][iBone] == 0) ItemInfo[ItemID][iBone] = 1;
                    ItemInfo[ItemID][iUsando] = 1;
					SetPlayerAttachedObject(playerid, slot, ItemInfo[ItemID][iObj], ItemInfo[ItemID][iBone], ItemInfo[ItemID][iX], ItemInfo[ItemID][iY], ItemInfo[ItemID][iZ], ItemInfo[ItemID][iRX], ItemInfo[ItemID][iRY], ItemInfo[ItemID][iRZ], ItemInfo[ItemID][iSX], ItemInfo[ItemID][iSY], ItemInfo[ItemID][iSZ]);
					//printf("playerid, %d, %d, %d, %f, %f, %f, %f, %f, %f, %f, %f, %f", slot, ItemInfo[ItemID][iObj], bone, ItemInfo[ItemID][iX], ItemInfo[ItemID][iY], ItemInfo[ItemID][iZ], ItemInfo[ItemID][iRX], ItemInfo[ItemID][iRY], ItemInfo[ItemID][iRZ], ItemInfo[ItemID][iSX], ItemInfo[ItemID][iSY], ItemInfo[ItemID][iSZ]);
					SalvarItem(ItemID);
				}
				else // Retirar
				{
				    new slot;
					switch(ItemInfo[ItemID][iTipo])
					{
					    case 1: { slot = 9; }
					    case 2: { slot = 8; }
					    case 3: { slot = 7; }
					    case 4: { slot = 6; }
					}
					ItemInfo[ItemID][iUsando] = 0;
	    			RemovePlayerAttachedObject(playerid, slot);
	    			SalvarItem(ItemID);
				}
				return 1;
	        }
	        case 1: // Editar Posição
	        {
				new ItemID = VendoItemList[playerid][0];
				if(ItemInfo[ItemID][iUsando] != 1) return Dialog_Show(playerid, 999999, DIALOG_STYLE_MSGBOX, "Meus Itens", "ERRO:{FFFFFF} Você precisa estar usando o item.", "Fechar", "");

				new slot;
				switch(ItemInfo[ItemID][iTipo])
				{
    				case 1: { slot = 9; }
				    case 2: { slot = 8; }
				    case 3: { slot = 7; }
				    case 4: { slot = 6; }
				}
				PlayerInfo[playerid][pEditandoItens] = ItemID;
				EditAttachedObject(playerid, slot);
			}
			case 2: // Editar Index
			{
			    new ItemID = VendoItemList[playerid][0];
			    if(ItemInfo[ItemID][iUsando] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa retirar o item para alterar a index do mesmo.");
				Dialog_Show(playerid, DIALOG_ITENS6, DIALOG_STYLE_LIST, "Editar Index", "Index 1\nIndex 2\nIndex 3\nIndex 4", "Salvar", "Cancelar");
			}
			case 3: // Editar Bone
			{
			    new ItemID = VendoItemList[playerid][0];
			    if(ItemInfo[ItemID][iUsando] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa retirar o item para alterar a Bone do mesmo.");
				Dialog_Show(playerid, DIALOG_ITENS5, DIALOG_STYLE_LIST, "Editar Bone", "Espinha\nCabeça\nBraço Esquerdo\nBraço Direito\nMão Esquerda\nMão Direita\nCoxa Esquerda\nCoxa Direta\nPé Esquerdo\nPé Direito\nPanturrilha Direta\nPanturrilha Esquerda\nAntebraço Direito\nAntebraço Direito\nClavicula Esquerda\nClavicula Direta\nPescoço\nMandibula", "Salvar", "Cancelar");
			}
			case 4: // Editar Nome
			{
				Dialog_Show(playerid, DIALOG_ITENS3, DIALOG_STYLE_INPUT, "Meus Itens", "Digite o nome que você deseja dar ao seu item:", "Salvar", "Cancelar");
			}
			case 5: // Deletar
			{
			    new ItemID = VendoItemList[playerid][0];
			    if(ItemInfo[ItemID][iUsando] == 1)
			    {
			        SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve retirar o item antes de exclui-lo.");
			        return 1;
			    }
			    else
			    {
			    	ItemInfo[ItemID][iCom] = 0;
			    	ItemInfo[ItemID][iCriado] = 2;
			    	SalvarItem(ItemID);
				}
			}
	    }
		return 1;
	}
}

Dialog:DIALOG_ITENS3(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new ItemID = VendoItemList[playerid][0];
	    if(strlen(inputtext) < 12)
		{
		   	strmid(ItemInfo[ItemID][iNome], inputtext, 0, strlen(inputtext), 255);
		   	SCM(playerid, COLOR_LIGHTGREEN, "[Itens] Nome do item editado com sucesso.");
		   	SalvarItem(ItemID);
		   	return 1;
		}
		else
		{
		    Dialog_Show(playerid, DIALOG_ITENS3, DIALOG_STYLE_INPUT, "Meus Itens", "Digite o nome que você deseja dar ao seu item:\n (Limite de 12 Characters)", "Salvar", "Cancelar");
		}
	}
	return 1;
}

Dialog:DIALOG_ITENS5(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new ItemID = VendoItemList[playerid][0];
	    ItemInfo[ItemID][iBone] = listitem+1;
	}
	return 1;
}

Dialog:DIALOG_ITENS6(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new ItemID = VendoItemList[playerid][0];
	    switch(listitem)
	    {
	        case 0: ItemInfo[ItemID][iTipo] = 1;
	        case 1: ItemInfo[ItemID][iTipo] = 2;
	        case 2: ItemInfo[ItemID][iTipo] = 3;
	        case 3: ItemInfo[ItemID][iTipo] = 4;
	    }
	}
	return 1;
}

public OnPlayerEditAttachedObject( playerid, response, index, modelid, boneid,
                                   Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ,
                                   Float:fRotX, Float:fRotY, Float:fRotZ,
                                   Float:fScaleX, Float:fScaleY, Float:fScaleZ )
{
    //new debug_string[256+1];
	//format(debug_string,256,"SetPlayerAttachedObject(playerid,%d,%d,%d,%f,%f,%f,%f,%f,%f,%f,%f,%f)",
        //index,modelid,boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,fScaleX,fScaleY,fScaleZ);

	//print(debug_string);
    //SendClientMessage(playerid, 0xFFFFFFFF, debug_string);
	if(PlayerInfo[playerid][pEditandoItens] != 0)
	{
	    new id = PlayerInfo[playerid][pEditandoItens];

	    ItemInfo[id][iX] = fOffsetX;
	    ItemInfo[id][iY] = fOffsetY;
	    ItemInfo[id][iZ] = fOffsetZ;
	    ItemInfo[id][iRX] = fRotX;
	    ItemInfo[id][iRY] = fRotY;
	    ItemInfo[id][iRZ] = fRotZ;
	    ItemInfo[id][iSX] = fScaleX;
	    ItemInfo[id][iSY] = fScaleY;
	    ItemInfo[id][iSZ] = fScaleZ;

	    SalvarItem(id);
	    PlayerInfo[playerid][pEditandoItens] = 0;
    	SetPlayerAttachedObject(playerid,index,modelid,boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,fScaleX,fScaleY,fScaleZ);
    	SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você editou seu objeto.");
	}
	else if(OutrasInfos[playerid][oEditandoArmaC] == 1)
	{
	    PlayerInfo[playerid][pColdreX] = fOffsetX;
	    PlayerInfo[playerid][pColdreY] = fOffsetY;
	    PlayerInfo[playerid][pColdreZ] = fOffsetZ;
	    PlayerInfo[playerid][pColdreRX] = fRotX;
	    PlayerInfo[playerid][pColdreRY] = fRotY;
	    PlayerInfo[playerid][pColdreRZ] = fRotZ;

	    SetPlayerAttachedObject(playerid,index,modelid,boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ);
	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você editou a posição de sua arma.");
	}
    return 1;
}

Dialog:ConfirmaCompraCasa(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    new i = VendoCasa[playerid];
	    if(i != 9999)
	    {
		    if(HouseInfo[i][hAVenda])
		    {
			    GivePlayerMoneyCA(playerid,-HouseInfo[i][hPreco]);
				if(IsValidDynamicObject(HouseInfo[i][ObjPlaca]))
		 			DestroyDynamicObject(HouseInfo[i][ObjPlaca]);
		    	if (IsValidDynamic3DTextLabel(HouseInfo[i][HouseText]))
					DestroyDynamic3DTextLabel(HouseInfo[i][HouseText]);

				//HouseInfo[i][HouseText] = CreateDynamic3DTextLabel("[Propriedade]", 0x00A974FF, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[i][hExWorld], HouseInfo[i][hExInt]);

				format(string, sizeof(string), "[Casa] Você comprou a casa %d por R$%d. (/ajudacasa).",i, HouseInfo[i][hPreco]);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

				HouseInfo[i][hDono] = PlayerInfo[playerid][pID];
				HouseInfo[i][hAVenda] = 0;
				GovInfo[gCofres] += HouseInfo[i][hPreco];

				format(HouseInfo[i][hPerm1], 24, "Vazio");
	    		format(HouseInfo[i][hPerm2], 24, "Vazio");
	    		format(HouseInfo[i][hPerm3], 24, "Vazio");

			  	HouseInfo[i][hDia] = gettime()+1296000;

				SalvarCasa(i);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Essa casa não está mais a venda.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está mais próximo da casa.");
	}
}
Dialog:ConfirmaCompraGaragem(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    new i = VendoGaragem[playerid];
	    if(i != 9999)
	    {
		    if(GaragemInfo[i][hAVenda])
		    {
			    GivePlayerMoneyCA(playerid,-GaragemInfo[i][hPreco]);
				if(IsValidDynamicObject(GaragemInfo[i][ObjPlaca]))
		 			DestroyDynamicObject(GaragemInfo[i][ObjPlaca]);
		    	if (IsValidDynamic3DTextLabel(GaragemInfo[i][HouseText]))
					DestroyDynamic3DTextLabel(GaragemInfo[i][HouseText]);

				format(string, sizeof(string), "[Garagem] Você comprou a garagem %d por R$%d. (/ajudagaragem).",i, GaragemInfo[i][hPreco]);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

				GaragemInfo[i][hDono] = PlayerInfo[playerid][pID];
				GaragemInfo[i][hAVenda] = 0;
				GovInfo[gCofres] += GaragemInfo[i][hPreco];

				format(GaragemInfo[i][hPerm1], 24, "Vazio");
	    		format(GaragemInfo[i][hPerm2], 24, "Vazio");
	    		format(GaragemInfo[i][hPerm3], 24, "Vazio");

			  	GaragemInfo[i][hDia] = gettime()+1296000;

				SalvarGaragem(i);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Essa garagem não está mais a venda.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está mais próximo da garagem.");
	}
}
Dialog:ConfirmaCompraComplexo(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    new i = VendoComplexo[playerid];
	    if(i != 9999)
	    {
		    if(ComplexoInfo[i][cAVenda])
		    {
				GivePlayerMoneyCA(playerid,-ComplexoInfo[i][cPreco]);
				if(IsValidDynamicObject(ComplexoInfo[i][cObjPlaca]))
   					DestroyDynamicObject(ComplexoInfo[i][cObjPlaca]);
    			if (IsValidDynamic3DTextLabel(ComplexoInfo[i][cText]))
					DestroyDynamic3DTextLabel(ComplexoInfo[i][cText]);

				format(string, sizeof(string), "\n%s", ComplexoInfo[i][cNome]);
				ComplexoInfo[i][cText] = CreateDynamic3DTextLabel(string, 0x00A974FF, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);

				format(string, sizeof(string), "[Complexo] Você comprou o complexo %d por R$%d(/ajudacomplexo).",i, ComplexoInfo[i][cPreco]);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

				ComplexoInfo[i][cDono] = PlayerInfo[playerid][pID];
    			ComplexoInfo[i][cAVenda] = 0;
    			GovInfo[gCofres] += ComplexoInfo[i][cPreco];

    			format(ComplexoInfo[i][cPerm1], 24, "Vazio");
	    		format(ComplexoInfo[i][cPerm2], 24, "Vazio");
	    		format(ComplexoInfo[i][cPerm3], 24, "Vazio");

				SalvarComplexo(i);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Esse complexo não está mais a venda.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está mais próximo da casa.");
	}
}

CMD:ircasa(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pTester] < 1 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
	new var;
	if (sscanf(params, "I(9999)", var))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"USE: /ircasa [ID da Casa]");
		return 1;
	}
	else
	{
 		if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /ircasa [ID da Casa]");
		if(HouseInfo[var][hCriada] == 1) {
		    SetPlayerPosFreeze(playerid,HouseInfo[var][hExX],HouseInfo[var][hExY], HouseInfo[var][hExZ],1);
			SetPlayerVirtualWorld(playerid,HouseInfo[var][hExWorld]);
			SetPlayerInterior(playerid,HouseInfo[var][hExInt]);
	   		format(string, sizeof(string), "AdmCmd: Você teleportou-se até a casa: %d.", var);
			SendClientMessage(playerid, COLOR_LIGHTRED, string);
			if(HouseInfo[var][hExX2] != 0)
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Essa casa tem uma saída secundária. Dê /ircasa2 para vê-la.");
			return 1;
   	    }
   	    else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} ID da casa inválido.");
	}
}

CMD:irgaragem(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;
    new var;
    if (sscanf(params, "I(9999)", var))
    {
        SendClientMessage(playerid, COLOR_LIGHTRED,"USE: /irgaragem [ID da Garagem]");
        return 1;
    }
    else
    {
        if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /irgaragem [ID da Garagem]");
        if(GaragemInfo[var][hCriada] == 1)
        {
            SetPlayerPosFreeze(playerid,GaragemInfo[var][hExX],GaragemInfo[var][hExY], GaragemInfo[var][hExZ],1);
            SetPlayerVirtualWorld(playerid,GaragemInfo[var][hExWorld]);
            SetPlayerInterior(playerid,GaragemInfo[var][hExInt]);
            format(string, sizeof(string), "AdmCmd: Você teleportou-se até a garagem: %d.", var);
            SendClientMessage(playerid, COLOR_LIGHTRED, string);
            return 1;
        }
        else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} ID da garagem inválido.");
    }
}

CMD:enderecocasa(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
	new opcao[32];
	if (sscanf(params, "s[24]", opcao)) return SendClientMessage(playerid, COLOR_LIGHTRED,"USE: /enderecocasa [edereço]");
	for(new i; i < MAX_HOUSES; i++)
    {
        if(HouseInfo[i][hCriada])
		{
 			if(IsPlayerInRangeOfPoint(playerid, 1, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
   			{
    			format(HouseInfo[i][hEndereco], 32, "%s", opcao);
    			SendClientMessage(playerid, COLOR_LIGHTGREEN,"Endereço alterado");
    			SalvarCasa(i);
    			return 1;
			}
		}
	}
    SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está perto de nenhuma casa.");
    return 1;
}

CMD:acasa(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está logado para usar este comando.");
	if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
	new opcao[24], var;
	if (sscanf(params, "s[24]I(9999)", opcao,var))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"USE: /acasa [opção] [Variavel]");
		SendClientMessage(playerid, COLOR_LIGHTRED,"criar, id, ir, entrada, saida, entrada2, saida2, cplaca, dplaca, preco, trancada, info");
		SCM(playerid, COLOR_LIGHTRED, "OUTROS: /enderecocasa");
		return 1;
	}
	else
	{
	    if (!strcmp(opcao, "criar", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /acasa criar [preço]");
		    static Float:x,
	    			Float:y,
	    			Float:z,
					Float:angle;
			if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
			{
		        for (new i = 1; i != MAX_HOUSES; i ++)
				{
				    if(i >= MAX_HOUSES) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não é possivel criar novas casas... Poste bug report.");
				    if(HouseInfo[i][hCriada] == 2)
				    {
				        HouseInfo[i][hCriada] = 1;
  		        		HouseInfo[i][hDono] = 0;
  		        		HouseInfo[i][hPreco] = var;

  		        		HouseInfo[i][hExX] = x;
  		        		HouseInfo[i][hExY] = y;
  		        		HouseInfo[i][hExZ] = z;

  		        		HouseInfo[i][hInX] = 2308.9685;
						HouseInfo[i][hInY] = -1212.6244;
						HouseInfo[i][hInZ] = 1048.2029;
						HouseInfo[i][hInt] = 6;

						HouseInfo[i][hExWorld] = GetPlayerVirtualWorld(playerid);
						HouseInfo[i][hExInt] = GetPlayerInterior(playerid);
						HouseInfo[i][hTrancada] = 1;
						HouseInfo[i][hAVenda] = 1;

						format(HouseInfo[i][hPerm1], 24, "Vazio");
	    				format(HouseInfo[i][hPerm2], 24, "Vazio");
	    				format(HouseInfo[i][hPerm3], 24, "Vazio");

	    				SalvarCasa(i);
	    				SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Casa criada. (Reutilização)");
	    				return 1;
				    }
	    			if (!HouseInfo[i][hCriada])
		    		{
		    		    HouseInfo[i][hCriada] = 1;
  		        		HouseInfo[i][hDono] = 0;
  		        		HouseInfo[i][hPreco] = var;

  		        		HouseInfo[i][hExX] = x;
  		        		HouseInfo[i][hExY] = y;
  		        		HouseInfo[i][hExZ] = z;

  		        		HouseInfo[i][hInX] = 2308.9685;
						HouseInfo[i][hInY] = -1212.6244;
						HouseInfo[i][hInZ] = 1048.2029;
						HouseInfo[i][hInt] = 6;

						HouseInfo[i][hExWorld] = GetPlayerVirtualWorld(playerid);
						HouseInfo[i][hExInt] = GetPlayerInterior(playerid);

						HouseInfo[i][hTrancada] = 1;
						HouseInfo[i][hAVenda] = 1;

						format(HouseInfo[i][hPerm1], 24, "Vazio");
	    				format(HouseInfo[i][hPerm2], 24, "Vazio");
	    				format(HouseInfo[i][hPerm3], 24, "Vazio");

						mysql_function_query(Pipeline, "INSERT INTO `casas` (`Dono`) VALUES(0)", false, "CasaCriada", "dd", i,playerid);
						//SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Casa criada com sucesso.");
                		//HouseInfo[i][HouseText] = CreateDynamic3DTextLabel("[Propriedade]", 0x00A974FF, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[i][hExWorld], HouseInfo[i][hExInt]);

						return i;
					}
		        }
			}
		}
		else if (!strcmp(opcao, "info", true))
		{
		    new casas = 0;
			for(new i; i < MAX_HOUSES; i++)
		    {
		        if(casas < 10)
		        {
			    	if(IsPlayerInRangeOfPoint(playerid, 1, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
			    	{
			    	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "__________AdmCmd: Propriedade__________");
						format(string, sizeof(string), "Id da casa: %d!", i);
	 					SendClientMessage(playerid, COLOR_WHITE, string);
	 					format(string, sizeof(string), "Dono / SQL ID: %d!", HouseInfo[i][hDono]);
	 					SendClientMessage(playerid, COLOR_WHITE, string);
	 					format(string, sizeof(string), "Preço: %d!", HouseInfo[i][hPreco]);
	 					SendClientMessage(playerid, COLOR_WHITE, string);
	 					format(string, sizeof(string), "Imune até: %d/%d/%d", ConvertTimestampToDate( HouseInfo[i][hDia] ));
	 					SendClientMessage(playerid, COLOR_WHITE, string);
	 					casas++;
			        }
				}
			}
		}
		else if (!strcmp(opcao, "id", true))
		{
		    new casas = 0;
			for(new i; i < MAX_HOUSES; i++)
		    {
		        if(casas < 10)
		        {
			    	if(HouseInfo[i][hCriada] && IsPlayerInRangeOfPoint(playerid, 1, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
			    	{
						format(string, sizeof(string), "AdmCmd: Id da Casa: %d!", i);
	 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
	 					casas++;
			        }
				}
			}
		}
		else if (!strcmp(opcao, "ids", true))
		{
		    new casas = 0;
			for(new i; i < MAX_HOUSES; i++)
		    {
		        if(casas < 10)
		        {
			    	if(HouseInfo[i][hCriada] && IsPlayerInRangeOfPoint(playerid, 20, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
			    	{
						format(string, sizeof(string), "AdmCmd: Id da Casa: %d!", i);
	 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
	 					casas++;
			        }
				}
			}
		}
		else if (!strcmp(opcao, "trancada", true))
		{
		    if(var > 1 || var < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acasa trancada [variavel 0-1]");
			for(new i; i < MAX_HOUSES; i++)
		    {
		        if (HouseInfo[i][hCriada])
	  			{
		    		if(IsPlayerInRangeOfPoint(playerid, 1, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
		    		{
						HouseInfo[i][hTrancada] = var;

						SalvarCasa(var);
    					format(string, sizeof(string), "AdmCmd: %d trancada/destrancada.", i);
 						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						//HouseInfo[var][HouseText] = CreateDynamic3DTextLabel("[Propriedade]", 0x00A974FF, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[i][hExWorld], HouseInfo[i][hExInt]);
						return 1;
					}
		        }
			}
		}
		else if (!strcmp(opcao, "tipo", true))
		{
		    if(var > 2 || var < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acasa tipo [variavel 0/1/2]");
			for(new i; i < MAX_HOUSES; i++)
		    {
		        if (HouseInfo[i][hCriada])
	  			{
		    		if(IsPlayerInRangeOfPoint(playerid, 1, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
		    		{
						HouseInfo[i][hTipo] = var;

						SalvarCasa(var);
    					format(string, sizeof(string), "AdmCmd: Você mudou o tipo da casa %d para %d.", i, var);
 						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						return 1;
					}
		        }
			}
		}
		else if (!strcmp(opcao, "preco", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acasa preco [Valor]");
			for(new i; i < MAX_HOUSES; i++)
		    {
		        if (HouseInfo[i][hCriada])
  				{
		    		if(IsPlayerInRangeOfPoint(playerid, 1, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
		    		{
  				    	if (IsValidDynamic3DTextLabel(HouseInfo[i][HouseText]))
            				DestroyDynamic3DTextLabel(HouseInfo[i][HouseText]);

						HouseInfo[i][hPreco] = var;

						SalvarCasa(i);
    					SendClientMessage(playerid, COLOR_LIGHTRED, "Preço da casa alterado.");
    					format(string, sizeof(string), "AdmCmd: Você alterou o preço da casa %d para R$%d!", i, var);
 						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						//format(string, sizeof(string), "[Propriedade]\nVende-se\nR$%d!",HouseInfo[i][hPreco]);
				    	//HouseInfo[i][HouseText] = CreateDynamic3DTextLabel(string, 0x00A974FF, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[i][hExWorld], HouseInfo[i][hExInt]);
      					return 1;
					}
		        }
			}
		}
		else if (!strcmp(opcao, "entrada", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acasa entrada [ID da casa]");
		    static Float:x,
	    			Float:y,
	    			Float:z;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (HouseInfo[var][hCriada])
  				{
  				    if (IsValidDynamic3DTextLabel(HouseInfo[var][HouseText]))
            			DestroyDynamic3DTextLabel(HouseInfo[var][HouseText]);

    				HouseInfo[var][hExX] = x;
      				HouseInfo[var][hExY] = y;
        			HouseInfo[var][hExZ] = z;

        			HouseInfo[var][hExWorld] = GetPlayerVirtualWorld(playerid);
					HouseInfo[var][hExInt] = GetPlayerInterior(playerid);

					SalvarCasa(var);
                    format(string, sizeof(string), "AdmCmd: Posição de entrada da casa %d alterado.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
 					SCM(playerid, COLOR_YELLOW,"[!] Não se esqueça de remover e colocar a placa de vende-se no novo local!");
					//HouseInfo[var][HouseText] = CreateDynamic3DTextLabel("[Propriedade]", 0x00A974FF, HouseInfo[var][hExX], HouseInfo[var][hExY], HouseInfo[var][hExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[var][hExWorld], HouseInfo[var][hExInt]);
					return 1;
		        }
			}
		}
		else if (!strcmp(opcao, "entrada2", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acasa entrada2 [ID da casa]");
		    static Float:x,
	    			Float:y,
	    			Float:z;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (HouseInfo[var][hCriada])
  				{
    				HouseInfo[var][hExX2] = x;
      				HouseInfo[var][hExY2] = y;
        			HouseInfo[var][hExZ2] = z;

					SalvarCasa(var);
                    format(string, sizeof(string), "AdmCmd: Posição 2 de entrada da casa %d alterado.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
 					return 1;
		        }
			}
		}
		else if (!strcmp(opcao, "deletar", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acasa deletar [ID da casa]");
		    static Float:x,
	    			Float:y,
	    			Float:z;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (HouseInfo[var][hCriada])
  				{
  				    if (IsValidDynamic3DTextLabel(HouseInfo[var][HouseText]))
            			DestroyDynamic3DTextLabel(HouseInfo[var][HouseText]);

    				HouseInfo[var][hExX] = 0.0;
      				HouseInfo[var][hExY] = 0.0;
        			HouseInfo[var][hExZ] = 0.0;

        			if(IsValidDynamicObject(HouseInfo[var][ObjPlaca]))
					    DestroyDynamicObject(HouseInfo[var][ObjPlaca]);

        			HouseInfo[var][hExWorld] = 99999;
					HouseInfo[var][hExInt] = 99999;

                    HouseInfo[var][hCriada] = 2;

					SalvarCasa(var);
                    format(string, sizeof(string), "AdmCmd: Casa %d deletada.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					return 1;
		        }
		        else return SCM(playerid, COLOR_LIGHTRED,"AdmCmd: Essa casa não está criada.");
			}
		}
		else if (!strcmp(opcao, "saida", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acasa saida [ID da casa]");
		    static Float:x,
	    			Float:y,
	    			Float:z;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (HouseInfo[var][hCriada])
  				{
    				HouseInfo[var][hInX] = x;
      				HouseInfo[var][hInY] = y;
        			HouseInfo[var][hInZ] = z;
        			HouseInfo[var][hInt] = GetPlayerInterior(playerid);
        			format(string, sizeof(string), "AdmCmd: Posição de saida da casa %d alterado.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					SalvarCasa(var);
					return 1;
		        }
			}
		}
		else if (!strcmp(opcao, "saida2", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acasa saida [ID da casa]");
		    static Float:x,
	    			Float:y,
	    			Float:z;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (HouseInfo[var][hCriada])
  				{
    				HouseInfo[var][hInX2] = x;
      				HouseInfo[var][hInY2] = y;
        			HouseInfo[var][hInZ2] = z;
        			format(string, sizeof(string), "AdmCmd: Posição 2 de saida da casa %d alterado.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					SalvarCasa(var);
					return 1;
		        }
			}
		}
		else if (!strcmp(opcao, "cplaca", true))
		{
		    for(new i; i < MAX_HOUSES; i++)
		    {
		    	if(IsPlayerInRangeOfPoint(playerid, 1, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
		    	{
		    	    static Float:x,
	    			Float:y,
	    			Float:z;
					GetPlayerPos(playerid, x, y, z);

					if(IsValidDynamicObject(HouseInfo[i][ObjPlaca]))
					    DestroyDynamicObject(HouseInfo[i][ObjPlaca]);

                    format(string, sizeof(string), "AdmCmd: Placa de venda adicionada na casa %d.", i);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					PlayerInfo[playerid][pEditandoPlaca] = i;
		    	    HouseInfo[i][ObjPlaca] = CreateDynamicObject(19471, x, y+1, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		    	    EditDynamicObject(playerid, HouseInfo[i][ObjPlaca]);
		    	    return 1;
		    	}
			}
		}
		else if (!strcmp(opcao, "dplaca", true))
		{
		    for(new i; i < MAX_HOUSES; i++)
		    {
		    	if(IsPlayerInRangeOfPoint(playerid, 1, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
		    	{
		    	    static Float:x,
	    			Float:y,
	    			Float:z;
					GetPlayerPos(playerid, x, y, z);

					if(IsValidDynamicObject(HouseInfo[i][ObjPlaca]))
					    DestroyDynamicObject(HouseInfo[i][ObjPlaca]);

                    format(string, sizeof(string), "AdmCmd: Placa de venda deletada da casa %d.", i);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					HouseInfo[i][hPlacaX] = 0;
					HouseInfo[i][hPlacaY] = 0;
					HouseInfo[i][hPlacaZ] = 0;
					HouseInfo[i][hPlacaR] = 0;

					SalvarCasa(i);
		    	    return 1;
		    	}
			}
		}
		else if (!strcmp(opcao, "ir", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acasa ir [ID da casa]");
  			if(HouseInfo[var][hCriada] == 1)
  			{
			    SetPlayerPosFreeze(playerid,HouseInfo[var][hExX],HouseInfo[var][hExY], HouseInfo[var][hExZ],1);
				SetPlayerVirtualWorld(playerid,HouseInfo[var][hExWorld]);
				SetPlayerInterior(playerid,HouseInfo[var][hExInt]);
	      		format(string, sizeof(string), "AdmCmd: Você teleportou-se até a casa: %d.", var);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				return 1;
   		    }
   		    else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} ID da casa inválido.");
		}
		else if (!strcmp(opcao, "vender", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acasa vender [ID da casa]");
		    if(HouseInfo[var][hCriada] == 1)
  			{
  			    format(string, sizeof(string), "AdmCmd: Você vendeu a casa: %d.", var);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);

				HouseInfo[var][hDono] = 0;
				HouseInfo[var][hAVenda] = 1;

				new houseid = var;
				if(IsValidDynamicObject(HouseInfo[houseid][ObjPlaca]))
    				DestroyDynamicObject(HouseInfo[houseid][ObjPlaca]);
                if (IsValidDynamic3DTextLabel(HouseInfo[houseid][HouseText]))
				DestroyDynamic3DTextLabel(HouseInfo[houseid][HouseText]);

				format(HouseInfo[houseid][hPerm1], 24, "Vazio");
	    		format(HouseInfo[houseid][hPerm2], 24, "Vazio");
	    		format(HouseInfo[houseid][hPerm3], 24, "Vazio");

				//format(string, sizeof(string), "[Propriedade]\nVende-se\nR$%d!",HouseInfo[houseid][hPreco]);
    			//HouseInfo[houseid][HouseText] = CreateDynamic3DTextLabel(string, 0x00A974FF, HouseInfo[houseid][hExX], HouseInfo[houseid][hExY], HouseInfo[houseid][hExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[houseid][hExWorld], HouseInfo[houseid][hExInt]);
			    if(HouseInfo[houseid][hPlacaX] != 0 && HouseInfo[houseid][hPlacaY] != 0 && HouseInfo[houseid][hPlacaZ] != 0)
				{
					HouseInfo[houseid][ObjPlaca] = CreateDynamicObject(19471, HouseInfo[houseid][hPlacaX], HouseInfo[houseid][hPlacaY], HouseInfo[houseid][hPlacaZ], 0.0, 0.0, HouseInfo[houseid][hPlacaR], HouseInfo[houseid][hExWorld], HouseInfo[houseid][hExInt]);
				}
			}
		}
	}
	return 1;
}
forward CasaCriada(houseid,playerid);
public CasaCriada(houseid,playerid)
{
    if(houseid != -1 && HouseInfo[houseid][hCriada] == 1)
    {
    	HouseInfo[houseid][hID] = cache_insert_id();
    	SalvarCasa(houseid);
	}
	format(string, sizeof(string), "AdmCmd: Casa %d criada!", houseid);
 	SendClientMessage(playerid, COLOR_LIGHTRED, string);
    return 1;
}

CMD:agaragem(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
	new opcao[24], var, var2;
	if (sscanf(params, "s[24]I(9999)I(9999)", opcao,var, var2))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"USE: /agaragem [opção] [Variavel]");
		SendClientMessage(playerid, COLOR_LIGHTRED,"criar_e, criar_c, id, entradaape, entradacar, saida, cplaca, dplaca, preco, trancada, info, interior, casa");
		return 1;
	}
	else
	{
	    if (!strcmp(opcao, "criar_e", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /agaragem criar_e [preço]");
		    static Float:x,
	    			Float:y,
	    			Float:z,
					Float:angle;
			if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
			{
		        for (new i = 1; i != MAX_GARAGENS; i ++)
				{
	    			if (!GaragemInfo[i][hCriada])
		    		{
		    		    GaragemInfo[i][hCriada] = 1;
  		        		GaragemInfo[i][hDono] = 0;
  		        		GaragemInfo[i][hPreco] = var;
  		        		GaragemInfo[i][hTipo] = 0;

  		        		GaragemInfo[i][hExX] = x;
  		        		GaragemInfo[i][hExY] = y;
  		        		GaragemInfo[i][hExZ] = z;

  		        		GaragemInfo[i][hInX] = 1643.5905;
						GaragemInfo[i][hInY] = -1517.1052;
						GaragemInfo[i][hInZ] = 13.2197;
						GaragemInfo[i][hInR] = 0.0000;

						GaragemInfo[i][hInt] = 0;

						GaragemInfo[i][hExWorld] = GetPlayerVirtualWorld(playerid);
						GaragemInfo[i][hExInt] = GetPlayerInterior(playerid);

						GaragemInfo[i][hTrancada] = 1;
						GaragemInfo[i][hAVenda] = 1;

						format(GaragemInfo[i][hPerm1], 24, "Vazio");
	    				format(GaragemInfo[i][hPerm2], 24, "Vazio");
	    				format(GaragemInfo[i][hPerm3], 24, "Vazio");

						mysql_function_query(Pipeline, "INSERT INTO `garagens` (`Dono`) VALUES(0)", false, "GaragemCriada", "dd", i,playerid);
						return i;
					}
		        }
			}
		}
		else if (!strcmp(opcao, "interior", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /agaragem interior [garagem id] [interior(0-3)]");
		    if(var2 == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /agaragem interior [garagem id] [interior(0-3)]");

		    switch(var2)
		    {
      			case 0:
      			{
         			GaragemInfo[var][hInt] = 0;
         			GaragemInfo[var][hInX] = 1643.5905;
					GaragemInfo[var][hInY] = -1517.1052;
					GaragemInfo[var][hInZ] = 13.2197;
					GaragemInfo[var][hInR] = 0.0;
			  }
			  case 1:
			  {
			  		GaragemInfo[var][hInt] = 6;
			  		GaragemInfo[var][hInX] = -1328.2228;
					GaragemInfo[var][hInY] = -661.3559;
					GaragemInfo[var][hInZ] = 13.8977;
					GaragemInfo[var][hInR] = 270.0;
			  }
			  case 2:
			  {
				  	GaragemInfo[var][hInt] = 6;
				  	GaragemInfo[var][hInX] = -1463.2211;
					GaragemInfo[var][hInY] = -661.9531;
					GaragemInfo[var][hInZ] = 13.8977;
					GaragemInfo[var][hInR] = 270.0;
			  }
			  case 3:
			  {
				  	GaragemInfo[var][hInt] = 6;
				  	GaragemInfo[var][hInX] = -1403.5153;
					GaragemInfo[var][hInY] = -665.7564;
					GaragemInfo[var][hInZ] = 13.8362;
					GaragemInfo[var][hInR] = 0.0;
  				}
  				default:
  				{
  					GaragemInfo[var][hInt] = 0;
  					GaragemInfo[var][hInX] = 1643.5905;
					GaragemInfo[var][hInY] = -1517.1052;
					GaragemInfo[var][hInZ] = 13.2197;
					GaragemInfo[var][hInR] = 0.0;
				}
  			}
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Interior Alterado.");
		    SalvarGaragem(var);
		    return 1;
		}
		else if (!strcmp(opcao, "criar_c", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /agaragem criar_c [casa id]");
		    static Float:x,
	    			Float:y,
	    			Float:z,
					Float:angle;
			if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
			{
		        for (new i = 1; i != MAX_GARAGENS; i ++)
				{
	    			if (!GaragemInfo[i][hCriada])
		    		{
		    		    GaragemInfo[i][hCriada] = 1;
  		        		GaragemInfo[i][hDono] = 0;
  		        		GaragemInfo[i][hPreco] = 0;
  		        		GaragemInfo[i][hTipo] = var;

  		        		GaragemInfo[i][hExX] = x;
  		        		GaragemInfo[i][hExY] = y;
  		        		GaragemInfo[i][hExZ] = z;


						GaragemInfo[i][hInt] = 6;
      					GaragemInfo[i][hInX] = 1643.5905;
						GaragemInfo[i][hInY] = -1517.1052;
						GaragemInfo[i][hInZ] = 13.2197;
						GaragemInfo[i][hInR] = 270.0;

						GaragemInfo[i][hExWorld] = GetPlayerVirtualWorld(playerid);
						GaragemInfo[i][hExInt] = GetPlayerInterior(playerid);

						GaragemInfo[i][hTrancada] = 1;
						GaragemInfo[i][hAVenda] = 1;

						format(GaragemInfo[i][hPerm1], 24, "Vazio");
	    				format(GaragemInfo[i][hPerm2], 24, "Vazio");
	    				format(GaragemInfo[i][hPerm3], 24, "Vazio");

						mysql_function_query(Pipeline, "INSERT INTO `garagens` (`Dono`) VALUES(0)", false, "GaragemCriada", "dd", i,playerid);
						return i;
					}
		        }
			}
		}
		else if (!strcmp(opcao, "info", true))
		{
		    new casas = 0;
			for(new i; i < MAX_GARAGENS; i++)
		    {
		        if(casas < 10)
		        {
			    	if(IsPlayerInRangeOfPoint(playerid, 1, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
			    	{
			    	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "__________AdmCmd: Propriedade__________");
						format(string, sizeof(string), "Id da Garagem: %d!", i);
	 					SendClientMessage(playerid, COLOR_WHITE, string);
	 					format(string, sizeof(string), "Dono / SQL ID: %d!", GaragemInfo[i][hDono]);
	 					SendClientMessage(playerid, COLOR_WHITE, string);
	 					format(string, sizeof(string), "Preço: %d!", GaragemInfo[i][hPreco]);
	 					SendClientMessage(playerid, COLOR_WHITE, string);
	 					format(string, sizeof(string), "Imune até: %s.", ConvertTimestampToDate( GaragemInfo[i][hDia] ));
	 					SendClientMessage(playerid, COLOR_WHITE, string);

	 					casas++;
			        }
				}
			}
		}
		else if (!strcmp(opcao, "id", true))
		{
		    new casas = 0;
			for(new i; i < MAX_GARAGENS; i++)
		    {
		        if(casas < 10)
		        {
			    	if(IsPlayerInRangeOfPoint(playerid, 1, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
			    	{
						format(string, sizeof(string), "AdmCmd: Id da Garagem: %d!", i);
	 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
	 					casas++;
			        }
				}
			}
		}
		else if (!strcmp(opcao, "trancada", true))
		{
		    if(var > 1 || var < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /agaragem trancada [variavel 0-1]");
			for(new i; i < MAX_GARAGENS; i++)
		    {
		        if (GaragemInfo[i][hCriada])
	  			{
		    		if(IsPlayerInRangeOfPoint(playerid, 1, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
		    		{
						GaragemInfo[i][hTrancada] = var;

						SalvarGaragem(var);
    					format(string, sizeof(string), "AdmCmd: %d trancada/destrancada.", i);
 						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						return 1;
					}
		        }
			}
		}
		else if (!strcmp(opcao, "casa", true))
		{
		    for(new i; i < MAX_GARAGENS; i++)
		    {
		        if (GaragemInfo[i][hCriada])
	  			{
		    		if(IsPlayerInRangeOfPoint(playerid, 1, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
		    		{
						GaragemInfo[i][hTipo] = var;

						SalvarGaragem(var);
    					format(string, sizeof(string), "AdmCmd: Você mudou o tipo da garagem %d para %d.", i, var);
 						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						return 1;
					}
		        }
			}
		}
		else if (!strcmp(opcao, "preco", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /agaragem preco [Valor]");
			for(new i; i < MAX_GARAGENS; i++)
		    {
		        if (GaragemInfo[i][hCriada])
  				{
		    		if(IsPlayerInRangeOfPoint(playerid, 1, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
		    		{
  				    	if (IsValidDynamic3DTextLabel(GaragemInfo[i][HouseText]))
            				DestroyDynamic3DTextLabel(GaragemInfo[i][HouseText]);

						GaragemInfo[i][hPreco] = var;

						SalvarGaragem(i);
    					format(string, sizeof(string), "AdmCmd: Você alterou o preço da garagem %d para R$%d!", i, var);
 						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "[Garagem]\nVende-se\nR$%d!",GaragemInfo[i][hPreco]);
				    	return 1;
					}
		        }
			}
		}
		else if (!strcmp(opcao, "entradaape", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /agaragem entradaape [ID da Garagem]");
		    static Float:x,
	    			Float:y,
	    			Float:z;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (GaragemInfo[var][hCriada])
  				{
  				    if (IsValidDynamic3DTextLabel(GaragemInfo[var][HouseText]))
            			DestroyDynamic3DTextLabel(GaragemInfo[var][HouseText]);

    				GaragemInfo[var][hExX] = x;
      				GaragemInfo[var][hExY] = y;
        			GaragemInfo[var][hExZ] = z;

        			GaragemInfo[var][hExWorld] = GetPlayerVirtualWorld(playerid);
					GaragemInfo[var][hExInt] = GetPlayerInterior(playerid);

					SalvarGaragem(var);
                    format(string, sizeof(string), "AdmCmd: Posição de entrada da garagem %d alterado.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
 					SCM(playerid, COLOR_YELLOW,"SERVER: [!] Não se esqueça de remover e colocar a placa de vende-se no novo local!");
					return 1;
		        }
			}
		}
		else if (!strcmp(opcao, "entradacar", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /agaragem entradacar [ID da Garagem]");
		    static Float:x,
	    			Float:y,
	    			Float:z;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (GaragemInfo[var][hCriada])
  				{
  				    if (IsValidDynamic3DTextLabel(GaragemInfo[var][HouseText]))
            			DestroyDynamic3DTextLabel(GaragemInfo[var][HouseText]);

					new Float:pRot;
					GetPlayerFacingAngle(playerid, pRot);

    				GaragemInfo[var][hExX2] = x;
      				GaragemInfo[var][hExY2] = y;
        			GaragemInfo[var][hExZ2] = z;
        			GaragemInfo[var][hExR] = pRot;

        			GaragemInfo[var][hExWorld] = GetPlayerVirtualWorld(playerid);
					GaragemInfo[var][hExInt] = GetPlayerInterior(playerid);

					SalvarGaragem(var);
                    format(string, sizeof(string), "AdmCmd: Posição de entrada da garagem %d alterado.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					return 1;
		        }
			}
		}
		else if (!strcmp(opcao, "saida", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /agaragem saida [ID da Garagem]");
		    static Float:x,
	    			Float:y,
	    			Float:z;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (GaragemInfo[var][hCriada])
  				{
  				    new Float:pRot;
					GetPlayerFacingAngle(playerid, pRot);

    				GaragemInfo[var][hInX] = x;
      				GaragemInfo[var][hInY] = y;
        			GaragemInfo[var][hInZ] = z;
        			GaragemInfo[var][hInR] = pRot;

        			GaragemInfo[var][hInt] = GetPlayerInterior(playerid);
        			format(string, sizeof(string), "AdmCmd: Posição de saida da garagem %d alterado.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					SalvarGaragem(var);
					return 1;
		        }
			}
		}
		else if (!strcmp(opcao, "cplaca", true))
		{
		    for(new i; i < MAX_GARAGENS; i++)
		    {
		    	if(IsPlayerInRangeOfPoint(playerid, 1, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
		    	{
		    	    static Float:x,
	    			Float:y,
	    			Float:z;
					GetPlayerPos(playerid, x, y, z);

					if(IsValidDynamicObject(GaragemInfo[i][ObjPlaca]))
					    DestroyDynamicObject(GaragemInfo[i][ObjPlaca]);

                    format(string, sizeof(string), "AdmCmd: Placa de venda adicionada na garagem %d.", i);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					PlayerInfo[playerid][pEditandoPlacaG] = i;
		    	    GaragemInfo[i][ObjPlaca] = CreateDynamicObject(19471, x, y+1, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		    	    EditDynamicObject(playerid, GaragemInfo[i][ObjPlaca]);
		    	    return 1;
		    	}
			}
		}
		else if (!strcmp(opcao, "dplaca", true))
		{
		    for(new i; i < MAX_HOUSES; i++)
		    {
		    	if(IsPlayerInRangeOfPoint(playerid, 1, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
		    	{
		    	    static Float:x,
	    			Float:y,
	    			Float:z;
					GetPlayerPos(playerid, x, y, z);

					if(IsValidDynamicObject(GaragemInfo[i][ObjPlaca]))
					    DestroyDynamicObject(GaragemInfo[i][ObjPlaca]);

                    format(string, sizeof(string), "AdmCmd: Placa de venda deletada da garagem %d.", i);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					GaragemInfo[i][hPlacaX] = 0;
					GaragemInfo[i][hPlacaY] = 0;
					GaragemInfo[i][hPlacaZ] = 0;
					GaragemInfo[i][hPlacaR] = 0;

					SalvarGaragem(i);
		    	    return 1;
		    	}
			}
		}
		else if (!strcmp(opcao, "vender", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /agaragem vender [ID da Casa]");
		    if(GaragemInfo[var][hCriada] == 1)
  			{
  			    format(string, sizeof(string), "AdmCmd: Você vendeu a garagem: %d.", var);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);

				GaragemInfo[var][hDono] = 0;
				GaragemInfo[var][hAVenda] = 1;

				new houseid = var;
				if(IsValidDynamicObject(GaragemInfo[houseid][ObjPlaca]))
    				DestroyDynamicObject(GaragemInfo[houseid][ObjPlaca]);
                if (IsValidDynamic3DTextLabel(GaragemInfo[houseid][HouseText]))
				DestroyDynamic3DTextLabel(GaragemInfo[houseid][HouseText]);

				format(GaragemInfo[houseid][hPerm1], 24, "Vazio");
	    		format(GaragemInfo[houseid][hPerm2], 24, "Vazio");
	    		format(GaragemInfo[houseid][hPerm3], 24, "Vazio");

				if(GaragemInfo[houseid][hPlacaX] != 0 && GaragemInfo[houseid][hPlacaY] != 0 && GaragemInfo[houseid][hPlacaZ] != 0)
				{
					GaragemInfo[houseid][ObjPlaca] = CreateDynamicObject(19471, GaragemInfo[houseid][hPlacaX], GaragemInfo[houseid][hPlacaY], GaragemInfo[houseid][hPlacaZ], 0.0, 0.0, GaragemInfo[houseid][hPlacaR], GaragemInfo[houseid][hExWorld], GaragemInfo[houseid][hExInt]);
				}
			}
		}
	}
	return 1;
}
forward GaragemCriada(houseid,playerid);
public GaragemCriada(houseid,playerid)
{
    if(houseid != -1 && GaragemInfo[houseid][hCriada] == 1)
    {
    	GaragemInfo[houseid][hID] = cache_insert_id();
    	SalvarGaragem(houseid);
	}
	format(string, sizeof(string), "AdmCmd: Garagem %d criada, agora use /agaragem e/ou /agaragem2 entradacar [ID da Garagem] em um local mais afastado da porta da garagem!", houseid);
 	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	SendClientMessage(playerid, COLOR_LIGHTRED, "Lembre-se, para onde você estiver olhando, vai ser para onde o carro vai estar virado quando usar /sair.");
    return 1;
}
//============================================================================================================//
//  COMPLEXO SYSTEM - COMPLEXO SYSTEM - COMPLEXO SYSTEM - COMPLEXO SYSTEM - COMPLEXO SYSTEM - COMPLEXO SYSTEM - COMPLEXO SYSTEM
//============================================================================================================//
forward CarregandoComplexos();
public CarregandoComplexos()
{
    new Rows, Fields, totalcomplexos = 0;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		new tmp[130];

		for(new i ; i < Rows; i++) if(i < MAX_HOUSES)
		{
			cache_get_field_content(i, "cID", tmp);
			new complexid = strval(tmp);
		 	ComplexoInfo[complexid][cID] = strval(tmp);

			cache_get_field_content(i, "Criada", tmp);
			ComplexoInfo[complexid][cCriada] = strval(tmp);

			cache_get_field_content(i, "Dono", tmp);
			ComplexoInfo[complexid][cDono] = strval(tmp);

			cache_get_field_content(0, "Nome", tmp);
			format(ComplexoInfo[complexid][cNome], 56, "%s", tmp);

			cache_get_field_content(i, "ExX", tmp);
			ComplexoInfo[complexid][cExX] = floatstr(tmp);

			cache_get_field_content(i, "ExY", tmp);
			ComplexoInfo[complexid][cExY] = floatstr(tmp);

			cache_get_field_content(i, "ExZ", tmp);
			ComplexoInfo[complexid][cExZ] = floatstr(tmp);

			cache_get_field_content(i, "InX", tmp);
			ComplexoInfo[complexid][cInX] = floatstr(tmp);

			cache_get_field_content(i, "InY", tmp);
			ComplexoInfo[complexid][cInY] = floatstr(tmp);

			cache_get_field_content(i, "InZ", tmp);
			ComplexoInfo[complexid][cInZ] = floatstr(tmp);

			cache_get_field_content(i, "Int", tmp);
			ComplexoInfo[complexid][cInt] = strval(tmp);

			cache_get_field_content(i, "Preco", tmp);
			ComplexoInfo[complexid][cPreco] = strval(tmp);

			cache_get_field_content(i, "Trancada", tmp);
			ComplexoInfo[complexid][cTrancada] = strval(tmp);

			cache_get_field_content(i, "PlacaX", tmp);
			ComplexoInfo[complexid][cPlacaX] = floatstr(tmp);

			cache_get_field_content(i, "PlacaY", tmp);
			ComplexoInfo[complexid][cPlacaY] = floatstr(tmp);

			cache_get_field_content(i, "PlacaZ", tmp);
			ComplexoInfo[complexid][cPlacaZ] = floatstr(tmp);

			cache_get_field_content(i, "PlacaR", tmp);
			ComplexoInfo[complexid][cPlacaR] = floatstr(tmp);

			cache_get_field_content(i, "AVenda", tmp);
			ComplexoInfo[complexid][cAVenda] = strval(tmp);

			cache_get_field_content(i, "TelCont", tmp);
			ComplexoInfo[complexid][cTelCont] = strval(tmp);

			cache_get_field_content(i, "ExX2", tmp);
			ComplexoInfo[complexid][cExX2] = floatstr(tmp);

			cache_get_field_content(i, "ExY2", tmp);
			ComplexoInfo[complexid][cExY2] = floatstr(tmp);

			cache_get_field_content(i, "ExZ2", tmp);
			ComplexoInfo[complexid][cExZ2] = floatstr(tmp);

			cache_get_field_content(i, "InX2", tmp);
			ComplexoInfo[complexid][cInX2] = floatstr(tmp);

			cache_get_field_content(i, "InY2", tmp);
			ComplexoInfo[complexid][cInY2] = floatstr(tmp);

			cache_get_field_content(i, "InZ2", tmp);
			ComplexoInfo[complexid][cInZ2] = floatstr(tmp);

			cache_get_field_content(0, "cPerm1", tmp);
			format(ComplexoInfo[complexid][cPerm1], 24, "%s", tmp);

			cache_get_field_content(0, "cPerm2", tmp);
			format(ComplexoInfo[complexid][cPerm2], 24, "%s", tmp);

			cache_get_field_content(0, "cPerm3", tmp);
			format(ComplexoInfo[complexid][cPerm3], 24, "%s", tmp);

			cache_get_field_content(0, "cXMR", tmp);
			format(ComplexoInfo[complexid][cXMR], 256, "%s", tmp);

			cache_get_field_content(i, "complexTipo", tmp);
			ComplexoInfo[complexid][complexTipo] = strval(tmp);

			cache_get_field_content(i, "complexIcone", tmp);
			ComplexoInfo[complexid][complexIcone] = strval(tmp);

			cache_get_field_content(i, "ExX3", tmp);
			ComplexoInfo[complexid][cExX3] = floatstr(tmp);

			cache_get_field_content(i, "ExY3", tmp);
			ComplexoInfo[complexid][cExY3] = floatstr(tmp);

			cache_get_field_content(i, "ExZ3", tmp);
			ComplexoInfo[complexid][cExZ3] = floatstr(tmp);

			cache_get_field_content(i, "InX3", tmp);
			ComplexoInfo[complexid][cInX3] = floatstr(tmp);

			cache_get_field_content(i, "InY3", tmp);
			ComplexoInfo[complexid][cInY3] = floatstr(tmp);

			cache_get_field_content(i, "InZ3", tmp);
			ComplexoInfo[complexid][cInZ3] = floatstr(tmp);

			if(ComplexoInfo[complexid][cCriada] == 1)
			{
			    totalcomplexos++;
                if(ComplexoInfo[complexid][cAVenda] == 1)
				{
				    ComplexoInfo[complexid][cIcone] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
				    ComplexoInfo[complexid][cIcone2] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX2], ComplexoInfo[complexid][cExY2], ComplexoInfo[complexid][cExZ2], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
				    ComplexoInfo[complexid][cIcone3] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX3], ComplexoInfo[complexid][cExY3], ComplexoInfo[complexid][cExZ3], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
				    format(string, sizeof(string), "\n%s\nPrédio de Apartamentos[%d] A venda:\nPreço: R$%d!",ComplexoInfo[complexid][cNome],i,ComplexoInfo[complexid][cPreco]);
				    ComplexoInfo[complexid][cText] = CreateDynamic3DTextLabel(string, 0xC38A39FF, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
				    if(ComplexoInfo[complexid][cPlacaX] != 0 && ComplexoInfo[complexid][cPlacaY] != 0 && ComplexoInfo[complexid][cPlacaZ] != 0)
					{
						ComplexoInfo[complexid][cObjPlaca] = CreateDynamicObject(19471, ComplexoInfo[complexid][cPlacaX], ComplexoInfo[complexid][cPlacaY], ComplexoInfo[complexid][cPlacaZ], 0.0, 0.0, ComplexoInfo[complexid][cPlacaR], 0, 0);
					}
				}
				else if(ComplexoInfo[complexid][cTelCont] != 0)
				{
				    ComplexoInfo[complexid][cIcone] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
				    ComplexoInfo[complexid][cIcone2] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX2], ComplexoInfo[complexid][cExY2], ComplexoInfo[complexid][cExZ2], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
				    ComplexoInfo[complexid][cIcone3] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX3], ComplexoInfo[complexid][cExY3], ComplexoInfo[complexid][cExZ3], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
				    format(string, sizeof(string), "\n%s\nVende-se\nContato: %d!",ComplexoInfo[complexid][cNome],ComplexoInfo[complexid][cPreco]);
				    ComplexoInfo[complexid][cText] = CreateDynamic3DTextLabel(string, 0xC38A39FF, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
				    if(ComplexoInfo[complexid][cPlacaX] != 0 && ComplexoInfo[complexid][cPlacaY] != 0 && ComplexoInfo[complexid][cPlacaZ] != 0)
					{
						ComplexoInfo[complexid][cObjPlaca] = CreateDynamicObject(19471, ComplexoInfo[complexid][cPlacaX], ComplexoInfo[complexid][cPlacaY], ComplexoInfo[complexid][cPlacaZ], 0.0, 0.0, ComplexoInfo[complexid][cPlacaR], 0, 0);
					}
				}
				else
				{
				    if(ComplexoInfo[complexid][complexIcone] != 0)
					{
						ComplexoInfo[complexid][cIcone] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
						ComplexoInfo[complexid][cIcone2] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX2], ComplexoInfo[complexid][cExY2], ComplexoInfo[complexid][cExZ2], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
						ComplexoInfo[complexid][cIcone3] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX3], ComplexoInfo[complexid][cExY3], ComplexoInfo[complexid][cExZ3], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
					}
					else
					{
						ComplexoInfo[complexid][cIcone] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
						ComplexoInfo[complexid][cIcone2] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX2], ComplexoInfo[complexid][cExY2], ComplexoInfo[complexid][cExZ2], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
						ComplexoInfo[complexid][cIcone3] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX3], ComplexoInfo[complexid][cExY3], ComplexoInfo[complexid][cExZ3], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
					}
					format(string, sizeof(string), "\n%s",ComplexoInfo[complexid][cNome]);
				    ComplexoInfo[complexid][cText] = CreateDynamic3DTextLabel(string, 0x00A974FF, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
				}
			}
		}
	}
	printf("[CARREGADO] Complexos: %d",totalcomplexos);
	return 1;
}
SalvarComplexo(complexid)
{
	if (ComplexoInfo[complexid][cCriada] == 1)
	{
		static query[2048];

		format(query, sizeof(query), "UPDATE `complexos` SET `Criada` = '%d', `Dono` = '%d', `ExX` = '%.4f', `ExY` = '%.4f', `ExZ` = '%.4f', `InX` = '%.4f', `InY` = '%.4f', `InZ` = '%.4f', `Int` = '%d',  `Preco` = '%d',  `Trancada` = '%d',  `PlacaX` = '%.4f', `PlacaY` = '%.4f', `PlacaZ` = '%.4f', `PlacaR` = '%.4f', `AVenda` = '%d', `TelCont`= '%d', `ExX2` = '%.4f', `ExY2` = '%.4f', `ExZ2` = '%.4f', `InX2` = '%.4f', `InY2` = '%.4f', `InZ2` = '%.4f' WHERE `cID` = '%d'",
			ComplexoInfo[complexid][cCriada],
			ComplexoInfo[complexid][cDono],
			ComplexoInfo[complexid][cExX],
			ComplexoInfo[complexid][cExY],
			ComplexoInfo[complexid][cExZ],
			ComplexoInfo[complexid][cInX],
			ComplexoInfo[complexid][cInY],
			ComplexoInfo[complexid][cInZ],
			ComplexoInfo[complexid][cInt],
			ComplexoInfo[complexid][cPreco],
			ComplexoInfo[complexid][cTrancada],
			ComplexoInfo[complexid][cPlacaX],
			ComplexoInfo[complexid][cPlacaY],
			ComplexoInfo[complexid][cPlacaZ],
			ComplexoInfo[complexid][cPlacaR],
			ComplexoInfo[complexid][cAVenda],
			ComplexoInfo[complexid][cTelCont],
			ComplexoInfo[complexid][cExX2],
			ComplexoInfo[complexid][cExY2],
			ComplexoInfo[complexid][cExZ2],
			ComplexoInfo[complexid][cInX2],
			ComplexoInfo[complexid][cInY2],
			ComplexoInfo[complexid][cInZ2],
		    ComplexoInfo[complexid][cID]);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

		format(query, sizeof(query), "UPDATE `complexos` SET `cPerm1`='%s',`cPerm2`='%s',`cPerm3`='%s', `cXMR`='%s', `complexTipo`='%d', `complexIcone`='%d', `ExX3` = '%.4f', `ExY3` = '%.4f', `ExZ3` = '%.4f', `InX3` = '%.4f', `InY3` = '%.4f', `InZ3` = '%.4f' WHERE `cID` = '%d'",
			ComplexoInfo[complexid][cPerm1],
			ComplexoInfo[complexid][cPerm2],
			ComplexoInfo[complexid][cPerm3],
			ComplexoInfo[complexid][cXMR],
			ComplexoInfo[complexid][complexTipo],
			ComplexoInfo[complexid][complexIcone],
			ComplexoInfo[complexid][cExX3],
			ComplexoInfo[complexid][cExY3],
			ComplexoInfo[complexid][cExZ3],
			ComplexoInfo[complexid][cInX3],
			ComplexoInfo[complexid][cInY3],
			ComplexoInfo[complexid][cInZ3],
		    ComplexoInfo[complexid][cID]);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);
	}
	return 1;
}

Dialog:VendendoComplexo(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    switch(listitem)
	    {
	    	case 0:
	    	{
	    	    format(string, sizeof(string), "Você tem certeza que deseja vender o complexo (%d) por R$%d?\n(Ao vender para o estado, você recebe apenas a metade do valor pago)",VendoComplexo[playerid], (ComplexoInfo[VendoComplexo[playerid]][cPreco]/2));
                Dialog_Show(playerid, VendendoComplexo1, DIALOG_STYLE_MSGBOX, "Confirmação de Venda", string, "Sim", "Cancelar");
			}
			case 1:
			{
                Dialog_Show(playerid, VendendoComplexo2, DIALOG_STYLE_INPUT, "Venda do Complexo", "Digite o ID do jogador.", "Avançar", "Cancelar");
			}
			case 2:
			{
                Dialog_Show(playerid, VendendoComplexo3, DIALOG_STYLE_INPUT, "Venda do Complexo", "Digite um telefone para contato.", "Avançar", "Cancelar");
			}
			case 3:
			{
			    new i = VendendoComplexo[playerid][2];
			    format(string, sizeof(string), "[Complexo] Você retirou a placa de vende-se.");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				ComplexoInfo[i][cTelCont] = 0;
				if (IsValidDynamic3DTextLabel(ComplexoInfo[i][cText]))
					DestroyDynamic3DTextLabel(ComplexoInfo[i][cText]);
				if(IsValidDynamicObject(ComplexoInfo[i][cObjPlaca]))
    				DestroyDynamicObject(ComplexoInfo[i][cObjPlaca]);
				format(string, sizeof(string), "\n%s",ComplexoInfo[i][cNome]);
				ComplexoInfo[i][cText] = CreateDynamic3DTextLabel(string, 0x00A974FF, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
                SalvarComplexo(i);
			}
		}
	}
	return 1;
}
Dialog:VendendoComplexo3(playerid, response, listitem, inputtext[])
{
    new telefone = strval(inputtext);
    new i = VendendoComplexo[playerid][2];
    ComplexoInfo[i][cTelCont] = telefone;

    if (IsValidDynamic3DTextLabel(ComplexoInfo[i][cText]))
		DestroyDynamic3DTextLabel(ComplexoInfo[i][cText]);
	SalvarComplexo(i);
	format(string, sizeof(string), "[Complexo] Placa de vende-se colocada! Aguarde até alguém lhe ligar.");
	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "\n%s\nVende-se!\nContato: %d",ComplexoInfo[i][cNome],telefone);
	ComplexoInfo[i][cText] = CreateDynamic3DTextLabel(string, 0x00A974FF, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
    if(ComplexoInfo[i][cPlacaX] != 0 && ComplexoInfo[i][cPlacaY] != 0 && ComplexoInfo[i][cPlacaZ] != 0)
	{
		ComplexoInfo[i][cObjPlaca] = CreateDynamicObject(19471, ComplexoInfo[i][cPlacaX], ComplexoInfo[i][cPlacaY], ComplexoInfo[i][cPlacaZ], 0.0, 0.0, ComplexoInfo[i][cPlacaR], 0, 0);
	}
	return 1;
}
Dialog:VendendoComplexo2(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    new outro = strval(inputtext);
	    if(!IsPlayerConnected(outro)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido!");
	    if(!IsPlayerNearPlayer(playerid, outro, 8.0))  return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Este player não está próximo a você!");
	    Dialog_Show(playerid, VendendoComplexo21, DIALOG_STYLE_INPUT, "Venda do Complexo", "Digite o valor que você deseja cobrar pelo complexo.", "Avançar", "Cancelar");
	    VendendoComplexo[playerid][0] = outro;
	    VendendoComplexo[outro][0] = playerid;
	    VendendoComplexo[outro][2] = VendendoComplexo[playerid][2];
	}
	return 1;
}
Dialog:VendendoComplexo21(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    new valor = strval(inputtext);
	    if(valor > 1 && valor < 999999)
	    {
		    if(!IsPlayerConnected(VendendoComplexo[playerid][0])) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido!");
		    if(!IsPlayerNearPlayer(playerid, VendendoComplexo[playerid][0], 8.0))  return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} O comprador não está mais próximo a você!");
		    format(string, sizeof(string), "[Complexo] %s está lhe oferecendo o complexo %d por R$%d.",PlayerName(playerid, 1), VendendoComplexo[playerid][2], valor);
	     	Dialog_Show(VendendoComplexo[playerid][0], VendendoComplexo22, DIALOG_STYLE_MSGBOX, "Proposta de Negócio", string, "Comprar", "Cancelar");
		    VendendoComplexo[playerid][1] = valor;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido!");
		    Dialog_Show(playerid, VendendoComplexo21, DIALOG_STYLE_INPUT, "Proposta de Negócio", "Digite o valor que você deseja cobrar pelo complexo\nMax: R$999999.", "Oferecer", "Cancelar");
		}
	}
	return 1;
}
Dialog:VendendoComplexo22(playerid, response, listitem, inputtext[])
{
    if (!response)
    {
        format(string, sizeof(string), "[Complexo] %s recusou a sua oferta e não comprou o complexo.",PlayerName(playerid, 1));
        SendClientMessage(VendendoComplexo[playerid][0], -1, string);
        SendClientMessage(playerid, COLOR_LIGHTRED, "[Complexo] Você recusou a oferta de compra do complexo!");
    }
	else
	{
	    new Vendedor = VendendoComplexo[playerid][0];
	    new houseid = VendendoComplexo[Vendedor][2];

	    if(GetPlayerMoneyCA(playerid) >= VendendoComplexo[Vendedor][1])
	    {
	        if(!IsPlayerConnected(Vendedor))  return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O vendedor não está mais online.");
	        if(PlayerInfo[Vendedor][pID] != ComplexoInfo[houseid][cDono]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Ocorreu um erro durante a venda da residencia, contate um admin se preciso.");
	        format(string, sizeof(string), "%s aceitou sua oferta e comprou o seu complexo por R$%d. (Complexo ID: %d).",PlayerName(playerid, 1), VendendoComplexo[Vendedor][1], houseid);
	        SendClientMessage(VendendoComplexo[playerid][0], -1, string);
	        SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Complexo] Você aceitou a oferta e comprou o complexo.");

			GivePlayerMoneyCA(playerid,-VendendoComplexo[Vendedor][1]);
			GivePlayerMoneyCA(Vendedor,VendendoComplexo[Vendedor][1]);

	        ComplexoInfo[houseid][cDono] = PlayerInfo[playerid][pID];
			ComplexoInfo[houseid][cAVenda] = 0;

			format(ComplexoInfo[houseid][cPerm1], 24, "Vazio");
 			format(ComplexoInfo[houseid][cPerm2], 24, "Vazio");
  			format(ComplexoInfo[houseid][cPerm3], 24, "Vazio");

			if(IsValidDynamicObject(ComplexoInfo[houseid][cObjPlaca]))
				DestroyDynamicObject(ComplexoInfo[houseid][cObjPlaca]);

			SalvarComplexo(houseid);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro suficiente para realizar essa compra.");
   			format(string, sizeof(string), "ERRO:{FFFFFF} %s não tem essa quantia em dinheiro para comprar o complexo.",PlayerName(playerid, 1), VendendoComplexo[Vendedor][1], houseid);
	        SendClientMessage(VendendoComplexo[playerid][0], COLOR_LIGHTRED, string);
		}
	}
	return 1;
}
Dialog:VendendoComplexo1(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    if(VendoComplexo[playerid] != 9999)
		{
  			if(ComplexoInfo[VendoComplexo[playerid]][cDono] == PlayerInfo[playerid][pID])
    		{
    		    if (IsValidDynamic3DTextLabel(ComplexoInfo[VendoComplexo[playerid]][cText]))
					DestroyDynamic3DTextLabel(ComplexoInfo[VendoComplexo[playerid]][cText]);
   				format(string, sizeof(string), "[Complexo] Você vendeu a seu complexo(%d) por R$%d.", VendoComplexo[playerid], ComplexoInfo[VendoComplexo[playerid]][cPreco]/2);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				ComplexoInfo[VendoComplexo[playerid]][cDono] = 0;
				ComplexoInfo[VendoComplexo[playerid]][cAVenda] = 1;
				GovInfo[gCofres] -= (ComplexoInfo[VendoComplexo[playerid]][cPreco]/2);

				GivePlayerMoneyCA(playerid,(ComplexoInfo[VendoComplexo[playerid]][cPreco]/2));

				format(ComplexoInfo[VendoComplexo[playerid]][cPerm1], 24, "Vazio");
	    		format(ComplexoInfo[VendoComplexo[playerid]][cPerm2], 24, "Vazio");
	    		format(ComplexoInfo[VendoComplexo[playerid]][cPerm3], 24, "Vazio");

				new houseid = VendoComplexo[playerid];
				if(IsValidDynamicObject(ComplexoInfo[houseid][cObjPlaca]))
    				DestroyDynamicObject(ComplexoInfo[houseid][cObjPlaca]);
				format(string, sizeof(string), "\nVende-se\nR$%d!",ComplexoInfo[houseid][cPreco]);
    			ComplexoInfo[houseid][cText] = CreateDynamic3DTextLabel(string, 0x00A974FF, ComplexoInfo[houseid][cExX], ComplexoInfo[houseid][cExY], ComplexoInfo[houseid][cExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
			    if(ComplexoInfo[houseid][cPlacaX] != 0 && ComplexoInfo[houseid][cPlacaY] != 0 && ComplexoInfo[houseid][cPlacaZ] != 0)
				{
					ComplexoInfo[houseid][cObjPlaca] = CreateDynamicObject(19471, ComplexoInfo[houseid][cPlacaX], ComplexoInfo[houseid][cPlacaY], ComplexoInfo[houseid][cPlacaZ], 0.0, 0.0, ComplexoInfo[houseid][cPlacaR], 0, 0);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Você se afastou do complexo, venda cancelada.");
	}
	return 1;
}

CMD:acomplexo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	new opcao[24], var;
	if (sscanf(params, "s[24]I(9999)", opcao,var))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /acomplexo [opção] [Variavel]");
		SendClientMessage(playerid, COLOR_LIGHTRED,"criar |id |ir |entrada |saida |cplaca |dplaca |preco |trancada |info |vender |icone |tipo (1: Aparece Msg / 2: n aparece)");
		SendClientMessage(playerid, COLOR_LIGHTRED,"entrada2 | entrada3 | saida2 | saida3");
		return 1;
	}
	else
	{
	    if (!strcmp(opcao, "criar", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acomplexo criar [preço]");
		    static Float:x,
	    			Float:y,
	    			Float:z,
					Float:angle;
			if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
			{
		        for (new i = 1; i != MAX_COMPLEXOS; i ++)
				{
	    			if (!ComplexoInfo[i][cCriada])
		    		{
		    		    ComplexoInfo[i][cCriada] = 1;
  		        		ComplexoInfo[i][cDono] = 0;
  		        		ComplexoInfo[i][cPreco] = var;

  		        		ComplexoInfo[i][cExX] = x;
  		        		ComplexoInfo[i][cExY] = y;
  		        		ComplexoInfo[i][cExZ] = z;

  		        		ComplexoInfo[i][cInX] = 2308.9685;
						ComplexoInfo[i][cInY] = -1212.6244;
						ComplexoInfo[i][cInZ] = 1048.2029;
						ComplexoInfo[i][cInt] = 6;

						ComplexoInfo[i][cTrancada] = 1;
						ComplexoInfo[i][cAVenda] = 1;

						format(ComplexoInfo[i][cPerm1], 24, "Vazio");
	    				format(ComplexoInfo[i][cPerm2], 24, "Vazio");
	    				format(ComplexoInfo[i][cPerm3], 24, "Vazio");

						mysql_function_query(Pipeline, "INSERT INTO `complexos` (`Dono`) VALUES(0)", false, "ComplexoCriada", "dd", i,playerid);
						format(string, sizeof(string), "\n%s\nVende-se\nR$%d!",ComplexoInfo[i][cNome],ComplexoInfo[i][cPreco]);
                		ComplexoInfo[i][cText] = CreateDynamic3DTextLabel(string, 0x00A974FF, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
                        new complexid = i;
                    	if(ComplexoInfo[complexid][complexIcone] != 0)
						{
							ComplexoInfo[complexid][cIcone] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
							ComplexoInfo[complexid][cIcone2] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX2], ComplexoInfo[complexid][cExY2], ComplexoInfo[complexid][cExZ2], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
							ComplexoInfo[complexid][cIcone3] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX3], ComplexoInfo[complexid][cExY3], ComplexoInfo[complexid][cExZ3], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
						}
						else
						{
							ComplexoInfo[complexid][cIcone] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
							ComplexoInfo[complexid][cIcone2] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX2], ComplexoInfo[complexid][cExY2], ComplexoInfo[complexid][cExZ2], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
							ComplexoInfo[complexid][cIcone3] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX3], ComplexoInfo[complexid][cExY3], ComplexoInfo[complexid][cExZ3], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
						}
						return 1;
					}
		        }
			}
		}
		else if (!strcmp(opcao, "info", true))
		{
			for(new i; i < MAX_COMPLEXOS; i++)
		    {
		    	if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
		    	{
		    	    SendClientMessage(playerid, 0xF5D800FF, "__________AdmCmd: aComplexo__________");
					format(string, sizeof(string), "Id do Complexo: %d!", i);
 					SendClientMessage(playerid, COLOR_WHITE, string);
 					format(string, sizeof(string), "Dono / SQL ID: %d!", ComplexoInfo[i][cDono]);
 					SendClientMessage(playerid, COLOR_WHITE, string);
 					format(string, sizeof(string), "Preço: %d!", ComplexoInfo[i][cPreco]);
 					SendClientMessage(playerid, COLOR_WHITE, string);
		        }
		        else if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX2], ComplexoInfo[i][cExY2], ComplexoInfo[i][cExZ2]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
		    	{
		    	    SendClientMessage(playerid, 0xF5D800FF, "__________AdmCmd: aComplexo__________");
					format(string, sizeof(string), "Id do Complexo: %d!", i);
 					SendClientMessage(playerid, COLOR_WHITE, string);
 					format(string, sizeof(string), "Dono / SQL ID: %d!", ComplexoInfo[i][cDono]);
 					SendClientMessage(playerid, COLOR_WHITE, string);
 					format(string, sizeof(string), "Preço: %d!", ComplexoInfo[i][cPreco]);
 					SendClientMessage(playerid, COLOR_WHITE, string);
		        }
		        else if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX3], ComplexoInfo[i][cExY3], ComplexoInfo[i][cExZ3]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
		    	{
		    	    SendClientMessage(playerid, 0xF5D800FF, "__________AdmCmd: aComplexo__________");
					format(string, sizeof(string), "Id do Complexo: %d!", i);
 					SendClientMessage(playerid, COLOR_WHITE, string);
 					format(string, sizeof(string), "Dono / SQL ID: %d!", ComplexoInfo[i][cDono]);
 					SendClientMessage(playerid, COLOR_WHITE, string);
 					format(string, sizeof(string), "Preço: %d!", ComplexoInfo[i][cPreco]);
 					SendClientMessage(playerid, COLOR_WHITE, string);
		        }
			}
		}
		else if (!strcmp(opcao, "id", true))
		{
		    new complexos = 0;
			for(new i; i < MAX_COMPLEXOS; i++)
		    {
		        if(complexos < 10)
		        {
			    	if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
			    	{
  						format(string, sizeof(string), "AdmCmd: Id do Complexo: %d!", i);
	 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
	 					complexos++;
			        }
			        if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX2], ComplexoInfo[i][cExY2], ComplexoInfo[i][cExZ2]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
			    	{
						format(string, sizeof(string), "AdmCmd: Id do Complexo: %d!", i);
	 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
	 					complexos++;
			        }
			        if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX3], ComplexoInfo[i][cExY3], ComplexoInfo[i][cExZ3]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
			    	{
						format(string, sizeof(string), "AdmCmd: Id do Complexo: %d!", i);
	 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
	 					complexos++;
			        }
				}
			}
		}
		else if (!strcmp(opcao, "tipo", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acomplexo tipo [0:1]");

			for(new i; i < MAX_COMPLEXOS; i++)
		    {
		        if (ComplexoInfo[i][cCriada])
	  			{
			    	if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
			    	{
			    	    ComplexoInfo[i][complexTipo] = var;
						format(string, sizeof(string), "AdmCmd: Id do Complexo: %d | Novo tipo: %d!", i, var);
	 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
	 					return 1;
			        }
				}
			}
		}
		else if (!strcmp(opcao, "trancada", true))
		{
		    if(var > 1 || var < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acomplexo trancada [variavel 0-1]");
			for(new i; i < MAX_COMPLEXOS; i++)
		    {
		        if (ComplexoInfo[i][cCriada])
	  			{
		    		if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
		    		{
						ComplexoInfo[i][cTrancada] = var;

						SalvarComplexo(var);
    					format(string, sizeof(string), "AdmCmd: Complexo %d trancada/destrancada.", i);
 						SendClientMessage(playerid, COLOR_LIGHTRED, string);
 						return 1;
					}
					if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX2], ComplexoInfo[i][cExY2], ComplexoInfo[i][cExZ2]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
		    		{
						ComplexoInfo[i][cTrancada] = var;

						SalvarComplexo(var);
    					format(string, sizeof(string), "AdmCmd: Complexo %d trancada/destrancada.", i);
 						SendClientMessage(playerid, COLOR_LIGHTRED, string);
 						return 1;
					}
					if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX3], ComplexoInfo[i][cExY3], ComplexoInfo[i][cExZ3]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
		    		{
						ComplexoInfo[i][cTrancada] = var;

						SalvarComplexo(var);
    					format(string, sizeof(string), "AdmCmd: Complexo %d trancada/destrancada.", i);
 						SendClientMessage(playerid, COLOR_LIGHTRED, string);
 						return 1;
					}
		        }
			}
		}
		else if (!strcmp(opcao, "preco", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acomplexo preco [Valor]");
			for(new i; i < MAX_COMPLEXOS; i++)
		    {
		        if (ComplexoInfo[i][cCriada])
  				{
		    		if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
		    		{
  				    	if (IsValidDynamic3DTextLabel(ComplexoInfo[i][cText]))
            				DestroyDynamic3DTextLabel(ComplexoInfo[i][cText]);

						ComplexoInfo[i][cPreco] = var;

						SalvarComplexo(i);
    					format(string, sizeof(string), "AdmCmd: Você alterou o preço do complexo %d para R$%d!", i, var);
 						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "\n%s\nVende-se\nR$%d!",ComplexoInfo[i][cNome],ComplexoInfo[i][cPreco]);
				    	ComplexoInfo[i][cText] = CreateDynamic3DTextLabel(string, 0x00A974FF, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
						return 1;
					}
					else if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX2], ComplexoInfo[i][cExY2], ComplexoInfo[i][cExZ2]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
		    		{
  				    	if (IsValidDynamic3DTextLabel(ComplexoInfo[i][cText]))
            				DestroyDynamic3DTextLabel(ComplexoInfo[i][cText]);

						ComplexoInfo[i][cPreco] = var;

						SalvarComplexo(i);
    					format(string, sizeof(string), "AdmCmd: Você alterou o preço do complexo %d para R$%d!", i, var);
 						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "\n%s\nVende-se\nR$%d!",ComplexoInfo[i][cNome],ComplexoInfo[i][cPreco]);
				    	ComplexoInfo[i][cText] = CreateDynamic3DTextLabel(string, 0x00A974FF, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
						return 1;
					}
					else if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX3], ComplexoInfo[i][cExY3], ComplexoInfo[i][cExZ3]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
		    		{
  				    	if (IsValidDynamic3DTextLabel(ComplexoInfo[i][cText]))
            				DestroyDynamic3DTextLabel(ComplexoInfo[i][cText]);

						ComplexoInfo[i][cPreco] = var;

						SalvarComplexo(i);
    					format(string, sizeof(string), "AdmCmd: Você alterou o preço do complexo %d para R$%d!", i, var);
 						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						format(string, sizeof(string), "\n%s\nVende-se\nR$%d!",ComplexoInfo[i][cNome],ComplexoInfo[i][cPreco]);
				    	ComplexoInfo[i][cText] = CreateDynamic3DTextLabel(string, 0x00A974FF, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
						return 1;
					}
		        }
			}
		}
		else if (!strcmp(opcao, "entrada", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acomplexo entrada [ID do Complexo]");
		    static Float:x,
	    			Float:y,
	    			Float:z;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (ComplexoInfo[var][cCriada])
  				{
  				    if (IsValidDynamic3DTextLabel(ComplexoInfo[var][cText]))
            			DestroyDynamic3DTextLabel(ComplexoInfo[var][cText]);

                    if (IsValidDynamicPickup(ComplexoInfo[var][cIcone]))
		    				DestroyDynamicPickup(ComplexoInfo[var][cIcone]);

                    if (IsValidDynamicPickup(ComplexoInfo[var][cIcone2]))
		    				DestroyDynamicPickup(ComplexoInfo[var][cIcone2]);
                    if (IsValidDynamicPickup(ComplexoInfo[var][cIcone3]))
		    				DestroyDynamicPickup(ComplexoInfo[var][cIcone3]);

    				ComplexoInfo[var][cExX] = x;
      				ComplexoInfo[var][cExY] = y;
        			ComplexoInfo[var][cExZ] = z;

					SalvarComplexo(var);
                    format(string, sizeof(string), "AdmCmd:  Posição de entrada do complexo %d alterado.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
 					format(string, sizeof(string), "\n%s", ComplexoInfo[var][cNome]);
					ComplexoInfo[var][cText] = CreateDynamic3DTextLabel(string, 0x00A974FF, ComplexoInfo[var][cExX], ComplexoInfo[var][cExY], ComplexoInfo[var][cExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
                    new complexid = var;
                    if(ComplexoInfo[complexid][complexIcone] != 0)
					{
						ComplexoInfo[complexid][cIcone] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
						ComplexoInfo[complexid][cIcone2] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX2], ComplexoInfo[complexid][cExY2], ComplexoInfo[complexid][cExZ2], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
						ComplexoInfo[complexid][cIcone3] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX3], ComplexoInfo[complexid][cExY3], ComplexoInfo[complexid][cExZ3], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
					}
					else
					{
					    ComplexoInfo[complexid][cIcone] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
					    ComplexoInfo[complexid][cIcone2] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX2], ComplexoInfo[complexid][cExY2], ComplexoInfo[complexid][cExZ2], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
					    ComplexoInfo[complexid][cIcone3] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX3], ComplexoInfo[complexid][cExY3], ComplexoInfo[complexid][cExZ3], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
					}
					return 1;
		        }
			}
		}
		else if (!strcmp(opcao, "entrada2", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acomplexo entrada2 [ID do Complexo]");
		    static Float:x,
	    			Float:y,
	    			Float:z;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (ComplexoInfo[var][cCriada])
  				{
  				    if (IsValidDynamic3DTextLabel(ComplexoInfo[var][cText]))
            			DestroyDynamic3DTextLabel(ComplexoInfo[var][cText]);

                    if (IsValidDynamicPickup(ComplexoInfo[var][cIcone]))
		    				DestroyDynamicPickup(ComplexoInfo[var][cIcone]);
                    if (IsValidDynamicPickup(ComplexoInfo[var][cIcone2]))
		    				DestroyDynamicPickup(ComplexoInfo[var][cIcone2]);
                    if (IsValidDynamicPickup(ComplexoInfo[var][cIcone3]))
		    				DestroyDynamicPickup(ComplexoInfo[var][cIcone3]);

    				ComplexoInfo[var][cExX2] = x;
      				ComplexoInfo[var][cExY2] = y;
        			ComplexoInfo[var][cExZ2] = z;

					SalvarComplexo(var);
                    format(string, sizeof(string), "AdmCmd: Posição de entrada 2 do complexo %d alterado.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
                    new complexid = var;
                    if(ComplexoInfo[complexid][complexIcone] != 0)
					{
						ComplexoInfo[complexid][cIcone] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
						ComplexoInfo[complexid][cIcone2] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX2], ComplexoInfo[complexid][cExY2], ComplexoInfo[complexid][cExZ2], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
						ComplexoInfo[complexid][cIcone3] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX3], ComplexoInfo[complexid][cExY3], ComplexoInfo[complexid][cExZ3], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
					}
					else
					{
						ComplexoInfo[complexid][cIcone] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
						ComplexoInfo[complexid][cIcone2] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX2], ComplexoInfo[complexid][cExY2], ComplexoInfo[complexid][cExZ2], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
						ComplexoInfo[complexid][cIcone3] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX3], ComplexoInfo[complexid][cExY3], ComplexoInfo[complexid][cExZ3], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
					}
					return 1;
		        }
			}
		}
		else if (!strcmp(opcao, "entrada3", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acomplexo entrada3 [ID do Complexo]");
		    static Float:x,
	    			Float:y,
	    			Float:z;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (ComplexoInfo[var][cCriada])
  				{
  				    if (IsValidDynamic3DTextLabel(ComplexoInfo[var][cText]))
            			DestroyDynamic3DTextLabel(ComplexoInfo[var][cText]);

                    if (IsValidDynamicPickup(ComplexoInfo[var][cIcone]))
		    				DestroyDynamicPickup(ComplexoInfo[var][cIcone]);
                    if (IsValidDynamicPickup(ComplexoInfo[var][cIcone2]))
		    				DestroyDynamicPickup(ComplexoInfo[var][cIcone2]);
					if (IsValidDynamicPickup(ComplexoInfo[var][cIcone3]))
		    				DestroyDynamicPickup(ComplexoInfo[var][cIcone3]);

    				ComplexoInfo[var][cExX3] = x;
      				ComplexoInfo[var][cExY3] = y;
        			ComplexoInfo[var][cExZ3] = z;

					SalvarComplexo(var);
                    format(string, sizeof(string), "AdmCmd: Posição de entrada 3 do complexo %d alterado.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
                    new complexid = var;
                    if(ComplexoInfo[complexid][complexIcone] != 0)
					{
						ComplexoInfo[complexid][cIcone] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
						ComplexoInfo[complexid][cIcone2] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX2], ComplexoInfo[complexid][cExY2], ComplexoInfo[complexid][cExZ2], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
						ComplexoInfo[complexid][cIcone3] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX3], ComplexoInfo[complexid][cExY3], ComplexoInfo[complexid][cExZ3], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
					}
					else
					{
						ComplexoInfo[complexid][cIcone] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
						ComplexoInfo[complexid][cIcone2] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX2], ComplexoInfo[complexid][cExY2], ComplexoInfo[complexid][cExZ2], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
						ComplexoInfo[complexid][cIcone3] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX3], ComplexoInfo[complexid][cExY3], ComplexoInfo[complexid][cExZ3], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
					}
					return 1;
		        }
			}
		}
		else if (!strcmp(opcao, "icone", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acomplexo icone [icone]");
			{
			    for(new i; i < MAX_COMPLEXOS; i++)
			    {
			        if (ComplexoInfo[i][cCriada])
		  			{
			    		if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
			    		{
			    		    ComplexoInfo[i][complexIcone] = var;

						    if (IsValidDynamicPickup(ComplexoInfo[i][cIcone]))
			   					DestroyDynamicPickup(ComplexoInfo[i][cIcone]);

                            if (IsValidDynamicPickup(ComplexoInfo[i][cIcone2]))
			   					DestroyDynamicPickup(ComplexoInfo[i][cIcone2]);

			   				new complexid = i;
			       			if(ComplexoInfo[complexid][complexIcone] != 0)
							{
								ComplexoInfo[complexid][cIcone] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
								ComplexoInfo[complexid][cIcone2] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX2], ComplexoInfo[complexid][cExY2], ComplexoInfo[complexid][cExZ2], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
								ComplexoInfo[complexid][cIcone3] = CreateDynamicPickup(ComplexoInfo[complexid][complexIcone], 23, ComplexoInfo[complexid][cExX3], ComplexoInfo[complexid][cExY3], ComplexoInfo[complexid][cExZ3], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);

							}
							else
							{
								ComplexoInfo[complexid][cIcone] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX], ComplexoInfo[complexid][cExY], ComplexoInfo[complexid][cExZ], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
								ComplexoInfo[complexid][cIcone2] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX2], ComplexoInfo[complexid][cExY2], ComplexoInfo[complexid][cExZ2], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
								ComplexoInfo[complexid][cIcone3] = CreateDynamicPickup(1314, 23, ComplexoInfo[complexid][cExX3], ComplexoInfo[complexid][cExY3], ComplexoInfo[complexid][cExZ3], -1, -1, -1, STREAMER_DISTANCIA_ICONE_COMPLEXO);
							}
							return 1;
						}
					}
				}
			}
		}
		else if (!strcmp(opcao, "saida", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acomplexo saida [ID do Complexo]");
		    static Float:x,
	    			Float:y,
	    			Float:z;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (ComplexoInfo[var][cCriada])
  				{
    				ComplexoInfo[var][cInX] = x;
      				ComplexoInfo[var][cInY] = y;
        			ComplexoInfo[var][cInZ] = z;
        			ComplexoInfo[var][cInt] = GetPlayerInterior(playerid);
        			format(string, sizeof(string), "AdmCmd: Posição de saida do complexo %d alterado.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					SalvarComplexo(var);
					return 1;
		        }
			}
		}
		else if (!strcmp(opcao, "saida2", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acomplexo saida2 [ID do Complexo]");
		    static Float:x,
	    			Float:y,
	    			Float:z;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (ComplexoInfo[var][cCriada])
  				{
    				ComplexoInfo[var][cInX2] = x;
      				ComplexoInfo[var][cInY2] = y;
        			ComplexoInfo[var][cInZ2] = z;
        			format(string, sizeof(string), "AdmCmd: Posição de saida do 2 complexo %d alterado.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					SalvarComplexo(var);
					return 1;
		        }
			}
		}
		else if (!strcmp(opcao, "saida3", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /acomplexo saida3 [ID do Complexo]");
		    static Float:x,
	    			Float:y,
	    			Float:z;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (ComplexoInfo[var][cCriada])
  				{
    				ComplexoInfo[var][cInX3] = x;
      				ComplexoInfo[var][cInY3] = y;
        			ComplexoInfo[var][cInZ3] = z;
        			format(string, sizeof(string), "AdmCmd: Posição de saida 3 do complexo %d alterado.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					SalvarComplexo(var);
					return 1;
		        }
			}
		}
		else if (!strcmp(opcao, "cplaca", true))
		{
		    for(new i; i < MAX_COMPLEXOS; i++)
		    {
		    	if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
		    	{
		    	    static Float:x,
	    			Float:y,
	    			Float:z;
					GetPlayerPos(playerid, x, y, z);

					if(IsValidDynamicObject(ComplexoInfo[i][cObjPlaca]))
					    DestroyDynamicObject(ComplexoInfo[i][cObjPlaca]);

                    format(string, sizeof(string), "AdmCmd: Placa de venda adicionada no complexo %d.", i);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					PlayerInfo[playerid][pEditandoPlacaC] = i;
		    	    ComplexoInfo[i][cObjPlaca] = CreateDynamicObject(19471, x, y+1, z, 0.0, 0.0, 0.0, 0, 0);
		    	    EditDynamicObject(playerid, ComplexoInfo[i][cObjPlaca]);
		    	    return 1;
		    	}
		    	else if((IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX2], ComplexoInfo[i][cExY2], ComplexoInfo[i][cExZ2]) || IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX3], ComplexoInfo[i][cExY3], ComplexoInfo[i][cExZ3]) ) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
		    	{
                    format(string, sizeof(string), "AdmCmd: A placa de venda só pode ser adicionada na porta principal do Complexo.");
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
		    	    return 1;
		    	}
			}
		}
		else if (!strcmp(opcao, "dplaca", true))
		{
		    for(new i; i < MAX_COMPLEXOS; i++)
		    {
		    	if(IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
		    	{
		    	    static Float:x,
	    			Float:y,
	    			Float:z;
					GetPlayerPos(playerid, x, y, z);

					if(IsValidDynamicObject(ComplexoInfo[i][cObjPlaca]))
					    DestroyDynamicObject(ComplexoInfo[i][cObjPlaca]);

                    format(string, sizeof(string), "AdmCmd: Placa de venda deletada do complexo %d.", i);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					ComplexoInfo[i][cPlacaX] = 0;
					ComplexoInfo[i][cPlacaY] = 0;
					ComplexoInfo[i][cPlacaZ] = 0;
					ComplexoInfo[i][cPlacaR] = 0;

					SalvarComplexo(i);
		    	    return 1;
		    	}
		    	else if((IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX2], ComplexoInfo[i][cExY2], ComplexoInfo[i][cExZ2]) || IsPlayerInRangeOfPoint(playerid, 1, ComplexoInfo[i][cExX3], ComplexoInfo[i][cExY3], ComplexoInfo[i][cExZ3])) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
		    	{
                    format(string, sizeof(string), "AdmCmd: A placa de venda só pode ser deletada na porta principal do Complexo.");
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
		    	    return 1;
		    	}
			}
		}
		else if (!strcmp(opcao, "ir", true))
  		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /acomplexo ir [ID do complexo]");
  			if(ComplexoInfo[var][cCriada] == 1)
  			{
			    SetPlayerPosFreeze(playerid,ComplexoInfo[var][cExX],ComplexoInfo[var][cExY], ComplexoInfo[var][cExZ],1);
				SetPlayerVirtualWorld(playerid,0);
				SetPlayerInterior(playerid,0);
	      		format(string, sizeof(string), "AdmCmd: Você teleportou-se até o complexo: %d.", var);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				return 1;
   		    }
   		    else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} ID do complexo inválido.");
		}
		else if (!strcmp(opcao, "vender", true))
  		{
            if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /acomplexo ir [ID do complexo]");
  			if(ComplexoInfo[var][cCriada] == 1)
  			{
    		    if (IsValidDynamic3DTextLabel(ComplexoInfo[var][cText]))
					DestroyDynamic3DTextLabel(ComplexoInfo[var][cText]);
   				format(string, sizeof(string), "AdmCmd: Você vendeu o complexo %d.", var);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				ComplexoInfo[var][cDono] = 0;
				ComplexoInfo[var][cAVenda] = 1;

				format(ComplexoInfo[var][cPerm1], 24, "Vazio");
	    		format(ComplexoInfo[var][cPerm2], 24, "Vazio");
	    		format(ComplexoInfo[var][cPerm3], 24, "Vazio");

				new houseid = var;
				if(IsValidDynamicObject(ComplexoInfo[houseid][cObjPlaca]))
    				DestroyDynamicObject(ComplexoInfo[houseid][cObjPlaca]);
				format(string, sizeof(string), "\nVende-se\nR$%d!",ComplexoInfo[houseid][cPreco]);
    			ComplexoInfo[houseid][cText] = CreateDynamic3DTextLabel(string, 0x00A974FF, ComplexoInfo[houseid][cExX], ComplexoInfo[houseid][cExY], ComplexoInfo[houseid][cExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1, -1);
			    if(ComplexoInfo[houseid][cPlacaX] != 0 && ComplexoInfo[houseid][cPlacaY] != 0 && ComplexoInfo[houseid][cPlacaZ] != 0)
				{
					ComplexoInfo[houseid][cObjPlaca] = CreateDynamicObject(19471, ComplexoInfo[houseid][cPlacaX], ComplexoInfo[houseid][cPlacaY], ComplexoInfo[houseid][cPlacaZ], 0.0, 0.0, ComplexoInfo[houseid][cPlacaR], 0, 0);
				}
			}
		}
	}
	return 1;
}
forward ComplexoCriada(houseid,playerid);
public ComplexoCriada(houseid,playerid)
{
    if(houseid != -1 && ComplexoInfo[houseid][cCriada] == 1)
    {
    	ComplexoInfo[houseid][cID] = cache_insert_id();
    	SalvarComplexo(houseid);
	}
	format(string, sizeof(string), "AdmCmd: Complexo %d criado!", houseid);
 	SendClientMessage(playerid, COLOR_LIGHTRED, string);
    return 1;
}
//============================================================================================================//
//  EMPRESAS SYSTEM - EMPRESAS SYSTEM - EMPRESAS SYSTEM - EMPRESAS SYSTEM - EMPRESAS SYSTEM - EMPRESAS SYSTEM - EMPRESAS SYSTEM
//============================================================================================================//
forward CarregandoEmpresas();
public CarregandoEmpresas()
{
    new Rows, Fields, totalempresas = 0;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
		for(new i ; i < Rows; i++) if(i < MAX_EMPRESAS)
		{
			new empid = cache_get_field_content_int(i, "eID");
		 	EmpInfo[empid][eID] = empid;

			EmpInfo[empid][eCriada] = cache_get_field_content_int(i, "Criada");
			EmpInfo[empid][eDono] = cache_get_field_content_int(i, "Dono");
			EmpInfo[empid][eExX] = cache_get_field_content_float(i, "ExX");
			EmpInfo[empid][eExY] = cache_get_field_content_float(i, "ExY");
			EmpInfo[empid][eExZ] = cache_get_field_content_float(i, "ExZ");
			EmpInfo[empid][eInX] = cache_get_field_content_float(i, "InX");
			EmpInfo[empid][eInY] = cache_get_field_content_float(i, "InY");
			EmpInfo[empid][eInZ] = cache_get_field_content_float(i, "InZ");
			EmpInfo[empid][eExWorld] = cache_get_field_content_int(i, "ExWorld");
			EmpInfo[empid][eExInt] = cache_get_field_content_int(i, "ExInt");
			EmpInfo[empid][eInt] = cache_get_field_content_int(i, "Int");
			EmpInfo[empid][ePreco] = cache_get_field_content_int(i, "Preco");
			EmpInfo[empid][eTrancada] = cache_get_field_content_int(i, "Trancada");
			EmpInfo[empid][ePlacaX] = cache_get_field_content_float(i, "PlacaX");
			EmpInfo[empid][ePlacaY] = cache_get_field_content_float(i, "PlacaY");
			EmpInfo[empid][ePlacaZ] = cache_get_field_content_float(i, "PlacaZ");
			EmpInfo[empid][ePlacaR] = cache_get_field_content_float(i, "PlacaR");
			EmpInfo[empid][eAVenda] = cache_get_field_content_int(i, "AVenda");
			EmpInfo[empid][eTelCont] = cache_get_field_content_int(i, "TelCont");
            cache_get_field_content(i, "Nome", EmpInfo[empid][eNome], Pipeline, 56);
			EmpInfo[empid][eTipo] = cache_get_field_content_int(i, "Tipo");
			EmpInfo[empid][eBank] = cache_get_field_content_int(i, "Bank");
			EmpInfo[empid][eVX] = cache_get_field_content_float(i, "eVX");
			EmpInfo[empid][eVY] = cache_get_field_content_float(i, "eVY");
			EmpInfo[empid][eVZ] = cache_get_field_content_float(i, "eVZ");
			EmpInfo[empid][eVR] = cache_get_field_content_float(i, "eVR");
			EmpInfo[empid][ePagaProd] = cache_get_field_content_int(i, "PagaProd");
			EmpInfo[empid][eReqProd] = cache_get_field_content_int(i, "ReqProd");
			EmpInfo[empid][eProdutos] = cache_get_field_content_int(i, "Produtos");
			EmpInfo[empid][eFuelPrice] = cache_get_field_content_int(i, "FuelPrice");
            cache_get_field_content(i, "Perm1", EmpInfo[empid][ePerm1], Pipeline, 24);
            cache_get_field_content(i, "Perm2", EmpInfo[empid][ePerm2], Pipeline, 24);
            cache_get_field_content(i, "Perm3", EmpInfo[empid][ePerm3], Pipeline, 24);
			//=============================================
			//Produtos 24/7 e Posto
			EmpInfo[empid][eCelulares] = cache_get_field_content_int(i, "eCelulares");
			EmpInfo[empid][eCelularPreco] = cache_get_field_content_int(i, "eCelularPreco");
			EmpInfo[empid][eGalao] = cache_get_field_content_int(i, "eGalao");
			EmpInfo[empid][eGalaoPreco] = cache_get_field_content_int(i, "eGalaoPreco");
			EmpInfo[empid][eToolkitPreco] = cache_get_field_content_int(i, "eToolkitPreco");
			EmpInfo[empid][eCigarroPreco] = cache_get_field_content_int(i, "eCigarroPreco");
			EmpInfo[empid][eRadioPreco] = cache_get_field_content_int(i, "eRadioPreco");
			EmpInfo[empid][eCameraPreco] = cache_get_field_content_int(i, "eCameraPreco");
			EmpInfo[empid][eLanchePreco] = cache_get_field_content_int(i, "eLanchePreco");
			EmpInfo[empid][eMascPreco] = cache_get_field_content_int(i, "eMascPreco");
			EmpInfo[empid][eBoomboxPreco] = cache_get_field_content_int(i, "eBoomboxPreco");
			EmpInfo[empid][eCervejaPreco] = cache_get_field_content_int(i, "eCervejaPreco");
   			EmpInfo[empid][eCompraTipo] = cache_get_field_content_int(i, "eCompraTipo");
   			EmpInfo[empid][eLeasing] = cache_get_field_content_int(i, "eLeasing");
   			EmpInfo[empid][eEntradaPrice] = cache_get_field_content_int(i, "eEntradaPrice");

   			EmpInfo[empid][eReqFuel] = cache_get_field_content_int(i, "eReqFuel");
   			EmpInfo[empid][eReqFuelPay] = cache_get_field_content_int(i, "eReqFuelPay");
			//=============================================
			cache_get_field_content(i, "eXMR", EmpInfo[empid][eXMR], Pipeline, 256);

			if(EmpInfo[empid][eCriada] == 1)
			{
			    totalempresas++;
                if(EmpInfo[empid][eAVenda] == 1)
				{
				    if(EmpInfo[empid][eLeasing] > 0)
				        format(string, sizeof(string), "%s\nAluga-se\nR$%d!",EmpInfo[empid][eNome],EmpInfo[empid][eLeasing]);
				    else
				    	format(string, sizeof(string), "%s\nVende-se\nR$%d!",EmpInfo[empid][eNome],EmpInfo[empid][ePreco]);
				    EmpInfo[empid][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[empid][eExX], EmpInfo[empid][eExY], EmpInfo[empid][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[empid][eExWorld], EmpInfo[empid][eExInt]);
				    if(EmpInfo[empid][ePlacaX] != 0 && EmpInfo[empid][ePlacaY] != 0 && EmpInfo[empid][ePlacaZ] != 0)
					{
						EmpInfo[empid][eObjPlaca] = CreateDynamicObject(19471, EmpInfo[empid][ePlacaX], EmpInfo[empid][ePlacaY], EmpInfo[empid][ePlacaZ], 0.0, 0.0, EmpInfo[empid][ePlacaR], EmpInfo[empid][eExWorld], EmpInfo[empid][eExInt]);
					}
				}
				else if(EmpInfo[empid][eTelCont] != 0)
				{
				    format(string, sizeof(string), "%s\nVende-se\nContato: %d!",EmpInfo[empid][eNome],EmpInfo[empid][ePreco]);
				    EmpInfo[empid][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[empid][eExX], EmpInfo[empid][eExY], EmpInfo[empid][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[empid][eExWorld], EmpInfo[empid][eExInt]);
				    if(EmpInfo[empid][ePlacaX] != 0 && EmpInfo[empid][ePlacaY] != 0 && EmpInfo[empid][ePlacaZ] != 0)
					{
						EmpInfo[empid][eObjPlaca] = CreateDynamicObject(19471, EmpInfo[empid][ePlacaX], EmpInfo[empid][ePlacaY], EmpInfo[empid][ePlacaZ], 0.0, 0.0, EmpInfo[empid][ePlacaR], EmpInfo[empid][eExWorld], EmpInfo[empid][eExInt]);
					}
				}
				else
				{
				    if(EmpInfo[empid][eEntradaPrice] > 0)
				        format(string, sizeof(string), "%s\nEntrada: R$%d",EmpInfo[empid][eNome], EmpInfo[empid][eEntradaPrice]);
				    else
				    	format(string, sizeof(string), "%s",EmpInfo[empid][eNome]);
				    EmpInfo[empid][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[empid][eExX], EmpInfo[empid][eExY], EmpInfo[empid][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[empid][eExWorld], EmpInfo[empid][eExInt]);
				}
				EmpInfo[empid][eIcone] = CreateDynamicPickup(1272, 23, EmpInfo[empid][eExX], EmpInfo[empid][eExY], EmpInfo[empid][eExZ], EmpInfo[empid][eExWorld], -1, -1, STREAMER_DISTANCIA_ICONE_EMPRESA);

				if (EmpInfo[i][eTipo] == EMP_TIPO_247)
				{
					format(string, sizeof(string), "SELECT * FROM `pumps` WHERE `ID` = '%d'", EmpInfo[i][eID]);
					mysql_function_query(Pipeline, string, true, "Pump_Load", "d", i);
				}
			}
		}
	}
	printf("[CARREGADO] Empresas: %d",totalempresas);
	return 1;
}
SalvarEmpresa(empid)
{
	if (EmpInfo[empid][eCriada] == 1)
	{
		static query[2048];
		format(query, sizeof(query), "UPDATE `empresas` SET `Criada` = '%d', `Dono` = '%d', `ExX` = '%.4f', `ExY` = '%.4f', `ExZ` = '%.4f', `InX` = '%.4f', `InY` = '%.4f', `InZ` = '%.4f', `ExWorld` = '%d', `ExInt` = '%d', `Int` = '%d',  `Preco` = '%d' WHERE `eID` = '%d'",
			EmpInfo[empid][eCriada],
			EmpInfo[empid][eDono],
			EmpInfo[empid][eExX],
			EmpInfo[empid][eExY],
			EmpInfo[empid][eExZ],
			EmpInfo[empid][eInX],
			EmpInfo[empid][eInY],
			EmpInfo[empid][eInZ],
			EmpInfo[empid][eExWorld],
			EmpInfo[empid][eExInt],
			EmpInfo[empid][eInt],
			EmpInfo[empid][ePreco],
		    EmpInfo[empid][eID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

		format(query, sizeof(query), "UPDATE `empresas` SET `Trancada` = '%d',  `PlacaX` = '%.4f', `PlacaY` = '%.4f', `PlacaZ` = '%.4f', `PlacaR` = '%.4f', `AVenda` = '%d', `TelCont`= '%d', `Nome` = '%s', `Tipo` = '%d', `Bank` = '%d' WHERE `eID` = '%d'",
			EmpInfo[empid][eTrancada],
			EmpInfo[empid][ePlacaX],
			EmpInfo[empid][ePlacaY],
			EmpInfo[empid][ePlacaZ],
			EmpInfo[empid][ePlacaR],
			EmpInfo[empid][eAVenda],
			EmpInfo[empid][eTelCont],
			EmpInfo[empid][eNome],
			EmpInfo[empid][eTipo],
			EmpInfo[empid][eBank],
		    EmpInfo[empid][eID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

		format(query, sizeof(query), "UPDATE `empresas` SET `eVX` = '%.4f', `eVY` = '%.4f', `eVZ` = '%.4f', `eVR` = '%.4f' WHERE `eID` = '%d'",
			EmpInfo[empid][eVX],
			EmpInfo[empid][eVY],
			EmpInfo[empid][eVZ],
			EmpInfo[empid][eVR],
			EmpInfo[empid][eID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

		format(query, sizeof(query), "UPDATE `empresas` SET `PagaProd` = '%d', `ReqProd` = '%d', `Produtos` = '%d', `FuelPrice` = '%d', `Perm1` = '%s', `Perm2` = '%s', `Perm3` = '%s', `eCelulares` = '%d', `eCelularPreco` = '%d', `eGalao` = '%d', `eGalaoPreco` = '%d',`eToolkitPreco`='%d',`eCigarroPreco`='%d',`eRadioPreco`='%d',`eCameraPreco`='%d',`eLanchePreco`='%d', `eMascPreco`='%d',`eBoomboxPreco`='%d', `eXMR`='%s',`eCervejaPreco`='%d' WHERE `eID` = '%d'",
			EmpInfo[empid][ePagaProd],
    		EmpInfo[empid][eReqProd],
    		EmpInfo[empid][eProdutos],
    		EmpInfo[empid][eFuelPrice],
    		EmpInfo[empid][ePerm1],
    		EmpInfo[empid][ePerm2],
    		EmpInfo[empid][ePerm3],
    		EmpInfo[empid][eCelulares],
    		EmpInfo[empid][eCelularPreco],
    		EmpInfo[empid][eGalao],
    		EmpInfo[empid][eGalaoPreco],
    		EmpInfo[empid][eToolkitPreco],
			EmpInfo[empid][eCigarroPreco],
			EmpInfo[empid][eRadioPreco],
			EmpInfo[empid][eCameraPreco],
			EmpInfo[empid][eLanchePreco],
			EmpInfo[empid][eMascPreco],
			EmpInfo[empid][eBoomboxPreco],
			EmpInfo[empid][eXMR],
			EmpInfo[empid][eCervejaPreco],
		    EmpInfo[empid][eID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

		format(query, sizeof(query), "UPDATE `empresas` SET `eCompraTipo`='%d', `eLeasing`='%d', `eEntradaPrice`='%d', `eReqFuel`='%d', `eReqFuelPay`='%d' WHERE `eID` = '%d'",
   		EmpInfo[empid][eCompraTipo],
   		EmpInfo[empid][eLeasing],
   		EmpInfo[empid][eEntradaPrice],
   		EmpInfo[empid][eReqFuel],
   		EmpInfo[empid][eReqFuelPay],
	    EmpInfo[empid][eID]
		);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "i", THREAD_NO_RESULT);

	}
	return 1;
}

Dialog:VendendoEmpresa(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    switch(listitem)
	    {
	    	case 0:
	    	{
	    	    if(EmpInfo[VendoEmpresa[playerid]][eLeasing] > 0) {
	                Dialog_Show(playerid, VendendoEmpresa_Leasing, DIALOG_STYLE_MSGBOX, "Confirmação de Abandono", "A sua empresa é alugada, realmente deseja abandona-la?", "Sim", "Cancelar");
	    	    }
	    	    else {
		    	    format(string, sizeof(string), "Você tem certeza que deseja vender a sua empresa (%d) por R$%d?\n(Ao vender a empresa para o estado, você recebe apenas a metade do valor pago)",VendoEmpresa[playerid], (EmpInfo[VendoEmpresa[playerid]][ePreco]/2));
	                Dialog_Show(playerid, VendendoEmpresa1, DIALOG_STYLE_MSGBOX, "Confirmação de Venda", string, "Sim", "Cancelar");
                }
			}
			case 1:
			{
                Dialog_Show(playerid, VendendoEmpresa2, DIALOG_STYLE_INPUT, "Venda da Empresa", "Digite o ID do jogador.", "Avançar", "Cancelar");
			}
			case 2:
			{
                Dialog_Show(playerid, VendendoEmpresa3, DIALOG_STYLE_INPUT, "Venda da Empresa", "Digite um telefone para contato.", "Avançar", "Cancelar");
			}
   			case 3:
			{
			    new i = VendendoEmpresa[playerid][2];
			    format(string, sizeof(string), "[Empresa] Você retirou a placa de vende-se.");
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				EmpInfo[i][eTelCont] = 0;
				if (IsValidDynamic3DTextLabel(EmpInfo[i][EmpText]))
					DestroyDynamic3DTextLabel(EmpInfo[i][EmpText]);
				if(IsValidDynamicObject(EmpInfo[i][eObjPlaca]))
    				DestroyDynamicObject(EmpInfo[i][eObjPlaca]);
				format(string, sizeof(string), "%s",EmpInfo[i][eNome]);
				EmpInfo[i][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[i][eExWorld], EmpInfo[i][eExInt]);
                SalvarEmpresa(i);
			}
		}
	}
	return 1;
}
Dialog:VendendoEmpresa3(playerid, response, listitem, inputtext[])
{
    new telefone = strval(inputtext);
    new i = VendendoEmpresa[playerid][2];
    EmpInfo[i][eTelCont] = telefone;

    if (IsValidDynamic3DTextLabel(EmpInfo[i][EmpText]))
		DestroyDynamic3DTextLabel(EmpInfo[i][EmpText]);
	SalvarEmpresa(i);
	format(string, sizeof(string), "[Empresa] Placa de vende-se colocada! Aguarde até alguém lhe ligar.");
	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "%s\nVende-se!\nContato: %d",EmpInfo[i][eNome],telefone);
	EmpInfo[i][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[i][eExWorld], EmpInfo[i][eExInt]);
    if(EmpInfo[i][ePlacaX] != 0 && EmpInfo[i][ePlacaY] != 0 && EmpInfo[i][ePlacaZ] != 0)
	{
		EmpInfo[i][eObjPlaca] = CreateDynamicObject(19471, EmpInfo[i][ePlacaX], EmpInfo[i][ePlacaY], EmpInfo[i][ePlacaZ], 0.0, 0.0, EmpInfo[i][ePlacaR], EmpInfo[i][eExWorld], EmpInfo[i][eExInt]);
	}
	return 1;
}
Dialog:VendendoEmpresa2(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    new outro = strval(inputtext);
	    if(!IsPlayerConnected(outro)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido!");
	    if(!IsPlayerNearPlayer(playerid, outro, 8.0))  return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player não está próximo a você!");
	    Dialog_Show(playerid, VendendoEmpresa21, DIALOG_STYLE_INPUT, "Venda da Empresa", "Digite o valor que você deseja cobrar pela empresa.", "Avançar", "Cancelar");
	    VendendoEmpresa[playerid][0] = outro;
	    VendendoEmpresa[outro][0] = playerid;
	    VendendoEmpresa[outro][2] = VendendoEmpresa[playerid][2];
	}
	return 1;
}
Dialog:VendendoEmpresa21(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    new valor = strval(inputtext);
	    if(valor > 1 && valor < 9999999)
	    {
		    if(!IsPlayerConnected(VendendoEmpresa[playerid][0])) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID inválido!");
		    if(!IsPlayerNearPlayer(playerid, VendendoEmpresa[playerid][0], 8.0))  return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} O comprador não está mais próximo a você!");
		    format(string, sizeof(string), "%s está lhe oferecendo a empresa %d por R$%d.",PlayerName(playerid, 1), VendendoEmpresa[playerid][2], valor);
	     	Dialog_Show(VendendoEmpresa[playerid][0], VendendoEmpresa22, DIALOG_STYLE_MSGBOX, "Confirmação de Venda", string, "Comprar", "Cancelar");
		    VendendoEmpresa[playerid][1] = valor;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor inválido!");
		    Dialog_Show(playerid, VendendoEmpresa21, DIALOG_STYLE_INPUT, "Venda da Empresa", "Digite o valor que você deseja cobrar pela empresa.", "Oferecer", "Cancelar");
		}
	}
	return 1;
}
Dialog:VendendoEmpresa22(playerid, response, listitem, inputtext[])
{
    if (!response)
    {
        format(string, sizeof(string), "[Empresa] %s recusou a sua oferta e não comprou a empresa.",PlayerName(playerid, 1));
        SendClientMessage(VendendoEmpresa[playerid][0], COLOR_LIGHTRED, string);
        SendClientMessage(playerid, COLOR_LIGHTRED, "[Empresa] Você recusou a oferta de compra da empresa!");
    }
	else
	{
	    new Vendedor = VendendoEmpresa[playerid][0];
	    new empid = VendendoEmpresa[Vendedor][2];

	    if(GetPlayerMoneyCA(playerid) >= VendendoEmpresa[Vendedor][1])
	    {
	        if(!IsPlayerConnected(Vendedor))  return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O vendedor não está mais online.");
	        if(PlayerInfo[Vendedor][pID] != EmpInfo[empid][eDono]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Ocorreu um erro durante a venda da residencia, contate um admin se preciso.");
	        format(string, sizeof(string), "[Empresa] %s aceitou sua oferta e comprou a sua empresa por R$%d. (Empresa: %d).",PlayerName(playerid, 1), VendendoEmpresa[Vendedor][1], empid);
	        SendClientMessage(VendendoEmpresa[playerid][0], COLOR_LIGHTGREEN, string);
	        SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Empresa] Você aceitou a oferta e comprou a empresa!");

			GivePlayerMoneyCA(playerid,-VendendoEmpresa[Vendedor][1]);
			GivePlayerMoneyCA(Vendedor,VendendoEmpresa[Vendedor][1]);

	        EmpInfo[empid][eDono] = PlayerInfo[playerid][pID];
			EmpInfo[empid][eAVenda] = 0;

			if(IsValidDynamicObject(EmpInfo[empid][eObjPlaca]))
				DestroyDynamicObject(EmpInfo[empid][eObjPlaca]);

			SalvarEmpresa(empid);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro suficiente para realizar essa compra.");
   			format(string, sizeof(string), "[Empresa] %s não tem essa quantia em dinheiro para comprar a empresa.",PlayerName(playerid, 1), VendendoEmpresa[Vendedor][1], empid);
	        SendClientMessage(VendendoEmpresa[playerid][0], COLOR_LIGHTRED, string);
		}
	}
	return 1;
}
Dialog:VendendoEmpresa1(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    if(VendoEmpresa[playerid] != 9999)
		{
  			if(EmpInfo[VendoEmpresa[playerid]][eDono] == PlayerInfo[playerid][pID])
    		{
   				format(string, sizeof(string), "[Empresa] Você vendeu a sua empresa (%d) por R$%d para o estado.", VendoEmpresa[playerid], EmpInfo[VendoEmpresa[playerid]][ePreco]/2);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				EmpInfo[VendoEmpresa[playerid]][eDono] = 0;
				EmpInfo[VendoEmpresa[playerid]][eAVenda] = 1;

				GivePlayerMoneyCA(playerid,(EmpInfo[VendoEmpresa[playerid]][ePreco]/2));

				if(EmpInfo[VendoEmpresa[playerid]][ePreco] == 0) EmpInfo[VendoEmpresa[playerid]][ePreco] = 50000;

				new empid = VendoEmpresa[playerid];
				if(IsValidDynamicObject(EmpInfo[empid][eObjPlaca]))
    				DestroyDynamicObject(EmpInfo[empid][eObjPlaca]);
				format(string, sizeof(string), "%s\nVende-se\nR$%d!",EmpInfo[empid][eNome],EmpInfo[empid][ePreco]);
    			EmpInfo[empid][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[empid][eExX], EmpInfo[empid][eExY], EmpInfo[empid][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[empid][eExWorld], EmpInfo[empid][eExInt]);
			    if(EmpInfo[empid][ePlacaX] != 0 && EmpInfo[empid][ePlacaY] != 0 && EmpInfo[empid][ePlacaZ] != 0)
				{
					EmpInfo[empid][eObjPlaca] = CreateDynamicObject(19471, EmpInfo[empid][ePlacaX], EmpInfo[empid][ePlacaY], EmpInfo[empid][ePlacaZ], 0.0, 0.0, EmpInfo[empid][ePlacaR], EmpInfo[empid][eExWorld], EmpInfo[empid][eExInt]);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Você se afastou da empresa, venda cancelada.");
	}
	return 1;
}

Dialog:VendendoEmpresa_Leasing(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    if(VendoEmpresa[playerid] != 9999)
		{
  			if(EmpInfo[VendoEmpresa[playerid]][eDono] == PlayerInfo[playerid][pID])
    		{
				SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Empresa] Você abandonou a sua empresa, o aluguel dela não será mais cobrado.");
				EmpInfo[VendoEmpresa[playerid]][eDono] = 0;
				EmpInfo[VendoEmpresa[playerid]][eAVenda] = 1;
				EmpInfo[VendoEmpresa[playerid]][eLeasing] = 0;

				if(EmpInfo[VendoEmpresa[playerid]][ePreco] == 0) EmpInfo[VendoEmpresa[playerid]][ePreco] = 50000;

				new empid = VendoEmpresa[playerid];
				if(IsValidDynamicObject(EmpInfo[empid][eObjPlaca]))
    				DestroyDynamicObject(EmpInfo[empid][eObjPlaca]);
				format(string, sizeof(string), "%s\nVende-se\nR$%d!",EmpInfo[empid][eNome],EmpInfo[empid][ePreco]);
    			EmpInfo[empid][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[empid][eExX], EmpInfo[empid][eExY], EmpInfo[empid][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[empid][eExWorld], EmpInfo[empid][eExInt]);
			    if(EmpInfo[empid][ePlacaX] != 0 && EmpInfo[empid][ePlacaY] != 0 && EmpInfo[empid][ePlacaZ] != 0)
				{
					EmpInfo[empid][eObjPlaca] = CreateDynamicObject(19471, EmpInfo[empid][ePlacaX], EmpInfo[empid][ePlacaY], EmpInfo[empid][ePlacaZ], 0.0, 0.0, EmpInfo[empid][ePlacaR], EmpInfo[empid][eExWorld], EmpInfo[empid][eExInt]);
				}
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Você se afastou da empresa, venda cancelada.");
	}
	return 1;
}

CMD:verempresas(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;
    new idx = 0;
    new tmp[64];
    tmp = strtok(params,idx);
    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USE: /verempresas [id do player]"); return 1; }
    new other = ReturnUser(tmp);
    if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_WHITE,"{FF6347}ERRO:{FFFFFF} Jogador não conectado."); return 1; }

	new empresas = 0, tipo[64];
    for(new i; i < MAX_EMPRESAS; i++)
    {
        if(EmpInfo[i][eCriada])
		{
		    if(EmpInfo[i][eDono] == PlayerInfo[other][pID])
    		{
    		    if(empresas == 0)
				{
					format(string, sizeof(string), "___________Empresas de %s (#%d)___________", PlayerName(playerid, 0),other);
    		    	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				}
				switch(EmpInfo[i][eTipo])
				{
					case 6: format(tipo, sizeof(tipo), "Posto de Gasolina & 24/7");
					default: format(tipo, sizeof(tipo), "Outros");
				}

    		    format(string, sizeof(string), "[%d] %s | Produtos: %d | Valor: %d | Localização: %s | Tipo: %s",i,EmpInfo[i][eNome],EmpInfo[i][eProdutos],EmpInfo[i][ePreco],GetLocation(EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]), tipo);
				SendClientMessage(playerid, COLOR_WHITE, string);
				empresas++;
    		}
		}
	}
	if(empresas > 0)
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma empresa.");
	return 1;
}

Dialog:ConfirmaCompraEmpresa(playerid, response, listitem, inputtext[])
{
    if (!response) return 1;
	else
	{
	    new i = VendoEmpresa[playerid];
	    if(i != 9999)
	    {
		    if(EmpInfo[i][eAVenda])
		    {
		        if(EmpInfo[i][eLeasing] == 0){
		            format(string, sizeof(string), "[Empresa]  Você comprou a empresa %d por R$%d.",i, EmpInfo[i][ePreco]);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		            GivePlayerMoneyCA(playerid,-EmpInfo[i][ePreco]);
		        }
		        else {
		            format(string, sizeof(string), "[Empresa]  Você alugou a empresa [%d] %s por R$%d semanais, que serão descontados de você todo domingo as 18:00.",i, EmpInfo[i][eNome], EmpInfo[i][ePreco]);
					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
		        }

				if(IsValidDynamicObject(EmpInfo[i][eObjPlaca]))
		 			DestroyDynamicObject(EmpInfo[i][eObjPlaca]);
		    	if (IsValidDynamic3DTextLabel(EmpInfo[i][EmpText]))
					DestroyDynamic3DTextLabel(EmpInfo[i][EmpText]);

                format(string, sizeof(string), "%s",EmpInfo[i][eNome]);
				EmpInfo[i][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[i][eExWorld], EmpInfo[i][eExInt]);

				EmpInfo[i][eDono] = PlayerInfo[playerid][pID];
				EmpInfo[i][eAVenda] = 0;
				SalvarEmpresa(i);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Essa empresa não está mais a venda.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está mais próximo da empresa.");
	}
}



CMD:nomeemp(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new type[255];
	if(sscanf(params, "s[255]", type)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /nomeemp [Nome da Empresa]");
	else
	{
		for(new i; i < MAX_EMPRESAS; i++)
	 	{
			if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
	 		{
		        if(EmpInfo[i][eCriada])
	  			{
	  			    if(EmpInfo[i][eDono] >= PlayerInfo[playerid][pID] || PlayerInfo[playerid][pAdmin] >= 5)
	  			    {
	  			        if(strfind(type, "'") != -1)
						{
						    SendClientMessage(playerid, COLOR_LIGHTGREEN, "ERRO:{FFFFFF} Você não pode colocar caracteres especiais no nome da empresa.");
						    return 1;
						}
		    			if (IsValidDynamic3DTextLabel(EmpInfo[i][EmpText]))
	    					DestroyDynamic3DTextLabel(EmpInfo[i][EmpText]);

						strmid(EmpInfo[i][eNome], type, 0, strlen(type), 255);

						SalvarEmpresa(i);
	    				format(string, sizeof(string), "[Empresa] Você alterou o nome da empresa %d para %s.", i, EmpInfo[i][eNome]);
	 					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	 					format(string, sizeof(string), "%s",EmpInfo[i][eNome]);
						EmpInfo[i][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[i][eExWorld], EmpInfo[i][eExInt]);
						return 1;
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é o dono desta empresa.");
		        }
			}
		}
	}
	return 1;
}

CMD:precogasolina(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new var;
	if(sscanf(params, "I(9999)", var)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /precogasolina [Valor]");
	else
	{
		for(new i; i < MAX_EMPRESAS; i++)
	 	{
			if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
	 		{
		        if(EmpInfo[i][eCriada])
	  			{
	  			    if(EmpInfo[i][eDono] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pAdmin] >= 5)
	  			    {
		    	    	if(var < 1 || var > 10) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /precogasolina [Valor (Min: 1 | Max: 10)]");
						format(string, sizeof(string), "[Empresa] Você ajustou o valor da gasolina de %d para %d.", EmpInfo[i][eFuelPrice], var);
	 					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	 					EmpInfo[i][eFuelPrice] = var;
						SalvarEmpresa(i);
					}
				}
			}
		}
	}
	return 1;
}

CMD:aemp(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
	new opcao[24], var;
	if (sscanf(params, "s[24]I(9999)", opcao,var))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"USE: /aemp [opção] [Variavel]");
		SendClientMessage(playerid, COLOR_LIGHTRED,"|criar |id |ir |entrada |saida |cplaca |dplaca |preco |trancada |info |leasing");
        SendClientMessage(playerid, COLOR_LIGHTRED,"|tipo |tipos |vspawn |reqprod |pagacarga |banco |FuelPrice |vender |produtos");
		return 1;
	}
	else
	{
	    if (!strcmp(opcao, "tipos", true)) {
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "___________Tipos de Empresas___________");
			SendClientMessage(playerid, COLOR_GREY, "1: Seguros de Veículos | 6: Posto de Gasolina/ 247 | 7: Roupas/Itens | 8: Ammu Nation | 10: Loja de Apostas | 55: Ferro Velho");
			SendClientMessage(playerid, COLOR_GREY, "20: Banco | 21: Pawn Shop | 22: Burger Shot | 23: Concessionária | 25: escritorio | 24: Bar | 26: Stacked | 27: Cluckin");
			SendClientMessage(playerid, COLOR_GREY, "50: Centro de Licenças | 51: Centro de empregos | 58: Loja de Celulares | 9: Transporte de Valores | 57 - Farmacia");
			return 1;
		}
		if (!strcmp(opcao, "leasing", true))
		{
			for(new i; i < MAX_EMPRESAS; i++)
		    {
		    	if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
		    	{
		    	    if(EmpInfo[i][eDono] != 0) return SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Você não pode setar leasing para uma empresa que já tem dono.");

		    	    format(string, sizeof(string), "AdmCmd: Leasing setado para: R$%d por semana.", var);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);

					EmpInfo[i][eLeasing] = var;

					new empid = i;
					if (IsValidDynamic3DTextLabel(EmpInfo[empid][EmpText]))
						DestroyDynamic3DTextLabel(EmpInfo[empid][EmpText]);

					if(IsValidDynamicObject(EmpInfo[empid][eObjPlaca]))
	    				DestroyDynamicObject(EmpInfo[empid][eObjPlaca]);

					format(string, sizeof(string), "%s\nAluga-se\nR$%d!",EmpInfo[empid][eNome],EmpInfo[empid][eLeasing]);
	    			EmpInfo[empid][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[empid][eExX], EmpInfo[empid][eExY], EmpInfo[empid][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[empid][eExWorld], EmpInfo[empid][eExInt]);

					if(EmpInfo[empid][ePlacaX] != 0 && EmpInfo[empid][ePlacaY] != 0 && EmpInfo[empid][ePlacaZ] != 0)
						EmpInfo[empid][eObjPlaca] = CreateDynamicObject(19471, EmpInfo[empid][ePlacaX], EmpInfo[empid][ePlacaY], EmpInfo[empid][ePlacaZ], 0.0, 0.0, EmpInfo[empid][ePlacaR], EmpInfo[empid][eExWorld], EmpInfo[empid][eExInt]);
				}
			}
			return 1;
		}
	    else if (!strcmp(opcao, "criar", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /aemp criar [preço]");
		    static Float:x,
	    			Float:y,
	    			Float:z,
					Float:angle;
			if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
			{
		        for (new i = 1; i != MAX_EMPRESAS; i ++)
				{
	    			if (!EmpInfo[i][eCriada])
		    		{
		    		    EmpInfo[i][eCriada] = 1;
  		        		EmpInfo[i][eDono] = 0;
  		        		EmpInfo[i][ePreco] = var;
  		        		EmpInfo[i][eTipo] = 0;

  		        		EmpInfo[i][eExX] = x;
  		        		EmpInfo[i][eExY] = y;
  		        		EmpInfo[i][eExZ] = z;

  		        		EmpInfo[i][eInX] = 0;
						EmpInfo[i][eInY] = 0;
						EmpInfo[i][eInZ] = 0;
						EmpInfo[i][eInt] = 0;

						format(EmpInfo[i][ePerm1], 24, "Vazio");
						format(EmpInfo[i][ePerm2], 24, "Vazio");
						format(EmpInfo[i][ePerm3], 24, "Vazio");

						EmpInfo[i][eExWorld] = GetPlayerVirtualWorld(playerid);
						EmpInfo[i][eExInt] = GetPlayerInterior(playerid);

						EmpInfo[i][eTrancada] = 1;
						EmpInfo[i][eAVenda] = 1;

						mysql_function_query(Pipeline, "INSERT INTO `empresas` (`Dono`) VALUES(0)", false, "EmpresaCriada", "dd", i,playerid);
						//SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Empresa criada com sucesso.");
						format(string, sizeof(string), "%s\nVende-se\nR$%d!",EmpInfo[i][eNome],EmpInfo[i][ePreco]);
						EmpInfo[i][eIcone] = CreateDynamicPickup(1272, 23, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ], -1, -1, -1, STREAMER_DISTANCIA_ICONE_EMPRESA);
                		EmpInfo[i][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[i][eExWorld], EmpInfo[i][eExInt]);
						return i;
					}
		        }
			}
		}
		else if (!strcmp(opcao, "FuelPrice", true))
		{
		    for(new i; i < MAX_EMPRESAS; i++)
		    {
		    	if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
		    	{
		    	    if(var < 1 || var > 15) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /aemp FuelPrice [Min: 1 | Max: 15]");
					EmpInfo[i][eFuelPrice] = var;

					SalvarEmpresa(i);
					SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s setou o preço da gasolina da empresa ID: %d.", PlayerName(playerid, 0), i);
				}
			}
		}
		else if (!strcmp(opcao, "reqprod", true))
		{
		    for(new i; i < MAX_EMPRESAS; i++)
		    {
		    	if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
		    	{
		    	    if(var < 1 || var > 5000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /aemp reqprod [Min: 1 | Max: 5000]");
					EmpInfo[i][eReqProd] = var;

					SalvarEmpresa(i);
					SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s setou os produtos da empresa ID: %d.", PlayerName(playerid, 0), i);
				}
			}
		}
		else if (!strcmp(opcao, "banco", true))
		{
		    for(new i; i < MAX_EMPRESAS; i++)
		    {
		    	if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
		    	{
		    	    if(var < 0 || var > 9999999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /aemp banco [Min: 1 | Max: 999999]");
					EmpInfo[i][eBank] = var;

					SalvarEmpresa(i);
					SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s alterou o cofre da empresa ID: %d para %d.", PlayerName(playerid, 0), i, var);
				}
			}
		}
		else if (!strcmp(opcao, "pagaprod", true))
		{
		    for(new i; i < MAX_EMPRESAS; i++)
		    {
		    	if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
		    	{
					if(var < 1 || var > 999999) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /aemp pagacarga [Min: 1 | Max: 999999]");
					EmpInfo[i][ePagaProd] = var;

					SalvarEmpresa(i);
					SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s alterou o quando a empresa ID: %d paga por Carga/Litro %d.", PlayerName(playerid, 0), i, var);
				}
			}
		}
		else if (!strcmp(opcao, "produtos", true))
		{
		    for(new i; i < MAX_EMPRESAS; i++)
		    {
		    	if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
		    	{
					if(var < 1 || var > 300) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /aemp produtos [Min: 1 | Max: 300]");
					EmpInfo[i][eProdutos] = var;

					SalvarEmpresa(i);
					SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s alterou o quando a empresa ID: %d paga por Carga/Litro %d.", PlayerName(playerid, 0), i, var);
				}
			}
		}
		else if (!strcmp(opcao, "info", true))
		{
			for(new i; i < MAX_EMPRESAS; i++)
		    {
		    	if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
		    	{
		    	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "___________Informações da Empresa___________");
					format(string, sizeof(string), "Id da Empresa: %d [%d]! Dono / SQL ID: %d Preço: %d", i, EmpInfo[i][eID], EmpInfo[i][eDono], EmpInfo[i][ePreco]);
 					/*format(string, sizeof(string), "[INFO] Dono / SQL ID: %d!", EmpInfo[i][eDono]);
 					format(string, sizeof(string), "[INFO] Preço: %d!", EmpInfo[i][ePreco]);*/
 					SendClientMessage(playerid, COLOR_WHITE, string);
		        }
			}
		}
		else if (!strcmp(opcao, "id", true))
		{
		    new empresas = 0;
			for(new i; i < MAX_EMPRESAS; i++)
		    {
		        if(empresas < 10)
		        {
			    	if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
			    	{
						format(string, sizeof(string), "AdmCmd: Id da Empresa: %d!", i);
	 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
	 					empresas++;
			        }
				}
			}
		}
		else if (!strcmp(opcao, "ybid", true))
		{
		    new empresas = 0;
			for(new i; i < MAX_EMPRESAS; i++)
		    {
		        if(empresas < 10)
		        {
			    	if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]))
			    	{
						format(string, sizeof(string), "AdmCmd: Id da Empresa: %d!", i);
	 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
	 					empresas++;
			        }
				}
			}
		}
		else if (!strcmp(opcao, "trancada", true))
		{
		    if(var > 1 || var < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /aemp trancada [variavel 0-1]");
			for(new i; i < MAX_EMPRESAS; i++)
		    {
		        if (EmpInfo[i][eCriada])
	  			{
		    		if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
		    		{
  				    	if (IsValidDynamic3DTextLabel(EmpInfo[i][EmpText]))
            				DestroyDynamic3DTextLabel(EmpInfo[i][EmpText]);

						EmpInfo[i][eTrancada] = var;

						SalvarEmpresa(var);
    					format(string, sizeof(string), "AdmCmd: Empresa %d trancada/destrancada.", i);
 						SendClientMessage(playerid, COLOR_LIGHTRED, string);
 						format(string, sizeof(string), "%s",EmpInfo[i][eNome]);
						EmpInfo[i][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[i][eExWorld], EmpInfo[i][eExInt]);
						return 1;
					}
		        }
			}
		}
		else if (!strcmp(opcao, "tipo", true))
		{
		    if(var > 100 || var < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /aemp tipo [variavel 0-100]");
			for(new i; i < MAX_EMPRESAS; i++)
		    {
		        if (EmpInfo[i][eCriada])
	  			{
		    		if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
		    		{
						EmpInfo[i][eTipo] = var;
						switch(var)
						{
						    case 6, 21, 27: EmpInfo[i][eCompraTipo] = 11;
						    case 22, 25, 26, 17: EmpInfo[i][eCompraTipo] = 1;
						    case 24: EmpInfo[i][eCompraTipo] = 10;
						    case 55: EmpInfo[i][eCompraTipo] = 55;
						}

						SalvarEmpresa(i);
    					format(string, sizeof(string), "AdmCmd: Você alterou o tipo da empresa %d para %d.", i, var);
 						SendClientMessage(playerid, COLOR_LIGHTRED, string);
 						return 1;
					}
		        }
			}
		}
		else if (!strcmp(opcao, "preco", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /aemp preco [Valor]");
			for(new i; i < MAX_EMPRESAS; i++)
		    {
		        if (EmpInfo[i][eCriada])
  				{
		    		if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
		    		{
  				    	if (IsValidDynamic3DTextLabel(EmpInfo[i][EmpText]))
            				DestroyDynamic3DTextLabel(EmpInfo[i][EmpText]);

						EmpInfo[i][ePreco] = var;

						SalvarEmpresa(i);
    					format(string, sizeof(string), "AdmCmd: Você alterou o preço da empresa %d para R$%d!", i, var);
 						SendClientMessage(playerid, COLOR_LIGHTRED, string);

						format(string, sizeof(string), "%s\nVende-se\nR$%d!",EmpInfo[i][eNome],EmpInfo[i][ePreco]);
				    	EmpInfo[i][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[i][eExWorld], EmpInfo[i][eExInt]);
						return 1;
					}
		        }
			}
		}
		else if (!strcmp(opcao, "entrada", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /aemp entrada [ID da Empresa]");
		    static Float:x,
	    			Float:y,
	    			Float:z;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (EmpInfo[var][eCriada])
  				{
  				    if (IsValidDynamic3DTextLabel(EmpInfo[var][EmpText]))
            			DestroyDynamic3DTextLabel(EmpInfo[var][EmpText]);

    				EmpInfo[var][eExX] = x;
      				EmpInfo[var][eExY] = y;
        			EmpInfo[var][eExZ] = z;

        			EmpInfo[var][eExWorld] = GetPlayerVirtualWorld(playerid);
					EmpInfo[var][eExInt] = GetPlayerInterior(playerid);

					SalvarEmpresa(var);
                    format(string, sizeof(string), "AdmCmd: Posição de entrada da empresa %d alterado.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
 					format(string, sizeof(string), "%s",EmpInfo[var][eNome]);
					EmpInfo[var][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[var][eExX], EmpInfo[var][eExY], EmpInfo[var][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[var][eExWorld], EmpInfo[var][eExInt]);
					return 1;
		        }
			}
		}
		else if (!strcmp(opcao, "vspawn", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: /aemp vspawn [ID da Empresa]");
		    static Float:x,
	    			Float:y,
	    			Float:z,
	    			Float:Angle;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (EmpInfo[var][eCriada])
  				{
  				    GetPlayerFacingAngle(playerid, Angle);
  				    if (IsValidDynamic3DTextLabel(EmpInfo[var][EmpText]))
            			DestroyDynamic3DTextLabel(EmpInfo[var][EmpText]);

                    EmpInfo[var][eVX] = x;
					EmpInfo[var][eVY] = y;
					EmpInfo[var][eVZ] = z;
					EmpInfo[var][eVR] = Angle;

					SalvarEmpresa(var);
                    format(string, sizeof(string), "AdmCmd: Posição de entrega de veículo da empresa %d alterado.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
 					return 1;
		        }
			}
		}
		else if (!strcmp(opcao, "saida", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /aemp saida [ID da Empresa]");
		    static Float:x,
	    			Float:y,
	    			Float:z;
			if (GetPlayerPos(playerid, x, y, z))
			{
				if (EmpInfo[var][eCriada])
  				{
    				EmpInfo[var][eInX] = x;
      				EmpInfo[var][eInY] = y;
        			EmpInfo[var][eInZ] = z;
        			EmpInfo[var][eInt] = GetPlayerInterior(playerid);
        			format(string, sizeof(string), "AdmCmd: Posição de saida da empresa %d alterado.", var);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					SalvarEmpresa(var);
					return 1;
		        }
			}
		}
		else if (!strcmp(opcao, "cplaca", true))
		{
		    for(new i; i < MAX_EMPRESAS; i++)
		    {
		    	if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
		    	{
		    	    static Float:x,
	    			Float:y,
	    			Float:z;
					GetPlayerPos(playerid, x, y, z);

					if(IsValidDynamicObject(EmpInfo[i][eObjPlaca]))
					    DestroyDynamicObject(EmpInfo[i][eObjPlaca]);

                    format(string, sizeof(string), "AdmCmd: Placa de venda adicionada na empresa %d.", i);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					PlayerInfo[playerid][pEditandoPlacaE] = i;
		    	    EmpInfo[i][eObjPlaca] = CreateDynamicObject(19471, x, y+1, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		    	    EditDynamicObject(playerid, EmpInfo[i][eObjPlaca]);
		    	    return 1;
		    	}
			}
		}
		else if (!strcmp(opcao, "dplaca", true))
		{
		    for(new i; i < MAX_EMPRESAS; i++)
		    {
		    	if(IsPlayerInRangeOfPoint(playerid, 1, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
		    	{
		    	    static Float:x,
	    			Float:y,
	    			Float:z;
					GetPlayerPos(playerid, x, y, z);

					if(IsValidDynamicObject(EmpInfo[i][eObjPlaca]))
					    DestroyDynamicObject(EmpInfo[i][eObjPlaca]);

                    format(string, sizeof(string), "AdmCmd: Placa de venda deletada da empresa %d.", i);
 					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					EmpInfo[i][ePlacaX] = 0;
					EmpInfo[i][ePlacaY] = 0;
					EmpInfo[i][ePlacaZ] = 0;
					EmpInfo[i][ePlacaR] = 0;

					SalvarEmpresa(i);
		    	    return 1;
		    	}
			}
		}
		else if (!strcmp(opcao, "ir", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /aemp ir [ID da Empresa]");
  			if(EmpInfo[var][eCriada] == 1)
  			{
			    SetPlayerPosFreeze(playerid,EmpInfo[var][eExX],EmpInfo[var][eExY], EmpInfo[var][eExZ],1);
				SetPlayerVirtualWorld(playerid,EmpInfo[var][eExWorld]);
				SetPlayerInterior(playerid,EmpInfo[var][eExInt]);
	      		format(string, sizeof(string), "AdmCmd: Você teleportou-se até a empresa: %d.", var);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				return 1;
   		    }
   		    else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID da empresa inválido.");
		}
		else if (!strcmp(opcao, "vender", true))
		{
		    if(var == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /aemp vender [ID da Empresa]");
			if(EmpInfo[var][eCriada] == 1)
  			{
   				format(string, sizeof(string), "AdmCmd: Você vendeu a empresa %d.", var);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				EmpInfo[var][eDono] = 0;
				EmpInfo[var][eAVenda] = 1;
				EmpInfo[var][eLeasing] = 0;

				new empid = var;
				if (IsValidDynamic3DTextLabel(EmpInfo[empid][EmpText]))
						DestroyDynamic3DTextLabel(EmpInfo[empid][EmpText]);
				if(IsValidDynamicObject(EmpInfo[empid][eObjPlaca]))
    				DestroyDynamicObject(EmpInfo[empid][eObjPlaca]);
				format(string, sizeof(string), "%s\nVende-se\nR$%d!",EmpInfo[empid][eNome],EmpInfo[empid][ePreco]);
    			EmpInfo[empid][EmpText] = CreateDynamic3DTextLabel(string, 0xFFFFFFFF, EmpInfo[empid][eExX], EmpInfo[empid][eExY], EmpInfo[empid][eExZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, EmpInfo[empid][eExWorld], EmpInfo[empid][eExInt]);
			    if(EmpInfo[empid][ePlacaX] != 0 && EmpInfo[empid][ePlacaY] != 0 && EmpInfo[empid][ePlacaZ] != 0)
				{
					EmpInfo[empid][eObjPlaca] = CreateDynamicObject(19471, EmpInfo[empid][ePlacaX], EmpInfo[empid][ePlacaY], EmpInfo[empid][ePlacaZ], 0.0, 0.0, EmpInfo[empid][ePlacaR], EmpInfo[empid][eExWorld], EmpInfo[empid][eExInt]);
				}
			}
		}
	}
	return 1;
}
forward EmpresaCriada(empid,playerid);
public EmpresaCriada(empid,playerid)
{
    if(empid != -1 && EmpInfo[empid][eCriada] == 1)
    {
    	EmpInfo[empid][eID] = cache_insert_id();
    	SalvarEmpresa(empid);
	}
	format(string, sizeof(string), "AdmCmd: Empresa %d criada!", empid);
 	SendClientMessage(playerid, COLOR_LIGHTRED, string);
    return 1;
}
//=====================================================================================================================================//
//  	COMANDOS - COMANDOS -COMANDOS - COMANDOS - COMANDOS - COMANDOS - COMANDOS - COMANDOS - COMANDOS - COMANDOS - COMANDOS
//=====================================================================================================================================//
forward SetPlayerPosFreeze(playerid, Float:ppoox, Float:ppooy, Float:ppooz, fase);
public SetPlayerPosFreeze(playerid, Float:ppoox, Float:ppooy, Float:ppooz, fase)
{
	switch(fase)
	{
	    case 1:
		{
            PlayerInfo[playerid][pPos][0] = ppoox;
			PlayerInfo[playerid][pPos][1] = ppooy;
			PlayerInfo[playerid][pPos][2] = ppooz;

		    SetPVarInt(playerid, "FreezadoEnt", 1);
		    TogglePlayerControllable(playerid, 0);

			SetandoPos[playerid] = 1;
			TextDrawShowForPlayer(playerid,TelinhaPreta);
			//GameTextForPlayer(playerid,"~w~Entrando...",2000,4);

			SetPVarInt(playerid, "FreezadoEnt", 1);
		    SetPlayerPos(playerid, ppoox, ppooy, ppooz-2.5);
			SetTimerEx("SetPlayerPosFreeze", 2000, false, "ifffd", playerid, ppoox, ppooy, ppooz, 2);
			return 1;
		}
	    case 2:
	    {
	        if(SetandoPos[playerid] == 1)
	        {
	            TextDrawHideForPlayer(playerid,TelinhaPreta);
		        SetandoPos[playerid] = 0;
		        SetCameraBehindPlayer(playerid);
		        SetPVarInt(playerid, "FreezadoEnt", 0);
		        TogglePlayerControllable(playerid, 1);
		        SetPlayerPos(playerid, ppoox, ppooy, ppooz+0.5);
		        return 1;
			}
			else
			{
			    TextDrawHideForPlayer(playerid,TelinhaPreta);
			    SetandoPos[playerid] = 0;
		        SetCameraBehindPlayer(playerid);
		        SetPVarInt(playerid, "FreezadoEnt", 0);
		        TogglePlayerControllable(playerid, 1);
		        SetPlayerPos(playerid, ppoox, ppooy, ppooz+0.5);
		        return 1;
			}
	    }
	}
    return 1;
}
forward SetPlayerPosLogin(playerid, Float:ppoox, Float:ppooy, Float:ppooz, fase);
public SetPlayerPosLogin(playerid, Float:ppoox, Float:ppooy, Float:ppooz, fase)
{
	switch(fase)
	{
	    case 1:
		{
		    SetPVarInt(playerid, "FreezadoEnt", 1);
		    TogglePlayerControllable(playerid, 0);
			SetPlayerPos(playerid, ppoox, ppooy, ppooz-2.5);
			SetTimerEx("SetPlayerPosLogin", 2000, false, "ifffd", playerid, ppoox, ppooy, ppooz, 2);
			return 1;
		}
	    case 2:
	    {
	        SetCameraBehindPlayer(playerid);
	        SetPVarInt(playerid, "FreezadoEnt", 0);
	        TogglePlayerControllable(playerid, 1);


	        if(PlayerInfo[playerid][pPrisao] == 10)
			{
			    format(string, sizeof(string), "AVISO: Você está na prisão administrativa por %d minuto(s)", PlayerInfo[playerid][pTemPreso]);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);

				SetPlayerPos(playerid,2523.9197,-1673.8944,14.8589);
	  			TogglePlayerControllable(playerid, false);
	    		SetPlayerInterior(playerid, 0);
	     		SetPlayerVirtualWorld(playerid, playerid);
	      		PlayerInfo[playerid][pEntrouEmpresa] = -1;
	   			PlayerInfo[playerid][pEntrouCasa] = -1;
	    		PlayerInfo[playerid][pEntrouComplexo] = -1;
	    		PlayerInfo[playerid][pEntrouGaragem] = -1;

	    		TogglePlayerControllable(playerid, 0);
			    CaindoInt[playerid] = 0;
			    CaindoInt_Av[playerid] = 0;
			}
		    else if(PlayerInfo[playerid][pPrisao] == 1)
			{
				format(string, sizeof(string), "AVISO: Você está na prisão por %d minuto(s)", PlayerInfo[playerid][pTemPreso]);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				SetPlayerPos(playerid, 1393.3003,-14.5012,1001.0156);

				SetPlayerVirtualWorld(playerid, 0);

				PlayerInfo[playerid][pEntrouEmpresa] = -1;
	   			PlayerInfo[playerid][pEntrouCasa] = -1;
	    		PlayerInfo[playerid][pEntrouComplexo] = -1;
	    		PlayerInfo[playerid][pEntrouGaragem] = -1;

	    		TogglePlayerControllable(playerid, 1);
			    CaindoInt[playerid] = 0;
			    CaindoInt_Av[playerid] = 0;
			}
			else
			{
	            SetPlayerPos(playerid, ppoox, ppooy, ppooz);
	        }
	        if(PlayerInfo[playerid][pMorto] > 0)
	        {
		 		ApplyAnimation(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1);
		 		ApplyAnimation(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1);
	        }
	        SetarItensDoPlayer(playerid);

	        P_Armour[playerid] = PlayerInfo[playerid][pArmour];

			SetPlayerArmour_CA(playerid, PlayerInfo[playerid][pArmour]);

			DesarmandoPlayer[playerid] = 2;
			ResetPlayerWeapons(playerid);

			new IdArma = PlayerInfo[playerid][pArmaMao];
	  		if(IdArma > 0)
	   		{
	   		    if(ArmaData[IdArma][ArmaNumeracao] > 10)
	   		    {
					GivePlayerWeapon(playerid,ArmaData[IdArma][ArmaModelo], ArmaData[IdArma][ArmaAmmo]);

					if(ArmaData[IdArma][ArmaExtra] != 0) SetPlayerAttachedObject(playerid, 0, ArmaData[IdArma][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[IdArma][ArmaRGB]);
					else SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaData[IdArma][ArmaModelo]], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[IdArma][ArmaRGB]);
				}
				else
				{
				    PlayerInfo[playerid][pArmaMao] = 0;
				}
			}

	        ////////////////////////////////////////////////////////////////////
	        if(PlayerInfo[playerid][pEntrouCasa] != -1)
	        {
	        	//XMRadio - Casa
				if(strlen(HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hXMR]))
    			{
       				if(ouvindoxmradio[playerid] == 0)
       				{
          				PlayAudioStreamForPlayer(playerid, HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hXMR]);
	                   	ouvindoxmradio[playerid] = 1;
	                   	ouvindoxmradioID[playerid] = PlayerInfo[playerid][pEntrouCasa];
					}
				}
				else
				{
				    if(ouvindoxmradio[playerid] != 0)
      				{
		          		StopAudioStreamForPlayer(playerid);
		          		ouvindoxmradio[playerid] = 0;
		          		ouvindoxmradioID[playerid] = 0;
					}
				}
			}
			if(PlayerInfo[playerid][pEntrouComplexo] != -1)
	        {
				if(strlen(ComplexoInfo[PlayerInfo[playerid][pEntrouComplexo]][cXMR]))
	  			{
  					if(ouvindoxmradio[playerid] == 0)
       				{
          				PlayAudioStreamForPlayer(playerid, ComplexoInfo[PlayerInfo[playerid][pEntrouComplexo]][cXMR]);
             			ouvindoxmradio[playerid] = 3;
               			ouvindoxmradioID[playerid] = PlayerInfo[playerid][pEntrouComplexo];
					}
				}
				else
				{
    				if(ouvindoxmradio[playerid] != 0)
      				{
       					StopAudioStreamForPlayer(playerid);
         				ouvindoxmradio[playerid] = 0;
          				ouvindoxmradioID[playerid] = 0;
					}
				}
			}
			if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
	        {
				if(strlen(EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eXMR]))
    			{
   					if(ouvindoxmradio[playerid] == 0)
    				{
  						PlayAudioStreamForPlayer(playerid, EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eXMR]);
       					ouvindoxmradio[playerid] = 2;
       					ouvindoxmradioID[playerid] = PlayerInfo[playerid][pEntrouEmpresa];
					}
				}
				else
				{
    				if(ouvindoxmradio[playerid] != 0)
      				{
       					StopAudioStreamForPlayer(playerid);
         				ouvindoxmradio[playerid] = 0;
          				ouvindoxmradioID[playerid] = 0;
					}
				}
			}
			if(PlayerInfo[playerid][pEntrouGaragem] != -1)
	        {
	        	//XMRadio - Garagem
				if(strlen(GaragemInfo[PlayerInfo[playerid][pEntrouGaragem]][hXMR]))
    			{
       				if(ouvindoxmradio[playerid] == 0)
       				{
          				PlayAudioStreamForPlayer(playerid, GaragemInfo[PlayerInfo[playerid][pEntrouGaragem]][hXMR]);
	                   	ouvindoxmradio[playerid] = 1;
	                   	ouvindoxmradioID[playerid] = PlayerInfo[playerid][pEntrouGaragem];
					}
				}
				else
				{
				    if(ouvindoxmradio[playerid] != 0)
      				{
		          		StopAudioStreamForPlayer(playerid);
		          		ouvindoxmradio[playerid] = 0;
		          		ouvindoxmradioID[playerid] = 0;
					}
				}
			}
			////////////////////////////////////////////////////////////////////
	        return 1;
	    }
	}
    return 1;
}

ALTCOMMAND:enter->entrar;
CMD:entrar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    for(new i; i < MAX_HOUSES; i++)
    {
        if(HouseInfo[i][hInt] != 0)
        {
	   		if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
	    	{
	    	    if(GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
		        {
		    	    if(HouseInfo[i][hTrancada] == 0)
		    	    {
		    	        if(HouseInfo[i][hInX] == 0 || HouseInfo[i][hInY] == 0 || HouseInfo[i][hInZ] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO: Erro: Esta casa está sem interior, contate um administrador!");
			    	    SetPlayerInterior(playerid, HouseInfo[i][hInt]);

			    	    if(HouseInfo[i][hTipo] == 0)
						{
						    SetPlayerVirtualWorld(playerid,100+i);

						    SetPlayerPosFreeze(playerid,HouseInfo[i][hInX],HouseInfo[i][hInY],HouseInfo[i][hInZ],1);
						}
			    	    else
						{
						    SetPlayerVirtualWorld(playerid,0);

						    SetPlayerPosFreeze(playerid,HouseInfo[i][hInX],HouseInfo[i][hInY],HouseInfo[i][hInZ],2);
						}

	                    PlayerInfo[playerid][pEntrouEmpresa] = -1;
			    	    PlayerInfo[playerid][pEntrouCasa] = i;
			    	    PlayerInfo[playerid][pEntrouComplexo] = -1;
			    	    PlayerInfo[playerid][pEntrouGaragem] = -1;
			    	    GameTextForPlayer(playerid, "~w~Bem vindo a casa", 5000, 1);
			    	    Streamer_Update(playerid);

			    	    //XMRadio - Casa
						if(strlen(HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hXMR]))
					    {
					        if(ouvindoxmradio[playerid] == 0)
					        {
	                        	PlayAudioStreamForPlayer(playerid, HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hXMR]);
	                        	ouvindoxmradio[playerid] = 1;
	                        	ouvindoxmradioID[playerid] = i;
							}
						}
						else
						{
						    if(ouvindoxmradio[playerid] != 0)
			       			{
		          				StopAudioStreamForPlayer(playerid);
		          				ouvindoxmradio[playerid] = 0;
		          				ouvindoxmradioID[playerid] = 0;
							}
						}
			    	    return 1;
					}
					else return GameTextForPlayer(playerid, "~r~Trancada", 10000, 1);
				}
			}
			if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[i][hExX2], HouseInfo[i][hExY2], HouseInfo[i][hExZ2]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
	    	{
	    	    if(GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
		        {
		    	    if(HouseInfo[i][hTrancada] == 0)
		    	    {
		    	        if(HouseInfo[i][hInX2] == 0 || HouseInfo[i][hInY2] == 0 || HouseInfo[i][hInZ2] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO: Erro: Esta casa está sem interior, contate um administrador!");
			    	    SetPlayerInterior(playerid, HouseInfo[i][hInt]);

			    	    if(HouseInfo[i][hTipo] == 0)
						{
						    SetPlayerVirtualWorld(playerid,100+i);

						    SetPlayerPosFreeze(playerid,HouseInfo[i][hInX2],HouseInfo[i][hInY2],HouseInfo[i][hInZ2],1);
						}
			    	    else
						{
						    SetPlayerVirtualWorld(playerid,0);

						    //SetPlayerPosFreeze(playerid,HouseInfo[i][hInX2],HouseInfo[i][hInY2],HouseInfo[i][hInZ2],2);
						}

	                    PlayerInfo[playerid][pEntrouEmpresa] = -1;
			    	    PlayerInfo[playerid][pEntrouCasa] = i;
			    	    PlayerInfo[playerid][pEntrouComplexo] = -1;
			    	    PlayerInfo[playerid][pEntrouGaragem] = -1;
			    	    GameTextForPlayer(playerid, "~w~Bem vindo a casa", 5000, 1);
			    	    Streamer_Update(playerid);

			    	    //XMRadio - Casa
						if(strlen(HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hXMR]))
					    {
					        if(ouvindoxmradio[playerid] == 0)
					        {
	                        	PlayAudioStreamForPlayer(playerid, HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hXMR]);
	                        	ouvindoxmradio[playerid] = 1;
	                        	ouvindoxmradioID[playerid] = i;
							}
						}
						else
						{
						    if(ouvindoxmradio[playerid] != 0)
			       			{
		          				StopAudioStreamForPlayer(playerid);
		          				ouvindoxmradio[playerid] = 0;
		          				ouvindoxmradioID[playerid] = 0;
							}
						}
			    	    return 1;
					}
					else return GameTextForPlayer(playerid, "~r~Trancada", 10000, 1);
				}
			}
  		}
		else
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
	    	{
	    	    if(GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
		        {
		            if(HouseInfo[i][hDono] == PlayerInfo[playerid][pID])
		            {
			    	    if(HouseInfo[i][hTrancada] == 0)
			    	    {
			    	        if(HouseInfo[i][hInX] == 0 || HouseInfo[i][hInY] == 0 || HouseInfo[i][hInZ] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO: Erro: Esta casa está sem interior, contate um administrador!");
				    	    SetPlayerInterior(playerid, HouseInfo[i][hInt]);

				    	    if(HouseInfo[i][hTipo] == 0)
							{
							    SetPlayerVirtualWorld(playerid,100+i);
							    SetPlayerPosFreeze(playerid,HouseInfo[i][hInX],HouseInfo[i][hInY],HouseInfo[i][hInZ],1);
							}
				    	    else
							{
							    SetPlayerVirtualWorld(playerid,0);
							    SetPlayerPosFreeze(playerid,HouseInfo[i][hInX],HouseInfo[i][hInY],HouseInfo[i][hInZ],2);
							}

		                    PlayerInfo[playerid][pEntrouEmpresa] = -1;
				    	    PlayerInfo[playerid][pEntrouCasa] = i;
				    	    PlayerInfo[playerid][pEntrouComplexo] = -1;
				    	    PlayerInfo[playerid][pEntrouGaragem] = -1;
				    	    GameTextForPlayer(playerid, "~w~Bem vindo a casa", 5000, 1);
				    	    Streamer_Update(playerid);

				    	    //XMRadio - Casa
							if(strlen(HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hXMR]))
						    {
						        if(ouvindoxmradio[playerid] == 0)
						        {
		                        	PlayAudioStreamForPlayer(playerid, HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hXMR]);
		                        	ouvindoxmradio[playerid] = 1;
		                        	ouvindoxmradioID[playerid] = i;
								}
							}
							else
							{
							    if(ouvindoxmradio[playerid] != 0)
				       			{
			          				StopAudioStreamForPlayer(playerid);
			          				ouvindoxmradio[playerid] = 0;
			          				ouvindoxmradioID[playerid] = 0;
								}
							}
				    	    return 1;
						}
						else return GameTextForPlayer(playerid, "~r~Trancada", 10000, 1);
					}
				}
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[i][hExX2], HouseInfo[i][hExY2], HouseInfo[i][hExZ2]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
	    	{
	    	    if(GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
		        {
		            if(HouseInfo[i][hDono] == PlayerInfo[playerid][pID])
		            {
			    	    if(HouseInfo[i][hTrancada] == 0)
			    	    {
			    	        if(HouseInfo[i][hInX2] == 0 || HouseInfo[i][hInY2] == 0 || HouseInfo[i][hInZ2] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO: Erro: Esta casa está sem interior, contate um administrador!");
				    	    SetPlayerInterior(playerid, HouseInfo[i][hInt]);

				    	    if(HouseInfo[i][hTipo] == 0)
							{
							    SetPlayerVirtualWorld(playerid,100+i);

							    SetPlayerPosFreeze(playerid,HouseInfo[i][hInX2],HouseInfo[i][hInY2],HouseInfo[i][hInZ2],1);
							}
				    	    else
							{
							    SetPlayerVirtualWorld(playerid,0);

							    SetPlayerPosFreeze(playerid,HouseInfo[i][hInX2],HouseInfo[i][hInY2],HouseInfo[i][hInZ2],2);
							}

		                    PlayerInfo[playerid][pEntrouEmpresa] = -1;
				    	    PlayerInfo[playerid][pEntrouCasa] = i;
				    	    PlayerInfo[playerid][pEntrouComplexo] = -1;
				    	    PlayerInfo[playerid][pEntrouGaragem] = -1;
				    	    GameTextForPlayer(playerid, "~w~Bem vindo a casa", 5000, 1);
				    	    Streamer_Update(playerid);

				    	    //XMRadio - Casa
							if(strlen(HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hXMR]))
						    {
						        if(ouvindoxmradio[playerid] == 0)
						        {
		                        	PlayAudioStreamForPlayer(playerid, HouseInfo[PlayerInfo[playerid][pEntrouCasa]][hXMR]);
		                        	ouvindoxmradio[playerid] = 1;
		                        	ouvindoxmradioID[playerid] = i;
								}
							}
							else
							{
							    if(ouvindoxmradio[playerid] != 0)
				       			{
			          				StopAudioStreamForPlayer(playerid);
			          				ouvindoxmradio[playerid] = 0;
			          				ouvindoxmradioID[playerid] = 0;
								}
							}
				    	    return 1;
						}
						else return GameTextForPlayer(playerid, "~r~Trancada", 10000, 1);
					}
				}
			}
		}
	}
	for(new i; i < MAX_GARAGENS; i++)
    {
        	new Float:distance = 2.0;
        	if(IsPlayerInAnyVehicle(playerid)) distance = 8.0;
        	else distance = 2.0;

      		if(IsPlayerInRangeOfPoint(playerid, distance, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
	    	{
	    	    if(GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
		        {
		    	    if(GaragemInfo[i][hTrancada] == 0)
		    	    {
               			if(GaragemInfo[i][hInX] == 0 || GaragemInfo[i][hInY] == 0 || GaragemInfo[i][hInZ] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} ERRO:{FFFFFF} Esta garagem está sem interior, contate um administrador!");

						new PlayerNoCarro[4];
						new PlayerNoCarroL[4];
						new count = 0;
						new vehi = GetPlayerVehicleID(playerid);

						PlayerNoCarro[0] = 999;
						PlayerNoCarro[1] = 999;
						PlayerNoCarro[2] = 999;
						PlayerNoCarro[3] = 999;

						if(IsPlayerInAnyVehicle(playerid))
					    {
					        if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Apenas o motorista do veículo pode utilizar o comando.");
					        for(new pp = 0; pp < MAX_PLAYERS; pp++)
					        {
					            if(count < 4)
					            {
						            if(GetPlayerVehicleID(pp) == vehi)
						            {
						                PlayerNoCarro[count] = pp;
						                PlayerNoCarroL[count] = GetPlayerVehicleSeat(pp);

						                count++;
						            }
								}
					        }

					        SetVehiclePos(vehi,GaragemInfo[i][hInX],GaragemInfo[i][hInY],GaragemInfo[i][hInZ]);
					        LinkVehicleToInterior(vehi,GaragemInfo[i][hInt]);
						    SetVehicleVirtualWorld(vehi,10000+i);
						    SetVehicleZAngle(vehi, GaragemInfo[i][hInR]);

						    new slot = GetVehicleSlot(vehi);
			                if(slot > -1)
			                {
	                            VehicleInfo[slot][vInterior] = GaragemInfo[i][hInt];
								VehicleInfo[slot][vWorld] = 10000+i;

								new vname[256], str[256];
								GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
								format(str,sizeof(str),"Você entrou com o seu(a) %s na garagem.",vname);
								SendClientMessage(playerid,COLOR_LIGHTGREEN,str);

								SaveVehicle(slot);
							}

					        SetPlayerVirtualWorld(playerid,10000+i);
						    SetPlayerInterior(playerid,GaragemInfo[i][hInt]);
                            PutPlayerInVehicle(playerid, vehi, 0);

					        for(new lug = 0; lug < 4; lug++)
							{
								if(PlayerNoCarro[lug] != 999)
								{
									SetPlayerVirtualWorld(PlayerNoCarro[lug],10000+i);
						    		SetPlayerInterior(PlayerNoCarro[lug],GaragemInfo[i][hInt]);
						    		PutPlayerInVehicle(PlayerNoCarro[lug], vehi, PlayerNoCarroL[lug]);
								}
					        }

					   	}
					    else
					    {
						    SetPlayerInterior(playerid, GaragemInfo[i][hInt]);
						    SetPlayerVirtualWorld(playerid, 10000+i);
						    SetPlayerPos(playerid,GaragemInfo[i][hInX],GaragemInfo[i][hInY],GaragemInfo[i][hInZ]);
						}

	                    PlayerInfo[playerid][pEntrouEmpresa] = -1;
			    	    PlayerInfo[playerid][pEntrouCasa] = -1;
			    	    PlayerInfo[playerid][pEntrouComplexo] = -1;
			    	    PlayerInfo[playerid][pEntrouGaragem] = i;
			    	    GameTextForPlayer(playerid, "~w~Bem vindo a garagem", 5000, 1);
			    	    Streamer_Update(playerid);

			    	    //XMRadio - Garagem
						if(strlen(GaragemInfo[PlayerInfo[playerid][pEntrouGaragem]][hXMR]))
					    {
					        if(ouvindoxmradio[playerid] == 0)
					        {
	                        	PlayAudioStreamForPlayer(playerid, GaragemInfo[PlayerInfo[playerid][pEntrouGaragem]][hXMR]);
	                        	ouvindoxmradio[playerid] = 5;
	                        	ouvindoxmradioID[playerid] = i;
							}
						}
						else
						{
						    if(ouvindoxmradio[playerid] != 0)
			       			{
		          				StopAudioStreamForPlayer(playerid);
		          				ouvindoxmradio[playerid] = 0;
		          				ouvindoxmradioID[playerid] = 0;
							}
						}
			    	    return 1;
					}
					else return GameTextForPlayer(playerid, "~r~Trancada", 10000, 1);
				}
			}
	}
	for(new i; i < MAX_COMPLEXOS; i++)
    {
   		if(IsPlayerInRangeOfPoint(playerid, 2, ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
    	{
    	    if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
	        {
	    	    if(ComplexoInfo[i][complexTipo] == 5)
	    		{
	    	        if(ComplexoInfo[i][cInX] == 0 || ComplexoInfo[i][cInY] == 0 || ComplexoInfo[i][cInZ] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Este complexo está sem interior, contate um administrador!");
		    	    SetPlayerInterior(playerid, ComplexoInfo[i][cInt]);
	    	     	SetPlayerVirtualWorld(playerid,0);

                    SetPlayerPosFreeze(playerid, ComplexoInfo[i][cInX],ComplexoInfo[i][cInY],ComplexoInfo[i][cInZ],1);

		    	    PlayerInfo[playerid][pEntrouCasa] = -1;
		    	    PlayerInfo[playerid][pEntrouEmpresa] = -1;
		    	    PlayerInfo[playerid][pEntrouComplexo] = i;
		    	    PlayerInfo[playerid][pEntrouGaragem] = -1;

		    	    Streamer_Update(playerid);

		    	    if(strlen(ComplexoInfo[PlayerInfo[playerid][pEntrouComplexo]][cXMR]))
				   	{
        				if(ouvindoxmradio[playerid] == 0)
				        {
	                       	PlayAudioStreamForPlayer(playerid, ComplexoInfo[PlayerInfo[playerid][pEntrouComplexo]][cXMR]);
	                       	ouvindoxmradio[playerid] = 3;
	                       	ouvindoxmradioID[playerid] = i;
						}
					}
					else
					{
					    if(ouvindoxmradio[playerid] != 0)
			       		{
		          			StopAudioStreamForPlayer(playerid);
		          			ouvindoxmradio[playerid] = 0;
		          			ouvindoxmradioID[playerid] = 0;
						}
					}
		    	    return 1;
				}
				else if(ComplexoInfo[i][complexTipo] == 10)
	    		{
	    	        if(ComplexoInfo[i][cInX] == 0 || ComplexoInfo[i][cInY] == 0 || ComplexoInfo[i][cInZ] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Este complexo está sem interior, contate um administrador!");
		    	    SetPlayerInterior(playerid, ComplexoInfo[i][cInt]);
	    	     	SetPlayerVirtualWorld(playerid, 10);

	    	     	SetPlayerPosFreeze(playerid, ComplexoInfo[i][cInX],ComplexoInfo[i][cInY],ComplexoInfo[i][cInZ],1);

		    	    PlayerInfo[playerid][pEntrouCasa] = -1;
		    	    PlayerInfo[playerid][pEntrouEmpresa] = -1;
		    	    PlayerInfo[playerid][pEntrouComplexo] = i;
		    	    PlayerInfo[playerid][pEntrouGaragem] = -1;

		    	    Streamer_Update(playerid);

		    	    if(strlen(ComplexoInfo[PlayerInfo[playerid][pEntrouComplexo]][cXMR]))
				   	{
        				if(ouvindoxmradio[playerid] == 0)
				        {
	                       	PlayAudioStreamForPlayer(playerid, ComplexoInfo[PlayerInfo[playerid][pEntrouComplexo]][cXMR]);
	                       	ouvindoxmradio[playerid] = 3;
	                       	ouvindoxmradioID[playerid] = i;
						}
					}
					else
					{
					    if(ouvindoxmradio[playerid] != 0)
			       		{
		          			StopAudioStreamForPlayer(playerid);
		          			ouvindoxmradio[playerid] = 0;
		          			ouvindoxmradioID[playerid] = 0;
						}
					}
		    	    return 1;
				}
				else
				{
				    if(ComplexoInfo[i][cInX] == 0 || ComplexoInfo[i][cInY] == 0 || ComplexoInfo[i][cInZ] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Este complexo está sem interior, contate um administrador!");
		    	    SetPlayerInterior(playerid, ComplexoInfo[i][cInt]);
	    	     	SetPlayerVirtualWorld(playerid,1000+i);

                    SetPlayerPosFreeze(playerid, ComplexoInfo[i][cInX],ComplexoInfo[i][cInY],ComplexoInfo[i][cInZ],1);

		    	    PlayerInfo[playerid][pEntrouCasa] = -1;
		    	    PlayerInfo[playerid][pEntrouEmpresa] = -1;
		    	    PlayerInfo[playerid][pEntrouComplexo] = i;
		    	    PlayerInfo[playerid][pEntrouGaragem] = -1;

		    	    Streamer_Update(playerid);

		    	    if(strlen(ComplexoInfo[PlayerInfo[playerid][pEntrouComplexo]][cXMR]))
				   	{
        				if(ouvindoxmradio[playerid] == 0)
				        {
	                       	PlayAudioStreamForPlayer(playerid, ComplexoInfo[PlayerInfo[playerid][pEntrouComplexo]][cXMR]);
	                       	ouvindoxmradio[playerid] = 3;
	                       	ouvindoxmradioID[playerid] = i;
						}
					}
					else
					{
					    if(ouvindoxmradio[playerid] != 0)
			       		{
		          			StopAudioStreamForPlayer(playerid);
		          			ouvindoxmradio[playerid] = 0;
		          			ouvindoxmradioID[playerid] = 0;
						}
					}
		    	    return 1;
				}
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2, ComplexoInfo[i][cExX2], ComplexoInfo[i][cExY2], ComplexoInfo[i][cExZ2]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
    	{
    	    if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
	        {
	    	    if(ComplexoInfo[i][complexTipo] == 5)
	    		{
	    	        if(ComplexoInfo[i][cInX2] == 0 || ComplexoInfo[i][cInY2] == 0 || ComplexoInfo[i][cInZ2] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Este complexo está sem interior, contate um administrador!");
		    	    SetPlayerInterior(playerid, ComplexoInfo[i][cInt]);
		    	    SetPlayerVirtualWorld(playerid,0);

		    	    SetPlayerPosFreeze(playerid, ComplexoInfo[i][cInX2],ComplexoInfo[i][cInY2],ComplexoInfo[i][cInZ2],1);

                    PlayerInfo[playerid][pEntrouEmpresa] = -1;
		    	    PlayerInfo[playerid][pEntrouCasa] = -1;
		    	    PlayerInfo[playerid][pEntrouComplexo] = i;
		    	    PlayerInfo[playerid][pEntrouGaragem] = -1;
		    	    Streamer_Update(playerid);

		    	    if(strlen(ComplexoInfo[PlayerInfo[playerid][pEntrouComplexo]][cXMR]))
				   	{
        				if(ouvindoxmradio[playerid] == 0)
				        {
	                       	PlayAudioStreamForPlayer(playerid, ComplexoInfo[PlayerInfo[playerid][pEntrouComplexo]][cXMR]);
	                       	ouvindoxmradio[playerid] = 3;
	                       	ouvindoxmradioID[playerid] = i;
						}
					}
					else
					{
					    if(ouvindoxmradio[playerid] != 0)
			       		{
		          			StopAudioStreamForPlayer(playerid);
		          			ouvindoxmradio[playerid] = 0;
		          			ouvindoxmradioID[playerid] = 0;
						}
					}
		    	    return 1;
				}
				else
				{
				    if(ComplexoInfo[i][cInX2] == 0 || ComplexoInfo[i][cInY2] == 0 || ComplexoInfo[i][cInZ2] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Este complexo está sem interior, contate um administrador!");
		    	    SetPlayerInterior(playerid, ComplexoInfo[i][cInt]);
		    	    SetPlayerVirtualWorld(playerid,1000+i);

		    	    SetPlayerPosFreeze(playerid, ComplexoInfo[i][cInX2],ComplexoInfo[i][cInY2],ComplexoInfo[i][cInZ2],1);

                    PlayerInfo[playerid][pEntrouEmpresa] = -1;
		    	    PlayerInfo[playerid][pEntrouCasa] = -1;
		    	    PlayerInfo[playerid][pEntrouComplexo] = i;
		    	    PlayerInfo[playerid][pEntrouGaragem] = -1;
		    	    Streamer_Update(playerid);

		    	    if(strlen(ComplexoInfo[PlayerInfo[playerid][pEntrouComplexo]][cXMR]))
				   	{
        				if(ouvindoxmradio[playerid] == 0)
				        {
	                       	PlayAudioStreamForPlayer(playerid, ComplexoInfo[PlayerInfo[playerid][pEntrouComplexo]][cXMR]);
	                       	ouvindoxmradio[playerid] = 3;
	                       	ouvindoxmradioID[playerid] = i;
						}
					}
					else
					{
					    if(ouvindoxmradio[playerid] != 0)
			       		{
		          			StopAudioStreamForPlayer(playerid);
		          			ouvindoxmradio[playerid] = 0;
		          			ouvindoxmradioID[playerid] = 0;
						}
					}
		    	    return 1;
				}
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2, ComplexoInfo[i][cExX3], ComplexoInfo[i][cExY3], ComplexoInfo[i][cExZ3]) && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
    	{
    	    if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
	        {
	    	    if(ComplexoInfo[i][complexTipo] == 5)
	    		{
	    	        if(ComplexoInfo[i][cInX3] == 0 || ComplexoInfo[i][cInY3] == 0 || ComplexoInfo[i][cInZ3] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Este complexo está sem interior, contate um administrador!");
		    	    SetPlayerInterior(playerid, ComplexoInfo[i][cInt]);
		    	    SetPlayerVirtualWorld(playerid,0);

		    	    SetPlayerPosFreeze(playerid, ComplexoInfo[i][cInX3],ComplexoInfo[i][cInY3],ComplexoInfo[i][cInZ3],1);

                    PlayerInfo[playerid][pEntrouEmpresa] = -1;
		    	    PlayerInfo[playerid][pEntrouCasa] = -1;
		    	    PlayerInfo[playerid][pEntrouComplexo] = i;
		    	    PlayerInfo[playerid][pEntrouGaragem] = -1;
		    	    Streamer_Update(playerid);

		    	    if(strlen(ComplexoInfo[PlayerInfo[playerid][pEntrouComplexo]][cXMR]))
				   	{
        				if(ouvindoxmradio[playerid] == 0)
				        {
	                       	PlayAudioStreamForPlayer(playerid, ComplexoInfo[PlayerInfo[playerid][pEntrouComplexo]][cXMR]);
	                       	ouvindoxmradio[playerid] = 3;
	                       	ouvindoxmradioID[playerid] = i;
						}
					}
					else
					{
					    if(ouvindoxmradio[playerid] != 0)
			       		{
		          			StopAudioStreamForPlayer(playerid);
		          			ouvindoxmradio[playerid] = 0;
		          			ouvindoxmradioID[playerid] = 0;
						}
					}
		    	    return 1;
				}
				else
				{
				    if(ComplexoInfo[i][cInX3] == 0 || ComplexoInfo[i][cInY3] == 0 || ComplexoInfo[i][cInZ3] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Este complexo está sem interior, contate um administrador!");
		    	    SetPlayerInterior(playerid, ComplexoInfo[i][cInt]);
		    	    SetPlayerVirtualWorld(playerid,1000+i);

		    	    SetPlayerPosFreeze(playerid, ComplexoInfo[i][cInX3],ComplexoInfo[i][cInY3],ComplexoInfo[i][cInZ3],1);

                    PlayerInfo[playerid][pEntrouEmpresa] = -1;
		    	    PlayerInfo[playerid][pEntrouCasa] = -1;
		    	    PlayerInfo[playerid][pEntrouComplexo] = i;
		    	    PlayerInfo[playerid][pEntrouGaragem] = -1;
		    	    Streamer_Update(playerid);

		    	    if(strlen(ComplexoInfo[PlayerInfo[playerid][pEntrouComplexo]][cXMR]))
				   	{
        				if(ouvindoxmradio[playerid] == 0)
				        {
	                       	PlayAudioStreamForPlayer(playerid, ComplexoInfo[PlayerInfo[playerid][pEntrouComplexo]][cXMR]);
	                       	ouvindoxmradio[playerid] = 3;
	                       	ouvindoxmradioID[playerid] = i;
						}
					}
					else
					{
					    if(ouvindoxmradio[playerid] != 0)
			       		{
		          			StopAudioStreamForPlayer(playerid);
		          			ouvindoxmradio[playerid] = 0;
		          			ouvindoxmradioID[playerid] = 0;
						}
					}
		    	    return 1;
				}
			}
		}
	}
	for(new i; i < MAX_EMPRESAS; i++)
    {
   		if(IsPlayerInRangeOfPoint(playerid, 3, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
    	{
    	    if(GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
	        {
				switch(EmpInfo[i][eTipo])
				{
				    case EMP_TIPO_TRANS:
				    {
				        if(IsPlayerInAnyVehicle(playerid))
				        {
				            new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
			                if(slot > -1)
			                {
					            new id = GetPlayerVehicleID(playerid);
					            SetVehiclePos(id, 615.0032, -124.2889, 997.6244);
							    SetVehicleZAngle(id, -90.0000);
							    SetPlayerInterior(playerid, 3);
							    LinkVehicleToInterior(id, 3);
							    SetPlayerVirtualWorld(playerid,(playerid + 10000));
							    SetVehicleVirtualWorld(id,(playerid + 10000));
							    TogglePlayerControllable(playerid, 0);
							    //==============================================
							    OutrasInfos[playerid][oModShop] = 1;
							    OutrasInfos[playerid][oModCat] = 0;
							    OutrasInfos[playerid][oModPart] = 0; // Vista de Cima
							    OutrasInfos[playerid][oPodePas] = 1;
							    OutrasInfos[playerid][oVendoMod] = 0;
							    SetPlayerCameraPos(playerid, 619.3527, -120.3826, 1000.6747);
								SetPlayerCameraLookAt(playerid, 618.6258, -121.0748, 1000.1196);
								//==============================================
								PlayerInfo[playerid][pEntrouCasa] = -1;
		   						PlayerInfo[playerid][pEntrouComplexo] = -1;
				    	    	PlayerInfo[playerid][pEntrouEmpresa] = i;
				    	    	PlayerInfo[playerid][pEntrouGaragem] = -1;
				    	    	SendClientMessage(playerid, COLOR_LIGHTRED, "Entrou na oficina.");

				    	    	if(strlen(EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eXMR]))
							    {
							        if(ouvindoxmradio[playerid] == 0)
							        {
			                        	PlayAudioStreamForPlayer(playerid, EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eXMR]);
			                        	ouvindoxmradio[playerid] = 2;
			                        	ouvindoxmradioID[playerid] = i;
									}
								}
								else
								{
								    if(ouvindoxmradio[playerid] != 0)
						       		{
					          			StopAudioStreamForPlayer(playerid);
					          			ouvindoxmradio[playerid] = 0;
					          			ouvindoxmradioID[playerid] = 0;
									}
								}
				    	    	return 1;
							}
							else return SendClientMessage(playerid, COLOR_LIGHTRED, "Este veículo não pode ser modificado.");
						}
				        else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está em um veículo.");
				    }
				    default: {
			    	    if(EmpInfo[i][eTrancada] == 0) {
			    	        if(EmpInfo[i][eInX] == 0 || EmpInfo[i][eInY] == 0 || EmpInfo[i][eInZ] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta empresa está sem interior, contate um administrador!");
							if(PlayerInfo[playerid][pGrana] < EmpInfo[i][eEntradaPrice]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem dinheiro para pagar a entrada.");

                            if(EmpInfo[i][eTipo] == EMP_TIPO_CAVALO) SendClientMessage(playerid, COLOR_LIGHTGREEN, "Comandos disponiveis na empresa: /apostar /assistir");
                            else if(EmpInfo[i][eTipo] == EMP_TIPO_BANCO) SendClientMessage(playerid, COLOR_LIGHTGREEN, "Comandos disponiveis na empresa: /sacar /depositar");
							else if(EmpInfo[i][eTipo] == EMP_TIPO_EMP_CENTER) SendClientMessage(playerid, COLOR_LIGHTGREEN, "Comandos disponiveis na empresa: /pegaremprego");
                            else if(EmpInfo[i][eTipo] == EMP_TIPO_LIC_CENTER) SendClientMessage(playerid, COLOR_LIGHTGREEN, "Comandos disponiveis na empresa: /comprarlicenca");
							else if(EmpInfo[i][eTipo] != 0) SendClientMessage(playerid, COLOR_LIGHTGREEN, "Comandos disponiveis na empresa: /comprar");

							SetPlayerInterior(playerid, EmpInfo[i][eInt]);
		   					SetPlayerVirtualWorld(playerid,100+i);

		   					SetPlayerPosFreeze(playerid,EmpInfo[i][eInX],EmpInfo[i][eInY],EmpInfo[i][eInZ],1);

                            GameTextForPlayer(playerid, EmpInfo[i][eNome], 5000, 1);

                            if(EmpInfo[i][eDono] != PlayerInfo[playerid][pID]) {
	                            if(EmpInfo[i][eEntradaPrice] > 0) {
	                            	PlayerInfo[playerid][pGrana] -= EmpInfo[i][eEntradaPrice];
	                            	EmpInfo[i][eBank] += EmpInfo[i][eEntradaPrice];

	                            	format(string,sizeof(string),"-> Você pagou R$%d para entrar na empresa.",EmpInfo[i][eEntradaPrice]);
									SendClientMessage(playerid,COLOR_LIGHTGREEN,string);
								}
							}

		   					PlayerInfo[playerid][pEntrouCasa] = -1;
		   					PlayerInfo[playerid][pEntrouComplexo] = -1;
				    	    PlayerInfo[playerid][pEntrouEmpresa] = i;
				    	    PlayerInfo[playerid][pEntrouGaragem] = -1;

				    	    Streamer_Update(playerid);

				    	    if(strlen(EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eXMR])) {
			       				if(ouvindoxmradio[playerid] == 0) {
             						PlayAudioStreamForPlayer(playerid, EmpInfo[PlayerInfo[playerid][pEntrouEmpresa]][eXMR]);
			                       	ouvindoxmradio[playerid] = 2;
			                       	ouvindoxmradioID[playerid] = i;
								}
							}
							else {
							    if(ouvindoxmradio[playerid] != 0) {
				          			StopAudioStreamForPlayer(playerid);
				          			ouvindoxmradio[playerid] = 0;
				          			ouvindoxmradioID[playerid] = 0;
								}
							}
				    	    return 1;
						}
						else return GameTextForPlayer(playerid, "~r~Trancada", 10000, 1);
					}
				}
			}
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 5, 2027.3602,-1386.4576,17.2108))//Hospital
	{
	    SetPlayerInterior(playerid, 5);
	    SetPlayerVirtualWorld(playerid, 9);

	    SetPlayerPosFreeze(playerid, 169.1583,2783.4038,767.7469, 1);

	    PlayerInfo[playerid][pEntrouCasa] = -1;
   		PlayerInfo[playerid][pEntrouComplexo] = -1;
	    PlayerInfo[playerid][pEntrouEmpresa] = -1;
	    PlayerInfo[playerid][pEntrouGaragem] = -1;
	    EntrouInt[playerid] = 1;
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, 1728.8789,-1565.1876,14.5625))//PCERJ 1 andar
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);

	    SetPlayerPosFreeze(playerid, 1410.2965,-10.9775,1001.0098, 1);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, 1400.2490,-12.1037,1001.0098))//PCERJ 2 andar
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);

	    SetPlayerPosFreeze(playerid, 1390.2905,-30.3338,1000.9183, 1);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, 2514.5640,-1525.5608,24.0324))//PMERJ
	{
	    SetPlayerInterior(playerid, 5);
	    SetPlayerVirtualWorld(playerid, 1);

	    SetPlayerPosFreeze(playerid, 1513.2678,-1623.1249,774.0040, 1);
	}
	else if (IsPlayerInRangeOfPoint(playerid, 5.0, 954.6230,-1467.4749,13.5547)) // CBMERJ GARAGEM
	{
		new PlayerNoCarro[4];
		new PlayerNoCarroL[4];
		new count = 0;
		new vehi = GetPlayerVehicleID(playerid);

		PlayerNoCarro[0] = 999;
		PlayerNoCarro[1] = 999;
		PlayerNoCarro[2] = 999;
		PlayerNoCarro[3] = 999;

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Apenas o motorista do veículo pode utilizar o comando.");
			foreach(new pp : Player)
			{
				if(count < 4)
				{
					if(GetPlayerVehicleID(pp) == vehi)
					{
						PlayerNoCarro[count] = pp;
						PlayerNoCarroL[count] = GetPlayerVehicleSeat(pp);

						count++;
					}
				}
			}

			SetVehiclePos(vehi,2296.9138,2498.3650,-7.4531);
			LinkVehicleToInterior(vehi, 0);
			SetVehicleVirtualWorld(vehi,0);
			SetVehicleZAngle(vehi, 0);



			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			PutPlayerInVehicle(playerid, vehi, 0);

			for(new lug = 0; lug < 4; lug++)
			{
				if(PlayerNoCarro[lug] != 999)
				{
					if(IsPlayerConnected(PlayerNoCarro[lug])) {
						SetPlayerVirtualWorld(PlayerNoCarro[lug], 0);
						SetPlayerInterior(PlayerNoCarro[lug], 0);
						PutPlayerInVehicle(PlayerNoCarro[lug], vehi, PlayerNoCarroL[lug]);
					}
				}
			}

		}else{
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 2296.9138,2498.3650,-7.4531);
			SetPlayerFacingAngle(playerid, 0);
			GameTextForPlayer(playerid, "~w~Bem-vindo a garagem do GBESP.", 5000, 1);
			PlayerInfo[playerid][pInterior] = 0;
			PlayerInfo[playerid][pWorld] = 0;

		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 5.0, 1772.9445,-1543.1234,13.6688)) // PROTEGE GARAGEM
	{
		new PlayerNoCarro[4];
		new PlayerNoCarroL[4];
		new count = 0;
		new vehi = GetPlayerVehicleID(playerid);

		PlayerNoCarro[0] = 999;
		PlayerNoCarro[1] = 999;
		PlayerNoCarro[2] = 999;
		PlayerNoCarro[3] = 999;

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Apenas o motorista do veículo pode utilizar o comando.");
			foreach(new pp : Player)
			{
				if(count < 4)
				{
					if(GetPlayerVehicleID(pp) == vehi)
					{
						PlayerNoCarro[count] = pp;
						PlayerNoCarroL[count] = GetPlayerVehicleSeat(pp);

						count++;
					}
				}
			}

			SetVehiclePos(vehi,2481.5627,2513.5317,10.8203);
			LinkVehicleToInterior(vehi, 0);
			SetVehicleVirtualWorld(vehi,0);
			SetVehicleZAngle(vehi, 0);



			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			PutPlayerInVehicle(playerid, vehi, 0);

			for(new lug = 0; lug < 4; lug++)
			{
				if(PlayerNoCarro[lug] != 999)
				{
					if(IsPlayerConnected(PlayerNoCarro[lug])) {
						SetPlayerVirtualWorld(PlayerNoCarro[lug], 0);
						SetPlayerInterior(PlayerNoCarro[lug], 0);
						PutPlayerInVehicle(PlayerNoCarro[lug], vehi, PlayerNoCarroL[lug]);
					}
				}
			}

		}else{
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 2481.5627,2513.5317,10.8203);
			SetPlayerFacingAngle(playerid, 0);
			GameTextForPlayer(playerid, "~w~Bem-vindo a garagem da PROTEGE.", 5000, 1);
			PlayerInfo[playerid][pInterior] = 0;
			PlayerInfo[playerid][pWorld] = 0;

		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 5.0, 1744.0854,-1555.1968,8.4305)) // PCERJ GARAGEM
	{
		new PlayerNoCarro[4];
		new PlayerNoCarroL[4];
		new count = 0;
		new vehi = GetPlayerVehicleID(playerid);

		PlayerNoCarro[0] = 999;
		PlayerNoCarro[1] = 999;
		PlayerNoCarro[2] = 999;
		PlayerNoCarro[3] = 999;

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Apenas o motorista do veículo pode utilizar o comando.");
			foreach(new pp : Player)
			{
				if(count < 4)
				{
					if(GetPlayerVehicleID(pp) == vehi)
					{
						PlayerNoCarro[count] = pp;
						PlayerNoCarroL[count] = GetPlayerVehicleSeat(pp);

						count++;
					}
				}
			}

			SetVehiclePos(vehi,-1627.9585,690.3979,6.7627);
			LinkVehicleToInterior(vehi, 0);
			SetVehicleVirtualWorld(vehi,0);
			SetVehicleZAngle(vehi, 0);



			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			PutPlayerInVehicle(playerid, vehi, 0);

			for(new lug = 0; lug < 4; lug++)
			{
				if(PlayerNoCarro[lug] != 999)
				{
					if(IsPlayerConnected(PlayerNoCarro[lug])) {
						SetPlayerVirtualWorld(PlayerNoCarro[lug], 0);
						SetPlayerInterior(PlayerNoCarro[lug], 0);
						PutPlayerInVehicle(PlayerNoCarro[lug], vehi, PlayerNoCarroL[lug]);
					}
				}
			}

		}else{
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, -1627.9585,690.3979,6.7627);
			SetPlayerFacingAngle(playerid, 0);
			GameTextForPlayer(playerid, "~w~Bem-vindo a garagem da PCESP.", 5000, 1);
			PlayerInfo[playerid][pInterior] = 0;
			PlayerInfo[playerid][pWorld] = 0;

		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 5.0, 2501.8445,-1564.4512,24.0324)) // PMERJ GARAGEM
	{
		new PlayerNoCarro[4];
		new PlayerNoCarroL[4];
		new count = 0;
		new vehi = GetPlayerVehicleID(playerid);

		PlayerNoCarro[0] = 999;
		PlayerNoCarro[1] = 999;
		PlayerNoCarro[2] = 999;
		PlayerNoCarro[3] = 999;

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Apenas o motorista do veículo pode utilizar o comando.");
			foreach(new pp : Player)
			{
				if(count < 4)
				{
					if(GetPlayerVehicleID(pp) == vehi)
					{
						PlayerNoCarro[count] = pp;
						PlayerNoCarroL[count] = GetPlayerVehicleSeat(pp);

						count++;
					}
				}
			}

			SetVehiclePos(vehi, 2318.3911,2446.4016,3.2734);
			LinkVehicleToInterior(vehi, 0);
			SetVehicleVirtualWorld(vehi,0);
			SetVehicleZAngle(vehi, 0);



			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			PutPlayerInVehicle(playerid, vehi, 0);

			for(new lug = 0; lug < 4; lug++)
			{
				if(PlayerNoCarro[lug] != 999)
				{
					if(IsPlayerConnected(PlayerNoCarro[lug])) {
						SetPlayerVirtualWorld(PlayerNoCarro[lug], 0);
						SetPlayerInterior(PlayerNoCarro[lug], 0);
						PutPlayerInVehicle(PlayerNoCarro[lug], vehi, PlayerNoCarroL[lug]);
					}
				}
			}

		}else{
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 2318.3911,2446.4016,3.2734);
			SetPlayerFacingAngle(playerid, 0);
			GameTextForPlayer(playerid, "~w~Bem-vindo a garagem da PMESP.", 5000, 1);

		}

		PlayerInfo[playerid][pInterior] = 0;
		PlayerInfo[playerid][pWorld] = 0;
	}

	//==========================================================================
	return 1;
}

ALTCOMMAND:exit->sair;
CMD:sair(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    for(new i; i < MAX_HOUSES; i++)
    {
        if(HouseInfo[i][hTipo] == 0)
        {
            if(IsPlayerInRangeOfPoint(playerid, 3, HouseInfo[i][hInX], HouseInfo[i][hInY], HouseInfo[i][hInZ]) && GetPlayerVirtualWorld(playerid) == 100+i)
	    	{
		    	if(HouseInfo[i][hTrancada] == 0)
	 	    	{
	 	    	    if(HouseInfo[i][hExWorld] != 0)
	 	    	    {
	 	    	        PlayerInfo[playerid][pEntrouComplexo] = HouseInfo[i][hExWorld]-1000;
	 	    	        SetPlayerInterior(playerid, HouseInfo[i][hExInt]);
			    	    SetPlayerVirtualWorld(playerid,HouseInfo[i][hExWorld]);
		  	    		SetPlayerPosFreeze(playerid,HouseInfo[i][hExX],HouseInfo[i][hExY],HouseInfo[i][hExZ], 1);
		    	    }
		    	    else
		    	    {
		    	        SetPlayerInterior(playerid, HouseInfo[i][hExInt]);
			    	    SetPlayerVirtualWorld(playerid, HouseInfo[i][hExWorld]);
		    	        SetPlayerPosFreeze(playerid,HouseInfo[i][hExX],HouseInfo[i][hExY],HouseInfo[i][hExZ], 1);
					}
					PlayerInfo[playerid][pEntrouCasa] = -1;

					if(GetPVarInt(playerid, "CasaApagada") == 1)
						TextDrawHideForPlayer(playerid,InterruptorDraw);

					if(ouvindoxmradio[playerid] != 0)
			       	{
		          		StopAudioStreamForPlayer(playerid);
		          		ouvindoxmradio[playerid] = 0;
		          		ouvindoxmradioID[playerid] = 0;
					}
	    			return 1;
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO: A porta está trancada!");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3, HouseInfo[i][hInX2], HouseInfo[i][hInY2], HouseInfo[i][hInZ2]) && GetPlayerVirtualWorld(playerid) == 100+i)
	    	{
		    	if(HouseInfo[i][hTrancada] == 0)
	 	    	{
	 	    	    if(HouseInfo[i][hExWorld] != 0)
	 	    	    {
	 	    	        PlayerInfo[playerid][pEntrouComplexo] = HouseInfo[i][hExWorld]-1000;
	 	    	        SetPlayerInterior(playerid, HouseInfo[i][hExInt]);
			    	    SetPlayerVirtualWorld(playerid,HouseInfo[i][hExWorld]);
		  	    		SetPlayerPosFreeze(playerid,HouseInfo[i][hExX2],HouseInfo[i][hExY2],HouseInfo[i][hExZ2], 1);
		    	    }
		    	    else
		    	    {
		    	        SetPlayerInterior(playerid, HouseInfo[i][hExInt]);
			    	    SetPlayerVirtualWorld(playerid, HouseInfo[i][hExWorld]);
		    	        SetPlayerPosFreeze(playerid,HouseInfo[i][hExX2],HouseInfo[i][hExY2],HouseInfo[i][hExZ2], 1);
					}
					PlayerInfo[playerid][pEntrouCasa] = -1;

					if(GetPVarInt(playerid, "CasaApagada") == 1)
						TextDrawHideForPlayer(playerid,InterruptorDraw);

					if(ouvindoxmradio[playerid] != 0)
			       	{
		          		StopAudioStreamForPlayer(playerid);
		          		ouvindoxmradio[playerid] = 0;
		          		ouvindoxmradioID[playerid] = 0;
					}
	    			return 1;
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO: A porta está trancada!");
			}
        }
   	    else
   	    {
   	        if(IsPlayerInRangeOfPoint(playerid, 3, HouseInfo[i][hInX], HouseInfo[i][hInY], HouseInfo[i][hInZ]) && GetPlayerVirtualWorld(playerid) == 0)
	    	{
		    	if(HouseInfo[i][hTrancada] == 0)
	 	    	{
	 	    	    if(HouseInfo[i][hExWorld] != 0)
	 	    	    {
	 	    	        PlayerInfo[playerid][pEntrouComplexo] = HouseInfo[i][hExWorld]-1000;
	 	    	        SetPlayerInterior(playerid, HouseInfo[i][hExInt]);
			    	    SetPlayerVirtualWorld(playerid,HouseInfo[i][hExWorld]);
		  	    		SetPlayerPosFreeze(playerid,HouseInfo[i][hExX],HouseInfo[i][hExY],HouseInfo[i][hExZ], 1);
		    	    }
		    	    else
		    	    {
		    	        SetPlayerInterior(playerid, HouseInfo[i][hExInt]);
			    	    SetPlayerVirtualWorld(playerid, HouseInfo[i][hExWorld]);
		    	        SetPlayerPos(playerid,HouseInfo[i][hExX],HouseInfo[i][hExY],HouseInfo[i][hExZ]);
					}
					PlayerInfo[playerid][pEntrouCasa] = -1;

					if(ouvindoxmradio[playerid] != 0)
			       	{
		          		StopAudioStreamForPlayer(playerid);
		          		ouvindoxmradio[playerid] = 0;
		          		ouvindoxmradioID[playerid] = 0;
					}
	    			return 1;
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO: A porta está trancada!");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3, HouseInfo[i][hInX2], HouseInfo[i][hInY2], HouseInfo[i][hInZ2]) && GetPlayerVirtualWorld(playerid) == 0)
	    	{
		    	if(HouseInfo[i][hTrancada] == 0)
	 	    	{
	 	    	    if(HouseInfo[i][hExWorld] != 0)
	 	    	    {
	 	    	        PlayerInfo[playerid][pEntrouComplexo] = HouseInfo[i][hExWorld]-1000;
	 	    	        SetPlayerInterior(playerid, HouseInfo[i][hExInt]);
			    	    SetPlayerVirtualWorld(playerid,HouseInfo[i][hExWorld]);
		  	    		SetPlayerPosFreeze(playerid,HouseInfo[i][hExX2],HouseInfo[i][hExY2],HouseInfo[i][hExZ2], 1);
		    	    }
		    	    else
		    	    {
		    	        SetPlayerInterior(playerid, HouseInfo[i][hExInt]);
			    	    SetPlayerVirtualWorld(playerid, HouseInfo[i][hExWorld]);
		    	        SetPlayerPos(playerid,HouseInfo[i][hExX2],HouseInfo[i][hExY2],HouseInfo[i][hExZ2]);
					}
					PlayerInfo[playerid][pEntrouCasa] = -1;

					if(ouvindoxmradio[playerid] != 0)
			       	{
		          		StopAudioStreamForPlayer(playerid);
		          		ouvindoxmradio[playerid] = 0;
		          		ouvindoxmradioID[playerid] = 0;
					}
	    			return 1;
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO: A porta está trancada!");
			}
   	    }
	}
	for(new i; i < MAX_GARAGENS; i++)
    {
            if(IsPlayerInRangeOfPoint(playerid, 5, GaragemInfo[i][hInX], GaragemInfo[i][hInY], GaragemInfo[i][hInZ]) && GetPlayerVirtualWorld(playerid) == 10000+i)
	    	{
		    	if(GaragemInfo[i][hTrancada] == 0)
	 	    	{
			    		SetPlayerInterior(playerid, GaragemInfo[i][hInt]);
						SetPlayerVirtualWorld(playerid,10000+i);

						new PlayerNoCarro[4];
						new PlayerNoCarroL[4];
						new count = 0;
						new vehi = GetPlayerVehicleID(playerid);

						PlayerNoCarro[0] = 999;
						PlayerNoCarro[1] = 999;
						PlayerNoCarro[2] = 999;
						PlayerNoCarro[3] = 999;

						if(IsPlayerInAnyVehicle(playerid))
					    {
					        if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Apenas o motorista do veículo pode utilizar o comando.");
					        for(new pp = 0; pp < MAX_PLAYERS; pp++)
					        {
					            if(count < 4)
					            {
						            if(GetPlayerVehicleID(pp) == vehi)
						            {
						                PlayerNoCarro[count] = pp;
						                PlayerNoCarroL[count] = GetPlayerVehicleSeat(pp);
						                count++;
						            }
								}
					        }

					        SetVehiclePos(vehi,GaragemInfo[i][hExX2],GaragemInfo[i][hExY2],GaragemInfo[i][hExZ2]+0.5);
					        LinkVehicleToInterior(vehi,GaragemInfo[i][hExInt]);
						    SetVehicleVirtualWorld(vehi,GaragemInfo[i][hExWorld]);
						    SetVehicleZAngle(vehi, GaragemInfo[i][hExR]);

					        SetPlayerVirtualWorld(playerid,GaragemInfo[i][hExWorld]);
						    SetPlayerInterior(playerid,GaragemInfo[i][hExInt]);

                            PutPlayerInVehicle(playerid, vehi, 0);
                            PlayerInfo[playerid][pEntrouGaragem] = -1;

                            //SetPlayerPosFreeze(playerid,GaragemInfo[i][hExX2],GaragemInfo[i][hExY2],GaragemInfo[i][hExZ2],1);

                            new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
			                if(slot > -1)
			                {
	                            VehicleInfo[slot][vInterior] = 0;
								VehicleInfo[slot][vWorld] = 0;
							}

					        for(new lug = 0; lug < 4; lug++)
							{
								if(PlayerNoCarro[lug] != 999)
								{
									SetPlayerVirtualWorld(PlayerNoCarro[lug],GaragemInfo[i][hExWorld]);
						    		SetPlayerInterior(PlayerNoCarro[lug],GaragemInfo[i][hExInt]);
						    		PutPlayerInVehicle(PlayerNoCarro[lug], vehi, PlayerNoCarroL[lug]);

						    		PlayerInfo[PlayerNoCarro[lug]][pEntrouGaragem] = -1;
								}
					        }
					   	}
					    else
					    {
					        PlayerInfo[playerid][pEntrouGaragem] = -1;
						    SetPlayerInterior(playerid, GaragemInfo[i][hExInt]);
						    SetPlayerVirtualWorld(playerid, GaragemInfo[i][hExWorld]);
						    SetPlayerPosFreeze(playerid,GaragemInfo[i][hExX],GaragemInfo[i][hExY],GaragemInfo[i][hExZ],1);
						}

						if(GetPVarInt(playerid, "CasaApagada") == 1)
							TextDrawHideForPlayer(playerid,InterruptorDraw);

						if(ouvindoxmradio[playerid] != 0)
				       	{
			          		StopAudioStreamForPlayer(playerid);
			          		ouvindoxmradio[playerid] = 0;
			          		ouvindoxmradioID[playerid] = 0;
						}
	    				return 1;
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} A porta está trancada!");
			}
	}
	for(new i; i < MAX_COMPLEXOS; i++)
    {
        if(ComplexoInfo[i][complexTipo] == 0 || ComplexoInfo[i][complexTipo] == 1 || ComplexoInfo[i][complexTipo] == 2)
        {
	   		if(IsPlayerInRangeOfPoint(playerid, 3, ComplexoInfo[i][cInX], ComplexoInfo[i][cInY], ComplexoInfo[i][cInZ]) && GetPlayerVirtualWorld(playerid) == 1000+i)
	    	{
		    	//if(ComplexoInfo[i][cTrancada] == 0)
	 	    	//{
		    	    SetPlayerInterior(playerid, 0);
		    	    SetPlayerVirtualWorld(playerid,0);

					PlayerInfo[playerid][pEntrouComplexo] = -1;

					SetPlayerPosFreeze(playerid,ComplexoInfo[i][cExX],ComplexoInfo[i][cExY],ComplexoInfo[i][cExZ], 1);

					if(ouvindoxmradio[playerid] != 0)
			       	{
		          		StopAudioStreamForPlayer(playerid);
		          		ouvindoxmradio[playerid] = 0;
		          		ouvindoxmradioID[playerid] = 0;
					}
	    			return 1;
				//}
				//else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A porta do complexo está trancada!");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3, ComplexoInfo[i][cInX2], ComplexoInfo[i][cInY2], ComplexoInfo[i][cInZ2]) && GetPlayerVirtualWorld(playerid) == 1000+i)
	    	{
		    	//if(ComplexoInfo[i][cTrancada] == 0)
	 	    	//{
		    	    SetPlayerInterior(playerid, 0);
		    	    SetPlayerVirtualWorld(playerid,0);

					PlayerInfo[playerid][pEntrouComplexo] = -1;

					SetPlayerPosFreeze(playerid,ComplexoInfo[i][cExX2],ComplexoInfo[i][cExY2],ComplexoInfo[i][cExZ2], 1);

					if(ouvindoxmradio[playerid] != 0)
			       	{
		          		StopAudioStreamForPlayer(playerid);
		          		ouvindoxmradio[playerid] = 0;
		          		ouvindoxmradioID[playerid] = 0;
					}
	    			return 1;
				//}
				//else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A porta do complexo está trancada!");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3, ComplexoInfo[i][cInX3], ComplexoInfo[i][cInY3], ComplexoInfo[i][cInZ3]) && GetPlayerVirtualWorld(playerid) == 1000+i)
	    	{
		    	//if(ComplexoInfo[i][cTrancada] == 0)
	 	    	//{
		    	    SetPlayerInterior(playerid, 0);
		    	    SetPlayerVirtualWorld(playerid,0);

					PlayerInfo[playerid][pEntrouComplexo] = -1;

					SetPlayerPosFreeze(playerid,ComplexoInfo[i][cExX3],ComplexoInfo[i][cExY3],ComplexoInfo[i][cExZ3], 1);

					if(ouvindoxmradio[playerid] != 0)
			       	{
		          		StopAudioStreamForPlayer(playerid);
		          		ouvindoxmradio[playerid] = 0;
		          		ouvindoxmradioID[playerid] = 0;
					}
	    			return 1;
				//}
				//else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A porta do complexo está trancada!");
			}
		}
		else if(ComplexoInfo[i][complexTipo] == 10)
        {
	   		if(IsPlayerInRangeOfPoint(playerid, 3, ComplexoInfo[i][cInX], ComplexoInfo[i][cInY], ComplexoInfo[i][cInZ]) && GetPlayerVirtualWorld(playerid) == 10)
	    	{
		    	//if(ComplexoInfo[i][cTrancada] == 0)
	 	    	//{
		    	    SetPlayerInterior(playerid, 0);
		    	    SetPlayerVirtualWorld(playerid,0);

					PlayerInfo[playerid][pEntrouComplexo] = -1;

					SetPlayerPosFreeze(playerid,ComplexoInfo[i][cExX],ComplexoInfo[i][cExY],ComplexoInfo[i][cExZ], 1);

					if(ouvindoxmradio[playerid] != 0)
			       	{
		          		StopAudioStreamForPlayer(playerid);
		          		ouvindoxmradio[playerid] = 0;
		          		ouvindoxmradioID[playerid] = 0;
					}
	    			return 1;
				//}
				//else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A porta do complexo está trancada!");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3, ComplexoInfo[i][cInX2], ComplexoInfo[i][cInY2], ComplexoInfo[i][cInZ2]) && GetPlayerVirtualWorld(playerid) == 10)
	    	{
		    	//if(ComplexoInfo[i][cTrancada] == 0)
	 	    	//{
		    	    SetPlayerInterior(playerid, 0);
		    	    SetPlayerVirtualWorld(playerid,0);

					PlayerInfo[playerid][pEntrouComplexo] = -1;

					SetPlayerPosFreeze(playerid,ComplexoInfo[i][cExX2],ComplexoInfo[i][cExY2],ComplexoInfo[i][cExZ2], 1);

					if(ouvindoxmradio[playerid] != 0)
			       	{
		          		StopAudioStreamForPlayer(playerid);
		          		ouvindoxmradio[playerid] = 0;
		          		ouvindoxmradioID[playerid] = 0;
					}
	    			return 1;
				//}
				//else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A porta do complexo está trancada!");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3, ComplexoInfo[i][cInX3], ComplexoInfo[i][cInY3], ComplexoInfo[i][cInZ3]) && GetPlayerVirtualWorld(playerid) == 10)
	    	{
		    	//if(ComplexoInfo[i][cTrancada] == 0)
	 	    	//{
		    	    SetPlayerInterior(playerid, 0);
		    	    SetPlayerVirtualWorld(playerid,0);

					PlayerInfo[playerid][pEntrouComplexo] = -1;

					SetPlayerPosFreeze(playerid,ComplexoInfo[i][cExX3],ComplexoInfo[i][cExY3],ComplexoInfo[i][cExZ3], 1);

					if(ouvindoxmradio[playerid] != 0)
			       	{
		          		StopAudioStreamForPlayer(playerid);
		          		ouvindoxmradio[playerid] = 0;
		          		ouvindoxmradioID[playerid] = 0;
					}
	    			return 1;
				//}
				//else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A porta do complexo está trancada!");
			}
		}
		else
		{
		    if(IsPlayerInRangeOfPoint(playerid, 3, ComplexoInfo[i][cInX], ComplexoInfo[i][cInY], ComplexoInfo[i][cInZ]) && GetPlayerVirtualWorld(playerid) == 0)
	    	{
		    	//if(ComplexoInfo[i][cTrancada] == 0)
	 	    	//{
		    	    SetPlayerInterior(playerid, 0);
		    	    SetPlayerVirtualWorld(playerid,0);

					PlayerInfo[playerid][pEntrouComplexo] = -1;

					SetPlayerPosFreeze(playerid,ComplexoInfo[i][cExX],ComplexoInfo[i][cExY],ComplexoInfo[i][cExZ], 1);

					if(ouvindoxmradio[playerid] != 0)
			       	{
		          		StopAudioStreamForPlayer(playerid);
		          		ouvindoxmradio[playerid] = 0;
		          		ouvindoxmradioID[playerid] = 0;
					}
	    			return 1;
				//}
				//else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A porta do complexo está trancada!");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3, ComplexoInfo[i][cInX2], ComplexoInfo[i][cInY2], ComplexoInfo[i][cInZ2]) && GetPlayerVirtualWorld(playerid) == 0)
	    	{
		    	//if(ComplexoInfo[i][cTrancada] == 0)
	 	    	//{
		    	    SetPlayerInterior(playerid, 0);
		    	    SetPlayerVirtualWorld(playerid,0);

					PlayerInfo[playerid][pEntrouComplexo] = -1;

					SetPlayerPosFreeze(playerid,ComplexoInfo[i][cExX2],ComplexoInfo[i][cExY2],ComplexoInfo[i][cExZ2], 1);

					if(ouvindoxmradio[playerid] != 0)
			       	{
		          		StopAudioStreamForPlayer(playerid);
		          		ouvindoxmradio[playerid] = 0;
		          		ouvindoxmradioID[playerid] = 0;
					}
	    			return 1;
				//}
				//else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A porta do complexo está trancada!");
			}
			else if(IsPlayerInRangeOfPoint(playerid, 3, ComplexoInfo[i][cInX3], ComplexoInfo[i][cInY3], ComplexoInfo[i][cInZ3]) && GetPlayerVirtualWorld(playerid) == 0)
	    	{
		    	//if(ComplexoInfo[i][cTrancada] == 0)
	 	    	//{
		    	    SetPlayerInterior(playerid, 0);
		    	    SetPlayerVirtualWorld(playerid,0);

					PlayerInfo[playerid][pEntrouComplexo] = -1;

					SetPlayerPosFreeze(playerid,ComplexoInfo[i][cExX3],ComplexoInfo[i][cExY3],ComplexoInfo[i][cExZ3], 1);

					if(ouvindoxmradio[playerid] != 0)
			       	{
		          		StopAudioStreamForPlayer(playerid);
		          		ouvindoxmradio[playerid] = 0;
		          		ouvindoxmradioID[playerid] = 0;
					}
	    			return 1;
				//}
				//else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A porta do complexo está trancada!");
			}
		}
	}
	if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
	{
	   	for(new i; i < MAX_EMPRESAS; i++)
	    {
	   		if(IsPlayerInRangeOfPoint(playerid, 3, EmpInfo[i][eInX], EmpInfo[i][eInY], EmpInfo[i][eInZ]) && GetPlayerVirtualWorld(playerid) == 100+i)
	    	{
		    	if(EmpInfo[i][eTrancada] == 0)
	 	    	{
	 	    	    if(EmpInfo[i][eExWorld] != 0)
	 	    	    {
			    	    SetPlayerInterior(playerid, EmpInfo[i][eExInt]);
			    	    SetPlayerVirtualWorld(playerid,EmpInfo[i][eExWorld]);

			    	    SetPlayerPosFreeze(playerid,EmpInfo[i][eExX],EmpInfo[i][eExY],EmpInfo[i][eExZ],1);
		    	    }
		    	    else
		    	    {
			    	    SetPlayerInterior(playerid, EmpInfo[i][eExInt]);
			    	    SetPlayerVirtualWorld(playerid, EmpInfo[i][eExWorld]);
			    	    SetPlayerPosFreeze(playerid,EmpInfo[i][eExX],EmpInfo[i][eExY],EmpInfo[i][eExZ],1);
					}
					PlayerInfo[playerid][pEntrouEmpresa] = -1;

					if(ouvindoxmradio[playerid] != 0)
			       	{
		          		StopAudioStreamForPlayer(playerid);
		          		ouvindoxmradio[playerid] = 0;
		          		ouvindoxmradioID[playerid] = 0;
					}
	    			return 1;
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} A porta está trancada!");
			}
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 5, 169.1583,2783.4038,767.7469))//Hospital
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    PlayerInfo[playerid][pEntrouCasa] = -1;
   		PlayerInfo[playerid][pEntrouComplexo] = -1;
	    PlayerInfo[playerid][pEntrouEmpresa] = -1;
	    PlayerInfo[playerid][pEntrouGaragem] = -1;
	    EntrouInt[playerid] = -1;
	    SetPlayerPosFreeze(playerid, 2027.3602,-1386.4576,17.2108, 1);
	}

	else if(IsPlayerInRangeOfPoint(playerid, 5, 1410.2965,-10.9775,1001.0098))//PCERJ 1 andar
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);

	    PlayerInfo[playerid][pEntrouCasa] = -1;
   		PlayerInfo[playerid][pEntrouComplexo] = -1;
	    PlayerInfo[playerid][pEntrouEmpresa] = -1;
	    PlayerInfo[playerid][pEntrouGaragem] = -1;
	    EntrouInt[playerid] = -1;

	    SetPlayerPosFreeze(playerid, 1728.8789,-1565.1876,14.5625, 1);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, 1390.2905,-30.3338,1000.9183))//PCERJ 2 andar
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);

	    SetPlayerPosFreeze(playerid, 1400.2490,-12.1037,1001.0098, 1);
	}


	else if(IsPlayerInRangeOfPoint(playerid, 5, 1513.2678,-1623.1249,774.0040))//PMERJ
	{
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);

	    PlayerInfo[playerid][pEntrouCasa] = -1;
   		PlayerInfo[playerid][pEntrouComplexo] = -1;
	    PlayerInfo[playerid][pEntrouEmpresa] = -1;
	    PlayerInfo[playerid][pEntrouGaragem] = -1;
	    EntrouInt[playerid] = -1;

	    SetPlayerPosFreeze(playerid, 2514.5640,-1525.5608,24.0324, 1);
	}

	else if (IsPlayerInRangeOfPoint(playerid, 5.0, 2296.9138,2498.3650,-7.4531)) // CBERJ GARAGEM
	{

		new PlayerNoCarro[4];
		new PlayerNoCarroL[4];
		new count = 0;
		new vehi = GetPlayerVehicleID(playerid);

		PlayerNoCarro[0] = 999;
		PlayerNoCarro[1] = 999;
		PlayerNoCarro[2] = 999;
		PlayerNoCarro[3] = 999;

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Apenas o motorista do veiculo pode utilizar o comando.");
			foreach(new pp : Player)
			{
				if(count < 4)
				{
					if(GetPlayerVehicleID(pp) == vehi)
					{
						PlayerNoCarro[count] = pp;
						PlayerNoCarroL[count] = GetPlayerVehicleSeat(pp);

						count++;
					}
				}
			}

			SetVehiclePos(vehi, 954.6230,-1467.4749,13.5547);
			LinkVehicleToInterior(vehi, 0);
			SetVehicleVirtualWorld(vehi, 0);
			SetVehicleZAngle(vehi, 180);

			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			PutPlayerInVehicle(playerid, vehi, 0);

			for(new lug = 0; lug < 4; lug++)
			{
				if(PlayerNoCarro[lug] != 999)
				{
					if(IsPlayerConnected(PlayerNoCarro[lug])) {
						SetPlayerVirtualWorld(PlayerNoCarro[lug], 0);
						SetPlayerInterior(PlayerNoCarro[lug], 0);
						PutPlayerInVehicle(PlayerNoCarro[lug], vehi, PlayerNoCarroL[lug]);
					}
				}
			}
			PlayerInfo[playerid][pInterior] = 0;
			PlayerInfo[playerid][pWorld] = 0;
		}else{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 954.6230,-1467.4749,13.5547);
			SetPlayerFacingAngle(playerid, 180);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 20.0,2481.5627,2513.5317,10.8203)) // PROTEGE GARAGEM
	{

		new PlayerNoCarro[4];
		new PlayerNoCarroL[4];
		new count = 0;
		new vehi = GetPlayerVehicleID(playerid);

		PlayerNoCarro[0] = 999;
		PlayerNoCarro[1] = 999;
		PlayerNoCarro[2] = 999;
		PlayerNoCarro[3] = 999;

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Apenas o motorista do veiculo pode utilizar o comando.");
			foreach(new pp : Player)
			{
				if(count < 4)
				{
					if(GetPlayerVehicleID(pp) == vehi)
					{
						PlayerNoCarro[count] = pp;
						PlayerNoCarroL[count] = GetPlayerVehicleSeat(pp);

						count++;
					}
				}
			}

			SetVehiclePos(vehi, 1828.8881,-1541.7632,13.3828);
			LinkVehicleToInterior(vehi, 0);
			SetVehicleVirtualWorld(vehi, 0);
			SetVehicleZAngle(vehi, 180);

			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			PutPlayerInVehicle(playerid, vehi, 0);

			for(new lug = 0; lug < 4; lug++)
			{
				if(PlayerNoCarro[lug] != 999)
				{
					if(IsPlayerConnected(PlayerNoCarro[lug])) {
						SetPlayerVirtualWorld(PlayerNoCarro[lug], 0);
						SetPlayerInterior(PlayerNoCarro[lug], 0);
						PutPlayerInVehicle(PlayerNoCarro[lug], vehi, PlayerNoCarroL[lug]);
					}
				}
			}
			PlayerInfo[playerid][pInterior] = 0;
			PlayerInfo[playerid][pWorld] = 0;
		}else{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			SetPlayerPosFreeze(playerid, 1828.8881,-1541.7632,13.3828, 1);
			SetPlayerFacingAngle(playerid, 180);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 20.0, -1628.0112,690.6479,7.1875)) // PCERJ GARAGEM
	{

		new PlayerNoCarro[4];
		new PlayerNoCarroL[4];
		new count = 0;
		new vehi = GetPlayerVehicleID(playerid);

		PlayerNoCarro[0] = 999;
		PlayerNoCarro[1] = 999;
		PlayerNoCarro[2] = 999;
		PlayerNoCarro[3] = 999;

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Apenas o motorista do veiculo pode utilizar o comando.");
			foreach(new pp : Player)
			{
				if(count < 4)
				{
					if(GetPlayerVehicleID(pp) == vehi)
					{
						PlayerNoCarro[count] = pp;
						PlayerNoCarroL[count] = GetPlayerVehicleSeat(pp);

						count++;
					}
				}
			}

			SetVehiclePos(vehi, 1734.4939,-1594.2455,13.3750);
			LinkVehicleToInterior(vehi, 0);
			SetVehicleVirtualWorld(vehi, 0);
			SetVehicleZAngle(vehi, 180);

			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			PutPlayerInVehicle(playerid, vehi, 0);

			for(new lug = 0; lug < 4; lug++)
			{
				if(PlayerNoCarro[lug] != 999)
				{
					if(IsPlayerConnected(PlayerNoCarro[lug])) {
						SetPlayerVirtualWorld(PlayerNoCarro[lug], 0);
						SetPlayerInterior(PlayerNoCarro[lug], 0);
						PutPlayerInVehicle(PlayerNoCarro[lug], vehi, PlayerNoCarroL[lug]);
					}
				}
			}
			PlayerInfo[playerid][pInterior] = 0;
			PlayerInfo[playerid][pWorld] = 0;
		}else{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			SetPlayerPosFreeze(playerid, 1734.4939,-1594.2455,13.3750, 1);
			SetPlayerFacingAngle(playerid, 180);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 20.0, 2318.3911,2446.4016,3.2734)) // PMERJ GARAGEM
	{
		new PlayerNoCarro[4];
		new PlayerNoCarroL[4];
		new count = 0;
		new vehi = GetPlayerVehicleID(playerid);

		PlayerNoCarro[0] = 999;
		PlayerNoCarro[1] = 999;
		PlayerNoCarro[2] = 999;
		PlayerNoCarro[3] = 999;

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} Apenas o motorista do veiculo pode utilizar o comando.");
			foreach(new pp : Player)
			{
				if(count < 4)
				{
					if(GetPlayerVehicleID(pp) == vehi)
					{
						PlayerNoCarro[count] = pp;
						PlayerNoCarroL[count] = GetPlayerVehicleSeat(pp);

						count++;
					}
				}
			}

			SetVehiclePos(vehi, 2501.8445,-1564.4512,24.0324);
			LinkVehicleToInterior(vehi, 0);
			SetVehicleVirtualWorld(vehi, 0);
			SetVehicleZAngle(vehi, 180);

			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			PutPlayerInVehicle(playerid, vehi, 180);

			for(new lug = 0; lug < 4; lug++)
			{
				if(PlayerNoCarro[lug] != 999)
				{
					if(IsPlayerConnected(PlayerNoCarro[lug])) {
						SetPlayerVirtualWorld(PlayerNoCarro[lug], 0);
						SetPlayerInterior(PlayerNoCarro[lug], 0);
						PutPlayerInVehicle(PlayerNoCarro[lug], vehi, PlayerNoCarroL[lug]);
					}
				}
			}
			PlayerInfo[playerid][pInterior] = 0;
			PlayerInfo[playerid][pWorld] = 0;
		}else{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			SetPlayerPosFreeze(playerid, 2501.8445,-1564.4512,24.0324, 1);
			
			SetPlayerFacingAngle(playerid, 180);
		}
		PlayerInfo[playerid][pInterior] = 0;
		PlayerInfo[playerid][pWorld] = 0;

	}

	return 1;
}
//=====================================================================================================================================//
//                                          VEHICLE SYSTEM
//=====================================================================================================================================//

forward StopEngine(vehicleid);
public StopEngine(vehicleid)
{
	if(!IsPushbike(GetVehicleModel(vehicleid)))
	{
		new params[7];
		GetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
		SetVehicleParamsEx(vehicleid,0,0,params[2],params[3],params[4],params[5],params[6]);
	}
	else
	{
		StartEngine(vehicleid);
	}
}
stock SetVehicleDamage(vehicleid)
{
	new slot = GetVehicleSlot(vehicleid);
	UpdateVehicleDamageStatus(vehicleid,VehicleInfo[slot][vDamage][0],VehicleInfo[slot][vDamage][1],VehicleInfo[slot][vDamage][2],VehicleInfo[slot][vDamage][3]);
	if(VehicleInfo[slot][vHealth] > 310) { SetVehicleHealth(vehicleid,VehicleInfo[slot][vHealth]); } else { SetVehicleHealth(vehicleid,300); }
}

CMD:resetararmasserv(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if (PlayerInfo[playerid][pAdmin] < 3001) return 1;

	for(new i; i < MAX_VEHICLES; i++)
	{
        VehicleInfo[i][vSlot1] = 0;
	   	VehicleInfo[i][vSlot2] = 0;
	    VehicleInfo[i][vSlot3] = 0;
	    VehicleInfo[i][vSlot4] = 0;
		VehicleInfo[i][vSlot5] = 0;
		VehicleInfo[i][vSlot6] = 0;
		VehicleInfo[i][vSlot7] = 0;
		VehicleInfo[i][vSlot8] = 0;
		VehicleInfo[i][vSlot9] = 0;
		VehicleInfo[i][vSlot10] = 0;
		VehicleInfo[i][vAmmo1] = 0;
		VehicleInfo[i][vAmmo2] = 0;
		VehicleInfo[i][vAmmo3] = 0;
		VehicleInfo[i][vAmmo4] = 0;
		VehicleInfo[i][vAmmo5] = 0;
		VehicleInfo[i][vAmmo6] = 0;
		VehicleInfo[i][vAmmo7] = 0;
		VehicleInfo[i][vAmmo8] = 0;
		VehicleInfo[i][vAmmo9] = 0;
		VehicleInfo[i][vAmmo10] = 0;
		VehicleInfo[i][vSlotTipo1] = 0;
	    VehicleInfo[i][vSlotTipo2] = 0;
	    VehicleInfo[i][vSlotTipo3] = 0;
	    VehicleInfo[i][vSlotTipo4] = 0;
	    VehicleInfo[i][vSlotTipo5] = 0;
	    VehicleInfo[i][vSlotTipo6] = 0;
	    VehicleInfo[i][vSlotTipo7] = 0;
	    VehicleInfo[i][vSlotTipo8] = 0;
	    VehicleInfo[i][vSlotTipo9] = 0;
	    VehicleInfo[i][vSlotTipo10] = 0;
	   	VehicleInfo[i][vpluva1] = 0;
		VehicleInfo[i][vpluva2] = 0;
		VehicleInfo[i][vpluva3] = 0;
		VehicleInfo[i][vpluva4] = 0;
		VehicleInfo[i][vpluva5] = 0;
		VehicleInfo[i][vpluva1a] = 0;
		VehicleInfo[i][vpluva2a] = 0;
		VehicleInfo[i][vpluva3a] = 0;
		VehicleInfo[i][vpluva4a] = 0;
		VehicleInfo[i][vpluva5a] = 0;
		VehicleInfo[i][vpluva1t] = 0;
		VehicleInfo[i][vpluva2t] = 0;
		VehicleInfo[i][vpluva3t] = 0;
		VehicleInfo[i][vpluva4t] = 0;
		VehicleInfo[i][vpluva5t] = 0;
	}
	return 1;
}

forward CarregandoCarros();
public CarregandoCarros()
{
	new b[256];
	new rows,fields;
	cache_get_data(rows, fields);
	new totalcarros = rows;
 	for(new i; i < totalcarros; i++)
  	{
  	    cache_get_field_content(i,"id",b);					VehicleInfo[i][vID] = strval(b);
		cache_get_field_content(i,"model",b);				VehicleInfo[i][vModel] = strval(b);
		if(VehicleInfo[i][vModel] < 400) VehicleInfo[i][vModel] = 481;
		if(IsInvalidVehicle(VehicleInfo[i][vModel])) VehicleInfo[i][vModel] = 481;

		cache_get_field_content(i,"spawn_x",b);				VehicleInfo[i][vSpawnX] = floatstr(b);
		cache_get_field_content(i,"spawn_y",b);				VehicleInfo[i][vSpawnY] = floatstr(b);
		cache_get_field_content(i,"spawn_z",b);				VehicleInfo[i][vSpawnZ] = floatstr(b);
		cache_get_field_content(i,"spawn_r",b);				VehicleInfo[i][vSpawnR] = floatstr(b);
		cache_get_field_content(i,"color1",b);				VehicleInfo[i][vColor1] = strval(b);
		cache_get_field_content(i,"color2",b);				VehicleInfo[i][vColor2] = strval(b);
		cache_get_field_content(i,"owning_character",b);	VehicleInfo[i][vOwner] = strval(b);
		cache_get_field_content(i,"mileage",b);				VehicleInfo[i][vMileage] = strval(b);
		cache_get_field_content(i,"lock",b);				VehicleInfo[i][vLock] = strval(b);
		cache_get_field_content(i,"locked",b);				VehicleInfo[i][vLocked] = strval(b);
		cache_get_field_content(i,"times_destroyed",b);		VehicleInfo[i][vDestroyed] = strval(b);
		cache_get_field_content(i,"fuel",b);				VehicleInfo[i][vFuel] = strval(b);
		cache_get_field_content(i,"faction",b);				VehicleInfo[i][vFaction] = strval(b);
		cache_get_field_content(i,"owner_name",b);			format(VehicleInfo[i][vOwnerName],MAX_PLAYER_NAME,"%s",b);
		VehicleInfo[i][vEngine] = 0;
        cache_get_field_content(i,"death_time",b);			VehicleInfo[i][vDeathTime] = strval(b);
        cache_get_field_content(i,"plate",b);				format(VehicleInfo[i][vPlate],32,"%s",b);
        cache_get_field_content(i,"insurance",b);			VehicleInfo[i][vInsurance] = strval(b);
        cache_get_field_content(i,"mods",b);				format(VehicleInfo[i][vMods],256,"%s",b);
        cache_get_field_content(i,"paintjob",b);			VehicleInfo[i][vPaintjob] = strval(b);
        cache_get_field_content(i,"imp",b);					VehicleInfo[i][vImpounded] = strval(b);
		cache_get_field_content(i,"gps",b);					VehicleInfo[i][vGps] = strval(b);
        cache_get_field_content(i,"comp",b);				VehicleInfo[i][vCompany] = strval(b);
		cache_get_field_content(i,"dmg1",b);				VehicleInfo[i][vDamage][0] = strval(b);
		cache_get_field_content(i,"dmg2",b);				VehicleInfo[i][vDamage][1] = strval(b);
		cache_get_field_content(i,"dmg3",b);				VehicleInfo[i][vDamage][2] = strval(b);
		cache_get_field_content(i,"dmg4",b);				VehicleInfo[i][vDamage][3] = strval(b);
        cache_get_field_content(i,"hp",b);					VehicleInfo[i][vHealth] = floatstr(b);
        cache_get_field_content(i,"neon",b);				VehicleInfo[i][vNeon] = strval(b);
        cache_get_field_content(i,"immob",b);				VehicleInfo[i][vImmob] = strval(b);
        cache_get_field_content(i,"selling",b);				VehicleInfo[i][vSelling] = strval(b);
        if(!strlen(VehicleInfo[i][vPlate]) && VehicleInfo[i][vModel]) FetchVehiclePlate(i,VehicleInfo[i][vPlate]);
        cache_get_field_content(i,"sprice",b);				VehicleInfo[i][vSellingPrice] = strval(b);
        cache_get_field_content(i,"sexpire",b);				VehicleInfo[i][vSellingExpire] = strval(b);
        cache_get_field_content(i,"radio",b);				VehicleInfo[i][vRadio] = strval(b);
        cache_get_field_content(i,"world",b);				VehicleInfo[i][vWorld] = strval(b);
        cache_get_field_content(i,"interior",b);			VehicleInfo[i][vInterior] = strval(b);
        cache_get_field_content(i,"malotes",b);				VehicleInfo[i][vMalote] = strval(b);
		cache_get_field_content(i,"slottipo1",b);				VehicleInfo[i][vSlotTipo1] = strval(b);
	    cache_get_field_content(i,"slottipo2",b);				VehicleInfo[i][vSlotTipo2] = strval(b);
	    cache_get_field_content(i,"slottipo3",b);				VehicleInfo[i][vSlotTipo3] = strval(b);
	    cache_get_field_content(i,"slottipo4",b);				VehicleInfo[i][vSlotTipo4] = strval(b);
	    cache_get_field_content(i,"slottipo5",b);				VehicleInfo[i][vSlotTipo5] = strval(b);
	    cache_get_field_content(i,"slottipo6",b);				VehicleInfo[i][vSlotTipo6] = strval(b);
	    cache_get_field_content(i,"slottipo7",b);				VehicleInfo[i][vSlotTipo7] = strval(b);
	    cache_get_field_content(i,"slottipo8",b);				VehicleInfo[i][vSlotTipo8] = strval(b);
	    cache_get_field_content(i,"slottipo9",b);				VehicleInfo[i][vSlotTipo9] = strval(b);
	    cache_get_field_content(i,"slottipo10",b);				VehicleInfo[i][vSlotTipo10] = strval(b);
	    cache_get_field_content(i,"slot1",b);				VehicleInfo[i][vSlot1] = strval(b);
	    cache_get_field_content(i,"slot2",b);				VehicleInfo[i][vSlot2] = strval(b);
	    cache_get_field_content(i,"slot3",b);				VehicleInfo[i][vSlot3] = strval(b);
	    cache_get_field_content(i,"slot4",b);				VehicleInfo[i][vSlot4] = strval(b);
		cache_get_field_content(i,"slot5",b);				VehicleInfo[i][vSlot5] = strval(b);
		cache_get_field_content(i,"slot6",b);				VehicleInfo[i][vSlot6] = strval(b);
		cache_get_field_content(i,"slot7",b);				VehicleInfo[i][vSlot7] = strval(b);
		cache_get_field_content(i,"slot8",b);				VehicleInfo[i][vSlot8] = strval(b);
		cache_get_field_content(i,"slot9",b);				VehicleInfo[i][vSlot9] = strval(b);
		cache_get_field_content(i,"slot10",b);				VehicleInfo[i][vSlot10] = strval(b);
		cache_get_field_content(i,"ammo1",b);				VehicleInfo[i][vAmmo1] = strval(b);
		cache_get_field_content(i,"ammo2",b);				VehicleInfo[i][vAmmo2] = strval(b);
		cache_get_field_content(i,"ammo3",b);				VehicleInfo[i][vAmmo3] = strval(b);
		cache_get_field_content(i,"ammo4",b);				VehicleInfo[i][vAmmo4] = strval(b);
		cache_get_field_content(i,"ammo5",b);				VehicleInfo[i][vAmmo5] = strval(b);
		cache_get_field_content(i,"ammo6",b);				VehicleInfo[i][vAmmo6] = strval(b);
		cache_get_field_content(i,"ammo7",b);				VehicleInfo[i][vAmmo7] = strval(b);
		cache_get_field_content(i,"ammo8",b);				VehicleInfo[i][vAmmo8] = strval(b);
		cache_get_field_content(i,"ammo9",b);				VehicleInfo[i][vAmmo9] = strval(b);
		cache_get_field_content(i,"ammo10",b);				VehicleInfo[i][vAmmo10] = strval(b);
		cache_get_field_content(i,"motor",b);				VehicleInfo[i][vMotor] = floatstr(b);
		cache_get_field_content(i,"bateria",b);				VehicleInfo[i][vBateria] = floatstr(b);
		cache_get_field_content(i,"pluva1",b);				VehicleInfo[i][vpluva1] = strval(b);
		cache_get_field_content(i,"pluva2",b);				VehicleInfo[i][vpluva2] = strval(b);
		cache_get_field_content(i,"pluva3",b);				VehicleInfo[i][vpluva3] = strval(b);
		cache_get_field_content(i,"pluva4",b);				VehicleInfo[i][vpluva4] = strval(b);
		cache_get_field_content(i,"pluva5",b);				VehicleInfo[i][vpluva5] = strval(b);
		cache_get_field_content(i,"pluva1a",b);				VehicleInfo[i][vpluva1a] = strval(b);
		cache_get_field_content(i,"pluva2a",b);				VehicleInfo[i][vpluva2a] = strval(b);
		cache_get_field_content(i,"pluva3a",b);				VehicleInfo[i][vpluva3a] = strval(b);
		cache_get_field_content(i,"pluva4a",b);				VehicleInfo[i][vpluva4a] = strval(b);
		cache_get_field_content(i,"pluva5a",b);				VehicleInfo[i][vpluva5a] = strval(b);
		cache_get_field_content(i,"pluva1t",b);				VehicleInfo[i][vpluva1t] = strval(b);
		cache_get_field_content(i,"pluva2t",b);				VehicleInfo[i][vpluva2t] = strval(b);
		cache_get_field_content(i,"pluva3t",b);				VehicleInfo[i][vpluva3t] = strval(b);
		cache_get_field_content(i,"pluva4t",b);				VehicleInfo[i][vpluva4t] = strval(b);
		cache_get_field_content(i,"pluva5t",b);				VehicleInfo[i][vpluva5t] = strval(b);

		cache_get_field_content(i,"Slot1X",b);				VehicleInfo[i][Slot1X] = floatstr(b);
		cache_get_field_content(i,"Slot1Y",b);				VehicleInfo[i][Slot1Y] = floatstr(b);
		cache_get_field_content(i,"Slot1Z",b);				VehicleInfo[i][Slot1Z] = floatstr(b);
		cache_get_field_content(i,"Slot1RX",b);				VehicleInfo[i][Slot1RX] = floatstr(b);
		cache_get_field_content(i,"Slot1RY",b);				VehicleInfo[i][Slot1RY] = floatstr(b);
		cache_get_field_content(i,"Slot1RZ",b);				VehicleInfo[i][Slot1RZ] = floatstr(b);
		cache_get_field_content(i,"Slot2X",b);				VehicleInfo[i][Slot2X] = floatstr(b);
		cache_get_field_content(i,"Slot2Y",b);				VehicleInfo[i][Slot2Y] = floatstr(b);
		cache_get_field_content(i,"Slot2Z",b);				VehicleInfo[i][Slot2Z] = floatstr(b);
		cache_get_field_content(i,"Slot2RX",b);				VehicleInfo[i][Slot2RX] = floatstr(b);
		cache_get_field_content(i,"Slot2RY",b);				VehicleInfo[i][Slot2RY] = floatstr(b);
		cache_get_field_content(i,"Slot2RZ",b);				VehicleInfo[i][Slot2RZ] = floatstr(b);
		cache_get_field_content(i,"Slot3X",b);				VehicleInfo[i][Slot3X] = floatstr(b);
		cache_get_field_content(i,"Slot3Y",b);				VehicleInfo[i][Slot3Y] = floatstr(b);
		cache_get_field_content(i,"Slot3Z",b);				VehicleInfo[i][Slot3Z] = floatstr(b);
		cache_get_field_content(i,"Slot3RX",b);				VehicleInfo[i][Slot3RX] = floatstr(b);
		cache_get_field_content(i,"Slot3RY",b);				VehicleInfo[i][Slot3RY] = floatstr(b);
		cache_get_field_content(i,"Slot3RZ",b);				VehicleInfo[i][Slot3RZ] = floatstr(b);
		cache_get_field_content(i,"Slot4X",b);				VehicleInfo[i][Slot4X] = floatstr(b);
		cache_get_field_content(i,"Slot4Y",b);				VehicleInfo[i][Slot4Y] = floatstr(b);
		cache_get_field_content(i,"Slot4Z",b);				VehicleInfo[i][Slot4Z] = floatstr(b);
		cache_get_field_content(i,"Slot4RX",b);				VehicleInfo[i][Slot4RX] = floatstr(b);
		cache_get_field_content(i,"Slot4RY",b);				VehicleInfo[i][Slot4RY] = floatstr(b);
		cache_get_field_content(i,"Slot4RZ",b);				VehicleInfo[i][Slot4RZ] = floatstr(b);
		cache_get_field_content(i,"Slot5X",b);				VehicleInfo[i][Slot5X] = floatstr(b);
		cache_get_field_content(i,"Slot5Y",b);				VehicleInfo[i][Slot5Y] = floatstr(b);
		cache_get_field_content(i,"Slot5Z",b);				VehicleInfo[i][Slot5Z] = floatstr(b);
		cache_get_field_content(i,"Slot5RX",b);				VehicleInfo[i][Slot5RX] = floatstr(b);
		cache_get_field_content(i,"Slot5RY",b);				VehicleInfo[i][Slot5RY] = floatstr(b);
		cache_get_field_content(i,"Slot5RZ",b);				VehicleInfo[i][Slot5RZ] = floatstr(b);
		cache_get_field_content(i,"Slot6X",b);				VehicleInfo[i][Slot6X] = floatstr(b);
		cache_get_field_content(i,"Slot6Y",b);				VehicleInfo[i][Slot6Y] = floatstr(b);
		cache_get_field_content(i,"Slot6Z",b);				VehicleInfo[i][Slot6Z] = floatstr(b);
		cache_get_field_content(i,"Slot6RX",b);				VehicleInfo[i][Slot6RX] = floatstr(b);
		cache_get_field_content(i,"Slot6RY",b);				VehicleInfo[i][Slot6RY] = floatstr(b);
		cache_get_field_content(i,"Slot6RZ",b);				VehicleInfo[i][Slot6RZ] = floatstr(b);
		cache_get_field_content(i,"Slot7X",b);				VehicleInfo[i][Slot7X] = floatstr(b);
		cache_get_field_content(i,"Slot7Y",b);				VehicleInfo[i][Slot7Y] = floatstr(b);
		cache_get_field_content(i,"Slot7Z",b);				VehicleInfo[i][Slot7Z] = floatstr(b);
		cache_get_field_content(i,"Slot7RX",b);				VehicleInfo[i][Slot7RZ] = floatstr(b);
		cache_get_field_content(i,"Slot7RY",b);				VehicleInfo[i][Slot7RY] = floatstr(b);
		cache_get_field_content(i,"Slot7RZ",b);				VehicleInfo[i][Slot7RZ] = floatstr(b);
		cache_get_field_content(i,"Slot8X",b);				VehicleInfo[i][Slot8X] = floatstr(b);
		cache_get_field_content(i,"Slot8Y",b);				VehicleInfo[i][Slot8Y] = floatstr(b);
		cache_get_field_content(i,"Slot8Z",b);				VehicleInfo[i][Slot8Z] = floatstr(b);
		cache_get_field_content(i,"Slot8RX",b);				VehicleInfo[i][Slot8RX] = floatstr(b);
		cache_get_field_content(i,"Slot8RY",b);				VehicleInfo[i][Slot8RY] = floatstr(b);
		cache_get_field_content(i,"Slot8RZ",b);				VehicleInfo[i][Slot8RZ] = floatstr(b);
		cache_get_field_content(i,"Slot9X",b);				VehicleInfo[i][Slot9X] = floatstr(b);
		cache_get_field_content(i,"Slot9Y",b);				VehicleInfo[i][Slot9Y] = floatstr(b);
		cache_get_field_content(i,"Slot9Z",b);				VehicleInfo[i][Slot9Z] = floatstr(b);
		cache_get_field_content(i,"Slot9RX",b);				VehicleInfo[i][Slot9RX] = floatstr(b);
		cache_get_field_content(i,"Slot9RY",b);				VehicleInfo[i][Slot9RY] = floatstr(b);
		cache_get_field_content(i,"Slot9RZ",b);				VehicleInfo[i][Slot9RZ] = floatstr(b);
		cache_get_field_content(i,"Slot10X",b);				VehicleInfo[i][Slot10X] = floatstr(b);
		cache_get_field_content(i,"Slot10Y",b);				VehicleInfo[i][Slot10Y] = floatstr(b);
		cache_get_field_content(i,"Slot10Z",b);				VehicleInfo[i][Slot10Z] = floatstr(b);
		cache_get_field_content(i,"Slot10RX",b);			VehicleInfo[i][Slot10RX] = floatstr(b);
		cache_get_field_content(i,"Slot10RY",b);			VehicleInfo[i][Slot10RY] = floatstr(b);
		cache_get_field_content(i,"Slot10RZ",b);			VehicleInfo[i][Slot10RZ] = floatstr(b);
	 	cache_get_field_content(i,"vSpoiler",b);				VehicleInfo[i][vSpoiler] = strval(b);
	  	cache_get_field_content(i,"vHood",b);					VehicleInfo[i][vHood] = strval(b);
	   	cache_get_field_content(i,"vRoof",b);					VehicleInfo[i][vRoof] = strval(b);
	    cache_get_field_content(i,"vSkirt",b);					VehicleInfo[i][vSkirt] = strval(b);
	    cache_get_field_content(i,"vLamps",b);					VehicleInfo[i][vLamps] = strval(b);
	    cache_get_field_content(i,"vNitro",b);					VehicleInfo[i][vNitro] = strval(b);
	    cache_get_field_content(i,"vExhaust",b);				VehicleInfo[i][vExhaust] = strval(b);
	    cache_get_field_content(i,"vWheels",b);					VehicleInfo[i][vWheels] = strval(b);
	    cache_get_field_content(i,"vStereo",b);					VehicleInfo[i][vStereo] = strval(b);
	    cache_get_field_content(i,"vHydraulics",b);				VehicleInfo[i][vHydraulics] = strval(b);
	    cache_get_field_content(i,"vFrontBumper",b);			VehicleInfo[i][vFrontBumper] = strval(b);
	    cache_get_field_content(i,"vRearBumper",b);				VehicleInfo[i][vRearBumper] = strval(b);
	    cache_get_field_content(i,"vRightVent",b);				VehicleInfo[i][vRightVent] = strval(b);
	    cache_get_field_content(i,"vLeftVent",b);				VehicleInfo[i][vLeftVent] = strval(b);
	    cache_get_field_content(i,"vPaintJob",b);				VehicleInfo[i][vPaintJob] = strval(b);

	    cache_get_field_content(i,"vPlacaProcurada",b);			VehicleInfo[i][vPlacaProcurada] = strval(b);
	    cache_get_field_content(i,"vGunHack",b);				VehicleInfo[i][vGunHack] = strval(b);
	    cache_get_field_content(i,"vGunHackA",b);				VehicleInfo[i][vGunHackA] = strval(b);
	    cache_get_field_content(i,"vAjudaIni",b);				VehicleInfo[i][vAjudaIni] = strval(b);
	    cache_get_field_content(i,"vGaragem",b);				VehicleInfo[i][vGaragem] = strval(b);
	    cache_get_field_content(i,"vDesmanchado",b);			VehicleInfo[i][vDesmanchado] = strval(b);

	}
	CreateVehicles();
	printf("[CARREGADO] %d veiculos carregados.", rows);
	return 1;
}

forward CreateVehicles();
public CreateVehicles()
{
    new Spawnar, Spawnados = 0;
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vModel] > 0)
	    {
		    //if(VehicleInfo[i][vFaction] > 0 || VehicleInfo[i][vSelling] != -1 || VehicleInfo[i][vPlacaProcurada] > 0)
		    //{
				if(!VehicleInfo[i][vImpounded] && !VehicleInfo[i][vDesmanchado])
				{
				    if(VehicleInfo[i][vSpawnX] != 0 && VehicleInfo[i][vSpawnY] != 0 && VehicleInfo[i][vSpawnZ] != 0)
				    {
        				Spawnar = 1;
      					if(VehicleInfo[i][vSelling] == -1 && Spawnar == 1)
						{
							if(VehicleInfo[i][vFaction] > 0)
							{

								if(VehicleInfo[i][vFaction] == 1 || VehicleInfo[i][vFaction] == 2 || VehicleInfo[i][vFaction] == 3 || VehicleInfo[i][vFaction] == 4 || VehicleInfo[i][vFaction] == 5) VehicleInfo[i][vWorld] = 0;

								VehicleInfo[i][vVehicle] = CreateVehicle(VehicleInfo[i][vModel],VehicleInfo[i][vSpawnX],VehicleInfo[i][vSpawnY],VehicleInfo[i][vSpawnZ],VehicleInfo[i][vSpawnR],VehicleInfo[i][vColor1],VehicleInfo[i][vColor2],-1, 1);

								SetVehicleVirtualWorld(VehicleInfo[i][vVehicle], VehicleInfo[i][vWorld]);
								LinkVehicleToInterior(VehicleInfo[i][vVehicle], VehicleInfo[i][vInterior]);

								ArmasNoPortaMalas(i);

								SetVehicleParamsEx(VehicleInfo[i][vVehicle],0,0,0,0,0,0,0);
								SetVehicleParamsEx(VehicleInfo[i][vVehicle], false, false, false, false, false, false, false);
								SetVehicleDamage(VehicleInfo[i][vVehicle]);

								VehicleInfo[i][vFuel] = 100;

								RefreshNeon(i);
								if(strlen(VehicleInfo[i][vPlate]))
									SetVehicleNumberPlate(VehicleInfo[i][vVehicle],VehicleInfo[i][vPlate]);
        						if(VehicleInfo[i][vLocked])
									LockVehicle(VehicleInfo[i][vVehicle]);
								sync_attribs[VehicleInfo[i][vVehicle]] = 1;
						  	}
							else
							{
							    if(GetDistanceBetweenPoints(2128.4241,-1131.3839,25.2316, VehicleInfo[i][vSpawnX],VehicleInfo[i][vSpawnY],VehicleInfo[i][vSpawnZ]) > 20.0){
								    if(VehicleInfo[i][vWorld] == 0)
								    {
									    new Sorteado = random(2);
										if(Sorteado == 1)
										{
										    if(Spawnados < 100)
											{
											    VehicleInfo[i][vSemUso] = 3600;
												VehicleInfo[i][vBateria] = 100.0;
												VehicleInfo[i][vVehicle] = CreateVehicle(VehicleInfo[i][vModel],VehicleInfo[i][vSpawnX],VehicleInfo[i][vSpawnY],VehicleInfo[i][vSpawnZ],VehicleInfo[i][vSpawnR],VehicleInfo[i][vColor1],VehicleInfo[i][vColor2],-1, 0);
		                                  		Spawnados++;

												SetVehicleVirtualWorld(VehicleInfo[i][vVehicle], VehicleInfo[i][vWorld]);
												LinkVehicleToInterior(VehicleInfo[i][vVehicle], VehicleInfo[i][vInterior]);
												ArmasNoPortaMalas(i);

												SetVehicleParamsEx(VehicleInfo[i][vVehicle],0,0,0,0,0,0,0);
												SetVehicleParamsEx(VehicleInfo[i][vVehicle], false, false, false, false, false, false, false);
												SetVehicleDamage(VehicleInfo[i][vVehicle]);
												RefreshNeon(i);
												if(strlen(VehicleInfo[i][vPlate]))
												{
													SetVehicleNumberPlate(VehicleInfo[i][vVehicle],VehicleInfo[i][vPlate]);
												}

							                    if(VehicleInfo[i][vLocked])
												{
													LockVehicle(VehicleInfo[i][vVehicle]);
												}

												sync_attribs[VehicleInfo[i][vVehicle]] = 1;
											}
											else { VehicleInfo[i][vVehicle] = -1; }
										}
										else { VehicleInfo[i][vVehicle] = -1; }
									}
									else { VehicleInfo[i][vVehicle] = -1; }
								}
								else { VehicleInfo[i][vVehicle] = -1; }
							}
						}
						else { VehicleInfo[i][vVehicle] = -1; }
					}
					else { VehicleInfo[i][vVehicle] = -1; }
					//===

					//===
				}
				else { VehicleInfo[i][vVehicle] = -1; }
		    //}
		    //else { VehicleInfo[i][vVehicle] = -1; }
		}
		else{VehicleInfo[i][vVehicle] = -1;}
	}
	print("[CARREGADO] Veiculos criados.");
}

stock FetchVehiclePlate(slot,platestr[]) {
	if(!IsVehTrain(VehicleInfo[slot][vModel]) && !IsPlane(VehicleInfo[slot][vModel]) && !IsHeli(VehicleInfo[slot][vModel]) && !IsBoat(VehicleInfo[slot][vModel]))
	{
		new vname[124];
		new temp[4];
		new temp2[4];
		new final[9];
		RandStr(temp,3);
		GetVehicleNameByModel(VehicleInfo[slot][vModel],vname,3);
		vname = strtoupper(vname);
		if(slot < 10)
		{
			format(temp2,sizeof(temp2),"00%d",(slot + 1));
		}
		else if(slot < 100)
		{
			format(temp2,sizeof(temp2),"0%d",(slot + 1));
		}
		else
	 	{
		 	format(temp2,sizeof(temp2),"%d",(slot + 1));
		}
		format(final,9,"%s%s%s",vname,temp2,temp);
	    return format(platestr,9,"%s",final);
	}
	return false;

}

stock RefreshNeon(slot)
{
	RemoveNeons(VehicleInfo[slot][vVehicle]);
	if(VehicleInfo[slot][vNeon] && VehicleInfo[slot][vNeonState]) AttachNeons(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vNeon]);
}

forward GetVehicleSlot(vehicleid);
public GetVehicleSlot(vehicleid)
{
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
		if(VehicleInfo[i][vVehicle] == vehicleid)
		{
		    return i;
		}
 	}
 	return -1;
}

forward OfferSellCar(playerid,other,offset,price);
public OfferSellCar(playerid,other,offset,price)
{
	new cur_offset = 0; new done = 0;
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vModel] > 0)
	    {
	        if(VehicleInfo[i][vOwner] == PlayerInfo[playerid][pID])
	        {
	            cur_offset ++;
	            if(cur_offset == offset)
	            {
	                if(VehicleInfo[i][vAjudaIni] == 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode vender o seu veículo da ajuda inicial.");

					vehicle_sell_offer[other] = i;
					vehicle_sell_sender[other] = playerid;
					vehicle_sell_price[other] = price;
					new str[256]; new vname[128];
					GetVehicleNameByModel(VehicleInfo[i][vModel],vname);
					format(str,sizeof(str),"{33AA33}%s ofereceu o %s para você por R$%d, você aceita?",PlayerName(playerid, 1),vname,price);
					ShowPlayerDialog(other,DIALOG_SELLCAR,DIALOG_STYLE_MSGBOX,"Alguém quer te vender um carro",str,"Aceitar","Recusar");
					format(str,sizeof(str),"{33AA33}Você ofereceu seu %s para %s por R$%d.",vname,PlayerName(other, 1),price);
					SendClientMessage(playerid,-1,str);
					done = 1;
	            }
	        }
	    }
	}
	if(!done) { SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Slot de veículo inválido."); }
	return 1;
}
forward AcceptVehicleCharge(playerid,offset);
public AcceptVehicleCharge(playerid,offset)
{
	new cur_offset = 0;
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vModel] > 0)
	    {
	        if(VehicleInfo[i][vOwner] == PlayerInfo[playerid][pID])
	        {
	            cur_offset ++;
	            if(cur_offset == offset)
	            {
					//new price_of_car = GetVehiclePrice(VehicleInfo[i][vModel]);
					new price_to_keep_car = 2500;
					if(PlayerInfo[playerid][pGrana] >= price_to_keep_car)
					{
						//new biz = GetClosestBiz(playerid);
						//if(biz > -1)
						//{
						    //if(EmpInfo[biz][eTipo] == 1)
						    //{
						        if(!vehicle_creating)
						        {
						            vehicle_creating = 1;
							        VehicleInfo[i][vDeathTime] = 0;

							        VehicleInfo[i][vSpawnX] = -139.3135;
									VehicleInfo[i][vSpawnY] = 1128.7042;
									VehicleInfo[i][vSpawnZ] = 19.75005;
									VehicleInfo[i][vSpawnR] = 0.0;
							        VehicleInfo[i][vWorld] = 0;
							        VehicleInfo[i][vBateria] = 50;
									VehicleInfo[i][vInterior] = 0;
									VehicleInfo[i][vSemUso] = 3600;
									VehicleInfo[i][vVehicle] = CreateVehicle(VehicleInfo[i][vModel],VehicleInfo[i][vSpawnX],VehicleInfo[i][vSpawnY],VehicleInfo[i][vSpawnZ],VehicleInfo[i][vSpawnR],VehicleInfo[i][vColor1],VehicleInfo[i][vColor2],-1);
                                    SetVehicleVirtualWorld(VehicleInfo[i][vVehicle], VehicleInfo[i][vWorld]);
									LinkVehicleToInterior(VehicleInfo[i][vVehicle], VehicleInfo[i][vInterior]);
									new engine,lights,alarm,doors,bonnet,boot,objective;
									GetVehicleParamsEx(VehicleInfo[i][vVehicle], engine,lights,alarm,doors,bonnet,boot,objective);
									SetVehicleParamsEx(VehicleInfo[i][vVehicle], engine, lights, alarm, doors, false, false, false);
									VehicleInfo[i][vInsurance] = 0;
									if(strlen(VehicleInfo[i][vPlate])) { SetVehicleNumberPlate(VehicleInfo[i][vVehicle],VehicleInfo[i][vPlate]); }
									vehicle_creating = 0;
									PlayerInfo[playerid][pGrana] -= price_to_keep_car;
									new str[128];
									format(str,sizeof(str),"Você resgatou seu veículo por R$%d, não esqueça de estaciona-lo.",price_to_keep_car);
									SendClientMessage(playerid,COLOR_LIGHTGREEN,str);
                                    return 1;
								}
								else
								{
								    SendClientMessage(playerid,COLOR_LIGHTRED,"Outro veículo está estacionado, tente novamente.");
								    return 1;
								}
						    //}
						    //else
						    //{
						    	//SendClientMessage(playerid,COLOR_LIGHTRED,"Você não está em uma loja de acessórios veículares.");
						    	//return 1;
						    //}
						//}
						//else
						//{
						//    SendClientMessage(playerid,COLOR_LIGHTRED,"Você não está em uma loja de acessórios veículares.");
                        //    return 1;
						//}
					}
					else
					{
					    new str[128];
					    format(str,sizeof(str),"ERRO:{FFFFFF} Você não tem R$%d.",price_to_keep_car);
					    SendClientMessage(playerid,COLOR_LIGHTRED,str);
                        return 1;
					}
	            }
	        }
	    }
	}
	return 1;
}
stock SaveVehicleDamage(vehicleid)
{
	new slot = GetVehicleSlot(vehicleid);
	if(slot > -1)
	{
	    new panels,doors,lights,tires;
		GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
		VehicleInfo[slot][vDamage][0] = panels;
		VehicleInfo[slot][vDamage][1] = doors;
		VehicleInfo[slot][vDamage][2] = lights;
		VehicleInfo[slot][vDamage][3] = tires;
		GetVehicleHealth(vehicleid,VehicleInfo[slot][vHealth]);
	}
}
forward TowPlayerVehicle(playerid,offset);
public TowPlayerVehicle(playerid,offset)
{
	new cur_offset = 0;
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vModel] > 0)
	    {
	        if(VehicleInfo[i][vOwner] == PlayerInfo[playerid][pID])
	        {
	            if(VehicleInfo[i][vDeathTime] == 0)
	            {
		            cur_offset ++;
		            if(cur_offset == offset)
		            {
		                if(!IsAnyPlayerInVehicle(VehicleInfo[i][vVehicle]))
		                {
		                    if(!VehicleInfo[i][vImpounded])
		                    {
								SendClientMessage(playerid, COLOR_YELLOW,"SERVER: O veículo está sendo guinchado.");
			                    vehicle_towing[playerid] = VehicleInfo[i][vVehicle];
								if(!IsAnyPlayerInVehicle(vehicle_towing[playerid]) && PlayerInfo[playerid][pGrana] >= 250)
								{
								    SaveVehicleDamage(vehicle_towing[playerid]);
									SetVehicleToRespawn(vehicle_towing[playerid]);
									vehicle_towing[playerid] = -1;
								 	PlayerInfo[playerid][pGrana] -= 250;
									SendClientMessage(playerid,COLOR_LIGHTGREEN,"Seu veículo foi guinchado para o local de spawn, e custou R$250");
									PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
								}
								else if(PlayerInfo[playerid][pGrana] >= 250)
								{
									SendClientMessageA(playerid,COLOR_LIGHTRED,"Alguém está em seu veículo. Ele não pode ser guinchado.");
									vehicle_towing[playerid] = -1;
								 	PlayerPlaySound(playerid,1055,0.0,0.0,0.0);
								}
								else
								{
									SendClientMessageA(playerid,COLOR_LIGHTRED,"Seu veículo não pode ser guinchado. Você não possui dinheiro suficiente para isto.");
									vehicle_towing[playerid] = -1;
								 	PlayerPlaySound(playerid,1055,0.0,0.0,0.0);
								}
							}
							else
							{
							    SendClientMessage(playerid,COLOR_LIGHTRED,"Este veículo está apreendido e não pode ser guinchado.");
                                return 1;
							}
		                }
		                else
		                {
		                    SendClientMessageA(playerid,COLOR_LIGHTRED,"Alguém está usando este veículo..");
		                    return 1;
		                }
		            }
				}
				else
				{
				    SendClientMessageA(playerid,COLOR_LIGHTRED,"O veículo não pode ser guinchado no momento.");
				    return 1;
				}
	        }
	    }
	}
    return 1;
}
forward StopAlarm(vehicleid);
public StopAlarm(vehicleid)
{
	new params[7];
	GetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
	SetVehicleParamsEx(vehicleid,params[0],params[1],0,params[3],params[4],params[5],params[6]);
    return 1;
}
forward StartAlarm(vehicleid);
public StartAlarm(vehicleid)
{
	new params[7];
	GetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
	SetVehicleParamsEx(vehicleid,params[0],params[1],1,params[3],params[4],params[5],params[6]);
	vehicle_alarm_time[vehicleid] = 30;
    return 1;
}
forward TowFactionVehicles(factionid);
public TowFactionVehicles(factionid)
{
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vFaction] == factionid && !IsAnyPlayerInVehicle(VehicleInfo[i][vVehicle]))
	    {
	        SetVehicleToRespawn(VehicleInfo[i][vVehicle]);
	    }
	}
}
forward IsAnyPlayerInVehicle(vehicleid);
public IsAnyPlayerInVehicle(vehicleid)
{
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    if(PlayerInfo[i][pLogado])
	    {
	        if(IsPlayerInAnyVehicle(i))
	        {
	            new veh = GetPlayerVehicleID(i);
	            if(veh == vehicleid)
	            {
	                return 1;
	            }
	        }
	    }
	}
	return 0;
}
forward ShowVehicleList(playerid,forplayer);
public ShowVehicleList(playerid,forplayer)
{
	new vname[42],
		segurado[6];
	new count = 1;
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vOwner] == PlayerInfo[playerid][pID])
	    {
	        if(count == 1)
	        {
	        	format(string,sizeof(string),"___________Veículos de %s___________",PlayerName(playerid, 0));
				SendClientMessage(forplayer, COLOR_LIGHTGREEN,string);
			}

			if(VehicleInfo[i][vInsurance] > 0)
			    format(segurado, sizeof segurado, "Sim");
			else
				format(segurado, sizeof segurado, "Não");

	        GetVehicleNameByModel(VehicleInfo[i][vModel],vname);
	        if(VehicleInfo[i][vDeathTime] == 0 && !VehicleInfo[i][vImpounded] && !VehicleInfo[i][vDesmanchado])
	        {
	            if(VehicleInfo[i][vVehicle] != -1)
				{
					format(string,sizeof(string),"[Slot %d]: %s, Segurado:[%s], Quilometragem[%d], Travas[%d], Destruido[%d], Imobilizador[%d], Bateria[%f], ID[%d]",count,vname,segurado,VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],VehicleInfo[i][vImmob],VehicleInfo[i][vBateria],VehicleInfo[i][vVehicle]);
                    SendClientMessage(forplayer,COLOR_LIGHTGREEN,string);
				}
				else
				{
					format(string,sizeof(string),"[Slot %d]: %s, Segurado[%s], Quilometragem[%d], Travas[%d], Destruido[%d], Imobilizador[%d], Bateria[%f], ID[%d]",count,vname,segurado,VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],VehicleInfo[i][vImmob],VehicleInfo[i][vBateria],VehicleInfo[i][vVehicle]);
                    SendClientMessage(forplayer,-1,string);
				}
			}
			if(VehicleInfo[i][vDeathTime] > 0)
			{
			    new redeemstr[64];
			    if(VehicleInfo[i][vDeathTime] > 60) { format(redeemstr,sizeof(redeemstr),"%d minutos",(VehicleInfo[i][vDeathTime] / 60)); } else { format(redeemstr,sizeof(redeemstr),"menos de um minuto!"); }
			    format(string,sizeof(string),"[DESTRUIDO] [Slot %d]: %s, Segurado[%s], Quilometragem[%d], Travas[%d], Destruido[%d], Imobilizador[%d], Bateria[%f], ID[%d], Tempo para retirar:[%s]",count,vname,segurado,VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],VehicleInfo[i][vImmob],VehicleInfo[i][vBateria],VehicleInfo[i][vVehicle],redeemstr);
       			SendClientMessage(forplayer,COLOR_LIGHTGREEN,string);
			}
			if(VehicleInfo[i][vImpounded])
			{
			    format(string,sizeof(string),"[APREENDIDO] [Slot %d]: %s Segurado[%s] Quilometragem[%d] Travas[%d] Destruido[%d] Imobilizador[%d], Bateria[%f] ID[%d]",count,vname,segurado,VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],VehicleInfo[i][vImmob],VehicleInfo[i][vBateria],VehicleInfo[i][vVehicle]);
                SendClientMessage(forplayer,COLOR_LIGHTRED,string);
			}
		 	if(VehicleInfo[i][vDesmanchado])
			{
			    format(string,sizeof(string),"[DESMANCHADO] [Slot %d]: %s Segurado[%s] Quilometragem[%d] Travas[%d] Destruido[%d] Imobilizador[%d], Bateria[%f] ID[%d]",count,vname,segurado,VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],VehicleInfo[i][vImmob],VehicleInfo[i][vBateria],VehicleInfo[i][vVehicle]);
                SendClientMessage(forplayer,COLOR_LIGHTRED,string);
			}
	        count ++;
	    }
	    if(PlayerInfo[playerid][pChaveEmprestada] != 0)
	    {
		    if(VehicleInfo[i][vID] == PlayerInfo[playerid][pChaveEmprestada])
		    {
		        if(count == 1)
		        {
		        	format(string,sizeof(string),"___________Seus veículos, %s___________",PlayerName(playerid, 0));
					SendClientMessage(forplayer, COLOR_LIGHTGREEN,string);
				}

				if(VehicleInfo[i][vInsurance] == 1)
			    	format(segurado, sizeof segurado, "Sim");
				else
					format(segurado, sizeof segurado, "Não");

				GetVehicleNameByModel(VehicleInfo[i][vModel],vname);
		        if(VehicleInfo[i][vDeathTime] == 0 && !VehicleInfo[i][vImpounded] && !VehicleInfo[i][vDesmanchado])
		        {
		            if(VehicleInfo[i][vVehicle] != -1)
					{
						format(string,sizeof(string),"[EMPRESTADO] [Slot %d]: %s, Segurado[%s], Quilometragem[%d], Travas[%d], Destruido[%d], Imobilizador[%d], Bateria[%f], ID[%d]",count,vname,segurado,VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],VehicleInfo[i][vImmob],VehicleInfo[i][vBateria],VehicleInfo[i][vVehicle]);
	                    SendClientMessage(forplayer,COLOR_LIGHTGREEN,string);
					}
					else
					{
						format(string,sizeof(string),"[EMPRESTADO] [Slot %d]: %s, Segurado[%s], Quilometragem[%d], Travas[%d], Destruido[%d], Imobilizador[%d], Bateria[%f], ID[%d]",count,vname,segurado,VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],VehicleInfo[i][vImmob],VehicleInfo[i][vBateria],VehicleInfo[i][vVehicle]);
	                    SendClientMessage(forplayer,-1,string);
					}
				}
				else if(VehicleInfo[i][vDeathTime])
				{
				    new redeemstr[64];
				    if(VehicleInfo[i][vDeathTime] > 60) { format(redeemstr,sizeof(redeemstr),"%d minutos",(VehicleInfo[i][vDeathTime] / 60)); } else { format(redeemstr,sizeof(redeemstr),"menos de um minuto!"); }
				    format(string,sizeof(string),"[EMPRESTADO] [Slot %d]: %s, Segurado[%s], Quilometragem[%d], Travas[%d], Destruido[%d], Imobilizador[%d], Bateria[%f], ID[%d], Tempo para retirar:[%s]",count,vname,segurado,VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],VehicleInfo[i][vImmob],VehicleInfo[i][vBateria],VehicleInfo[i][vVehicle],redeemstr);
	       			SendClientMessage(forplayer,COLOR_LIGHTGREEN,string);
				}
				else if(VehicleInfo[i][vImpounded])
				{
				    format(string,sizeof(string),"[EMPRESTADO][APREENDIDO] [Slot %d]: %s Segurado[%s] Quilometragem[%d] Travas[%d] Destruido[%d] Imobilizador[%d] Bateria[%f] ID[%d]",count,vname,segurado,VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],VehicleInfo[i][vImmob],VehicleInfo[i][vBateria],VehicleInfo[i][vVehicle]);
	                SendClientMessage(forplayer,COLOR_LIGHTRED,string);
				}
				else if(VehicleInfo[i][vDesmanchado])
				{
				    format(string,sizeof(string),"[EMPRESTADO][DESMANCHADO] [Slot %d]: %s Segurado[%s] Quilometragem[%d] Travas[%d] Destruido[%d] Imobilizador[%d] Bateria [%f] ID[%d]",count,vname,segurado,VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],VehicleInfo[i][vImmob],VehicleInfo[i][vBateria],VehicleInfo[i][vVehicle]);
	                SendClientMessage(forplayer,COLOR_LIGHTRED,string);
				}
		        count ++;
		    }
		}
	}
	if(count == 1)
	{
	    SendClientMessage(forplayer,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhum veiculo.");
	}
	return 1;
}

forward GetClosestVehicle(playerid);
public GetClosestVehicle(playerid)
{
	new winner = -1; new Float:windistance = 9999999.0;
	new Float:X, Float:Y, Float:Z;
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vVehicle] > -1)
	    {
		    GetVehiclePos(VehicleInfo[i][vVehicle],X,Y,Z);
			new Float:distance = GetDistanceToPoint(playerid,X,Y,Z);
			if(distance < windistance && distance < 10.0)
			{
			    winner = VehicleInfo[i][vVehicle];
			    windistance = distance;
			}
		}
	}
	return winner;
}
forward FetchNextVehicleSlot();
public FetchNextVehicleSlot()
{
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vModel] == 0)
	    {
	        return i;
	    }
	}
	return -1;
}

forward QUERY_PURCHASE_VEHICLE(playerid);
public QUERY_PURCHASE_VEHICLE(playerid)
{
	new slot = purchasing_vehicle[playerid];
 	if(slot > -1)
  	{
		VehicleInfo[slot][vID] = cache_insert_id();
	}
	purchasing_vehicle[playerid] = -1;
	return 1;
}
forward NumberOfVehicles(playerid);
public NumberOfVehicles(playerid)
{
	new count = 0;
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vOwner] == PlayerInfo[playerid][pID])
	    {
			count ++;
	    }
	}
	return count;
}

stock CharNumberOfVehicles(playerid,character)
{

	new count = 0;
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{

	    if(VehicleInfo[i][vOwner] == PlayerInfo[playerid][pID])
	    {

			count ++;

	    }

	}
	return count;

}

stock GetVehicleSlotFromID(id)
{
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vID] == id) { return i; }
	}
	return -1;
}

stock GiveCarKey(playerid,other,slot)
{
	new cur_offset = 0; new done = 0;
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vModel] > 0)
	    {
	        if(VehicleInfo[i][vOwner] == PlayerInfo[playerid][pID])
	        {
	            cur_offset ++;
	            if(cur_offset == slot)
	            {
					new str[256], vname[128];
					GetVehicleNameByModel(VehicleInfo[i][vModel],vname);
					format(str,sizeof(str),"** %s entrega para %s uma cópia da chave de seu veiculo %s.",PlayerName(playerid, 1),PlayerName(other, 1),vname);
     				ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[other][pChaveEmprestada] = VehicleInfo[i][vID]; // Chave Emprestada <<<
					done = 1;
	            }
	        }
	    }
	}
	if(!done) { SendClientMessageA(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Slot inválido."); }
}

stock ImpoundVehicle(playerid,vehicle)
{
	new slot = GetVehicleSlot(vehicle);
	new str[128], vname[64];
	GetVehicleNameByModel(GetVehicleModel(vehicle),vname);
	VehicleInfo[slot][vImpounded] = 1;
	DestruirObjetosCarro(slot, vehicle);
	VehicleInfo[slot][vTuned] = false;
	VehicleInfo[slot][vPlacaProcurada] = 0;

	DestroyVehicle(VehicleInfo[slot][vVehicle]);
	VehicleInfo[slot][vVehicle] = -1;
	//format(str,sizeof(str),"[FACÇÃO] %s %s apreendeu um veículo. (%s)",PlayerInfo[playerid][cRankName],name,vname);
	//SendFactionMessage(PlayerInfo[playerid][cFaction],str);
	format(str,sizeof(str),"[Apreensão] Você apreendeu este %s. As pessoas poderão retirar o veículo vindo até aqui.", vname);
	SendClientMessage(playerid,COLOR_LIGHTRED,str);
}

stock SpawnVeiculo(playerid,offset)
{
    new cur_offset = 0;
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vModel] > 0)
	    {
	        if(VehicleInfo[i][vOwner] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pChaveEmprestada] == VehicleInfo[i][vID])
	        {
         		cur_offset ++;
           		if(cur_offset == offset)
            	{
            	    if(VehicleInfo[i][vDeathTime] == 0)
	            	{
		                if(VehicleInfo[i][vVehicle] == -1)
		                {
							if(!VehicleInfo[i][vImpounded])
							{
							    if(VehicleInfo[i][vDesmanchado] == 1)
								{
									SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O seu veículo foi desmanchado. Use /v remontar.");
								}
								else
								{
								    if(VehicleInfo[i][vSpawnX] == 0 && VehicleInfo[i][vSpawnY] == 0 && VehicleInfo[i][vSpawnZ] == 0)
								    {
								        new vaga = random(19);
								    	VehicleInfo[i][vSpawnX] = estacionamento_vagas[vaga][0];
								    	VehicleInfo[i][vSpawnY] = estacionamento_vagas[vaga][1];
								    	VehicleInfo[i][vSpawnZ] = estacionamento_vagas[vaga][2];
									}
									VehicleInfo[i][vSemUso] = 3600;
									if(VehicleInfo[i][vOwner] == PlayerInfo[playerid][pID])
									{
									    format(VehicleInfo[i][vOwnerName],MAX_PLAYER_NAME,"%s",PlayerName(playerid,1));
									}
								    VehicleInfo[i][vVehicle] = CreateVehicle(VehicleInfo[i][vModel],VehicleInfo[i][vSpawnX],VehicleInfo[i][vSpawnY],VehicleInfo[i][vSpawnZ],VehicleInfo[i][vSpawnR],VehicleInfo[i][vColor1],VehicleInfo[i][vColor2],-1);
						  			SetVehicleVirtualWorld(VehicleInfo[i][vVehicle], VehicleInfo[i][vWorld]);
									LinkVehicleToInterior(VehicleInfo[i][vVehicle], VehicleInfo[i][vInterior]);
									SetVehicleParamsEx(VehicleInfo[i][vVehicle],0,0,0,0,0,0,0);
									new engine,lights,alarm,doors,bonnet,boot,objective;
									GetVehicleParamsEx(VehicleInfo[i][vVehicle], engine,lights,alarm,doors,bonnet,boot,objective);
									SetVehicleParamsEx(VehicleInfo[i][vVehicle], engine, lights, alarm, doors, false, false, false);
									SetVehicleDamage(VehicleInfo[i][vVehicle]);
									new componentid;
									for( new p=0; p < 14; p++ )
									{
	        							componentid = GetVehicleComponentInSlot( VehicleInfo[i][vVehicle], p );
	               						if( componentid != 0 ) RemoveVehicleComponent( VehicleInfo[i][vVehicle], componentid );
							        }

							        if(IsValidDynamicObject(VehicleInfo[i][vObj1])) DestroyDynamicObject(VehicleInfo[i][vObj1]);
								    if(IsValidDynamicObject(VehicleInfo[i][vObj2])) DestroyDynamicObject(VehicleInfo[i][vObj2]);
								    if(IsValidDynamicObject(VehicleInfo[i][vObj3])) DestroyDynamicObject(VehicleInfo[i][vObj3]);
								    if(IsValidDynamicObject(VehicleInfo[i][vObj4])) DestroyDynamicObject(VehicleInfo[i][vObj4]);
								    if(IsValidDynamicObject(VehicleInfo[i][vObj5])) DestroyDynamicObject(VehicleInfo[i][vObj5]);
								    if(IsValidDynamicObject(VehicleInfo[i][vObj6])) DestroyDynamicObject(VehicleInfo[i][vObj6]);
								    if(IsValidDynamicObject(VehicleInfo[i][vObj7])) DestroyDynamicObject(VehicleInfo[i][vObj7]);
								    if(IsValidDynamicObject(VehicleInfo[i][vObj8])) DestroyDynamicObject(VehicleInfo[i][vObj8]);
								    if(IsValidDynamicObject(VehicleInfo[i][vObj9])) DestroyDynamicObject(VehicleInfo[i][vObj9]);
								    if(IsValidDynamicObject(VehicleInfo[i][vObj10])) DestroyDynamicObject(VehicleInfo[i][vObj10]);

									DestruirObjetosCarro(i, VehicleInfo[i][vVehicle]);
									if (IsValidDynamicObject(VehicleInfo[i][vSirene][0]))
									{
								 		if(IsValidDynamicObject(VehicleInfo[i][vSirene][0])) DestroyDynamicObject(VehicleInfo[i][vSirene][0]);
										VehicleInfo[i][vSirene][0] = 0;
									}

									if(VehicleInfo[i][vGaragem] > 0)
									{
										GaragemInfo[VehicleInfo[i][vGaragem]][hCarros]--;

										VehicleInfo[i][vGaragem] = 0;
									}

									RefreshNeon(i);
									if(strlen(VehicleInfo[i][vPlate]))
									{
										SetVehicleNumberPlate(VehicleInfo[i][vVehicle],VehicleInfo[i][vPlate]);
									}
									sync_attribs[VehicleInfo[i][vVehicle]] = 1;
									AddVehicleMods(VehicleInfo[i][vVehicle],i); ResyncColors(VehicleInfo[i][vVehicle]);
									ArmasNoPortaMalas(i);

					    			for(new cc = 0; cc < 101; cc++)
							    		CargaInfo[VehicleInfo[i][vVehicle]][cSlot][cc] = 0;

									SendClientMessage(playerid,COLOR_LIGHTGREEN,"Veiculo spawnado.");
									cp_target[playerid] = 1;
									SetPlayerCheckpoint(playerid,VehicleInfo[i][vSpawnX],VehicleInfo[i][vSpawnY],VehicleInfo[i][vSpawnZ],5.0);
									if(VehicleInfo[i][vModel] == 481 || VehicleInfo[i][vModel] == 509 || VehicleInfo[i][vModel] == 510)
									{
									    StartEngine(VehicleInfo[i][vVehicle]);
									}
								}
								//===
								//===

							}
							else
							{
							    SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Este veículo está apreendido.");
							}
						}
						else
						{
	    					SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Este veiculo já está spawnado.");
						}
					}
					else
					{
					    SendClientMessageA(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Seu veículo não pode ser spawnado no momento.");
					}
				}
	        }
	    }
	}
}

stock RemontarCarro(playerid,offset)
{
    new cur_offset = 0;
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vModel] > 0)
	    {
	        if(VehicleInfo[i][vOwner] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pChaveEmprestada] == VehicleInfo[i][vID])
	        {
         		cur_offset ++;
           		if(cur_offset == offset)
            	{
            	    if(VehicleInfo[i][vDeathTime] == 0)
	            	{
		                if(VehicleInfo[i][vVehicle] == -1)
		                {
							if(!VehicleInfo[i][vImpounded])
							{
								if(VehicleInfo[i][vDesmanchado] == 1)
								{
								    new price = (FetchVehicleInsurancePrice(VehicleInfo[i][vModel])+10);
									if(price > -1)
									{
									    new Remontou = 0;
									    if(VehicleInfo[i][vInsurance] > 0) {
									        SendClientMessage(playerid, COLOR_LIGHTGREEN, "O seguro cobriu o seu veículo desmanchado...");
									        Remontou++;
									    }

                                        if(Remontou == 0)
                                        {
											if(PlayerInfo[playerid][pGrana] < price)
										    {
										        new str[126];
										        format(str,sizeof(str),"ERRO:{FFFFFF} Você não tem R$%d para remontar este veículo.", price);
												SendClientMessage(playerid,COLOR_LIGHTRED,str);
											}
											else
											{
											    new str[126];
										        format(str,sizeof(str),"Você gastou R$%d para remontar seu veículo.", price);
												SendClientMessage(playerid,COLOR_LIGHTGREEN,str);
												PlayerInfo[playerid][pGrana] -= price;
											    Remontou = 1;
											}
										}

                                        if(Remontou == 1)
									    {
									        VehicleInfo[i][vSpawnX] = 1500.2792;
											VehicleInfo[i][vSpawnY] = -1241.3109;
											VehicleInfo[i][vSpawnZ] = 14.5563;
											VehicleInfo[i][vSpawnR] = 0.0;
											VehicleInfo[i][vSemUso] = 3600;

										    VehicleInfo[i][vVehicle] = CreateVehicle(VehicleInfo[i][vModel],VehicleInfo[i][vSpawnX],VehicleInfo[i][vSpawnY],VehicleInfo[i][vSpawnZ],VehicleInfo[i][vSpawnR],VehicleInfo[i][vColor1],VehicleInfo[i][vColor2],-1);
								  			SetVehicleVirtualWorld(VehicleInfo[i][vVehicle], VehicleInfo[i][vWorld]);
											LinkVehicleToInterior(VehicleInfo[i][vVehicle], VehicleInfo[i][vInterior]);
											SetVehicleParamsEx(VehicleInfo[i][vVehicle],0,0,0,0,0,0,0);
											new engine,lights,alarm,doors,bonnet,boot,objective;
											GetVehicleParamsEx(VehicleInfo[i][vVehicle], engine,lights,alarm,doors,bonnet,boot,objective);
											SetVehicleParamsEx(VehicleInfo[i][vVehicle], engine, lights, alarm, doors, false, false, false);
											SetVehicleDamage(VehicleInfo[i][vVehicle]);
											new componentid;
											for( new p=0; p < 14; p++ )
											{
			        							componentid = GetVehicleComponentInSlot( VehicleInfo[i][vVehicle], p );
			               						if( componentid != 0 ) RemoveVehicleComponent( VehicleInfo[i][vVehicle], componentid );
									        }

									        if(IsValidDynamicObject(VehicleInfo[i][vObj1])) DestroyDynamicObject(VehicleInfo[i][vObj1]);
										    if(IsValidDynamicObject(VehicleInfo[i][vObj2])) DestroyDynamicObject(VehicleInfo[i][vObj2]);
										    if(IsValidDynamicObject(VehicleInfo[i][vObj3])) DestroyDynamicObject(VehicleInfo[i][vObj3]);
										    if(IsValidDynamicObject(VehicleInfo[i][vObj4])) DestroyDynamicObject(VehicleInfo[i][vObj4]);
										    if(IsValidDynamicObject(VehicleInfo[i][vObj5])) DestroyDynamicObject(VehicleInfo[i][vObj5]);
										    if(IsValidDynamicObject(VehicleInfo[i][vObj6])) DestroyDynamicObject(VehicleInfo[i][vObj6]);
										    if(IsValidDynamicObject(VehicleInfo[i][vObj7])) DestroyDynamicObject(VehicleInfo[i][vObj7]);
										    if(IsValidDynamicObject(VehicleInfo[i][vObj8])) DestroyDynamicObject(VehicleInfo[i][vObj8]);
										    if(IsValidDynamicObject(VehicleInfo[i][vObj9])) DestroyDynamicObject(VehicleInfo[i][vObj9]);
										    if(IsValidDynamicObject(VehicleInfo[i][vObj10])) DestroyDynamicObject(VehicleInfo[i][vObj10]);

											DestruirObjetosCarro(i, VehicleInfo[i][vVehicle]);
											if (IsValidDynamicObject(VehicleInfo[i][vSirene][0]))
											{
										 		if(IsValidDynamicObject(VehicleInfo[i][vSirene][0])) DestroyDynamicObject(VehicleInfo[i][vSirene][0]);
												VehicleInfo[i][vSirene][0] = 0;
											}

											VehicleInfo[i][vDesmanchado] = 0;

											RefreshNeon(i);
											if(strlen(VehicleInfo[i][vPlate]))
											{
												SetVehicleNumberPlate(VehicleInfo[i][vVehicle],VehicleInfo[i][vPlate]);
											}
											sync_attribs[VehicleInfo[i][vVehicle]] = 1;
											AddVehicleMods(VehicleInfo[i][vVehicle],i); ResyncColors(VehicleInfo[i][vVehicle]);
											ArmasNoPortaMalas(i);

							    			for(new cc = 0; cc < 101; cc++)
									    		CargaInfo[VehicleInfo[i][vVehicle]][cSlot][cc] = 0;

											SendClientMessage(playerid,COLOR_LIGHTGREEN,"Veiculo remontado!");
											cp_target[playerid] = 1;
											SetPlayerCheckpoint(playerid,VehicleInfo[i][vSpawnX],VehicleInfo[i][vSpawnY],VehicleInfo[i][vSpawnZ],5.0);
											if(VehicleInfo[i][vModel] == 481 || VehicleInfo[i][vModel] == 509 || VehicleInfo[i][vModel] == 510)
											{
											    StartEngine(VehicleInfo[i][vVehicle]);
											}
										}
									}
								}
								else
								{
                                    SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Este veículo não está desmanchado.");
								}
								//===
								//===

							}
							else
							{
							    SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Este veículo está apreendido.");
							}
						}
						else
						{
	    					SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Este veiculo já está spawnado.");
						}
					}
					else
					{
					    SendClientMessageA(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Seu veículo não pode ser spawnado no momento.");
					}
				}
	        }
	    }
	}
}

stock UnimpoundVehicle(playerid,offset)
{
    new cur_offset = 0;
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vModel] > 0)
	    {
	        if(VehicleInfo[i][vOwner] == PlayerInfo[playerid][pID])
	        {
	            if(VehicleInfo[i][vDeathTime] == 0)
	            {
		            cur_offset ++;
		            if(cur_offset == offset)
		            {

		                new multas = 0, valortotal = 0;

						for(new mm = 0; mm < MAX_MULTAS; mm++)
						{
	    					if(MultasInfo[mm][mPaga] == 0)
	    					{
								if(MultasInfo[mm][mCarro] > 0)
					  			{
					  		        if(VehicleInfo[i][vID] == MultasInfo[mm][mCarro])
					  		        {
									    valortotal = valortotal+MultasInfo[mm][mValor];
										multas++;
									}
								}
							}
						}
						if(valortotal <= 0)
						{
							if(VehicleInfo[i][vImpounded])
							{
							    VehicleInfo[i][vSpawnX] = 2456.4768;
								VehicleInfo[i][vSpawnY] = -2101.6057;
								VehicleInfo[i][vSpawnZ] = 13.2161;
								VehicleInfo[i][vSpawnR] = 360;
								VehicleInfo[i][vSemUso] = 3600;
								VehicleInfo[i][vVehicle] = CreateVehicle(VehicleInfo[i][vModel],2456.4768,-2101.6057,13.2161,360.0,VehicleInfo[i][vColor1],VehicleInfo[i][vColor2],-1);
								if(strlen(VehicleInfo[i][vPlate])) { SetVehicleNumberPlate(VehicleInfo[i][vVehicle],VehicleInfo[i][vPlate]); }
                                new engine,lights,alarm,doors,bonnet,boot,objective;
								GetVehicleParamsEx(VehicleInfo[i][vVehicle], engine,lights,alarm,doors,bonnet,boot,objective);
								SetVehicleParamsEx(VehicleInfo[i][vVehicle], engine, lights, alarm, doors, false, false, false);
								AddVehicleMods(VehicleInfo[i][vVehicle],i); ResyncColors(VehicleInfo[i][vVehicle]);
								VehicleInfo[i][vImpounded] = 0;
								VehicleInfo[i][vPlacaProcurada] = 0;
								ArmasNoPortaMalas(i);
								new vname[64], str[128];
								GetVehicleNameByModel(VehicleInfo[i][vModel],vname);
								format(str,sizeof(str),"{33AA33}Você desapreendeu o seu %s, não se esqueça de estacioná-lo!",vname,valortotal);
								SendClientMessage(playerid,COLOR_LIGHTGREEN,str);
							}
							else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não está apreendido.");
						}
						else
						{
						    new vname[64], str[128];
							GetVehicleNameByModel(VehicleInfo[i][vModel],vname);
						    format(str,sizeof(str),"ERRO:{FFFFFF} O seu %s tem %d multas, totalizando R$%d a ser pagas para que o veículo possa ser retirado!",vname,multas,valortotal);
							SendClientMessage(playerid,COLOR_LIGHTRED,str);
							SendClientMessage(playerid,COLOR_GREY,"DICA: Vá até a prefeitura para pagar suas multas.");
							return 1;
						}
		            }
				}
				else
				{
				    SendClientMessageA(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Seu veículo não pode ser desapreendido no momento.");
				}
	        }
	    }
	}
	return 1;
}

stock FindPlayerVehicle(playerid,offset)
{
	new cur_offset = 0;
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vModel] > 0)
	    {
	        if(VehicleInfo[i][vOwner] == PlayerInfo[playerid][pID])
	        {
	            if(VehicleInfo[i][vDeathTime] == 0)
	            {
		            cur_offset ++;
		            if(cur_offset == offset)
		            {
	                    if(!VehicleInfo[i][vImpounded])
	                    {
							if(VehicleInfo[i][vGps])
							{
							    new Float:X, Float:Y, Float:Z;
							    GetVehiclePos(VehicleInfo[i][vVehicle],X,Y,Z);
								cp_target[playerid] = 1;
								SetPlayerCheckpoint(playerid,X,Y,Z,5.0);
								SendClientMessage(playerid,COLOR_LIGHTGREEN,"As coordenadas foram enviadas ao seu GPS.");
								PlayerPlaySound(i,1149,0.0,0.0,0.0);
								find_cooldown[playerid] = 150;
							}
							else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não possui um GPS.");
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo está apreendido. Você não pode localizá-lo.");
		            }
				}
				else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Seu veículo não pode ser encontrado no momento.");
	        }
	    }
	}
	return 1;
}

stock TowCompanyCars(company)
{
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
		if(VehicleInfo[i][vModel] > 0)
		{
		    if(VehicleInfo[i][vCompany] == company)
		    {
		        if(!IsAnyPlayerInVehicle(VehicleInfo[i][vVehicle]))
		        {
		            SetVehicleToRespawn(VehicleInfo[i][vVehicle]);
		        }
		    }
		}
	}
}

CMD:verdrogas(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;
    new idx = 0;
    new tmp[64];
    tmp = strtok(params,idx);
    if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USE: /verdrogas [id do player]"); return 1; }
    new other = ReturnUser(tmp);
    if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_WHITE,"{FF6347}ERRO:{FFFFFF} Jogador não conectado."); return 1; }

    ShowDrugs(playerid, other);
	ShowIngredientes(playerid, other);
	return 1;
}

COMMAND:verveiculos(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] >= 5)
    {
		new idx = 0;
        new tmp[64];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USE: /verveiculos [id do player]"); return 1; }
        new other = ReturnUser(tmp);
        if(!IsPlayerConnected(other)) { SendClientMessage(playerid,COLOR_WHITE,"{FF6347}ERRO:{FFFFFF} Jogador não conectado."); return 1; }
        new str[128];
        new vname[64];
        format(str,sizeof(str),"___________Veículos de %s___________",PlayerName(other, 0));
        SendClientMessage(playerid, COLOR_LIGHTGREEN,str);
        new count = 1,
            segurado[7];
		for(new i = 0; i < MAX_CA_VEHICLES; i ++)
		{
			if(VehicleInfo[i][vOwner] == PlayerInfo[other][pID])
			{
			    if(VehicleInfo[i][vInsurance] == 1)
					format(segurado, sizeof segurado, "Sim");
				else
				    format(segurado, sizeof segurado, "Não");

				GetVehicleNameByModel(VehicleInfo[i][vModel],vname);
				new col = -1;
				if(VehicleInfo[i][vDeathTime] == 0)
					format(str,sizeof(str),"Veículo #%d: %s, Seguros:[%s], Quilometragem:[%d], Travas:[%d], Destruido:[%d], Imobilizador:[%d], Bateria [%f], ID:[%d]",count,vname,segurado,VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],VehicleInfo[i][vImmob],VehicleInfo[i][vBateria],VehicleInfo[i][vVehicle]);
				else
				{
				    col = COLOR_LIGHTGREEN;
				    new redeemstr[64];
				    if(VehicleInfo[i][vDeathTime] > 60) { format(redeemstr,sizeof(redeemstr),"%d mins",(VehicleInfo[i][vDeathTime] / 60)); } else { format(redeemstr,sizeof(redeemstr),"menos de um minuto!"); }
				    format(str,sizeof(str),"Veículo #%d: %s, Segurado:[%s], Quilometragem:[%d], Travas:[%d], Destruido:[%d], Imobilizador:[%d], Bateria [%f], ID:[%d]",count,vname,segurado,VehicleInfo[i][vMileage],VehicleInfo[i][vLock],VehicleInfo[i][vDestroyed],VehicleInfo[i][vImmob],VehicleInfo[i][vBateria],VehicleInfo[i][vVehicle],redeemstr);
				}
				count ++;
				SendClientMessage(playerid,col,str);
			}
		}
    }
    return 1;
}

COMMAND:ircarrosql(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new idx = 0;
	if(PlayerInfo[playerid][pAdmin] >= 3000)
    {
        new tmp[32];
        tmp = strtok(params,idx);
        if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /ircarrosql [Veículo SQL ID]"); return 1; }
        new uid = strval(tmp);
        if(uid < 1 || uid > 5000) { SendClientMessage(playerid,COLOR_LIGHTRED,"{FF6347}ERRO:{FFFFFF} SQL inválido."); return 1; }
        for(new i = 0; i < MAX_CA_VEHICLES; i ++)
		{
            if(VehicleInfo[i][vModel] > 0)
            {
                if(!VehicleInfo[i][vImpounded])
                {
					if(VehicleInfo[i][vID] == uid)
					{
					    new Float:X, Float:Y, Float:Z;
					    GetVehiclePos(VehicleInfo[i][vVehicle],X,Y,Z);
					    SetPlayerPos(playerid,X,Y,Z);
					    SetPlayerInterior(playerid,0);
					    SetPlayerVirtualWorld(playerid,0);
					    return 1;
					}
                }
            }
        }
        SendClientMessage(playerid,COLOR_WHITE,"{FF6347}ERRO:{FFFFFF} Não foi possível localizar o veículo ou ele está confiscado.");
        return 1;
    }
    else
    {
		SendClientMessage(playerid,COLOR_WHITE,"{FF6347}ERRO:{FFFFFF} Você não pode usar este comando.");
		return 1;
    }
}

COMMAND:savevehicles(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] >= 5)
    {
		SendClientMessage(playerid,COLOR_LIGHTGREEN,"[SALVANDO] Salvando veículos");
		SaveVehicles();

		return 1;
    }
    return 0;
}
forward SaveVehicles();
public SaveVehicles()
{
    for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vFaction] == 0 && VehicleInfo[i][vVehicle] > 0)
	    {
		    new Float:X, Float:Y, Float:Z, Float:R, veh = VehicleInfo[i][vVehicle];
			GetVehiclePos(veh,X,Y,Z);
			GetVehicleZAngle(veh,R);
			VehicleInfo[i][vSpawnX] = X;
			VehicleInfo[i][vSpawnY] = Y;
			VehicleInfo[i][vSpawnZ] = Z;
			VehicleInfo[i][vSpawnR] = R;
		}
		SaveVehicleDamage(VehicleInfo[i][vVehicle]);

		SaveVehicle(i);
	}
	print("[SALVADO] Todos os veículos foram salvos.");
	return 1;
}

forward SalvarCasas();
public SalvarCasas()
{
    for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hCriada] > 0)
            SalvarCasa(i);
	}
	print("[SALVADO] Todas as casas foram salvas.");
	return 1;
}

stock CanHaveMoreSales(bizid)
{
	new total = 0;
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vSelling] == bizid) total ++;
	}
	return (total < 5) ? true : false;
}


stock ProcessVehicleAuction(playerid,biz,vehicleid,price)
{
	if(PlayerInfo[playerid][pGrana] >= 150)
	{
		if(!vehicle_creating)
		{
		    vehicle_creating = 1;
			new slot = GetVehicleSlot(vehicleid);
			PlayerInfo[playerid][pGrana] -= 150;
			EmpInfo[biz][eBank] += 150;
            VehicleInfo[slot][vTuned] = false;
			DestroyVehicle(vehicleid);
			DestruirObjetosCarro(slot, vehicleid);
			new Float:X, Float:Y, Float:Z, Float:R;
			new nextid = GetNextAuctionPosId(biz);
			GetNextAuctionPos(biz,X,Y,Z,R);
			VehicleInfo[slot][vSelling] = biz;
			VehicleInfo[slot][vLocked] = 1;
			VehicleInfo[slot][vBateria] = 100.0;
			VehicleInfo[slot][vSemUso] = 3600;
			VehicleInfo[slot][vVehicle] = CreateVehicle(VehicleInfo[slot][vModel],X,Y,Z,R,VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2],-1);
			VehicleInfo[slot][vSelling] = biz;
			VehicleInfo[slot][vSellingPrice] = price;
			VehicleInfo[slot][vSellingExpire] = (gettime() + (60 * 60 * 24 * 3));
			if(strlen(VehicleInfo[slot][vPlate]) && !VehicleInfo[slot][vImpounded]) { SetVehicleNumberPlate(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vPlate]); }
			LinkVehicleToInterior(VehicleInfo[slot][vVehicle],18);
			SetVehicleVirtualWorld(VehicleInfo[slot][vVehicle],(biz + 2000));
			ArmasNoPortaMalas(slot);
			new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(VehicleInfo[slot][vVehicle], engine,lights,alarm,doors,bonnet,boot,objective);
			SetVehicleParamsEx(VehicleInfo[slot][vVehicle], engine, lights, alarm, doors, false, false, false);
			SendClientMessage(playerid,COLOR_LIGHTRED,"[!] Você colocou seu veículo usado a venda. A venda irá expirar em 3 dias caso ninguém compre, você será avisado quando ela for finalizada.");
			new Float:X2, Float:Y2;
			GetPosInFrontOfVehicle(VehicleInfo[slot][vVehicle], X2, Y2, 5.0);
			used_vehicle_pickups[biz][nextid] = CreatePickup(1239,2,X2,Y2,Z,(biz + 2000));
			used_vehicle_slots[biz][nextid] = slot;
			sync_attribs[VehicleInfo[slot][vVehicle]] = 1;
			vehicle_creating = 0;
			SaveVehicle(slot);
		}
		else
		{
		    SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Outro veículo está em processamento, aguarde.");
		}
	}
	else
	{
	    SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem R$150");
	}
}

stock GetNextAuctionPosId(bizid)
{
	for(new i = 0; i < 5; i ++)
	{
		if(used_vehicle_slots[bizid][i] == -1)
		{
		    return i;
		}
	}
	return -1;
}

stock GetNextAuctionPos(bizid,&Float:X,&Float:Y,&Float:Z,&Float:R,offset=-1)
{
	new total = (offset == -1) ? GetNextAuctionPosId(bizid) : offset;
	if(total < 5)
	{
    	X = used_veh_pos[total][0];
        Y = used_veh_pos[total][1];
        Z = used_veh_pos[total][2];
        R = used_veh_pos[total][3];
	}
	return true;
}

stock GetClosestSellVehicle(playerid)
{
	if(PlayerInfo[playerid][pEntrouEmpresa] == -1) return -1;
	new winner = -1;
	new Float:winning_distance = 9999.0;
	for(new a = 0; a < 5; a ++)
	{
	    new Float:distance = GetDistanceToPoint(playerid,used_veh_pos[a][0],used_veh_pos[a][1],used_veh_pos[a][2]);
        if(distance < winning_distance && distance < 7.5)
		{
			winner = a;
			winning_distance = distance;
		}
    }
    return (winner > -1) ? used_vehicle_slots[PlayerInfo[playerid][pEntrouEmpresa]][winner] : -1;
}
forward Float:GetDistanceToPoint(playerid,Float:x1,Float:y1,Float:z1);
public Float:GetDistanceToPoint(playerid,Float:x1,Float:y1,Float:z1) //By Gabriel "Larcius" Cordes
{
	if (PlayerInfo[playerid][pLogado])
	{
		new Float:x2,Float:y2,Float:z2;
		GetPlayerPos(playerid,x2,y2,z2);
		return GetDistanceBetweenPoints(x1,y1,z1,x2,y2,z2);
	}
	return 999999999.9;
}
forward Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2);
public Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2) //By Gabriel "Larcius" Cordes
{
	new Float:val = floatadd(floatadd(floatsqroot(floatpower(floatsub(x1,x2),2)),floatsqroot(floatpower(floatsub(y1,y2),2))),floatsqroot(floatpower(floatsub(z1,z2),2)));
	return val;
}
stock PlayerToPortaMalasCar(playerid,type,Float:distance)
{
    new Float:x, Float:y, Float:z;
    for(new c =0; c < MAX_CA_VEHICLES ;c++)
    {
        if(IsVehicleStreamedIn(c, playerid))
        {
        	if(type == 1) GetVehicleBoot(c,x,y,z);
            else GetVehiclePos(c,x,y,z);

            if(IsPlayerInRangeOfPoint(playerid,distance,x,y,z))
            {
                if(GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(c))
                {
			    	switch(type)
			    	{
			        	case 1: return true;
			        	case 2: return c;
					}
			    }
            }
        }
    }
    if(type == 1) return false;
    return INVALID_VEHICLE_ID;
}

COMMAND:desapreender(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(IsPlayerInRangeOfPoint(playerid,7.5,2819.6492,-1203.3964,24.9792))
	{
		new idx = 0;
	    new tmp[32];
	    tmp = strtok(params,idx);
		if(!strlen(tmp)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USO: /desapreender [Slot do veículo (/v lista)]"); return 1; }
		new slot = strval(tmp);
		if(slot < 1) { SendClientMessage(playerid,COLOR_LIGHTRED,"O slot não pode ser menor que 1."); return 1; }
		UnimpoundVehicle(playerid,slot);
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid,COLOR_LIGHTRED,"Você não esta no pátio de apreensão.");
	    SetPlayerCheckpoint(playerid,2819.6492,-1203.3964,24.9792,5.0);
	    cp_target[playerid] = 1;
	    return 1;
	}
}

COMMAND:v(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	return cmd_veiculo(playerid,params);
}

COMMAND:luzes(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
 		new vehicleid = GetPlayerVehicleID(playerid);
   		new param[7];
		GetVehicleParamsEx(vehicleid,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
		if(param[1]) SetVehicleParamsEx(vehicleid,param[0],0,param[2],param[3],param[4],param[5],param[6]);
		else SetVehicleParamsEx(vehicleid,param[0],1,param[2],param[3],param[4],param[5],param[6]);
		return 1;
	}
	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar em um veiculo.");
}
ALTCOMMAND:pt->portamalas;
COMMAND:portamalas(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    //if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando estando em serviço.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar fora do veículo.");
    if(gettime() < FloodCMD[playerid]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Aguarde um segundo antes de usar um comando novamente.");
    if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");

    new engine, lights, alarm,doors,bonnet,boot,objective;

	if(!PlayerToPortaMalasCar(playerid,1,2)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo de um porta-malas.");
	new carid = PlayerToPortaMalasCar(playerid,2,5);

	if(GetVehicleModel(carid) == 448 || GetVehicleModel(carid) == 461 || GetVehicleModel(carid) == 462 ||
	GetVehicleModel(carid) == 463 || GetVehicleModel(carid) == 468 || GetVehicleModel(carid) == 471 ||
	GetVehicleModel(carid) == 481 || GetVehicleModel(carid) == 509 || GetVehicleModel(carid) == 510 ||
	GetVehicleModel(carid) == 521 || GetVehicleModel(carid) == 522 || GetVehicleModel(carid) == 523 ||
	GetVehicleModel(carid) == 581 || GetVehicleModel(carid) == 586 || GetVehicleModel(carid) == 572 || GetVehicleModel(carid) == 457) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não tem porta-malas.");


	new slot = GetVehicleSlot(carid), digityy[64];
	if(slot > -1)
	{
	    new idx = 0;
 		new tmp2[256], _string[256], vname[64];
		tmp2 = strtok(params,idx);
		if(!strlen(tmp2))
		{
			SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas(/pt) [(tog/abrir/fechar) | (checar/ver) | (guardar/colocar/ga) | (retirar/pe) | arrombar]");
			return 1;
		}
		if(strcmp(tmp2,"tog",true) == 0 || strcmp(tmp2,"abrir",true) == 0 || strcmp(tmp2,"fechar",true) == 0)
		{
			GetVehicleParamsEx(carid, engine, lights, alarm,doors,bonnet,boot,objective);
			if(boot == 0)
 			{
 			    if(VehicleInfo[slot][vFaction] == 0)
 			    {
	    			if(VehicleInfo[slot][vOwner] == GetCharacterID(playerid))
	      			{
	      				GetVehicleNameByModel(VehicleInfo[slot][vModel], vname);
	   					SetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, true, objective);
						SendClientMessage(playerid, COLOR_YELLOW,"Você abriu o porta-malas.");
						SendClientMessage(playerid, COLOR_WHITE," /portamalas para mais opções.");
					}
					else if(PlayerInfo[playerid][pChaveEmprestada] != 0)
					{
					    if(PlayerInfo[playerid][pChaveEmprestada] == VehicleInfo[slot][vID])
		      			{
		      				GetVehicleNameByModel(VehicleInfo[slot][vModel], vname);
		   					SetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, true, objective);
							SendClientMessage(playerid, COLOR_YELLOW,"Você abriu o porta-malas.");
							SendClientMessage(playerid, COLOR_WHITE," /portamalas para mais opções.");
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem as chaves deste veículo.");
				}
				else
				{
				    if(PlayerInfo[playerid][pFac] == VehicleInfo[slot][vFaction])
				    {
	      				GetVehicleNameByModel(VehicleInfo[slot][vModel], vname);
	   					SetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, true, objective);
						SendClientMessage(playerid, COLOR_YELLOW,"Você abriu o porta-malas.");
						SendClientMessage(playerid, COLOR_WHITE," /portamalas para mais opções.");
				    }
				    else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem as chaves deste veículo.");
				}
			}
			else
			{
				GetVehicleNameByModel(VehicleInfo[slot][vModel], vname);
    			SetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, false, objective);
			    SendClientMessage(playerid, COLOR_YELLOW,"Você fechou o porta-malas.");
       		}
		}
		if(strcmp(tmp2,"arrombar",true) == 0)
		{
			GetVehicleParamsEx(carid, engine, lights, alarm,doors,bonnet,boot,objective);
			if(boot == 0)
 			{
 			    if(PlayerInfo[playerid][pToolKit])
				{
				    if(VehicleInfo[slot][vFaction] > 0)
					{
					    if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB)
					    {
							return SendClientMessage(playerid, COLOR_YELLOW,"Você não pode arrombar um veículo de facção.");
						}
      				}
      				new veh = GetPlayerVehicleID(playerid);
      				if(PlayerInfo[playerid][pArrombarDNV] == 0)
      				{
						new unlock_chance = 75, str[256];
						if(VehicleInfo[slot][vLock] == 0) { unlock_chance = 60; }
						if(VehicleInfo[slot][vLock] == 1) { unlock_chance = 75; }
						if(VehicleInfo[slot][vLock] == 2) { unlock_chance = 80; }
						if(VehicleInfo[slot][vLock] == 3) { unlock_chance = 92; }
						if(VehicleInfo[slot][vLock] == 4) { unlock_chance = 95; }
	    				new chance = (10+random(100));
	    				if(chance > unlock_chance)
					    {
	   						SetVehicleParamsEx(carid, engine, lights, alarm, doors, bonnet, true, objective);
                            PlayerInfo[playerid][pArrombarDNV] = 300;
					        switch(VehicleInfo[slot][vLock])
	    					{
	 	    					case 0:
	 	    					{
									format(str,sizeof(str),"** %s arromba o porta malas de um veículo na proximidade..", PlayerName(playerid, 1));
									ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	   	    					}
					    	    case 1:
					    	    {
									StartAlarm(veh);
									format(str,sizeof(str),"** %s arromba o porta malas de um veículo na proximidade, mas falha.", PlayerName(playerid, 1));
									ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	   	    					}
					    	    case 2:
					    	    {
									StartAlarm(veh);
									format(str,sizeof(str),"** %s arromba o porta malas de um veículo na proximidade, mas falha.", PlayerName(playerid, 1));
									ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	   	    					}
	   	    					case 3:
					    	    {
		    	        			format(str,sizeof(str),"** %s arromba o porta malas de um veículo na proximidade, mas toma um choque do sistema.", PlayerName(playerid, 1));
									ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									StartAlarm(veh);
				    	    	}
					    	    case 4:
					    	    {
		    	        			format(str,sizeof(str),"** %s tenta arromba o porta malas de um veículo na proximidade, mas toma um choque do sistema.", PlayerName(playerid, 1));
									ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									StartAlarm(veh);
									new other = IsCharacterOnline(VehicleInfo[slot][vOwner]);
									new str2[128];
									GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
									format(str2,sizeof(str2),"{FFE900}[Alarme Veicular] Alguém tentou arrombar o seu %s.",vname);
									SendClientMessage(other,COLOR_YELLOW,str2);
									PlayerPlaySound(other,1149,0.0,0.0,0.0);
		    	    			}
					    	}

	   						new strl[126];
							format(strl, sizeof(strl), "%s arrombou um veículo Placa: %s. [SQL ID: %d]", PlayerName(playerid,0), VehicleInfo[slot][vPlate], VehicleInfo[slot][vID]);
							ArrombarLog(strl);
						}
						else
						{
							PlayerInfo[playerid][pArrombarDNV] = 300;

                            new Float:X, Float:Y, Float:Z;
	      					GetPlayerPos(playerid,X,Y,Z);
		    				switch(VehicleInfo[slot][vLock])
	    					{
	 	    					case 0:
	 	    					{
									SetPlayerPos(playerid,X,Y,Z);
									format(str,sizeof(str),"** %s tenta arrombar o porta malas de um veículo na proximidade, mas falha.", PlayerName(playerid, 1));
									ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	   	    					}
					    	    case 1:
					    	    {
	    	        				SetPlayerPos(playerid,X,Y,Z);
									StartAlarm(veh);
									format(str,sizeof(str),"** %s tenta arrombar o porta malas de um veículo na proximidade, mas falha.", PlayerName(playerid, 1));
									ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	   	    					}
					    	    case 2:
					    	    {
				    	    		SetPlayerPos(playerid,X,Y,Z);
									StartAlarm(veh);
									format(str,sizeof(str),"** %s tenta arrombar o porta malas de um veículo na proximidade, mas falha.", PlayerName(playerid, 1));
									ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	   	    					}
	   	    					case 3:
					    	    {
					    	    	SetPlayerPos(playerid,X,Y,Z);
		    	        			format(str,sizeof(str),"** %s tenta arrombar o porta malas de um veículo na proximidade, mas toma um choque do sistema.", PlayerName(playerid, 1));
									ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									SetPlayerDrunkLevel(playerid,4999);
									GameTextForPlayer(playerid,"~r~ATORDOADO!!!!",5000,5);
									StartAlarm(veh);
				    	    	}
					    	    case 4:
					    	    {
				    	    		SetPlayerPos(playerid,X,Y,Z);
		    	        			format(str,sizeof(str),"** %s tenta arrombar o porta malas de um veículo na proximidade, mas toma um choque do sistema.", PlayerName(playerid, 1));
									ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									SetPlayerDrunkLevel(playerid,4999);
									GameTextForPlayer(playerid,"~r~ATORDOADO!!!!",5000,5);
									StartAlarm(veh);
									new other = IsCharacterOnline(VehicleInfo[slot][vOwner]);
									new str2[128];
									GetVehicleNameByModel(GetVehicleModel(veh),vname);
									format(str2,sizeof(str2),"{FFE900}[Alarme Veicular] Alguém tentou arrombar o seu %s.",vname);
									SendClientMessage(other,COLOR_YELLOW,str2);
									PlayerPlaySound(other,1149,0.0,0.0,0.0);
		    	    			}
					    	}

							new strl[126];
							format(strl, sizeof(strl), "%s tentou arrombar o portamalas do veículo Placa: %s. [SQL ID: %d]", PlayerName(playerid,0), VehicleInfo[slot][vPlate], VehicleInfo[slot][vID]);
							ArrombarLog(strl);
						}
						ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0, 1);
						return 1;
					}
					else
					{
				    	format(string,sizeof(string),"Aguarde %d segundos antes de tentar arrombar um carro/portamalas novamente.", PlayerInfo[playerid][pArrombarDNV]);
						SendClientMessage(playerid,COLOR_LIGHTRED, string);
						return 1;
					}
				}
				else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um Toolkit.");
			}
			else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Este porta malas já está aberto.");
		}
		if(strcmp(tmp2,"checar",true) == 0 || strcmp(tmp2,"ver",true) == 0)
		{
			GetVehicleParamsEx(carid, engine, lights, alarm,doors,bonnet,boot,objective);
			if(boot == 1)
      		{
  		    	GetVehicleNameByModel(VehicleInfo[slot][vModel], digityy);
   		    	format(_string, 128, "_____Porta Malas %s_____", digityy);
  				SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

  				new Linha1[526], Linha2[526], Linha3[526];
	    		if(VehicleInfo[slot][vSlot1] != 0)
		    	{
  	    			if(VehicleInfo[slot][vSlotTipo1] == 1)
	    	    	{
    					format(_string, 128, "[ 1. %s (%d) ]", GunNames[ArmaData[VehicleInfo[slot][vSlot1]][ArmaModelo]], VehicleInfo[slot][vAmmo1]);
		    			strcat(Linha1, _string);
					}
					if(VehicleInfo[slot][vSlotTipo1] == 2)
	    	    	{
    					format(_string, 128, "[ 1. Caixa de Munição 9mm (%d/100) ]", VehicleInfo[slot][vAmmo1]);
		    			strcat(Linha1, _string);
					}
					if(VehicleInfo[slot][vSlotTipo1] == 3)
	    	    	{
    					format(_string, 128, "[ 1. Caixa de Munição 5.56mm (%d/100) ]", VehicleInfo[slot][vAmmo1]);
		    			strcat(Linha1, _string);
					}
					if(VehicleInfo[slot][vSlotTipo1] == 4)
	    	    	{
    					format(_string, 128, "[ 1. Caixa de Cartuchos (%d/100) ]", VehicleInfo[slot][vAmmo1]);
		    			strcat(Linha1, _string);
					}
					if(VehicleInfo[slot][vSlotTipo1] == 5)
	    	    	{
    					format(_string, 128, "[ 1. Caixa de Munição 12.7x106mm (%d/100) ]", VehicleInfo[slot][vAmmo1]);
		    			strcat(Linha1, _string);
					}
					if(VehicleInfo[slot][vSlotTipo1] == 6)
					{
					    switch(VehicleInfo[slot][vSlot1])
					    {
					    	case 1: format(_string, 128, "[ 1. Maconha ruim (%d/100) ]", VehicleInfo[slot][vAmmo1]);
					    	case 2: format(_string, 128, "[ 1. Maconha boa (%d/100) ]", VehicleInfo[slot][vAmmo1]);
				 			case 3: format(_string, 128, "[ 1. Maconha exelente (%d/100) ]", VehicleInfo[slot][vAmmo1]);
							case 4: format(_string, 128, "[ 1. Cocaína Ruim (%d/100) ]", VehicleInfo[slot][vAmmo1]);
							case 5: format(_string, 128, "[ 1. Cocaina boa (%d/100) ]", VehicleInfo[slot][vAmmo1]);
							case 6: format(_string, 128, "[ 1. Cocaina exelente (%d/100) ]", VehicleInfo[slot][vAmmo1]);
							case 7: format(_string, 128, "[ 1. Crack ruim (%d/100) ]", VehicleInfo[slot][vAmmo1]);
							case 8: format(_string, 128, "[ 1. crack bom (%d/100) ]", VehicleInfo[slot][vAmmo1]);
							case 9: format(_string, 128, "[ 1. Crack exelente (%d/100) ]", VehicleInfo[slot][vAmmo1]);
							case 10: format(_string, 128, "[ 1. LSD ruim (%d/100) ]", VehicleInfo[slot][vAmmo1]);
							case 11: format(_string, 128, "[ 1. LSD bom (%d/100) ]", VehicleInfo[slot][vAmmo1]);
							case 12: format(_string, 128, "[ 1. LSD exelente (%d/100) ]", VehicleInfo[slot][vAmmo1]);
							case 13: format(_string, 128, "[ 1. Metanfetamina ruim (%d/100) ]", VehicleInfo[slot][vAmmo1]);
							case 14: format(_string, 128, "[ 1. Metanfetamina boa (%d/100) ]", VehicleInfo[slot][vAmmo1]);
							case 15: format(_string, 128, "[ 1. Metanfetamina exelente (%d/100) ]", VehicleInfo[slot][vAmmo1]);
							case 16: format(_string, 128, "[ 1. Sementes de cannabis (%d/100) ]", VehicleInfo[slot][vAmmo1]);
							case 17: format(_string, 128, "[ 1. Tubos de Lança Perfume (%dml/100ml) ]", VehicleInfo[slot][vAmmo1]);
						}
						strcat(Linha1, _string);
					}
				}
				else
				{
				    format(_string, 128, "[ 1. Vazio ]");
	    			strcat(Linha1, _string);
				}

				if(VehicleInfo[slot][vSlot2] != 0)
   				{
  	    			if(VehicleInfo[slot][vSlotTipo2] == 1)
	    	    	{
    					format(_string, 128, "[ 2. %s (%d) ]", GunNames[ArmaData[VehicleInfo[slot][vSlot2]][ArmaModelo]], VehicleInfo[slot][vAmmo2]);
		    			strcat(Linha1, _string);
					}
					if(VehicleInfo[slot][vSlotTipo2] == 2)
	    	    	{
    					format(_string, 128, "[ 2. Caixa de Munição 9mm (%d/100) ]", VehicleInfo[slot][vAmmo2]);
		    			strcat(Linha1, _string);
					}
					if(VehicleInfo[slot][vSlotTipo2] == 3)
	    	    	{
    					format(_string, 128, "[ 2. Caixa de Munição 5.56mm (%d/100) ]", VehicleInfo[slot][vAmmo2]);
		    			strcat(Linha1, _string);
					}
					if(VehicleInfo[slot][vSlotTipo2] == 4)
	    	    	{
    					format(_string, 128, "[ 2. Caixa de Cartuchos (%d/100) ]", VehicleInfo[slot][vAmmo2]);
		    			strcat(Linha1, _string);
					}
					if(VehicleInfo[slot][vSlotTipo2] == 5)
	    	    	{
    					format(_string, 128, "[ 2. Caixa de Munição 12.7x106mm (%d/100) ]", VehicleInfo[slot][vAmmo2]);
		    			strcat(Linha1, _string);
					}
					if(VehicleInfo[slot][vSlotTipo2] == 6)
					{
					    switch(VehicleInfo[slot][vSlot2])
					    {
					    	case 1: format(_string, 128, "[ 2. Maconha ruim (%d/100) ]", VehicleInfo[slot][vAmmo2]);
					    	case 2: format(_string, 128, "[ 2. Maconha boa (%d/100) ]", VehicleInfo[slot][vAmmo2]);
				 			case 3: format(_string, 128, "[ 2. Maconha exelente (%d/100) ]", VehicleInfo[slot][vAmmo2]);
							case 4: format(_string, 128, "[ 2. Cocaína Ruim (%d/100) ]", VehicleInfo[slot][vAmmo2]);
							case 5: format(_string, 128, "[ 2. cocaina boa (%d/100) ]", VehicleInfo[slot][vAmmo2]);
							case 6: format(_string, 128, "[ 2. cocaina exelente (%d/100) ]", VehicleInfo[slot][vAmmo2]);
							case 7: format(_string, 128, "[ 2. crack ruim (%d/100) ]", VehicleInfo[slot][vAmmo2]);
							case 8: format(_string, 128, "[ 2. crack bom (%d/100) ]", VehicleInfo[slot][vAmmo2]);
							case 9: format(_string, 128, "[ 2. crack exelente (%d/100) ]", VehicleInfo[slot][vAmmo2]);
							case 10: format(_string, 128, "[ 2. LSD ruim (%d/100) ]", VehicleInfo[slot][vAmmo2]);
							case 11: format(_string, 128, "[ 2. LSD bom (%d/100) ]", VehicleInfo[slot][vAmmo2]);
							case 12: format(_string, 128, "[ 2. LSD exelente (%d/100) ]", VehicleInfo[slot][vAmmo2]);
							case 13: format(_string, 128, "[ 2. metanfetamina ruim (%d/100) ]", VehicleInfo[slot][vAmmo2]);
							case 14: format(_string, 128, "[ 2. metanfetamina boa (%d/100) ]", VehicleInfo[slot][vAmmo2]);
							case 15: format(_string, 128, "[ 2. metanfetamina exelente (%d/100) ]", VehicleInfo[slot][vAmmo2]);
							case 16: format(_string, 128, "[ 2. sementes de cannabis (%d/100) ]", VehicleInfo[slot][vAmmo2]);
							case 17: format(_string, 128, "[ 2. Tubos de Lança Perfume (%dml/100ml) ]", VehicleInfo[slot][vAmmo1]);
						}
						strcat(Linha1, _string);
					}
				}
				else
				{
				    format(_string, 128, "[ 2. Vazio ]");
	    			strcat(Linha1, _string);
				}

				if(VehicleInfo[slot][vSlot3] != 0)
   				{
  	    			if(VehicleInfo[slot][vSlotTipo3] == 1)
	    	    	{
    					format(_string, 128, "[ 3. %s (%d) ]", GunNames[ArmaData[VehicleInfo[slot][vSlot3]][ArmaModelo]], VehicleInfo[slot][vAmmo3]);
		    			strcat(Linha1, _string);
					}
					if(VehicleInfo[slot][vSlotTipo3] == 2)
	    	    	{
    					format(_string, 128, "[ 3. Caixa de Munição 9mm (%d/100) ]", VehicleInfo[slot][vAmmo3]);
		    			strcat(Linha1, _string);
					}
					if(VehicleInfo[slot][vSlotTipo3] == 3)
	    	    	{
    					format(_string, 128, "[ 3. Caixa de Munição 5.56mm (%d/100) ]", VehicleInfo[slot][vAmmo3]);
		    			strcat(Linha1, _string);
					}
					if(VehicleInfo[slot][vSlotTipo3] == 4)
	    	    	{
    					format(_string, 128, "[ 3. Caixa de Cartuchos (%d/100) ]", VehicleInfo[slot][vAmmo3]);
		    			strcat(Linha1, _string);
					}
					if(VehicleInfo[slot][vSlotTipo3] == 5)
	    	    	{
    					format(_string, 128, "[ 3. Caixa de Munição 12.7x106mm (%d/100) ]", VehicleInfo[slot][vAmmo3]);
		    			strcat(Linha1, _string);
					}
					if(VehicleInfo[slot][vSlotTipo3] == 6)
					{
					    switch(VehicleInfo[slot][vSlot3])
					    {
					    	case 1: format(_string, 128, "[ 3. Maconha ruim (%d/100) ]", VehicleInfo[slot][vAmmo3]);
					    	case 2: format(_string, 128, "[ 3. Maconha boa (%d/100) ]", VehicleInfo[slot][vAmmo3]);
				 			case 3: format(_string, 128, "[ 3. Maconha exelente (%d/100) ]", VehicleInfo[slot][vAmmo3]);
							case 4: format(_string, 128, "[ 3. Cocaína Ruim (%d/100) ]", VehicleInfo[slot][vAmmo3]);
							case 5: format(_string, 128, "[ 3. cocaina boa (%d/100) ]", VehicleInfo[slot][vAmmo3]);
							case 6: format(_string, 128, "[ 3. cocaina exelente (%d/100) ]", VehicleInfo[slot][vAmmo3]);
							case 7: format(_string, 128, "[ 3. crack ruim (%d/100) ]", VehicleInfo[slot][vAmmo3]);
							case 8: format(_string, 128, "[ 3. crack bom (%d/100) ]", VehicleInfo[slot][vAmmo3]);
							case 9: format(_string, 128, "[ 3. crack exelente (%d/100) ]", VehicleInfo[slot][vAmmo3]);
							case 10: format(_string, 128, "[ 3. LSD ruim (%d/100) ]", VehicleInfo[slot][vAmmo3]);
							case 11: format(_string, 128, "[ 3. LSD bom (%d/100) ]", VehicleInfo[slot][vAmmo3]);
							case 12: format(_string, 128, "[ 3. LSD exelente (%d/100) ]", VehicleInfo[slot][vAmmo3]);
							case 13: format(_string, 128, "[ 3. metanfetamina ruim (%d/100) ]", VehicleInfo[slot][vAmmo3]);
							case 14: format(_string, 128, "[ 3. metanfetamina boa (%d/100) ]", VehicleInfo[slot][vAmmo3]);
							case 15: format(_string, 128, "[ 3. metanfetamina exelente (%d/100) ]", VehicleInfo[slot][vAmmo3]);
							case 16: format(_string, 128, "[ 3. sementes de cannabis (%d/100) ]", VehicleInfo[slot][vAmmo3]);
							case 17: format(_string, 128, "[ 3. Tubos de Lança Perfume (%dml/100ml) ]", VehicleInfo[slot][vAmmo1]);
						}
						strcat(Linha1, _string);
					}
				}
				else
				{
				    format(_string, 128, "[ 3. Vazio ]");
	    			strcat(Linha1, _string);
				}

				if(VehicleInfo[slot][vSlot4] != 0)
   				{
			    	if(VehicleInfo[slot][vSlotTipo4] == 1)
			    	{
			    		format(_string, 128, "[ 4. %s (%d) ]", GunNames[ArmaData[VehicleInfo[slot][vSlot4]][ArmaModelo]], VehicleInfo[slot][vAmmo4]);
			    		strcat(Linha2, _string);
					}
					if(VehicleInfo[slot][vSlotTipo4] == 2)
	    	    	{
    					format(_string, 128, "[ 4. Caixa de Munição 9mm (%d/100) ]", VehicleInfo[slot][vAmmo4]);
		    			strcat(Linha2, _string);
					}
					if(VehicleInfo[slot][vSlotTipo4] == 3)
	    	    	{
    					format(_string, 128, "[ 4. Caixa de Munição 5.56mm (%d/100) ]", VehicleInfo[slot][vAmmo4]);
		    			strcat(Linha2, _string);
					}
					if(VehicleInfo[slot][vSlotTipo4] == 4)
	    	    	{
    					format(_string, 128, "[ 4. Caixa de Cartuchos (%d/100) ]", VehicleInfo[slot][vAmmo4]);
		    			strcat(Linha2, _string);
					}
					if(VehicleInfo[slot][vSlotTipo4] == 5)
	    	    	{
    					format(_string, 128, "[ 4. Caixa de Munição 12.7x106mm (%d/100) ]", VehicleInfo[slot][vAmmo4]);
		    			strcat(Linha2, _string);
					}
					if(VehicleInfo[slot][vSlotTipo4] == 6)
					{
					    switch(VehicleInfo[slot][vSlot4])
					    {
					    	case 1: format(_string, 128, "[ 4. Maconha ruim (%d/100) ]", VehicleInfo[slot][vAmmo4]);
					    	case 2: format(_string, 128, "[ 4. Maconha boa (%d/100) ]", VehicleInfo[slot][vAmmo4]);
				 			case 3: format(_string, 128, "[ 4. Maconha exelente (%d/100) ]", VehicleInfo[slot][vAmmo4]);
							case 4: format(_string, 128, "[ 4. Cocaína Ruim (%d/100) ]", VehicleInfo[slot][vAmmo4]);
							case 5: format(_string, 128, "[ 4. cocaina boa (%d/100) ]", VehicleInfo[slot][vAmmo4]);
							case 6: format(_string, 128, "[ 4. cocaina exelente (%d/100) ]", VehicleInfo[slot][vAmmo4]);
							case 7: format(_string, 128, "[ 4. crack ruim (%d/100) ]", VehicleInfo[slot][vAmmo4]);
							case 8: format(_string, 128, "[ 4. crack bom (%d/100) ]", VehicleInfo[slot][vAmmo4]);
							case 9: format(_string, 128, "[ 4. crack exelente (%d/100) ]", VehicleInfo[slot][vAmmo4]);
							case 10: format(_string, 128, "[ 4. LSD ruim (%d/100) ]", VehicleInfo[slot][vAmmo4]);
							case 11: format(_string, 128, "[ 4. LSD bom (%d/100) ]", VehicleInfo[slot][vAmmo4]);
							case 12: format(_string, 128, "[ 4. LSD exelente (%d/100) ]", VehicleInfo[slot][vAmmo4]);
							case 13: format(_string, 128, "[ 4. metanfetamina ruim (%d/100) ]", VehicleInfo[slot][vAmmo4]);
							case 14: format(_string, 128, "[ 4. metanfetamina boa (%d/100) ]", VehicleInfo[slot][vAmmo4]);
							case 15: format(_string, 128, "[ 4. metanfetamina exelente (%d/100) ]", VehicleInfo[slot][vAmmo4]);
							case 16: format(_string, 128, "[ 4. sementes de cannabis (%d/100) ]", VehicleInfo[slot][vAmmo4]);
							case 17: format(_string, 128, "[ 4. Tubos de Lança Perfume (%dml/100ml) ]", VehicleInfo[slot][vAmmo1]);
						}
						strcat(Linha2, _string);
					}
				}
				else
				{
				    format(_string, 128, "[ 4. Vazio ]");
	    			strcat(Linha2, _string);
				}
				if(VehicleInfo[slot][vSlot5] != 0)
   				{
  	    			if(VehicleInfo[slot][vSlotTipo5] == 1)
	    	    	{
    					format(_string, 128, "[ 5. %s (%d) ]", GunNames[ArmaData[VehicleInfo[slot][vSlot5]][ArmaModelo]], VehicleInfo[slot][vAmmo5]);
		    			strcat(Linha2, _string);
					}
					if(VehicleInfo[slot][vSlotTipo5] == 2)
	    	    	{
    					format(_string, 128, "[ 5. Caixa de Munição 9mm (%d/100) ]", VehicleInfo[slot][vAmmo5]);
		    			strcat(Linha2, _string);
					}
					if(VehicleInfo[slot][vSlotTipo5] == 3)
	    	    	{
    					format(_string, 128, "[ 5. Caixa de Munição 5.56mm (%d/100) ]", VehicleInfo[slot][vAmmo5]);
		    			strcat(Linha2, _string);
					}
					if(VehicleInfo[slot][vSlotTipo5] == 4)
	    	    	{
    					format(_string, 128, "[ 5. Caixa de Cartuchos (%d/100) ]", VehicleInfo[slot][vAmmo5]);
		    			strcat(Linha2, _string);
					}
					if(VehicleInfo[slot][vSlotTipo5] == 5)
	    	    	{
    					format(_string, 128, "[ 5. Caixa de Munição 12.7x106mm (%d/100) ]", VehicleInfo[slot][vAmmo5]);
		    			strcat(Linha2, _string);
					}
					if(VehicleInfo[slot][vSlotTipo5] == 6)
					{
					    switch(VehicleInfo[slot][vSlot5])
					    {
					    	case 1: format(_string, 128, "[ 5. Maconha ruim (%d/100) ]", VehicleInfo[slot][vAmmo5]);
					    	case 2: format(_string, 128, "[ 5. Maconha boa (%d/100) ]", VehicleInfo[slot][vAmmo5]);
				 			case 3: format(_string, 128, "[ 5. Maconha exelente (%d/100) ]", VehicleInfo[slot][vAmmo5]);
							case 4: format(_string, 128, "[ 5. Cocaína Ruim (%d/100) ]", VehicleInfo[slot][vAmmo5]);
							case 5: format(_string, 128, "[ 5. cocaina boa (%d/100) ]", VehicleInfo[slot][vAmmo5]);
							case 6: format(_string, 128, "[ 5. cocaina exelente (%d/100) ]", VehicleInfo[slot][vAmmo5]);
							case 7: format(_string, 128, "[ 5. crack ruim (%d/100) ]", VehicleInfo[slot][vAmmo5]);
							case 8: format(_string, 128, "[ 5. crack bom (%d/100) ]", VehicleInfo[slot][vAmmo5]);
							case 9: format(_string, 128, "[ 5. crack exelente (%d/100) ]", VehicleInfo[slot][vAmmo5]);
							case 10: format(_string, 128, "[ 5. LSD ruim (%d/100) ]", VehicleInfo[slot][vAmmo5]);
							case 11: format(_string, 128, "[ 5. LSD bom (%d/100) ]", VehicleInfo[slot][vAmmo5]);
							case 12: format(_string, 128, "[ 5. LSD exelente (%d/100) ]", VehicleInfo[slot][vAmmo5]);
							case 13: format(_string, 128, "[ 5. metanfetamina ruim (%d/100) ]", VehicleInfo[slot][vAmmo5]);
							case 14: format(_string, 128, "[ 5. metanfetamina boa (%d/100) ]", VehicleInfo[slot][vAmmo5]);
							case 15: format(_string, 128, "[ 5. metanfetamina exelente (%d/100) ]", VehicleInfo[slot][vAmmo5]);
							case 16: format(_string, 128, "[ 5. sementes de cannabis (%d/100) ]", VehicleInfo[slot][vAmmo5]);
							case 17: format(_string, 128, "[ 5. Tubos de Lança Perfume (%dml/100ml) ]", VehicleInfo[slot][vAmmo1]);
						}
						strcat(Linha2, _string);
					}
				}
				else
				{
				    format(_string, 128, "[ 5. Vazio ]");
	    			strcat(Linha2, _string);
				}
				if(VehicleInfo[slot][vSlot6] != 0)
   				{
  	    			if(VehicleInfo[slot][vSlotTipo6] == 1)
	    	    	{
    					format(_string, 128, "[ 6. %s (%d) ]", GunNames[ArmaData[VehicleInfo[slot][vSlot6]][ArmaModelo]], VehicleInfo[slot][vAmmo6]);
		    			strcat(Linha2, _string);
					}
					if(VehicleInfo[slot][vSlotTipo6] == 2)
	    	    	{
    					format(_string, 128, "[ 6. Caixa de Munição 9mm (%d/100) ]", VehicleInfo[slot][vAmmo6]);
		    			strcat(Linha2, _string);
					}
					if(VehicleInfo[slot][vSlotTipo6] == 3)
	    	    	{
    					format(_string, 128, "[ 6. Caixa de Munição 5.56mm (%d/100) ]", VehicleInfo[slot][vAmmo6]);
		    			strcat(Linha2, _string);
					}
					if(VehicleInfo[slot][vSlotTipo6] == 4)
	    	    	{
    					format(_string, 128, "[ 6. Caixa de Cartuchos (%d/100) ]", VehicleInfo[slot][vAmmo6]);
		    			strcat(Linha2, _string);
					}
					if(VehicleInfo[slot][vSlotTipo6] == 5)
	    	    	{
    					format(_string, 128, "[ 6. Caixa de Munição 12.7x106mm (%d/100) ]", VehicleInfo[slot][vAmmo6]);
		    			strcat(Linha2, _string);
					}
					if(VehicleInfo[slot][vSlotTipo6] == 6)
					{
					    switch(VehicleInfo[slot][vSlot6])
					    {
					    	case 1: format(_string, 128, "[ 6. Maconha ruim (%d/100) ]", VehicleInfo[slot][vAmmo6]);
					    	case 2: format(_string, 128, "[ 6. Maconha boa (%d/100) ]", VehicleInfo[slot][vAmmo6]);
				 			case 3: format(_string, 128, "[ 6. Maconha exelente (%d/100) ]", VehicleInfo[slot][vAmmo6]);
							case 4: format(_string, 128, "[ 6. Cocaína Ruim (%d/100) ]", VehicleInfo[slot][vAmmo6]);
							case 5: format(_string, 128, "[ 6. cocaina boa (%d/100) ]", VehicleInfo[slot][vAmmo6]);
							case 6: format(_string, 128, "[ 6. cocaina exelente (%d/100) ]", VehicleInfo[slot][vAmmo6]);
							case 7: format(_string, 128, "[ 6. crack ruim (%d/100) ]", VehicleInfo[slot][vAmmo6]);
							case 8: format(_string, 128, "[ 6. crack bom (%d/100) ]", VehicleInfo[slot][vAmmo6]);
							case 9: format(_string, 128, "[ 6. crack exelente (%d/100) ]", VehicleInfo[slot][vAmmo6]);
							case 10: format(_string, 128, "[ 6. LSD ruim (%d/100) ]", VehicleInfo[slot][vAmmo6]);
							case 11: format(_string, 128, "[ 6. LSD bom (%d/100) ]", VehicleInfo[slot][vAmmo6]);
							case 12: format(_string, 128, "[ 6. LSD exelente (%d/100) ]", VehicleInfo[slot][vAmmo6]);
							case 13: format(_string, 128, "[ 6. metanfetamina ruim (%d/100) ]", VehicleInfo[slot][vAmmo6]);
							case 14: format(_string, 128, "[ 6. metanfetamina boa (%d/100) ]", VehicleInfo[slot][vAmmo6]);
							case 15: format(_string, 128, "[ 6. metanfetamina exelente (%d/100) ]", VehicleInfo[slot][vAmmo6]);
							case 16: format(_string, 128, "[ 6. sementes de cannabis (%d/100) ]", VehicleInfo[slot][vAmmo6]);
							case 17: format(_string, 128, "[ 6. Tubos de Lança Perfume (%dml/100ml) ]", VehicleInfo[slot][vAmmo1]);
						}
						strcat(Linha2, _string);
					}
				}
				else
				{
				    format(_string, 128, "[ 6. Vazio ]");
	    			strcat(Linha2, _string);
				}

				if(VehicleInfo[slot][vSlot7] != 0)
   				{
		  			if(VehicleInfo[slot][vSlotTipo7] == 1)
  	    			{
			    		format(_string, 128, "[ 7. %s (%d) ]", GunNames[ArmaData[VehicleInfo[slot][vSlot7]][ArmaModelo]], VehicleInfo[slot][vAmmo7]);
			    		strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo7] == 2)
	    	    	{
    					format(_string, 128, "[ 7. Caixa de Munição 9mm (%d/100) ]", VehicleInfo[slot][vAmmo7]);
		    			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo7] == 3)
	    	    	{
    					format(_string, 128, "[ 7. Caixa de Munição 5.56mm (%d/100) ]", VehicleInfo[slot][vAmmo7]);
		    			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo7] == 4)
	    	    	{
    					format(_string, 128, "[ 7. Caixa de Cartuchos (%d/100) ]", VehicleInfo[slot][vAmmo7]);
		    			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo7] == 5)
	    	    	{
    					format(_string, 128, "[ 7. Caixa de Munição 12.7x106mm (%d/100) ]", VehicleInfo[slot][vAmmo7]);
		    			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo7] == 6)
					{
					    switch(VehicleInfo[slot][vSlot7])
					    {
					    	case 1: format(_string, 128, "[ 7. Maconha ruim (%d/100) ]", VehicleInfo[slot][vAmmo7]);
					    	case 2: format(_string, 128, "[ 7. Maconha boa (%d/100) ]", VehicleInfo[slot][vAmmo7]);
				 			case 3: format(_string, 128, "[ 7. Maconha exelente (%d/100) ]", VehicleInfo[slot][vAmmo7]);
							case 4: format(_string, 128, "[ 7. Cocaína Ruim (%d/100) ]", VehicleInfo[slot][vAmmo7]);
							case 5: format(_string, 128, "[ 7. cocaina boa (%d/100) ]", VehicleInfo[slot][vAmmo7]);
							case 6: format(_string, 128, "[ 7. cocaina exelente (%d/100) ]", VehicleInfo[slot][vAmmo7]);
							case 7: format(_string, 128, "[ 7. crack ruim (%d/100) ]", VehicleInfo[slot][vAmmo7]);
							case 8: format(_string, 128, "[ 7. crack bom (%d/100) ]", VehicleInfo[slot][vAmmo7]);
							case 9: format(_string, 128, "[ 7. crack exelente (%d/100) ]", VehicleInfo[slot][vAmmo7]);
							case 10: format(_string, 128, "[ 7. LSD ruim (%d/100) ]", VehicleInfo[slot][vAmmo7]);
							case 11: format(_string, 128, "[ 7. LSD bom (%d/100) ]", VehicleInfo[slot][vAmmo7]);
							case 12: format(_string, 128, "[ 7. LSD exelente (%d/100) ]", VehicleInfo[slot][vAmmo7]);
							case 13: format(_string, 128, "[ 7. metanfetamina ruim (%d/100) ]", VehicleInfo[slot][vAmmo7]);
							case 14: format(_string, 128, "[ 7. metanfetamina boa (%d/100) ]", VehicleInfo[slot][vAmmo7]);
							case 15: format(_string, 128, "[ 7. metanfetamina exelente (%d/100) ]", VehicleInfo[slot][vAmmo7]);
							case 16: format(_string, 128, "[ 7. sementes de cannabis (%d/100) ]", VehicleInfo[slot][vAmmo7]);
							case 17: format(_string, 128, "[ 7. Tubos de Lança Perfume (%dml/100ml) ]", VehicleInfo[slot][vAmmo1]);
						}
						strcat(Linha3, _string);
					}
				}
				else
				{
				    format(_string, 128, "[ 7. Vazio ]");
	    			strcat(Linha3, _string);
				}
				if(VehicleInfo[slot][vSlot8] != 0)
			   	{
			   	    if(VehicleInfo[slot][vSlotTipo8] == 1)
			   	    {
			   			format(_string, 128, "[ 8. %s (%d) ]", GunNames[ArmaData[VehicleInfo[slot][vSlot8]][ArmaModelo]], VehicleInfo[slot][vAmmo8]);
			   			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo8] == 2)
	    	    	{
    					format(_string, 128, "[ 8. Caixa de Munição 9mm (%d/100) ]", VehicleInfo[slot][vAmmo8]);
		    			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo8] == 3)
	    	    	{
    					format(_string, 128, "[ 8. Caixa de Munição 5.56mm (%d/100) ]", VehicleInfo[slot][vAmmo8]);
		    			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo8] == 4)
	    	    	{
    					format(_string, 128, "[ 8. Caixa de Cartuchos (%d/100) ]", VehicleInfo[slot][vAmmo8]);
		    			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo8] == 5)
	    	    	{
    					format(_string, 128, "[ 8. Caixa de Munição 12.7x106mm (%d/100) ]", VehicleInfo[slot][vAmmo8]);
		    			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo8] == 6)
					{
					    switch(VehicleInfo[slot][vSlot8])
					    {
					    	case 1: format(_string, 128, "[ 8. Maconha ruim (%d/100) ]", VehicleInfo[slot][vAmmo8]);
					    	case 2: format(_string, 128, "[ 8. Maconha boa (%d/100) ]", VehicleInfo[slot][vAmmo8]);
				 			case 3: format(_string, 128, "[ 8. Maconha exelente (%d/100) ]", VehicleInfo[slot][vAmmo8]);
							case 4: format(_string, 128, "[ 8. Cocaína Ruim (%d/100) ]", VehicleInfo[slot][vAmmo8]);
							case 5: format(_string, 128, "[ 8. cocaina boa (%d/100) ]", VehicleInfo[slot][vAmmo8]);
							case 6: format(_string, 128, "[ 8. cocaina exelente (%d/100) ]", VehicleInfo[slot][vAmmo8]);
							case 7: format(_string, 128, "[ 8. crack ruim (%d/100) ]", VehicleInfo[slot][vAmmo8]);
							case 8: format(_string, 128, "[ 8. crack bom (%d/100) ]", VehicleInfo[slot][vAmmo8]);
							case 9: format(_string, 128, "[ 8. crack exelente (%d/100) ]", VehicleInfo[slot][vAmmo8]);
							case 10: format(_string, 128, "[ 8. LSD ruim (%d/100) ]", VehicleInfo[slot][vAmmo8]);
							case 11: format(_string, 128, "[ 8. LSD bom (%d/100) ]", VehicleInfo[slot][vAmmo8]);
							case 12: format(_string, 128, "[ 8. LSD exelente (%d/100) ]", VehicleInfo[slot][vAmmo8]);
							case 13: format(_string, 128, "[ 8. metanfetamina ruim (%d/100) ]", VehicleInfo[slot][vAmmo8]);
							case 14: format(_string, 128, "[ 8. metanfetamina boa (%d/100) ]", VehicleInfo[slot][vAmmo8]);
							case 15: format(_string, 128, "[ 8. metanfetamina exelente (%d/100) ]", VehicleInfo[slot][vAmmo8]);
							case 16: format(_string, 128, "[ 8. sementes de cannabis (%d/100) ]", VehicleInfo[slot][vAmmo8]);
							case 17: format(_string, 128, "[ 8. Tubos de Lança Perfume (%dml/100ml) ]", VehicleInfo[slot][vAmmo1]);
						}
						strcat(Linha3, _string);
					}
				}
				else
				{
				    format(_string, 128, "[ 8. Vazio ]");
	    			strcat(Linha3, _string);
				}
				if(VehicleInfo[slot][vSlot9] != 0)
			   	{
			   	    if(VehicleInfo[slot][vSlotTipo9] == 1)
			   	    {
			   			format(_string, 128, "[ 9. %s (%d) ]", GunNames[ArmaData[VehicleInfo[slot][vSlot9]][ArmaModelo]], VehicleInfo[slot][vAmmo9]);
			   			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo9] == 2)
	    	    	{
    					format(_string, 128, "[ 9. Caixa de Munição 9mm (%d/100) ]", VehicleInfo[slot][vAmmo9]);
		    			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo9] == 3)
	    	    	{
    					format(_string, 128, "[ 9. Caixa de Munição 5.56mm (%d/100) ]", VehicleInfo[slot][vAmmo9]);
		    			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo9] == 4)
	    	    	{
    					format(_string, 128, "[ 9. Caixa de Cartuchos (%d/100) ]", VehicleInfo[slot][vAmmo9]);
		    			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo9] == 5)
	    	    	{
    					format(_string, 128, "[ 9. Caixa de Munição 12.7x106mm (%d/100) ]", VehicleInfo[slot][vAmmo9]);
		    			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo9] == 6)
					{
					    switch(VehicleInfo[slot][vSlot9])
					    {
					    	case 1: format(_string, 128, "[ 9. Maconha ruim (%d/100) ]", VehicleInfo[slot][vAmmo9]);
					    	case 2: format(_string, 128, "[ 9. Maconha boa (%d/100) ]", VehicleInfo[slot][vAmmo9]);
				 			case 3: format(_string, 128, "[ 9. Maconha exelente (%d/100) ]", VehicleInfo[slot][vAmmo9]);
							case 4: format(_string, 128, "[ 9. Cocaína Ruim (%d/100) ]", VehicleInfo[slot][vAmmo9]);
							case 5: format(_string, 128, "[ 9. cocaina boa (%d/100) ]", VehicleInfo[slot][vAmmo9]);
							case 6: format(_string, 128, "[ 9. cocaina exelente (%d/100) ]", VehicleInfo[slot][vAmmo9]);
							case 7: format(_string, 128, "[ 9. crack ruim (%d/100) ]", VehicleInfo[slot][vAmmo9]);
							case 8: format(_string, 128, "[ 9. crack bom (%d/100) ]", VehicleInfo[slot][vAmmo9]);
							case 9: format(_string, 128, "[ 9. crack exelente (%d/100) ]", VehicleInfo[slot][vAmmo9]);
							case 10: format(_string, 128, "[ 9. LSD ruim (%d/100) ]", VehicleInfo[slot][vAmmo9]);
							case 11: format(_string, 128, "[ 9. LSD bom (%d/100) ]", VehicleInfo[slot][vAmmo9]);
							case 12: format(_string, 128, "[ 9. LSD exelente (%d/100) ]", VehicleInfo[slot][vAmmo9]);
							case 13: format(_string, 128, "[ 9. metanfetamina ruim (%d/100) ]", VehicleInfo[slot][vAmmo9]);
							case 14: format(_string, 128, "[ 9. metanfetamina boa (%d/100) ]", VehicleInfo[slot][vAmmo9]);
							case 15: format(_string, 128, "[ 9. metanfetamina exelente (%d/100) ]", VehicleInfo[slot][vAmmo9]);
							case 16: format(_string, 128, "[ 9. sementes de cannabis (%d/100) ]", VehicleInfo[slot][vAmmo9]);
							case 17: format(_string, 128, "[ 9. Tubos de Lança Perfume (%dml/100ml) ]", VehicleInfo[slot][vAmmo1]);
						}
						strcat(Linha3, _string);
					}
				}
				else
				{
				    format(_string, 128, "[ 9. Vazio ]");
	    			strcat(Linha3, _string);
				}
				if(VehicleInfo[slot][vSlot10] != 0)
			   	{
			   	    if(VehicleInfo[slot][vSlotTipo10] == 1)
			   	    {
			   			format(_string, 128, "[ 10. %s (%d) ]", GunNames[ArmaData[VehicleInfo[slot][vSlot10]][ArmaModelo]], VehicleInfo[slot][vAmmo10]);
			   			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo10] == 2)
	    	    	{
    					format(_string, 128, "[ 10. Caixa de Munição 9mm (%d/100) ]", VehicleInfo[slot][vAmmo10]);
		    			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo10] == 3)
	    	    	{
    					format(_string, 128, "[ 10. Caixa de Munição 5.56mm (%d/100) ]", VehicleInfo[slot][vAmmo10]);
		    			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo10] == 4)
	    	    	{
    					format(_string, 128, "[ 10. Caixa de Cartuchos (%d/100) ]", VehicleInfo[slot][vAmmo10]);
		    			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo10] == 5)
	    	    	{
    					format(_string, 128, "[ 10. Caixa de Munição 12.7x106mm (%d/100) ]", VehicleInfo[slot][vAmmo10]);
		    			strcat(Linha3, _string);
					}
					if(VehicleInfo[slot][vSlotTipo10] == 6)
					{
					    switch(VehicleInfo[slot][vSlot10])
					    {
					    	case 1: format(_string, 128, "[ 10. Maconha ruim (%d/100) ]", VehicleInfo[slot][vAmmo10]);
					    	case 2: format(_string, 128, "[ 10. Maconha boa (%d/100) ]", VehicleInfo[slot][vAmmo10]);
				 			case 3: format(_string, 128, "[ 10. Maconha exelente (%d/100) ]", VehicleInfo[slot][vAmmo10]);
							case 4: format(_string, 128, "[ 10. Cocaína Ruim (%d/100) ]", VehicleInfo[slot][vAmmo10]);
							case 5: format(_string, 128, "[ 10. cocaina boa (%d/100) ]", VehicleInfo[slot][vAmmo10]);
							case 6: format(_string, 128, "[ 10. cocaina exelente (%d/100) ]", VehicleInfo[slot][vAmmo10]);
							case 7: format(_string, 128, "[ 10. crack ruim (%d/100) ]", VehicleInfo[slot][vAmmo10]);
							case 8: format(_string, 128, "[ 10. crack bom (%d/100) ]", VehicleInfo[slot][vAmmo10]);
							case 9: format(_string, 128, "[ 10. crack exelente (%d/100) ]", VehicleInfo[slot][vAmmo10]);
							case 10: format(_string, 128, "[ 10. LSD ruim (%d/100) ]", VehicleInfo[slot][vAmmo10]);
							case 11: format(_string, 128, "[ 10. LSD bom (%d/100) ]", VehicleInfo[slot][vAmmo10]);
							case 12: format(_string, 128, "[ 10. LSD exelente (%d/100) ]", VehicleInfo[slot][vAmmo10]);
							case 13: format(_string, 128, "[ 10. metanfetamina ruim (%d/100) ]", VehicleInfo[slot][vAmmo10]);
							case 14: format(_string, 128, "[ 10. metanfetamina boa (%d/100) ]", VehicleInfo[slot][vAmmo10]);
							case 15: format(_string, 128, "[ 10. metanfetamina exelente (%d/100) ]", VehicleInfo[slot][vAmmo10]);
							case 16: format(_string, 128, "[ 10. sementes de cannabis (%d/100) ]", VehicleInfo[slot][vAmmo10]);
							case 17: format(_string, 128, "[ 10. Tubos de Lança Perfume (%dml/100ml) ]", VehicleInfo[slot][vAmmo1]);
						}
						strcat(Linha3, _string);
					}
				}
				else
				{
				    format(_string, 128, "[ 10. Vazio ]");
	    			strcat(Linha3, _string);
				}
				SendClientMessage(playerid,-1,Linha1);
				SendClientMessage(playerid,-1,Linha2);
				SendClientMessage(playerid,-1,Linha3);
          	}
          	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} O portamalas do veículo está fechado.");
		}
		if(strcmp(tmp2,"colocar",true) == 0 || strcmp(tmp2,"guardar",true) == 0 || strcmp(tmp2,"ga",true) == 0)
		{
		    if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
		    if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");
		    if(FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_PCERJ ||FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_EB)
   			{
				if(PlayerInfo[playerid][pEmServico] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando na viatura estando fora de serviço.");
    			if(PlayerInfo[playerid][pFac] != VehicleInfo[slot][vFaction]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso ao portamalas deste veículo.");
			}
			else
			{
   				if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando na em serviço.");
			}
		    GetVehicleParamsEx(carid, engine, lights, alarm,doors,bonnet,boot,objective);
		    if(boot == 1)
         	{
         	    new tmp58[124];
         	    tmp58 = strtok(params,idx);
				if(!strlen(tmp58))
				{
					SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas [guardar] [Arma / 9mm / 556 / Cartucho / 127 / Droga ]");
					return 1;
				}
				if(strcmp(tmp58,"arma",true) == 0)
				{
				    if(PlayerInfo[playerid][pArmaMao] == 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não tem uma arma em mãos.");

	  				new tmp4[256];
					tmp4 = strtok(params,idx);
					if(!strlen(tmp4))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas [guardar] [arma] [slot 1-10]");
						return 1;
					}
					new slote = strval(tmp4);
					if( slote < 1 || slote > 10) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /(v)eiculo [portamalas] [guardar] [arma] [slot 1-10]");
					if(slote == 1)
					{
						if(VehicleInfo[slot][vSlot1] == 0)
						{
			    			new armaid = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vSlotTipo1] = 1;
						    VehicleInfo[slot][vSlot1] = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vAmmo1] = ArmaData[armaid][ArmaAmmo];

						    CriarArmaCarro(playerid,slot, 1, ArmaData[armaid][ArmaModelo]); //Arma No Veículo

						    //========================================
						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							//========================================
						    RemovePlayerAttachedObject(playerid, 0);
							ArmaData[armaid][ArmaCom] = 0;
							FloodCMD[playerid] = gettime()+2;

							format(_string, 128, "[Porta-Malas] Você guardou a sua %s com %d balas no Slot 1. (%d)", GunNames[ArmaData[VehicleInfo[slot][vSlot1]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot1]][ArmaNumeracao]);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						    SalvarArma(armaid);

						    new strl[126];
							format(strl, sizeof(strl), "%s Você guardou a sua %s com %d balas no Slot 1. [ %d ]", PlayerName(playerid,0), GunNames[ArmaData[VehicleInfo[slot][vSlot1]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot1]][ArmaNumeracao]);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 2)
					{
						if(VehicleInfo[slot][vSlot2] == 0)
						{
			    			new armaid = PlayerInfo[playerid][pArmaMao];
				  			VehicleInfo[slot][vSlotTipo2] = 1;
						   	VehicleInfo[slot][vSlot2] = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vAmmo2] = ArmaData[armaid][ArmaAmmo];

						    CriarArmaCarro(playerid,slot, 2, ArmaData[armaid][ArmaModelo]); //Arma No Veículo

						   	//========================================
						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							//========================================
							ArmaData[armaid][ArmaCom] = 0;
							FloodCMD[playerid] = gettime()+2;

							format(_string, 128, "[Porta-Malas] Você guardou a sua %s com %d balas no Slot 2. (%d)", GunNames[ArmaData[VehicleInfo[slot][vSlot2]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot2]][ArmaNumeracao]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);
							SaveVehicle(slot);
							SalvarArma(armaid);

							new strl[126];
							format(strl, sizeof(strl), "%s Você guardou a sua %s com %d balas no Slot 2. [ %d ]", PlayerName(playerid,0), GunNames[ArmaData[VehicleInfo[slot][vSlot2]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot2]][ArmaNumeracao]);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 3)
					{
						if(VehicleInfo[slot][vSlot3] == 0)
						{
			    			new armaid = PlayerInfo[playerid][pArmaMao];
							VehicleInfo[slot][vSlotTipo3] = 1;
							VehicleInfo[slot][vSlot3] = PlayerInfo[playerid][pArmaMao];
							VehicleInfo[slot][vAmmo3] = ArmaData[armaid][ArmaAmmo];

							CriarArmaCarro(playerid,slot, 3, ArmaData[armaid][ArmaModelo]); //Arma No Veículo

							//========================================
						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							//========================================
						    RemovePlayerAttachedObject(playerid, 0);
							ArmaData[armaid][ArmaCom] = 0;
							FloodCMD[playerid] = gettime()+2;

							format(_string, 128, "[Porta-Malas] Você guardou a sua %s com %d balas no Slot 3. (%d)", GunNames[ArmaData[VehicleInfo[slot][vSlot3]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot3]][ArmaNumeracao]);
						    SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						    SalvarArma(armaid);

						    new strl[126];
							format(strl, sizeof(strl), "%s Você guardou a sua %s com %d balas no Slot 3. [ %d ]", PlayerName(playerid,0), GunNames[ArmaData[VehicleInfo[slot][vSlot3]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot3]][ArmaNumeracao]);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 4)
					{
						if(VehicleInfo[slot][vSlot4] == 0)
						{
			    			new armaid = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vSlotTipo4] = 1;
						    VehicleInfo[slot][vSlot4] = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vAmmo4] = ArmaData[armaid][ArmaAmmo];

						    CriarArmaCarro(playerid,slot, 4, ArmaData[armaid][ArmaModelo]); //Arma No Veículo

						    //========================================
						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							//========================================
						    RemovePlayerAttachedObject(playerid, 0);
							ArmaData[armaid][ArmaCom] = 0;
							FloodCMD[playerid] = gettime()+2;

							format(_string, 128, "[Porta-Malas] Você guardou a sua %s com %d balas no Slot 4. (%d)", GunNames[ArmaData[VehicleInfo[slot][vSlot4]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot4]][ArmaNumeracao]);
				   			SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						    SalvarArma(armaid);

						    new strl[126];
							format(strl, sizeof(strl), "%s Você guardou a sua %s com %d balas no Slot 4. [ %d ]", PlayerName(playerid,0), GunNames[ArmaData[VehicleInfo[slot][vSlot4]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot4]][ArmaNumeracao]);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 5)
					{
						if(VehicleInfo[slot][vSlot5] == 0)
						{
						    new armaid = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vSlotTipo5] = 1;
						    VehicleInfo[slot][vSlot5] = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vAmmo5] = ArmaData[armaid][ArmaAmmo];

						    CriarArmaCarro(playerid,slot, 5, ArmaData[armaid][ArmaModelo]); //Arma No Veículo

						    //========================================
						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							//========================================
						    RemovePlayerAttachedObject(playerid, 0);
							ArmaData[armaid][ArmaCom] = 0;
							FloodCMD[playerid] = gettime()+2;

						    format(_string, 128, "[Porta-Malas] Você guardou a sua %s com %d balas no Slot 5. (%d)", GunNames[ArmaData[VehicleInfo[slot][vSlot5]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot5]][ArmaNumeracao]);
						    SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						    SalvarArma(armaid);

						    new strl[126];
							format(strl, sizeof(strl), "%s Você guardou a sua %s com %d balas no Slot 5. [ %d ]", PlayerName(playerid,0), GunNames[ArmaData[VehicleInfo[slot][vSlot5]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot5]][ArmaNumeracao]);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 6)
					{
						if(VehicleInfo[slot][vSlot6] == 0)
						{
						    new armaid = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vSlotTipo6] = 1;
						    VehicleInfo[slot][vSlot6] = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vAmmo6] = ArmaData[armaid][ArmaAmmo];

						    CriarArmaCarro(playerid,slot, 6, ArmaData[armaid][ArmaModelo]); //Arma No Veículo

						   	//========================================
						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							//========================================
						   	RemovePlayerAttachedObject(playerid, 0);
							ArmaData[armaid][ArmaCom] = 0;
							FloodCMD[playerid] = gettime()+2;

						    format(_string, 128, "{[Porta-Malas] Você guardou a sua %s com %d balas no Slot 6.", GunNames[ArmaData[VehicleInfo[slot][vSlot6]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot6]][ArmaNumeracao]);
						    SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);
					    	SaveVehicle(slot);
						    SalvarArma(armaid);

						    new strl[126];
							format(strl, sizeof(strl), "%s Você guardou a sua %s com %d balas no Slot 6. [ %d ]", PlayerName(playerid,0), GunNames[ArmaData[VehicleInfo[slot][vSlot6]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot6]][ArmaNumeracao]);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 7)
					{
						if(VehicleInfo[slot][vSlot7] == 0)
						{
						    new armaid = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vSlotTipo7] = 1;
						    VehicleInfo[slot][vSlot7] = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vAmmo7] = ArmaData[armaid][ArmaAmmo];

						    CriarArmaCarro(playerid,slot, 7, ArmaData[armaid][ArmaModelo]); //Arma No Veículo

						    //========================================
						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							//========================================
						    RemovePlayerAttachedObject(playerid, 0);
							ArmaData[armaid][ArmaCom] = 0;
							FloodCMD[playerid] = gettime()+2;

						    format(_string, 128, "[Porta-Malas] Você guardou a sua %s com %d balas no Slot 7. (%d)", GunNames[ArmaData[VehicleInfo[slot][vSlot7]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot7]][ArmaNumeracao]);
						    SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						    SalvarArma(armaid);

						    new strl[126];
							format(strl, sizeof(strl), "%s Você guardou a sua %s com %d balas no Slot 7. [ %d ]", PlayerName(playerid,0), GunNames[ArmaData[VehicleInfo[slot][vSlot7]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot7]][ArmaNumeracao]);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 8)
					{
						if(VehicleInfo[slot][vSlot8] == 0)
						{
		    				new armaid = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vSlotTipo8] = 1;
						    VehicleInfo[slot][vSlot8] = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vAmmo8] = ArmaData[armaid][ArmaAmmo];

						    CriarArmaCarro(playerid,slot, 8, ArmaData[armaid][ArmaModelo]); //Arma No Veículo

						    //========================================
						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							//========================================
						    RemovePlayerAttachedObject(playerid, 0);
							ArmaData[armaid][ArmaCom] = 0;
							FloodCMD[playerid] = gettime()+2;

						    format(_string, 128, "[Porta-Malas] Você guardou a sua %s com %d balas no Slot 8. (%d)", GunNames[ArmaData[VehicleInfo[slot][vSlot8]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot8]][ArmaNumeracao]);
						    SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						    SalvarArma(armaid);

						    new strl[126];
							format(strl, sizeof(strl), "%s Você guardou a sua %s com %d balas no Slot 8. [ %d ]", PlayerName(playerid,0), GunNames[ArmaData[VehicleInfo[slot][vSlot8]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot8]][ArmaNumeracao]);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 9)
					{
						if(VehicleInfo[slot][vSlot9] == 0)
						{
						    new armaid = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vSlotTipo9] = 1;
						    VehicleInfo[slot][vSlot9] = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vAmmo9] = ArmaData[armaid][ArmaAmmo];

						    CriarArmaCarro(playerid,slot, 9, ArmaData[armaid][ArmaModelo]); //Arma No Veículo

						    //========================================
						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							//========================================
						    RemovePlayerAttachedObject(playerid, 0);
							ArmaData[armaid][ArmaCom] = 0;
							FloodCMD[playerid] = gettime()+2;

						    format(_string, 128, "[Porta-Malas] Você guardou uma %s com %d balas no Slot 9. (%d)", GunNames[ArmaData[VehicleInfo[slot][vSlot9]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot9]][ArmaNumeracao]);
						    SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);
							SaveVehicle(slot);
	  						SalvarArma(armaid);

			    			new strl[126];
							format(strl, sizeof(strl), "%s Você guardou a sua %s com %d balas no Slot 9. [ %d ]", PlayerName(playerid,0), GunNames[ArmaData[VehicleInfo[slot][vSlot9]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot9]][ArmaNumeracao]);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 10)
					{
						if(VehicleInfo[slot][vSlot10] == 0)
						{
						    new armaid = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vSlotTipo10] = 1;
						    VehicleInfo[slot][vSlot10] = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vAmmo10] = ArmaData[armaid][ArmaAmmo];

						    CriarArmaCarro(playerid,slot, 10, ArmaData[armaid][ArmaModelo]); //Arma No Veículo

						    //========================================
						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							//========================================
						    RemovePlayerAttachedObject(playerid, 0);
							ArmaData[armaid][ArmaCom] = 0;
							FloodCMD[playerid] = gettime()+2;

						    format(_string, 128, "[Porta-Malas] Você guardou a sua %s com %d balas no Slot 10. (%d)", GunNames[ArmaData[VehicleInfo[slot][vSlot10]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot10]][ArmaNumeracao]);
						    SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						    SalvarArma(armaid);

						    new strl[126];
							format(strl, sizeof(strl), "%s Você guardou a sua %s com %d balas no Slot 10. [ %d ]", PlayerName(playerid,0), GunNames[ArmaData[VehicleInfo[slot][vSlot10]][ArmaModelo]], GetPlayerAmmo(playerid), ArmaData[VehicleInfo[slot][vSlot10]][ArmaNumeracao]);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
				}
				else if(strcmp(tmp58,"9mm",true) == 0)
				{
	  				new tmp4[256];
					tmp4 = strtok(params,idx);
					if(!strlen(tmp4))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas [guardar] [9mm] [slot 1-10] [Quantidade(Max:500)]");
						return 1;
					}
					new slote = strval(tmp4);
					if( slote < 1 || slote > 10) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /(v)eiculo portamalas guardar 9mm [slot 1-10] [Quantidade(Max:500)]");
					new tmp88[256];
					tmp88 = strtok(params,idx);
					if(!strlen(tmp88))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas [guardar] [9mm] [slot 1-10] [Quantidade(Max:500)]");
						return 1;
					}
					new qnt = strval(tmp88);
					if(qnt < 0 || qnt > 500) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas [guardar] [9mm] [slot 1-10] [Quantidade(Max:500)]");

					if(PlayerInfo[playerid][pMun9mm] < qnt) return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não tem tudo isso de munição.");

					if(FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_EB)
				    {
						if(PlayerInfo[playerid][pEmServico] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando na viatura estando fora de serviço.");
		                if(PlayerInfo[playerid][pFac] != VehicleInfo[slot][vFaction]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso ao portamalas deste veículo.");
					}
					else
					{
					    if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando na em serviço.");
					}

					if(slote == 1)
					{
						if(VehicleInfo[slot][vSlot1] == 0)
						{
						    VehicleInfo[slot][vSlotTipo1] = 2;
						    VehicleInfo[slot][vSlot1] = 1;
						    VehicleInfo[slot][vAmmo1] = qnt;
						    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 9mm no Slot 1.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 9mm no Slot 1.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 2)
					{
						if(VehicleInfo[slot][vSlot2] == 0)
						{
						    VehicleInfo[slot][vSlotTipo2] = 2;
						    VehicleInfo[slot][vSlot2] = 1;
						    VehicleInfo[slot][vAmmo2] = qnt;
						    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 9mm no Slot 2.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 9mm no Slot 2.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 3)
					{
						if(VehicleInfo[slot][vSlot3] == 0)
						{
						    VehicleInfo[slot][vSlotTipo3] = 2;
						    VehicleInfo[slot][vSlot3] = 1;
						    VehicleInfo[slot][vAmmo3] = qnt;
						    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 9mm no Slot 3.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 9mm no Slot 3.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 4)
					{
						if(VehicleInfo[slot][vSlot4] == 0)
						{
						    VehicleInfo[slot][vSlotTipo4] = 2;
						    VehicleInfo[slot][vSlot4] = 1;
						    VehicleInfo[slot][vAmmo4] = qnt;
						    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 9mm no Slot 4.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 9mm no Slot 4.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 5)
					{
						if(VehicleInfo[slot][vSlot5] == 0)
						{
						    VehicleInfo[slot][vSlotTipo5] = 2;
						    VehicleInfo[slot][vSlot5] = 1;
						    VehicleInfo[slot][vAmmo5] = qnt;
						    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 9mm no Slot 5.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 9mm no Slot 5.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 6)
					{
						if(VehicleInfo[slot][vSlot6] == 0)
						{
						    VehicleInfo[slot][vSlotTipo6] = 2;
						    VehicleInfo[slot][vSlot6] = 1;
						    VehicleInfo[slot][vAmmo6] = qnt;
						    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 9mm no Slot 6.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 9mm no Slot 6.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 7)
					{
						if(VehicleInfo[slot][vSlot7] == 0)
						{
						    VehicleInfo[slot][vSlotTipo7] = 2;
						    VehicleInfo[slot][vSlot7] = 1;
						    VehicleInfo[slot][vAmmo7] = qnt;
						    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 9mm no Slot 7.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 9mm no Slot 7.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 8)
					{
						if(VehicleInfo[slot][vSlot8] == 0)
						{
						    VehicleInfo[slot][vSlotTipo8] = 2;
						    VehicleInfo[slot][vSlot8] = 1;
						    VehicleInfo[slot][vAmmo8] = qnt;
						    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 9mm no Slot 8.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 9mm no Slot 8.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 9)
					{
						if(VehicleInfo[slot][vSlot9] == 0)
						{
						    VehicleInfo[slot][vSlotTipo9] = 2;
						    VehicleInfo[slot][vSlot9] = 1;
						    VehicleInfo[slot][vAmmo9] = qnt;
						    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 9mm no Slot 9.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 9mm no Slot 9.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 10)
					{
						if(VehicleInfo[slot][vSlot10] == 0)
						{
						    VehicleInfo[slot][vSlotTipo10] = 2;
						    VehicleInfo[slot][vSlot10] = 1;
						    VehicleInfo[slot][vAmmo10] = qnt;
						    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas de 9mm no Slot 10.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 9mm no Slot 10.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
				}
				else if(strcmp(tmp58,"556",true) == 0)
				{
	  				new tmp4[256];
					tmp4 = strtok(params,idx);
					if(!strlen(tmp4))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas [guardar] [556] [slot 1-10] [Quantidade(Max:500)]");
						return 1;
					}
					new slote = strval(tmp4);
					if( slote < 1 || slote > 10) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /(v)eiculo portamalas guardar 556 [slot 1-10] [Quantidade(Max:500)]");
					new tmp88[256];
					tmp88 = strtok(params,idx);
					if(!strlen(tmp88))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas [guardar] [556] [slot 1-10] [Quantidade(Max:500)]");
						return 1;
					}
					new qnt = strval(tmp88);
					if(qnt < 0 || qnt > 500) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas [guardar] [556] [slot 1-10] [Quantidade(Max:500)]");

					if(PlayerInfo[playerid][pMun556] < qnt) return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não tem tudo isso de munição.");

                    if(FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_PMERJ ||FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_EB)
				    {
						if(PlayerInfo[playerid][pEmServico] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando na viatura estando fora de serviço.");
		                if(PlayerInfo[playerid][pFac] != VehicleInfo[slot][vFaction]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso ao portamalas deste veículo.");
					}
					else
					{
					    if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando na em serviço.");
					}

					if(slote == 1)
					{
						if(VehicleInfo[slot][vSlot1] == 0)
						{
						    VehicleInfo[slot][vSlotTipo1] = 3;
						    VehicleInfo[slot][vSlot1] = 1;
						    VehicleInfo[slot][vAmmo1] = qnt;
						    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 5.56mm no Slot 1.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 5.56mm no Slot 1.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 2)
					{
						if(VehicleInfo[slot][vSlot2] == 0)
						{
						    VehicleInfo[slot][vSlotTipo2] = 3;
						    VehicleInfo[slot][vSlot2] = 1;
						    VehicleInfo[slot][vAmmo2] = qnt;
						    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 5.56mm no Slot 2.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 5.56mm no Slot 2.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 3)
					{
						if(VehicleInfo[slot][vSlot3] == 0)
						{
						    VehicleInfo[slot][vSlotTipo3] = 3;
						    VehicleInfo[slot][vSlot3] = 1;
						    VehicleInfo[slot][vAmmo3] = qnt;
						    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 5.56mm no Slot 3.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 5.56mm no Slot 3.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 4)
					{
						if(VehicleInfo[slot][vSlot4] == 0)
						{
						    VehicleInfo[slot][vSlotTipo4] = 3;
						    VehicleInfo[slot][vSlot4] = 1;
						    VehicleInfo[slot][vAmmo4] = qnt;
						    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 5.56mm no Slot 4.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 5.56mm no Slot 4.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 5)
					{
						if(VehicleInfo[slot][vSlot5] == 0)
						{
						    VehicleInfo[slot][vSlotTipo5] = 3;
						    VehicleInfo[slot][vSlot5] = 1;
						    VehicleInfo[slot][vAmmo5] = qnt;
						    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 5.56mm no Slot 5.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 5.56mm no Slot 5.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 6)
					{
						if(VehicleInfo[slot][vSlot6] == 0)
						{
						    VehicleInfo[slot][vSlotTipo6] = 3;
						    VehicleInfo[slot][vSlot6] = 1;
						    VehicleInfo[slot][vAmmo6] = qnt;
						    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 5.56mm no Slot 6.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 5.56mm no Slot 6.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 7)
					{
						if(VehicleInfo[slot][vSlot7] == 0)
						{
						    VehicleInfo[slot][vSlotTipo7] = 3;
						    VehicleInfo[slot][vSlot7] = 1;
						    VehicleInfo[slot][vAmmo7] = qnt;
						    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 5.56mm no Slot 7.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 5.56mm no Slot 7.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 8)
					{
						if(VehicleInfo[slot][vSlot8] == 0)
						{
						    VehicleInfo[slot][vSlotTipo8] = 3;
						    VehicleInfo[slot][vSlot8] = 1;
						    VehicleInfo[slot][vAmmo8] = qnt;
						    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 5.56mm no Slot 8.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 5.56mm no Slot 8.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 9)
					{
						if(VehicleInfo[slot][vSlot9] == 0)
						{
						    VehicleInfo[slot][vSlotTipo9] = 3;
						    VehicleInfo[slot][vSlot9] = 1;
						    VehicleInfo[slot][vAmmo9] = qnt;
						    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 5.56mm no Slot 9.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 5.56mm no Slot 9.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 10)
					{
						if(VehicleInfo[slot][vSlot10] == 0)
						{
						    VehicleInfo[slot][vSlotTipo10] = 3;
						    VehicleInfo[slot][vSlot10] = 1;
						    VehicleInfo[slot][vAmmo10] = qnt;
						    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 5.56mm no Slot 10.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 5.56mm no Slot 10.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
				}
				else if(strcmp(tmp58,"cartucho",true) == 0)
				{
	  				new tmp4[256];
					tmp4 = strtok(params,idx);
					if(!strlen(tmp4))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas [guardar] [cartucho] [slot 1-10] [Quantidade(Max:500)]");
						return 1;
					}
					new slote = strval(tmp4);
					if( slote < 1 || slote > 10) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /(v)eiculo portamalas guardar cartucho [slot 1-10] [Quantidade(Max:500)]");
					new tmp88[256];
					tmp88 = strtok(params,idx);
					if(!strlen(tmp88))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas [guardar] [cartucho] [slot 1-10] [Quantidade(Max:500)]");
						return 1;
					}
					new qnt = strval(tmp88);
					if(qnt < 1 || qnt > 500) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas [guardar] [cartucho] [slot 1-10] [Quantidade]");

					if(PlayerInfo[playerid][pMunCart] < qnt) return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não tem tudo isso de munição.");

                    if(FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_EB)
				    {
						if(PlayerInfo[playerid][pEmServico] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando na viatura estando fora de serviço.");
		                if(PlayerInfo[playerid][pFac] != VehicleInfo[slot][vFaction]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso ao portamalas deste veículo.");
					}
					else
					{
					    if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando na em serviço.");
					}

					if(slote == 1)
					{
						if(VehicleInfo[slot][vSlot1] == 0)
						{
						    VehicleInfo[slot][vSlotTipo1] = 4;
						    VehicleInfo[slot][vSlot1] = 1;
						    VehicleInfo[slot][vAmmo1] = qnt;
						    PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d cartuchos no Slot 1.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d cartuchos no Slot 1.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 2)
					{
						if(VehicleInfo[slot][vSlot2] == 0)
						{
						    VehicleInfo[slot][vSlotTipo2] = 4;
						    VehicleInfo[slot][vSlot2] = 1;
						    VehicleInfo[slot][vAmmo2] = qnt;
						    PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d cartuchos no Slot 2.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d cartuchos no Slot 2.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 3)
					{
						if(VehicleInfo[slot][vSlot3] == 0)
						{
						    VehicleInfo[slot][vSlotTipo3] = 4;
						    VehicleInfo[slot][vSlot3] = 1;
						    VehicleInfo[slot][vAmmo3] = qnt;
						    PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d cartuchos no Slot 3.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d cartuchos no Slot 3.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 4)
					{
						if(VehicleInfo[slot][vSlot4] == 0)
						{
						    VehicleInfo[slot][vSlotTipo4] = 4;
						    VehicleInfo[slot][vSlot4] = 1;
						    VehicleInfo[slot][vAmmo4] = qnt;
						    PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d cartuchos no Slot 4.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d cartuchos no Slot 4.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 5)
					{
						if(VehicleInfo[slot][vSlot5] == 0)
						{
						    VehicleInfo[slot][vSlotTipo5] = 4;
						    VehicleInfo[slot][vSlot5] = 1;
						    VehicleInfo[slot][vAmmo5] = qnt;
						    PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d cartuchos no Slot 5.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d cartuchos no Slot 5.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 6)
					{
						if(VehicleInfo[slot][vSlot6] == 0)
						{
						    VehicleInfo[slot][vSlotTipo6] = 4;
						    VehicleInfo[slot][vSlot6] = 1;
						    VehicleInfo[slot][vAmmo6] = qnt;
						    PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d cartuchos no Slot 6.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d cartuchos no Slot 6.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 7)
					{
						if(VehicleInfo[slot][vSlot7] == 0)
						{
						    VehicleInfo[slot][vSlotTipo7] = 4;
						    VehicleInfo[slot][vSlot7] = 1;
						    VehicleInfo[slot][vAmmo7] = qnt;
						    PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d cartuchos no Slot 7.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d cartuchos no Slot 7.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 8)
					{
						if(VehicleInfo[slot][vSlot8] == 0)
						{
						    VehicleInfo[slot][vSlotTipo8] = 4;
						    VehicleInfo[slot][vSlot8] = 1;
						    VehicleInfo[slot][vAmmo8] = qnt;
						    PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d cartuchos no Slot 8.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d cartuchos no Slot 8.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 9)
					{
						if(VehicleInfo[slot][vSlot9] == 0)
						{
						    VehicleInfo[slot][vSlotTipo9] = 4;
						    VehicleInfo[slot][vSlot9] = 1;
						    VehicleInfo[slot][vAmmo9] = qnt;
						    PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d cartuchos no Slot 9.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d cartuchos no Slot 9.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 10)
					{
						if(VehicleInfo[slot][vSlot10] == 0)
						{
						    VehicleInfo[slot][vSlotTipo10] = 4;
						    VehicleInfo[slot][vSlot10] = 1;
						    VehicleInfo[slot][vAmmo10] = qnt;
						    PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d cartuchos no Slot 10.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d cartuchos no Slot 10.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
				}
				else if(strcmp(tmp58,"127",true) == 0)
				{
	  				new tmp4[256];
					tmp4 = strtok(params,idx);
					if(!strlen(tmp4))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas [guardar] [cartucho] [slot 1-10] [Quantidade(Max:500)]");
						return 1;
					}
					new slote = strval(tmp4);
					if( slote < 1 || slote > 10) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /(v)eiculo portamalas guardar cartucho [slot 1-10] [Quantidade(Max:500)]");
					new tmp88[256];
					tmp88 = strtok(params,idx);
					if(!strlen(tmp88))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas [guardar] [cartucho] [slot 1-10] [Quantidade(Max:500)]");
						return 1;
					}
					new qnt = strval(tmp88);
					if(qnt < 0 || qnt > 500) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas [guardar] [cartucho] [slot 1-10] [Quantidade(Max:500)]");

					if(PlayerInfo[playerid][pMun556] < qnt) return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não tem tudo isso de munição.");

                    if(FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_EB)
				    {
						if(PlayerInfo[playerid][pEmServico] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando na viatura estando fora de serviço.");
		                if(PlayerInfo[playerid][pFac] != VehicleInfo[slot][vFaction]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso ao portamalas deste veículo.");
					}
					else
					{
					    if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando na em serviço.");
					}

					if(slote == 1)
					{
						if(VehicleInfo[slot][vSlot1] == 0)
						{
						    VehicleInfo[slot][vSlotTipo1] = 5;
						    VehicleInfo[slot][vSlot1] = 1;
						    VehicleInfo[slot][vAmmo1] = qnt;
						    PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 12.7x106mm no Slot 1.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 12.7x106mm no Slot 1.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 2)
					{
						if(VehicleInfo[slot][vSlot2] == 0)
						{
						    VehicleInfo[slot][vSlotTipo2] = 5;
						    VehicleInfo[slot][vSlot2] = 1;
						    VehicleInfo[slot][vAmmo2] = qnt;
						    PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 12.7x106mm no Slot 2.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 12.7x106mm no Slot 2.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 3)
					{
						if(VehicleInfo[slot][vSlot3] == 0)
						{
						    VehicleInfo[slot][vSlotTipo3] = 5;
						    VehicleInfo[slot][vSlot3] = 1;
						    VehicleInfo[slot][vAmmo3] = qnt;
						    PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 12.7x106mm no Slot 3.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 12.7x106mm no Slot 3.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 4)
					{
						if(VehicleInfo[slot][vSlot4] == 0)
						{
						    VehicleInfo[slot][vSlotTipo4] = 5;
						    VehicleInfo[slot][vSlot4] = 1;
						    VehicleInfo[slot][vAmmo4] = qnt;
						    PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 12.7x106mm no Slot 4.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 12.7x106mm no Slot 4.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 5)
					{
						if(VehicleInfo[slot][vSlot5] == 0)
						{
						    VehicleInfo[slot][vSlotTipo5] = 5;
						    VehicleInfo[slot][vSlot5] = 1;
						    VehicleInfo[slot][vAmmo5] = qnt;
						    PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 12.7x106mm no Slot 5.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 12.7x106mm no Slot 5.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 6)
					{
						if(VehicleInfo[slot][vSlot6] == 0)
						{
						    VehicleInfo[slot][vSlotTipo6] = 5;
						    VehicleInfo[slot][vSlot6] = 1;
						    VehicleInfo[slot][vAmmo6] = qnt;
						    PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 12.7x106mm no Slot 6.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 12.7x106mm no Slot 6.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 7)
					{
						if(VehicleInfo[slot][vSlot7] == 0)
						{
						    VehicleInfo[slot][vSlotTipo7] = 5;
						    VehicleInfo[slot][vSlot7] = 1;
						    VehicleInfo[slot][vAmmo7] = qnt;
						    PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 12.7x106mm no Slot 7.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 12.7x106mm no Slot 7.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 8)
					{
						if(VehicleInfo[slot][vSlot8] == 0)
						{
						    VehicleInfo[slot][vSlotTipo8] = 5;
						    VehicleInfo[slot][vSlot8] = 1;
						    VehicleInfo[slot][vAmmo8] = qnt;
						    PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 12.7x106mm no Slot 8.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 12.7x106mm no Slot 8.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 9)
					{
						if(VehicleInfo[slot][vSlot9] == 0)
						{
						    VehicleInfo[slot][vSlotTipo9] = 5;
						    VehicleInfo[slot][vSlot9] = 1;
						    VehicleInfo[slot][vAmmo9] = qnt;
						    PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 12.7x106mm no Slot 9.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 12.7x106mm no Slot 9.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 10)
					{
						if(VehicleInfo[slot][vSlot10] == 0)
						{
						    VehicleInfo[slot][vSlotTipo10] = 5;
						    VehicleInfo[slot][vSlot10] = 1;
						    VehicleInfo[slot][vAmmo10] = qnt;
						    PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-qnt;

							format(_string, 128, "[Porta-Malas] Você guardou uma caixa com %d balas calibre 12.7x106mm no Slot 10.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);

						    new strl[126];
							format(strl, sizeof(strl), "%s guardou uma caixa com %d balas calibre 12.7x106mm no Slot 10.", PlayerName(playerid,0), qnt);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
				}
				//
				else if(strcmp(tmp58,"droga",true) == 0)
				{

				    new tmp689[256];
					tmp689 = strtok(params,idx);
					if(!strlen(tmp689))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas guardar droga [id] [slot 1-10] [Quantidade(Max:1000)]");
						return 1;
					}
					new drogaid = strval(tmp689);
					if(drogaid < 1 || drogaid > 16) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas guardar droga [id] [slot 1-10] [Quantidade(Max:1000)]");
				    //===
	  				new tmp4[256];
					tmp4 = strtok(params,idx);
					if(!strlen(tmp4))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas guardar droga [id] [slot 1-10] [Quantidade]");
						return 1;
					}
					new slote = strval(tmp4);
					if( slote < 1 || slote > 10) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas guardar droga [id] [slot 1-10] [Quantidade(Max:1000)]");
					//===
					new tmp88[256];
					tmp88 = strtok(params,idx);
					if(!strlen(tmp88))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas guardar droga [id] [slot 1-10] [Quantidade(Max:1000)]");
						return 1;
					}
					new qnt = strval(tmp88);
					if(qnt < 1 || qnt > 1000) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas guardar droga [id] [slot 1-10] [Quantidade(Max:1000)]");

					if(slote == 1)
					{
						if(VehicleInfo[slot][vSlot1] == 0)
						{
						    new drug_name[128];
						    switch(drogaid)
						    {
							    case 1:
								{
									if(PlayerDroga[playerid][MaconhaR] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha ruim no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha ruim.");
								}
						    	case 2:
						    	{
									if(PlayerDroga[playerid][MaconhaB] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha boa no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha boa.");
								}
						    	case 3:
						    	{
									if(PlayerDroga[playerid][MaconhaE] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha exelente no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha exelente.");
								}
						    	//======================================================================
						    	case 4:
						    	{
									if(PlayerDroga[playerid][CocaR] >= qnt)
									{
									    PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de Cocaína Ruim no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Cocaína Ruim.");
								}
						    	case 5:
						    	{
									if(PlayerDroga[playerid][CocaB] >= qnt)
									{
									    PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina boa no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina boa.");
								}
						    	case 6:
						    	{
									if(PlayerDroga[playerid][CocaE] >= qnt)
									{
									    PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina exelente no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina exelente.");
								}
						    	//======================================================================
						    	case 7:
								{
									if(PlayerDroga[playerid][CrackR] >= qnt)
									{
									    PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack ruim no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack ruim.");
								}
						    	case 8:
								{
									if(PlayerDroga[playerid][CrackB] >= qnt)
									{
									    PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack bom no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack bom.");
								}
						    	case 9:
						    	{
									if(PlayerDroga[playerid][CrackE] >= qnt)
									{
									    PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack exelente no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack exelente.");
								}
						    	//======================================================================
						    	case 10:
								{
									if(PlayerDroga[playerid][LSDR] >= qnt)
									{
									    PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD ruim no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD ruim.");
								}
						    	case 11:
								{
									if(PlayerDroga[playerid][LSDB] >= qnt)
									{
									    PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD bom no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD bom.");
								}
						    	case 12:
								{
									if(PlayerDroga[playerid][LSDE] >= qnt)
									{
									    PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD exelente no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD exelente.");
								}
						    	//======================================================================
						    	case 13:
								{
									if(PlayerDroga[playerid][MetR] >= qnt)
									{
									    PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina ruim no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina ruim.");
								}
						    	case 14:
								{
									if(PlayerDroga[playerid][MetB] >= qnt)
									{
									    PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina boa no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina boa.");
								}
						    	case 15:
								{
									if(PlayerDroga[playerid][MetE] >= qnt)
									{
									    PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina exelente no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina exelente.");
								}
								//======================================================================
								case 16:
								{
									if(PlayerDroga[playerid][Sementes] >= qnt)
									{
									    PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %d sementes no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Sementes.");
								}
								case 17:
								{
									if(PlayerDroga[playerid][LancaPer] >= qnt)
									{
									    PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dml de lança perfume no Slot 1.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Lança Perfume.");
								}
							}

							VehicleInfo[slot][vSlotTipo1] = 6;
						    VehicleInfo[slot][vSlot1] = drogaid;
						    VehicleInfo[slot][vAmmo1] = qnt;

							SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);
						    SaveVehicle(slot);
						    SaveDrogas(playerid);

						    new strl[126];
							format(strl, sizeof(strl), "[%s] %s.", PlayerName(playerid,0), drug_name);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 2)
					{
						if(VehicleInfo[slot][vSlot2] == 0)
						{
						    new drug_name[128];
						    switch(drogaid)
						    {
							    case 1:
								{
									if(PlayerDroga[playerid][MaconhaR] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha ruim no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha ruim.");
								}
						    	case 2:
						    	{
									if(PlayerDroga[playerid][MaconhaB] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha boa no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha boa.");
								}
						    	case 3:
						    	{
									if(PlayerDroga[playerid][MaconhaE] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha exelente no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha exelente.");
								}
						    	//======================================================================
						    	case 4:
						    	{
									if(PlayerDroga[playerid][CocaR] >= qnt)
									{
									    PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de Cocaína Ruim no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Cocaína Ruim.");
								}
						    	case 5:
						    	{
									if(PlayerDroga[playerid][CocaB] >= qnt)
									{
									    PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina boa no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina boa.");
								}
						    	case 6:
						    	{
									if(PlayerDroga[playerid][CocaE] >= qnt)
									{
									    PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina exelente no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina exelente.");
								}
						    	//======================================================================
						    	case 7:
								{
									if(PlayerDroga[playerid][CrackR] >= qnt)
									{
									    PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack ruim no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack ruim.");
								}
						    	case 8:
								{
									if(PlayerDroga[playerid][CrackB] >= qnt)
									{
									    PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack bom no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack bom.");
								}
						    	case 9:
						    	{
									if(PlayerDroga[playerid][CrackE] >= qnt)
									{
									    PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack exelente no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack exelente.");
								}
						    	//======================================================================
						    	case 10:
								{
									if(PlayerDroga[playerid][LSDR] >= qnt)
									{
									    PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD ruim no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD ruim.");
								}
						    	case 11:
								{
									if(PlayerDroga[playerid][LSDB] >= qnt)
									{
									    PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD bom no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD bom.");
								}
						    	case 12:
								{
									if(PlayerDroga[playerid][LSDE] >= qnt)
									{
									    PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD exelente no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD exelente.");
								}
						    	//======================================================================
						    	case 13:
								{
									if(PlayerDroga[playerid][MetR] >= qnt)
									{
									    PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina ruim no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina ruim.");
								}
						    	case 14:
								{
									if(PlayerDroga[playerid][MetB] >= qnt)
									{
									    PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina boa no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina boa.");
								}
						    	case 15:
								{
									if(PlayerDroga[playerid][MetE] >= qnt)
									{
									    PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina exelente no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina exelente.");
								}
								//======================================================================
								case 16:
								{
									if(PlayerDroga[playerid][Sementes] >= qnt)
									{
									    PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %d sementes no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Sementes.");
								}
								case 17:
								{
									if(PlayerDroga[playerid][LancaPer] >= qnt)
									{
									    PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dml de lança perfume no Slot 2.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Lança Perfume.");
								}
							}

							VehicleInfo[slot][vSlotTipo2] = 6;
						    VehicleInfo[slot][vSlot2] = drogaid;
						    VehicleInfo[slot][vAmmo2] = qnt;

							SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);
						    SaveVehicle(slot);
						    SaveDrogas(playerid);

						    new strl[126];
							format(strl, sizeof(strl), "[%s] %s.", PlayerName(playerid,0), drug_name);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 3)
					{
						if(VehicleInfo[slot][vSlot3] == 0)
						{
						    new drug_name[128];
						    switch(drogaid)
						    {
							    case 1:
								{
									if(PlayerDroga[playerid][MaconhaR] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha ruim no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha ruim.");
								}
						    	case 2:
						    	{
									if(PlayerDroga[playerid][MaconhaB] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha boa no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha boa.");
								}
						    	case 3:
						    	{
									if(PlayerDroga[playerid][MaconhaE] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha exelente no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha exelente.");
								}
						    	//======================================================================
						    	case 4:
						    	{
									if(PlayerDroga[playerid][CocaR] >= qnt)
									{
									    PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de Cocaína Ruim no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Cocaína Ruim.");
								}
						    	case 5:
						    	{
									if(PlayerDroga[playerid][CocaB] >= qnt)
									{
									    PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina boa no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina boa.");
								}
						    	case 6:
						    	{
									if(PlayerDroga[playerid][CocaE] >= qnt)
									{
									    PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina exelente no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina exelente.");
								}
						    	//======================================================================
						    	case 7:
								{
									if(PlayerDroga[playerid][CrackR] >= qnt)
									{
									    PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack ruim no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack ruim.");
								}
						    	case 8:
								{
									if(PlayerDroga[playerid][CrackB] >= qnt)
									{
									    PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack bom no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack bom.");
								}
						    	case 9:
						    	{
									if(PlayerDroga[playerid][CrackE] >= qnt)
									{
									    PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack exelente no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack exelente.");
								}
						    	//======================================================================
						    	case 10:
								{
									if(PlayerDroga[playerid][LSDR] >= qnt)
									{
									    PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD ruim no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD ruim.");
								}
						    	case 11:
								{
									if(PlayerDroga[playerid][LSDB] >= qnt)
									{
									    PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD bom no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD bom.");
								}
						    	case 12:
								{
									if(PlayerDroga[playerid][LSDE] >= qnt)
									{
									    PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD exelente no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD exelente.");
								}
						    	//======================================================================
						    	case 13:
								{
									if(PlayerDroga[playerid][MetR] >= qnt)
									{
									    PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina ruim no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina ruim.");
								}
						    	case 14:
								{
									if(PlayerDroga[playerid][MetB] >= qnt)
									{
									    PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina boa no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina boa.");
								}
						    	case 15:
								{
									if(PlayerDroga[playerid][MetE] >= qnt)
									{
									    PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina exelente no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina exelente.");
								}
								//======================================================================
								case 16:
								{
									if(PlayerDroga[playerid][Sementes] >= qnt)
									{
									    PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %d sementes no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Sementes.");
								}
								case 17:
								{
									if(PlayerDroga[playerid][LancaPer] >= qnt)
									{
									    PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dml de lança perfume no Slot 3.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Lança Perfume.");
								}
							}

							VehicleInfo[slot][vSlotTipo3] = 6;
						    VehicleInfo[slot][vSlot3] = drogaid;
						    VehicleInfo[slot][vAmmo3] = qnt;

							SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);
						    SaveVehicle(slot);
						   	SaveDrogas(playerid);

						    new strl[126];
							format(strl, sizeof(strl), "[%s] %s.", PlayerName(playerid,0), drug_name);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 4)
					{
						if(VehicleInfo[slot][vSlot4] == 0)
						{
						    new drug_name[128];
						    switch(drogaid)
						    {
							    case 1:
								{
									if(PlayerDroga[playerid][MaconhaR] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha ruim no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha ruim.");
								}
						    	case 2:
						    	{
									if(PlayerDroga[playerid][MaconhaB] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha boa no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha boa.");
								}
						    	case 3:
						    	{
									if(PlayerDroga[playerid][MaconhaE] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha exelente no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha exelente.");
								}
						    	//======================================================================
						    	case 4:
						    	{
									if(PlayerDroga[playerid][CocaR] >= qnt)
									{
									    PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de Cocaína Ruim no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Cocaína Ruim.");
								}
						    	case 5:
						    	{
									if(PlayerDroga[playerid][CocaB] >= qnt)
									{
									    PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina boa no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina boa.");
								}
						    	case 6:
						    	{
									if(PlayerDroga[playerid][CocaE] >= qnt)
									{
									    PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina exelente no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina exelente.");
								}
						    	//======================================================================
						    	case 7:
								{
									if(PlayerDroga[playerid][CrackR] >= qnt)
									{
									    PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack ruim no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack ruim.");
								}
						    	case 8:
								{
									if(PlayerDroga[playerid][CrackB] >= qnt)
									{
									    PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack bom no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack bom.");
								}
						    	case 9:
						    	{
									if(PlayerDroga[playerid][CrackE] >= qnt)
									{
									    PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack exelente no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack exelente.");
								}
						    	//======================================================================
						    	case 10:
								{
									if(PlayerDroga[playerid][LSDR] >= qnt)
									{
									    PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD ruim no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD ruim.");
								}
						    	case 11:
								{
									if(PlayerDroga[playerid][LSDB] >= qnt)
									{
									    PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD bom no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD bom.");
								}
						    	case 12:
								{
									if(PlayerDroga[playerid][LSDE] >= qnt)
									{
									    PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD exelente no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD exelente.");
								}
						    	//======================================================================
						    	case 13:
								{
									if(PlayerDroga[playerid][MetR] >= qnt)
									{
									    PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina ruim no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina ruim.");
								}
						    	case 14:
								{
									if(PlayerDroga[playerid][MetB] >= qnt)
									{
									    PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina boa no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina boa.");
								}
						    	case 15:
								{
									if(PlayerDroga[playerid][MetE] >= qnt)
									{
									    PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina exelente no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina exelente.");
								}
								//======================================================================
								case 16:
								{
									if(PlayerDroga[playerid][Sementes] >= qnt)
									{
									    PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %d sementes no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Sementes.");
								}
								case 17:
								{
									if(PlayerDroga[playerid][LancaPer] >= qnt)
									{
									    PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dml de lança perfume no Slot 4.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Lança Perfume.");
								}
							}

							VehicleInfo[slot][vSlotTipo4] = 6;
						    VehicleInfo[slot][vSlot4] = drogaid;
						    VehicleInfo[slot][vAmmo4] = qnt;

							SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);
						    SaveVehicle(slot);
						    SaveDrogas(playerid);

						    new strl[126];
							format(strl, sizeof(strl), "[%s] %s.", PlayerName(playerid,0), drug_name);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 5)
					{
						if(VehicleInfo[slot][vSlot5] == 0)
						{
						    new drug_name[128];
						    switch(drogaid)
						    {
							    case 1:
								{
									if(PlayerDroga[playerid][MaconhaR] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha ruim no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha ruim.");
								}
						    	case 2:
						    	{
									if(PlayerDroga[playerid][MaconhaB] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha boa no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha boa.");
								}
						    	case 3:
						    	{
									if(PlayerDroga[playerid][MaconhaE] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha exelente no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha exelente.");
								}
						    	//======================================================================
						    	case 4:
						    	{
									if(PlayerDroga[playerid][CocaR] >= qnt)
									{
									    PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de Cocaína Ruim no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Cocaína Ruim.");
								}
						    	case 5:
						    	{
									if(PlayerDroga[playerid][CocaB] >= qnt)
									{
									    PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina boa no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina boa.");
								}
						    	case 6:
						    	{
									if(PlayerDroga[playerid][CocaE] >= qnt)
									{
									    PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina exelente no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina exelente.");
								}
						    	//======================================================================
						    	case 7:
								{
									if(PlayerDroga[playerid][CrackR] >= qnt)
									{
									    PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack ruim no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack ruim.");
								}
						    	case 8:
								{
									if(PlayerDroga[playerid][CrackB] >= qnt)
									{
									    PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack bom no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack bom.");
								}
						    	case 9:
						    	{
									if(PlayerDroga[playerid][CrackE] >= qnt)
									{
									    PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack exelente no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack exelente.");
								}
						    	//======================================================================
						    	case 10:
								{
									if(PlayerDroga[playerid][LSDR] >= qnt)
									{
									    PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD ruim no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD ruim.");
								}
						    	case 11:
								{
									if(PlayerDroga[playerid][LSDB] >= qnt)
									{
									    PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD bom no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD bom.");
								}
						    	case 12:
								{
									if(PlayerDroga[playerid][LSDE] >= qnt)
									{
									    PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD exelente no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD exelente.");
								}
						    	//======================================================================
						    	case 13:
								{
									if(PlayerDroga[playerid][MetR] >= qnt)
									{
									    PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina ruim no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina ruim.");
								}
						    	case 14:
								{
									if(PlayerDroga[playerid][MetB] >= qnt)
									{
									    PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina boa no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina boa.");
								}
						    	case 15:
								{
									if(PlayerDroga[playerid][MetE] >= qnt)
									{
									    PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina exelente no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina exelente.");
								}
								//======================================================================
								case 16:
								{
									if(PlayerDroga[playerid][Sementes] >= qnt)
									{
									    PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %d sementes no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Sementes.");
								}
								case 17:
								{
									if(PlayerDroga[playerid][LancaPer] >= qnt)
									{
									    PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dml de lança perfume no Slot 5.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Lança Perfume.");
								}
							}

							VehicleInfo[slot][vSlotTipo5] = 6;
						    VehicleInfo[slot][vSlot5] = drogaid;
						    VehicleInfo[slot][vAmmo5] = qnt;

							SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);
						    SaveVehicle(slot);

							SaveDrogas(playerid);

						    new strl[126];
							format(strl, sizeof(strl), "[%s] %s.", PlayerName(playerid,0), drug_name);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 6)
					{
						if(VehicleInfo[slot][vSlot6] == 0)
						{
						    new drug_name[128];
						    switch(drogaid)
						    {
							    case 1:
								{
									if(PlayerDroga[playerid][MaconhaR] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha ruim no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha ruim.");
								}
						    	case 2:
						    	{
									if(PlayerDroga[playerid][MaconhaB] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha boa no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha boa.");
								}
						    	case 3:
						    	{
									if(PlayerDroga[playerid][MaconhaE] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha exelente no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha exelente.");
								}
						    	//======================================================================
						    	case 4:
						    	{
									if(PlayerDroga[playerid][CocaR] >= qnt)
									{
									    PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de Cocaína Ruim no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Cocaína Ruim.");
								}
						    	case 5:
						    	{
									if(PlayerDroga[playerid][CocaB] >= qnt)
									{
									    PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina boa no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina boa.");
								}
						    	case 6:
						    	{
									if(PlayerDroga[playerid][CocaE] >= qnt)
									{
									    PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina exelente no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina exelente.");
								}
						    	//======================================================================
						    	case 7:
								{
									if(PlayerDroga[playerid][CrackR] >= qnt)
									{
									    PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack ruim no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack ruim.");
								}
						    	case 8:
								{
									if(PlayerDroga[playerid][CrackB] >= qnt)
									{
									    PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack bom no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack bom.");
								}
						    	case 9:
						    	{
									if(PlayerDroga[playerid][CrackE] >= qnt)
									{
									    PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack exelente no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack exelente.");
								}
						    	//======================================================================
						    	case 10:
								{
									if(PlayerDroga[playerid][LSDR] >= qnt)
									{
									    PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD ruim no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD ruim.");
								}
						    	case 11:
								{
									if(PlayerDroga[playerid][LSDB] >= qnt)
									{
									    PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD bom no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD bom.");
								}
						    	case 12:
								{
									if(PlayerDroga[playerid][LSDE] >= qnt)
									{
									    PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD exelente no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD exelente.");
								}
						    	//======================================================================
						    	case 13:
								{
									if(PlayerDroga[playerid][MetR] >= qnt)
									{
									    PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina ruim no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina ruim.");
								}
						    	case 14:
								{
									if(PlayerDroga[playerid][MetB] >= qnt)
									{
									    PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina boa no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina boa.");
								}
						    	case 15:
								{
									if(PlayerDroga[playerid][MetE] >= qnt)
									{
									    PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina exelente no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina exelente.");
								}
								//======================================================================
								case 16:
								{
									if(PlayerDroga[playerid][Sementes] >= qnt)
									{
									    PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %d sementes no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Sementes.");
								}
								case 17:
								{
									if(PlayerDroga[playerid][LancaPer] >= qnt)
									{
									    PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dml de lança perfume no Slot 6.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Lança Perfume.");
								}
							}

							VehicleInfo[slot][vSlotTipo6] = 6;
						    VehicleInfo[slot][vSlot6] = drogaid;
						    VehicleInfo[slot][vAmmo6] = qnt;

							SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);
						    SaveVehicle(slot);
						    SaveDrogas(playerid);

						    new strl[126];
							format(strl, sizeof(strl), "[%s] %s.", PlayerName(playerid,0), drug_name);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 7)
					{
						if(VehicleInfo[slot][vSlot7] == 0)
						{
						    new drug_name[128];
						    switch(drogaid)
						    {
							    case 1:
								{
									if(PlayerDroga[playerid][MaconhaR] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha ruim no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha ruim.");
								}
						    	case 2:
						    	{
									if(PlayerDroga[playerid][MaconhaB] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha boa no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha boa.");
								}
						    	case 3:
						    	{
									if(PlayerDroga[playerid][MaconhaE] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha exelente no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha exelente.");
								}
						    	//======================================================================
						    	case 4:
						    	{
									if(PlayerDroga[playerid][CocaR] >= qnt)
									{
									    PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de Cocaína Ruim no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Cocaína Ruim.");
								}
						    	case 5:
						    	{
									if(PlayerDroga[playerid][CocaB] >= qnt)
									{
									    PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina boa no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina boa.");
								}
						    	case 6:
						    	{
									if(PlayerDroga[playerid][CocaE] >= qnt)
									{
									    PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina exelente no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina exelente.");
								}
						    	//======================================================================
						    	case 7:
								{
									if(PlayerDroga[playerid][CrackR] >= qnt)
									{
									    PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack ruim no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack ruim.");
								}
						    	case 8:
								{
									if(PlayerDroga[playerid][CrackB] >= qnt)
									{
									    PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack bom no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack bom.");
								}
						    	case 9:
						    	{
									if(PlayerDroga[playerid][CrackE] >= qnt)
									{
									    PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack exelente no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack exelente.");
								}
						    	//======================================================================
						    	case 10:
								{
									if(PlayerDroga[playerid][LSDR] >= qnt)
									{
									    PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD ruim no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD ruim.");
								}
						    	case 11:
								{
									if(PlayerDroga[playerid][LSDB] >= qnt)
									{
									    PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD bom no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD bom.");
								}
						    	case 12:
								{
									if(PlayerDroga[playerid][LSDE] >= qnt)
									{
									    PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD exelente no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD exelente.");
								}
						    	//======================================================================
						    	case 13:
								{
									if(PlayerDroga[playerid][MetR] >= qnt)
									{
									    PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina ruim no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina ruim.");
								}
						    	case 14:
								{
									if(PlayerDroga[playerid][MetB] >= qnt)
									{
									    PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina boa no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina boa.");
								}
						    	case 15:
								{
									if(PlayerDroga[playerid][MetE] >= qnt)
									{
									    PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina exelente no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina exelente.");
								}
								//======================================================================
								case 16:
								{
									if(PlayerDroga[playerid][Sementes] >= qnt)
									{
									    PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %d sementes no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Sementes.");
								}
								case 17:
								{
									if(PlayerDroga[playerid][LancaPer] >= qnt)
									{
									    PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dml de lança perfume no Slot 7.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Lança Perfume.");
								}
							}

							VehicleInfo[slot][vSlotTipo7] = 6;
						    VehicleInfo[slot][vSlot7] = drogaid;
						    VehicleInfo[slot][vAmmo7] = qnt;

							SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);
						    SaveVehicle(slot);
						    SaveDrogas(playerid);

						    new strl[126];
							format(strl, sizeof(strl), "[%s] %s.", PlayerName(playerid,0), drug_name);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 8)
					{
						if(VehicleInfo[slot][vSlot8] == 0)
						{
						    new drug_name[128];
						    switch(drogaid)
						    {
							    case 1:
								{
									if(PlayerDroga[playerid][MaconhaR] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha ruim no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha ruim.");
								}
						    	case 2:
						    	{
									if(PlayerDroga[playerid][MaconhaB] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha boa no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha boa.");
								}
						    	case 3:
						    	{
									if(PlayerDroga[playerid][MaconhaE] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha exelente no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha exelente.");
								}
						    	//======================================================================
						    	case 4:
						    	{
									if(PlayerDroga[playerid][CocaR] >= qnt)
									{
									    PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de Cocaína Ruim no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Cocaína Ruim.");
								}
						    	case 5:
						    	{
									if(PlayerDroga[playerid][CocaB] >= qnt)
									{
									    PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina boa no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina boa.");
								}
						    	case 6:
						    	{
									if(PlayerDroga[playerid][CocaE] >= qnt)
									{
									    PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina exelente no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina exelente.");
								}
						    	//======================================================================
						    	case 7:
								{
									if(PlayerDroga[playerid][CrackR] >= qnt)
									{
									    PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack ruim no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack ruim.");
								}
						    	case 8:
								{
									if(PlayerDroga[playerid][CrackB] >= qnt)
									{
									    PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack bom no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack bom.");
								}
						    	case 9:
						    	{
									if(PlayerDroga[playerid][CrackE] >= qnt)
									{
									    PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack exelente no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack exelente.");
								}
						    	//======================================================================
						    	case 10:
								{
									if(PlayerDroga[playerid][LSDR] >= qnt)
									{
									    PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD ruim no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD ruim.");
								}
						    	case 11:
								{
									if(PlayerDroga[playerid][LSDB] >= qnt)
									{
									    PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD bom no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD bom.");
								}
						    	case 12:
								{
									if(PlayerDroga[playerid][LSDE] >= qnt)
									{
									    PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD exelente no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD exelente.");
								}
						    	//======================================================================
						    	case 13:
								{
									if(PlayerDroga[playerid][MetR] >= qnt)
									{
									    PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina ruim no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina ruim.");
								}
						    	case 14:
								{
									if(PlayerDroga[playerid][MetB] >= qnt)
									{
									    PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina boa no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina boa.");
								}
						    	case 15:
								{
									if(PlayerDroga[playerid][MetE] >= qnt)
									{
									    PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina exelente no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina exelente.");
								}
								//======================================================================
								case 16:
								{
									if(PlayerDroga[playerid][Sementes] >= qnt)
									{
									    PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %d sementes no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Sementes.");
								}
								case 17:
								{
									if(PlayerDroga[playerid][LancaPer] >= qnt)
									{
									    PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dml de lança perfume no Slot 8.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Lança Perfume.");
								}
							}

							VehicleInfo[slot][vSlotTipo8] = 6;
						    VehicleInfo[slot][vSlot8] = drogaid;
						    VehicleInfo[slot][vAmmo8] = qnt;

							SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);
						    SaveVehicle(slot);
						    SaveDrogas(playerid);

						    new strl[126];
							format(strl, sizeof(strl), "[%s] %s.", PlayerName(playerid,0), drug_name);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 9)
					{
						if(VehicleInfo[slot][vSlot9] == 0)
						{
						    new drug_name[128];
						    switch(drogaid)
						    {
							    case 1:
								{
									if(PlayerDroga[playerid][MaconhaR] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha ruim no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha ruim.");
								}
						    	case 2:
						    	{
									if(PlayerDroga[playerid][MaconhaB] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha boa no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha boa.");
								}
						    	case 3:
						    	{
									if(PlayerDroga[playerid][MaconhaE] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha exelente no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha exelente.");
								}
						    	//======================================================================
						    	case 4:
						    	{
									if(PlayerDroga[playerid][CocaR] >= qnt)
									{
									    PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de Cocaína Ruim no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Cocaína Ruim.");
								}
						    	case 5:
						    	{
									if(PlayerDroga[playerid][CocaB] >= qnt)
									{
									    PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina boa no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina boa.");
								}
						    	case 6:
						    	{
									if(PlayerDroga[playerid][CocaE] >= qnt)
									{
									    PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina exelente no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina exelente.");
								}
						    	//======================================================================
						    	case 7:
								{
									if(PlayerDroga[playerid][CrackR] >= qnt)
									{
									    PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack ruim no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack ruim.");
								}
						    	case 8:
								{
									if(PlayerDroga[playerid][CrackB] >= qnt)
									{
									    PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack bom no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack bom.");
								}
						    	case 9:
						    	{
									if(PlayerDroga[playerid][CrackE] >= qnt)
									{
									    PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack exelente no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack exelente.");
								}
						    	//======================================================================
						    	case 10:
								{
									if(PlayerDroga[playerid][LSDR] >= qnt)
									{
									    PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD ruim no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD ruim.");
								}
						    	case 11:
								{
									if(PlayerDroga[playerid][LSDB] >= qnt)
									{
									    PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD bom no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD bom.");
								}
						    	case 12:
								{
									if(PlayerDroga[playerid][LSDE] >= qnt)
									{
									    PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD exelente no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD exelente.");
								}
						    	//======================================================================
						    	case 13:
								{
									if(PlayerDroga[playerid][MetR] >= qnt)
									{
									    PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina ruim no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina ruim.");
								}
						    	case 14:
								{
									if(PlayerDroga[playerid][MetB] >= qnt)
									{
									    PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina boa no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina boa.");
								}
						    	case 15:
								{
									if(PlayerDroga[playerid][MetE] >= qnt)
									{
									    PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina exelente no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina exelente.");
								}
								//======================================================================
								case 16:
								{
									if(PlayerDroga[playerid][Sementes] >= qnt)
									{
									    PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %d sementes no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Sementes.");
								}
								case 17:
								{
									if(PlayerDroga[playerid][LancaPer] >= qnt)
									{
									    PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dml de lança perfume no Slot 9.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Lança Perfume.");
								}
							}

							VehicleInfo[slot][vSlotTipo9] = 6;
						    VehicleInfo[slot][vSlot9] = drogaid;
						    VehicleInfo[slot][vAmmo9] = qnt;

							SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);
						    SaveVehicle(slot);
						    SaveDrogas(playerid);

						    new strl[126];
							format(strl, sizeof(strl), "[%s] %s.", PlayerName(playerid,0), drug_name);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
					if(slote == 10)
					{
						if(VehicleInfo[slot][vSlot10] == 0)
						{
						    new drug_name[128];
						    switch(drogaid)
						    {
							    case 1:
								{
									if(PlayerDroga[playerid][MaconhaR] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha ruim no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha ruim.");
								}
						    	case 2:
						    	{
									if(PlayerDroga[playerid][MaconhaB] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha boa no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha boa.");
								}
						    	case 3:
						    	{
									if(PlayerDroga[playerid][MaconhaE] >= qnt)
									{
									    PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de maconha exelente no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de maconha exelente.");
								}
						    	//======================================================================
						    	case 4:
						    	{
									if(PlayerDroga[playerid][CocaR] >= qnt)
									{
									    PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de Cocaína Ruim no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Cocaína Ruim.");
								}
						    	case 5:
						    	{
									if(PlayerDroga[playerid][CocaB] >= qnt)
									{
									    PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina boa no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina boa.");
								}
						    	case 6:
						    	{
									if(PlayerDroga[playerid][CocaE] >= qnt)
									{
									    PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de cocaina exelente no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de cocaina exelente.");
								}
						    	//======================================================================
						    	case 7:
								{
									if(PlayerDroga[playerid][CrackR] >= qnt)
									{
									    PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack ruim no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack ruim.");
								}
						    	case 8:
								{
									if(PlayerDroga[playerid][CrackB] >= qnt)
									{
									    PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack bom no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack bom.");
								}
						    	case 9:
						    	{
									if(PlayerDroga[playerid][CrackE] >= qnt)
									{
									    PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de crack exelente no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de crack exelente.");
								}
						    	//======================================================================
						    	case 10:
								{
									if(PlayerDroga[playerid][LSDR] >= qnt)
									{
									    PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD ruim no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD ruim.");
								}
						    	case 11:
								{
									if(PlayerDroga[playerid][LSDB] >= qnt)
									{
									    PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD bom no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD bom.");
								}
						    	case 12:
								{
									if(PlayerDroga[playerid][LSDE] >= qnt)
									{
									    PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de LSD exelente no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de LSD exelente.");
								}
						    	//======================================================================
						    	case 13:
								{
									if(PlayerDroga[playerid][MetR] >= qnt)
									{
									    PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina ruim no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina ruim.");
								}
						    	case 14:
								{
									if(PlayerDroga[playerid][MetB] >= qnt)
									{
									    PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina boa no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina boa.");
								}
						    	case 15:
								{
									if(PlayerDroga[playerid][MetE] >= qnt)
									{
									    PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dg de metanfetamina exelente no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Metanfetamina exelente.");
								}
								//======================================================================
								case 16:
								{
									if(PlayerDroga[playerid][Sementes] >= qnt)
									{
									    PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %d sementes no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Sementes.");
								}
								case 17:
								{
									if(PlayerDroga[playerid][LancaPer] >= qnt)
									{
									    PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]-qnt;
									    format(drug_name, 128, "[Porta-Malas] Você guardou %dml de lança perfume no Slot 10.", qnt);
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de Lança Perfume.");
								}
							}

							VehicleInfo[slot][vSlotTipo10] = 6;
						    VehicleInfo[slot][vSlot10] = drogaid;
						    VehicleInfo[slot][vAmmo10] = qnt;

							SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);
						    SaveVehicle(slot);
						    SaveDrogas(playerid);

						    new strl[126];
							format(strl, sizeof(strl), "[%s] %s.", PlayerName(playerid,0), drug_name);
							Colocar_PortaMalas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta malas.");
					}
				}
				//
			}
          	else return SendClientMessage(playerid, COLOR_WHITE,"{FF6347}O portamalas do veículo está fechado.");
		}
		if(strcmp(tmp2,"retirar",true) == 0 || strcmp(tmp2,"pegar",true) == 0 || strcmp(tmp2,"pe",true) == 0)
		{
		    if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");
		    if(FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_EB)
  			{
				if(PlayerInfo[playerid][pEmServico] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando na viatura estando fora de serviço.");
     			if(PlayerInfo[playerid][pFac] != VehicleInfo[slot][vFaction]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso ao portamalas deste veículo.");
			}
			else
   				if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando na em serviço.");

		    GetVehicleParamsEx(carid, engine, lights, alarm,doors,bonnet,boot,objective);
		    if(boot == 1)
       		{
		    	new tmp4[256];
				tmp4 = strtok(params,idx);
				if(!strlen(tmp4))
				{
					SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas retirar [slot 1-10]");
					return 1;
				}
				new slote = strval(tmp4);
				if( slote < 1 || slote > 10) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portamalas retirar [slot 1-10]");
				if(slote == 1)
				{
					if(VehicleInfo[slot][vSlot1] != 0)
					{
					    if(VehicleInfo[slot][vSlotTipo1] == 1)
					    {
					        if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
						    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
                            PlayerInfo[playerid][pArmaMao] = VehicleInfo[slot][vSlot1];
                            new armaid = VehicleInfo[slot][vSlot1];
							new ArmaModel = ArmaData[VehicleInfo[slot][vSlot1]][ArmaModelo];
						    GivePlayerWeapon(playerid,ArmaModel, VehicleInfo[slot][vAmmo1]);
							ArmaData[armaid][ArmaCom] = PlayerInfo[playerid][pID];

							if(ArmaData[armaid][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot1]][ArmaRGB]);
							else SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot1]][ArmaRGB]);
   							FloodCMD[playerid] = gettime()+2;

   							if(IsValidDynamicObject(VehicleInfo[slot][vObj1])) DestroyDynamicObject(VehicleInfo[slot][vObj1]);

							format(_string, 128, "[Porta-Malas] Você retirou a sua %s com %d balas no Slot 1.", GunNames[ArmaModel], VehicleInfo[slot][vAmmo1]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

							new strl[126];
							format(strl, sizeof(strl), "%s retirou a sua %s com %d balas no Slot 1. [ %d ]", PlayerName(playerid,0), GunNames[ArmaModel], VehicleInfo[slot][vAmmo1], ArmaData[armaid][ArmaNumeracao]);
							Retirar_PortaMalas(strl);

							VehicleInfo[slot][vSlotTipo1] = 0;
							VehicleInfo[slot][vSlot1] = 0;
							VehicleInfo[slot][vAmmo1] = 0;
							SaveVehicle(slot);
						 	SalvarArma(armaid);
						}
						if(VehicleInfo[slot][vSlotTipo1] == 2)
		    	    	{
		    	    	    PlayerInfo[playerid][pMun9mm] += VehicleInfo[slot][vAmmo1];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 9mm do Slot 1.", VehicleInfo[slot][vAmmo1]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo1] = 0;
							VehicleInfo[slot][vSlot1] = 0;
							VehicleInfo[slot][vAmmo1] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo1] == 3)
		    	    	{
	    					PlayerInfo[playerid][pMun556] += VehicleInfo[slot][vAmmo1];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 5.56mm do Slot 1.", VehicleInfo[slot][vAmmo1]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo1] = 0;
							VehicleInfo[slot][vSlot1] = 0;
							VehicleInfo[slot][vAmmo1] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo1] == 4)
		    	    	{
	    					PlayerInfo[playerid][pMunCart] += VehicleInfo[slot][vAmmo1];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d cartuchos do Slot 1.", VehicleInfo[slot][vAmmo1]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo1] = 0;
							VehicleInfo[slot][vSlot1] = 0;
							VehicleInfo[slot][vAmmo1] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo1] == 5)
		    	    	{
	    					PlayerInfo[playerid][pMun127] += VehicleInfo[slot][vAmmo1];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 12.7x106mm do Slot 1.", VehicleInfo[slot][vAmmo1]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo1] = 0;
							VehicleInfo[slot][vSlot1] = 0;
							VehicleInfo[slot][vAmmo1] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo1] == 6)
		    	    	{
							new drug_name[128];
							new qnt = VehicleInfo[slot][vAmmo1];

						    switch(VehicleInfo[slot][vSlot1])
						    {
							    case 1:
								{
				    				PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha ruim no Slot 1.", qnt);
								}
						    	case 2:
						    	{
								   	PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]+qnt;
							    	format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha boa no Slot 1.", qnt);
								}
						    	case 3:
						    	{
									PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]+qnt;
									format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha exelente no Slot 1.", qnt);
								}
						    	//======================================================================
						    	case 4:
						    	{
									PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de Cocaína Ruim no Slot 1.", qnt);
								}
						    	case 5:
						    	{
									PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina boa no Slot 1.", qnt);
								}
						    	case 6:
						    	{
									PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina exelente no Slot 1.", qnt);
								}
						    	//======================================================================
						    	case 7:
								{
									PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack ruim no Slot 1.", qnt);
								}
						    	case 8:
								{
									PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack bom no Slot 1.", qnt);
								}
						    	case 9:
						    	{
									PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack exelente no slot 1.", qnt);
								}
						    	//======================================================================
						    	case 10:
								{
									PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]+qnt;
							   		format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD ruim no slot 1.", qnt);
								}
						    	case 11:
								{
									PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD bom no slot 1.", qnt);
								}
						    	case 12:
								{
									PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD exelente no slot 1.", qnt);
								}
						    	//======================================================================
						    	case 13:
								{
									PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina ruim no slot 1.", qnt);
								}
						    	case 14:
								{
									PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina boa no slot 1.", qnt);
								}
						    	case 15:
								{
									PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina exelente no slot 1.", qnt);
								}
								//======================================================================
								case 16:
								{
									PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %d sementes no slot 1.", qnt);
								}
								case 17:
								{
									PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dml de Lança Perfume no slot 1.", qnt);
								}
							}
                            SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);

							VehicleInfo[slot][vSlotTipo1] = 0;
							VehicleInfo[slot][vSlot1] = 0;
							VehicleInfo[slot][vAmmo1] = 0;
						    SaveVehicle(slot);
						    SaveDrogas(playerid);
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada neste slot do porta malas.");
				}
				if(slote == 2)
				{
					if(VehicleInfo[slot][vSlot2] != 0)
					{
	    				if(VehicleInfo[slot][vSlotTipo2] == 1)
					    {
					        if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
					    	if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
          					PlayerInfo[playerid][pArmaMao] = VehicleInfo[slot][vSlot2];
               				new armaid = VehicleInfo[slot][vSlot2];
							new ArmaModel = ArmaData[VehicleInfo[slot][vSlot2]][ArmaModelo];
			    			GivePlayerWeapon(playerid,ArmaModel,VehicleInfo[slot][vAmmo2]);
							ArmaData[armaid][ArmaCom] = PlayerInfo[playerid][pID];

						    if(ArmaData[armaid][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot2]][ArmaRGB]);
						    else SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot2]][ArmaRGB]);
   							FloodCMD[playerid] = gettime()+2;

   							if(IsValidDynamicObject(VehicleInfo[slot][vObj2])) DestroyDynamicObject(VehicleInfo[slot][vObj2]);

							format(_string, 128, "[Porta-Malas] Você retirou a sua %s com %d balas no slot 2.", GunNames[ArmaModel], VehicleInfo[slot][vAmmo2]);
				   			SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

				   			new strl[126];
							format(strl, sizeof(strl), "%s retirou a sua %s com %d balas no slot 2. [ %d ]", PlayerName(playerid,0), GunNames[ArmaModel], VehicleInfo[slot][vAmmo2], ArmaData[armaid][ArmaNumeracao]);
							Retirar_PortaMalas(strl);

							VehicleInfo[slot][vSlotTipo2] = 0;
						    VehicleInfo[slot][vSlot2] = 0;
						    VehicleInfo[slot][vAmmo2] = 0;
						    SaveVehicle(slot);
						    SalvarArma(armaid);
						}
                        if(VehicleInfo[slot][vSlotTipo2] == 2)
		    	    	{
		    	    	    PlayerInfo[playerid][pMun9mm] += VehicleInfo[slot][vAmmo2];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 9mm do slot 2.", VehicleInfo[slot][vAmmo2]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo2] = 0;
							VehicleInfo[slot][vSlot2] = 0;
							VehicleInfo[slot][vAmmo2] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo2] == 3)
		    	    	{
	    					PlayerInfo[playerid][pMun556] += VehicleInfo[slot][vAmmo2];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 5.56mm do slot 2.", VehicleInfo[slot][vAmmo2]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo2] = 0;
							VehicleInfo[slot][vSlot2] = 0;
							VehicleInfo[slot][vAmmo2] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo2] == 4)
		    	    	{
	    					PlayerInfo[playerid][pMunCart] += VehicleInfo[slot][vAmmo2];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d cartuchos do slot 2.", VehicleInfo[slot][vAmmo2]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo2] = 0;
							VehicleInfo[slot][vSlot2] = 0;
							VehicleInfo[slot][vAmmo2] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo2] == 5)
		    	    	{
	    					PlayerInfo[playerid][pMun127] += VehicleInfo[slot][vAmmo2];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 12.7x106mm do slot 2.", VehicleInfo[slot][vAmmo2]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo2] = 0;
							VehicleInfo[slot][vSlot2] = 0;
							VehicleInfo[slot][vAmmo2] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo2] == 6)
		    	    	{
							new drug_name[128];
							new qnt = VehicleInfo[slot][vAmmo2];
						    switch(VehicleInfo[slot][vSlot2])
						    {
							    case 1:
								{
				    				PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha ruim no slot 2.", qnt);
								}
						    	case 2:
						    	{
								   	PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]+qnt;
							    	format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha boa no slot 2.", qnt);
								}
						    	case 3:
						    	{
									PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]+qnt;
									format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha exelente no slot 2.", qnt);
								}
						    	//======================================================================
						    	case 4:
						    	{
									PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de Cocaína Ruim no slot 2.", qnt);
								}
						    	case 5:
						    	{
									PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina boa no slot 2.", qnt);
								}
						    	case 6:
						    	{
									PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina exelente no slot 2.", qnt);
								}
						    	//======================================================================
						    	case 7:
								{
									PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack ruim no slot 2.", qnt);
								}
						    	case 8:
								{
									PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack bom no slot 2.", qnt);
								}
						    	case 9:
						    	{
									PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack exelente no slot 2.", qnt);
								}
						    	//======================================================================
						    	case 10:
								{
									PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]+qnt;
							   		format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD ruim no slot 2.", qnt);
								}
						    	case 11:
								{
									PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD bom no slot 2.", qnt);
								}
						    	case 12:
								{
									PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD exelente no slot 2.", qnt);
								}
						    	//======================================================================
						    	case 13:
								{
									PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina ruim no slot 2.", qnt);
								}
						    	case 14:
								{
									PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina boa no slot 2.", qnt);
								}
						    	case 15:
								{
									PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina exelente no slot 2.", qnt);
								}
								//======================================================================
								case 16:
								{
									PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %d sementes no slot 2.", qnt);
								}
								case 17:
								{
									PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dml de Lança Perfume no slot 2.", qnt);
								}							
							}
                            SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);

							VehicleInfo[slot][vSlotTipo2] = 0;
							VehicleInfo[slot][vSlot2] = 0;
							VehicleInfo[slot][vAmmo2] = 0;
						    SaveVehicle(slot);
						    SaveDrogas(playerid);
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada neste slot do porta malas.");
				}
				if(slote == 3)
				{
					if(VehicleInfo[slot][vSlot3] != 0)
					{
					    if(VehicleInfo[slot][vSlotTipo3] == 1)
					    {
					        if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
						    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
                           	PlayerInfo[playerid][pArmaMao] = VehicleInfo[slot][vSlot3];
                           	new armaid = VehicleInfo[slot][vSlot3];
							new ArmaModel = ArmaData[VehicleInfo[slot][vSlot3]][ArmaModelo];
						    GivePlayerWeapon(playerid,ArmaModel,VehicleInfo[slot][vAmmo3]);
							ArmaData[armaid][ArmaCom] = PlayerInfo[playerid][pID];
							if(ArmaData[armaid][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot3]][ArmaRGB]);
							else SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot3]][ArmaRGB]);
   							FloodCMD[playerid] = gettime()+2;

   							if(IsValidDynamicObject(VehicleInfo[slot][vObj3])) DestroyDynamicObject(VehicleInfo[slot][vObj3]);

							format(_string, 128, "[Porta-Malas] Você retirou a sua %s com %d balas no Slot 3.", GunNames[ArmaModel], VehicleInfo[slot][vAmmo3]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

							new strl[126];
							format(strl, sizeof(strl), "%s retirou a sua %s com %d balas no Slot 3. [ %d ]", PlayerName(playerid,0), GunNames[ArmaModel], VehicleInfo[slot][vAmmo3], ArmaData[armaid][ArmaNumeracao]);
							Retirar_PortaMalas(strl);

							VehicleInfo[slot][vSlotTipo3] = 0;
							VehicleInfo[slot][vSlot3] = 0;
							VehicleInfo[slot][vAmmo3] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo3] == 2)
		    	    	{
		    	    	    PlayerInfo[playerid][pMun9mm] += VehicleInfo[slot][vAmmo3];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 9mm do Slot 3.", VehicleInfo[slot][vAmmo3]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo3] = 0;
							VehicleInfo[slot][vSlot3] = 0;
							VehicleInfo[slot][vAmmo3] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo3] == 3)
		    	    	{
	    					PlayerInfo[playerid][pMun556] += VehicleInfo[slot][vAmmo3];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 5.56mm do Slot 3.", VehicleInfo[slot][vAmmo3]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo3] = 0;
							VehicleInfo[slot][vSlot3] = 0;
							VehicleInfo[slot][vAmmo3] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo3] == 4)
		    	    	{
	    					PlayerInfo[playerid][pMunCart] += VehicleInfo[slot][vAmmo3];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d cartuchos do Slot 3.", VehicleInfo[slot][vAmmo3]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo3] = 0;
							VehicleInfo[slot][vSlot3] = 0;
							VehicleInfo[slot][vAmmo3] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo3] == 5)
		    	    	{
	    					PlayerInfo[playerid][pMun127] += VehicleInfo[slot][vAmmo3];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 12.7x106mm do Slot 3.", VehicleInfo[slot][vAmmo3]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo3] = 0;
							VehicleInfo[slot][vSlot3] = 0;
							VehicleInfo[slot][vAmmo3] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo3] == 6)
		    	    	{
							new drug_name[128];
							new qnt = VehicleInfo[slot][vAmmo3];
						    switch(VehicleInfo[slot][vSlot3])
						    {
							    case 1:
								{
				    				PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha ruim no Slot 3.", qnt);
								}
						    	case 2:
						    	{
								   	PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]+qnt;
							    	format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha boa no Slot 3.", qnt);
								}
						    	case 3:
						    	{
									PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]+qnt;
									format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha exelente no Slot 3.", qnt);
								}
						    	//======================================================================
						    	case 4:
						    	{
									PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de Cocaína Ruim no Slot 3.", qnt);
								}
						    	case 5:
						    	{
									PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina boa no Slot 3.", qnt);
								}
						    	case 6:
						    	{
									PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina exelente no Slot 3.", qnt);
								}
						    	//======================================================================
						    	case 7:
								{
									PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack ruim no Slot 3.", qnt);
								}
						    	case 8:
								{
									PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack bom no Slot 3.", qnt);
								}
						    	case 9:
						    	{
									PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack exelente no Slot 3.", qnt);
								}
						    	//======================================================================
						    	case 10:
								{
									PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]+qnt;
							   		format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD ruim no Slot 3.", qnt);
								}
						    	case 11:
								{
									PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD bom no Slot 3.", qnt);
								}
						    	case 12:
								{
									PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD exelente no Slot 3.", qnt);
								}
						    	//======================================================================
						    	case 13:
								{
									PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina ruim no Slot 3.", qnt);
								}
						    	case 14:
								{
									PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina boa no Slot 3.", qnt);
								}
						    	case 15:
								{
									PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina exelente no Slot 3.", qnt);
								}
								//======================================================================
								case 16:
								{
									PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %d sementes no Slot 3.", qnt);
								}
								case 17:
								{
									PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dml de Lança Perfume no slot 3.", qnt);
								}
							}
                            SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);

							VehicleInfo[slot][vSlotTipo3] = 0;
							VehicleInfo[slot][vSlot3] = 0;
							VehicleInfo[slot][vAmmo3] = 0;
						    SaveVehicle(slot);
						    SaveDrogas(playerid);
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada neste slot do porta malas.");
				}
				if(slote == 4)
				{
					if(VehicleInfo[slot][vSlot4] != 0)
					{
	    				if(VehicleInfo[slot][vSlotTipo4] == 1)
					    {
					        if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
					    	if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
          					PlayerInfo[playerid][pArmaMao] = VehicleInfo[slot][vSlot4];
          					new armaid = VehicleInfo[slot][vSlot4];
							new ArmaModel = ArmaData[VehicleInfo[slot][vSlot4]][ArmaModelo];
						    GivePlayerWeapon(playerid,ArmaModel,VehicleInfo[slot][vAmmo4]);
							ArmaData[armaid][ArmaCom] = PlayerInfo[playerid][pID];
							FloodCMD[playerid] = gettime()+2;

							if(IsValidDynamicObject(VehicleInfo[slot][vObj4])) DestroyDynamicObject(VehicleInfo[slot][vObj4]);

          					if(ArmaData[armaid][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot4]][ArmaRGB]);
						    else SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot4]][ArmaRGB]);

						    format(_string, 128, "[Porta-Malas] Você retirou a sua %s com %d balas no Slot 4.", GunNames[ArmaModel], VehicleInfo[slot][vAmmo4]);
						    SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

						    new strl[126];
							format(strl, sizeof(strl), "%s retirou a sua %s com %d balas no Slot 4. [ %d ]", PlayerName(playerid,0), GunNames[ArmaModel], VehicleInfo[slot][vAmmo4], ArmaData[armaid][ArmaNumeracao]);
							Retirar_PortaMalas(strl);

						    VehicleInfo[slot][vSlotTipo4] = 0;
						    VehicleInfo[slot][vSlot4] = 0;
						    VehicleInfo[slot][vAmmo4] = 0;
						    SaveVehicle(slot);
						    SalvarArma(armaid);

						}
						if(VehicleInfo[slot][vSlotTipo4] == 2)
		    	    	{
		    	    	    PlayerInfo[playerid][pMun9mm] += VehicleInfo[slot][vAmmo4];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 9mm do Slot 4.", VehicleInfo[slot][vAmmo4]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo4] = 0;
							VehicleInfo[slot][vSlot4] = 0;
							VehicleInfo[slot][vAmmo4] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo4] == 3)
		    	    	{
	    					PlayerInfo[playerid][pMun556] += VehicleInfo[slot][vAmmo4];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 5.56mm do Slot 4.", VehicleInfo[slot][vAmmo4]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo4] = 0;
							VehicleInfo[slot][vSlot4] = 0;
							VehicleInfo[slot][vAmmo4] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo4] == 4)
		    	    	{
	    					PlayerInfo[playerid][pMunCart] += VehicleInfo[slot][vAmmo4];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d cartuchos do Slot 4.", VehicleInfo[slot][vAmmo4]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo4] = 0;
							VehicleInfo[slot][vSlot4] = 0;
							VehicleInfo[slot][vAmmo4] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo4] == 5)
		    	    	{
	    					PlayerInfo[playerid][pMun127] += VehicleInfo[slot][vAmmo4];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 12.7x106mm do Slot 4.", VehicleInfo[slot][vAmmo4]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo4] = 0;
							VehicleInfo[slot][vSlot4] = 0;
							VehicleInfo[slot][vAmmo4] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo4] == 6)
		    	    	{
							new drug_name[128];
							new qnt = VehicleInfo[slot][vAmmo4];
						    switch(VehicleInfo[slot][vSlot4])
						    {
							    case 1:
								{
				    				PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha ruim no Slot 4.", qnt);
								}
						    	case 2:
						    	{
								   	PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]+qnt;
							    	format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha boa no Slot 4.", qnt);
								}
						    	case 3:
						    	{
									PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]+qnt;
									format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha exelente no Slot 4.", qnt);
								}
						    	//======================================================================
						    	case 4:
						    	{
									PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de Cocaína Ruim no Slot 4.", qnt);
								}
						    	case 5:
						    	{
									PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina boa no Slot 4.", qnt);
								}
						    	case 6:
						    	{
									PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina exelente no Slot 4.", qnt);
								}
						    	//======================================================================
						    	case 7:
								{
									PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack ruim no Slot 4.", qnt);
								}
						    	case 8:
								{
									PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack bom no Slot 4.", qnt);
								}
						    	case 9:
						    	{
									PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack exelente no Slot 4.", qnt);
								}
						    	//======================================================================
						    	case 10:
								{
									PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]+qnt;
							   		format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD ruim no Slot 4.", qnt);
								}
						    	case 11:
								{
									PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD bom no Slot 4.", qnt);
								}
						    	case 12:
								{
									PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD exelente no Slot 4.", qnt);
								}
						    	//======================================================================
						    	case 13:
								{
									PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina ruim no Slot 4.", qnt);
								}
						    	case 14:
								{
									PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina boa no Slot 4.", qnt);
								}
						    	case 15:
								{
									PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina exelente no Slot 4.", qnt);
								}
								//======================================================================
								case 16:
								{
									PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %d sementes no Slot 4.", qnt);
								}
								case 17:
								{
									PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dml de Lança Perfume no slot 4.", qnt);
								}
							}
                            SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);

							VehicleInfo[slot][vSlotTipo4] = 0;
							VehicleInfo[slot][vSlot4] = 0;
							VehicleInfo[slot][vAmmo4] = 0;
						    SaveVehicle(slot);
						    SaveDrogas(playerid);
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada neste slot do porta malas.");
				}
				if(slote == 5)
				{
					if(VehicleInfo[slot][vSlot5] != 0)
					{
					    if(VehicleInfo[slot][vSlotTipo5] == 1)
					    {
					        if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
						    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
                         	PlayerInfo[playerid][pArmaMao] = VehicleInfo[slot][vSlot5];
                          	new armaid = VehicleInfo[slot][vSlot5];
							new ArmaModel = ArmaData[VehicleInfo[slot][vSlot5]][ArmaModelo];
						 	GivePlayerWeapon(playerid,ArmaModel,VehicleInfo[slot][vAmmo5]);
							ArmaData[armaid][ArmaCom] = PlayerInfo[playerid][pID];
							FloodCMD[playerid] = gettime()+2;

							if(IsValidDynamicObject(VehicleInfo[slot][vObj5])) DestroyDynamicObject(VehicleInfo[slot][vObj5]);

							if(ArmaData[armaid][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot5]][ArmaRGB]);
							else SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot5]][ArmaRGB]);

							format(_string, 128, "[Porta-Malas] Você retirou a sua %s com %d balas no Slot 5.", GunNames[ArmaModel], VehicleInfo[slot][vAmmo5]);
			    			SendClientMessage(playerid,-1,_string);

			    			new strl[126];
							format(strl, sizeof(strl), "%s retirou a sua %s com %d balas no Slot 5. [ %d ]", PlayerName(playerid,0), GunNames[ArmaModel], VehicleInfo[slot][vAmmo5], ArmaData[armaid][ArmaNumeracao]);
							Retirar_PortaMalas(strl);

							VehicleInfo[slot][vSlotTipo5] = 0;
   							VehicleInfo[slot][vSlot5] = 0;
			    			VehicleInfo[slot][vAmmo5] = 0;
						    SaveVehicle(slot);
						    SalvarArma(armaid);
						}
						if(VehicleInfo[slot][vSlotTipo5] == 2)
		    	    	{
		    	    	    PlayerInfo[playerid][pMun9mm] += VehicleInfo[slot][vAmmo5];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 9mm do Slot 5.", VehicleInfo[slot][vAmmo5]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo5] = 0;
							VehicleInfo[slot][vSlot5] = 0;
							VehicleInfo[slot][vAmmo5] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo5] == 3)
		    	    	{
	    					PlayerInfo[playerid][pMun556] += VehicleInfo[slot][vAmmo5];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 5.56mm do Slot 5.", VehicleInfo[slot][vAmmo5]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo5] = 0;
							VehicleInfo[slot][vSlot5] = 0;
							VehicleInfo[slot][vAmmo5] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo5] == 4)
		    	    	{
	    					PlayerInfo[playerid][pMunCart] += VehicleInfo[slot][vAmmo5];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d cartuchos do Slot 5.", VehicleInfo[slot][vAmmo5]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo5] = 0;
							VehicleInfo[slot][vSlot5] = 0;
							VehicleInfo[slot][vAmmo5] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo5] == 5)
		    	    	{
	    					PlayerInfo[playerid][pMun127] += VehicleInfo[slot][vAmmo5];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 12.7x106mm do Slot 5.", VehicleInfo[slot][vAmmo5]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo5] = 0;
							VehicleInfo[slot][vSlot5] = 0;
							VehicleInfo[slot][vAmmo5] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo5] == 6)
		    	    	{
							new drug_name[128];
							new qnt = VehicleInfo[slot][vAmmo5];
						    switch(VehicleInfo[slot][vSlot5])
						    {
							    case 1:
								{
				    				PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha ruim no Slot 5.", qnt);
								}
						    	case 2:
						    	{
								   	PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]+qnt;
							    	format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha boa no Slot 5.", qnt);
								}
						    	case 3:
						    	{
									PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]+qnt;
									format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha exelente no Slot 5.", qnt);
								}
						    	//======================================================================
						    	case 4:
						    	{
									PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de Cocaína Ruim no Slot 5.", qnt);
								}
						    	case 5:
						    	{
									PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina boa no Slot 5.", qnt);
								}
						    	case 6:
						    	{
									PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina exelente no Slot 5.", qnt);
								}
						    	//======================================================================
						    	case 7:
								{
									PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack ruim no Slot 5.", qnt);
								}
						    	case 8:
								{
									PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack bom no Slot 5.", qnt);
								}
						    	case 9:
						    	{
									PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack exelente no Slot 5.", qnt);
								}
						    	//======================================================================
						    	case 10:
								{
									PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]+qnt;
							   		format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD ruim no Slot 5.", qnt);
								}
						    	case 11:
								{
									PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD bom no Slot 5.", qnt);
								}
						    	case 12:
								{
									PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD exelente no Slot 5.", qnt);
								}
						    	//======================================================================
						    	case 13:
								{
									PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina ruim no Slot 5.", qnt);
								}
						    	case 14:
								{
									PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina boa no Slot 5.", qnt);
								}
						    	case 15:
								{
									PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina exelente no Slot 5.", qnt);
								}
								//======================================================================
								case 16:
								{
									PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %d sementes no Slot 5.", qnt);
								}
								case 17:
								{
									PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dml de Lança Perfume no slot 5.", qnt);
								}
							}
                            SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);

							VehicleInfo[slot][vSlotTipo5] = 0;
							VehicleInfo[slot][vSlot5] = 0;
							VehicleInfo[slot][vAmmo5] = 0;
						    SaveVehicle(slot);
						    SaveDrogas(playerid);
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada neste slot do porta malas.");
				}
				if(slote == 6)
				{
					if(VehicleInfo[slot][vSlot6] != 0)
					{
					    if(VehicleInfo[slot][vSlotTipo6] == 1)
					    {
					        if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
						    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
                         	PlayerInfo[playerid][pArmaMao] = VehicleInfo[slot][vSlot6];
                         	new armaid = VehicleInfo[slot][vSlot6];
							new ArmaModel = ArmaData[VehicleInfo[slot][vSlot6]][ArmaModelo];
						    GivePlayerWeapon(playerid,ArmaModel,VehicleInfo[slot][vAmmo6]);
							ArmaData[armaid][ArmaCom] = PlayerInfo[playerid][pID];
							FloodCMD[playerid] = gettime()+2;

							if(IsValidDynamicObject(VehicleInfo[slot][vObj6])) DestroyDynamicObject(VehicleInfo[slot][vObj6]);

						    if(ArmaData[armaid][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot6]][ArmaRGB]);
						    else SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot6]][ArmaRGB]);

						    format(_string, 128, "[Porta-Malas] Você retirou a sua %s com %d balas no Slot 6.", GunNames[ArmaModel], VehicleInfo[slot][vAmmo6]);
						    SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

						    new strl[126];
							format(strl, sizeof(strl), "%s retirou a sua %s com %d balas no Slot 6. [ %d ]", PlayerName(playerid,0), GunNames[ArmaModel], VehicleInfo[slot][vAmmo6], ArmaData[armaid][ArmaNumeracao]);
							Retirar_PortaMalas(strl);

						    VehicleInfo[slot][vSlotTipo6] = 0;
						    VehicleInfo[slot][vSlot6] = 0;
						    VehicleInfo[slot][vAmmo6] = 0;
						    SaveVehicle(slot);
						    SalvarArma(armaid);
						}
						if(VehicleInfo[slot][vSlotTipo6] == 2)
		    	    	{
		    	    	    PlayerInfo[playerid][pMun9mm] += VehicleInfo[slot][vAmmo6];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 9mm do Slot 6.", VehicleInfo[slot][vAmmo6]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo6] = 0;
							VehicleInfo[slot][vSlot6] = 0;
							VehicleInfo[slot][vAmmo6] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo6] == 3)
		    	    	{
	    					PlayerInfo[playerid][pMun556] += VehicleInfo[slot][vAmmo6];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 5.56mm do Slot 6.", VehicleInfo[slot][vAmmo6]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo6] = 0;
							VehicleInfo[slot][vSlot6] = 0;
							VehicleInfo[slot][vAmmo6] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo6] == 4)
		    	    	{
	    					PlayerInfo[playerid][pMunCart] += VehicleInfo[slot][vAmmo6];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d cartuchos do Slot 6.", VehicleInfo[slot][vAmmo6]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo6] = 0;
							VehicleInfo[slot][vSlot6] = 0;
							VehicleInfo[slot][vAmmo6] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo6] == 5)
		    	    	{
	    					PlayerInfo[playerid][pMun127] += VehicleInfo[slot][vAmmo6];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 12.7x106mm do Slot 6.", VehicleInfo[slot][vAmmo6]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo6] = 0;
							VehicleInfo[slot][vSlot6] = 0;
							VehicleInfo[slot][vAmmo6] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo6] == 6)
		    	    	{
							new drug_name[128];
							new qnt = VehicleInfo[slot][vAmmo6];
						    switch(VehicleInfo[slot][vSlot6])
						    {
							    case 1:
								{
				    				PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha ruim no Slot 6.", qnt);
								}
						    	case 2:
						    	{
								   	PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]+qnt;
							    	format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha boa no Slot 6.", qnt);
								}
						    	case 3:
						    	{
									PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]+qnt;
									format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha exelente no Slot 6.", qnt);
								}
						    	//======================================================================
						    	case 4:
						    	{
									PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de Cocaína Ruim no Slot 6.", qnt);
								}
						    	case 5:
						    	{
									PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina boa no Slot 6.", qnt);
								}
						    	case 6:
						    	{
									PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina exelente no Slot 6.", qnt);
								}
						    	//======================================================================
						    	case 7:
								{
									PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack ruim no Slot 6.", qnt);
								}
						    	case 8:
								{
									PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack bom no Slot 6.", qnt);
								}
						    	case 9:
						    	{
									PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack exelente no Slot 6.", qnt);
								}
						    	//======================================================================
						    	case 10:
								{
									PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]+qnt;
							   		format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD ruim no Slot 6.", qnt);
								}
						    	case 11:
								{
									PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD bom no Slot 6.", qnt);
								}
						    	case 12:
								{
									PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD exelente no Slot 6.", qnt);
								}
						    	//======================================================================
						    	case 13:
								{
									PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina ruim no Slot 6.", qnt);
								}
						    	case 14:
								{
									PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina boa no Slot 6.", qnt);
								}
						    	case 15:
								{
									PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina exelente no Slot 6.", qnt);
								}
								//======================================================================
								case 16:
								{
									PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %d sementes no Slot 6.", qnt);
								}
								case 17:
								{
									PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dml de Lança Perfume no slot 6.", qnt);
								}
							}
                            SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);

							VehicleInfo[slot][vSlotTipo6] = 0;
							VehicleInfo[slot][vSlot6] = 0;
							VehicleInfo[slot][vAmmo6] = 0;
						    SaveVehicle(slot);
						    SaveDrogas(playerid);
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada neste slot do porta malas.");
				}
				if(slote == 7)
				{
					if(VehicleInfo[slot][vSlot7] != 0)
					{
					    if(VehicleInfo[slot][vSlotTipo7] == 1)
					    {
					        if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
						    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
                           	PlayerInfo[playerid][pArmaMao] = VehicleInfo[slot][vSlot7];
                          	new armaid = VehicleInfo[slot][vSlot7];
							new ArmaModel = ArmaData[VehicleInfo[slot][vSlot7]][ArmaModelo];
							GivePlayerWeapon(playerid,ArmaModel,VehicleInfo[slot][vAmmo7]);
							ArmaData[armaid][ArmaCom] = PlayerInfo[playerid][pID];
							FloodCMD[playerid] = gettime()+2;

							if(IsValidDynamicObject(VehicleInfo[slot][vObj7])) DestroyDynamicObject(VehicleInfo[slot][vObj7]);

							if(ArmaData[armaid][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot7]][ArmaRGB]);
							else SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot7]][ArmaRGB]);

							format(_string, 128, "[Porta-Malas] Você retirou a sua %s com %d balas no Slot 7.", GunNames[ArmaModel], VehicleInfo[slot][vAmmo7]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

							new strl[126];
							format(strl, sizeof(strl), "%s retirou a sua %s com %d balas no Slot 7. [ %d ]", PlayerName(playerid,0), GunNames[ArmaModel], VehicleInfo[slot][vAmmo7], ArmaData[armaid][ArmaNumeracao]);
							Retirar_PortaMalas(strl);

							VehicleInfo[slot][vSlotTipo7] = 0;
						    VehicleInfo[slot][vSlot7] = 0;
						    VehicleInfo[slot][vAmmo7] = 0;
						    SaveVehicle(slot);
						    SalvarArma(armaid);
						}
						if(VehicleInfo[slot][vSlotTipo7] == 2)
		    	    	{
		    	    	    PlayerInfo[playerid][pMun9mm] += VehicleInfo[slot][vAmmo7];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 9mm do Slot 7.", VehicleInfo[slot][vAmmo7]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo7] = 0;
							VehicleInfo[slot][vSlot7] = 0;
							VehicleInfo[slot][vAmmo7] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo7] == 3)
		    	    	{
	    					PlayerInfo[playerid][pMun556] += VehicleInfo[slot][vAmmo7];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 5.56mm do Slot 7.", VehicleInfo[slot][vAmmo7]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo7] = 0;
							VehicleInfo[slot][vSlot7] = 0;
							VehicleInfo[slot][vAmmo7] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo7] == 4)
		    	    	{
	    					PlayerInfo[playerid][pMunCart] += VehicleInfo[slot][vAmmo7];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d cartuchos do Slot 7.", VehicleInfo[slot][vAmmo7]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo7] = 0;
							VehicleInfo[slot][vSlot7] = 0;
							VehicleInfo[slot][vAmmo7] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo7] == 5)
		    	    	{
	    					PlayerInfo[playerid][pMun127] += VehicleInfo[slot][vAmmo7];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 12.7x106mm do Slot 7.", VehicleInfo[slot][vAmmo7]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo7] = 0;
							VehicleInfo[slot][vSlot7] = 0;
							VehicleInfo[slot][vAmmo7] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo7] == 6)
		    	    	{
							new drug_name[128];
							new qnt = VehicleInfo[slot][vAmmo7];
						    switch(VehicleInfo[slot][vSlot7])
						    {
							    case 1:
								{
				    				PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha ruim no Slot 7.", qnt);
								}
						    	case 2:
						    	{
								   	PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]+qnt;
							    	format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha boa no Slot 7.", qnt);
								}
						    	case 3:
						    	{
									PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]+qnt;
									format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha exelente no Slot 7.", qnt);
								}
						    	//======================================================================
						    	case 4:
						    	{
									PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de Cocaína Ruim no Slot 7.", qnt);
								}
						    	case 5:
						    	{
									PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina boa no Slot 7.", qnt);
								}
						    	case 6:
						    	{
									PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina exelente no Slot 7.", qnt);
								}
						    	//======================================================================
						    	case 7:
								{
									PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack ruim no Slot 7.", qnt);
								}
						    	case 8:
								{
									PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack bom no Slot 7.", qnt);
								}
						    	case 9:
						    	{
									PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack exelente no Slot 7.", qnt);
								}
						    	//======================================================================
						    	case 10:
								{
									PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]+qnt;
							   		format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD ruim no Slot 7.", qnt);
								}
						    	case 11:
								{
									PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD bom no Slot 7.", qnt);
								}
						    	case 12:
								{
									PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD exelente no Slot 7.", qnt);
								}
						    	//======================================================================
						    	case 13:
								{
									PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina ruim no Slot 7.", qnt);
								}
						    	case 14:
								{
									PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina boa no Slot 7.", qnt);
								}
						    	case 15:
								{
									PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina exelente no Slot 7.", qnt);
								}
								//======================================================================
								case 16:
								{
									PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %d sementes no Slot 7.", qnt);
								}
								case 17:
								{
									PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dml de Lança Perfume no slot 7.", qnt);
								}
							}
                            SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);

							VehicleInfo[slot][vSlotTipo7] = 0;
							VehicleInfo[slot][vSlot7] = 0;
							VehicleInfo[slot][vAmmo7] = 0;
						    SaveVehicle(slot);
						    SaveDrogas(playerid);
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada neste slot do porta malas.");
				}
				if(slote == 8)
				{
					if(VehicleInfo[slot][vSlot8] != 0)
					{
					    if(VehicleInfo[slot][vSlotTipo8] == 1)
					   	{
					   	    if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
						    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
                            PlayerInfo[playerid][pArmaMao] = VehicleInfo[slot][vSlot8];
                            new armaid = VehicleInfo[slot][vSlot8];
							new ArmaModel = ArmaData[VehicleInfo[slot][vSlot8]][ArmaModelo];
			    			GivePlayerWeapon(playerid,ArmaModel,VehicleInfo[slot][vAmmo8]);
							ArmaData[armaid][ArmaCom] = PlayerInfo[playerid][pID];
							FloodCMD[playerid] = gettime()+2;

							if(IsValidDynamicObject(VehicleInfo[slot][vObj8])) DestroyDynamicObject(VehicleInfo[slot][vObj8]);

							if(ArmaData[armaid][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot8]][ArmaRGB]);
							else SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot8]][ArmaRGB]);

						   	format(_string, 128, "[Porta-Malas] Você retirou a sua %s com %d balas no Slot 8.", GunNames[ArmaModel], VehicleInfo[slot][vAmmo8]);
						    SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

						    new strl[126];
							format(strl, sizeof(strl), "%s retirou a sua %s com %d balas no Slot 8. [ %d ]", PlayerName(playerid,0), GunNames[ArmaModel], VehicleInfo[slot][vAmmo8], ArmaData[armaid][ArmaNumeracao]);
							Retirar_PortaMalas(strl);

                         	VehicleInfo[slot][vSlotTipo8] = 0;
							VehicleInfo[slot][vSlot8] = 0;
			    			VehicleInfo[slot][vAmmo8] = 0;
			    			SaveVehicle(slot);
					    	SalvarArma(armaid);
						}
						if(VehicleInfo[slot][vSlotTipo8] == 2)
		    	    	{
		    	    	    PlayerInfo[playerid][pMun9mm] += VehicleInfo[slot][vAmmo8];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 9mm do Slot 8.", VehicleInfo[slot][vAmmo8]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo8] = 0;
							VehicleInfo[slot][vSlot8] = 0;
							VehicleInfo[slot][vAmmo8] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo8] == 3)
		    	    	{
	    					PlayerInfo[playerid][pMun556] += VehicleInfo[slot][vAmmo8];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 5.56mm do Slot 8.", VehicleInfo[slot][vAmmo8]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo8] = 0;
							VehicleInfo[slot][vSlot8] = 0;
							VehicleInfo[slot][vAmmo8] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo8] == 4)
		    	    	{
	    					PlayerInfo[playerid][pMunCart] += VehicleInfo[slot][vAmmo8];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d cartuchos do Slot 8.", VehicleInfo[slot][vAmmo8]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo8] = 0;
							VehicleInfo[slot][vSlot8] = 0;
							VehicleInfo[slot][vAmmo8] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo8] == 5)
		    	    	{
	    					PlayerInfo[playerid][pMun127] += VehicleInfo[slot][vAmmo8];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 12.7x106mm do Slot 8.", VehicleInfo[slot][vAmmo8]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo8] = 0;
							VehicleInfo[slot][vSlot8] = 0;
							VehicleInfo[slot][vAmmo8] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo8] == 6)
		    	    	{
							new drug_name[128];
							new qnt = VehicleInfo[slot][vAmmo8];
						    switch(VehicleInfo[slot][vSlot8])
						    {
							    case 1:
								{
				    				PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha ruim no Slot 8.", qnt);
								}
						    	case 2:
						    	{
								   	PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]+qnt;
							    	format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha boa no Slot 8.", qnt);
								}
						    	case 3:
						    	{
									PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]+qnt;
									format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha exelente no Slot 8.", qnt);
								}
						    	//======================================================================
						    	case 4:
						    	{
									PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de Cocaína Ruim no Slot 8.", qnt);
								}
						    	case 5:
						    	{
									PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina boa no Slot 8.", qnt);
								}
						    	case 6:
						    	{
									PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina exelente no Slot 8.", qnt);
								}
						    	//======================================================================
						    	case 7:
								{
									PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack ruim no Slot 8.", qnt);
								}
						    	case 8:
								{
									PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack bom no Slot 8.", qnt);
								}
						    	case 9:
						    	{
									PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack exelente no Slot 8.", qnt);
								}
						    	//======================================================================
						    	case 10:
								{
									PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]+qnt;
							   		format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD ruim no Slot 8.", qnt);
								}
						    	case 11:
								{
									PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD bom no Slot 8.", qnt);
								}
						    	case 12:
								{
									PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD exelente no Slot 8.", qnt);
								}
						    	//======================================================================
						    	case 13:
								{
									PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina ruim no Slot 8.", qnt);
								}
						    	case 14:
								{
									PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina boa no Slot 8.", qnt);
								}
						    	case 15:
								{
									PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina exelente no Slot 8.", qnt);
								}
								//======================================================================
								case 16:
								{
									PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %d sementes no Slot 8.", qnt);
								}
								case 17:
								{
									PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dml de Lança Perfume no slot 8.", qnt);
								}
							}
                            SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);

							VehicleInfo[slot][vSlotTipo8] = 0;
							VehicleInfo[slot][vSlot8] = 0;
							VehicleInfo[slot][vAmmo8] = 0;
						    SaveVehicle(slot);
						    SaveDrogas(playerid);
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada neste slot do porta malas.");
				}
				if(slote == 9)
				{
					if(VehicleInfo[slot][vSlot9] != 0)
					{
					    if(VehicleInfo[slot][vSlotTipo9] == 1)
				    	{
				    	    if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
						    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
                          	PlayerInfo[playerid][pArmaMao] = VehicleInfo[slot][vSlot9];
                        	new armaid = VehicleInfo[slot][vSlot9];
							new ArmaModel = ArmaData[VehicleInfo[slot][vSlot9]][ArmaModelo];
							GivePlayerWeapon(playerid,ArmaModel,VehicleInfo[slot][vAmmo9]);
							ArmaData[armaid][ArmaCom] = PlayerInfo[playerid][pID];
							FloodCMD[playerid] = gettime()+2;

							if(IsValidDynamicObject(VehicleInfo[slot][vObj9])) DestroyDynamicObject(VehicleInfo[slot][vObj9]);

							if(ArmaData[armaid][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot9]][ArmaRGB]);
							else SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot9]][ArmaRGB]);

							format(_string, 128, "[Porta-Malas]Você retirou a sua %s com %d balas no Slot 9.", GunNames[ArmaModel], VehicleInfo[slot][vAmmo9]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

							new strl[126];
							format(strl, sizeof(strl), "%s retirou a sua %s com %d balas no Slot 9. [ %d ]", PlayerName(playerid,0), GunNames[ArmaModel], VehicleInfo[slot][vAmmo9], ArmaData[armaid][ArmaNumeracao]);
							Retirar_PortaMalas(strl);

							VehicleInfo[slot][vSlotTipo9] = 0;
							VehicleInfo[slot][vSlot9] = 0;
							VehicleInfo[slot][vAmmo9] = 0;
							SaveVehicle(slot);
							SalvarArma(armaid);
						}
						if(VehicleInfo[slot][vSlotTipo9] == 2)
		    	    	{
		    	    	    PlayerInfo[playerid][pMun9mm] += VehicleInfo[slot][vAmmo9];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 9mm do Slot 9.", VehicleInfo[slot][vAmmo9]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo9] = 0;
							VehicleInfo[slot][vSlot9] = 0;
							VehicleInfo[slot][vAmmo9] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo9] == 3)
		    	    	{
	    					PlayerInfo[playerid][pMun556] += VehicleInfo[slot][vAmmo9];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 5.56mm do Slot 9.", VehicleInfo[slot][vAmmo9]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo9] = 0;
							VehicleInfo[slot][vSlot9] = 0;
							VehicleInfo[slot][vAmmo9] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo9] == 4)
		    	    	{
	    					PlayerInfo[playerid][pMunCart] += VehicleInfo[slot][vAmmo9];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d cartuchos do Slot 9.", VehicleInfo[slot][vAmmo9]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo9] = 0;
							VehicleInfo[slot][vSlot9] = 0;
							VehicleInfo[slot][vAmmo9] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo9] == 5)
		    	    	{
	    					PlayerInfo[playerid][pMun127] += VehicleInfo[slot][vAmmo9];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 12.7x106mm do Slot 9.", VehicleInfo[slot][vAmmo9]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo9] = 0;
							VehicleInfo[slot][vSlot9] = 0;
							VehicleInfo[slot][vAmmo9] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo9] == 6)
		    	    	{
							new drug_name[128];
							new qnt = VehicleInfo[slot][vAmmo9];
						    switch(VehicleInfo[slot][vSlot9])
						    {
							    case 1:
								{
				    				PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha ruim no Slot 9.", qnt);
								}
						    	case 2:
						    	{
								   	PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]+qnt;
							    	format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha boa no Slot 9.", qnt);
								}
						    	case 3:
						    	{
									PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]+qnt;
									format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha exelente no Slot 9.", qnt);
								}
						    	//======================================================================
						    	case 4:
						    	{
									PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de Cocaína Ruim no Slot 9.", qnt);
								}
						    	case 5:
						    	{
									PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina boa no Slot 9.", qnt);
								}
						    	case 6:
						    	{
									PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina exelente no Slot 9.", qnt);
								}
						    	//======================================================================
						    	case 7:
								{
									PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack ruim no Slot 9.", qnt);
								}
						    	case 8:
								{
									PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack bom no Slot 9.", qnt);
								}
						    	case 9:
						    	{
									PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack exelente no Slot 9.", qnt);
								}
						    	//======================================================================
						    	case 10:
								{
									PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]+qnt;
							   		format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD ruim no Slot 9.", qnt);
								}
						    	case 11:
								{
									PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD bom no Slot 9.", qnt);
								}
						    	case 12:
								{
									PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD exelente no Slot 9.", qnt);
								}
						    	//======================================================================
						    	case 13:
								{
									PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina ruim no Slot 9.", qnt);
								}
						    	case 14:
								{
									PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina boa no Slot 9.", qnt);
								}
						    	case 15:
								{
									PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina exelente no Slot 9.", qnt);
								}
								//======================================================================
								case 16:
								{
									PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %d sementes no Slot 9.", qnt);
								}
								case 17:
								{
									PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dml de Lança Perfume no slot 9.", qnt);
								}
							}
                            SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);

							VehicleInfo[slot][vSlotTipo9] = 0;
							VehicleInfo[slot][vSlot9] = 0;
							VehicleInfo[slot][vAmmo9] = 0;
						    SaveVehicle(slot);
						    SaveDrogas(playerid);
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada neste slot do porta malas.");
				}
				if(slote == 10)
				{
					if(VehicleInfo[slot][vSlot10] != 0)
					{
					    if(VehicleInfo[slot][vSlotTipo10] == 1)
					   	{
					   	    if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
						    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
                          	PlayerInfo[playerid][pArmaMao] = VehicleInfo[slot][vSlot10];
                          	new armaid = VehicleInfo[slot][vSlot10];
							new ArmaModel = ArmaData[VehicleInfo[slot][vSlot10]][ArmaModelo];
							GivePlayerWeapon(playerid,ArmaModel,VehicleInfo[slot][vAmmo10]);
							ArmaData[armaid][ArmaCom] = PlayerInfo[playerid][pID];

							if(IsValidDynamicObject(VehicleInfo[slot][vObj10])) DestroyDynamicObject(VehicleInfo[slot][vObj10]);

							if(ArmaData[armaid][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot10]][ArmaRGB]);
							else SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vSlot10]][ArmaRGB]);
   							FloodCMD[playerid] = gettime()+2;

   							format(_string, 128, "[Porta-Malas] Você retirou a sua %s com %d balas no Slot 10.", GunNames[ArmaModel], VehicleInfo[slot][vAmmo10]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

   							new strl[126];
							format(strl, sizeof(strl), "%s retirou a sua %s com %d balas no Slot 10. [ %d ]", PlayerName(playerid,0), GunNames[ArmaModel], VehicleInfo[slot][vAmmo10], ArmaData[armaid][ArmaNumeracao]);
							Retirar_PortaMalas(strl);

							VehicleInfo[slot][vSlotTipo10] = 0;
							VehicleInfo[slot][vSlot10] = 0;
							VehicleInfo[slot][vAmmo10] = 0;
							SaveVehicle(slot);
							SalvarArma(armaid);

						}
						if(VehicleInfo[slot][vSlotTipo10] == 2)
		    	    	{
		    	    	    PlayerInfo[playerid][pMun9mm] += VehicleInfo[slot][vAmmo10];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 9mm do Slot 10.", VehicleInfo[slot][vAmmo10]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo10] = 0;
							VehicleInfo[slot][vSlot10] = 0;
							VehicleInfo[slot][vAmmo10] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo10] == 3)
		    	    	{
	    					PlayerInfo[playerid][pMun556] += VehicleInfo[slot][vAmmo10];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 5.56mm do Slot 10.", VehicleInfo[slot][vAmmo10]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo10] = 0;
							VehicleInfo[slot][vSlot10] = 0;
							VehicleInfo[slot][vAmmo10] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo10] == 4)
		    	    	{
	    					PlayerInfo[playerid][pMunCart] += VehicleInfo[slot][vAmmo10];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d cartuchos do Slot 10.", VehicleInfo[slot][vAmmo10]);
							SendClientMessage(playerid,-1,_string);

		    	    	    VehicleInfo[slot][vSlotTipo10] = 0;
							VehicleInfo[slot][vSlot10] = 0;
							VehicleInfo[slot][vAmmo10] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo10] == 5)
		    	    	{
	    					PlayerInfo[playerid][pMun127] += VehicleInfo[slot][vAmmo10];

		    	    	    format(_string, 128, "[Porta-Malas] Você retirou uma caixa com %d balas calibre 12.7x106mm do Slot 10.", VehicleInfo[slot][vAmmo10]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vSlotTipo10] = 0;
							VehicleInfo[slot][vSlot10] = 0;
							VehicleInfo[slot][vAmmo10] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vSlotTipo10] == 6)
		    	    	{
							new drug_name[128];
							new qnt = VehicleInfo[slot][vAmmo10];
						    switch(VehicleInfo[slot][vSlot10])
						    {
							    case 1:
								{
				    				PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha ruim no Slot 10.", qnt);
								}
						    	case 2:
						    	{
								   	PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]+qnt;
							    	format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha boa no Slot 10.", qnt);
								}
						    	case 3:
						    	{
									PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]+qnt;
									format(drug_name, 128, "[Porta-Malas] Você retirou %dg de maconha exelente no Slot 10.", qnt);
								}
						    	//======================================================================
						    	case 4:
						    	{
									PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de Cocaína Ruim no Slot 10.", qnt);
								}
						    	case 5:
						    	{
									PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina boa no Slot 10.", qnt);
								}
						    	case 6:
						    	{
									PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de cocaina exelente no Slot 10.", qnt);
								}
						    	//======================================================================
						    	case 7:
								{
									PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack ruim no Slot 10.", qnt);
								}
						    	case 8:
								{
									PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack bom no Slot 10.", qnt);
								}
						    	case 9:
						    	{
									PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]+qnt;
					    			format(drug_name, 128, "[Porta-Malas] Você retirou %dg de crack exelente no Slot 10.", qnt);
								}
						    	//======================================================================
						    	case 10:
								{
									PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]+qnt;
							   		format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD ruim no Slot 10.", qnt);
								}
						    	case 11:
								{
									PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD bom no Slot 10.", qnt);
								}
						    	case 12:
								{
									PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de LSD exelente no Slot 10.", qnt);
								}
						    	//======================================================================
						    	case 13:
								{
									PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina ruim no Slot 10.", qnt);
								}
						    	case 14:
								{
									PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina boa no Slot 10.", qnt);
								}
						    	case 15:
								{
									PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dg de metanfetamina exelente no Slot 10.", qnt);
								}
								//======================================================================
								case 16:
								{
									PlayerDroga[playerid][Sementes] = PlayerDroga[playerid][Sementes]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %d sementes no Slot 10.", qnt);
								}
								case 17:
								{
									PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]+qnt;
								    format(drug_name, 128, "[Porta-Malas] Você retirou %dml de Lança Perfume no slot 10.", qnt);
								}
							}
                            SendClientMessage(playerid, COLOR_LIGHTGREEN,drug_name);

							VehicleInfo[slot][vSlotTipo10] = 0;
							VehicleInfo[slot][vSlot10] = 0;
							VehicleInfo[slot][vAmmo10] = 0;
						    SaveVehicle(slot);
						    SaveDrogas(playerid);
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada neste slot do porta malas.");
				}
          	}
          	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} O portamalas do veículo está fechado.");
		}
	}
	return 1;
}

COMMAND:gov(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pFacCargo] < 5) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem acesso a este comando.");

	new text[256];
	if(sscanf(params, "s[256]", text)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /gov [TEXTO]");
	else
	{
	    new facID = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	    if(FacInfo[facID][fTipo] == FAC_TIPO_PMERJ)
		{
		    SendClientMessageToAll(0x005BB7FF, "{6495ed}PMERJ:");
			format(string, sizeof(string), "{6495ed}%s", text);
    		SendClientMessageToAll(0x005BB7FF, string);
		}
  		else if(FacInfo[facID][fTipo] == FAC_TIPO_GOV)
		{
		    SendClientMessageToAll(0x005BB7FF, "{6495ed}GOV-RJ:");
		    format(string, sizeof(string), "{6495ed}%s", text);
    		SendClientMessageToAll(0x005BB7FF, string);
		}
  		else if(FacInfo[facID][fTipo] == FAC_TIPO_TJRP)
		{
		    SendClientMessageToAll(0x005BB7FF, "{6495ed}TJSP:");
		    format(string, sizeof(string), "{6495ed}%s", text);
    		SendClientMessageToAll(0x005BB7FF, string);
		}
  		else if(FacInfo[facID][fTipo] == FAC_TIPO_EB)
		{
		    SendClientMessageToAll(0x005BB7FF, "{6495ed}EB:");
		    format(string, sizeof(string), "{6495ed}%s", text);
    		SendClientMessageToAll(0x005BB7FF, string);
		}
        else if(FacInfo[facID][fTipo] == FAC_TIPO_PCERJ)
        {
            SendClientMessageToAll(0x005BB7FF, "{6495ed}PCERJ:");
            format(string, sizeof(string), "{6495ed}%s", text);
            SendClientMessageToAll(0x005BB7FF, string);
		}
        else if(FacInfo[facID][fTipo] == FAC_TIPO_BANK)
        {
            SendClientMessageToAll(0x005BB7FF, "{6495ed}PROTEGE:");
            format(string, sizeof(string), "{6495ed}%s", text);
            SendClientMessageToAll(0x005BB7FF, string);
		}		
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso a este comando.");
		}
	}
	return 1;
}

ALTCOMMAND:pluvas->portaluvas;
ALTCOMMAND:pl->portaluvas;
COMMAND:portaluvas(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar dentro do veículo.");
    if(GetPlayerVehicleSeat(playerid) != 0 && GetPlayerVehicleSeat(playerid) != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar em um dos bancos da frente do veículo.");
    if(gettime() < FloodCMD[playerid]) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Aguarde um segundo antes de usar um comando novamente.");
    if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");

    new vehicleid = GetPlayerVehicleID(playerid);
    if(GetVehicleModel(vehicleid) == 448 || GetVehicleModel(vehicleid) == 461 || GetVehicleModel(vehicleid) == 462 ||
	GetVehicleModel(vehicleid) == 463 || GetVehicleModel(vehicleid) == 468 || GetVehicleModel(vehicleid) == 471 ||
	GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 ||
	GetVehicleModel(vehicleid) == 521 || GetVehicleModel(vehicleid) == 522 || GetVehicleModel(vehicleid) == 523 ||
	GetVehicleModel(vehicleid) == 581 || GetVehicleModel(vehicleid) == 586 || GetVehicleModel(vehicleid) == 572 || GetVehicleModel(vehicleid) == 457) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não tem porta-malas.");

	new carid = GetPlayerVehicleID(playerid);
	new slot = GetVehicleSlot(carid), digityy[64];
	if(slot > -1)
	{
	    new idx = 0;
 		new tmp2[256], _string[256];
		tmp2 = strtok(params,idx);
		if(!strlen(tmp2))
		{
			SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [checar / colocar / retirar]");
			return 1;
		}
		if(strcmp(tmp2,"checar",true) == 0)
		{
  		    	GetVehicleNameByModel(VehicleInfo[slot][vModel], digityy);
   		    	format(_string, 128, "_____Porta Luvas %s_____", digityy);
  				SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);
	    		if(VehicleInfo[slot][vpluva1] != 0)
		    	{
  	    			if(VehicleInfo[slot][vpluva1t] == 1)
	    	    	{
    					format(_string, 128, "Slot 1: %s, Munição: %d ", GunNames[ArmaData[VehicleInfo[slot][vpluva1]][ArmaModelo]], VehicleInfo[slot][vpluva1a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva1t] == 2)
	    	    	{
    					format(_string, 128, "Slot 1: Caixa de Munição 9mm, Munições: %d ", VehicleInfo[slot][vpluva1a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva1t] == 3)
	    	    	{
    					format(_string, 128, "Slot 1: Caixa de Munição 5.56mm, Munições: %d ", VehicleInfo[slot][vpluva1a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva1t] == 4)
	    	    	{
    					format(_string, 128, "Slot 1: Caixa de cartuchos, Munições: %d ", VehicleInfo[slot][vpluva1a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva1t] == 5)
	    	    	{
    					format(_string, 128, "Slot 1: Caixa de Munição 12.7x106mm, Munições: %d ", VehicleInfo[slot][vpluva1a]);
		    			SendClientMessage(playerid,-1,_string);
					}
				}
				if(VehicleInfo[slot][vpluva2] != 0)
   				{
  	    			if(VehicleInfo[slot][vpluva2t] == 1)
	    	    	{
    					format(_string, 128, "Slot 2: %s, Munição: %d ", GunNames[ArmaData[VehicleInfo[slot][vpluva2]][ArmaModelo]], VehicleInfo[slot][vpluva2a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva2t] == 2)
	    	    	{
    					format(_string, 128, "Slot 2: Caixa de Munição 9mm, Munições: %d ", VehicleInfo[slot][vpluva2a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva2t] == 3)
	    	    	{
    					format(_string, 128, "Slot 2: Caixa de Munição 5.56mm, Munições: %d ", VehicleInfo[slot][vpluva2a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva2t] == 4)
	    	    	{
    					format(_string, 128, "Slot 2: Caixa de cartuchos, Munições: %d ", VehicleInfo[slot][vpluva2a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva2t] == 5)
	    	    	{
    					format(_string, 128, "Slot 2: Caixa de Munição 12.7x106mm, Munições: %d ", VehicleInfo[slot][vpluva2a]);
		    			SendClientMessage(playerid,-1,_string);
					}
				}
				if(VehicleInfo[slot][vpluva3] != 0)
   				{
  	    			if(VehicleInfo[slot][vpluva3t] == 1)
	    	    	{
    					format(_string, 128, "Slot 3: %s, Munição: %d ", GunNames[ArmaData[VehicleInfo[slot][vpluva3]][ArmaModelo]], VehicleInfo[slot][vpluva3a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva3t] == 2)
	    	    	{
    					format(_string, 128, "Slot 3: Caixa de Munição 9mm, Munições: %d ", VehicleInfo[slot][vpluva3a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva3t] == 3)
	    	    	{
    					format(_string, 128, "Slot 3: Caixa de Munição 5.56mm, Munições: %d ", VehicleInfo[slot][vpluva3a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva3t] == 4)
	    	    	{
    					format(_string, 128, "Slot 3: Caixa de cartuchos, Munições: %d ", VehicleInfo[slot][vpluva3a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva3t] == 5)
	    	    	{
    					format(_string, 128, "Slot 3: Caixa de Munição 12.7x106mm, Munições: %d ", VehicleInfo[slot][vpluva3a]);
		    			SendClientMessage(playerid,-1,_string);
					}
				}
				if(VehicleInfo[slot][vpluva4] != 0)
   				{
			    	if(VehicleInfo[slot][vpluva4t] == 1)
			    	{
			    		format(_string, 128, "Slot 4: %s, Munição: %d ", GunNames[ArmaData[VehicleInfo[slot][vpluva4]][ArmaModelo]], VehicleInfo[slot][vpluva4a]);
			    		SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva4t] == 2)
	    	    	{
    					format(_string, 128, "Slot 4: Caixa de Munição 9mm, Munições: %d ", VehicleInfo[slot][vpluva4a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva4t] == 3)
	    	    	{
    					format(_string, 128, "Slot 4: Caixa de Munição 5.56mm, Munições: %d ", VehicleInfo[slot][vpluva4a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva4t] == 4)
	    	    	{
    					format(_string, 128, "Slot 4: Caixa de cartuchos, Munições: %d ", VehicleInfo[slot][vpluva4a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva4t] == 5)
	    	    	{
    					format(_string, 128, "Slot 4: Caixa de Munição 12.7x106mm, Munições: %d ", VehicleInfo[slot][vpluva4a]);
		    			SendClientMessage(playerid,-1,_string);
					}
				}
				if(VehicleInfo[slot][vpluva5] != 0)
   				{
  	    			if(VehicleInfo[slot][vpluva5t] == 1)
	    	    	{
    					format(_string, 128, "Slot 5: %s, Munição: %d ", GunNames[ArmaData[VehicleInfo[slot][vpluva5]][ArmaModelo]], VehicleInfo[slot][vpluva5a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva5t] == 2)
	    	    	{
    					format(_string, 128, "Slot 5: Caixa de Munição 9mm, Munições: %d ", VehicleInfo[slot][vpluva5a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva5t] == 3)
	    	    	{
    					format(_string, 128, "Slot 5: Caixa de Munição 5.56mm, Munições: %d ", VehicleInfo[slot][vpluva5a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva5t] == 4)
	    	    	{
    					format(_string, 128, "Slot 5: Caixa de cartuchos, Munições: %d ", VehicleInfo[slot][vpluva5a]);
		    			SendClientMessage(playerid,-1,_string);
					}
					if(VehicleInfo[slot][vpluva5t] == 5)
	    	    	{
    					format(_string, 128, "Slot 5: Caixa de Munição 12.7x106mm, Munições: %d ", VehicleInfo[slot][vpluva5a]);
		    			SendClientMessage(playerid,-1,_string);
					}
				}
				if(VehicleInfo[slot][vpluva1] == 0 && VehicleInfo[slot][vpluva2] == 0 && VehicleInfo[slot][vpluva3] == 0 && VehicleInfo[slot][vpluva4] == 0 && VehicleInfo[slot][vpluva5] == 0)
			   	{
			   	    SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} O porta porta luvas está vazio.");
			   	}
          	//}
          	//else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} O portamalas do veículo está fechado.");
		}
		if(strcmp(tmp2,"colocar",true) == 0)
		{
		    //GetVehicleParamsEx(carid, engine, lights, alarm,doors,bonnet,boot,objective);
		    //if(boot == 1)
         	//{
         	    if(FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(VehicleInfo[slot][vFaction])][fTipo] == FAC_TIPO_EB)
	  			{
					if(PlayerInfo[playerid][pEmServico] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando na viatura estando fora de serviço.");
	     			if(PlayerInfo[playerid][pFac] != VehicleInfo[slot][vFaction]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso ao portamalas deste veículo.");
				}
				else
	   				if(PlayerInfo[playerid][pEmServico] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando na em serviço.");

         	    new tmp58[124];
         	    tmp58 = strtok(params,idx);
				if(!strlen(tmp58))
				{
					SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [guardar] [Arma / 9mm / 556 / cartucho/ 127]");
					return 1;
				}
				if(strcmp(tmp58,"arma",true) == 0)
				{
				    if(TazerPlayer[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando com o tazer na mão.");
				    if(PlayerInfo[playerid][pArmaMao] == 0) return SCM(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem uma arma em mãos.");
				    new modelo = ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaModelo];
					if(modelo != 1 && modelo != 3 && modelo != 4 && modelo != 15 && modelo != 22 && modelo != 23 && modelo != 24 && modelo != 28 && modelo != 41 && modelo != 43) return SendClientMessage(playerid,COLOR_LIGHTRED,"Essa arma é muito grande para ser posta no portaluvas.");

	  				new tmp4[256];
					tmp4 = strtok(params,idx);
					if(!strlen(tmp4))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [guardar] [arma] [slot 1-5]");
						return 1;
					}
					new slote = strval(tmp4);
					if( slote < 1 || slote > 5) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas guardar arma [slot 1-5]");
					if(slote == 1)
					{
						if(VehicleInfo[slot][vpluva1] == 0)
						{
			    			new armaid = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vpluva1t] = 1;
						    VehicleInfo[slot][vpluva1] = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vpluva1a] = ArmaData[armaid][ArmaAmmo];

						    //========================================
						    DesarmandoPlayer[playerid] = 2;
						    ResetPlayerWeapons(playerid);

							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							//========================================
						    RemovePlayerAttachedObject(playerid, 0);
							ArmaData[armaid][ArmaCom] = 0;
							FloodCMD[playerid] = gettime()+2;

							format(_string, 128, "[Porta-Luvas] Você guardou a sua %s com %d balas no slot 1.", GunNames[ArmaData[VehicleInfo[slot][vpluva1]][ArmaModelo]], VehicleInfo[slot][vpluva1a]);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						    SalvarArma(armaid);

						    new strl[126];
							format(strl, sizeof(strl), "%s colocou a sua %s com %d balas no Slot 1. [ %d ]", PlayerName(playerid,0), GunNames[ArmaData[VehicleInfo[slot][vpluva1]][ArmaModelo]], VehicleInfo[slot][vpluva1a], ArmaData[VehicleInfo[slot][vpluva1]][ArmaNumeracao]);
							Colocar_PortaLuvas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 2)
					{
						if(VehicleInfo[slot][vpluva2] == 0)
						{
			    			new armaid = PlayerInfo[playerid][pArmaMao];
				  			VehicleInfo[slot][vpluva2t] = 1;
						   	VehicleInfo[slot][vpluva2] = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vpluva2a] = ArmaData[armaid][ArmaAmmo];
						   	//========================================
						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							//========================================
							ArmaData[armaid][ArmaCom] = 0;
							FloodCMD[playerid] = gettime()+2;

							format(_string, 128, "[Porta-Luvas] Você guardou a sua %s com %d balas no Slot 2.", GunNames[ArmaData[VehicleInfo[slot][vpluva2]][ArmaModelo]], VehicleInfo[slot][vpluva2a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);
							SaveVehicle(slot);
							SalvarArma(armaid);

							new strl[126];
							format(strl, sizeof(strl), "%s colocou a sua %s com %d balas no Slot 2. [ %d ]", PlayerName(playerid,0), GunNames[ArmaData[VehicleInfo[slot][vpluva2]][ArmaModelo]], VehicleInfo[slot][vpluva2a], ArmaData[VehicleInfo[slot][vpluva2]][ArmaNumeracao]);
							Colocar_PortaLuvas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 3)
					{
						if(VehicleInfo[slot][vpluva3] == 0)
						{
			    			new armaid = PlayerInfo[playerid][pArmaMao];
							VehicleInfo[slot][vpluva3t] = 1;
							VehicleInfo[slot][vpluva3] = PlayerInfo[playerid][pArmaMao];
							VehicleInfo[slot][vpluva3a] = ArmaData[armaid][ArmaAmmo];
							//========================================
						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							//========================================
						    RemovePlayerAttachedObject(playerid, 0);
							ArmaData[armaid][ArmaCom] = 0;
							FloodCMD[playerid] = gettime()+2;

							format(_string, 128, "[Porta-Luvas] Você guardou a sua %s com %d balas no slot 3.", GunNames[ArmaData[VehicleInfo[slot][vpluva3]][ArmaModelo]], VehicleInfo[slot][vpluva3a]);
						    SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						    SalvarArma(armaid);

						    new strl[126];
							format(strl, sizeof(strl), "%s colocou a sua %s com %d balas no Slot 3. [%d]", PlayerName(playerid,0), GunNames[ArmaData[VehicleInfo[slot][vpluva3]][ArmaModelo]], VehicleInfo[slot][vpluva3a], ArmaData[VehicleInfo[slot][vpluva3]][ArmaNumeracao]);
							Colocar_PortaLuvas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 4)
					{
						if(VehicleInfo[slot][vpluva4] == 0)
						{
			    			new armaid = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vpluva4t] = 1;
						    VehicleInfo[slot][vpluva4] = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vpluva4a] = ArmaData[armaid][ArmaAmmo] ;
						    //========================================
						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							//========================================
							ArmaData[armaid][ArmaCom] = 0;
							FloodCMD[playerid] = gettime()+2;

							format(_string, 128, "[Porta-Luvas] Você guardou a sua %s com %d balas no slot 4.", GunNames[ArmaData[VehicleInfo[slot][vpluva4]][ArmaModelo]], VehicleInfo[slot][vpluva4a]);
				   			SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						    SalvarArma(armaid);

						    new strl[126];
							format(strl, sizeof(strl), "%s colocou a sua %s com %d balas no Slot 4. [%d]", PlayerName(playerid,0), GunNames[ArmaData[VehicleInfo[slot][vpluva4]][ArmaModelo]], VehicleInfo[slot][vpluva4a], ArmaData[VehicleInfo[slot][vpluva4]][ArmaNumeracao]);
							Colocar_PortaLuvas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 5)
					{
						if(VehicleInfo[slot][vpluva5] == 0)
						{
						    new armaid = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vpluva5t] = 1;
						    VehicleInfo[slot][vpluva5] = PlayerInfo[playerid][pArmaMao];
						    VehicleInfo[slot][vpluva5a] = ArmaData[armaid][ArmaAmmo];
						    //========================================
						    DesarmandoPlayer[playerid] = 2;
							ResetPlayerWeapons(playerid);
							PlayerInfo[playerid][pArmaMao] = 0;
							RemovePlayerAttachedObject(playerid, 0);
							//========================================
							ArmaData[armaid][ArmaCom] = 0;
							FloodCMD[playerid] = gettime()+2;

						    format(_string, 128, "[Porta-Luvas] Você guardou a sua %s com %d balas no slot 5.", GunNames[ArmaData[VehicleInfo[slot][vpluva5]][ArmaModelo]], VehicleInfo[slot][vpluva5a]);
						    SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						    SalvarArma(armaid);

						    new strl[126];
							format(strl, sizeof(strl), "%s colocou a sua %s com %d balas no Slot 5. [%d]", PlayerName(playerid,0), GunNames[ArmaData[VehicleInfo[slot][vpluva5]][ArmaModelo]], VehicleInfo[slot][vpluva5a], ArmaData[VehicleInfo[slot][vpluva5]][ArmaNumeracao]);
							Colocar_PortaLuvas(strl);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
				}
				else if(strcmp(tmp58,"9mm",true) == 0)
				{
	  				new tmp4[256];
					tmp4 = strtok(params,idx);
					if(!strlen(tmp4))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [guardar] [9mm] [slot 1-5] [quantidade]");
						return 1;
					}
					new slote = strval(tmp4);
					if( slote < 1 || slote > 5) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas guardar 9mm [slot 1-5] [Quantidade]");
					new tmp88[256];
					tmp88 = strtok(params,idx);
					if(!strlen(tmp88))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [guardar] [9mm] [slot 1-5] [Quantidade]");
						return 1;
					}
					new qnt = strval(tmp88);
					if(qnt < 1 || qnt > 99999) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [guardar] [9mm] [slot 1-5] [Quantidade]");

					if(PlayerInfo[playerid][pMun9mm] < qnt) return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não tem tudo isso de munição.");

					if(slote == 1)
					{
						if(VehicleInfo[slot][vpluva1] == 0)
						{
						    VehicleInfo[slot][vpluva1t] = 2;
						    VehicleInfo[slot][vpluva1] = 1;
						    VehicleInfo[slot][vpluva1a] = qnt;
						    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d balas calibre 9mm no Slot 1.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 2)
					{
						if(VehicleInfo[slot][vpluva2] == 0)
						{
						    VehicleInfo[slot][vpluva2t] = 2;
						    VehicleInfo[slot][vpluva2] = 1;
						    VehicleInfo[slot][vpluva2a] = qnt;
						    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d balas calibre 9mm no Slot 2.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 3)
					{
						if(VehicleInfo[slot][vpluva3] == 0)
						{
						    VehicleInfo[slot][vpluva3t] = 2;
						    VehicleInfo[slot][vpluva3] = 1;
						    VehicleInfo[slot][vpluva3a] = qnt;
						    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d balas calibre 9mm no Slot 3.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 4)
					{
						if(VehicleInfo[slot][vpluva4] == 0)
						{
						    VehicleInfo[slot][vpluva4t] = 2;
						    VehicleInfo[slot][vpluva4] = 1;
						    VehicleInfo[slot][vpluva4a] = qnt;
						    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d balas calibre 9mm no Slot 4.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 5)
					{
						if(VehicleInfo[slot][vpluva5] == 0)
						{
						    VehicleInfo[slot][vpluva5t] = 2;
						    VehicleInfo[slot][vpluva5] = 1;
						    VehicleInfo[slot][vpluva5a] = qnt;
						    PlayerInfo[playerid][pMun9mm] = PlayerInfo[playerid][pMun9mm]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d balas calibre 9mm no Slot 5.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
				}
				else if(strcmp(tmp58,"556",true) == 0)
				{
	  				new tmp4[256];
					tmp4 = strtok(params,idx);
					if(!strlen(tmp4))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas guardar 556 [slot 1-5] [Quantidade]");
						return 1;
					}
					new slote = strval(tmp4);
					if( slote < 1 || slote > 5) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [guardar] [556] [slot 1-5] [Quantidade]");
					new tmp88[256];
					tmp88 = strtok(params,idx);
					if(!strlen(tmp88))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [guardar] [556] [slot 1-5] [Quantidade]");
						return 1;
					}
					new qnt = strval(tmp88);
					if(qnt < 1 || qnt > 99999) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [guardar] [556] [slot 1-5] [Quantidade]");

					if(PlayerInfo[playerid][pMun556] < qnt) return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não tem tudo isso de munição.");

					if(slote == 1)
					{
						if(VehicleInfo[slot][vpluva1] == 0)
						{
						    VehicleInfo[slot][vpluva1t] = 3;
						    VehicleInfo[slot][vpluva1] = 1;
						    VehicleInfo[slot][vpluva1a] = qnt;
						    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d balas calibre 5.56mm no slot 1.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 2)
					{
						if(VehicleInfo[slot][vpluva2] == 0)
						{
						    VehicleInfo[slot][vpluva2t] = 3;
						    VehicleInfo[slot][vpluva2] = 1;
						    VehicleInfo[slot][vpluva2a] = qnt;
						    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d balas calibre 5.56mm no slot 2.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 3)
					{
						if(VehicleInfo[slot][vpluva3] == 0)
						{
						    VehicleInfo[slot][vpluva3t] = 3;
						    VehicleInfo[slot][vpluva3] = 1;
						    VehicleInfo[slot][vpluva3a] = qnt;
						    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d balas calibre 5.56mm no slot 3.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 4)
					{
						if(VehicleInfo[slot][vpluva4] == 0)
						{
						    VehicleInfo[slot][vpluva4t] = 3;
						    VehicleInfo[slot][vpluva4] = 1;
						    VehicleInfo[slot][vpluva4a] = qnt;
						    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d balas calibre 5.56mm no slot 4.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 5)
					{
						if(VehicleInfo[slot][vpluva5] == 0)
						{
						    VehicleInfo[slot][vpluva5t] = 3;
						    VehicleInfo[slot][vpluva5] = 1;
						    VehicleInfo[slot][vpluva5a] = qnt;
						    PlayerInfo[playerid][pMun556] = PlayerInfo[playerid][pMun556]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d balas calibre 5.56mm no slot 5.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
				}
				else if(strcmp(tmp58,"cartucho",true) == 0)
				{
	  				new tmp4[256];
					tmp4 = strtok(params,idx);
					if(!strlen(tmp4))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [guardar] [cartucho] [slot 1-5] [Quantidade]");
						return 1;
					}
					new slote = strval(tmp4);
					if( slote < 1 || slote > 5) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [guardar] [cartucho] [slot 1-5] [Quantidade]");
					new tmp88[256];
					tmp88 = strtok(params,idx);
					if(!strlen(tmp88))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [guardar] [cartucho] [slot 1-5] [Quantidade]");
						return 1;
					}
					new qnt = strval(tmp88);
					if(qnt < 1 || qnt > 99999) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [guardar] [cartucho] [slot 1-5] [Quantidade]");

					if(PlayerInfo[playerid][pMunCart] < qnt) return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não tem tudo isso de munição.");

					if(slote == 1)
					{
						if(VehicleInfo[slot][vpluva1] == 0)
						{
						    VehicleInfo[slot][vpluva1t] = 4;
						    VehicleInfo[slot][vpluva1] = 1;
						    VehicleInfo[slot][vpluva1a] = qnt;
						    PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d cartuchos no slot 1.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 2)
					{
						if(VehicleInfo[slot][vpluva2] == 0)
						{
						    VehicleInfo[slot][vpluva2t] = 4;
						    VehicleInfo[slot][vpluva2] = 1;
						    VehicleInfo[slot][vpluva2a] = qnt;
						    PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d cartuchos no slot 2.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 3)
					{
						if(VehicleInfo[slot][vpluva3] == 0)
						{
						    VehicleInfo[slot][vpluva3t] = 4;
						    VehicleInfo[slot][vpluva3] = 1;
						    VehicleInfo[slot][vpluva3a] = qnt;
						    PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d cartuchos no slot 3.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 4)
					{
						if(VehicleInfo[slot][vpluva4] == 0)
						{
						    VehicleInfo[slot][vpluva4t] = 4;
						    VehicleInfo[slot][vpluva4] = 1;
						    VehicleInfo[slot][vpluva4a] = qnt;
						    PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d cartuchos no slot 4.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 5)
					{
						if(VehicleInfo[slot][vpluva5] == 0)
						{
						    VehicleInfo[slot][vpluva5t] = 4;
						    VehicleInfo[slot][vpluva5] = 1;
						    VehicleInfo[slot][vpluva5a] = qnt;
						    PlayerInfo[playerid][pMunCart] = PlayerInfo[playerid][pMunCart]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d cartuchos no slot 5.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
				}
				else if(strcmp(tmp58,"127",true) == 0)
				{
	  				new tmp4[256];
					tmp4 = strtok(params,idx);
					if(!strlen(tmp4))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [guardar] [cartucho] [slot 1-5] [Quantidade]");
						return 1;
					}
					new slote = strval(tmp4);
					if( slote < 1 || slote > 5) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [guardar] [cartucho] [slot 1-5] [Quantidade]");
					new tmp88[256];
					tmp88 = strtok(params,idx);
					if(!strlen(tmp88))
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [guardar] [cartucho] [slot 1-5] [Quantidade]");
						return 1;
					}
					new qnt = strval(tmp88);
					if(qnt < 1 || qnt > 99999) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /portaluvas [guardar] [cartucho] [slot 1-5] [Quantidade]");

					if(PlayerInfo[playerid][pMun556] < qnt) return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não tem tudo isso de munição.");

					if(slote == 1)
					{
						if(VehicleInfo[slot][vpluva1] == 0)
						{
						    VehicleInfo[slot][vpluva1t] = 5;
						    VehicleInfo[slot][vpluva1] = 1;
						    VehicleInfo[slot][vpluva1a] = qnt;
						    PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d balas calibre 12.7x106mm no slot 1.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 2)
					{
						if(VehicleInfo[slot][vpluva2] == 0)
						{
						    VehicleInfo[slot][vpluva2t] = 5;
						    VehicleInfo[slot][vpluva2] = 1;
						    VehicleInfo[slot][vpluva2a] = qnt;
						    PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d balas calibre 12.7x106mm no slot 2.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 3)
					{
						if(VehicleInfo[slot][vpluva3] == 0)
						{
						    VehicleInfo[slot][vpluva3t] = 5;
						    VehicleInfo[slot][vpluva3] = 1;
						    VehicleInfo[slot][vpluva3a] = qnt;
						    PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d balas calibre 12.7x106mm no slot 3.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 4)
					{
						if(VehicleInfo[slot][vpluva4] == 0)
						{
						    VehicleInfo[slot][vpluva4t] = 5;
						    VehicleInfo[slot][vpluva4] = 1;
						    VehicleInfo[slot][vpluva4a] = qnt;
						    PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d balas calibre 12.7x106mm no slot 4.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
					if(slote == 5)
					{
						if(VehicleInfo[slot][vpluva5] == 0)
						{
						    VehicleInfo[slot][vpluva5t] = 5;
						    VehicleInfo[slot][vpluva5] = 1;
						    VehicleInfo[slot][vpluva5a] = qnt;
						    PlayerInfo[playerid][pMun127] = PlayerInfo[playerid][pMun127]-qnt;

							format(_string, 128, "[Porta-Luvas] Você guardou uma caixa com %d balas calibre 12.7x106mm no slot 5.", qnt);
						    SendClientMessage(playerid, COLOR_LIGHTGREEN,_string);
						    SaveVehicle(slot);
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Já tem alguma coisa neste slot do porta luvas.");
					}
				}
			//}
          	//else return SendClientMessage(playerid, COLOR_WHITE,"{FF6347}O portamalas do veículo está fechado.");
		}
		if(strcmp(tmp2,"retirar",true) == 0)
		{
		    //GetVehicleParamsEx(carid, engine, lights, alarm,doors,bonnet,boot,objective);
		    //if(boot == 1)
       		//{
		    	new tmp4[256];
				tmp4 = strtok(params,idx);
				if(!strlen(tmp4))
				{
					SendClientMessage(playerid,COLOR_LIGHTRED,"{FF6347}SINTAXE:{FFFFFF} /portaluvas [retirar] [slot 1-5]");
					return 1;
				}
				new slote = strval(tmp4);
				if( slote < 1 || slote > 5) return SendClientMessage(playerid,COLOR_LIGHTRED,"{FF6347}SINTAXE:{FFFFFF} /portaluvas [retirar][slot 1-5]");
				if(slote == 1)
				{
					if(VehicleInfo[slot][vpluva1] != 0)
					{
					    if(VehicleInfo[slot][vpluva1t] == 1)
					    {
						    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
                            PlayerInfo[playerid][pArmaMao] = VehicleInfo[slot][vpluva1];
                            new armaid = VehicleInfo[slot][vpluva1];
							new ArmaModel = ArmaData[VehicleInfo[slot][vpluva1]][ArmaModelo];
						    GivePlayerWeapon(playerid,ArmaModel, VehicleInfo[slot][vpluva1a]);
							ArmaData[armaid][ArmaCom] = PlayerInfo[playerid][pID];

							if(ArmaData[armaid][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vpluva1]][ArmaRGB]);
							else SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vpluva1]][ArmaRGB]);
   							FloodCMD[playerid] = gettime()+2;

							format(_string, 128, "[Porta-Luvas] Você retirou a sua %s com %d balas no Slot 1.", GunNames[ArmaModel], VehicleInfo[slot][vpluva1a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

							new strl[126];
							format(strl, sizeof(strl), "%s retirou a sua %s com %d balas no Slot 1. [ %d ]", PlayerName(playerid,0), GunNames[ArmaModel], VehicleInfo[slot][vpluva1a], ArmaData[armaid][ArmaNumeracao]);
							Retirar_PortaLuvas(strl);

							VehicleInfo[slot][vpluva1t] = 0;
							VehicleInfo[slot][vpluva1] = 0;
							VehicleInfo[slot][vpluva1a] = 0;
							SaveVehicle(slot);
						 	SalvarArma(armaid);
						}
						if(VehicleInfo[slot][vpluva1t] == 2)
		    	    	{
		    	    	    PlayerInfo[playerid][pMun9mm] += VehicleInfo[slot][vpluva1a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d balas calibre 9mm do Slot 1.", VehicleInfo[slot][vpluva1a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva1t] = 0;
							VehicleInfo[slot][vpluva1] = 0;
							VehicleInfo[slot][vpluva1a] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vpluva1t] == 3)
		    	    	{
	    					PlayerInfo[playerid][pMun556] += VehicleInfo[slot][vpluva1a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d balas calibre 5.56mm do slot 1.", VehicleInfo[slot][vpluva1a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva1t] = 0;
							VehicleInfo[slot][vpluva1] = 0;
							VehicleInfo[slot][vpluva1a] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vpluva1t] == 4)
		    	    	{
	    					PlayerInfo[playerid][pMunCart] += VehicleInfo[slot][vpluva1a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d cartuchos do slot 1.", VehicleInfo[slot][vpluva1a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva1t] = 0;
							VehicleInfo[slot][vpluva1] = 0;
							VehicleInfo[slot][vpluva1a] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vpluva1t] == 5)
		    	    	{
	    					PlayerInfo[playerid][pMun127] += VehicleInfo[slot][vpluva1a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d balas calibre 12.7x106mm do slot 1.", VehicleInfo[slot][vpluva1a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva1t] = 0;
							VehicleInfo[slot][vpluva1] = 0;
							VehicleInfo[slot][vpluva1a] = 0;
							SaveVehicle(slot);
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada neste slot do porta luvas.");
				}
				if(slote == 2)
				{
					if(VehicleInfo[slot][vpluva2] != 0)
					{
	    				if(VehicleInfo[slot][vpluva2t] == 1)
					    {
					    	if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
          					PlayerInfo[playerid][pArmaMao] = VehicleInfo[slot][vpluva2];
               				new armaid = VehicleInfo[slot][vpluva2];
							new ArmaModel = ArmaData[VehicleInfo[slot][vpluva2]][ArmaModelo];
			    			GivePlayerWeapon(playerid,ArmaModel,VehicleInfo[slot][vpluva2a]);
							ArmaData[armaid][ArmaCom] = PlayerInfo[playerid][pID];
							FloodCMD[playerid] = gettime()+2;

						    if(ArmaData[armaid][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vpluva2]][ArmaRGB]);
						    else SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vpluva2]][ArmaRGB]);

							format(_string, 128, "[Porta-Luvas] Você retirou a sua %s com %d balas no slot 2.", GunNames[ArmaModel], VehicleInfo[slot][vpluva2a]);
				   			SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

				   			new strl[126];
							format(strl, sizeof(strl), "%s retirou a sua %s com %d balas no slot 2. [ %d ]", PlayerName(playerid,0), GunNames[ArmaModel], VehicleInfo[slot][vpluva2a], ArmaData[armaid][ArmaNumeracao]);
							Retirar_PortaLuvas(strl);

							VehicleInfo[slot][vpluva2t] = 0;
						    VehicleInfo[slot][vpluva2] = 0;
						    VehicleInfo[slot][vpluva2a] = 0;
						    SaveVehicle(slot);
						    SalvarArma(armaid);
						}
                        if(VehicleInfo[slot][vpluva2t] == 2)
		    	    	{
		    	    	    PlayerInfo[playerid][pMun9mm] += VehicleInfo[slot][vpluva2a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d balas calibre 9mm do slot 2.", VehicleInfo[slot][vpluva2a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva2t] = 0;
							VehicleInfo[slot][vpluva2] = 0;
							VehicleInfo[slot][vpluva2a] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vpluva2t] == 3)
		    	    	{
	    					PlayerInfo[playerid][pMun556] += VehicleInfo[slot][vpluva2a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d balas calibre 5.56mm do slot 2.", VehicleInfo[slot][vpluva2a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva2t] = 0;
							VehicleInfo[slot][vpluva2] = 0;
							VehicleInfo[slot][vpluva2a] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vpluva2t] == 4)
		    	    	{
	    					PlayerInfo[playerid][pMunCart] += VehicleInfo[slot][vpluva2a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d cartuchos do slot 2.", VehicleInfo[slot][vpluva2a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva2t] = 0;
							VehicleInfo[slot][vpluva2] = 0;
							VehicleInfo[slot][vpluva2a] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vpluva2t] == 5)
		    	    	{
	    					PlayerInfo[playerid][pMun127] += VehicleInfo[slot][vpluva2a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d balas calibre 12.7x106mm do Slot 2.", VehicleInfo[slot][vpluva2a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva2t] = 0;
							VehicleInfo[slot][vpluva2] = 0;
							VehicleInfo[slot][vpluva2a] = 0;
							SaveVehicle(slot);
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada neste slot do porta luvas.");
				}
				if(slote == 3)
				{
					if(VehicleInfo[slot][vpluva3] != 0)
					{
					    if(VehicleInfo[slot][vpluva3t] == 1)
					    {
						    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
                           	PlayerInfo[playerid][pArmaMao] = VehicleInfo[slot][vpluva3];
                           	new armaid = VehicleInfo[slot][vpluva3];
							new ArmaModel = ArmaData[VehicleInfo[slot][vpluva3]][ArmaModelo];
						    GivePlayerWeapon(playerid,ArmaModel,VehicleInfo[slot][vpluva3a]);
							ArmaData[armaid][ArmaCom] = PlayerInfo[playerid][pID];
							if(ArmaData[armaid][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vpluva3]][ArmaRGB]);
							else SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vpluva3]][ArmaRGB]);
   							FloodCMD[playerid] = gettime()+2;

							format(_string, 128, "[Porta-Luvas] Você retirou a sua %s com %d balas no Slot 3.", GunNames[ArmaModel], VehicleInfo[slot][vpluva3a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

							new strl[126];
							format(strl, sizeof(strl), "%s retirou a sua %s com %d balas no Slot 3. [ %d ]", PlayerName(playerid,0), GunNames[ArmaModel], VehicleInfo[slot][vpluva3a], ArmaData[armaid][ArmaNumeracao]);
							Retirar_PortaLuvas(strl);

							VehicleInfo[slot][vpluva3t] = 0;
							VehicleInfo[slot][vpluva3] = 0;
							VehicleInfo[slot][vpluva3a] = 0;
							SaveVehicle(slot);
							SalvarArma(armaid);
						}
						if(VehicleInfo[slot][vpluva3t] == 2)
		    	    	{
		    	    	    PlayerInfo[playerid][pMun9mm] += VehicleInfo[slot][vpluva3a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d balas calibre 9mm do Slot 3.", VehicleInfo[slot][vpluva3a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva3t] = 0;
							VehicleInfo[slot][vpluva3] = 0;
							VehicleInfo[slot][vpluva3a] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vpluva3t] == 3)
		    	    	{
	    					PlayerInfo[playerid][pMun556] += VehicleInfo[slot][vpluva3a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d balas calibre 5.56mm do Slot 3.", VehicleInfo[slot][vpluva3a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva3t] = 0;
							VehicleInfo[slot][vpluva3] = 0;
							VehicleInfo[slot][vpluva3a] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vpluva3t] == 4)
		    	    	{
	    					PlayerInfo[playerid][pMunCart] += VehicleInfo[slot][vpluva3a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d cartuchos do Slot 3.", VehicleInfo[slot][vpluva3a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva3t] = 0;
							VehicleInfo[slot][vpluva3] = 0;
							VehicleInfo[slot][vpluva3a] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vpluva3t] == 5)
		    	    	{
	    					PlayerInfo[playerid][pMun127] += VehicleInfo[slot][vpluva3a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d balas calibre 12.7x106mm do Slot 3.", VehicleInfo[slot][vpluva3a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva3t] = 0;
							VehicleInfo[slot][vpluva3] = 0;
							VehicleInfo[slot][vpluva3a] = 0;
							SaveVehicle(slot);
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada neste slot do porta luvas.");
				}
				if(slote == 4)
				{
					if(VehicleInfo[slot][vpluva4] != 0)
					{
	    				if(VehicleInfo[slot][vpluva4t] == 1)
					    {
					    	if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
          					PlayerInfo[playerid][pArmaMao] = VehicleInfo[slot][vpluva4];
          					new armaid = VehicleInfo[slot][vpluva4];
							new ArmaModel = ArmaData[VehicleInfo[slot][vpluva4]][ArmaModelo];
						    GivePlayerWeapon(playerid,ArmaModel,VehicleInfo[slot][vpluva4a]);
							ArmaData[armaid][ArmaCom] = PlayerInfo[playerid][pID];

						    if(ArmaData[armaid][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vpluva4]][ArmaRGB]);
						    else SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vpluva4]][ArmaRGB]);
   							FloodCMD[playerid] = gettime()+2;

						    format(_string, 128, "[Porta-Luvas] Você retirou a sua %s com %d balas no Slot 4.", GunNames[ArmaModel], VehicleInfo[slot][vpluva4a]);
						    SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

						    new strl[126];
							format(strl, sizeof(strl), "%s retirou a sua %s com %d balas no Slot 4. [ %d ]", PlayerName(playerid,0), GunNames[ArmaModel], VehicleInfo[slot][vpluva4a], ArmaData[armaid][ArmaNumeracao]);
							Retirar_PortaLuvas(strl);

						    VehicleInfo[slot][vpluva4t] = 0;
						    VehicleInfo[slot][vpluva4] = 0;
						    VehicleInfo[slot][vpluva4a] = 0;
						    SaveVehicle(slot);
						    SalvarArma(armaid);
						}
						if(VehicleInfo[slot][vpluva4t] == 2)
		    	    	{
		    	    	    PlayerInfo[playerid][pMun9mm] += VehicleInfo[slot][vpluva4a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d balas calibre 9mm do Slot 4.", VehicleInfo[slot][vpluva4a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva4t] = 0;
							VehicleInfo[slot][vpluva4] = 0;
							VehicleInfo[slot][vpluva4a] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vpluva4t] == 3)
		    	    	{
	    					PlayerInfo[playerid][pMun556] += VehicleInfo[slot][vpluva4a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d balas calibre 5.56mm do Slot 4.", VehicleInfo[slot][vpluva4a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva4t] = 0;
							VehicleInfo[slot][vpluva4] = 0;
							VehicleInfo[slot][vpluva4a] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vpluva4t] == 4)
		    	    	{
	    					PlayerInfo[playerid][pMunCart] += VehicleInfo[slot][vpluva4a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d cartuchos do Slot 4.", VehicleInfo[slot][vpluva4a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva4t] = 0;
							VehicleInfo[slot][vpluva4] = 0;
							VehicleInfo[slot][vpluva4a] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vpluva4t] == 5)
		    	    	{
	    					PlayerInfo[playerid][pMun127] += VehicleInfo[slot][vpluva4a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d balas calibre 12.7x106mm do Slot 4.", VehicleInfo[slot][vpluva4a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva4t] = 0;
							VehicleInfo[slot][vpluva4] = 0;
							VehicleInfo[slot][vpluva4a] = 0;
							SaveVehicle(slot);
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada neste slot do porta luvas.");
				}
				if(slote == 5)
				{
					if(VehicleInfo[slot][vpluva5] != 0)
					{
					    if(VehicleInfo[slot][vpluva5t] == 1)
					    {
						    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem uma arma em mãos.");
                         	PlayerInfo[playerid][pArmaMao] = VehicleInfo[slot][vpluva5];
                          	new armaid = VehicleInfo[slot][vpluva5];
							new ArmaModel = ArmaData[VehicleInfo[slot][vpluva5]][ArmaModelo];

						 	GivePlayerWeapon(playerid,ArmaModel,VehicleInfo[slot][vpluva5a]);
							ArmaData[armaid][ArmaCom] = PlayerInfo[playerid][pID];
							FloodCMD[playerid] = gettime()+2;

							if(ArmaData[armaid][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vpluva5]][ArmaRGB]);
							else SetPlayerAttachedObject(playerid, 0, ArmaData[armaid][ArmaExtra], 6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1, 1, 1, ArmaData[VehicleInfo[slot][vpluva5]][ArmaRGB]);

							format(_string, 128, "[Porta-Luvas] Você retirou a sua %s com %d balas no Slot 5.", GunNames[ArmaModel], VehicleInfo[slot][vpluva5a]);
			    			SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

			    			new strl[126];
							format(strl, sizeof(strl), "%s retirou a sua %s com %d balas no Slot 5. [ %d ]", PlayerName(playerid,0), GunNames[ArmaModel], VehicleInfo[slot][vpluva5a], ArmaData[armaid][ArmaNumeracao]);
							Retirar_PortaLuvas(strl);

							VehicleInfo[slot][vpluva5t] = 0;
   							VehicleInfo[slot][vpluva5] = 0;
			    			VehicleInfo[slot][vpluva5a] = 0;
						    SaveVehicle(slot);
						    SalvarArma(armaid);
						}
						if(VehicleInfo[slot][vpluva5t] == 2)
		    	    	{
		    	    	    PlayerInfo[playerid][pMun9mm] += VehicleInfo[slot][vpluva5a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d balas calibre 9mm do Slot 5.", VehicleInfo[slot][vpluva5a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva5t] = 0;
							VehicleInfo[slot][vpluva5] = 0;
							VehicleInfo[slot][vpluva5a] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vpluva5t] == 3)
		    	    	{
	    					PlayerInfo[playerid][pMun556] += VehicleInfo[slot][vpluva5a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d balas calibre 5.56mm do Slot 5.", VehicleInfo[slot][vpluva5a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva5t] = 0;
							VehicleInfo[slot][vpluva5] = 0;
							VehicleInfo[slot][vpluva5a] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vpluva5t] == 4)
		    	    	{
	    					PlayerInfo[playerid][pMunCart] += VehicleInfo[slot][vpluva5a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d cartuchos do Slot 5.", VehicleInfo[slot][vpluva5a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva5t] = 0;
							VehicleInfo[slot][vpluva5] = 0;
							VehicleInfo[slot][vpluva5a] = 0;
							SaveVehicle(slot);
						}
						if(VehicleInfo[slot][vpluva5t] == 5)
		    	    	{
	    					PlayerInfo[playerid][pMun127] += VehicleInfo[slot][vpluva5a];

		    	    	    format(_string, 128, "[Porta-Luvas] Você retirou uma caixa com %d balas calibre 12.7x106mm do Slot 5.", VehicleInfo[slot][vpluva5a]);
							SendClientMessage(playerid,COLOR_LIGHTGREEN,_string);

		    	    	    VehicleInfo[slot][vpluva5t] = 0;
							VehicleInfo[slot][vpluva5] = 0;
							VehicleInfo[slot][vpluva5a] = 0;
							SaveVehicle(slot);
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há nada neste slot do porta luvas.");
				}
			//}
          	//else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} O portamalas do veículo está fechado.");
		}
	}
	return 1;
}
CMD:ligaralugado(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
    if(RentCarKey[playerid] == vehicleid && IsVehicleRented(vehicleid))
    {
		{
			SendClientMessage(playerid,COLOR_GREEN,"Você ligou o motor do veículo.");
			StartEngine(GetPlayerVehicleID(playerid));
			return 1;
		}
	}
	return 1;
}
CMD:desligaralugado(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
    if(RentCarKey[playerid] == vehicleid && IsVehicleRented(vehicleid))
    {
		{
			SendClientMessage(playerid,COLOR_GREEN,"Você desligou o motor do veículo.");
			StopEngine(GetPlayerVehicleID(playerid));
			return 1;
		}
	}
	return 1;
}
CMD:alugarveiculo(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
    if(IsVehicleRental(vehicleid))
    {
        if(RentCarKey[playerid] != vehicleid && !IsVehicleRented(vehicleid))
        {
			new cost = GetVehicleRentalPrice(GetVehicleModel(vehicleid));
			if(PlayerInfo[playerid][pGrana] >= cost)
			{
		        /*if(RentCarKey[playerid] != 9999)
		        {
					SetVehicleToRespawn(RentCarKey[playerid]);
		            RentCarKey[playerid] = 9999;
		        }
				*/
			    RentCarKey[playerid] = GetPlayerVehicleID(playerid);
			    PlayerInfo[playerid][pGrana] -= cost;
				SendClientMessage(playerid,COLOR_GREEN,"Você alugou um veículo, para desalugar, digite: /desalugarveiculo");
                SendClientMessage(playerid,COLOR_WHITE,"DICA: /ligaralugado para ligar o veículo.");
                SendClientMessage(playerid,COLOR_WHITE,"DICA: /desligaralugado para desligar o veículo.");
				StartEngine(GetPlayerVehicleID(playerid));
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro suficiente!");
        }
        else return SendClientMessage(playerid, COLOR_LIGHTRED,"Este veículo já foi alugado!");
    }
    else return GameTextForPlayer(playerid, "~r~Você deve estar em um veículo.", 5000, 1);
}

CMD:desalugarveiculo(playerid)
{
	if(RentCarKey[playerid] != 9999)
 	{
 	    SetVehicleToRespawn(RentCarKey[playerid]);
        RentCarKey[playerid] = 9999;
		StopEngine(GetPlayerVehicleID(playerid));

        return SendClientMessage(playerid,COLOR_GREEN,"Você desalugou o veículo.");
 	}
 	else return GameTextForPlayer(playerid, "~r~Você deve estar em um veículo.", 5000, 1);
}


COMMAND:veiculo(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new idx = 0;
	new tmp[256];
	tmp = strtok(params,idx);
	if(!strlen(tmp))
	{
        SendClientMessage(playerid, COLOR_VEICULO,"____________________________________________________");
		SendClientMessage(playerid, COLOR_VEICULO,"USE: /(v)eiculo [ação] [valor(se necessário)]");
		SendClientMessage(playerid, COLOR_VEICULO,"[Ações] lista, spawn, estacionar, vender, luzes");
		SendClientMessage(playerid, COLOR_VEICULO,"[Ações] darchave, capo, neon, encontrar, remontar");
		SendClientMessage(playerid, COLOR_VEICULO,"[Ações] estacionarcarreta, contratarseguro, cancelarseguro");
		SendClientMessage(playerid, COLOR_VEICULO,"[Deletar] deletar (Aviso: deleta seu carro definitivamente)");
		SendClientMessage(playerid, COLOR_VEICULO,"[Inventário] /portamalas | [Outros] /freio /desapreender");
		SendClientMessage(playerid, COLOR_VEICULO, "Use /aceitarcobranca para ter o veículo de volta.");
		SendClientMessage(playerid, COLOR_VEICULO,"____________________________________________________");
		return 1;
	}

	if(strcmp(tmp,"remontar",true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid,7.5,1500.2792,-1241.3109,14.5563))
		{
		    new tmp2[32];
		    tmp2 = strtok(params,idx);
			if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"USO: /v remontar [Slot do veículo (/v lista)]"); return 1; }
			new slot = strval(tmp2);
			if(slot < 1) { SendClientMessage(playerid,COLOR_LIGHTRED,"O slot não pode ser menor que 1."); return 1; }
			RemontarCarro(playerid,slot);
		    return 1;
		}
		else
		{
		    SendClientMessage(playerid,COLOR_LIGHTRED,"Você não esta na agência de seguros. (Marcada no mapa)");
		    SetPlayerCheckpoint(playerid,1500.2792,-1241.3109,14.5563,5.0);
		    cp_target[playerid] = 2;
		    return 1;
		}
	}

	if(strcmp(tmp,"guardarmalote",true) == 0)
	{
 		if(!PlayerToPortaMalasCar(playerid,1,3.0)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo de um Securicar.");
 		new carid = PlayerToPortaMalasCar(playerid,2,3.0);
		new slot = GetVehicleSlot(carid);
		if(slot > -1)
		{
  			if(GetVehicleModel(carid) == 428)
    		{
				if(VehicleInfo[slot][vMalote]  < 11)
   				{
		    		VehicleInfo[slot][vMalote]++;
					RemovePlayerAttachedObject(playerid, 0);
   					SECURITY_SEGURANDOMALOTE[playerid] = 0;
   	    			SendClientMessage(playerid, COLOR_WHITE, "Você pode pegar mais um malote com o NPC {698596}SEGURANÇA{FFFFFF}.");
      	    		SendClientMessage(playerid, COLOR_WHITE, "Ou você pode ir entregar o(s) que já pegou usando o comando {698596}/entregarmalotes{FFFFFF}.");
             		SaveVehicle(slot);
					return 1;
				}
   				else
   				{
  	    			SendClientMessage(playerid, COLOR_WHITE, "O caminhão já está com muitos malotes. Use {698596}/entregarmalotes{FFFFFF} para iniciar as entregas.");
          			company_work_stage[playerid] = 4;
          			return 1;
				}
			}
			else return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não está próximo de um Securicar.");
		}
		else return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não está em um veiculo, ou este veiculo não tem essa função.");
	}
	if(strcmp(tmp,"pegarmalote",true) == 0)
	{
 		if(!PlayerToPortaMalasCar(playerid,1,5.0)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a um veículo.");
 		new carid = PlayerToPortaMalasCar(playerid,2,5.0);
		new slot = GetVehicleSlot(carid);
		if(slot > -1)
		{
 			if(GetVehicleModel(carid) == 428)
   			{
				if(VehicleInfo[slot][vMalote] > 0)
 				{
  					VehicleInfo[slot][vMalote]--;
   					SetPlayerAttachedObject( playerid, 0, 1210,5,0.3,0.1,0.0,0.0,270.0,0.0);
					SECURITY_SEGURANDOMALOTE[playerid] = 1;
					SendClientMessageA(playerid,-1,"Você pegou um malote do caminhão.");
					SaveVehicle(slot);
					return 1;
				}
				else return SendClientMessage(playerid,COLOR_LIGHTRED,"Este veiculo está sem Malotes.");
			}
			else return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não está próximo de um Securicar.");
		}
		else return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não está em um veiculo, ou este veiculo não tem essa função.");
	}
	if(strcmp(tmp,"neon",true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
	        if(slot > -1)
	        {
	            if(VehicleInfo[slot][vNeon] > 0)
	            {
	                VehicleInfo[slot][vNeonState] = !VehicleInfo[slot][vNeonState];
	                RefreshNeon(slot);
	                return 1;
	            }
	            else
	            {
					SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Este veículo não possui luzes de neon.");
					return 1;
	            }
			}
			else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Este veículo não pode ter neon.");
	    }
	    else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar em um veículo.");
	}
	if(strcmp(tmp,"encontrar",true) == 0)
	{
		if(find_cooldown[playerid] == 0)
		{
 		   	new tmp2[64];
			tmp2 = strtok(params,idx);
		    if(!strlen(tmp2)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /(v)eiculo [encontrar] [Slot]"); return 1; }
		    new offset = strval(tmp2);
		    if(offset < 1) { SendClientMessageA(playerid,COLOR_LIGHTRED,"{FF6347}ERRO:{FFFFFF} Slot do veículo inválido."); return 1; }
			FindPlayerVehicle(playerid,offset);
			return 1;
		}
		else return SendClientMessage(playerid,COLOR_LIGHTRED,"{FF6347}ERRO:{FFFFFF} Você só pode utilizar o GPS do veículo uma vez a cada cinco minutos.");
	}
	if(strcmp(tmp,"capo",true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    new vehicleid = GetPlayerVehicleID(playerid);
		    new param[7];
			GetVehicleParamsEx(vehicleid,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
			if(param[4])
			{
				SetVehicleParamsEx(vehicleid,param[0],param[1],param[2],param[3],0,param[5],param[6]);
				return 1;
			}
			else
			{
				SetVehicleParamsEx(vehicleid,param[0],param[1],param[2],param[3],1,param[5],param[6]);
				return 1;
			}
		}
		else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar em um veiculo.");
	}
	if(strcmp(tmp,"luzes",true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    new vehicleid = GetPlayerVehicleID(playerid);
		    new param[7];
			GetVehicleParamsEx(vehicleid,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
			if(param[1]) SetVehicleParamsEx(vehicleid,param[0],0,param[2],param[3],param[4],param[5],param[6]);
			else SetVehicleParamsEx(vehicleid,param[0],1,param[2],param[3],param[4],param[5],param[6]);
			return 1;
		}
		else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar em um veiculo.");
	}
	if(strcmp(tmp,"darchave",true) == 0)
	{
		new tmp2[64];
		tmp2 = strtok(params,idx);
		if(!strlen(tmp2))
		{ SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /(v)eiculo [darchave] [ID] [slot]"); return 1; }
		new other = ReturnUser(tmp2);
		if(!PlayerInfo[other][pLogado])
		{ SendClientMessageA(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado."); return 1; }
		if(GetDistanceBetweenPlayers(playerid,other) < 7.5)
		{
		    new tmp3[64];
		    tmp3 = strtok(params,idx);
		    if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /(v)eiculo [darchave] [ID] [slot]"); return 1; }
		    new slot = strval(tmp3);
			GiveCarKey(playerid,other,slot);
			return 1;
		}
		else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta perto deste jogador.");
	}
	if(strcmp(tmp,"deletar",true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
	        if(slot > -1)
	        {
	            if(VehicleInfo[slot][vOwner] == GetCharacterID(playerid))
	            {
	                if(IsPlayerInRangeOfPoint(playerid,10.0,2408.4861,-1427.5201,23.9904))//checar
	                {
						new vname[128];
	                    GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
	                    new str[256];
	                    new scrapprice = floatround((GetVehiclePrice(VehicleInfo[slot][vModel]) * 0.35));

	                    if(VehicleInfo[slot][vAjudaIni] == 1)
	                    {
	                        scrapprice = 0;
	                        format(str,sizeof(str),"Você está prestes à sucatear o seu %s por R$0 [AJUDA INICIAL]. Você tem certeza disto?",vname);
	                    	ShowPlayerDialog(playerid,DIALOG_SCRAPCAR,DIALOG_STYLE_MSGBOX,"Você está prestes a deletar um veículo.",str,"Confirmar","Cancelar");
	                    }
	                    else
	                    {
	                        format(str,sizeof(str),"Você está prestes à sucatear o seu %s por R$%d. Você tem certeza disto?",vname,scrapprice);
	                    	ShowPlayerDialog(playerid,DIALOG_SCRAPCAR,DIALOG_STYLE_MSGBOX,"Você está prestes a deletar um veículo.",str,"Confirmar","Cancelar");
	                    }
	                    return 1;
					}
					else
					{
					    SendClientMessage(playerid,COLOR_LIGHTRED,"AVISO: Você não está próximo ao ponto do ferro velho. Um checkpoint foi adicionado ao seu mapa.");
						SetPlayerCheckpoint(playerid,2408.4861,-1427.5201,23.9904,15.0);
						going_to_scrap[playerid] = 1;
						return 1;
					}
	            }
	            else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta em um de seus veiculos.");
	        }
	        else return SendClientMessage(playerid,COLOR_LIGHTRED,"{FF6347}ERRO:{FFFFFF} Este veiculo não permite esta ação.");
	    }
	    else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta em seu veiculo.");
	}
	if(strcmp(tmp,"vender",true) == 0)
	{
		new tmp2[64];
		tmp2 = strtok(params,idx);
		if(!strlen(tmp2)) { SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /v(eiculo) vender [ID do Jogador] [slot] [preço]{FFFFFF}"); return 1; }
		new other = ReturnUser(tmp2);
		if(!PlayerInfo[other][pLogado]) { SendClientMessageA(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado."); return 1; }
		if(GetDistanceBetweenPlayers(playerid,other) < 7.5)
		{
		    new tmp3[64];
		    tmp3 = strtok(params,idx);
		    if(!strlen(tmp3)) { SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /v(eiculo) vender [ID do Jogador] [slot] [preço]{FFFFFF}"); return 1; }
		    new slot = strval(tmp3);
		    new tmp4[64];
		    tmp4 = strtok(params,idx);
		    if(!strlen(tmp4)) { SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /v(eiculo) vender [ID do Jogador] [slot] [preço]{FFFFFF}"); return 1; }
		    new amount = strval(tmp4);
		    if(amount < 1 || amount > 9999999) { SendClientMessageA(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Preço inválido."); return 1; }
			OfferSellCar(playerid,other,slot,amount);
			return 1;
		}
		else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta perto deste jogador.");
	}
	if(strcmp(tmp,"spawn",true) == 0)
	{
	    new tmp2[64];
	    tmp2 = strtok(params,idx);
	    if(!strlen(tmp2)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /(v)veiculo [spawn] [slot] (/v lista)"); return 1; }
	    new offset = strval(tmp2);
	    if(offset < 1) { SendClientMessageA(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Slot inválido!"); return 1; }
   		SpawnVeiculo(playerid,offset);
     	return 1;
	}
	if(strcmp(tmp,"lista",true) == 0 || strcmp(tmp,"list",true) == 0)
	{
	    ShowVehicleList(playerid,playerid);
	    return 1;
	}
	if(strcmp(tmp,"trancar",true) == 0 || strcmp(tmp,"lock",true) == 0)
	{
		new veh = GetClosestVehicle(playerid);
  		if(veh > -1)
    	{
	    	new slot = GetVehicleSlot(veh);
		    if(slot > -1)
			{
   				if(VehicleInfo[slot][vOwner] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pChaveEmprestada] == VehicleInfo[slot][vID])
			    {
					if(!VehicleInfo[slot][vLocked])
					{
	    				GameTextForPlayer(playerid,"~r~Veiculo Trancado",3000,4);
					    PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
					    LockVehicle(veh);
					    return 1;
					}
					else
					{
					    GameTextForPlayer(playerid,"~g~Veiculo Destrancado",3000,4);
					    PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
					    UnlockVehicle(veh);
					    return 1;
					}
				}
				else if(IsPlayerInAnyVehicle(playerid) && !IsVehicleRental(playerid))
			    {
					if(!VehicleInfo[slot][vLocked])
					{
	    				GameTextForPlayer(playerid,"~r~Veiculo Trancado",3000,4);
					    PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
					    LockVehicle(veh);
					    return 1;
					}
					else
					{
					    GameTextForPlayer(playerid,"~g~Veiculo Destrancado",3000,4);
					    PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
					    UnlockVehicle(veh);
					    return 1;
					}
				}
				else if(PlayerInfo[playerid][pFac] > 0)
			    {
			        if(PlayerInfo[playerid][pFac] == VehicleInfo[slot][vFaction])
			        {
						if(!VehicleInfo[slot][vLocked])
						{
						    GameTextForPlayer(playerid,"~r~Veiculo Trancado",3000,4);
						    PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
						    LockVehicle(veh);
						    return 1;
						}
						else
						{
						    GameTextForPlayer(playerid,"~g~Veiculo Destrancado",3000,4);
						    PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
						    UnlockVehicle(veh);
						    return 1;
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta proximo a nenhum de seus veiculos.");
				}
				else if(VehicleInfo[slot][vCompany] > 0)
				{
				    if(PlayerInfo[playerid][pJob] == VehicleInfo[slot][vCompany])
			        {
						if(!VehicleInfo[slot][vLocked])
						{
						    GameTextForPlayer(playerid,"~r~Veiculo Trancado",3000,4);
						    PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
						    LockVehicle(veh);
						    return 1;
						}
						else
						{
						    GameTextForPlayer(playerid,"~g~Veiculo Destrancado",3000,4);
						    PlayerPlaySound(playerid,1145,0.0,0.0,0.0);
						    UnlockVehicle(veh);
						    return 1;
						}
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta proximo a nenhum de seus veiculos.");
				}
			    else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta proximo a nenhum de seus veiculos.");
			}
			else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta proximo de um veiculo seu trancavel.");
		}
	    else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a um veículo.");
	}
    if(strcmp(tmp,"contratarseguro",true) == 0)
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            new veh = GetPlayerVehicleID(playerid);
            new slot = GetVehicleSlot(veh);
            if(slot > -1)
            {
                if(VehicleInfo[slot][vInsurance] > 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem um seguro.");
                if( GetNearestTGarage( playerid ) != -1 )
                {
                    if(VehicleInfo[slot][vOwner] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pChaveEmprestada] == VehicleInfo[slot][vID])
                    {
                        new price = FetchVehicleInsurancePrice(VehicleInfo[slot][vModel]);
                        if(price > -1)
                        {
                            new vname[36];
                            GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);

                            format(string,sizeof(string),"\t\t\t\t------ RJ Seguros ------\n\n \
                            Você está contratando um veículo para o seu %s, pelo valor de R$%d mensais.\n\n \
                            O seu veículo estará protegido contra: \n \
                            \t- Roubo e Furto\n\t- Acidentes Naturais\n\t- Explosões Acidentais \n\n \
                            [Pagamento]\nVocê deverá ter o valor todo mês ((Paycheck)) no banco, se não\nserá cancelado sem aviso prévio.\n",vname, price);
                            SendConfirmationMsg(playerid,string,DIALOG_INSURANCE,price);
                            return 1;
                        }
                        else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Sem preço disponível, contacte um administrador.");
                    }
                    else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não e dono deste veiculo");
                }
                else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta em uma garagem de Tunning.");
            }
            else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não e dono deste veiculo.");
        }
        else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta em seu veiculo.");
    }
	if(strcmp(tmp,"cancelarseguro",true) == 0) {
	    if(IsPlayerInAnyVehicle(playerid)) {
	        new veh = GetPlayerVehicleID(playerid);
	        new slot = GetVehicleSlot(veh);
	        if(slot > -1) {
	            if(VehicleInfo[slot][vInsurance] == 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não tem seguro.");
	            if(VehicleInfo[slot][vInsurance] > 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você ainda não pode cancelar o seguro deste veículo.");

	            if( GetNearestTGarage( playerid ) != -1 ) {
	                if(VehicleInfo[slot][vOwner] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pChaveEmprestada] == VehicleInfo[slot][vID]) {
                        VehicleInfo[slot][vInsurance] = 0;
                        SendClientMessage(playerid,COLOR_LIGHTGREEN, "Você cancelou o seguro do seu veículo.");
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não e dono deste veiculo");
	            }
	            else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta em uma garagem de Tunning.");
	        }
	        else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não e dono deste veiculo.");
	    }
	    else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta em seu veiculo.");
	}
	if(strcmp(tmp,"comprarvaga",true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] > 5)
		{
			if(IsPlayerInAnyVehicle(playerid))
		    {
				new veh = GetPlayerVehicleID(playerid);
				new slot = GetVehicleSlot(veh);
				if(slot > -1)
				{
					if(VehicleInfo[slot][vCompany] > 0)
					{
	    				if(!vehicle_creating)
					    {
					        new Float:X, Float:Y, Float:Z, Float:R;
	        				SaveVehicleDamage(veh);
							GetVehiclePos(veh,X,Y,Z);
							GetVehicleZAngle(veh,R);
							VehicleInfo[slot][vSpawnX] = X;
							VehicleInfo[slot][vSpawnY] = Y;
							VehicleInfo[slot][vSpawnZ] = Z;
							VehicleInfo[slot][vSpawnR] = R;
							VehicleInfo[slot][vInterior] = GetPlayerInterior(playerid);
							VehicleInfo[slot][vWorld] = GetPlayerVirtualWorld(playerid);

							SendClientMessageA(playerid,COLOR_LIGHTGREEN,"Vaga alterada. [Empresa]");

							SaveVehicle(slot);
							return 1;
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Sistema de veiculos sobrecarregado, tente novamente em instantes.");
					}
					else if(VehicleInfo[slot][vFaction] > 0)
					{
	    				if(!vehicle_creating)
					    {
	        				new Float:X, Float:Y, Float:Z, Float:R;
					        SaveVehicleDamage(veh);
							GetVehiclePos(veh,X,Y,Z);
							GetVehicleZAngle(veh,R);
							VehicleInfo[slot][vSpawnX] = X;
							VehicleInfo[slot][vSpawnY] = Y;
							VehicleInfo[slot][vSpawnZ] = Z;
							VehicleInfo[slot][vSpawnR] = R;
							VehicleInfo[slot][vInterior] = GetPlayerInterior(playerid);
							VehicleInfo[slot][vWorld] = GetPlayerVirtualWorld(playerid);

							SendClientMessageA(playerid,COLOR_LIGHTGREEN,"Vaga alterada. [Facção]");

							SaveVehicle(slot);
							return 1;
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Sistema de veiculos sobrecarregado, tente novamente em instantes.");
					}
				}
		    }
		}
		else
		{
		    SendClientMessage(playerid,COLOR_LIGHTRED,"ATENÇÃO: Você não precisa comprar vaga e estacionar seu veículo, o local que você deixa-lo");
		    SendClientMessage(playerid,COLOR_LIGHTRED,"é onde ele irá spawnar quando tiver um GMX. A posição do carro é salva assim como a do player.. no ultimo lugar que estava.");
		    SendClientMessage(playerid,COLOR_LIGHTRED,"Você poderá protege-lo contra roubos comprando uma casa com garagem ou comprando uma garagem independente.");
		    SendClientMessage(playerid,COLOR_LIGHTRED,"Dentro de uma garagem você pode despawnar e spawnar seu veículo.");
		    SendClientMessage(playerid,COLOR_LIGHTRED,"Não se esqueça de utilizar /freio para travar o veículo, para que ninguém empurre-o.");
  		}
	}
	if(strcmp(tmp,"estacionar",true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
			new veh = GetPlayerVehicleID(playerid);
			new slot = GetVehicleSlot(veh);
			if(slot > -1)
			{
			    new GaragemId = PlayerInfo[playerid][pEntrouGaragem];
			    if(GaragemId != -1)
			    {
				    if (GaragemInfo[GaragemId][hDono] == PlayerInfo[playerid][pID])
					{
					    if(GaragemInfo[GaragemId][hCarros] >= GetMaxCarrosGarargem(playerid)) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você atingiu o limite de veículos em sua garagem.");
						if(VehicleInfo[slot][vOwner] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pChaveEmprestada] == VehicleInfo[slot][vID])
						{
						    if(VehicleInfo[slot][vPlacaProcurada] == 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode estacionar um veículo procurado pelo Polícia.");
						    if(!vehicle_creating)
						    {
							    new vname[256];
								new str[256];
								new Float:X, Float:Y, Float:Z, Float:R;
						        SaveVehicleDamage(veh);
								GetVehiclePos(veh,X,Y,Z);
								GetVehicleZAngle(veh,R);
								VehicleInfo[slot][vSpawnX] = X;
								VehicleInfo[slot][vSpawnY] = Y;
								VehicleInfo[slot][vSpawnZ] = Z;
								VehicleInfo[slot][vSpawnR] = R;
								VehicleInfo[slot][vInterior] = GetPlayerInterior(playerid);
								VehicleInfo[slot][vWorld] = GetPlayerVirtualWorld(playerid);
								VehicleInfo[slot][vGaragem] = GaragemId;
								GaragemInfo[GaragemId][hCarros]++;

								GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
								format(str,sizeof(str),"Você estacionou o seu(a) %s.",vname);
								SendClientMessageA(playerid,COLOR_LIGHTGREEN,str);
								VehicleInfo[slot][vNeonState] = 0;
								if(VehicleInfo[slot][vSirene][0] != 0)
								{
									DestroyDynamicObject(VehicleInfo[slot][vSirene][0]);
									VehicleInfo[slot][vSirene][0] = 0;
								}
								DestruirObjetosCarro(slot,VehicleInfo[slot][vVehicle]);
	                            VehicleInfo[slot][vTuned] = false;

								DestroyVehicle(VehicleInfo[slot][vVehicle]);
								VehicleInfo[slot][vVehicle] = -1;

								SaveVehicle(slot);
								return 1;
							}
							else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Sistema de veiculos sobrecarregado, tente novamente em instantes.");
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem as chaves deste veículo.");
					}
     				else if (HouseInfo[GaragemInfo[GaragemId][hTipo]][hDono] == PlayerInfo[playerid][pID])
					{
						if(VehicleInfo[slot][vOwner] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pChaveEmprestada] == VehicleInfo[slot][vID])
						{
      						if(GaragemInfo[GaragemId][hCarros] >= GetMaxCarrosGarargem(playerid)) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você atingiu o limite de veículos em sua garagem.");
						    if(VehicleInfo[slot][vPlacaProcurada] == 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode estacionar um veículo procurado pela Polícia.");
						    if(!vehicle_creating)
						    {
							    new vname[256];
								new str[256];
								new Float:X, Float:Y, Float:Z, Float:R;
						        SaveVehicleDamage(veh);
								GetVehiclePos(veh,X,Y,Z);
								GetVehicleZAngle(veh,R);
								VehicleInfo[slot][vSpawnX] = X;
								VehicleInfo[slot][vSpawnY] = Y;
								VehicleInfo[slot][vSpawnZ] = Z;
								VehicleInfo[slot][vSpawnR] = R;
								VehicleInfo[slot][vInterior] = GetPlayerInterior(playerid);
								VehicleInfo[slot][vWorld] = GetPlayerVirtualWorld(playerid);
								VehicleInfo[slot][vGaragem] = GaragemId;
								GaragemInfo[GaragemId][hCarros]++;

								GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
								format(str,sizeof(str),"Você estacionou o seu(a) %s.",vname);
								SendClientMessageA(playerid,COLOR_LIGHTGREEN,str);
								VehicleInfo[slot][vNeonState] = 0;
								if(VehicleInfo[slot][vSirene][0] != 0)
								{
									DestroyDynamicObject(VehicleInfo[slot][vSirene][0]);
									VehicleInfo[slot][vSirene][0] = 0;
								}
								DestruirObjetosCarro(slot,VehicleInfo[slot][vVehicle]);
	                            VehicleInfo[slot][vTuned] = false;

								DestroyVehicle(VehicleInfo[slot][vVehicle]);
								VehicleInfo[slot][vVehicle] = -1;

								SaveVehicle(slot);
								return 1;
							}
							else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Sistema de veiculos sobrecarregado, tente novamente em instantes.");
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem as chaves deste veículo.");
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é o proprietário desta garagem.");
				}
				return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma garagem.");
			}
			else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não pode ser estacionado.");
	    }
	    else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em um veiculo.");
	}

	if(strcmp(tmp,"estacionarcarreta",true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new veiculo = GetPlayerVehicleID(playerid);
	        new veh = GetVehicleTrailer(veiculo);
    		if (!veh) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem uma carreta!");
			new slot = GetVehicleSlot(veh);
			if(slot > -1)
			{
				if(VehicleInfo[slot][vOwner] == PlayerInfo[playerid][pID])
				{
				    if(!vehicle_creating)
				    {
				        if(PlayerInfo[playerid][pGrana] >= 20)
				        {
					        vehicle_creating = 1;
							new Float:X, Float:Y, Float:Z, Float:R;
							SaveVehicleDamage(veh);
							GetVehiclePos(veh,X,Y,Z);
							GetVehicleZAngle(veh,R);
							VehicleInfo[slot][vSpawnX] = X;
							VehicleInfo[slot][vSpawnY] = Y;
							VehicleInfo[slot][vSpawnZ] = Z;
							VehicleInfo[slot][vSpawnR] = R;
							VehicleInfo[slot][vInterior] = GetPlayerInterior(playerid);
							VehicleInfo[slot][vWorld] = GetPlayerVirtualWorld(playerid);
							DestruirObjetosCarro(slot, veiculo);
							VehicleInfo[slot][vTuned] = false;

							DestroyVehicle(VehicleInfo[slot][vVehicle]);
							VehicleInfo[slot][vSemUso] = 3600;
							VehicleInfo[slot][vVehicle] = CreateVehicle(VehicleInfo[slot][vModel],VehicleInfo[slot][vSpawnX],VehicleInfo[slot][vSpawnY],VehicleInfo[slot][vSpawnZ],VehicleInfo[slot][vSpawnR],VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2],-1);
							if(strlen(VehicleInfo[slot][vPlate])) { SetVehicleNumberPlate(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vPlate]); }
							StopEngine(VehicleInfo[slot][vVehicle]);
							vehicle_creating = 0;
							SetVehicleDamage(veh);
							ArmasNoPortaMalas(slot);
							SetVehicleVirtualWorld(VehicleInfo[slot][vVehicle], VehicleInfo[slot][vWorld]);
							LinkVehicleToInterior(VehicleInfo[slot][vVehicle], VehicleInfo[slot][vInterior]);
							AddVehicleMods(VehicleInfo[slot][vVehicle],slot);
							SendClientMessageA(playerid,COLOR_LIGHTGREEN,"Você estacionou sua carreta aqui.");
							PlayerInfo[playerid][pGrana] -= 20;
							SaveVehicle(slot);
							return 1;
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem R$20 para estacionar seu veiculo.");
					}
					else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Sistema de veiculos sobrecarregado, tente novamente em instantes");
				}
				else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não e dono desta carreta.");
			}
			else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não e dono desta carreta.");
	    }
	    else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta em um veículo.");
	}
	return 1;
}

forward GetMaxCarrosGarargem(playerid);
public GetMaxCarrosGarargem(playerid)
{
	new maxcars;
	if(PlayerInfo[playerid][pDoador] == 1) maxcars = 5;
	else if(PlayerInfo[playerid][pDoador] == 2) maxcars = 7;
	else if(PlayerInfo[playerid][pDoador] == 3) maxcars = 10;
	else maxcars = 4;
	return maxcars;
}

forward GastarVeiculo(vehicleslot, tipo, Float:quantidade);
public GastarVeiculo(vehicleslot, tipo, Float:quantidade){
	//Tipos:
	// 1 - Motor
	// 2 - Bateria

	switch(tipo)
	{
		case 1:
		{
		    if(VehicleInfo[vehicleslot][vMotor] > 0)
				VehicleInfo[vehicleslot][vMotor] = VehicleInfo[vehicleslot][vMotor]-quantidade;
		}
		case 2:
		{
		    if(VehicleInfo[vehicleslot][vBateria] > 0)
				VehicleInfo[vehicleslot][vBateria] = VehicleInfo[vehicleslot][vBateria]-quantidade;
		}
	}
	return 1;
}

ALTCOMMAND:engine->motor;
COMMAND:motor(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(IsPushbike(GetVehicleModel(GetPlayerVehicleID(playerid))))
	{
		SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não tem motor!");
		new paramsa[7];
		GetVehicleParamsEx(GetPlayerVehicleID(playerid),paramsa[0],paramsa[1],paramsa[2],paramsa[3],paramsa[4],paramsa[5],paramsa[6]);
		SetVehicleParamsEx(GetPlayerVehicleID(playerid),1,paramsa[1],paramsa[2],paramsa[3],paramsa[4],paramsa[5],paramsa[6]);
		return 1;
	}
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        new veh = GetPlayerVehicleID(playerid);
		new slot = GetVehicleSlot(veh);
		new param[7];
		GetVehicleParamsEx(veh,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
		if(!param[0] && slot > -1)
		{
			if(VehicleInfo[slot][vOwner] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pChaveEmprestada] == VehicleInfo[slot][vID] ||
			( PlayerInfo[playerid][pFac] > 0 && PlayerInfo[playerid][pFac] == VehicleInfo[slot][vFaction]) ||
			(VehicleInfo[slot][vCompany] > 0 && VehicleInfo[slot][vCompany] == PlayerInfo[playerid][pJob]) )
			{
                new Float:btc;
                GetVehicleHealth(veh, btc);
                if(FrenodeMano[veh] == 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} O freio de mãos do veículo está levantado, abaixe-o com '/freio'!");
                if(btc <= 300) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} O motor deste veículo está quebrado!");
				if(VehicleInfo[slot][vBateria] < 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} O veículo está sem bateria.");
				if(VehicleInfo[slot][vFuel] > 0)
				{
				    new delay = FetchStartupDelay(slot);
				    if(delay == 0)
				    {
			    		StartEngine(veh);
						VehicleInfo[slot][vBateria] -= 0.70;
			    		format(string, sizeof(string), "* %s gira a chave do veículo, ligando-o.", PlayerName(playerid, 1));
    					SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 10000);
						//SetTimerEx("BateriaCarro", 100, false, "d", playerid);
						GameTextForPlayer(playerid,"~g~Motor Ligado com sucesso",3000,4);
					}
					else
					{
					    format(string, sizeof(string), "* %s gira a chave do veículo, ligando-o.", PlayerName(playerid, 1));
    					SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 10000);
						//SetTimerEx("BateriaCarro", 100, false, "d", playerid);
						VehicleInfo[slot][vBateria] -= 0.70;
                        GameTextForPlayer(playerid,"~w~Ligando o Motor, aguarde.",3000,4);
					    startup_delay[veh] = delay;
					    startup_delay_sender[veh] = playerid;
					}
					return 1;
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veiculo está sem combustivel.");
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não e dono deste veiculo, use /ligacaodireta para tentar fazer ligacao direta no veiculo.");
		}
		else
		{
		    if(slot > -1)
		    {
		        if(!IsPushbike(GetVehicleModel(GetPlayerVehicleID(playerid))))
		        {
				    StopEngine(veh);

				    format(string, sizeof(string), "* %s gira a chave do veículo, desligando-o.", PlayerName(playerid, 1));
	   				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 10000);

				    GameTextForPlayer(playerid,"~r~Motor Desligado com sucesso.",3000,4);
				    return 1;
				}
				else return  SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não tem um motor.");
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O motor deste veiculo não pode ser desligado.");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta em um veiculo, ou este veiculo não possui um motor.");
}


COMMAND:janela(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(!IsAWindowCar(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não tem uma janela.");
    if(IsPlayerInAnyVehicle(playerid) && !IsPushbike(GetVehicleModel(GetPlayerVehicleID(playerid))))
    {
        new veh = GetPlayerVehicleID(playerid);
        new param[4], iSeat = GetPlayerVehicleSeat(playerid);
		GetVehicleParamsCarWindows(veh, param[0], param[1], param[2], param[3]);
        if(iSeat == 0)
        {
	        new opcao[24];
			if (sscanf(params, "s[24]", opcao))
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"[JANELA]:{FFFFFF} Você tabém pode utilizar: /janela [opção]");
				SendClientMessage(playerid, COLOR_LIGHTRED,"[Opções]:{FFFFFF} frenteesqueda(fe), frentedireita(fd), trasesqueda(te), trasdireita(td), fechartodas(ft), abrirtodas(at)");
				return 1;
			}
			else
			{
		    	if (!strcmp(opcao, "frenteesqueda", true) || !strcmp(opcao, "fe", true))
				{
				    if(param[0] == 1 || param[0] == -1) SetVehicleParamsCarWindows(veh, 0, param[1], param[2], param[3]);
					else SetVehicleParamsCarWindows(veh, 1, param[1], param[2], param[3]);
					return 1;
				}
				else if (!strcmp(opcao, "frentedireita", true) || !strcmp(opcao, "fd", true))
				{
				    if(param[1] == 1 || param[1] == -1) SetVehicleParamsCarWindows(veh, param[0], 0, param[2], param[3]);
					else SetVehicleParamsCarWindows(veh, param[0], 1, param[2], param[3]);
					return 1;
				}
				else if (!strcmp(opcao, "trasesqueda", true) || !strcmp(opcao, "te", true))
				{
				    if(param[2] == 1 || param[2] == -1) SetVehicleParamsCarWindows(veh, param[0], param[1], 0, param[3]);
					else SetVehicleParamsCarWindows(veh, param[0], param[1], 1, param[3]);
					return 1;
				}
				else if (!strcmp(opcao, "trasdireita", true) || !strcmp(opcao, "td", true))
				{
				    if(param[3] == 1 || param[3] == -1) SetVehicleParamsCarWindows(veh, param[0], param[1], param[2], 0);
					else SetVehicleParamsCarWindows(veh, param[0], param[1], param[2], 1);
					return 1;
				}
				else if (!strcmp(opcao, "abrirtodas", true) || !strcmp(opcao, "at", true)) return SetVehicleParamsCarWindows(veh, 0,0,0,0);
				else if (!strcmp(opcao, "fechartodas", true) || !strcmp(opcao, "ft", true)) return SetVehicleParamsCarWindows(veh, 1,1,1,1);
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED,"Opções: frenteesqueda(fe), frentedireita(fd), trasesqueda(te), trasdireita(td), fechartodas(ft), abrirtodas(at)");
					return 1;
				}
			}
		}

		new slot = GetVehicleSlot(veh);
		if(slot > -1)
		{
			if(iSeat == 0)
   			{
				if(param[0] == 1 || param[0] == -1) SetVehicleParamsCarWindows(veh, 0, param[1], param[2], param[3]);
				else SetVehicleParamsCarWindows(veh, 1, param[1], param[2], param[3]);
			}
   			if(iSeat == 1)
      		{
				if(param[1] == 1 || param[1] == -1) SetVehicleParamsCarWindows(veh, param[0], 0, param[2], param[3]);
				else SetVehicleParamsCarWindows(veh, param[0], 1, param[2], param[3]);
			}
		 	if(iSeat == 2)
    		{
	    		if(param[2] == 1 || param[2] == -1) SetVehicleParamsCarWindows(veh, param[0], param[1], 0, param[3]);
				else SetVehicleParamsCarWindows(veh, param[0], param[1], 1, param[3]);
			}
			if(iSeat == 3)
   			{
 				if(param[3] == 1 || param[3] == -1) SetVehicleParamsCarWindows(veh, param[0], param[1], param[2], 0);
				else SetVehicleParamsCarWindows(veh, param[0], param[1], param[2], 1);
			}
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não esta em um veiculo, ou este veiculo não possui janelas.");
	return 1;
}

stock FetchStartupDelay(vehicleslot)
{
	if(VehicleInfo[vehicleslot][vMileage] >= 10000)
	{
	    new delay = (VehicleInfo[vehicleslot][vMileage] / 10000);
	    if(delay > 5) { delay = 5; }
	    return delay;
	}
	else return 0;
}
stock FormatModString(vehicleid)
{
	new slot = GetVehicleSlot(vehicleid);
	strdel(VehicleInfo[slot][vMods],0,strlen(VehicleInfo[slot][vMods]));
	new comp[14][8];
	for(new i = 0; i < 14; i ++)
	{
        format(comp[i],8,"%d",GetVehicleComponentInSlot(vehicleid,i));
	}
	new tmp[256];
	tmp = implode(comp,"|");
	format(VehicleInfo[slot][vMods],128,"%s",tmp);
}
stock ResyncColors(vehicleid)
{
	new slot = GetVehicleSlot(vehicleid);
	ChangeVehicleColor(vehicleid,VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2]);
}
stock AddVehicleMods(vehicleid,slot)
{
	SetTune( vehicleid, 1, slot);
}
stock ClearMods(vehicleid)
{
	new slot = GetVehicleSlot(vehicleid);
	strdel(VehicleInfo[slot][vMods],0,strlen(VehicleInfo[slot][vMods]));
	VehicleInfo[slot][vPaintjob] = 0;
}
stock IsPushbike(model)
{
	return (model == 509 || model == 481 || model == 510) ? true : false;
}
forward StartEngine(vehicleid);
public StartEngine(vehicleid)
{
	new params[7];
	GetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);


	//VehicleInfo[slot][pBateria] -= 1;

	new hour, mins, sec;
	gettime(hour,mins,sec);
    if(!IsPushbike(GetVehicleModel(vehicleid)))
	{
		GetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
		if(hour >= 18 || hour <= 6) SetVehicleParamsEx(vehicleid,1,1,params[2],params[3],params[4],params[5],params[6]);
        else SetVehicleParamsEx(vehicleid,1,0,params[2],params[3],params[4],params[5],params[6]);
		
		//new veh = GetPlayerVehicleID(vehicleid);
		//VehicleInfo[veh][vBateria] -= 0.70;
	}
	else
	{
        if(hour >= 18 || hour <= 6) SetVehicleParamsEx(vehicleid,1,1,params[2],params[3],params[4],params[5],params[6]);
        else SetVehicleParamsEx(vehicleid,1,0,params[2],params[3],params[4],params[5],params[6]);
		//new veh = GetPlayerVehicleID(vehicleid);
		//VehicleInfo[veh][vBateria] -= 0.70;
	}
}
forward IsEngineOn(vehicleid);
public IsEngineOn(vehicleid)
{
    new params[7];
    GetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
    return params[0] ? true : false;
}
stock FetchFuelInterval(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
	for(new i = 0; i < sizeof(VehicleModelInfo); i ++)
	{
	    if(VehicleModelInfo[i][vmModel] == model)
	    {
	        return VehicleModelInfo[i][vmFuelInterval];
	    }
	}

	return 180;
}
forward FuelCheck(vehicleid);
public FuelCheck(vehicleid)
{
	new slot = GetVehicleSlot(vehicleid);
	if(slot > -1)
	{
		if(VehicleInfo[slot][vFuel] <= 0 && !IsPushbike(GetVehicleModel(VehicleInfo[slot][vVehicle])))
		{
		    if(VehicleInfo[slot][vFuel] < 0) { VehicleInfo[slot][vFuel] = 0; }
		    StopEngine(vehicleid);
		    for(new i = 0; i < MAX_PLAYERS; i ++)
		    {
		        if(PlayerInfo[i][pLogado])
				{
				    if(IsPlayerInAnyVehicle(i))
				    {
						if(GetPlayerVehicleID(i) == vehicleid)
						{
						    PlayerCruiseSpeed[i] = 0.00;
							GameTextForPlayer(i,"~r~Sem combustível!",5000,5);
						}
				    }
				}
		    }
		}
	}
}

stock GetVehicleNameByModel(modelid,name[],length=256) //By Gabriel "Larcius" Cordes
{
	if(modelid < 400 || modelid > 611)
	{
		modelid=612;
	}
	return format(name,length,"%s",VehicleNames[(modelid-400)]);
}
forward FetchVehiclePrice(model);
public FetchVehiclePrice(model)
{
	if(model < 400 || model > 603) { return -1; }
	for(new i = 0; i < sizeof(VehicleModelInfo); i ++)
	{
	    if(VehicleModelInfo[i][vmModel] == model) { return VehicleModelInfo[i][vmPrice]; }
	}
	return -1;
}
forward Float:GetDistanceBetweenPlayers(playerid,playerid2);
public Float:GetDistanceBetweenPlayers(playerid,playerid2) //By Slick (Edited by Sacky and Gabriel "Larcius" Cordes)
{
	if(PlayerInfo[playerid][pLogado] && PlayerInfo[playerid2][pLogado] && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(playerid2))
	{
		new Float:x1,Float:y1,Float:z1;
		GetPlayerPos(playerid2,x1,y1,z1);
		return GetDistanceToPoint(playerid,x1,y1,z1);
	}
	return 99999999.9;
}

forward SaveVehicle(slot);
public SaveVehicle(slot)
{
	if(!VehicleInfo[slot][vImpounded])
	{
		FormatModString(VehicleInfo[slot][vVehicle]);
		SaveVehicleDamage(VehicleInfo[slot][vVehicle]);
	}

	if(VehicleInfo[slot][vFaction] == 0 && VehicleInfo[slot][vVehicle] != -1)
	{
	    new vehicleid = VehicleInfo[slot][vVehicle];
		new Float:X, Float:Y, Float:Z, Float:R;
		GetVehiclePos(vehicleid,X,Y,Z);
		GetVehicleZAngle(vehicleid,R);
		VehicleInfo[slot][vSpawnX] = X;
		VehicleInfo[slot][vSpawnY] = Y;
		VehicleInfo[slot][vSpawnZ] = Z;
		VehicleInfo[slot][vSpawnR] = R;

		VehicleInfo[slot][vWorld] = GetVehicleVirtualWorld(vehicleid);
  		VehicleInfo[slot][vInterior] = GetVehicleInterior(vehicleid);
	}
	new cleanplate[128], wstr[256], str[1024];
	mysql_real_escape_string(VehicleInfo[slot][vPlate],cleanplate);

	format(str,sizeof(str),"UPDATE rp_vehicles SET model = '%d',spawn_x = '%f',spawn_y = '%f',spawn_z = '%f',spawn_r='%f',`lock`='%d',locked='%d',times_destroyed='%d',fuel='%d',faction='%d',owner_name='%s',death_time='%d',mileage='%d',owning_character='%d' WHERE id = '%d'",
	VehicleInfo[slot][vModel],
	VehicleInfo[slot][vSpawnX],
	VehicleInfo[slot][vSpawnY],
	VehicleInfo[slot][vSpawnZ],
	VehicleInfo[slot][vSpawnR],
	VehicleInfo[slot][vLock],
	VehicleInfo[slot][vLocked],
	VehicleInfo[slot][vDestroyed],
	VehicleInfo[slot][vFuel],
	VehicleInfo[slot][vFaction],
	VehicleInfo[slot][vOwnerName],
	VehicleInfo[slot][vDeathTime],
	VehicleInfo[slot][vMileage],
	VehicleInfo[slot][vOwner],
	VehicleInfo[slot][vID]);
	mysql_function_query(Pipeline, str, false, "noReturnQuery", "");

	format(str,sizeof(str),"UPDATE rp_vehicles SET plate='%s',color1='%d',color2='%d',insurance='%d',mods='%s',paintjob = '%d',weapons='%s' WHERE id = '%d'",
	cleanplate,
	VehicleInfo[slot][vColor1],
	VehicleInfo[slot][vColor2],
	VehicleInfo[slot][vInsurance],
	VehicleInfo[slot][vMods],
	VehicleInfo[slot][vPaintjob],
	wstr,
	VehicleInfo[slot][vID]);
	mysql_function_query(Pipeline, str, false, "noReturnQuery", "");

	format(str,sizeof(str),"UPDATE rp_vehicles SET imp='%d',gps='%d',comp='%d',dmg1='%d',dmg2='%d',dmg3='%d',dmg4='%d',hp='%f',neon='%d',immob='%d',selling='%d',sprice='%d',sexpire='%d',radio='%d' WHERE id = '%d'",
	VehicleInfo[slot][vImpounded],
	VehicleInfo[slot][vGps],
	VehicleInfo[slot][vCompany],
	VehicleInfo[slot][vDamage][0],
	VehicleInfo[slot][vDamage][1],
	VehicleInfo[slot][vDamage][2],
	VehicleInfo[slot][vDamage][3],
	VehicleInfo[slot][vHealth],
	VehicleInfo[slot][vNeon],
	VehicleInfo[slot][vImmob],
	VehicleInfo[slot][vSelling],
	VehicleInfo[slot][vSellingPrice],
	VehicleInfo[slot][vSellingExpire],
	VehicleInfo[slot][vRadio],
	VehicleInfo[slot][vID]);
	mysql_function_query(Pipeline, str, false, "noReturnQuery", "");

	format(str,sizeof(str),"UPDATE rp_vehicles SET slot1='%d',slot2='%d',slot3='%d',slot4='%d',slot5='%d',slot6='%d',slot7='%d',slot8='%d',slot9='%d',slot10='%d',ammo1='%d',ammo2='%d',ammo3='%d',ammo4='%d',ammo5='%d',ammo6='%d',ammo7='%d',ammo8='%d',ammo9='%d',ammo10='%d',bateria='%f',motor='%0.2f' WHERE id = '%d'",
    VehicleInfo[slot][vSlot1],
    VehicleInfo[slot][vSlot2],
    VehicleInfo[slot][vSlot3],
    VehicleInfo[slot][vSlot4],
	VehicleInfo[slot][vSlot5],
	VehicleInfo[slot][vSlot6],
	VehicleInfo[slot][vSlot7],
	VehicleInfo[slot][vSlot8],
	VehicleInfo[slot][vSlot9],
	VehicleInfo[slot][vSlot10],
	VehicleInfo[slot][vAmmo1],
	VehicleInfo[slot][vAmmo2],
	VehicleInfo[slot][vAmmo3],
	VehicleInfo[slot][vAmmo4],
	VehicleInfo[slot][vAmmo5],
	VehicleInfo[slot][vAmmo6],
	VehicleInfo[slot][vAmmo7],
	VehicleInfo[slot][vAmmo8],
	VehicleInfo[slot][vAmmo9],
	VehicleInfo[slot][vAmmo10],
	VehicleInfo[slot][vBateria],
	VehicleInfo[slot][vMotor],
	VehicleInfo[slot][vID]);
	mysql_function_query(Pipeline, str, false, "noReturnQuery", "");

	format(str,sizeof(str),"UPDATE rp_vehicles SET world='%d',interior='%d',malotes='%d',slottipo1='%d',slottipo2='%d',slottipo3='%d',slottipo4='%d',slottipo5='%d',slottipo6='%d',slottipo7='%d',slottipo8='%d',slottipo9='%d',slottipo10='%d' WHERE id = '%d'",
 	VehicleInfo[slot][vWorld],
  	VehicleInfo[slot][vInterior],
   	VehicleInfo[slot][vMalote],
    VehicleInfo[slot][vSlotTipo1],
    VehicleInfo[slot][vSlotTipo2],
    VehicleInfo[slot][vSlotTipo3],
    VehicleInfo[slot][vSlotTipo4],
    VehicleInfo[slot][vSlotTipo5],
    VehicleInfo[slot][vSlotTipo6],
    VehicleInfo[slot][vSlotTipo7],
    VehicleInfo[slot][vSlotTipo8],
    VehicleInfo[slot][vSlotTipo9],
    VehicleInfo[slot][vSlotTipo10],
	VehicleInfo[slot][vID]);
	mysql_function_query(Pipeline, str, false, "noReturnQuery", "");

	format(str,sizeof(str),"UPDATE rp_vehicles SET `pluva1`='%d', `pluva2`='%d', `pluva3`='%d', `pluva4`='%d', `pluva5`='%d', `pluva1a`='%d', `pluva2a`='%d', `pluva3a`='%d', `pluva4a`='%d', `pluva5a`='%d', `pluva1t`='%d', `pluva2t`='%d', `pluva3t`='%d', `pluva4t`='%d', `pluva5t`='%d' WHERE id = '%d'",
	VehicleInfo[slot][vpluva1],
	VehicleInfo[slot][vpluva2],
	VehicleInfo[slot][vpluva3],
	VehicleInfo[slot][vpluva4],
	VehicleInfo[slot][vpluva5],
	VehicleInfo[slot][vpluva1a],
	VehicleInfo[slot][vpluva2a],
	VehicleInfo[slot][vpluva3a],
	VehicleInfo[slot][vpluva4a],
	VehicleInfo[slot][vpluva5a],
	VehicleInfo[slot][vID]);
	mysql_function_query(Pipeline, str, false, "noReturnQuery", "");

	format(str,sizeof(str),"UPDATE rp_vehicles SET `pluva1t`='%d', `pluva2t`='%d', `pluva3t`='%d', `pluva4t`='%d', `pluva5t`='%d' WHERE id = '%d'",
	VehicleInfo[slot][vpluva1t],
	VehicleInfo[slot][vpluva2t],
	VehicleInfo[slot][vpluva3t],
	VehicleInfo[slot][vpluva4t],
	VehicleInfo[slot][vpluva5t],
	VehicleInfo[slot][vID]);

    format(str,sizeof(str),"UPDATE rp_vehicles SET `vSpoiler`='%d',`vHood`='%d',`vRoof`='%d',`vSkirt`='%d',`vLamps`='%d',`vExhaust`='%d',`vWheels`='%d',`vStereo`='%d',`vHydraulics`='%d',`vFrontBumper`='%d',`vRearBumper`='%d',`vRightVent`='%d',`vLeftVent`='%d',`vPaintJob`='%d',`vPlacaProcurada`='%d',`vGunHack`='%d',`vGunHackA`='%d' WHERE id = '%d'",
	VehicleInfo[slot][vSpoiler],
	VehicleInfo[slot][vHood],
	VehicleInfo[slot][vRoof],
	VehicleInfo[slot][vSkirt],
 	VehicleInfo[slot][vLamps],
 	VehicleInfo[slot][vExhaust],
 	VehicleInfo[slot][vWheels],
 	VehicleInfo[slot][vStereo],
 	VehicleInfo[slot][vHydraulics],
 	VehicleInfo[slot][vFrontBumper],
 	VehicleInfo[slot][vRearBumper],
  	VehicleInfo[slot][vRightVent],
   	VehicleInfo[slot][vLeftVent],
   	VehicleInfo[slot][vPaintJob],
   	VehicleInfo[slot][vPlacaProcurada],
   	VehicleInfo[slot][vGunHack],
   	VehicleInfo[slot][vGunHackA],
    VehicleInfo[slot][vID]);
	mysql_function_query(Pipeline, str, false, "noReturnQuery", "");

	format(str,sizeof(str),"UPDATE rp_vehicles SET `vAjudaIni`='%d', `vGaragem`='%d', `vDesmanchado`='%d' WHERE id = '%d'",
	VehicleInfo[slot][vAjudaIni],
	VehicleInfo[slot][vGaragem],
	VehicleInfo[slot][vDesmanchado],
    VehicleInfo[slot][vID]);
	mysql_function_query(Pipeline, str, false, "noReturnQuery", "");

	return 1;
}

stock CriarArmaCarro(playerid, veh, slot, ArmaModel)
{
    new Float:px, Float:py, Float:pz;
   	GetPlayerPos(playerid, px, py, pz);

	switch(slot)
	{
	    case 1:
   		{
	   	    VehicleInfo[veh][vObj1] = CreateDynamicObject(GunObjects[ArmaModel], px, py, pz, 0.0, 0.0, 0.0);
	   	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Posicione a arma em seu veículo...");
	    	EditDynamicObject(playerid, VehicleInfo[veh][vObj1]);
	    	SetPVarInt(playerid, "ObjPortaMalas", veh);
	    	SetPVarInt(playerid, "ObjPortaMalasSlot", slot);
		}
	    case 2:
   		{
	   	    VehicleInfo[veh][vObj2] = CreateDynamicObject(GunObjects[ArmaModel], px, py, pz, 0.0, 0.0, 0.0);
	   	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Posicione a arma em seu veículo...");
	    	EditDynamicObject(playerid, VehicleInfo[veh][vObj2]);
	    	SetPVarInt(playerid, "ObjPortaMalas", veh);
	    	SetPVarInt(playerid, "ObjPortaMalasSlot", slot);
		}
		case 3:
   		{
	   	    VehicleInfo[veh][vObj3] = CreateDynamicObject(GunObjects[ArmaModel], px, py, pz, 0.0, 0.0, 0.0);
	   	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Posicione a arma em seu veículo...");
	    	EditDynamicObject(playerid, VehicleInfo[veh][vObj3]);
	    	SetPVarInt(playerid, "ObjPortaMalas", veh);
	    	SetPVarInt(playerid, "ObjPortaMalasSlot", slot);
		}
		case 4:
   		{
	   	    VehicleInfo[veh][vObj4] = CreateDynamicObject(GunObjects[ArmaModel], px, py, pz, 0.0, 0.0, 0.0);
	   	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Posicione a arma em seu veículo...");
	    	EditDynamicObject(playerid, VehicleInfo[veh][vObj4]);
	    	SetPVarInt(playerid, "ObjPortaMalas", veh);
	    	SetPVarInt(playerid, "ObjPortaMalasSlot", slot);
		}
		case 5:
   		{
	   	    VehicleInfo[veh][vObj5] = CreateDynamicObject(GunObjects[ArmaModel], px, py, pz, 0.0, 0.0, 0.0);
	   	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Posicione a arma em seu veículo...");
	    	EditDynamicObject(playerid, VehicleInfo[veh][vObj5]);
	    	SetPVarInt(playerid, "ObjPortaMalas", veh);
	    	SetPVarInt(playerid, "ObjPortaMalasSlot", slot);
		}
		case 6:
   		{
	   	    VehicleInfo[veh][vObj6] = CreateDynamicObject(GunObjects[ArmaModel], px, py, pz, 0.0, 0.0, 0.0);
	   	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Posicione a arma em seu veículo...");
	    	EditDynamicObject(playerid, VehicleInfo[veh][vObj6]);
	    	SetPVarInt(playerid, "ObjPortaMalas", veh);
	    	SetPVarInt(playerid, "ObjPortaMalasSlot", slot);
		}
		case 7:
   		{
	   	    VehicleInfo[veh][vObj7] = CreateDynamicObject(GunObjects[ArmaModel], px, py, pz, 0.0, 0.0, 0.0);
	   	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Posicione a arma em seu veículo...");
	    	EditDynamicObject(playerid, VehicleInfo[veh][vObj7]);
	    	SetPVarInt(playerid, "ObjPortaMalas", veh);
	    	SetPVarInt(playerid, "ObjPortaMalasSlot", slot);
		}
		case 8:
   		{
	   	    VehicleInfo[veh][vObj8] = CreateDynamicObject(GunObjects[ArmaModel], px, py, pz, 0.0, 0.0, 0.0);
	   	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Posicione a arma em seu veículo...");
	    	EditDynamicObject(playerid, VehicleInfo[veh][vObj8]);
	    	SetPVarInt(playerid, "ObjPortaMalas", veh);
	    	SetPVarInt(playerid, "ObjPortaMalasSlot", slot);
		}
		case 9:
   		{
	   	    VehicleInfo[veh][vObj9] = CreateDynamicObject(GunObjects[ArmaModel], px, py, pz, 0.0, 0.0, 0.0);
	   	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Posicione a arma em seu veículo...");
	    	EditDynamicObject(playerid, VehicleInfo[veh][vObj9]);
	    	SetPVarInt(playerid, "ObjPortaMalas", veh);
	    	SetPVarInt(playerid, "ObjPortaMalasSlot", slot);
		}
		case 10:
   		{
	   	    VehicleInfo[veh][vObj10] = CreateDynamicObject(GunObjects[ArmaModel], px, py, pz, 0.0, 0.0, 0.0);
	   	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Posicione a arma em seu veículo...");
	    	EditDynamicObject(playerid, VehicleInfo[veh][vObj10]);
	    	SetPVarInt(playerid, "ObjPortaMalas", veh);
	    	SetPVarInt(playerid, "ObjPortaMalasSlot", slot);
		}
	}
	return 1;
}

stock ArmasNoPortaMalas(vehid)
{
    if(VehicleInfo[vehid][vSlot1] != 0)
   	{
		if(VehicleInfo[vehid][vSlotTipo1] == 1)
 		{
 		    new ArmaModel = ArmaData[VehicleInfo[vehid][vSlot1]][ArmaModelo];
 		    if(IsValidDynamicObject(VehicleInfo[vehid][vObj1])) DestroyDynamicObject(VehicleInfo[vehid][vObj1]);
 		    VehicleInfo[vehid][vObj1] = CreateDynamicObject(GunObjects[ArmaModel], VehicleInfo[vehid][Slot1X], VehicleInfo[vehid][Slot1Y], VehicleInfo[vehid][Slot1Z], VehicleInfo[vehid][Slot1RX], VehicleInfo[vehid][Slot1RY], VehicleInfo[vehid][Slot1RZ]);
       		AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj1], VehicleInfo[vehid][vVehicle], VehicleInfo[vehid][Slot1X], VehicleInfo[vehid][Slot1Y], VehicleInfo[vehid][Slot1Z], VehicleInfo[vehid][Slot1RX], VehicleInfo[vehid][Slot1RY], VehicleInfo[vehid][Slot1RZ]);
		}
	}
	if(VehicleInfo[vehid][vSlot2] != 0)
   	{
		if(VehicleInfo[vehid][vSlotTipo2] == 1)
 		{
 		    new ArmaModel = ArmaData[VehicleInfo[vehid][vSlot2]][ArmaModelo];
 		    if(IsValidDynamicObject(VehicleInfo[vehid][vObj2])) DestroyDynamicObject(VehicleInfo[vehid][vObj2]);
 		    VehicleInfo[vehid][vObj2] = CreateDynamicObject(GunObjects[ArmaModel], VehicleInfo[vehid][Slot2X], VehicleInfo[vehid][Slot2Y], VehicleInfo[vehid][Slot2Z], VehicleInfo[vehid][Slot2RX], VehicleInfo[vehid][Slot2RY], VehicleInfo[vehid][Slot2RZ]);
 		   	AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj2], VehicleInfo[vehid][vVehicle], VehicleInfo[vehid][Slot2X], VehicleInfo[vehid][Slot2Y], VehicleInfo[vehid][Slot2Z], VehicleInfo[vehid][Slot2RX], VehicleInfo[vehid][Slot2RY], VehicleInfo[vehid][Slot2RZ]);
		}
	}
	if(VehicleInfo[vehid][vSlot3] != 0)
   	{
		if(VehicleInfo[vehid][vSlotTipo3] == 1)
 		{
 		    new ArmaModel = ArmaData[VehicleInfo[vehid][vSlot3]][ArmaModelo];
 		    if(IsValidDynamicObject(VehicleInfo[vehid][vObj3])) DestroyDynamicObject(VehicleInfo[vehid][vObj3]);
 		    VehicleInfo[vehid][vObj3] = CreateDynamicObject(GunObjects[ArmaModel], VehicleInfo[vehid][Slot3X], VehicleInfo[vehid][Slot3Y], VehicleInfo[vehid][Slot3Z], VehicleInfo[vehid][Slot3RX], VehicleInfo[vehid][Slot3RY], VehicleInfo[vehid][Slot3RZ]);
 		   	AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj3], VehicleInfo[vehid][vVehicle], VehicleInfo[vehid][Slot3X], VehicleInfo[vehid][Slot3Y], VehicleInfo[vehid][Slot3Z], VehicleInfo[vehid][Slot3RX], VehicleInfo[vehid][Slot3RY], VehicleInfo[vehid][Slot3RZ]);
		}
	}
	if(VehicleInfo[vehid][vSlot4] != 0)
   	{
		if(VehicleInfo[vehid][vSlotTipo4] == 1)
 		{
 		    new ArmaModel = ArmaData[VehicleInfo[vehid][vSlot4]][ArmaModelo];
 		    if(IsValidDynamicObject(VehicleInfo[vehid][vObj4])) DestroyDynamicObject(VehicleInfo[vehid][vObj4]);
 		    VehicleInfo[vehid][vObj4] = CreateDynamicObject(GunObjects[ArmaModel], VehicleInfo[vehid][Slot4X], VehicleInfo[vehid][Slot4Y], VehicleInfo[vehid][Slot4Z], VehicleInfo[vehid][Slot4RX], VehicleInfo[vehid][Slot4RY], VehicleInfo[vehid][Slot4RZ]);
 		   	AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj4], VehicleInfo[vehid][vVehicle], VehicleInfo[vehid][Slot4X], VehicleInfo[vehid][Slot4Y], VehicleInfo[vehid][Slot4Z], VehicleInfo[vehid][Slot4RX], VehicleInfo[vehid][Slot4RY], VehicleInfo[vehid][Slot4RZ]);
		}
	}
	if(VehicleInfo[vehid][vSlot5] != 0)
   	{
		if(VehicleInfo[vehid][vSlotTipo5] == 1)
 		{
 		    new ArmaModel = ArmaData[VehicleInfo[vehid][vSlot5]][ArmaModelo];
 		    if(IsValidDynamicObject(VehicleInfo[vehid][vObj5])) DestroyDynamicObject(VehicleInfo[vehid][vObj5]);
 		    VehicleInfo[vehid][vObj5] = CreateDynamicObject(GunObjects[ArmaModel], VehicleInfo[vehid][Slot5X], VehicleInfo[vehid][Slot5Y], VehicleInfo[vehid][Slot5Z], VehicleInfo[vehid][Slot5RX], VehicleInfo[vehid][Slot5RY], VehicleInfo[vehid][Slot5RZ]);
 		   	AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj5], VehicleInfo[vehid][vVehicle], VehicleInfo[vehid][Slot5X], VehicleInfo[vehid][Slot5Y], VehicleInfo[vehid][Slot5Z], VehicleInfo[vehid][Slot5RX], VehicleInfo[vehid][Slot5RY], VehicleInfo[vehid][Slot5RZ]);
		}
	}
	if(VehicleInfo[vehid][vSlot6] != 0)
   	{
		if(VehicleInfo[vehid][vSlotTipo6] == 1)
 		{
 		    new ArmaModel = ArmaData[VehicleInfo[vehid][vSlot6]][ArmaModelo];
 		    if(IsValidDynamicObject(VehicleInfo[vehid][vObj6])) DestroyDynamicObject(VehicleInfo[vehid][vObj6]);
 		    VehicleInfo[vehid][vObj6] = CreateDynamicObject(GunObjects[ArmaModel], VehicleInfo[vehid][Slot6X], VehicleInfo[vehid][Slot6Y], VehicleInfo[vehid][Slot6Z], VehicleInfo[vehid][Slot6RX], VehicleInfo[vehid][Slot6RY], VehicleInfo[vehid][Slot6RZ]);
 		   	AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj6], VehicleInfo[vehid][vVehicle], VehicleInfo[vehid][Slot6X], VehicleInfo[vehid][Slot6Y], VehicleInfo[vehid][Slot6Z], VehicleInfo[vehid][Slot6RX], VehicleInfo[vehid][Slot6RY], VehicleInfo[vehid][Slot6RZ]);
		}
	}
	if(VehicleInfo[vehid][vSlot7] != 0)
   	{
		if(VehicleInfo[vehid][vSlotTipo7] == 1)
 		{
 		    new ArmaModel = ArmaData[VehicleInfo[vehid][vSlot7]][ArmaModelo];
 		    if(IsValidDynamicObject(VehicleInfo[vehid][vObj7])) DestroyDynamicObject(VehicleInfo[vehid][vObj7]);
 		    VehicleInfo[vehid][vObj7] = CreateDynamicObject(GunObjects[ArmaModel], VehicleInfo[vehid][Slot7X], VehicleInfo[vehid][Slot7Y], VehicleInfo[vehid][Slot7Z], VehicleInfo[vehid][Slot7RX], VehicleInfo[vehid][Slot7RY], VehicleInfo[vehid][Slot7RZ]);
 		   	AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj7], VehicleInfo[vehid][vVehicle], VehicleInfo[vehid][Slot7X], VehicleInfo[vehid][Slot7Y], VehicleInfo[vehid][Slot7Z], VehicleInfo[vehid][Slot7RX], VehicleInfo[vehid][Slot7RY], VehicleInfo[vehid][Slot7RZ]);
		}
	}
	if(VehicleInfo[vehid][vSlot8] != 0)
   	{
		if(VehicleInfo[vehid][vSlotTipo8] == 1)
 		{
 		    new ArmaModel = ArmaData[VehicleInfo[vehid][vSlot8]][ArmaModelo];
 		    if(IsValidDynamicObject(VehicleInfo[vehid][vObj8])) DestroyDynamicObject(VehicleInfo[vehid][vObj8]);
       		VehicleInfo[vehid][vObj8] = CreateDynamicObject(GunObjects[ArmaModel], VehicleInfo[vehid][Slot8X], VehicleInfo[vehid][Slot8Y], VehicleInfo[vehid][Slot8Z], VehicleInfo[vehid][Slot8RX], VehicleInfo[vehid][Slot8RY], VehicleInfo[vehid][Slot8RZ]);
   		   	AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj8], VehicleInfo[vehid][vVehicle], VehicleInfo[vehid][Slot8X], VehicleInfo[vehid][Slot8Y], VehicleInfo[vehid][Slot8Z], VehicleInfo[vehid][Slot8RX], VehicleInfo[vehid][Slot8RY], VehicleInfo[vehid][Slot8RZ]);
		}
	}
	if(VehicleInfo[vehid][vSlot9] != 0)
   	{
		if(VehicleInfo[vehid][vSlotTipo9] == 1)
 		{
 		    new ArmaModel = ArmaData[VehicleInfo[vehid][vSlot9]][ArmaModelo];
 		    if(IsValidDynamicObject(VehicleInfo[vehid][vObj9])) DestroyDynamicObject(VehicleInfo[vehid][vObj9]);
 		    VehicleInfo[vehid][vObj9] = CreateDynamicObject(GunObjects[ArmaModel], VehicleInfo[vehid][Slot9X], VehicleInfo[vehid][Slot9Y], VehicleInfo[vehid][Slot9Z], VehicleInfo[vehid][Slot9RX], VehicleInfo[vehid][Slot9RY], VehicleInfo[vehid][Slot9RZ]);
 		   	AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj9], VehicleInfo[vehid][vVehicle], VehicleInfo[vehid][Slot9X], VehicleInfo[vehid][Slot9Y], VehicleInfo[vehid][Slot9Z], VehicleInfo[vehid][Slot9RX], VehicleInfo[vehid][Slot9RY], VehicleInfo[vehid][Slot9RZ]);
		}
	}
	if(VehicleInfo[vehid][vSlot10] != 0)
   	{
		if(VehicleInfo[vehid][vSlotTipo10] == 1)
 		{
 		    new ArmaModel = ArmaData[VehicleInfo[vehid][vSlot10]][ArmaModelo];
 		    if(IsValidDynamicObject(VehicleInfo[vehid][vObj10])) DestroyDynamicObject(VehicleInfo[vehid][vObj10]);
 		    VehicleInfo[vehid][vObj10] = CreateDynamicObject(GunObjects[ArmaModel], VehicleInfo[vehid][Slot10X], VehicleInfo[vehid][Slot10Y], VehicleInfo[vehid][Slot10Z], VehicleInfo[vehid][Slot10RX], VehicleInfo[vehid][Slot10RY], VehicleInfo[vehid][Slot10RZ]);
            AttachDynamicObjectToVehicle(VehicleInfo[vehid][vObj10], VehicleInfo[vehid][vVehicle], VehicleInfo[vehid][Slot10X], VehicleInfo[vehid][Slot10Y], VehicleInfo[vehid][Slot10Z], VehicleInfo[vehid][Slot10RX], VehicleInfo[vehid][Slot10RY], VehicleInfo[vehid][Slot10RZ]);
		}
	}
	return 1;
}

COMMAND:prefixo(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(IsPlayerInAnyVehicle(playerid))
    {
    	new getcarro = GetPlayerVehicleID(playerid);
     	new slot = GetVehicleSlot(getcarro);
      	if(slot > -1)
       	{
            if(VehicleInfo[slot][vOwner] == PlayerInfo[playerid][pID] || VehicleInfo[slot][vFaction] == PlayerInfo[playerid][pFac] || PlayerInfo[playerid][pAdmin] > 0)
         	{
   	    	    if(isnull(params)) return SendClientMessage(playerid,COLOR_LIGHTRED,"USE: {FFFFFF}/prefixo [texto]");
                if(strlen(params) < 40)
				{
					if(VehicleInfo[slot][vOwner] == PlayerInfo[playerid][pID] || VehicleInfo[slot][vFaction] == PlayerInfo[playerid][pFac])
	         		{
	         		    new getcar = GetPlayerVehicleID(playerid);
	         		    if(TemCarSign[getcar]) Delete3DTextLabel(vehicle3Dtext[getcar]);

		          		vehicle3Dtext[getcar] = Create3DTextLabel(params, 0xFFFFFFFF, 0.0, 0.0, 0.0, 20.0, 0, 1);
			     		Attach3DTextLabelToVehicle(vehicle3Dtext[getcar], getcar, -0.8, -2.8, -0.3);
			     		TemCarSign[getcar] = 1;

		    			SendClientMessage(playerid,COLOR_LIGHTGREEN,"ERRO:{FFFFFF} Prefixo adicionado, use /rprefixo para remove-lo.");
					}
	       			return 1;
                }
				else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} {FFFFFF}Tamanho máximo do prefixo é de 40 caracteres.");
			}
			else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} {FFFFFF}Você não é dono deste veículo ou ele não é de sua facção.");
		}
		return 1;
	}
 	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} {FFFFFF}Você não está em um veículo.");
}

CMD:nickoff(playerid)
{
    for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(playerid, i, false);
    GameTextForPlayer(playerid, "~W~Nicks Desativos ~R~off", 5000, 5);
    return 1;
}

CMD:nickon(playerid)
{
for(new i = 0; i < MAX_PLAYERS; i++) ShowPlayerNameTagForPlayer(playerid, i, true);
GameTextForPlayer(playerid, "~W~Nicks Ativos ~R~", 5000, 5);
return 1;
}

CMD:rprefixo(playerid,params[])
{
    new getcar = GetPlayerVehicleID(playerid);
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} {FFFFFF}Você não está em um veículo.");
    if(!TemCarSign[getcar]) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} {FFFFFF}Este veículo não tem um prefixo.");
	Delete3DTextLabel(vehicle3Dtext[getcar]);
	TemCarSign[getcar] = 0;
	return 1;
}


forward SalvarArmaPM(vehid, slotid);
public SalvarArmaPM(vehid, slotid)
{
	new str[2056];
	if(slotid == 1)
	{
    	format(str,sizeof(str),"UPDATE rp_vehicles SET `Slot1X`='%f',`Slot1Y`='%f',`Slot1Z`='%f',`Slot1RX`='%f',`Slot1RY`='%f',`Slot1RZ`='%f' WHERE id = '%d'",
	    	VehicleInfo[vehid][Slot1X],
	    	VehicleInfo[vehid][Slot1Y],
			VehicleInfo[vehid][Slot1Z],
			VehicleInfo[vehid][Slot1RX],
	    	VehicleInfo[vehid][Slot1RY],
			VehicleInfo[vehid][Slot1RZ],
			VehicleInfo[vehid][vID]);
		mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
	}
	if(slotid == 2)
	{
	    format(str,sizeof(str),"UPDATE rp_vehicles SET `Slot2X`='%f',`Slot2Y`='%f',`Slot2Z`='%f',`Slot2RX`='%f',`Slot2RY`='%f',`Slot2RZ`='%f' WHERE id = '%d'",
	    	VehicleInfo[vehid][Slot2X],
	    	VehicleInfo[vehid][Slot2Y],
			VehicleInfo[vehid][Slot2Z],
			VehicleInfo[vehid][Slot2RX],
	    	VehicleInfo[vehid][Slot2RY],
			VehicleInfo[vehid][Slot2RZ],
			VehicleInfo[vehid][vID]);
		mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
	}
	if(slotid == 3)
	{
	    format(str,sizeof(str),"UPDATE rp_vehicles SET `Slot3X`='%f',`Slot3Y`='%f',`Slot3Z`='%f',`Slot3RX`='%f',`Slot3RY`='%f',`Slot3RZ`='%f' WHERE id = '%d'",
	    	VehicleInfo[vehid][Slot3X],
	    	VehicleInfo[vehid][Slot3Y],
			VehicleInfo[vehid][Slot3Z],
			VehicleInfo[vehid][Slot3RX],
	    	VehicleInfo[vehid][Slot3RY],
			VehicleInfo[vehid][Slot3RZ],
			VehicleInfo[vehid][vID]);
		mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
	}
	if(slotid == 4)
	{
	    format(str,sizeof(str),"UPDATE rp_vehicles SET `Slot4X`='%f',`Slot4Y`='%f',`Slot4Z`='%f',`Slot4RX`='%f',`Slot4RY`='%f',`Slot4RZ`='%f' WHERE id = '%d'",
	    	VehicleInfo[vehid][Slot4X],
	    	VehicleInfo[vehid][Slot4Y],
			VehicleInfo[vehid][Slot4Z],
			VehicleInfo[vehid][Slot4RX],
	    	VehicleInfo[vehid][Slot4RY],
			VehicleInfo[vehid][Slot4RZ],
			VehicleInfo[vehid][vID]);
		mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
	}
	if(slotid == 5)
	{
	    format(str,sizeof(str),"UPDATE rp_vehicles SET `Slot5X`='%f',`Slot5Y`='%f',`Slot5Z`='%f',`Slot5RX`='%f',`Slot5RY`='%f',`Slot5RZ`='%f' WHERE id = '%d'",
	    	VehicleInfo[vehid][Slot5X],
	    	VehicleInfo[vehid][Slot5Y],
			VehicleInfo[vehid][Slot5Z],
			VehicleInfo[vehid][Slot5RX],
	    	VehicleInfo[vehid][Slot5RY],
			VehicleInfo[vehid][Slot5RZ],
			VehicleInfo[vehid][vID]);
		mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
	}
	if(slotid == 6)
	{
	    format(str,sizeof(str),"UPDATE rp_vehicles SET `Slot6X`='%f',`Slot6Y`='%f',`Slot6Z`='%f',`Slot6RX`='%f',`Slot6RY`='%f',`Slot6RZ`='%f' WHERE id = '%d'",
	    	VehicleInfo[vehid][Slot6X],
	    	VehicleInfo[vehid][Slot6Y],
			VehicleInfo[vehid][Slot6Z],
			VehicleInfo[vehid][Slot6RX],
	    	VehicleInfo[vehid][Slot6RY],
			VehicleInfo[vehid][Slot6RZ],
			VehicleInfo[vehid][vID]);
		mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
	}
	if(slotid == 7)
	{
	    format(str,sizeof(str),"UPDATE rp_vehicles SET `Slot7X`='%f',`Slot7Y`='%f',`Slot7Z`='%f',`Slot7RX`='%f',`Slot7RY`='%f',`Slot7RZ`='%f' WHERE id = '%d'",
	    	VehicleInfo[vehid][Slot7X],
	    	VehicleInfo[vehid][Slot7Y],
			VehicleInfo[vehid][Slot7Z],
			VehicleInfo[vehid][Slot7RX],
	    	VehicleInfo[vehid][Slot7RY],
			VehicleInfo[vehid][Slot7RZ],
			VehicleInfo[vehid][vID]);
		mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
	}
	if(slotid == 8)
	{
	    format(str,sizeof(str),"UPDATE rp_vehicles SET `Slot8X`='%f',`Slot8Y`='%f',`Slot8Z`='%f',`Slot8RX`='%f',`Slot8RY`='%f',`Slot8RZ`='%f' WHERE id = '%d'",
	    	VehicleInfo[vehid][Slot8X],
	    	VehicleInfo[vehid][Slot8Y],
			VehicleInfo[vehid][Slot8Z],
			VehicleInfo[vehid][Slot8RX],
	    	VehicleInfo[vehid][Slot8RY],
			VehicleInfo[vehid][Slot8RZ],
			VehicleInfo[vehid][vID]);
		mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
	}
	if(slotid == 9)
	{
	    format(str,sizeof(str),"UPDATE rp_vehicles SET `Slot9X`='%f',`Slot9Y`='%f',`Slot9Z`='%f',`Slot9RX`='%f',`Slot9RY`='%f',`Slot9RZ`='%f' WHERE id = '%d'",
	    	VehicleInfo[vehid][Slot9X],
	    	VehicleInfo[vehid][Slot9Y],
			VehicleInfo[vehid][Slot9Z],
			VehicleInfo[vehid][Slot9RX],
	    	VehicleInfo[vehid][Slot9RY],
			VehicleInfo[vehid][Slot9RZ],
			VehicleInfo[vehid][vID]);
		mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
	}
	if(slotid == 10)
	{
	    format(str,sizeof(str),"UPDATE rp_vehicles SET `Slot10X`='%f',`Slot10Y`='%f',`Slot10Z`='%f',`Slot10RX`='%f',`Slot10RY`='%f',`Slot10RZ`='%f' WHERE id = '%d'",
	    	VehicleInfo[vehid][Slot10X],
	    	VehicleInfo[vehid][Slot10Y],
			VehicleInfo[vehid][Slot10Z],
			VehicleInfo[vehid][Slot10RX],
	    	VehicleInfo[vehid][Slot10RY],
			VehicleInfo[vehid][Slot10RZ],
			VehicleInfo[vehid][vID]);
		mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
	}
	return 1;
}

forward IsAtUpgradeShop(playerid);
public IsAtUpgradeShop(playerid)
{
	new biz = GetClosestBiz(playerid);
	if(biz == -1) { return false; }
	if(EmpInfo[biz][eTipo] == EMP_TIPO_VUPGRADE) { return true; }
	return false;
}
forward GetClosestBiz(playerid);
public GetClosestBiz(playerid)
{
	new Float:X, Float:Y, Float:Z;
	new winner = -1;
	new Float:windistance = 50;
	GetPlayerPos(playerid,X,Y,Z);
	for(new i = 0; i < MAX_EMPRESAS; i ++)
	{
	    if(IsPlayerInRangeOfPoint(playerid,10.0,EmpInfo[i][eExX],EmpInfo[i][eExX],EmpInfo[i][eExZ]))
	    {
			if(GetDistanceToPoint(playerid,EmpInfo[i][eExX],EmpInfo[i][eExY],EmpInfo[i][eExZ]) < windistance && GetDistanceToPoint(playerid,EmpInfo[i][eExX],EmpInfo[i][eExY],EmpInfo[i][eExZ]) < 7.5)
			{
			    winner = i;
			    windistance = GetDistanceToPoint(playerid,EmpInfo[i][eExX],EmpInfo[i][eExY],EmpInfo[i][eExZ]);
			}
	    }
	}
	return winner;
}
forward GetCharacterID(playerid);
public GetCharacterID(playerid)
{
	return PlayerInfo[playerid][pID];
}
stock FetchParamText(result[],string2[],idx)
{
	new length = strlen(string2);
	while ((idx < length) && (string2[idx] <= ' '))
	{
		idx++;
	}
	new offset = idx;
	new result2[256];
	while ((idx < length) && ((idx - offset) < (sizeof(result2) - 1)))
	{
		result2[idx - offset] = string2[idx];
		idx++;
	}
	result2[idx - offset] = EOS;
	new tmp[256];
	tmp = trim(result2);
	return format(result,256,"%s",tmp);
}

stock LockVehicle(vehicleid)
{
	new slot = GetVehicleSlot(vehicleid);
	if(slot > -1)
	{
	    VehicleInfo[slot][vSemUso] = 3600;
	    VehicleInfo[slot][vLocked] = 1;
	    new params[7];
		GetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
		SetVehicleParamsEx(vehicleid,params[0],params[1],params[2],1,params[4],params[5],params[6]);
	}
}

stock UnlockVehicle(vehicleid)
{
	new slot = GetVehicleSlot(vehicleid);
	if(slot > -1)
	{
	    VehicleInfo[slot][vSemUso] = 3600;
		VehicleInfo[slot][vLocked] = 0;
		new params[7];
		GetVehicleParamsEx(vehicleid,params[0],params[1],params[2],params[3],params[4],params[5],params[6]);
		SetVehicleParamsEx(vehicleid,params[0],params[1],params[2],0,params[4],params[5],params[6]);
	}
}

forward FetchVehicleInsurancePrice(model);
public FetchVehicleInsurancePrice(model)
{
	new precoTotal = GetVehiclePrice(model);
	new PrecoFinal = 0;
	if(precoTotal > 100)
		PrecoFinal = precoTotal/4;
	else
	    PrecoFinal = 40;
	return PrecoFinal;
}
/*forward FetchVehicleInsurancePrice(model);
public FetchVehicleInsurancePrice(model)
{

	new precoTotal = GetVehiclePrice(model);
	new PrecoFinal = 0;
	if(precoTotal > 100)
	{
		PrecoFinal = precoTotal/3;
	}
	else
	{
	    PrecoFinal = 50;
	}
	return PrecoFinal;
}*/


forward SendConfirmationMsg(playerid,msg[],type,extra);
public SendConfirmationMsg(playerid,msg[],type,extra)
{
	confirm_dialog_extra[playerid] = extra;
	ShowPlayerDialog(playerid,type,DIALOG_STYLE_MSGBOX,"Confirmar ação",msg,"Confirmar","Cancelar");
}

forward QUERY_LOAD_MODELS();
public QUERY_LOAD_MODELS()
{
	new b[256];
	new rows,fields;
	cache_get_data(rows, fields);
	new models = rows;
 	for(new i; i < models; i++)
  	{
        cache_get_field_content(i,"model",b);  				VehicleModelInfo[i][vmModel] = strval(b);
        cache_get_field_content(i,"name",b);   				format(VehicleModelInfo[i][vmName],256,"%s",b);
        cache_get_field_content(i,"price",b);   			VehicleModelInfo[i][vmPrice] = strval(b);
        cache_get_field_content(i,"emergency_vehicle",b);   VehicleModelInfo[i][vmEmerVeh] = strval(b);
        cache_get_field_content(i,"donator_vehicle",b);     VehicleModelInfo[i][vmDonatorVeh] = floatstr(b);
        cache_get_field_content(i,"vehicle_type",b);        VehicleModelInfo[i][vmType] = strval(b);
        cache_get_field_content(i,"insurance_price",b);     VehicleModelInfo[i][vmInsurancePrice] = strval(b);
        cache_get_field_content(i,"news",b);                VehicleModelInfo[i][vmNews] = strval(b);
        cache_get_field_content(i,"fuel_interval",b);       VehicleModelInfo[i][vmFuelInterval] = strval(b);
	}
	vehicle_creating = 0;
	return 1;
}

stock IsBoat(vehicleid)
{
	switch(vehicleid)
	{
		case 472, 473, 493, 495, 484, 430, 454, 453, 452, 446: return 1;
	}
	return 0;
}

stock IsVehTrain(vehicleid)
{
	switch(vehicleid)
	{
		case 590, 569, 537, 538, 570, 449: return 1;
	}
	return 0;
}

stock IsHeli(vehicleid)
{
	switch(vehicleid)
	{
		case 417, 425, 447, 469, 487, 488, 497, 548, 563: return 1;
	}
	return 0;
}

stock IsPlane(vehicleid)
{
	switch(vehicleid)
	{
		case 460, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593: return 1;
	}
	return 0;
}
stock RandStr(str[],length)
{
	new tmp[64];
	new charac[26][2] = { "A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z" };
	for(new i = 0; i < length; i ++)
	{
	    strins(tmp,charac[random(26)],strlen(tmp));
	}
	return format(str,length,"%s",tmp);
}
stock strtoupper(stringg[])
{
	new retStr[64];
	new i, j;
	while ((j = stringg[i])) retStr[i++] = chrtoupper(j);
	retStr[i] = '\0';
	return retStr;
}
forward Float:GetPosInFrontOfVehicle(vehicleid, &Float:x, &Float:y, Float:distance);
public Float:GetPosInFrontOfVehicle(vehicleid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetVehiclePos(vehicleid, x, y, a);
 	GetVehicleZAngle(vehicleid, a);
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
	return a;
}
COMMAND:ligacaodireta(playerid,params[])
{
    if(PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 5 ou mais para utilizar este comando!");
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está logado!");
    if(OutrasInfos[playerid][oLigDireta] > 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você ainda não pode fazer uma ligação direta!");
	new str[256];
    if(PlayerInfo[playerid][pTempoPLD] > 0)
	{
		format(str,sizeof(str),"ERRO:{FFFFFF} Aguarde %d segundos antes de utilizar este comando.",PlayerInfo[playerid][pTempoPLD]);
		SendClientMessage(playerid,COLOR_LIGHTRED,str);
		return 1;
	}
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        new param[7];
    	new veh = GetPlayerVehicleID(playerid);
		GetVehicleParamsEx(veh,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
		if(!param[0])
		{
		    new slot = GetVehicleSlot(veh);
		    new success_chance = 50;
		    if(VehicleInfo[slot][vImmob] == 1) { success_chance = 80; }
		    if(VehicleInfo[slot][vImmob] == 2) { success_chance = 90; }
		    if(VehicleInfo[slot][vImmob] == 3) { success_chance = 100; }
		    if(VehicleInfo[slot][vImmob] == 4) { success_chance = 110; }
            new Float:lol;
            GetVehicleHealth(veh, lol);
            if(FrenodeMano[veh] == 1) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} O freio de mãos do veículo está levantado, abaixe-o com '/freio'!");
            if(lol == 300) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O motor deste veículo está danificado!");
		    if(slot > -1)
		    {
		        if(VehicleInfo[slot][vFaction] > 0 || VehicleInfo[slot][vCompany] > 0)
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode fazer ligação direta neste veículo!");
				}
				if(VehicleInfo[slot][vFuel] > 0)
				{
				    OutrasInfos[playerid][oLigDireta] = 600;
					format(str,sizeof(str),"** %s mexe no painel do veículo, cortando alguns fios.", PlayerName(playerid, 1));
					ProxDetector(8.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

                    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está tentando fazer uma ligação direta, aguarde 1 minuto!");
					SetTimerEx("FzndLigacaoDireta", 60000, false, "ddd", playerid, veh, success_chance);
					return 1;
				}
				else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veiculo não possui combustivel.");
		    }
		    else return 1;
		}
		else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} O motor já está ligado.");
    }
    else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFF} Você precisa estar em um veículo.");
}

forward FzndLigacaoDireta(playerid,veh,success_chance);
public FzndLigacaoDireta(playerid,veh,success_chance)
{
    if(!IsPlayerInAnyVehicle(playerid)) return 1;
	if(GetPlayerVehicleID(playerid) != veh) return 1;
    new chance = (20+random(100));
	new str[256];
    if(chance >= success_chance)
	{
	    StartEngine(veh);
	    format(str,sizeof(str),"** %s tenta fazer ligação direta no veículo, e obtem sucesso, ligando-o.", PlayerName(playerid, 1));
		ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
    }
	else
	{
	    new slot = GetVehicleSlot(veh), Float:Vida;
	    format(str,sizeof(str),"** %s tenta fazer ligação direta no veículo, porém falha.", PlayerName(playerid, 1));
		ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

        if(VehicleInfo[slot][vImmob] == 2)
	    {
	        GetPlayerHealth(playerid, Vida);
	        SetPlayerHealth(playerid, Vida-10);
	        P_Health[playerid] = Vida-10;
	    }

	    if(VehicleInfo[slot][vImmob] == 3)
	    {
	        GetPlayerHealth(playerid, Vida);
	        SetPlayerHealth(playerid, Vida-15);
	        P_Health[playerid] = Vida-15;
	    }

	    if(VehicleInfo[slot][vImmob] == 4)
	    {
	        GetPlayerHealth(playerid, Vida);
	        SetPlayerHealth(playerid, Vida-20);
	        P_Health[playerid] = Vida-20;
	    }

		PlayerInfo[playerid][pTempoPLD] = 25;
		return 1;
	}
}

forward GetClosestVehicleArrombar(playerid);
public GetClosestVehicleArrombar(playerid)
{
	new winner = -1; new Float:windistance = 9999999.0;
	new Float:X, Float:Y, Float:Z;
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vVehicle] > -1)
	    {
		    GetVehiclePos(VehicleInfo[i][vVehicle],X,Y,Z);
			new Float:distance = GetDistanceToPoint(playerid,X,Y,Z);
			if(distance < windistance && distance < 15.0)
			{
			    winner = VehicleInfo[i][vVehicle];
			    windistance = distance;
			}
		}
	}
	return winner;
}

COMMAND:quebrartrava(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Para arrombar um veiculo/propriedade, você precisa comprar uma caixa de ferramentas em uma 24-7");
    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} utilize o comando /arrombar");
    return 1;
}

COMMAND:arrombar(playerid,params[])
{
    if(PlayerInfo[playerid][pLevel] < 10) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de TC 10 ou mais para utilizar este comando!");
	if(PlayerInfo[playerid][pToolKit])
 	{
     	new veh = GetClosestVehicleArrombar(playerid);
       	new slot = (veh > -1) ? GetVehicleSlot(veh) : -1;
       	new str[256];
      	if(slot > -1)
      	{
      	    if(PlayerInfo[playerid][pArrombarDNV] == 0)
    		{
	            if(VehicleInfo[slot][vFaction] > 0 || VehicleInfo[slot][vCompany] > 0)
				{
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode arrombar um veículo de facção!");
				}
         		if(VehicleInfo[slot][vLocked])
				{
    				new unlock_chance = 50;
					if(VehicleInfo[slot][vLock] == 0) { unlock_chance = 85; }
					if(VehicleInfo[slot][vLock] == 1) { unlock_chance = 90; }
					if(VehicleInfo[slot][vLock] == 2) { unlock_chance = 95; }
					if(VehicleInfo[slot][vLock] == 3) { unlock_chance = 100; }
					if(VehicleInfo[slot][vLock] == 4) { unlock_chance = 115; }
    				new chance = (20+random(100));
    				if(chance > unlock_chance)
				    {
        				UnlockVehicle(veh);
        				PlayerInfo[playerid][pArrombarDNV] = 100;
				        switch(VehicleInfo[slot][vLock])
    					{
 	    					case 0:
 	    					{
								format(str,sizeof(str),"** %s arromba a fechadura de um veículo na proximidade..", PlayerName(playerid, 1));
								ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
   	    					}
				    	    case 1:
				    	    {
								StartAlarm(veh);
								format(str,sizeof(str),"** %s arromba a fechadura de um veículo na proximidade, mas falha.", PlayerName(playerid, 1));
								ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
   	    					}
				    	    case 2:
				    	    {
								StartAlarm(veh);
								format(str,sizeof(str),"** %s arromba a fechadura de um veículo na proximidade, mas falha.", PlayerName(playerid, 1));
								ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
   	    					}
   	    					case 3:
				    	    {
	    	        			format(str,sizeof(str),"** %s arromba a fechadura de um veículo na proximidade, mas toma um choque do sistema.", PlayerName(playerid, 1));
								ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								StartAlarm(veh);
			    	    	}
				    	    case 4:
				    	    {
	    	        			format(str,sizeof(str),"** %s tenta arrombar a fechadura de um veículo na proximidade, mas toma um choque do sistema.", PlayerName(playerid, 1));
								ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								StartAlarm(veh);
								new other = IsCharacterOnline(VehicleInfo[slot][vOwner]);
								new str2[128]; new vname[64];
								GetVehicleNameByModel(GetVehicleModel(veh),vname);
								format(str2,sizeof(str2),"{FFE900}[Alarme Veicular] Alguém tentou arrombar o seu %s.",vname);
								SendClientMessage(other,COLOR_YELLOW,str2);
								PlayerPlaySound(other,1149,0.0,0.0,0.0);
	    	    			}
				    	}
						return 1;
					}
					else
					{
						new Float:X, Float:Y, Float:Z;
      					GetPlayerPos(playerid,X,Y,Z);
	    				switch(VehicleInfo[slot][vLock])
    					{
 	    					case 0:
 	    					{
								SetPlayerPos(playerid,X,Y,Z);
								format(str,sizeof(str),"** %s tenta arrombar a fechadura de um veículo na proximidade, mas falha.", PlayerName(playerid, 1));
								ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
   	    					}
				    	    case 1:
				    	    {
    	        				SetPlayerPos(playerid,X,Y,Z);
								StartAlarm(veh);
								format(str,sizeof(str),"** %s tenta arrombar a fechadura de um veículo na proximidade, mas falha.", PlayerName(playerid, 1));
								ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
   	    					}
				    	    case 2:
				    	    {
			    	    		SetPlayerPos(playerid,X,Y,Z);
								StartAlarm(veh);
								format(str,sizeof(str),"** %s tenta arrombar a fechadura de um veículo na proximidade, mas falha.", PlayerName(playerid, 1));
								ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
   	    					}
   	    					case 3:
				    	    {
				    	    	SetPlayerPos(playerid,X,Y,Z);
	    	        			format(str,sizeof(str),"** %s tenta arrombar a fechadura de um veículo na proximidade, mas toma um choque do sistema.", PlayerName(playerid, 1));
								ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								SetPlayerDrunkLevel(playerid,4999);
								GameTextForPlayer(playerid,"~r~ATORDOADO!!!!",5000,5);
								StartAlarm(veh);

									/*new zone[128];
							    	new cstr[128];
						            GetZone(X, Y, zone, sizeof(zone));
							        format(cstr,sizeof(cstr),"[Alarme Veicular] %s",zone);
							        SendCopMsg(cstr);*/
			    	    	}
				    	    case 4:
				    	    {
			    	    		SetPlayerPos(playerid,X,Y,Z);
	    	        			format(str,sizeof(str),"** %s tenta arrombar a fechadura de um veículo na proximidade, mas toma um choque do sistema.", PlayerName(playerid, 1));
								ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								SetPlayerDrunkLevel(playerid,4999);
								GameTextForPlayer(playerid,"~r~ATORDOADO!!!!",5000,5);
								StartAlarm(veh);
								new other = IsCharacterOnline(VehicleInfo[slot][vOwner]);
								new str2[128]; new vname[64];
								GetVehicleNameByModel(GetVehicleModel(veh),vname);
								format(str2,sizeof(str2),"{FFE900}[Alarme Veicular] Alguém tentou arrombar o seu %s.",vname);
								SendClientMessage(other,COLOR_YELLOW,str2);
								PlayerPlaySound(other,1149,0.0,0.0,0.0);

								/*new zone[128];
							   	new cstr[128];
     							GetZone(X, Y, zone, sizeof(zone));
						      	format(cstr,sizeof(cstr),"[Alarme Veicular] %s",zone);
					        	SendCopMsg(cstr);*/
	    	    			}
				    	}
				    	PlayerInfo[playerid][pArrombarDNV] = 100;
				    	return 1;
					}
				}
				else return SendClientMessage(playerid,COLOR_LIGHTRED,"Este veículo não esta trancado.");
			}
			else
			{
		    	format(string,sizeof(string),"Aguarde %d segundos antes de tentar arrombar um carro/portamalas novamente.", PlayerInfo[playerid][pArrombarDNV]);
				SendClientMessage(playerid,COLOR_LIGHTRED, string);
				return 1;
			}
		}
		else
		{
	  		new c = -1;
		   	if(PlayerInfo[playerid][pEntrouCasa] != -1) c = PlayerInfo[playerid][pEntrouCasa];
		   	else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) c = PlayerInfo[playerid][pEntrouEmpresa];
		   	else if(PlayerInfo[playerid][pEntrouComplexo] != -1) c = PlayerInfo[playerid][pEntrouComplexo];
		   	else if(PlayerInfo[playerid][pEntrouGaragem] != -1) c = PlayerInfo[playerid][pEntrouGaragem];
		    if(c == -1)
		    {
	   			for(new i; i < MAX_HOUSES; i++)
			   	{
				   	if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
				   	{
		    	    	if(GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
			        	{
			           		if(HouseInfo[i][hDono] != 0)
				        	{
				        	    if(PlayerInfo[playerid][pArrombarDNV_C] != 0)
				        	    {
				        	        format(string,sizeof(string),"ERRO:{FFFFFF} Aguarde %d segundos antes de tentar arrombar um local novamente.", PlayerInfo[playerid][pArrombarDNV_C]);
									SendClientMessage(playerid,COLOR_LIGHTRED, string);
									return 1;
    		   					}
		   	   					if(HouseInfo[i][hTrancada] == 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} A porta desta casa não está trancada.");
								else
								{
								    if(PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa ser TC 5 ou mais para executar essa ação.");

								    new PolicesOnline = 0;
								    for(new cops = 0; cops < MAX_PLAYERS; cops++)
								    {
								        if(IsPlayerConnected(cops))
								        {
									        if(PlayerInfo[cops][pLogado])
									        {
										        if(FacInfo[GetFactionBySqlId(PlayerInfo[cops][pFac])][fTipo] == FAC_TIPO_PMERJ)
										        {
										            if(PlayerInfo[cops][pEmServico] == 1)
										            {
										                PolicesOnline++;
										            }
										        }
											}
										}
								    }
								    if(PolicesOnline < 6)
										return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} É preciso ter pelo menos seis policiais em serviço para executar essa ação.");

								    format(str,sizeof(str),"** %s está tentando arrombar a porta da residência %d.", PlayerName(playerid, 1), i);
									ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

								    UpdateTimerAr[playerid] = SetTimerEx("UpdateKeyArrombar",2000,true,"i",playerid);
								    ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
								    SetPVarInt(playerid, "Arrombando", i);
								    SetPVarInt(playerid, "ArrombandoOque", 1);
								}
							}
							else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode arrombar uma casa sem dono.");
						}
			 		}
				}
				for(new i; i < MAX_GARAGENS; i++)
			   	{
				   	if(IsPlayerInRangeOfPoint(playerid, 2, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
				   	{
		    	    	if(GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
			        	{
			           		if(GaragemInfo[i][hDono] != 0)
				        	{
				        	    if(PlayerInfo[playerid][pArrombarDNV_C] != 0)
				        	    {
				        	        format(string,sizeof(string),"ERRO:{FFFFFF} Aguarde %d segundos antes de tentar arrombar um local novamente.", PlayerInfo[playerid][pArrombarDNV_C]);
									SendClientMessage(playerid,COLOR_LIGHTRED, string);
									return 1;
    		   					}
		   	   					if(GaragemInfo[i][hTrancada] == 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta garagem não está trancada.");
								else
								{
								    if(PlayerInfo[playerid][pLevel] < 5) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa ser TC 5 ou mais para executar essa ação.");

								    new PolicesOnline = 0;
								    for(new cops = 0; cops < MAX_PLAYERS; cops++)
								    {
								        if(IsPlayerConnected(cops))
								        {
									        if(PlayerInfo[cops][pLogado])
									        {
										        if(FacInfo[GetFactionBySqlId(PlayerInfo[cops][pFac])][fTipo] == FAC_TIPO_PMERJ)
										        {
										            if(PlayerInfo[cops][pEmServico] == 1)
										            {
										                PolicesOnline++;
										            }
										        }
											}
										}
								    }
								    if(PolicesOnline == 6)
										return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} É preciso ter pelo menos 6 policiais em serviço para executar essa ação.");

								    format(str,sizeof(str),"** %s está tentando arrombar a porta da residência %d.", PlayerName(playerid, 1), i);
									ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

								    UpdateTimerAr[playerid] = SetTimerEx("UpdateKeyArrombar",2000,true,"i",playerid);
							     	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
								    SetPVarInt(playerid, "Arrombando", i);
								    SetPVarInt(playerid, "ArrombandoOque", 2);
								}
							}
							else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode arrombar uma garagem sem dono.");
						}
			 		}
				}
				for(new i; i < MAX_EMPRESAS; i++)
		   		{
				   	if(IsPlayerInRangeOfPoint(playerid, 3, EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]) && GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
					{
	    				if(GetPlayerVirtualWorld(playerid) == EmpInfo[i][eExWorld] && GetPlayerInterior(playerid) == EmpInfo[i][eExInt])
		       			{
		           			if(EmpInfo[i][eDono] == 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode arrombar uma empresa sem dono.");
		           			if(PlayerInfo[playerid][pArrombarDNV_C] != 0)
        	   				{
	        		      		format(string,sizeof(string),"Aguarde %d segundos antes de tentar arrombar um local novamente.", PlayerInfo[playerid][pArrombarDNV_C]);
								SendClientMessage(playerid,COLOR_LIGHTRED, string);
								return 1;
							}

  	   						if(EmpInfo[i][eTrancada] == 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"Esta empresa não está trancada.");
							else
							{
							    new chance;
							    if((FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB) && PlayerInfo[playerid][pEmServico] == 1)
							    {
  									chance = (600+random(100));
								}
								else
								{
								    chance = (20+random(70));
								}
			    				if(chance > 70)
				   				{
						       		format(str,sizeof(str),"** %s tenta arrombar a porta de uma empresa nas proximidades.", PlayerName(playerid, 1));
									ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									EmpInfo[i][eTrancada] = 0;

									if((FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB) && PlayerInfo[playerid][pEmServico] == 1) PlayerInfo[playerid][pArrombarDNV_C] = 1100;
									else PlayerInfo[playerid][pArrombarDNV_C] = 100;

									new strl[126];
									format(strl, sizeof(strl), "%s arrombou a porta da empresa %d.", PlayerName(playerid,0), i);
									ArrombarLog(strl);

									return 1;
								}
								else
								{
						    		format(str,sizeof(str),"** %s tenta arrombar a porta de uma empresa nas proximidades, mas falha.", PlayerName(playerid, 1));
									ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

									if((FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB) && PlayerInfo[playerid][pEmServico] == 1) PlayerInfo[playerid][pArrombarDNV_C] = 300;
									else PlayerInfo[playerid][pArrombarDNV_C] = 100;

									new strl[126];
									format(strl, sizeof(strl), "%s tentou arrombar a porta da empresa %d.", PlayerName(playerid,0), i);
									ArrombarLog(strl);
									return 1;
								}
							}
						}
					}
				}
		   	}
		   	else
		   	{
		   	    for(new i; i < MAX_HOUSES; i++)
			   	{
				   	if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
				   	{
		    	    	if(GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
			        	{
			           		if(HouseInfo[i][hDono] != 0)
				        	{
				        	    if(PlayerInfo[playerid][pArrombarDNV_C] != 0)
				        	    {
				        	        format(string,sizeof(string),"Aguarde %d segundos antes de tentar arrombar um local novamente.", PlayerInfo[playerid][pArrombarDNV_C]);
									SendClientMessage(playerid,COLOR_LIGHTRED, string);
									return 1;
    		   					}
		   	   					if(HouseInfo[i][hTrancada] == 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"A porta desta casa não está trancada.");
								else
								{
								    new chance;
								    if((FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB) && PlayerInfo[playerid][pEmServico] == 1) chance = (50+random(100));
								    else chance = (20+random(100));

						    		if(chance > 70)
					   				{
						      			format(str,sizeof(str),"** %s tenta arrombar a porta de uma casa nas proximidades, e obtem sucesso", PlayerName(playerid, 1));
										ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
										HouseInfo[i][hTrancada] = 0;
										if((FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB) && PlayerInfo[playerid][pEmServico] == 1) PlayerInfo[playerid][pArrombarDNV_C] = 1100;
										else
										{
											PlayerInfo[playerid][pArrombarDNV_C] = 100;

											if(HouseInfo[i][hAlarme] > 0)
											{
											    format(str,sizeof(str),"** [Alarme de Casa] Possivel ouvir um alarme vindo da residência %d.", i);
												ProxDetector(30.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

												new location[MAX_ZONE_NAME];
												Get2DZone(location, TOTAL_ZONE_NAME, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]);

												if(HouseInfo[i][hAlarme] > 1)
												{
												    new id_dono = 999;
												    for(new pp = 0; pp < MAX_PLAYERS; pp++)
												    {
                                                        if(HouseInfo[i][hDono] == PlayerInfo[pp][pID])
													    {
													        id_dono = pp;
													    }
													}

													format(string, sizeof(string), "SMS: O alarme da sua residência nº%d em %s foi disparado.", i, location);
													SCM(id_dono, COLOR_YELLOW, string);
												}
												if(HouseInfo[i][hAlarme] > 2)
												{
												    format(string, sizeof(string), "** MARE 0: O alarme da casa %d em %s foi disparado.**", i, location);
   													SendFacMessage(0x6666CCFF,1,string);
   													SendFacMessage(0x6666CCFF,2,string);
												}
											}

										}

										new strl[126];
										format(strl, sizeof(strl), "%s arrombou a porta da casa %d.", PlayerName(playerid,0), i);
										ArrombarLog(strl);

										return 1;
									}
									else
									{
					    				format(str,sizeof(str),"** %s tenta arrombar a porta de uma casa nas proximidades, mas falha.", PlayerName(playerid, 1));
										ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
										if((FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB) && PlayerInfo[playerid][pEmServico] == 1) PlayerInfo[playerid][pArrombarDNV_C] = 1100;
										else PlayerInfo[playerid][pArrombarDNV_C] = 100;

										new strl[126];
										format(strl, sizeof(strl), "%s tentou arrombar a porta da casa %d.", PlayerName(playerid,0), i);
										ArrombarLog(strl);
										return 1;
									}
								}
							}
							else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode arrombar uma casa sem dono.");
						}
			 		}
				}
				for(new i; i < MAX_GARAGENS; i++)
			   	{
				   	if(IsPlayerInRangeOfPoint(playerid, 2, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
				   	{
		    	    	if(GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
			        	{
			           		if(GaragemInfo[i][hDono] != 0)
				        	{
				        	    if(PlayerInfo[playerid][pArrombarDNV_C] != 0)
				        	    {
				        	        format(string,sizeof(string),"Aguarde %d segundos antes de tentar arrombar um local novamente.", PlayerInfo[playerid][pArrombarDNV_C]);
									SendClientMessage(playerid,COLOR_LIGHTRED, string);
									return 1;
    		   					}
		   	   					if(GaragemInfo[i][hTrancada] == 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"Esta garagem não está trancada.");
								else
								{
								    new chance;
								    if((FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB) && PlayerInfo[playerid][pEmServico] == 1) chance = (40+random(100));
								   	else chance = (20+random(100));

						    		if(chance > 70)
					   				{
						      			format(str,sizeof(str),"** %s tenta arrombar uma garagem nas proximidades, e obtem sucesso", PlayerName(playerid, 1));
										ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
										GaragemInfo[i][hTrancada] = 0;
										if((FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB) && PlayerInfo[playerid][pEmServico] == 1) PlayerInfo[playerid][pArrombarDNV_C] = 1100;
										else
										{
											PlayerInfo[playerid][pArrombarDNV_C] = 100;

											if(GaragemInfo[i][hAlarme] > 0)
											{
											    format(str,sizeof(str),"** [Alarme de Casa] Possivel ouvir um alarme vindo da garagem %d.", i);
												ProxDetector(30.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

												new location[MAX_ZONE_NAME];
												Get2DZone(location, TOTAL_ZONE_NAME, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]);

												if(GaragemInfo[i][hAlarme] > 1)
												{
												    new id_dono = 999;
												    for(new pp = 0; pp < MAX_PLAYERS; pp++)
												    {
                                                        if(GaragemInfo[i][hDono] == PlayerInfo[pp][pID])
													    {
													        id_dono = pp;
													    }
													    else if(HouseInfo[GaragemInfo[i][hTipo]][hDono] == PlayerInfo[pp][pID])
													    {
													        id_dono = pp;
													    }
													}

													format(string, sizeof(string), "SMS: O alarme da sua garagem nº%d em %s foi disparado.", i, location);
													SCM(id_dono, COLOR_YELLOW, string);
												}
												if(GaragemInfo[i][hAlarme] > 2)
												{
												    format(string, sizeof(string), "** MARE 0: O alarme da garagem nº%d em %s foi disparado.**", i, location);
   													SendFacMessage(0x6666CCFF,1,string);
   													SendFacMessage(0x6666CCFF,2,string);
												}
											}

										}

										new strl[126];
										format(strl, sizeof(strl), "%s arrombou a garagem %d.", PlayerName(playerid,0), i);
										ArrombarLog(strl);

										return 1;
									}
									else
									{
					    				format(str,sizeof(str),"** %s tenta arrombar uma garagem nas proximidades, mas falha.", PlayerName(playerid, 1));
										ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
										if((FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB) && PlayerInfo[playerid][pEmServico] == 1) PlayerInfo[playerid][pArrombarDNV_C] = 1100;
										else PlayerInfo[playerid][pArrombarDNV_C] = 100;

										new strl[126];
										format(strl, sizeof(strl), "%s tentou arrombar garagem %d mas falha.", PlayerName(playerid,0), i);
										ArrombarLog(strl);
										return 1;
									}
								}
							}
							else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode arrombar uma casa sem dono.");
						}
			 		}
				}
 	    		for(new m; m < MAX_MOVEIS; m++)
		   		{
				  	if(FurniInfo[m][mCriado] != 0)
			     	{
					   	if(IsPlayerInRangeOfPoint(playerid, 2, FurniInfo[m][mX], FurniInfo[m][mY], FurniInfo[m][mZ]) && GetPlayerVirtualWorld(playerid) == FurniInfo[m][mWorld] && GetPlayerInterior(playerid) == FurniInfo[m][mInt])
						{
					  	    if(PlayerInfo[playerid][pArrombarDNV_C] != 0)
				       	    {
        		       			format(string,sizeof(string),"Aguarde %d segundos antes de tentar arrombar um local novamente.", PlayerInfo[playerid][pArrombarDNV_C]);
								SendClientMessage(playerid,COLOR_LIGHTRED, string);
								return 1;
    		   				}
					   	    if(ObjetoEPorta(FurniInfo[m][mModelo]))
					   		{
					   		    if(FurniInfo[m][mPAberta] == 0)
					   		    {
						   		    if(FurniInfo[m][mPTrancada] == 1)
						   		    {
						   		    	new chance = (20+random(100));
							   			if(chance > 60)
									    {
								   			format(str,sizeof(str),"** %s tenta arrombar uma porta nas proximidades.", PlayerName(playerid, 1));
											ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
											FurniInfo[m][mPTrancada] = 0;
											FurniInfo[m][mPAberta] = 1;
											if((FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB) && PlayerInfo[playerid][pEmServico] == 1) PlayerInfo[playerid][pArrombarDNV_C] = 1100;
											else PlayerInfo[playerid][pArrombarDNV_C] = 100;
											SalvarMovel(m);

											new strl[126];
											format(strl, sizeof(strl), "%s arrombou uma porta dentro da casa %d.", PlayerName(playerid,0), PlayerInfo[playerid][pEntrouCasa]);
											ArrombarLog(strl);
										}
										else
										{
								   			format(str,sizeof(str),"** %s tenta arrombar uma porta nas proximidades, mas falha.", PlayerName(playerid, 1));
											ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

											if((FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB) && PlayerInfo[playerid][pEmServico] == 1) PlayerInfo[playerid][pArrombarDNV_C] = 1100;
											else PlayerInfo[playerid][pArrombarDNV_C] = 100;

											new strl[126];
											format(strl, sizeof(strl), "%s arrombou uma porta dentro da casa %d.", PlayerName(playerid,0), PlayerInfo[playerid][pEntrouCasa]);
											ArrombarLog(strl);
										}
						   			   	break;
									}
									else return SendClientMessage(playerid,COLOR_LIGHTRED,"Esta porta não está trancada.");
								}
								else return SendClientMessage(playerid, COLOR_LIGHTRED, "Esta porta está aberta.");
							}
					  	}
					}
				}
		   	}
		}
   	}
	else return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não tem um toolkit.");
	return 1;
}

forward FalhouArrombar(playerid);
public FalhouArrombar(playerid)
{
    KillTimer(UpdateTimerAr[playerid]);
	KeyPressed[playerid] = 0;
	KeyForPress[playerid] = 0;
    SetPVarInt(playerid, "Arrombando", 0);
    SetPVarInt(playerid, "ArrombandoOque", 0);
	ColorNow[playerid] = 0;
	CountTimer[playerid] = 0;
	SendClientMessage(playerid,0xFF6800FF,"Você falhou/cancelou o arrombamento.");
	PlayerTextDrawSetString(playerid,ClickTD[playerid],"PREPARADO!!!");
	PlayerTextDrawHide(playerid, ClickTD[playerid]);
	ClearAnimations(playerid);
	return 1;
}

forward ArrombouACasa(playerid);
public ArrombouACasa(playerid)
{
	new i = GetPVarInt(playerid, "Arrombando"), str[256];

  	KillTimer(UpdateTimerAr[playerid]);
  	CountTimer[playerid] = 0;

	format(str,sizeof(str),"** %s arromba a porta de uma casa nas proximidades.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	HouseInfo[i][hTrancada] = 0;
	if((FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB) && PlayerInfo[playerid][pEmServico] == 1) PlayerInfo[playerid][pArrombarDNV_C] = 1100;
	else PlayerInfo[playerid][pArrombarDNV_C] = 100;

	for(new pca = 0; pca < MAX_PLAYERS; pca++)
	{
  		if(IsPlayerConnected(pca))
	   	{
		   	if(IsPlayerInRangeOfPoint(pca, 20, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld] && GetPlayerInterior(playerid) == HouseInfo[i][hExInt])
			{
    			SendClientMessage(pca,COLOR_PURPLE,"** Possivel ouvir um barulho de porta sendo arrombada.");
			}
		}
	}
	if(HouseInfo[i][hAlarme] > 0)
	{
		HouseInfo[i][hAlarmeDisparado] = 300;

		format(str,sizeof(str),"** [Alarme de Casa] Possivel ouvir um alarme vindo da residência %d.", PlayerName(playerid, 1), i);
		ProxDetector(50.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		new location[MAX_ZONE_NAME];
		Get2DZone(location, TOTAL_ZONE_NAME, HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]);

		if(HouseInfo[i][hAlarme] > 1)
		{
			new id_dono = 999;
    		for(new pp = 0; pp < MAX_PLAYERS; pp++)
		    {
				if(HouseInfo[i][hDono] == PlayerInfo[pp][pID])
   				{
 					id_dono = pp;
	    		}
			}
			format(string, sizeof(string), "SMS: O alarme da sua residência nº%d em %s foi disparado.", i, location);
			SCM(id_dono, COLOR_YELLOW, string);
		}
		if(HouseInfo[i][hAlarme] > 2)
		{
  			format(string, sizeof(string), "** MARE 0: O alarme da casa nº%d em %s foi disparado.**", i, location);
			SendFacMessage(0x6666CCFF,1,string);
			SendFacMessage(0x6666CCFF,2,string);
		}
	}

	new strl[126];
	format(strl, sizeof(strl), "%s arrombou a porta da casa %d.", PlayerName(playerid,0), i);
	ArrombarLog(strl);
	return 1;
}

forward ArrombouAGaragem(playerid);
public ArrombouAGaragem(playerid)
{
	new i = GetPVarInt(playerid, "Arrombando"), str[256];

  	KillTimer(UpdateTimerAr[playerid]);
  	CountTimer[playerid] = 0;

	format(str,sizeof(str),"** %s arromba uma garagem nas proximidades.", PlayerName(playerid, 1));
	ProxDetector(20.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	GaragemInfo[i][hTrancada] = 0;
	if((FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB) && PlayerInfo[playerid][pEmServico] == 1) PlayerInfo[playerid][pArrombarDNV_C] = 1100;
	else PlayerInfo[playerid][pArrombarDNV_C] = 100;

	for(new pca = 0; pca < MAX_PLAYERS; pca++)
	{
  		if(IsPlayerConnected(pca))
	   	{
		   	if(IsPlayerInRangeOfPoint(pca, 20, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]) && GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld] && GetPlayerInterior(playerid) == GaragemInfo[i][hExInt])
			{
    			SendClientMessage(pca,COLOR_PURPLE,"** Possivel ouvir um barulho de uma garagem sendo arrombada.");
			}
		}
	}
	if(GaragemInfo[i][hAlarme] > 0)
	{
		GaragemInfo[i][hAlarmeDisparado] = 100;

		format(str,sizeof(str),"** [Alarme de Garagem] Possivel ouvir um alarme vindo da garagem %d.", PlayerName(playerid, 1), i);
		ProxDetector(50.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		new location[MAX_ZONE_NAME];
		Get2DZone(location, TOTAL_ZONE_NAME, GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]);

		if(GaragemInfo[i][hAlarme] > 1)
		{
			new id_dono = 999;
    		for(new pp = 0; pp < MAX_PLAYERS; pp++)
		    {
				if(GaragemInfo[i][hDono] == PlayerInfo[pp][pID])
   				{
 					id_dono = pp;
	    		}
	    		else if(HouseInfo[GaragemInfo[i][hTipo]][hDono] == PlayerInfo[pp][pID])
	    		{
	    		    id_dono = pp;
	    		}
			}
			format(string, sizeof(string), "SMS: O alarme da sua garagem nº%d em %s foi disparado.", i, location);
			SCM(id_dono, COLOR_YELLOW, string);
		}
		if(GaragemInfo[i][hAlarme] > 2)
		{
  			format(string, sizeof(string), "** MARE 0: O alarme da garagem nº%d em %s foi disparado.**", i, location);
			SendFacMessage(0x6666CCFF,1,string);
			SendFacMessage(0x6666CCFF,2,string);
		}
	}

	new strl[126];
	format(strl, sizeof(strl), "%s arrombou a garagem %d.", PlayerName(playerid,0), i);
	ArrombarLog(strl);
	return 1;
}

public UpdateKeyArrombar(playerid)
{
    if(GetPVarInt(playerid, "Arrombando") > 0)
	{
	    CountTimer[playerid] += 1;
		if(CountTimer[playerid] >= 25)
		{
		    new oq = GetPVarInt(playerid, "ArrombandoOque");

		    if(oq == 1) ArrombouACasa(playerid);
		    else if(oq == 2) ArrombouAGaragem(playerid);
		    else SCM(playerid, -1, "Erro #58897 - Poste na área de Bug Report.");
		}

		if(KeyPressed[playerid] == 0 && KeyForPress[playerid] != 0) return FalhouArrombar(playerid);
		KeyPressed[playerid] = 0;
		new txt[2];
		new changecolor[4];
		switch(random(3))
		{
		    case 0: KeyForPress[playerid] = 1, txt = "Y";
		    case 1: KeyForPress[playerid] = 2, txt = "H";
		    case 2: KeyForPress[playerid] = 3, txt = "N";
		}
		if(ColorNow[playerid] == 1) { ColorNow[playerid] = 2; } else if(ColorNow[playerid] == 2) { ColorNow[playerid] = 1; }
		switch(ColorNow[playerid])
		{
		    case 1: changecolor = "~r~";
		    case 2: changecolor = "~g~";
		}
		PlayerTextDrawShow(playerid, ClickTD[playerid]);
		PlayerPlaySound(playerid, 1137, 0.0, 0.0, 0.0);
		format(string, 64, "PRESSIONE: %s%s", changecolor, txt);
		PlayerTextDrawSetString(playerid,ClickTD[playerid],string);
	}
	return 1;
}

stock IsCharacterOnline(character)//Returns user ID
{
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    if(PlayerInfo[i][pLogado])
		{
	        if(PlayerInfo[i][pID] == character)
	        {
	            return i;
	        }
	    }
	}
	return -1;
}
//Fim Veh
//==============================================================================
//                          PONTOS DE ENTREGA - CAMINHAOSYST
//==============================================================================
stock PlayerToCar(playerid,type,Float:distance)
{
    new Float:x, Float:y, Float:z;
    for(new c =0; c < MAX_VEHICLES ;c++)
    {
        if(IsVehicleStreamedIn(c, playerid))
        {
            GetVehiclePos(c,x,y,z);
            if(IsPlayerInRangeOfPoint(playerid,distance,x,y,z))
            {
			    switch(type)
			    {
			        case 1: return true;
			        case 2: return c;
			    }
            }
        }
    }
    if(type == 1) return false;
    return INVALID_VEHICLE_ID;
}

CMD:criarpe(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new id;

    if (PlayerInfo[playerid][pAdmin] < 5)
	    return 1;

	id = Criando_PontoEntrega(playerid);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_WHITE, "O Limite de pontos de entrega foi atingido!");

	return 1;
}

Criando_PontoEntrega(playerid)
{
	new Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	for (new i = 0; i != MAX_EMPCARGA; i ++) {
		if (PontoEntrega[i][emExiste] == 2) {
  			PontoEntrega[i][emExiste] = 1;
  			PontoEntrega[i][emCompra] = 0;
			format(PontoEntrega[i][emNome], 32, "Ponto de Entrega");

            PontoEntrega[i][emX] = x;
            PontoEntrega[i][emY] = y;
            PontoEntrega[i][emZ] = z;

			PontoEntrega[i][emEmpresa] = 9999;
   			PontoEntrega[i][emIndustria] = 9999;
      		PontoEntrega[i][emIndustriaC] = 9999;
        	PontoEntrega[i][emStock] = 0;
         	PontoEntrega[i][emStockMax] = 0;
          	PontoEntrega[i][emPagProd] = 0;
       		PontoEntrega[i][emCobraProd] = 0;
         	PontoEntrega[i][emProdHora] = 0;
         	PontoEntrega[i][emConsHora] = 0;
         	PontoEntrega[i][emStockC] = 0;
         	PontoEntrega[i][emStockMaxC] = 0;
	        PontoEntrega[i][emTipo] = 1;
         	PontoEntrega[i][emStatus] = 1;
         	PontoEntrega[i][emFabrica] = 0;

         	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: Ponto de Entrega reutilizado | ID: %d | SQLID: %d.", i, PontoEntrega[i][emID]);
			return i;
		}
		else if(!PontoEntrega[i][emExiste]){
		    PontoEntrega[i][emExiste] = 1;
  			PontoEntrega[i][emCompra] = 0;
			format(PontoEntrega[i][emNome], 32, "Ponto de Entrega");

            PontoEntrega[i][emX] = x;
            PontoEntrega[i][emY] = y;
            PontoEntrega[i][emZ] = z;

			PontoEntrega[i][emEmpresa] = 9999;
   			PontoEntrega[i][emIndustria] = 9999;
      		PontoEntrega[i][emIndustriaC] = 9999;
        	PontoEntrega[i][emStock] = 0;
         	PontoEntrega[i][emStockMax] = 0;
          	PontoEntrega[i][emPagProd] = 0;
       		PontoEntrega[i][emCobraProd] = 0;
         	PontoEntrega[i][emProdHora] = 0;
         	PontoEntrega[i][emConsHora] = 0;
         	PontoEntrega[i][emStockC] = 0;
         	PontoEntrega[i][emStockMaxC] = 0;
	        PontoEntrega[i][emTipo] = 1;
         	PontoEntrega[i][emStatus] = 1;
         	PontoEntrega[i][emFabrica] = 0;

		    mysql_function_query(Pipeline, "INSERT INTO `pontoentrega` (`emEmpresa`) VALUES(9999)", false, "PontodeEntregasCriado", "d", i);
		    return i;
		}
	}
	return -1;
}

forward PontodeEntregasCriado(bizid);
public PontodeEntregasCriado(bizid)
{
	if (bizid == -1) return 1;

	PontoEntrega[bizid][emID] = cache_insert_id();

	SalvarPontoEntrega(bizid);
	Atualizar_PontoEntrega(bizid);

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: Um admin criou um ponto de entrega, ID: %d.", PontoEntrega[bizid][emID]);

	return 1;
}

Atualizar_PontoEntrega(entid)
{
	if (entid != -1 && PontoEntrega[entid][emExiste])
	{
		if (IsValidDynamic3DTextLabel(PontoEntrega[entid][emLabel]))
		    DestroyDynamic3DTextLabel(PontoEntrega[entid][emLabel]);

		if (IsValidDynamicPickup(PontoEntrega[entid][emPickup]))
		    DestroyDynamicPickup(PontoEntrega[entid][emPickup]);

        PontoEntrega[entid][emPickup] = CreateDynamicPickup(1239, 23, PontoEntrega[entid][emX], PontoEntrega[entid][emY], PontoEntrega[entid][emZ]);

		if(PontoEntrega[entid][emEmpresa] == 200 && PontoEntrega[entid][emFabrica] != 3 && PontoEntrega[entid][emFabrica] != 6 && PontoEntrega[entid][emCompra] != 6) {
			//format(string, sizeof(string), "%s\nEstoque: %d/%d", PontoEntrega[entid][emNome],PontoEntrega[entid][emStock],PontoEntrega[entid][emStockMax]);

            if(PontoEntrega[entid][emFabrica] > 0 && PontoEntrega[entid][emFabrica] < 200)
				format(string, sizeof(string), "%s\n%s\nEstoque: %d/%d", PontoEntrega[entid][emNome],GetCargaTipo(PontoEntrega[entid][emFabrica]),PontoEntrega[entid][emStock], PontoEntrega[entid][emStockMax]);

			else if(PontoEntrega[entid][emCompra] > 0 && PontoEntrega[entid][emCompra] < 200)
			format(string, sizeof(string), "%s\n%s\nEstoque: %d/%d", PontoEntrega[entid][emNome],GetCargaTipo(PontoEntrega[entid][emCompra]),PontoEntrega[entid][emStockC], PontoEntrega[entid][emStockMaxC]);

			else format(string, sizeof(string), "%s\nEstoque: %d/%d", PontoEntrega[entid][emNome],PontoEntrega[PontoEntrega[entid][emEmpresa]][emStock], PontoEntrega[entid][emStockMax]);
		}
		else if(PontoEntrega[entid][emFabrica] == 3)
			format(string,sizeof(string), "%s\n%s\n%d/%d litros.\n{00D67B}R$%d{ABC3E5} por litro\n'/carga comprar'", PontoEntrega[entid][emNome],GetCargaTipo(PontoEntrega[entid][emFabrica]),PontoEntrega[entid][emStock],PontoEntrega[entid][emStockMax], PontoEntrega[entid][emCobraProd]);
		else if(PontoEntrega[entid][emFabrica] == 6)
			format(string,sizeof(string), "%s\n%s\n%d/%d litros.\n{00D67B}R$%d{ABC3E5} por carga\n'/carga comprar'", PontoEntrega[entid][emNome],GetCargaTipo(PontoEntrega[entid][emFabrica]),PontoEntrega[entid][emStock],PontoEntrega[entid][emStockMax], PontoEntrega[entid][emCobraProd]);
		else if(PontoEntrega[entid][emCompra] == 6)
			format(string,sizeof(string), "%s\n%s\n%d/%d litros.\n{00D67B}R$%d{ABC3E5} por carga\n'/carga vender'", PontoEntrega[entid][emNome],GetCargaTipo(PontoEntrega[entid][emCompra]),PontoEntrega[entid][emStockC],PontoEntrega[entid][emStockMaxC], PontoEntrega[entid][emPagProd]);
		else if(PontoEntrega[entid][emEmpresa] != 9999) {
			format(string, sizeof(string), "%s\nEstoque: %d/300", PontoEntrega[entid][emNome],EmpInfo[PontoEntrega[entid][emEmpresa]][eProdutos]);
			if(EmpInfo[PontoEntrega[entid][emEmpresa]][eBank] < EmpInfo[PontoEntrega[entid][emEmpresa]][ePagaProd]) EmpInfo[PontoEntrega[entid][emEmpresa]][eReqProd] = 0;
		}
		PontoEntrega[entid][emLabel] = CreateDynamic3DTextLabel(string, -1, PontoEntrega[entid][emX], PontoEntrega[entid][emY], PontoEntrega[entid][emZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}
	return 1;
}

SalvarPontoEntrega(entid)
{
	static
	    query[2048];

	format(query, sizeof(query), "UPDATE `pontoentrega` SET `emExiste` = '%d', `emNome` = '%s', `emCompra` = '%d', `emX` = '%.4f', `emY` = '%.4f', `emZ` = '%.4f', `emEmpresa` = '%d', `emStock` = '%d', `emPagProd` = '%d', `emStockMax` = '%d', `emTipo` = '%d',`emFabrica` = '%d', `emStatus` = '%d', `emCobraProd` = '%d', `emProdHora` = '%d',`emConsHora` = '%d'",
		PontoEntrega[entid][emExiste],
		PontoEntrega[entid][emNome],
		PontoEntrega[entid][emCompra],
		PontoEntrega[entid][emX],
		PontoEntrega[entid][emY],
		PontoEntrega[entid][emZ],
		PontoEntrega[entid][emEmpresa],
		PontoEntrega[entid][emStock],
		PontoEntrega[entid][emPagProd],
		PontoEntrega[entid][emStockMax],
		PontoEntrega[entid][emTipo],
		PontoEntrega[entid][emFabrica],
		PontoEntrega[entid][emStatus],
		PontoEntrega[entid][emCobraProd],
		PontoEntrega[entid][emProdHora],
		PontoEntrega[entid][emConsHora]
	);
	format(query, sizeof(query), "%s, `emStockC` = '%d', `emStockMaxC` = '%d', `emIndustria`='%d', `emIndustriaC`='%d' WHERE `emID` = '%d'",
		query,
		PontoEntrega[entid][emStockC],
		PontoEntrega[entid][emStockMaxC],
		PontoEntrega[entid][emIndustria],
  		PontoEntrega[entid][emIndustriaC],
		PontoEntrega[entid][emID] );
 	mysql_function_query(Pipeline, query, false, "", "");
 	return 1;
}
forward CarregarPontoEntrega();
public CarregarPontoEntrega()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, Pipeline);

    new temp[130];
    printf("================ [ Pontos de Entrega ]");
	for (new i = 0; i < rows; i ++)
	{
	    if (i < MAX_EMPCARGA)
		{
		    cache_get_field_content(i, "emID", temp); 			PontoEntrega[i][emID] = strval(temp);
			cache_get_field_content(i, "emNome", temp); 		format(PontoEntrega[i][emNome], 50, "%s", temp);
	        cache_get_field_content(i, "emExiste", temp); 		PontoEntrega[i][emExiste] = strval(temp);
	        cache_get_field_content(i, "emCompra", temp); 		PontoEntrega[i][emCompra] = strval(temp);
	        cache_get_field_content(i, "emX", temp); 			PontoEntrega[i][emX] = floatstr(temp);
	        cache_get_field_content(i, "emY", temp); 			PontoEntrega[i][emY] = floatstr(temp);
	        cache_get_field_content(i, "emZ", temp); 			PontoEntrega[i][emZ] = floatstr(temp);
	        cache_get_field_content(i, "emEmpresa", temp); 		PontoEntrega[i][emEmpresa] = strval(temp);
	     	cache_get_field_content(i, "emStock", temp); 		PontoEntrega[i][emStock] = strval(temp);
	     	cache_get_field_content(i, "emPagProd", temp); 		PontoEntrega[i][emPagProd] = strval(temp);
	        cache_get_field_content(i, "emStockMax", temp); 	PontoEntrega[i][emStockMax] = strval(temp);
	        cache_get_field_content(i, "emTipo", temp); 		PontoEntrega[i][emTipo] = strval(temp);
	        cache_get_field_content(i, "emFabrica", temp); 		PontoEntrega[i][emFabrica] = strval(temp);
	        cache_get_field_content(i, "emStatus", temp); 		PontoEntrega[i][emStatus] = strval(temp);
	        cache_get_field_content(i, "emCobraProd", temp); 	PontoEntrega[i][emCobraProd] = strval(temp);
	        cache_get_field_content(i, "emProdHora", temp); 	PontoEntrega[i][emProdHora] = strval(temp);
	        cache_get_field_content(i, "emConsHora", temp); 	PontoEntrega[i][emConsHora] = strval(temp);
	        cache_get_field_content(i, "emStockC", temp); 		PontoEntrega[i][emStockC] = strval(temp);
	        cache_get_field_content(i, "emStockMaxC", temp); 	PontoEntrega[i][emStockMaxC] = strval(temp);
	        cache_get_field_content(i, "emIndustria", temp); 	PontoEntrega[i][emIndustria] = strval(temp);
	        cache_get_field_content(i, "emIndustriaC", temp); 	PontoEntrega[i][emIndustriaC] = strval(temp);

            printf("ID: %d | i: %d", PontoEntrega[i][emID], i);
			if(PontoEntrega[i][emExiste])
			Atualizar_PontoEntrega(i);
		}
	}
	return 1;
}

forward GetClosetIndustry(playerid);
public GetClosetIndustry(playerid){
	new winner = -1; new Float:windistance = 9999999.0;
	for(new i = 0; i < MAX_EMPCARGA; i ++){
	    if(PontoEntrega[i][emExiste]){
			new Float:distance = GetDistanceToPoint(playerid,PontoEntrega[i][emX],PontoEntrega[i][emY],PontoEntrega[i][emZ]);
			if(distance < windistance && distance < 2.0)
			{
			    winner = i;
			    windistance = distance;
			}
		}
	}
	return winner;
}

CMD:editarpe(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return 1;
	new id = -1,
 		type[12],
		var = -1;

	if (PlayerInfo[playerid][pAdmin] < 5) return 1;
	id = GetClosetIndustry(playerid);

	if (sscanf(params, "s[12]i",type, var)) {
 		SendClientMessage(playerid, COLOR_LIGHTRED, "/editarpe [id] [opcao] [var]");
	 	SendClientMessage(playerid, COLOR_CINZA, "[OUTRO]:{FFFFFF} /criarpe /nomeindustria");
   		SendClientMessage(playerid, COLOR_CINZA, "[NOMES]:{FFFFFF} Ajuda, local, compra, emPaga, emEmpresa, stock, ids, eindustria, cindustria, status");
   		SendClientMessage(playerid, COLOR_CINZA, "[NOMES]:{FFFFFF} stockmax, tipo, Fabrica, emCobraProd,emProdHora,emConsHora,StockC,StockMaxC, ir");
		return 1;
	}

	format(string, sizeof(string), "Próximo a industria: %d", id);
	SendClientMessage(playerid, COLOR_WHITE, string);

 	if (!strcmp(type, "Ajuda", true)) {
		SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF} local - Local do ponto de entrega/compra.");
		SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF} compra - Tipo de caixa que o ponto compra.");
		SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF} emPaga - Quanto o ponto de entrega paga p/ caixa.");
		SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF} emEmpresa - Empresa que ganha produtos vendidos no ponto (Não é obrigatorio ter)");
		SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF} nome - Nome do ponto de entrega/industria");
		SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF} stock - Stock atual // stockmax - Stock maximo que pode ter.");
		SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF} StockC - Stock atual de consumo // MaxStockC - Stock maximo de consumo.");
		SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF} tipo - Tipo da Fabrica = 1 Primaria / 2 Secundária.");
		SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF} Fabrica - Tipo de caixa que o ponto fabrica.");
		SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF} emCobraProd - Quantia cobrada por produto que a empres vende.");
		SendClientMessage(playerid, COLOR_YELLOW, "{FFFFFF} emProdHora - Quantidade de caixa produzida por hora. || emConsHora - Caixas consumidas por hora");
		return 1;
	}
	else if (!strcmp(type, "ids", true)) {
		for(new i = 0; i < MAX_EMPCARGA; i++) {
			if(PontoEntrega[i][emExiste] == 1) {
  				if(PontoEntrega[i][emID] != 0) {
	    			if(IsPlayerInRangeOfPoint(playerid,30.0, PontoEntrega[i][emX], PontoEntrega[i][emY], PontoEntrega[i][emZ])) {
    					new Float:Sinal = GetPlayerDistanceFromPoint(playerid, PontoEntrega[i][emX], PontoEntrega[i][emY], PontoEntrega[i][emZ]);
					    format(string, sizeof(string), "|- ID: %d | Distancia: %.4f | Nome: %s -|", i, Sinal, PontoEntrega[i][emNome]);
					    SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
		}
		return 1;
	}
	else if (!strcmp(type, "local", true)) {
		GetPlayerPos(playerid, PontoEntrega[var][emX], PontoEntrega[var][emY], PontoEntrega[var][emZ]);
		SalvarPontoEntrega(var);
		Atualizar_PontoEntrega(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o local do ponto de entrega %d.", PlayerName(playerid, 0), var);
		return 1;
	}
	else if (!strcmp(type, "status", true)) {
		PontoEntrega[id][emStatus] = var;
		SalvarPontoEntrega(var);
		Atualizar_PontoEntrega(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o status do ponto de entrega %d.", PlayerName(playerid, 0), var);
		return 1;
	}
	else if (!strcmp(type, "ir", true)) {
 		SetPlayerPos(playerid, PontoEntrega[var][emX], PontoEntrega[var][emY], PontoEntrega[var][emZ]);
   		return 1;
	}
	else if (!strcmp(type, "StockC", true)) {
 		if(id == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo a uma industria.");
		PontoEntrega[id][emStockC] = var;
		SalvarPontoEntrega(id);
		Atualizar_PontoEntrega(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o stock atual de produto/consumo que o ponto de entrega %d para: %d.", PlayerName(playerid, 0), id, var);
		return 1;
	}
	else if (!strcmp(type, "maxstockC", true)) {
 		if(id == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo a uma industria.");
   		PontoEntrega[id][emStockMaxC] = var;
		SalvarPontoEntrega(id);
		Atualizar_PontoEntrega(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o stock maximo de produto/consumo que o ponto de entrega %d para: %d.", PlayerName(playerid, 0), id, var);
		return 1;
	}
	else if (!strcmp(type, "compra", true)) {
 		if(id == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo a uma industria.");
   		PontoEntrega[id][emCompra] = var;
		SalvarPontoEntrega(id);
		Atualizar_PontoEntrega(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o tipo de produto que o ponto de entrega %d recebe para: %d.", PlayerName(playerid, 0), id, var);
		return 1;
	}
	else if (!strcmp(type, "emPaga", true)) {
 		if(id == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo a uma industria.");
   		PontoEntrega[id][emPagProd] = var;
 		SalvarPontoEntrega(id);
 		Atualizar_PontoEntrega(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o quanto o ponto de entrega %d paga por caixa para: %d.", PlayerName(playerid, 0), id, var);
		return 1;
	}
	else if (!strcmp(type, "emCobraProd", true)) {
 		if(id == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo a uma industria.");
   		PontoEntrega[id][emCobraProd] = var;
 		SalvarPontoEntrega(id);
 		Atualizar_PontoEntrega(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o quanto o ponto de entrega %d cobra por caixa para: %d.", PlayerName(playerid, 0), id, var);
		return 1;
	}
	else if (!strcmp(type, "emProdHora", true)) {
 		if(id == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo a uma industria.");
   		PontoEntrega[id][emProdHora] = var;
 		SalvarPontoEntrega(id);
 		Atualizar_PontoEntrega(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o quanto o ponto de entrega %d produz de caixa por hora para: %d.", PlayerName(playerid, 0), id, var);
		return 1;
	}
	else if (!strcmp(type, "emConsHora", true)) {
 		if(id == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo a uma industria.");
   		PontoEntrega[id][emConsHora] = var;
		SalvarPontoEntrega(id);
		Atualizar_PontoEntrega(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o quanto o ponto de entrega %d consome de caixa por hora para: %d.", PlayerName(playerid, 0), id, var);
		return 1;
	}
	else if (!strcmp(type, "emEmpresa", true)) {
 		if(id == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo a uma industria.");
   		PontoEntrega[id][emEmpresa] = var;
	  	SalvarPontoEntrega(id);
	  	Atualizar_PontoEntrega(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou a empresa referente ao ponto de entrega %d para: %d.", PlayerName(playerid, 0), id, var);
		return 1;
	}
	else if (!strcmp(type, "stock", true)) {
 		if(PontoEntrega[id][emEmpresa] != 9999) return SendClientMessage(playerid, COLOR_WHITE, "Você deve editar o stock da empresa.");
   		PontoEntrega[id][emStock] = var;
 		SalvarPontoEntrega(id);
 		Atualizar_PontoEntrega(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o quanto o ponto de entrega %d tem de stock para: %d.", PlayerName(playerid, 0), id, var);
		return 1;
	}
	else if (!strcmp(type, "eindustria", true)) {
 		if(id == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo a uma industria.");
   		PontoEntrega[id][emIndustria] = var;
 		SalvarPontoEntrega(id);
 		Atualizar_PontoEntrega(id);
		SCM(playerid, COLOR_LIGHTRED, "Você ajustou a Industria vinculada dessa industria. (Venda)");
		//SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o quanto o ponto de entrega %d tem de stock para: %s.", PlayerName(playerid, 0), id, string);
		return 1;
	}
	else if (!strcmp(type, "cindustria", true)) {
 		if(id == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo a uma industria.");
   		PontoEntrega[id][emIndustriaC] = var;
		SalvarPontoEntrega(id);
		Atualizar_PontoEntrega(id);
		SCM(playerid, COLOR_LIGHTRED, "Você ajustou a Industria vinculada dessa industria. (Compra)");
		//SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o quanto o ponto de entrega %d tem de stock para: %s.", PlayerName(playerid, 0), id, string);
		return 1;
	}
	else if (!strcmp(type, "stockmax", true)) {
 		if(id == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo a uma industria.");
   		if(PontoEntrega[id][emEmpresa] != 9999) return SendClientMessage(playerid, COLOR_WHITE, "Você deve editar o stock da empresa.");
   		PontoEntrega[id][emStockMax] = var;
		SalvarPontoEntrega(id);
		Atualizar_PontoEntrega(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o quanto o ponto de entrega %d tem de Stock Maximo para: %d.", PlayerName(playerid, 0), id, var);
		return 1;
	}
	else if (!strcmp(type, "fabrica", true)) {
 		if(id == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo a uma industria.");
   		PontoEntrega[id][emFabrica] = var;
 		SalvarPontoEntrega(id);
 		Atualizar_PontoEntrega(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o tipo de produto que o ponto de entrega %d fabrica para: %d.", PlayerName(playerid, 0), id, var);
		return 1;
	}
	else if (!strcmp(type, "tipo", true)) {
 		if(id == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo a uma industria.");
   		if(var == 0 || var == 1 || var == 2 || var == 3) {
     		PontoEntrega[id][emTipo] = var;
	  		SalvarPontoEntrega(id);
	  		Atualizar_PontoEntrega(id);
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o tipo do ponto de entrega %d para: %d.", PlayerName(playerid, 0), id, var);
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "Valores 0 = Nenhum / 1 = Primária / 2 = Secundária / 3 = Porto ");
	}
	return 1;
}

CMD:nomeindustria(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new id = -1,
	    name[24];

	if (PlayerInfo[playerid][pAdmin] < 5) return 1;

    id = GetClosetIndustry(playerid);
    if(id == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo a uma industria.");

	if (sscanf(params, "s[24]", name)) {
	    SendClientMessage(playerid, COLOR_LIGHTRED,"/editarpe [name]");
	    return 1;
	}

    format(PontoEntrega[id][emNome], 32, name);
	SalvarPontoEntrega(id);
	Atualizar_PontoEntrega(id);
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajustou o nome do ponto de entrega %d para: \"%s\".", PlayerName(playerid, 0), id, name);
	return 1;
}

CMD:abastecerbomba(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pJob] != JOB_CAMINHONEIRO) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um caminhoneiro.");

	new vehicleid = GetPlayerVehicleID(playerid);
 	new Trailer = GetVehicleTrailer(vehicleid);

	if (!vehicleid) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em um veiculo!");

    if (!Trailer) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem uma carreta!");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa estar dirigindo o veiculo!");

	//if (GetEngineStatus(vehicleid)) return SendClientMessage(playerid, COLOR_WHITE, "Desligue o motor.");

	new id = Pump_Nearest(playerid);
	if (id != -1)
	{
		if (VehicleInfo[Trailer][vCargaGas] <= 0 || VehicleInfo[Trailer][vCargaTipo] != 1)
			return SendClientMessage(playerid, COLOR_WHITE, "Não há gasolina em sua carreta.");

		if (IsPumpOccupied(id))
		    return SendClientMessage(playerid, COLOR_WHITE, "Esta bomba está sendo utilizada, aguarde.");

		if (PumpData[id][pumpFuel] >= 10000)
   			return SendClientMessage(playerid, COLOR_WHITE, "Esta bomba já está abastecida.");

        TogglePlayerControllable(playerid,0);

		PlayerInfo[playerid][pGasPump] = id;
		PlayerInfo[playerid][pGasStation] = PumpData[id][pumpBusiness];

        PlayerInfo[playerid][pEnchendoBomba] = 1;
		PlayerInfo[playerid][pCargaGas] = vehicleid;
		SendClientMessage(playerid, COLOR_WHITE, "{00CDD8}[DICA]:{FFFFFF} Segure {BC0000}'Y'{FFFFFF} para encher a bomba ou pressione {BC0000}'H'{FFFFFF} para parar de abastece-la.");
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a nenhuma bomba de gasolina.");
	}
	return 1;
}
CMD:tpda(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pJob] != JOB_CAMINHONEIRO) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não é um caminhoneiro.");

	for(new i; i<50; i++)
	{
	    VendoTPDA[playerid][i] = -1;
	}
	Dialog_Show(playerid, TruckerPDA, DIALOG_STYLE_LIST, "Trucker Personal Digital Assistant ", "{CDCFD3}Mostrar{FFFFFF} Industrias Primárias\n{CDCFD3}Mostrar{FFFFFF} Industrias Secundárias\n{CDCFD3}Mostrar{FFFFFF} Empresas aceitando carga\n{CDCFD3}Mostrar{FFFFFF} Porto de Santos", "Selecionar", "Sair");
	return 1;
}
Dialog:TruckerPDA(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	new stringlist[2054], stringTipo[64], count = 0;
	switch(listitem)
	{
	    case 0:
	    {
	        count = 0;
	        for(new i = 0; i < MAX_EMPCARGA; i++)
	        {
				if(PontoEntrega[i][emExiste] != 0)
				{
					if(PontoEntrega[i][emEmpresa] == 9999 && PontoEntrega[i][emTipo] == 1)
					{
	    				if(PontoEntrega[i][emFabrica] > 0 && PontoEntrega[i][emIndustria] == 9999)
					    {
					    	switch(PontoEntrega[i][emStatus])
				    		{
		   						case 0: format(stringTipo,sizeof(stringTipo), "{AF0000}Fechada{FFFFFF}");
		     					case 1: format(stringTipo,sizeof(stringTipo), "{A9DE31}Aberta{FFFFFF}");
				     		}
							if(i == 0)
  							{
         						format(stringlist, sizeof(stringlist), "%s (%s)", PontoEntrega[i][emNome], stringTipo);
         						VendoTPDA[playerid][count] = PontoEntrega[i][emID]-1;
               					count++;
							}
							else
							{
  								format(stringlist, sizeof(stringlist), "%s\n%s (%s)", stringlist, PontoEntrega[i][emNome], stringTipo);
  								VendoTPDA[playerid][count] = PontoEntrega[i][emID]-1;
       							count++;
							}
						}
					}
				}
			}
  			Dialog_Show(playerid, TruckerPDA_Primarias, DIALOG_STYLE_LIST, "TPDA- Industrias Primárias ", stringlist, "Selecionar", "Voltar");
		}
		case 1:
	    {
	        count = 0;
	        for(new i = 0; i < MAX_EMPCARGA; i++)
	        {
				if(PontoEntrega[i][emExiste] != 0)
				{
					if(PontoEntrega[i][emEmpresa] == 9999 && PontoEntrega[i][emTipo] == 2 && PontoEntrega[i][emIndustria] == 9999 && PontoEntrega[i][emIndustriaC] == 9999)
					{
					    	switch(PontoEntrega[i][emStatus])
				    		{
		   						case 0: format(stringTipo,sizeof(stringTipo), "{AF0000}Fechada{FFFFFF}");
		     					case 1: format(stringTipo,sizeof(stringTipo), "{A9DE31}Aberta{FFFFFF}");
				     		}
							if(i == 0)
  							{
         						format(stringlist, sizeof(stringlist), "%s (%s)", PontoEntrega[i][emNome], stringTipo);
         						VendoTPDA[playerid][count] = PontoEntrega[i][emID]-1;
               					count++;
							}
							else
							{
  								format(stringlist, sizeof(stringlist), "%s\n%s (%s)", stringlist, PontoEntrega[i][emNome], stringTipo);
  								VendoTPDA[playerid][count] = PontoEntrega[i][emID]-1;
       							count++;
							}
					}
				}
			}
  			Dialog_Show(playerid, TruckerPDA_Secundarias, DIALOG_STYLE_LIST, "TPDA- Industrias Secundárias ", stringlist, "Selecionar", "Voltar");
		}
	    case 2:
	    {
	        count = 0;
			for(new i = 0; i < MAX_EMPRESAS; i++)
	        {
	            if(count < 11)
	            {
					if(EmpInfo[i][eCompraTipo] != 0)
					{
						if(EmpInfo[i][eReqProd] > 0)
						{
			   				if(EmpInfo[i][ePagaProd] > 0)
						    {
						    	if(EmpInfo[i][eBank] > (EmpInfo[i][eReqProd]*EmpInfo[i][ePagaProd]))
						    	{
						    	    format(stringTipo, sizeof stringTipo, "%s", GetProdutoNome(EmpInfo[i][eCompraTipo]));
									if(count == 0)
							   		{
							   		    if(EmpInfo[i][eCompraTipo] == 3)
							   		    {
					                       	format(stringlist, sizeof(stringlist), "{A9DE31}Pagina 1{FFFFFF}\n%sR$%d / unidade\tProcura: %d Litro(s)\t%s", stringTipo, EmpInfo[i][ePagaProd], EmpInfo[i][eReqProd], EmpInfo[i][eNome]);
										}
							   		    else
							   		    {
					                       	format(stringlist, sizeof(stringlist), "{A9DE31}Pagina 1{FFFFFF}\n%sR$%d / unidade\tProcura: %d Caixa(s)\t%s", stringTipo, EmpInfo[i][ePagaProd], EmpInfo[i][eReqProd], EmpInfo[i][eNome]);
										}
										count++;
										VendoTPDA[playerid][count] = EmpInfo[i][eID];
									}
									else
									{
					      				if(EmpInfo[i][eCompraTipo] == 3)
							   		    {
					                       	format(stringlist, sizeof(stringlist), "%s\n%sR$%d / unidade\tProcura: %d Litro(s)\t%s", stringlist, stringTipo, EmpInfo[i][ePagaProd], EmpInfo[i][eReqProd], EmpInfo[i][eNome]);
										}
							   		    else
							   		    {
					                       	format(stringlist, sizeof(stringlist), "%s\n%sR$%d / unidade\tProcura: %d Caixa(s)\t%s", stringlist, stringTipo, EmpInfo[i][ePagaProd], EmpInfo[i][eReqProd], EmpInfo[i][eNome]);
										}
										count++;
										VendoTPDA[playerid][count] = EmpInfo[i][eID];
									}
								}
							}
						}
					}
				}
				if(count == 11)
				{
				    count = 11;
    				format(stringlist, sizeof(stringlist), "%s\n{A9DE31}Pagina 2 >>{FFFFFF}",stringlist);
    				break;
				}
			}
			if(count == 0)
			{
   				format(stringlist, sizeof(stringlist), "\nNenhuma empresa está comprando produtos no momento\n");
   				Dialog_Show(playerid, 9999, DIALOG_STYLE_MSGBOX, "Trucker Personal Digital Assistant ", stringlist, "Fechar", "");
   				return 1;
			}
  			Dialog_Show(playerid, TruckerPDA_Empresas, DIALOG_STYLE_LIST, "TPDA- Empresas ", stringlist, "Selecionar", "Voltar");
		}
		case 3:
		{
		    new stringTipo1[24];
			switch(PortoStatus) {
				case 0: format(stringTipo,sizeof(stringTipo), "{AF0000}Fechadas{FFFFFF}");
				case 1: format(stringTipo,sizeof(stringTipo), "{A9DE31}Abertas{FFFFFF}");
  			}

  			format(stringlist, sizeof(stringlist), "{FFFFFF}{A9DE31}Porto de Santos{FFFFFF}\n\n As industrias estão %s\n\n{A9DE31}Procura:{FFFFFF}\n{CDCFD3}Mercadoria:\t\tPreço:\t\tEm Estoque (Estoque Máximo){FFFFFF}",stringTipo);
			for(new i = 0; i < MAX_EMPCARGA; i++) {
		    	if(PontoEntrega[i][emExiste] != 0) {
			    	if(PontoEntrega[i][emTipo] == 3) {
			        	format(stringTipo1, sizeof stringTipo1, "%s", GetProdutoNome(PontoEntrega[i][emCompra]));
						format(stringlist, sizeof(stringlist), "%s\n%sR$%d\t\t%d caixas {CDCFD3}(%d){FFFFFF}",stringlist,stringTipo1,PontoEntrega[i][emPagProd],PontoEntrega[i][emStockC],PontoEntrega[i][emStockMaxC]);
					}
				}
			}
		    Dialog_Show(playerid, TruckerPDA_Porto, DIALOG_STYLE_MSGBOX, "TPDA- Porto de LS ", stringlist, "Fechar", "Voltar");
		}
	}
    return 1;
}
Dialog:TruckerPDA_Porto(playerid, response, listitem, inputtext[])
{
	if(!response) {
	    for(new i; i<50; i++)
		{
		    VendoTPDA[playerid][i] = -1;
		}
		Dialog_Show(playerid, TruckerPDA, DIALOG_STYLE_LIST, "Trucker Personal Digital Assistant ", "{CDCFD3}Mostrar{FFFFFF} Industrias Primárias\n{CDCFD3}Mostrar{FFFFFF} Industrias Secundárias\n{CDCFD3}Mostrar{FFFFFF} Empresas aceitando carga\nPorto de Santos", "Selecionar", "Sair");
	}
	return 1;
}
Dialog:TruckerPDA_Empresas(playerid, response, listitem, inputtext[])
{
    new stringlist[2054], stringTipo[64], count = 0;
	switch(listitem)
	{
	    case 1..11:
	    {
	        new IDPE = VendoTPDA[playerid][listitem];
	        SetPlayerCheckpoint(playerid, EmpInfo[IDPE][eExX], EmpInfo[IDPE][eExY], EmpInfo[IDPE][eExZ], 2.5);
	        cp_target[playerid] = 1;
	    }
		case 12:
	    {
			for(new i = 0; i < MAX_EMPRESAS; i++)
		    {
		    	if(count > 11 && count < 22)
		     	{
     				if(EmpInfo[i][eCompraTipo] != 0)
					{
						if(EmpInfo[i][eReqProd] > 0)
						{
			   				if(EmpInfo[i][ePagaProd] > 0)
						    {
						        format(stringTipo, sizeof stringTipo, "%s", GetProdutoNome(EmpInfo[i][eCompraTipo]));
								if(count == 0)
		  						{
		  			    			if(EmpInfo[i][eCompraTipo] == 3)
					   			   	{
		             					format(stringlist, sizeof(stringlist), "{A9DE31}Pagina 2\n<< Voltar{FFFFFF}\n%sR$%d / p/L\tProcura: %d Litros\t%s", stringTipo, EmpInfo[i][ePagaProd], EmpInfo[i][eReqProd], EmpInfo[i][eNome]);
									}
		 			    			else
				   			    	{
		             					format(stringlist, sizeof(stringlist), "{A9DE31}Pagina 2\n<< Voltar{FFFFFF}\n%sR$%d / unidade\tProcura: %d Caixas\t%s", stringTipo, EmpInfo[i][ePagaProd], EmpInfo[i][eReqProd], EmpInfo[i][eNome]);
									}
									count++;
									VendoTPDA[playerid][count] = EmpInfo[i][eID];
								}
								else
								{
		  							if(EmpInfo[i][eCompraTipo] == 3)
		   			    			{
		             					format(stringlist, sizeof(stringlist), "{A9DE31}Pagina 2\n<< Voltar{FFFFFF}\n%sR$%d / p/L\tProcura: %d Litros\t%s", stringTipo, EmpInfo[i][ePagaProd], EmpInfo[i][eReqProd], EmpInfo[i][eNome]);
									}
		 			    			else
				   			    	{
		             					format(stringlist, sizeof(stringlist), "{A9DE31}Pagina 2\n<< Voltar{FFFFFF}\n%sR$%d / unidade\tProcura: %d Caixas\t%s", stringTipo, EmpInfo[i][ePagaProd], EmpInfo[i][eReqProd], EmpInfo[i][eNome]);
									}
									count++;
									VendoTPDA[playerid][count] = EmpInfo[i][eID];
								}
							}
						}
					}
				}
				if(count == 22)
				{
    				count = 22;
	   				format(stringlist, sizeof(stringlist), "%s\n{A9DE31}Pagina 3 >>{FFFFFF}",stringlist);
	   				break;
				}
			}
			if(count == 0)
			{
				format(stringlist, sizeof(stringlist), "\nNenhuma empresa está comprando produtos no momento\n");
				Dialog_Show(playerid, 9999, DIALOG_STYLE_MSGBOX, "Trucker Personal Digital Assistant ", stringlist, "Fechar", "");
				return 1;
			}
			Dialog_Show(playerid, TruckerPDA_Empresas2, DIALOG_STYLE_LIST, "TPDA- Empresas ", stringlist, "Selecionar", "Voltar");
		}
	}
	return 1;
}
Dialog:TruckerPDA_Empresas2(playerid, response, listitem, inputtext[])
{
    new stringlist[2054], stringTipo[64], count = 0;
	switch(listitem)
	{
	    case 1:
	    {
	        count = 0;
			for(new i = 0; i < MAX_EMPRESAS; i++)
	        {
	            if(count > 22)
	            {
					if(EmpInfo[i][eCompraTipo] != 0)
					{
						if(EmpInfo[i][eReqProd] > 0)
						{
			   				if(EmpInfo[i][ePagaProd] > 0)
						    {
						        format(stringTipo, sizeof stringTipo, "%s", GetProdutoNome(EmpInfo[i][eCompraTipo]));
								if(count == 0)
						   		{
						   		    if(EmpInfo[i][eCompraTipo] == 3)
						   		    {
				                       	format(stringlist, sizeof(stringlist), "{A9DE31}Pagina 1{FFFFFF}\n%sR$%d / unidade\tProcura: %d Litro(s)\t%s", stringTipo, EmpInfo[i][ePagaProd], EmpInfo[i][eReqProd], EmpInfo[i][eNome]);
									}
						   		    else
						   		    {
				                       	format(stringlist, sizeof(stringlist), "{A9DE31}Pagina 1{FFFFFF}\n%sR$%d / unidade\tProcura: %d Caixa(s)\t%s", stringTipo, EmpInfo[i][ePagaProd], EmpInfo[i][eReqProd], EmpInfo[i][eNome]);
									}
									count++;
									VendoTPDA[playerid][count] = EmpInfo[i][eID];
								}
								else
								{
				      				if(EmpInfo[i][eCompraTipo] == 3)
						   		    {
				                       	format(stringlist, sizeof(stringlist), "%s\n%sR$%d / unidade\tProcura: %d Litro(s)\t%s", stringlist, stringTipo, EmpInfo[i][ePagaProd], EmpInfo[i][eReqProd], EmpInfo[i][eNome]);
									}
						   		    else
						   		    {
				                       	format(stringlist, sizeof(stringlist), "%s\n%sR$%d / unidade\tProcura: %d Caixa(s)\t%s", stringlist, stringTipo, EmpInfo[i][ePagaProd], EmpInfo[i][eReqProd], EmpInfo[i][eNome]);
									}
									count++;
									VendoTPDA[playerid][count] = EmpInfo[i][eID];
								}
							}
						}
					}
				}
				if(count == 33)
				{
				    count = 33;
    				format(stringlist, sizeof(stringlist), "%s\n{A9DE31}Pagina 4 >>{FFFFFF}",stringlist);
    				break;
				}
			}
			if(count == 0)
			{
   				format(stringlist, sizeof(stringlist), "\nNenhuma empresa está comprando produtos no momento\n");
   				Dialog_Show(playerid, 9999, DIALOG_STYLE_MSGBOX, "Trucker Personal Digital Assistant ", stringlist, "Fechar", "");
   				return 1;
			}
  			Dialog_Show(playerid, TruckerPDA_Empresas, DIALOG_STYLE_LIST, "TPDA- Empresas ", stringlist, "Selecionar", "Voltar");
	    }
	    case 2..11:
	    {
	        new IDPE = VendoTPDA[playerid][listitem];
	        SetPlayerCheckpoint(playerid, EmpInfo[IDPE][eExX], EmpInfo[IDPE][eExY], EmpInfo[IDPE][eExZ], 2.5);
	        cp_target[playerid] = 1;
	    }
		case 12:
	    {
			for(new i = 11; i < MAX_EMPRESAS; i++)
		    {
		    	if(count <= 11)
		     	{
     				if(EmpInfo[i][eCompraTipo] != 0)
					{
						if(EmpInfo[i][eReqProd] > 0)
						{
			   				if(EmpInfo[i][ePagaProd] > 0)
						    {
								format(stringTipo, sizeof stringTipo, "%s", GetProdutoNome(EmpInfo[i][eCompraTipo]));

								if(count == 0)
		  						{
		  			    			if(EmpInfo[i][eCompraTipo] == 3)
					   			   	{
		             					format(stringlist, sizeof(stringlist), "{A9DE31}Pagina 4\n<< Voltar{FFFFFF}\n%sR$%d / p/L\tProcura: %d Litros\t%s", stringTipo, EmpInfo[i][ePagaProd], EmpInfo[i][eReqProd], EmpInfo[i][eNome]);
									}
		 			    			else
				   			    	{
		             					format(stringlist, sizeof(stringlist), "{A9DE31}Pagina 4\n<< Voltar{FFFFFF}\n%sR$%d / unidade\tProcura: %d Caixas\t%s", stringTipo, EmpInfo[i][ePagaProd], EmpInfo[i][eReqProd], EmpInfo[i][eNome]);
									}
									count++;
									VendoTPDA[playerid][count] = EmpInfo[i][eID];
								}
								else
								{
		  							if(EmpInfo[i][eCompraTipo] == 3)
		   			    			{
		             					format(stringlist, sizeof(stringlist), "{A9DE31}Pagina 4\n<< Voltar{FFFFFF}\n%sR$%d / p/L\tProcura: %d Litros\t%s", stringTipo, EmpInfo[i][ePagaProd], EmpInfo[i][eReqProd], EmpInfo[i][eNome]);
									}
		 			    			else
				   			    	{
		             					format(stringlist, sizeof(stringlist), "{A9DE31}Pagina 4\n<< Voltar{FFFFFF}\n%sR$%d / unidade\tProcura: %d Caixas\t%s", stringTipo, EmpInfo[i][ePagaProd], EmpInfo[i][eReqProd], EmpInfo[i][eNome]);
									}
									count++;
									VendoTPDA[playerid][count] = EmpInfo[i][eID];
								}
							}
						}
					}
					if(count == 11)
					{
					    count = 11;
		   				format(stringlist, sizeof(stringlist), "%s\n{A9DE31}Pagina 3 >>{FFFFFF}",stringlist);
		   				break;
					}
				}
			}
			if(count == 0)
			{
				format(stringlist, sizeof(stringlist), "\nNenhuma empresa está comprando produtos no momento\n");
				Dialog_Show(playerid, 9999, DIALOG_STYLE_MSGBOX, "Trucker Personal Digital Assistant ", stringlist, "Fechar", "");
				return 1;
			}
			Dialog_Show(playerid, TruckerPDA_Empresas2, DIALOG_STYLE_LIST, "TPDA- Empresas ", stringlist, "Selecionar", "Voltar");
		}
	}
	return 1;
}

Dialog:TruckerPDA_Primarias(playerid, response, listitem, inputtext[])
{
    //format(string, sizeof(string), "ListItem: %d", VendoTPDA[playerid][listitem]);
	//SendClientMessage(playerid, -1, string);

	if(!response || VendoTPDA[playerid][listitem] == -1) return 1;
	new stringlist[1024],stringTipo[24],stringTipo1[24];
	new EmpID = VendoTPDA[playerid][listitem];

	switch(PontoEntrega[EmpID][emStatus])
	{
		case 0: format(stringTipo,sizeof(stringTipo), "{AF0000}Fechada{FFFFFF}");
		case 1: format(stringTipo,sizeof(stringTipo), "{A9DE31}Aberta{FFFFFF}");
	}

	format(stringTipo1, sizeof stringTipo1, "%s", GetProdutoNome(PontoEntrega[EmpID][emFabrica]));

	if(PontoEntrega[EmpID][emFabrica] == 3)
	{
		format(stringlist, sizeof(stringlist), "{FFFFFF}Bem vindo a {A9DE31}%s{FFFFFF}\n\n A industria está %s\n\n{A9DE31}A venda:{FFFFFF}\n{CDCFD3}Mercadoria:\t\tPreço:\t\tProdução/Hora\tEm Estoque (Estoque Máximo){FFFFFF}\n%sR$%d\t\t+%d L\t\t", PontoEntrega[EmpID][emNome],stringTipo,stringTipo1,PontoEntrega[EmpID][emCobraProd],PontoEntrega[EmpID][emProdHora]);
		format(stringlist, sizeof(stringlist), "%s\t\t%d Litros {CDCFD3}(%d)\n\n{A9DE31}Procura:{CDCFD3}\nEssa empresa é primária, portanto ela produz algo sem precisar de nenhum recurso.", stringlist,PontoEntrega[EmpID][emStock],PontoEntrega[EmpID][emStockMax]);
	}
	else
	{
	    format(stringlist, sizeof(stringlist), "{FFFFFF}Bem vindo a {A9DE31}%s{FFFFFF}\n\n A industria está %s\n\n{A9DE31}A venda:{FFFFFF}\n{CDCFD3}Mercadoria:\t\tPreço:\t\tProdução/Hora\tEm Estoque (Estoque Máximo){FFFFFF}", PontoEntrega[EmpID][emNome],stringTipo);
        format(stringlist, sizeof(stringlist), "%s\n%sR$%d\t\t+%d\t\t\t%d caixas {CDCFD3}(%d){FFFFFF}",stringlist,stringTipo1,PontoEntrega[EmpID][emCobraProd],PontoEntrega[EmpID][emProdHora],PontoEntrega[EmpID][emStock],PontoEntrega[EmpID][emStockMax]);

		for(new i = 0; i < MAX_EMPCARGA; i++)
		{
		    if(PontoEntrega[i][emExiste] != 0)
			{
			    if(PontoEntrega[i][emIndustria] == EmpID)
			    {
			        format(stringTipo1, sizeof stringTipo1, "%s", GetProdutoNome(PontoEntrega[i][emFabrica]));
					format(stringlist, sizeof(stringlist), "%s\n%sR$%d\t\t+%d\t\t\t%d caixas {CDCFD3}(%d){FFFFFF}",stringlist,stringTipo1,PontoEntrega[i][emCobraProd],PontoEntrega[i][emProdHora],PontoEntrega[i][emStock],PontoEntrega[i][emStockMax]);
				}
			}
		}

		format(stringlist, sizeof(stringlist), "%s\n\n{A9DE31}Procura:{CDCFD3}\nEssa empresa é primária, portanto ela produz algo sem precisar de nenhum recurso.", stringlist);
	}

	PlayerInfo[playerid][pItemTPDA] = EmpID;
	Dialog_Show(playerid, TruckerPDA_GPSinicio, DIALOG_STYLE_MSGBOX, PontoEntrega[EmpID][emNome], stringlist, "GPS", "Voltar");
	return 1;
}
Dialog:TruckerPDA_GPSinicio(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        Dialog_Show(playerid, TruckerPDA, DIALOG_STYLE_LIST, "Trucker Personal Digital Assistant ", "{CDCFD3}Mostrar{FFFFFF} Industrias Primárias\n{CDCFD3}Mostrar{FFFFFF} Industrias Secundárias\n{CDCFD3}Mostrar{FFFFFF} Empresas aceitando carga\n{CDCFD3}Mostrar{FFFFFF} Porto de Santos", "Selecionar", "Sair");
	}
	else
	{
	    new IDPE = PlayerInfo[playerid][pItemTPDA];
	    SetPlayerCheckpoint(playerid, PontoEntrega[IDPE][emX], PontoEntrega[IDPE][emY], PontoEntrega[IDPE][emZ], 2.5);
	    cp_target[playerid] = 1;
	    //format(string, sizeof(string), "IDPE: %d", PlayerInfo[playerid][pItemTPDA]);
		//SendClientMessage(playerid, -1, string);
	}
	return 1;
}
Dialog:TruckerPDA_Secundarias(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	new stringlist[1024],stringTipo[24],stringTipo1[24],stringTipo2[24];
	new empid = VendoTPDA[playerid][listitem];

	switch(PontoEntrega[empid][emStatus])
	{
		case 0: format(stringTipo,sizeof(stringTipo), "{AF0000}Fechada{FFFFFF}");
		case 1: format(stringTipo,sizeof(stringTipo), "{A9DE31}Aberta{FFFFFF}");
	}
	format(stringTipo1, sizeof stringTipo1, "%s", GetProdutoNome(PontoEntrega[empid][emFabrica]));
	format(stringTipo2, sizeof stringTipo2, "%s", GetProdutoNome(PontoEntrega[empid][emCompra]));

	/*if(PontoEntrega[empid][emFabrica] == 0)
	{
		format(stringlist, sizeof(stringlist), "{FFFFFF}Bem vindo a {A9DE31}%s{FFFFFF}\n\n A industria está %s\n\n", PontoEntrega[empid][emNome],stringTipo);
		format(stringlist, sizeof(stringlist), "%s{A9DE31}Procura:{FFFFFF}\n{CDCFD3}Mercadoria:\t\tPreço:\t\tConsumo/Hora\t\tEm Estoque (Estoque Máximo){FFFFFF}\n", stringlist);
		format(stringlist, sizeof(stringlist), "%s%s\t\tR$%d\t\t-%d\t\t\t\t%d caixas {CDCFD3}(%d)",stringlist, stringTipo2,PontoEntrega[empid][emPagProd],PontoEntrega[empid][emConsHora],PontoEntrega[empid][emStockC],PontoEntrega[empid][emStockMaxC]);
	}
	else */
	if(PontoEntrega[empid][emCompra] == 56)
	{
		format(stringlist, sizeof(stringlist), "{FFFFFF}Bem vindo a {A9DE31}%s{FFFFFF}\n\n A industria está %s\n\n", PontoEntrega[empid][emNome],stringTipo);
		format(stringlist, sizeof(stringlist), "%s{A9DE31}Procura:{FFFFFF}\n{CDCFD3}Mercadoria:\t\tPreço:\t\tConsumo/Hora\tEm Estoque (Estoque Máximo){FFFFFF}\n", stringlist);
		format(stringlist, sizeof(stringlist), "%s%sR$%d\t\t-%d\t\t\t\t%d Prensado(s) {CDCFD3}(%d)",stringlist, stringTipo2,PontoEntrega[empid][emPagProd],PontoEntrega[empid][emConsHora],PontoEntrega[empid][emStockC],PontoEntrega[empid][emStockMaxC]);
	}
	else if(PontoEntrega[empid][emCompra] == 55 && PontoEntrega[empid][emFabrica] == 56)
	{
		format(stringlist, sizeof(stringlist), "{FFFFFF}Bem vindo a {A9DE31}%s{FFFFFF}\n\n A industria está %s\n\n{A9DE31}A venda:{FFFFFF}\n{CDCFD3}Mercadoria:\t\tPreço:\t\tProdução/Hora\tEm Estoque (Estoque Máximo){FFFFFF}\n%sR$%d\t\t+%d\t\t", PontoEntrega[empid][emNome],stringTipo,stringTipo1,PontoEntrega[empid][emCobraProd],PontoEntrega[empid][emProdHora]);
		format(stringlist, sizeof(stringlist), "%s\t\t%d Prensado(s) {CDCFD3}(%d)\n\n{A9DE31}Procura:{FFFFFF}\n{CDCFD3}Mercadoria:\t\tPreço:\t\tConsumo/Hora\tEm Estoque (Estoque Máximo){FFFFFF}\n", stringlist,PontoEntrega[empid][emStock],PontoEntrega[empid][emStockMax]);
		format(stringlist, sizeof(stringlist), "%s%sR$%d\t\t-%d\t\t\t\t%d carcaças {CDCFD3}(%d)",stringlist, stringTipo2,PontoEntrega[empid][emPagProd],PontoEntrega[empid][emConsHora],PontoEntrega[empid][emStockC],PontoEntrega[empid][emStockMaxC]);
	}
	else
	{
		format(stringlist, sizeof(stringlist), "{FFFFFF}Bem vindo a {A9DE31}%s{FFFFFF}\n\n A industria está %s\n\n{A9DE31}A venda:{FFFFFF}\n{CDCFD3}Mercadoria:\t\tPreço:\t\tProdução/Hora\tEm Estoque (Estoque Máximo){FFFFFF}", PontoEntrega[empid][emNome],stringTipo);

        //=======================================================================================================================
		if(PontoEntrega[empid][emFabrica] != 0)
			format(stringlist, sizeof(stringlist), "%s\n%sR$%d\t\t+%d\t\t\t%d caixas {CDCFD3}(%d){FFFFFF}",stringlist,stringTipo1,PontoEntrega[empid][emCobraProd],PontoEntrega[empid][emProdHora],PontoEntrega[empid][emStock],PontoEntrega[empid][emStockMax]);

		for(new i = 0; i < MAX_EMPCARGA; i++) {
		    if(PontoEntrega[i][emExiste] != 0 && PontoEntrega[i][emFabrica] != 0) {
			    if(PontoEntrega[i][emIndustria] == empid) {
			        format(stringTipo1, sizeof stringTipo1, "%s", GetProdutoNome(PontoEntrega[i][emFabrica]));
					format(stringlist, sizeof(stringlist), "%s\n%sR$%d\t\t+%d\t\t\t%d caixas {CDCFD3}(%d){FFFFFF}",stringlist,stringTipo1,PontoEntrega[i][emCobraProd],PontoEntrega[i][emProdHora],PontoEntrega[i][emStock],PontoEntrega[i][emStockMax]);
				}
			}
		}
		//=======================================================================================================================
		format(stringlist, sizeof(stringlist), "%s\n\n{A9DE31}Procura:{FFFFFF}\n{CDCFD3}Mercadoria:\t\tPreço:\t\tConsumo/Hora\tEm Estoque (Estoque Máximo){FFFFFF}", stringlist);

		if(PontoEntrega[empid][emCompra] != 0)
			format(stringlist, sizeof(stringlist), "%s\n%sR$%d\t\t-%d\t\t\t%d caixas {CDCFD3}(%d){FFFFFF}",stringlist, stringTipo2,PontoEntrega[empid][emPagProd],PontoEntrega[empid][emConsHora],PontoEntrega[empid][emStockC],PontoEntrega[empid][emStockMaxC]);

		for(new c = 0; c < MAX_EMPCARGA; c++) {
		    if(PontoEntrega[c][emExiste] && PontoEntrega[c][emCompra] != 0) {
			    if(PontoEntrega[c][emIndustriaC] == empid) {
			        format(stringTipo2, sizeof stringTipo2, "%s", GetProdutoNome(PontoEntrega[c][emCompra]));
					format(stringlist, sizeof(stringlist), "%s\n%sR$%d\t\t-%d\t\t\t%d caixas {CDCFD3}(%d){FFFFFF}",stringlist,stringTipo2,PontoEntrega[c][emPagProd],PontoEntrega[c][emConsHora],PontoEntrega[c][emStockC],PontoEntrega[c][emStockMaxC]);
				}
			}
		}
	}

	PlayerInfo[playerid][pItemTPDA] = empid;
	Dialog_Show(playerid, TruckerPDA_GPSinicio, DIALOG_STYLE_MSGBOX, PontoEntrega[empid][emNome], stringlist, "GPS", "Voltar");
	return 1;
}

forward Timer_Industrias(tipo);
public Timer_Industrias(tipo) {
	if(tipo == 1) {
		for(new EmpID = 0; EmpID < MAX_EMPCARGA; EmpID++) {
		    if(PontoEntrega[EmpID][emExiste] != 0 && PontoEntrega[EmpID][emStatus] != 0) {
				if(PontoEntrega[EmpID][emEmpresa] == 9999) {
				    if(PontoEntrega[EmpID][emTipo] == 1) {
					    if(PontoEntrega[EmpID][emStock] < PontoEntrega[EmpID][emStockMax]) {
	         				new QuantiaFinal = PontoEntrega[EmpID][emStock]+PontoEntrega[EmpID][emProdHora];
			       			if(QuantiaFinal > PontoEntrega[EmpID][emStockMax]) {
			          			PontoEntrega[EmpID][emStock] = PontoEntrega[EmpID][emStockMax];
			          			Atualizar_PontoEntrega(EmpID);
								SalvarPontoEntrega(EmpID);
					        }
					        else {
			          			PontoEntrega[EmpID][emStock] = QuantiaFinal;
			          			Atualizar_PontoEntrega(EmpID);
								SalvarPontoEntrega(EmpID);
					        }
				        }
					}
					else {
					    if(PontoEntrega[EmpID][emFabrica] > 0 && PontoEntrega[EmpID][emFabrica] != 56) {
					    	new produzirC = 0;

					    	if(PontoEntrega[EmpID][emStockC] >= PontoEntrega[EmpID][emConsHora]) {
		        				if(PontoEntrega[EmpID][emCompra] == 6) {
		            				produzirC += (PontoEntrega[EmpID][emConsHora]*0.10);
                  					PontoEntrega[EmpID][emStockC] -= PontoEntrega[EmpID][emConsHora];
						        }
						        else {
      								produzirC += PontoEntrega[EmpID][emConsHora];
              						PontoEntrega[EmpID][emStockC] -= PontoEntrega[EmpID][emConsHora];
								}
							}

							for(new cc = 0; cc < MAX_EMPCARGA; cc++) {
				    			if(PontoEntrega[cc][emExiste] != 0) {
									if(PontoEntrega[cc][emIndustriaC] == EmpID){
									    if(PontoEntrega[cc][emStockC] >= PontoEntrega[cc][emConsHora]) {
									        if(PontoEntrega[cc][emCompra] == 6) {
									            produzirC += (PontoEntrega[cc][emConsHora]*0.10);
			                                    PontoEntrega[cc][emStockC] -= PontoEntrega[cc][emConsHora];
									        }
									        else {
	             								produzirC += PontoEntrega[cc][emConsHora];
			                                    PontoEntrega[cc][emStockC] -= PontoEntrega[cc][emConsHora];
											}

											Atualizar_PontoEntrega(cc);
											SalvarPontoEntrega(cc);
										}
									}
    							}
							}

    						PontoEntrega[EmpID][emStock] += produzirC;
      						if(PontoEntrega[EmpID][emStock] > PontoEntrega[EmpID][emStockMax]) PontoEntrega[EmpID][emStock] = PontoEntrega[EmpID][emStockMax];

      						Atualizar_PontoEntrega(EmpID);
							SalvarPontoEntrega(EmpID);
						}
						else
						{
						    if(PontoEntrega[EmpID][emFabrica] == 56)
						    {
						        PontoEntrega[EmpID][emStockC] = 0;
						    }
						    /*else
						    {
							    if(PontoEntrega[EmpID][emConsHora] <= stocktotal_C)
							    {
							        new QuantiaFinal1 = stocktotal_C-PontoEntrega[EmpID][emConsHora];
							        if(QuantiaFinal1 > 0)
							        {
			            				PontoEntrega[EmpID][emStockC] = QuantiaFinal1;
			         					Atualizar_PontoEntrega(EmpID);
										SalvarPontoEntrega(EmpID);
			       					}
							        else
							        {
			            				PontoEntrega[EmpID][emStockC] = 0;
							            Atualizar_PontoEntrega(EmpID);
										SalvarPontoEntrega(EmpID);
								    }
								}
							}*/
						}
					}
				}
			}
		}
	}
	else if(tipo == 2)
	{
	    for(new EmpID = 0; EmpID < MAX_EMPCARGA; EmpID++)
		{
		    if(PontoEntrega[EmpID][emExiste] != 0 && PontoEntrega[EmpID][emStatus] != 0)
			{
				if(PontoEntrega[EmpID][emEmpresa] == 9999)
				{
				    if(PontoEntrega[EmpID][emTipo] == 1)
					{
		   				if(PontoEntrega[EmpID][emCompra] == 56)
					    {
	        				PontoEntrega[EmpID][emStockC]--;
						}



						new stocktotal = PontoEntrega[EmpID][emStock],
						    stocktotal_C = PontoEntrega[EmpID][emStockC];
      					for(new cc = 0; cc < MAX_EMPCARGA; cc++) {
		    				if(PontoEntrega[cc][emExiste] != 0) {
		    				    if(PontoEntrega[cc][emIndustria] == EmpID) {
		    				        if(PontoEntrega[PontoEntrega[cc][emIndustria]][emTipo] == 2){
										stocktotal += PontoEntrega[cc][emStock];
										if(PontoEntrega[cc][emStock] > 0) PontoEntrega[cc][emStock] = 0;
										Atualizar_PontoEntrega(cc);
										SalvarPontoEntrega(cc);
									}
								}
 								if(PontoEntrega[cc][emIndustriaC] == EmpID){
								    stocktotal_C += PontoEntrega[cc][emStockC];
								    if(PontoEntrega[cc][emStockC] > 0) PontoEntrega[cc][emStockC] = 0;
								    Atualizar_PontoEntrega(cc);
									SalvarPontoEntrega(cc);
								}
        					}
						}


						if(PontoEntrega[EmpID][emCompra] == 55 && PontoEntrega[EmpID][emFabrica] == 56)
						if(stocktotal >= PontoEntrega[EmpID][emProdHora] && PontoEntrega[EmpID][emConsHora] <= stocktotal_C)
		    			{
	        				new QuantiaFinal = stocktotal+PontoEntrega[EmpID][emProdHora];
			       			if(QuantiaFinal > PontoEntrega[EmpID][emStockMax])
					        {
	            				PontoEntrega[EmpID][emStock] = stocktotal;
          						Atualizar_PontoEntrega(EmpID);
								SalvarPontoEntrega(EmpID);
        					}
					        else
					        {
          						PontoEntrega[EmpID][emStock] = QuantiaFinal;
			          			Atualizar_PontoEntrega(EmpID);
								SalvarPontoEntrega(EmpID);
        					}
					        new QuantiaFinal1 = stocktotal_C-PontoEntrega[EmpID][emConsHora];
             				if(QuantiaFinal1 > 0)
					        {
         						PontoEntrega[EmpID][emStockC] = QuantiaFinal1;
	         					Atualizar_PontoEntrega(EmpID);
								SalvarPontoEntrega(EmpID);
			       			}
		      				else
				       		{
			           			PontoEntrega[EmpID][emStockC] = 0;
							  	Atualizar_PontoEntrega(EmpID);
								SalvarPontoEntrega(EmpID);
							}
						}
					}
				}
			}
		}
	}
	else if(tipo == 3) {
	    PortoStatus = !PortoStatus;

 		for(new EmpID = 0; EmpID < MAX_EMPCARGA; EmpID++) {
   			if(PontoEntrega[EmpID][emExiste] != 0) {
	    		if(PontoEntrega[EmpID][emTipo] == 3) {
  	    			PontoEntrega[EmpID][emStockC] = 0;
    	    		PontoEntrega[EmpID][emStatus] = PortoStatus;
				}
			}
		}
	}
	return 1;
}

stock IsPumpOccupied(pumpid)
{
	for(new i; i< MAX_PLAYERS; i++)
	{
	    if(PlayerInfo[i][pLogado])
	    {
			if (PlayerInfo[i][pRefill] != INVALID_VEHICLE_ID)
			{
			    if (PlayerInfo[i][pGasPump] == pumpid) return 1;
			}
		}
	}
	return 0;
}

Pump_Nearest(playerid)
{
    for (new i = 0; i != MAX_GAS_PUMPS; i ++)
	{
		if (PumpData[i][pumpExists] && IsPlayerInRangeOfPoint(playerid, 5.0, PumpData[i][pumpPos][0], PumpData[i][pumpPos][1], PumpData[i][pumpPos][2]))
		{
	    	return i;
		}
	}
	return -1;
}
forward Pump_Load();
public Pump_Load()
{
	static
	    rows,
	    fields,
		temp[124];

	cache_get_data(rows, fields, Pipeline);

	for (new i = 0; i < rows; i ++)
	{
	    cache_get_field_content(i, "pumpID", temp);
	    new pumpid = strval(temp);
		PumpData[pumpid][pumpID] = pumpid;

		if(PumpData[pumpid][pumpID] > 0)
		{
			PumpData[pumpid][pumpExists] = true;

		    cache_get_field_content(i, "ID", temp); 		PumpData[pumpid][pumpBusiness] = strval(temp);
			cache_get_field_content(i, "pumpPosX", temp); 	PumpData[pumpid][pumpPos][0] = floatstr(temp);
		    cache_get_field_content(i, "pumpPosY", temp); 	PumpData[pumpid][pumpPos][1] = floatstr(temp);
		    cache_get_field_content(i, "pumpPosZ", temp); 	PumpData[pumpid][pumpPos][2] = floatstr(temp);
		    cache_get_field_content(i, "pumpPosA", temp); 	PumpData[pumpid][pumpPos][3] = floatstr(temp);
	        cache_get_field_content(i, "pumpFuel", temp); 	PumpData[pumpid][pumpFuel] = strval(temp);

			format(string, sizeof(string), "[%d]\n{FFFFFF} %d litros", pumpid, PumpData[pumpid][pumpFuel]);
			PumpData[pumpid][pumpText3D] = CreateDynamic3DTextLabel(string, 0xB9FFBC54, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 15.0);
	        PumpData[pumpid][pumpObject] = CreateDynamicObject(-2901, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 0.0, 0.0, PumpData[pumpid][pumpPos][3]);
		}
	}
	return 1;
}
forward Pump_Delete(pumpid);
public Pump_Delete(pumpid)
{
	if (pumpid != -1 && PumpData[pumpid][pumpExists])
	{
		format(string, sizeof(string), "DELETE FROM `pumps` WHERE `pumpID` = '%d'", PumpData[pumpid][pumpID]);
		mysql_function_query(Pipeline, string, false, "", "");

        if (IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
		    DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

		if (IsValidDynamicObject(PumpData[pumpid][pumpObject]))
		    DestroyDynamicObject(PumpData[pumpid][pumpObject]);

		for(new i; i< MAX_PLAYERS; i++) if (PlayerInfo[i][pGasPump] == pumpid) {
		    StopRefilling(i);
		}
	    PumpData[pumpid][pumpExists] = false;
	    PumpData[pumpid][pumpFuel] = 0;
	}
	return 1;
}
Pump_Refresh_Abastecendo(pumpid)
{
	if (pumpid != -1 && PumpData[pumpid][pumpExists])
	{

		format(string, sizeof(string), "[%d]\n{FFFFFF} %d litros", pumpid, PumpData[pumpid][pumpFuel]);

        if (IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
            DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

		PumpData[pumpid][pumpText3D] = CreateDynamic3DTextLabel(string, 0xB9FFBC54, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 15.0);
	}
	return 1;
}
Pump_Refresh(pumpid)
{
	if (pumpid != -1 && PumpData[pumpid][pumpExists])
	{

		format(string, sizeof(string), "[%d]\n{FFFFFF} %d litros", pumpid, PumpData[pumpid][pumpFuel]);

        if (IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
            DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

		if (IsValidDynamicObject(PumpData[pumpid][pumpObject]))
		    DestroyDynamicObject(PumpData[pumpid][pumpObject]);

		PumpData[pumpid][pumpText3D] = CreateDynamic3DTextLabel(string, 0xB9FFBC54, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 15.0);
        PumpData[pumpid][pumpObject] = CreateDynamicObject(-2901, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 0.0, 0.0, PumpData[pumpid][pumpPos][3]);

        Pump_Save(pumpid);
	}
	return 1;
}

forward Pump_Save(pumpid);
public Pump_Save(pumpid)
{
	static
	    query[256];

	format(query, sizeof(query), "UPDATE `pumps` SET `pumpPosX` = '%.4f', `pumpPosY` = '%.4f', `pumpPosZ` = '%.4f', `pumpPosA` = '%.4f', `pumpFuel` = '%d' WHERE `pumpID` = '%d'",
	    PumpData[pumpid][pumpPos][0],
	    PumpData[pumpid][pumpPos][1],
	    PumpData[pumpid][pumpPos][2],
		PumpData[pumpid][pumpPos][3],
	    PumpData[pumpid][pumpFuel],
	    PumpData[pumpid][pumpID]
	);
	return mysql_function_query(Pipeline, query, false, "", "");
}

CMD:criarbomba(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new bizid;

    if (PlayerInfo[playerid][pAdmin] < 5)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissão para utilizar este comando.");

 	if (sscanf(params, "d", bizid))
 	{
	 	SendClientMessage(playerid, COLOR_WHITE, "/criarbomba [empresa id]");
		return 1;
	}

	if ((bizid < 1 || bizid >= MAX_EMPRESAS) || !EmpInfo[bizid][eCriada])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Empresa inválida.");

	if (EmpInfo[bizid][eTipo] != EMP_TIPO_247)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Essa empresa não é um posto de gasolina!");

    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode criar bombas de gasolina em interiores.");

	new stringgs[256];
	format(stringgs, sizeof(stringgs), "INSERT INTO pumps (ID) VALUES(%d)", bizid);
	mysql_function_query(Pipeline, stringgs, false, "OnPumpCreated", "dd", playerid,bizid);

	return 1;
}
forward OnPumpCreated(playerid,bizid);
public OnPumpCreated(playerid,bizid)
{
    new id = cache_insert_id();
    PumpData[id][pumpID] = id;

    new Float:x,Float:y,Float:z,Float:angle;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	PumpData[id][pumpObject] = CreateDynamicObject(-2901, x, y, z, 0.0, 0.0, angle);
	EditDynamicObject(playerid, PumpData[id][pumpObject]);

	PumpData[id][pumpExists] = true;
	PumpData[id][pumpBusiness] = bizid;
	PumpData[id][pumpPos][0] = x;
	PumpData[id][pumpPos][1] = y;
	PumpData[id][pumpPos][2] = z;
	PumpData[id][pumpPos][3] = angle;
  	PumpData[id][pumpFuel] = 1000;

	PlayerInfo[playerid][pEditPump] = id;

  	SendClientMessage(playerid, COLOR_LIGHTGREEN, "Bomba de gasolina criada com sucesso.");
	return 1;
}

CMD:deletarbomba(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	static
	    id = 0;

    if (PlayerInfo[playerid][pAdmin] < 5)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso a esse comando.");

	if (sscanf(params, "d", id))
	    return SendClientMessage(playerid, COLOR_WHITE, "/deletarbomba [id]");

	if ((id < 0 || id >= MAX_GAS_PUMPS) || !PumpData[id][pumpExists])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta bomba de gasolina não existe.");

	Pump_Delete(id);
	SendClientMessage(playerid, COLOR_LIGHTGREEN, "Bomba de gasolina deletada com sucesso.");
	return 1;
}

CMD:setarbomba(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	static
	    id = 0,
		amount;

    if (PlayerInfo[playerid][pAdmin] < 5)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso a esse comando.");

	if (sscanf(params, "dd", id, amount))
	    return SendClientMessage(playerid, COLOR_WHITE, "/setarbomba [id] [gasolina]");

	if ((id < 0 || id >= MAX_GAS_PUMPS) || !PumpData[id][pumpExists])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta bomba de gasolina não existe.");

	PumpData[id][pumpFuel] = amount;

	Pump_Refresh(id);
	Pump_Save(id);

	SendClientMessage(playerid, COLOR_LIGHTGREEN, "Gasolina setada com sucesso.");
	return 1;
}
stock SendAdminAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        for(new i; i< MAX_PLAYERS; i++)
		{
			if (PlayerInfo[i][pAdmin] >= 1) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	for(new i; i< MAX_PLAYERS; i++)
	{
		if (PlayerInfo[i][pAdmin] >= 1) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}
stock GetEngineStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (engine != 1)
		return 0;

	return 1;
}
//==============================================================================
//                                  POKER SYSTEM
//==============================================================================
AnaylzePokerHand(playerid, Hand[])
{
	new pokerArray[7];
 	for(new i = 0; i < sizeof(pokerArray); i++)
	{
  		pokerArray[i] = Hand[i];
    }
	new suitArray[4][13];
 	new tmp = 0;
  	new pairs = 0;
   	new bool:isRoyalFlush = false;
 	new bool:isFlush = false;
  	new bool:isStraight = false;
   	new bool:isFour = false;
   	new bool:isThree = false;
    new bool:isTwoPair = false;
    new bool:isPair = false;

	// Convert Hand[] (AKA pokerArray) to suitArray[]
 	for(new i = 0; i < sizeof(pokerArray); i++)
 	{
		if(pokerArray[i] <= 12)
		{ // Clubs (0 - 12)
  			suitArray[0][pokerArray[i]] = 1;
     	}
      	if(pokerArray[i] <= 25 && pokerArray[i] >= 13)
  		{ // Diamonds (13 - 25)
    		suitArray[1][pokerArray[i]-13] = 1;
      	}
       	if(pokerArray[i] <= 38 && pokerArray[i] >= 26)
	   	{ // Hearts (26 - 38)
        	suitArray[2][pokerArray[i]-26] = 1;
		}
  		if(pokerArray[i] <= 51 && pokerArray[i] >= 39)
  		{ // Spades (39 - 51)
    		suitArray[3][pokerArray[i]-39] = 1;
      	}
	}
	// Royal Check
 	for(new i = 0; i < 4; i++)
	{
 		if(suitArray[i][0] == 1)
 		{
   			if(suitArray[i][9] == 1)
   			{
      			if(suitArray[i][10] == 1)
	  			{
   					if(suitArray[i][11] == 1)
   					{
        				if(suitArray[i][12] == 1)
						{
      						isRoyalFlush = true;
            				break;
                		}
                  	}
 				}
			}
		}
	}
	tmp = 0;
	// Flush Check
 	for(new i = 0; i < 4; i++)
 	{
  		for(new j = 0; j < 13; j++)
  		{
    		if(suitArray[i][j] == 1)
			{
   				tmp++;
       		}
		}
		if(tmp > 4)
		{
			isFlush = true;
			break;
		}
		else
		{
			tmp = 0;
		}
	}
	tmp = 0;
	// Four of a Kind Check
	// Three of a Kind Check
	for(new i = 0; i < 4; i++)
	{
 		for(new j = 0; j < 13; j++)
 		{
   			if(suitArray[i][j] == 1)
   			{
				for(new c = 0; c < 4; c++)
				{
    				if(suitArray[c][j] == 1)
					{
     					tmp++;
          			}
             	}
				if(tmp == 4)
				{
					isFour = true;
				}
				else if(tmp >= 3)
				{
					isThree = true;
				}
				else
				{
					tmp = 0;
				}
			}
		}
	}
	tmp = 0;
	// Two Pair & Pair Check
	for(new j = 0; j < 13; j++)
	{
		tmp = 0;
		for(new i = 0; i < 4; i++)
		{
			if(suitArray[i][j] == 1)
			{
				tmp++;
				if(tmp >= 2)
				{
          			isPair = true;
          			pairs++;
					if(pairs >= 2)
					{
						isTwoPair = true;
					}
				}
			}
		}
	}
	tmp = 0;
	// Straight Check
	for(new j = 0; j < 13; j++)
	{
		for(new i = 0; i < 4; i++)
		{
			if(suitArray[i][j] == 1)
	 		{
				for(new s = 0; s < 5; s++)
				{
             		for(new c = 0; c < 4; c++)
			 		{
                   		if(j+s == 13)
                     	{
                     		if(suitArray[c][0] == 1)
					 		{
                   				tmp++;
              					break;
                			}
     					}
                     	else if (j+s >= 14)
                      	{
                     		break;
               			}
                     	else
                		{
                      		if(suitArray[c][j+s] == 1)
						  	{
                          		tmp++;
                              	break;
                        	}
                     	}
              		}
      			}
 			}
			if(tmp >= 5)
			{
  				isStraight = true;
   			}
    		tmp = 0;
 		}
	}
	tmp = 0;
	// Convert Hand to Singles
	// Card 1
 	if(pokerArray[0] > 12 && pokerArray[0] < 26) pokerArray[0] -= 13;
  	if(pokerArray[0] > 25 && pokerArray[0] < 39) pokerArray[0] -= 26;
   	if(pokerArray[0] > 38 && pokerArray[0] < 52) pokerArray[0] -= 39;
    if(pokerArray[0] == 0) pokerArray[0] = 13; // Convert Aces to worth 13.
	// Card 2
 	if(pokerArray[1] > 12 && pokerArray[1] < 26) pokerArray[1] -= 13;
  	if(pokerArray[1] > 25 && pokerArray[1] < 39) pokerArray[1] -= 26;
  	if(pokerArray[1] > 38 && pokerArray[1] < 52) pokerArray[1] -= 39;
  	if(pokerArray[1] == 0) pokerArray[1] = 13; // Convert Aces to worth 13.
	// 10) POKER_RESULT_ROYAL_FLUSH - A, K, Q, J, 10 (SAME SUIT) * ROYAL + FLUSH *
 	if(isRoyalFlush)
 	{
  		SetPVarString(playerid, "pkrResultString", "Royal Flush");
  		return 1000 + pokerArray[0] + pokerArray[1];
    }
	// 9) POKER_RESULT_STRAIGHT_FLUSH - Any five card squence. (SAME SUIT) * STRAIGHT + FLUSH *
 	if(isStraight && isFlush)
 	{
  		SetPVarString(playerid, "pkrResultString", "Straight Flush");
    	return 900 + pokerArray[0] + pokerArray[1];
	}
 	// 8) POKER_RESULT_FOUR_KIND - All four cards of the same rank. * FOUR KIND *
  	if(isFour)
  	{
   		SetPVarString(playerid, "pkrResultString", "Quadra");
     	return 800 + pokerArray[0] + pokerArray[1];
	}
	// 7) POKER_RESULT_FULL_HOUSE - Three of a kind combined with a pair. * THREE KIND + PAIR *
	if(isThree && isTwoPair)
	{
		SetPVarString(playerid, "pkrResultString", "Full House");
		return 700 + pokerArray[0] + pokerArray[1];
	}
	// 6) POKER_RESULT_FLUSH - Any five cards of the same suit, no sequence. * FLUSH *
	if(isFlush)
	{
		SetPVarString(playerid, "pkrResultString", "Flush");
		return 600 + pokerArray[0] + pokerArray[1];
	}
	// 5) POKER_RESULT_STRAIGHT - Five cards in sequence, but not in the same suit. * STRAIGHT *
	if(isStraight)
	{
		SetPVarString(playerid, "pkrResultString", "Straight");
		return 500 + pokerArray[0] + pokerArray[1];
	}
	// 4) POKER_RESULT_THREE_KIND - Three cards of the same rank. * THREE KIND *
 	if(isThree)
 	{
  		SetPVarString(playerid, "pkrResultString", "Trinca");
    	return 400 + pokerArray[0] + pokerArray[1];
 	}
	// 3) POKER_RESULT_TWO_PAIR - Two seperate pair. * TWO PAIR *
 	if(isTwoPair)
 	{
  		SetPVarString(playerid, "pkrResultString", "Dois Par");
    	return 300 + pokerArray[0] + pokerArray[1];
  	}
	// 2) POKER_RESULT_PAIR - Two cards of the same rank. * PAIR *
 	if(isPair)
 	{
  		SetPVarString(playerid, "pkrResultString", "Par");
    	return 200 + pokerArray[0] + pokerArray[1];
	}
	// 1) POKER_RESULT_HIGH_CARD - Highest card.
	SetPVarString(playerid, "pkrResultString", "Carta Alta");
	return pokerArray[0] + pokerArray[1];
}

SetPlayerPosObjectOffset(objectid, playerid, Float:offset_x, Float:offset_y, Float:offset_z)
{
	new Float:object_px,
		Float:object_py,
        Float:object_pz,
        Float:object_rx,
        Float:object_ry,
        Float:object_rz;

    GetDynamicObjectPos(objectid, object_px, object_py, object_pz);
    GetDynamicObjectRot(objectid, object_rx, object_ry, object_rz);

    new Float:cos_x = floatcos(object_rx, degrees),
        Float:cos_y = floatcos(object_ry, degrees),
        Float:cos_z = floatcos(object_rz, degrees),
        Float:sin_x = floatsin(object_rx, degrees),
        Float:sin_y = floatsin(object_ry, degrees),
        Float:sin_z = floatsin(object_rz, degrees);

	new Float:x, Float:y, Float:z;
    x = object_px + offset_x * cos_y * cos_z - offset_x * sin_x * sin_y * sin_z - offset_y * cos_x * sin_z + offset_z * sin_y * cos_z + offset_z * sin_x * cos_y * sin_z;
    y = object_py + offset_x * cos_y * sin_z + offset_x * sin_x * sin_y * cos_z + offset_y * cos_x * cos_z + offset_z * sin_y * sin_z - offset_z * sin_x * cos_y * cos_z;
    z = object_pz - offset_x * cos_x * sin_y + offset_y * sin_x + offset_z * cos_x * cos_y;

	SetPlayerPos(playerid, x, y, z);
}

stock BubbleSort(a[], size)
{
	new tmp=0, bool:swapped;
 	do
  	{
   		swapped = false;
     	for(new i=1; i < size; i++)
	 	{
   			if(a[i-1] > a[i])
   			{
      			tmp = a[i];
      			a[i] = a[i-1];
         		a[i-1] = tmp;
         		swapped = true;
           }
		}
	}
	while(swapped);
}

forward PokerExit(playerid);
public PokerExit(playerid)
{
	SetCameraBehindPlayer(playerid);
 	TogglePlayerControllable(playerid, 1);
  	ClearAnimations(playerid);
   	CancelSelectTextDraw(playerid);
   	return 1;
}

forward PokerPulse(tableid);
public PokerPulse(tableid)
{
	// Idle Animation Loop & Re-seater
 	for(new i = 0; i < 6; i++)
 	{
  		new playerid = PokerTable[tableid][pkrSlot][i];
		if(playerid != -1)
		{
			// Disable Weapons
   			//SetPlayerArmedWeapon(playerid,0);
			new idleRandom = random(100);
   			if(idleRandom >= 90)
   			{
      			SetPlayerPosObjectOffset(PokerTable[tableid][pkrObjectID], playerid, PokerTableMiscObjOffsets[i][0], PokerTableMiscObjOffsets[i][1], PokerTableMiscObjOffsets[i][2]);
         		SetPlayerFacingAngle(playerid, PokerTableMiscObjOffsets[i][5]+90.0);
				// Animation
    			if(GetPVarInt(playerid, "pkrActiveHand"))
				{
    				if(!ComAnim[playerid]) ApplyAnimation(playerid, "CASINO", "cards_loop", 4.1, 0, 1, 1, 1, 1, 1);
        		}
          	}
		}
	}
	// 3D Text Label
 	UpdateDynamic3DTextLabelText(PokerTable[tableid][pkrText3DID], COLOR_GOLD, " ");
	if(PokerTable[tableid][pkrActivePlayers] >= 2 && PokerTable[tableid][pkrActive] == 2)
	{
		// Count the number of active players with more than R$0, activate the round if more than 1 gets counted.
  		new tmpCount = 0;
    	for(new i = 0; i < 6; i++)
		{
  			new playerid = PokerTable[tableid][pkrSlot][i];
			if(playerid != -1)
			{
   				if(GetPVarInt(playerid, "pkrChips") > 0)
   				{
       				tmpCount++;
           		}
			}
		}
		if(tmpCount > 1)
		{
  			PokerTable[tableid][pkrActive] = 3;
     		PokerTable[tableid][pkrDelay] = PokerTable[tableid][pkrSetDelay];
       	}
	}
	if(PokerTable[tableid][pkrPlayers] < 2 && PokerTable[tableid][pkrActive] == 3)
	{
 		// Pseudo Code (Move Pot towards last player's chip count)
		for(new i = 0; i < 6; i++)
		{
			new playerid = PokerTable[tableid][pkrSlot][i];
			if(playerid != -1)
			{
   				SetPVarInt(playerid, "pkrChips", GetPVarInt(playerid, "pkrChips")+PokerTable[tableid][pkrPot]);
				LeavePokerTable(playerid);
    			ResetPokerTable(tableid);
       			JoinPokerTable(playerid, tableid);
			}
		}
	}
	// Winner Loop
 	if(PokerTable[tableid][pkrActive] == 4)
	{
		if(PokerTable[tableid][pkrDelay] == 20)
		{
			new endBetsSoundID[] = {5826, 5827};
 			new randomEndBetsSoundID = random(sizeof(endBetsSoundID));
   			GlobalPlaySound(endBetsSoundID[randomEndBetsSoundID], PokerTable[tableid][pkrX], PokerTable[tableid][pkrY], PokerTable[tableid][pkrZ]);

			for(new i = 0; i < 6; i++)
			{
   				new playerid = PokerTable[tableid][pkrSlot][i];
				if(playerid != -1)
				{
    				PokerOptions(playerid, 0);
        		}
      		}
		}
		if(PokerTable[tableid][pkrDelay] > 0)
		{
  			PokerTable[tableid][pkrDelay]--;
     		if(PokerTable[tableid][pkrDelay] <= 5 && PokerTable[tableid][pkrDelay] > 0)
	 		{
    			for(new i = 0; i < 6; i++)
				{
    				new playerid = PokerTable[tableid][pkrSlot][i];
					if(playerid != -1) PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
				}
			}
		}
		if(PokerTable[tableid][pkrDelay] == 0)
		{
  			return ResetPokerRound(tableid);
     	}
		if(PokerTable[tableid][pkrDelay] == 19)
		{// Anaylze Cards
			new resultArray[6];
   			for(new i = 0; i < 6; i++)
   			{
      			new playerid = PokerTable[tableid][pkrSlot][i];
         		new cards[7];
				if(playerid != -1)
				{
    				if(GetPVarInt(playerid, "pkrActiveHand"))
					{
     					cards[0] = GetPVarInt(playerid, "pkrCard1");
          				cards[1] = GetPVarInt(playerid, "pkrCard2");
						new tmp = 0;
      					for(new c = 2; c < 7; c++)
				  		{
        					cards[c] = PokerTable[tableid][pkrCCards][tmp];
             				tmp++;
              			}
						SetPVarInt(playerid, "pkrResult", AnaylzePokerHand(playerid, cards));
     				}
         		}
			}
			// Sorting Results (Highest to Lowest)
   			for(new i = 0; i < 6; i++)
   			{
      			new playerid = PokerTable[tableid][pkrSlot][i];
				if(playerid != -1)
				{
    				if(GetPVarInt(playerid, "pkrActiveHand"))
					{
     					resultArray[i] = GetPVarInt(playerid, "pkrResult");
          			}
           		}
			}
   			BubbleSort(resultArray, sizeof(resultArray));
			// Determine Winner(s)
   			for(new i = 0; i < 6; i++)
   			{
      			if(resultArray[5] == resultArray[i])
         		PokerTable[tableid][pkrWinners]++;
           	}
			// Notify Table of Winner & Give Rewards
			for(new i = 0; i < 6; i++)
			{
   				new playerid = PokerTable[tableid][pkrSlot][i];
				if(playerid != -1)
				{
    				if(PokerTable[tableid][pkrWinners] > 1)
					{// Split
         				if(resultArray[5] == GetPVarInt(playerid, "pkrResult"))
				 		{
       						new splitPot = PokerTable[tableid][pkrPot]/PokerTable[tableid][pkrWinners];
							SetPVarInt(playerid, "pkrWinner", 1);
       						SetPVarInt(playerid, "pkrChips", GetPVarInt(playerid, "pkrChips")+splitPot);
				   			PlayerPlaySound(playerid, 5821, 0.0, 0.0, 0.0);
          				}
					  	else
					  	{
        					PlayerPlaySound(playerid, 31202, 0.0, 0.0, 0.0);
             			}
          			}
			  		else
			  		{// Single Winner
       					if(resultArray[5] == GetPVarInt(playerid, "pkrResult"))
				   		{
         					SetPVarInt(playerid, "pkrWinner", 1);
              				SetPVarInt(playerid, "pkrChips", GetPVarInt(playerid, "pkrChips")+PokerTable[tableid][pkrPot]);
                  			PokerTable[tableid][pkrWinnerID] = playerid;

							new winnerSoundID[] = {5847, 5848, 5849, 5854, 5855, 5856};
       						new randomWinnerSoundID = random(sizeof(winnerSoundID));
             				PlayerPlaySound(playerid, winnerSoundID[randomWinnerSoundID], 0.0, 0.0, 0.0);
                 		}
						else
						{
      						PlayerPlaySound(playerid, 31202, 0.0, 0.0, 0.0);
      					}
           			}
              	}
			}
		}
	}
	// Game Loop
 	if(PokerTable[tableid][pkrActive] == 3)
  	{
   		if(PokerTable[tableid][pkrActiveHands] == 1 && PokerTable[tableid][pkrRound] == 1)
   		{
     		PokerTable[tableid][pkrStage] = 0;
       		PokerTable[tableid][pkrActive] = 4;
         	PokerTable[tableid][pkrDelay] = 20+1;
			for(new i = 0; i < 6; i++)
			{
   				new playerid = PokerTable[tableid][pkrSlot][i];
				if(playerid != -1)
				{
    				if(GetPVarInt(playerid, "pkrActiveHand"))
					{
     					SetPVarInt(playerid, "pkrHide", 1);
         			}
            	}
			}
		}
		// Delay Time Controller
		if(PokerTable[tableid][pkrDelay] > 0)
		{
			PokerTable[tableid][pkrDelay]--;
			if(PokerTable[tableid][pkrDelay] <= 5 && PokerTable[tableid][pkrDelay] > 0)
			{
   				for(new i = 0; i < 6; i++)
   				{
					new playerid = PokerTable[tableid][pkrSlot][i];
					if(playerid != -1) PlayerPlaySound(playerid, 1139, 0.0, 0.0, 0.0);
				}
			}
		}
		// Assign Blinds & Active Player
	 	if(PokerTable[tableid][pkrRound] == 0 && PokerTable[tableid][pkrDelay] == 5)
	  	{
	   		for(new i = 0; i < 6; i++)
	   		{
	     		new playerid = PokerTable[tableid][pkrSlot][i];
				if(playerid != -1)
				{
					SetPVarInt(playerid, "pkrStatus", 1);
				}
			}
			PokerAssignBlinds(tableid);
		}
		// If no round active, start it.
	 	if(PokerTable[tableid][pkrRound] == 0 && PokerTable[tableid][pkrDelay] == 0)
	  	{
	   		PokerTable[tableid][pkrRound] = 1;
			for(new i = 0; i < 6; i++)
			{
	  			new playerid = PokerTable[tableid][pkrSlot][i];
				if(playerid != -1)
				{
					SetPVarString(playerid, "pkrStatusString", " ");
				}
			}
			// Shuffle Deck & Deal Cards & Allocate Community Cards
			PokerShuffleDeck(tableid);
			PokerDealHands(tableid);
			PokerRotateActivePlayer(tableid);
		}
		// Round Logic
		// Time Controller
		for(new i = 0; i < 6; i++)
		{
			new playerid = PokerTable[tableid][pkrSlot][i];
			if(playerid != -1)
			{
	  			if(GetPVarInt(playerid, "pkrActivePlayer"))
	  			{
	     			SetPVarInt(playerid, "pkrTime", GetPVarInt(playerid, "pkrTime")-1);
	     			if(GetPVarInt(playerid, "pkrTime") == 0)
		 			{
	     				new name[24];
	         			GetPlayerName(playerid, name, sizeof(name));
						if(GetPVarInt(playerid, "pkrActionChoice"))
						{
	     					DeletePVar(playerid, "pkrActionChoice");
							ShowPlayerDialog(playerid, -1, DIALOG_STYLE_LIST, "Fechar", "Fechar", "Fechar", "Fechar");
	     				}
						PokerFoldHand(playerid);
	     				PokerRotateActivePlayer(tableid);
	         		}
	           	}
			}
		}
	}
	// Update GUI
	for(new i = 0; i < 6; i++)
	{
		new playerid = PokerTable[tableid][pkrSlot][i];
	 	new tmp, tmpString[128];
		// Set Textdraw Offset
	 	switch(i)
	  	{
	   		case 0: { tmp = 0; }
	   		case 1: { tmp = 5; }
	     	case 2: { tmp = 10; }
	     	case 3: { tmp = 15; }
	     	case 4: { tmp = 20; }
	     	case 5: { tmp = 25; }
		}
		if(playerid != -1)
		{
		    /*
		 	// Debug
			format(string, sizeof(string), "Debug:~n~pkrActive: %d~n~pkrPlayers: %d~n~pkrActivePlayers: %d~n~pkrActiveHands: %d~n~pkrPos: %d~n~pkrDelay: %d~n~pkrRound: %d~n~pkrStage: %d~n~pkrActiveBet: %d~n~pkrRotations: %d",
				PokerTable[tableid][pkrActive],
				PokerTable[tableid][pkrPlayers],
				PokerTable[tableid][pkrActivePlayers],
				PokerTable[tableid][pkrActiveHands],
				PokerTable[tableid][pkrPos],
				PokerTable[tableid][pkrDelay],
				PokerTable[tableid][pkrRound],
				PokerTable[tableid][pkrStage],
				PokerTable[tableid][pkrActiveBet],
				PokerTable[tableid][pkrRotations]);

			format(string, sizeof(string), "%s~n~----------~n~", string);
			new sstring[128];
		 	GetPVarString(playerid, "pkrStatusString", sstring, 128);
		  	format(string, sizeof(string), "%spkrTableID: %d~n~pkrCurrentBet: %d~n~pkrStatus: %d~n~pkrRoomLeader: %d~n~pkrRoomBigBlind: %d~n~pkrRoomSmallBlind: %d~n~pkrRoomDealer: %d~n~pkrActivePlayer: %d~n~pkrActiveHand: %d~n~pkrStatusString: %s",
		   		string,
		    	GetPVarInt(playerid, "pkrTableID")-1,
		     	GetPVarInt(playerid, "pkrCurrentBet"),
		      	GetPVarInt(playerid, "pkrStatus"),
		       	GetPVarInt(playerid, "pkrRoomLeader"),
		       	GetPVarInt(playerid, "pkrRoomBigBlind"),
		        GetPVarInt(playerid, "pkrRoomSmallBlind"),
		        GetPVarInt(playerid, "pkrRoomDealer"),
		        GetPVarInt(playerid, "pkrActivePlayer"),
		        GetPVarInt(playerid, "pkrActiveHand"),
		        sstring);

	        PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][45], string);
			*/
			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][45], "");
			// Name
		 	new name[MAX_PLAYER_NAME+1];
		  	GetPlayerName(playerid, name, sizeof(name));
		   	for(new td = 0; td < 6; td++)
		   	{
		    	new pid = PokerTable[tableid][pkrSlot][td];
				if(pid != -1) PlayerTextDrawSetString(pid, PlayerPokerUI[pid][0+tmp], name);
			}
			// Chips
		 	if(GetPVarInt(playerid, "pkrChips") > 0)
		 	{
		  		format(tmpString, sizeof(tmpString), "R$%d", GetPVarInt(playerid, "pkrChips"));
		    } else {
		    	format(tmpString, sizeof(tmpString), "~r~R$%d", GetPVarInt(playerid, "pkrChips"));
		    }
		    for(new td = 0; td < 6; td++)
			{
		 		new pid = PokerTable[tableid][pkrSlot][td];
				if(pid != -1) PlayerTextDrawSetString(pid, PlayerPokerUI[pid][1+tmp], tmpString);
		  	}
			// Cards
		 	for(new td = 0; td < 6; td++)
		 	{
		  		new pid = PokerTable[tableid][pkrSlot][td];
				if(pid != -1)
				{
		  			if(GetPVarInt(playerid, "pkrActiveHand"))
		  			{
		     			if(playerid != pid)
			 			{
		     				if(PokerTable[tableid][pkrActive] == 4 && PokerTable[tableid][pkrDelay] <= 19 && GetPVarInt(playerid, "pkrHide") != 1)
						 	{
	       						format(tmpString, sizeof(tmpString), "%s", DeckTextdrw[GetPVarInt(playerid, "pkrCard1")+1]);
	             				PlayerTextDrawSetString(pid, PlayerPokerUI[pid][2+tmp], tmpString);
	                 			format(tmpString, sizeof(tmpString), "%s", DeckTextdrw[GetPVarInt(playerid, "pkrCard2")+1]);
	                    		PlayerTextDrawSetString(pid, PlayerPokerUI[pid][3+tmp], tmpString);
							}
							else
							{
	      						PlayerTextDrawSetString(pid, PlayerPokerUI[pid][2+tmp], DeckTextdrw[0]);
	            				PlayerTextDrawSetString(pid, PlayerPokerUI[pid][3+tmp], DeckTextdrw[0]);
	                		}
						}
				  		else
				  		{
	                   		format(tmpString, sizeof(tmpString), "%s", DeckTextdrw[GetPVarInt(playerid, "pkrCard1")+1]);
	                     	PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][2+tmp], tmpString);
							format(tmpString, sizeof(tmpString), "%s", DeckTextdrw[GetPVarInt(playerid, "pkrCard2")+1]);
	      					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][3+tmp], tmpString);
	   					}
	         		}
			 		else
			 		{
	           			PlayerTextDrawSetString(pid, PlayerPokerUI[pid][2+tmp], " ");
	              		PlayerTextDrawSetString(pid, PlayerPokerUI[pid][3+tmp], " ");
	               	}
				}
			}
			// Status
	  		if(PokerTable[tableid][pkrActive] < 3)
	  		{
	    		format(tmpString, sizeof(tmpString), " ");
	      	}
	 		else if(GetPVarInt(playerid, "pkrActivePlayer") && PokerTable[tableid][pkrActive] == 3)
	  		{
	    		format(tmpString, sizeof(tmpString), "0:%d", GetPVarInt(playerid, "pkrTime"));
	      	}
		  	else
		  	{
	       		if(PokerTable[tableid][pkrActive] == 3 && PokerTable[tableid][pkrDelay] > 5)
		   		{
	      			SetPVarString(playerid, "pkrStatusString", " ");
	         	}
				if(PokerTable[tableid][pkrActive] == 4 && PokerTable[tableid][pkrDelay] == 19)
				{
	   				if(PokerTable[tableid][pkrWinners] == 1)
	   				{
	       				if(GetPVarInt(playerid, "pkrWinner"))
					   	{
	        				format(tmpString, sizeof(tmpString), "+R$%d", PokerTable[tableid][pkrPot]);
	            			SetPVarString(playerid, "pkrStatusString", tmpString);
	               		}
					   	else
					   	{
	        				format(tmpString, sizeof(tmpString), "-R$%d", GetPVarInt(playerid, "pkrCurrentBet"));
	            			SetPVarString(playerid, "pkrStatusString", tmpString);
	               		}
	              	}
		  			else
		  			{
	      				if(GetPVarInt(playerid, "pkrWinner"))
					  	{
	       					new splitPot = PokerTable[tableid][pkrPot]/PokerTable[tableid][pkrWinners];
	            			format(tmpString, sizeof(tmpString), "+R$%d", splitPot);
	               			SetPVarString(playerid, "pkrStatusString", tmpString);
	                  	}
					  	else
					  	{
	       					format(tmpString, sizeof(tmpString), "-R$%d", GetPVarInt(playerid, "pkrCurrentBet"));
	            			SetPVarString(playerid, "pkrStatusString", tmpString);
	               		}
					}
				}
				if(PokerTable[tableid][pkrActive] == 4 && PokerTable[tableid][pkrDelay] == 19)
				{
	            	if(GetPVarInt(playerid, "pkrActiveHand") && GetPVarInt(playerid, "pkrHide") != 1)
					{
	                	new resultString[64];
	                	GetPVarString(playerid, "pkrResultString", resultString, 64);
	                	format(tmpString, sizeof(tmpString), "%s", resultString);
	                	SetPVarString(playerid, "pkrStatusString", resultString);
	               	}
				}
				if(PokerTable[tableid][pkrActive] == 4 && PokerTable[tableid][pkrDelay] == 10)
				{
	   				if(PokerTable[tableid][pkrWinners] == 1)
	   				{
	       				if(GetPVarInt(playerid, "pkrWinner"))
					   	{
	        				format(tmpString, sizeof(tmpString), "+R$%d", PokerTable[tableid][pkrPot]);
	            			SetPVarString(playerid, "pkrStatusString", tmpString);
	               		}
					   	else
					   	{
	        				format(tmpString, sizeof(tmpString), "-R$%d", GetPVarInt(playerid, "pkrCurrentBet"));
	            			SetPVarString(playerid, "pkrStatusString", tmpString);
	            		}
	              	}
		  			else
		  			{
	      				if(GetPVarInt(playerid, "pkrWinner"))
					  	{
	       					new splitPot = PokerTable[tableid][pkrPot]/PokerTable[tableid][pkrWinners];
	            			format(tmpString, sizeof(tmpString), "+R$%d", splitPot);
	               			SetPVarString(playerid, "pkrStatusString", tmpString);
	                  	}
					  	else
					  	{
	       					format(tmpString, sizeof(tmpString), "-R$%d", GetPVarInt(playerid, "pkrCurrentBet"));
	            			SetPVarString(playerid, "pkrStatusString", tmpString);
	            		}
	              	}
				}
				GetPVarString(playerid, "pkrStatusString", tmpString, 128);
			}
			for(new td = 0; td < 6; td++)
			{
	  			new pid = PokerTable[tableid][pkrSlot][td];
				if(pid != -1) PlayerTextDrawSetString(pid, PlayerPokerUI[pid][4+tmp], tmpString);
	   		}
			// Pot
	  		if(PokerTable[tableid][pkrDelay] > 0 && PokerTable[tableid][pkrActive] == 3)
	  		{
	    		if(playerid != -1) PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][37], "RJ Holden");
	      	}
	  		else if(PokerTable[tableid][pkrActive] == 2)
	  		{
	    		if(playerid != -1) PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][37], "RJ Holden");
	      	}
	  		else if(PokerTable[tableid][pkrActive] == 3)
	  		{
	    		format(tmpString, sizeof(tmpString), "Pot: R$%d", PokerTable[tableid][pkrPot]);
	      		if(playerid != -1) PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][37], tmpString);
	        }
			else if(PokerTable[tableid][pkrActive] == 4 && PokerTable[tableid][pkrDelay] < 19)
			{
	  			if(PokerTable[tableid][pkrWinnerID] != -1)
	  			{
	     			new winnerName[24];
	        		GetPlayerName(PokerTable[tableid][pkrWinnerID], winnerName, sizeof(winnerName));
	          		format(tmpString, sizeof(tmpString), "%s ganhou R$%d", winnerName, PokerTable[tableid][pkrPot]);
	          		if(playerid != -1) PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][37], tmpString);
	            }
				else if(PokerTable[tableid][pkrWinners] > 1)
				{
	   				new splitPot = PokerTable[tableid][pkrPot]/PokerTable[tableid][pkrWinners];
	       			format(tmpString, sizeof(tmpString), "%d Vencedores levaram R$%d", PokerTable[tableid][pkrWinners], splitPot);
	          		if(playerid != -1) PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][37], tmpString);
				}
			}
			else
			{
	  			if(playerid != -1) PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][37], "RJ Holden");
	     	}
			// Bet
	  		if(PokerTable[tableid][pkrDelay] > 0 && PokerTable[tableid][pkrActive] == 3)
	  		{
	    		format(tmpString, sizeof(tmpString), "Rodada inicia em ~r~%d~w~...", PokerTable[tableid][pkrDelay]);
	      		if(playerid != -1) PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][46], tmpString);
	        }
			else if(PokerTable[tableid][pkrActive] == 2)
			{
	  			format(tmpString, sizeof(tmpString), "Aguardando jogadores...", PokerTable[tableid][pkrPot]);
	   			if(playerid != -1) PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][46], tmpString);
	   	 	}
		   	else if(PokerTable[tableid][pkrActive] == 3)
	  		{
	    		format(tmpString, sizeof(tmpString), "Apostas: R$%d", PokerTable[tableid][pkrActiveBet]);
	      		if(playerid != -1) PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][46], tmpString);
	        }
			else if(PokerTable[tableid][pkrActive] == 4)
			{
	  			format(tmpString, sizeof(tmpString), "Rodada termina em ~r~%d~w~...", PokerTable[tableid][pkrDelay]);
	     		if(playerid != -1) PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][46], tmpString);
	   		}
	   		else
	   		{
	  			if(playerid != -1) PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][46], "RJ Holden");
			}// Community Cards
			switch(PokerTable[tableid][pkrStage])
			{
				case 0: // Opening
				{
	 				PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][31], "LD_CARD:cdback");
	   				PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][32], "LD_CARD:cdback");
	      			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][33], "LD_CARD:cdback");
	      			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][34], "LD_CARD:cdback");
	      			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][35], "LD_CARD:cdback");
				}
				case 1: // Flop
				{
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][31], DeckTextdrw[PokerTable[tableid][pkrCCards][0]+1]);
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][32], DeckTextdrw[PokerTable[tableid][pkrCCards][1]+1]);
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][33], DeckTextdrw[PokerTable[tableid][pkrCCards][2]+1]);
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][34], "LD_CARD:cdback");
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][35], "LD_CARD:cdback");
				}
				case 2: // Turn
				{
	    			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][31], DeckTextdrw[PokerTable[tableid][pkrCCards][0]+1]);
	     			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][32], DeckTextdrw[PokerTable[tableid][pkrCCards][1]+1]);
	     			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][33], DeckTextdrw[PokerTable[tableid][pkrCCards][2]+1]);
	      			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][34], DeckTextdrw[PokerTable[tableid][pkrCCards][3]+1]);
	      			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][35], "LD_CARD:cdback");
				}
				case 3: // River
				{
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][31], DeckTextdrw[PokerTable[tableid][pkrCCards][0]+1]);
	 				PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][32], DeckTextdrw[PokerTable[tableid][pkrCCards][1]+1]);
	  				PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][33], DeckTextdrw[PokerTable[tableid][pkrCCards][2]+1]);
	  				PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][34], DeckTextdrw[PokerTable[tableid][pkrCCards][3]+1]);
	   				PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][35], DeckTextdrw[PokerTable[tableid][pkrCCards][4]+1]);
	       		}
	       		case 4: // Win
	       		{
	        		PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][31], DeckTextdrw[PokerTable[tableid][pkrCCards][0]+1]);
	         		PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][32], DeckTextdrw[PokerTable[tableid][pkrCCards][1]+1]);
	          		PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][33], DeckTextdrw[PokerTable[tableid][pkrCCards][2]+1]);
	            	PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][34], DeckTextdrw[PokerTable[tableid][pkrCCards][3]+1]);
	             	PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][35], DeckTextdrw[PokerTable[tableid][pkrCCards][4]+1]);
				}
			}
		}
		else
		{
			for(new td = 0; td < 6; td++)
			{
				new pid = PokerTable[tableid][pkrSlot][td];
				if(pid != -1)
				{
					PlayerTextDrawSetString(pid, PlayerPokerUI[pid][0+tmp], " ");
					PlayerTextDrawSetString(pid, PlayerPokerUI[pid][1+tmp], " ");
	 				PlayerTextDrawSetString(pid, PlayerPokerUI[pid][2+tmp], " ");
	  				PlayerTextDrawSetString(pid, PlayerPokerUI[pid][3+tmp], " ");
	  				PlayerTextDrawSetString(pid, PlayerPokerUI[pid][4+tmp], " ");
				}
			}
		}
	}
	return 1;
}

CameraRadiusSetPos(playerid, Float:x, Float:y, Float:z, Float:degree = 0.0, Float:height = 3.0, Float:radius = 8.0)
{
	new Float:deltaToX = x + radius * floatsin(-degree, degrees);
	new Float:deltaToY = y + radius * floatcos(-degree, degrees);
	new Float:deltaToZ = z + height;

	SetPlayerCameraPos(playerid, deltaToX, deltaToY, deltaToZ);
	SetPlayerCameraLookAt(playerid, x, y, z);
}

GlobalPlaySound(soundid, Float:x, Float:y, Float:z)
{
	for(new i = 0; i < GetMaxPlayers(); i++)
	{
		if(IsPlayerInRangeOfPoint(i, 25.0, x, y, z))
		{
			PlayerPlaySound(i, soundid, x, y, z);
		}
	}
}

forward split(const strsrc[], strdest[][], delimiter);
public split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
 	new aNum;
  	new len;
   	while(i <= strlen(strsrc))
	{
 		if(strsrc[i]==delimiter || i==strlen(strsrc))
 		{
   			len = strmid(strdest[aNum], strsrc, li, i, 128);
      		strdest[aNum][len] = 0;
        	li = i+1;
         	aNum++;
		}
 		i++;
	}
 	return 1;
}

PokerOptions(playerid, option)
{
        switch(option)
        {
                case 0:
                {
                        DeletePVar(playerid, "pkrActionOptions");
                        PlayerTextDrawHide(playerid, PlayerPokerUI[playerid][38]);
                        PlayerTextDrawHide(playerid, PlayerPokerUI[playerid][39]);
                        PlayerTextDrawHide(playerid, PlayerPokerUI[playerid][40]);
                }
                case 1: // if(CurrentBet >= ActiveBet)
                {
                        SetPVarInt(playerid, "pkrActionOptions", 1);
                        PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][38], "APOSTAR");
                        PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][39], "MESA");
                        PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][40], "FUGIR");

                        PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][38]);
                        PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][39]);
                        PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][40]);
                }
                case 2: // if(CurrentBet < ActiveBet)
                {
                        SetPVarInt(playerid, "pkrActionOptions", 2);
                        PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][38], "PAGAR");
                        PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][39], "APOSTAR");
                        PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][40], "FUGIR");

                        PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][38]);
                        PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][39]);
                        PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][40]);
                }
                case 3: // if(pkrChips < 1)
                {
                        SetPVarInt(playerid, "pkrActionOptions", 3);

                        PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][38], "MESA");
                        PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][39], "FUGIR");

                        PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][38]);
                        PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][39]);
                }
        }
}

PokerCallHand(playerid)
{
        ShowCasinoGamesMenu(playerid, DIALOG_CGAMESCALLPOKER);
}

PokerRaiseHand(playerid)
{
        ShowCasinoGamesMenu(playerid, DIALOG_CGAMESRAISEPOKER);
}

PokerCheckHand(playerid)
{
        if(GetPVarInt(playerid, "pkrActiveHand")) {
                SetPVarString(playerid, "pkrStatusString", "Mesa");
        }

        // Animation
        if(!ComAnim[playerid]) ApplyAnimation(playerid, "CASINO", "cards_raise", 4.1, 0, 1, 1, 1, 1, 1);
}

PokerFoldHand(playerid)
{
        if(GetPVarInt(playerid, "pkrActiveHand")) {
                DeletePVar(playerid, "pkrCard1");
                DeletePVar(playerid, "pkrCard2");
                DeletePVar(playerid, "pkrActiveHand");
                DeletePVar(playerid, "pkrStatus");

                PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrActiveHands]--;

                SetPVarString(playerid, "pkrStatusString", "Fugiu");

                // SFX
                GlobalPlaySound(5602, PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrX], PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrY], PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrZ]);

                // Animation
                if(!ComAnim[playerid]) ApplyAnimation(playerid, "CASINO", "cards_out", 4.1, 0, 1, 1, 1, 1, 1);
        }
}

PokerDealHands(tableid)
{
        new tmp = 0;

        // Loop through active players.
        for(new i = 0; i < 6; i++) {
                new playerid = PokerTable[tableid][pkrSlot][i];

                if(playerid != -1) {

                        if(GetPVarInt(playerid, "pkrStatus") && GetPVarInt(playerid, "pkrChips") > 0) {
                                SetPVarInt(playerid, "pkrCard1", PokerTable[tableid][pkrDeck][tmp]);
                                SetPVarInt(playerid, "pkrCard2", PokerTable[tableid][pkrDeck][tmp+1]);

                                SetPVarInt(playerid, "pkrActiveHand", 1);

                                PokerTable[tableid][pkrActiveHands]++;

                                // SFX
                                PlayerPlaySound(playerid, 5602, 0.0, 0.0, 0.0);

                                // Animation
                                if(!ComAnim[playerid]) ApplyAnimation(playerid, "CASINO", "cards_in", 4.1, 0, 1, 1, 1, 1, 1);

                                tmp += 2;
                        }
                }
        }

        // Loop through community cards.
        for(new i = 0; i < 5; i++) {

                PokerTable[tableid][pkrCCards][i] = PokerTable[tableid][pkrDeck][tmp];
                tmp++;
        }
}

PokerShuffleDeck(tableid)
{
        // SFX
        GlobalPlaySound(5600, PokerTable[tableid][pkrX], PokerTable[tableid][pkrY], PokerTable[tableid][pkrZ]);

        // Order the deck
        for(new i = 0; i < 52; i++) {
                PokerTable[tableid][pkrDeck][i] = i;
        }

        // Randomize the array (AKA Shuffle Algorithm)
        new rand, tmp, i;
        for(i = 52; i > 1; i--) {
                rand = random(52) % i;
                tmp = PokerTable[tableid][pkrDeck][rand];
                PokerTable[tableid][pkrDeck][rand] = PokerTable[tableid][pkrDeck][i-1];
                PokerTable[tableid][pkrDeck][i-1] = tmp;
        }
}

PokerFindPlayerOrder(tableid, index)
{
        new tmpIndex = -1;
        for(new i = 0; i < 6; i++) {
                new playerid = PokerTable[tableid][pkrSlot][i];

                if(playerid != -1) {
                        tmpIndex++;

                        if(tmpIndex == index) {
                                if(GetPVarInt(playerid, "pkrStatus") == 1)
                                        return playerid;
                        }
                }
        }
        return -1;
}

PokerAssignBlinds(tableid)
{
        if(PokerTable[tableid][pkrPos] == 6) {
                PokerTable[tableid][pkrPos] = 0;
        }

        // Find where to start & distubute blinds.
        new bool:roomDealer = false, bool:roomBigBlind = false, bool:roomSmallBlind = false;

        // Find the Dealer.
        new tmpPos = PokerTable[tableid][pkrPos];
        while(roomDealer == false) {
                if(tmpPos == 6) {
                        tmpPos = 0;
                }

                new playerid = PokerFindPlayerOrder(tableid, tmpPos);

                if(playerid != -1) {
                        SetPVarInt(playerid, "pkrRoomDealer", 1);
                        SetPVarString(playerid, "pkrStatusString", "Dealer");
                        roomDealer = true;
                } else {
                        tmpPos++;
                }
        }

        // Find the player after the Dealer.
        tmpPos = PokerTable[tableid][pkrPos];
        while(roomBigBlind == false) {
                if(tmpPos == 6) {
                        tmpPos = 0;
                }

                new playerid = PokerFindPlayerOrder(tableid, tmpPos);

                if(playerid != -1) {
                        if(GetPVarInt(playerid, "pkrRoomDealer") != 1 && GetPVarInt(playerid, "pkrRoomBigBlind") != 1 && GetPVarInt(playerid, "pkrRoomSmallBlind") != 1) {
                                SetPVarInt(playerid, "pkrRoomBigBlind", 1);
                                new tmpString[128];
                                format(tmpString, sizeof(tmpString), "~r~BB -R$%d", PokerTable[tableid][pkrBlind]);
                                SetPVarString(playerid, "pkrStatusString", tmpString);
                                roomBigBlind = true;

                                if(GetPVarInt(playerid, "pkrChips") < PokerTable[tableid][pkrBlind]) {
                                        PokerTable[tableid][pkrPot] += GetPVarInt(playerid, "pkrChips");
                                        SetPVarInt(playerid, "pkrChips", 0);
                                } else {
                                        PokerTable[tableid][pkrPot] += PokerTable[tableid][pkrBlind];
                                        SetPVarInt(playerid, "pkrChips", GetPVarInt(playerid, "pkrChips")-PokerTable[tableid][pkrBlind]);
                                }

                                SetPVarInt(playerid, "pkrCurrentBet", PokerTable[tableid][pkrBlind]);
                                PokerTable[tableid][pkrActiveBet] = PokerTable[tableid][pkrBlind];

                        } else {
                                tmpPos++;
                        }
                } else {
                        tmpPos++;
                }
        }

        // Small Blinds are active only if there are more than 2 players.
        if(PokerTable[tableid][pkrActivePlayers] > 2) {

                // Find the player after the Big Blind.
                tmpPos = PokerTable[tableid][pkrPos];
                while(roomSmallBlind == false) {
                        if(tmpPos == 6) {
                                tmpPos = 0;
                        }

                        new playerid = PokerFindPlayerOrder(tableid, tmpPos);

                        if(playerid != -1) {
                                if(GetPVarInt(playerid, "pkrRoomDealer") != 1 && GetPVarInt(playerid, "pkrRoomBigBlind") != 1 && GetPVarInt(playerid, "pkrRoomSmallBlind") != 1) {
                                        SetPVarInt(playerid, "pkrRoomSmallBlind", 1);
                                        new tmpString[128];
                                        format(tmpString, sizeof(tmpString), "~r~SB -R$%d", PokerTable[tableid][pkrBlind]/2);
                                        SetPVarString(playerid, "pkrStatusString", tmpString);
                                        roomSmallBlind = true;

                                        if(GetPVarInt(playerid, "pkrChips") < (PokerTable[tableid][pkrBlind]/2)) {
                                                PokerTable[tableid][pkrPot] += GetPVarInt(playerid, "pkrChips");
                                                SetPVarInt(playerid, "pkrChips", 0);
                                        } else {
                                                PokerTable[tableid][pkrPot] += (PokerTable[tableid][pkrBlind]/2);
                                                SetPVarInt(playerid, "pkrChips", GetPVarInt(playerid, "pkrChips")-(PokerTable[tableid][pkrBlind]/2));
                                        }

                                        SetPVarInt(playerid, "pkrCurrentBet", PokerTable[tableid][pkrBlind]/2);
                                        PokerTable[tableid][pkrActiveBet] = PokerTable[tableid][pkrBlind]/2;
                                } else {
                                        tmpPos++;
                                }
                        } else {
                                tmpPos++;
                        }
                }
        }
        PokerTable[tableid][pkrPos]++;
}

PokerRotateActivePlayer(tableid)
{
        new nextactiveid = -1, lastapid = -1, lastapslot = -1;
        if(PokerTable[tableid][pkrActivePlayerID] != -1) {
                lastapid = PokerTable[tableid][pkrActivePlayerID];

                for(new i = 0; i < 6; i++) {
                        if(PokerTable[tableid][pkrSlot][i] == lastapid) {
                                lastapslot = i;
                        }
                }

                DeletePVar(lastapid, "pkrActivePlayer");
                DeletePVar(lastapid, "pkrTime");

                PokerOptions(lastapid, 0);
        }

        // New Round Init Block
        if(PokerTable[tableid][pkrRotations] == 0 && lastapid == -1 && lastapslot == -1) {

                // Find & Assign ActivePlayer to Dealer
                for(new i = 0; i < 6; i++) {
                        new playerid = PokerTable[tableid][pkrSlot][i];

                        if(GetPVarInt(playerid, "pkrRoomDealer") == 1) {
                                nextactiveid = playerid;
                                PokerTable[tableid][pkrActivePlayerID] = playerid;
                                PokerTable[tableid][pkrActivePlayerSlot] = i;
                                PokerTable[tableid][pkrRotations]++;
                                PokerTable[tableid][pkrSlotRotations] = i;
                        }
                }
        }
        else if(PokerTable[tableid][pkrRotations] >= 6)
        {
                PokerTable[tableid][pkrRotations] = 0;
                PokerTable[tableid][pkrStage]++;

                if(PokerTable[tableid][pkrStage] > 3) {
                        PokerTable[tableid][pkrActive] = 4;
                        PokerTable[tableid][pkrDelay] = 20+1;
                        return 1;
                }

                PokerTable[tableid][pkrSlotRotations]++;
                if(PokerTable[tableid][pkrSlotRotations] >= 6) {
                        PokerTable[tableid][pkrSlotRotations] -= 6;
                }

                new playerid = PokerFindPlayerOrder(tableid, PokerTable[tableid][pkrSlotRotations]);

                if(playerid != -1) {
                        nextactiveid = playerid;
                        PokerTable[tableid][pkrActivePlayerID] = playerid;
                        PokerTable[tableid][pkrActivePlayerSlot] = PokerTable[tableid][pkrSlotRotations];
                        PokerTable[tableid][pkrRotations]++;
                } else {
                        PokerTable[tableid][pkrRotations]++;
                        PokerRotateActivePlayer(tableid);
                }
        }
        else
        {
                PokerTable[tableid][pkrSlotRotations]++;
                if(PokerTable[tableid][pkrSlotRotations] >= 6) {
                        PokerTable[tableid][pkrSlotRotations] -= 6;
                }

                new playerid = PokerFindPlayerOrder(tableid, PokerTable[tableid][pkrSlotRotations]);

                if(playerid != -1) {
                        nextactiveid = playerid;
                        PokerTable[tableid][pkrActivePlayerID] = playerid;
                        PokerTable[tableid][pkrActivePlayerSlot] = PokerTable[tableid][pkrSlotRotations];
                        PokerTable[tableid][pkrRotations]++;
                } else {
                        PokerTable[tableid][pkrRotations]++;
                        PokerRotateActivePlayer(tableid);
                }
        }

        if(nextactiveid != -1) {
                if(GetPVarInt(nextactiveid, "pkrActiveHand")) {
                        new currentBet = GetPVarInt(nextactiveid, "pkrCurrentBet");
                        new activeBet = PokerTable[tableid][pkrActiveBet];

                        new apSoundID[] = {5809, 5810};
                        new randomApSoundID = random(sizeof(apSoundID));
                        PlayerPlaySound(nextactiveid, apSoundID[randomApSoundID], 0.0, 0.0, 0.0);

                        if(GetPVarInt(nextactiveid, "pkrChips") < 1) {
                                PokerOptions(nextactiveid, 3);
                        } else if(currentBet >= activeBet) {
                                PokerOptions(nextactiveid, 1);
                        } else if (currentBet < activeBet) {
                                PokerOptions(nextactiveid, 2);
                        } else {
                                PokerOptions(nextactiveid, 0);
                        }

                        SetPVarInt(nextactiveid, "pkrTime", 60);
                        SetPVarInt(nextactiveid, "pkrActivePlayer", 1);
                }
        }
        return 1;
}

InitPokerTables()
{
        for(new i = 0; i < MAX_POKERTABLES; i++) {
                PokerTable[i][pkrActive] = 0;
                PokerTable[i][pkrPlaced] = 0;
                PokerTable[i][pkrObjectID] = 0;

                for(new c = 0; c < MAX_POKERTABLEMISCOBJS; c++) {
                        PokerTable[i][pkrMiscObjectID][c] = 0;
                }

                for(new s = 0; s < 6; s++) {
                        PokerTable[i][pkrSlot][s] = -1;
                }

                PokerTable[i][pkrX] = 0.0;
                PokerTable[i][pkrY] = 0.0;
                PokerTable[i][pkrZ] = 0.0;
                PokerTable[i][pkrRX] = 0.0;
                PokerTable[i][pkrRY] = 0.0;
                PokerTable[i][pkrRZ] = 0.0;
                PokerTable[i][pkrVW] = 0;
                PokerTable[i][pkrInt] = 0;
                PokerTable[i][pkrPlayers] = 0;
                PokerTable[i][pkrLimit] = 6;
                PokerTable[i][pkrBuyInMax] = 1000;
                PokerTable[i][pkrBuyInMin] = 500;
                PokerTable[i][pkrBlind] = 100;
                PokerTable[i][pkrPos] = 0;
                PokerTable[i][pkrRound] = 0;
                PokerTable[i][pkrStage] = 0;
                PokerTable[i][pkrActiveBet] = 0;
                PokerTable[i][pkrSetDelay] = 15;
                PokerTable[i][pkrActivePlayerID] = -1;
                PokerTable[i][pkrActivePlayerSlot] = -1;
                PokerTable[i][pkrRotations] = 0;
                PokerTable[i][pkrSlotRotations] = 0;
                PokerTable[i][pkrWinnerID] = -1;
                PokerTable[i][pkrWinners] = 0;
        }

        LoadPokerTables();
}

LoadPokerTables()
{
        new tmpArray[8][64];
        new tmpString[512];
        new File: file = fopen("pokertables.cfg", io_read);
        if (file)
        {
                new idx;
                while (idx < sizeof(PokerTable))
                {
                        fread(file, tmpString);
                        split(tmpString, tmpArray, '|');
                        PokerTable[idx][pkrX] = floatstr(tmpArray[0]);
                        PokerTable[idx][pkrY] = floatstr(tmpArray[1]);
                        PokerTable[idx][pkrZ] = floatstr(tmpArray[2]);
                        PokerTable[idx][pkrRX] = floatstr(tmpArray[3]);
                        PokerTable[idx][pkrRY] = floatstr(tmpArray[4]);
                        PokerTable[idx][pkrRZ] = floatstr(tmpArray[5]);
                        PokerTable[idx][pkrVW] = strval(tmpArray[6]);
                        PokerTable[idx][pkrInt] = strval(tmpArray[7]);

                        if(PokerTable[idx][pkrX] != 0.0) {
                                PlacePokerTable(idx, 1,
                                        PokerTable[idx][pkrX],
                                        PokerTable[idx][pkrY],
                                        PokerTable[idx][pkrZ],
                                        PokerTable[idx][pkrRX],
                                        PokerTable[idx][pkrRY],
                                        PokerTable[idx][pkrRZ],
                                        PokerTable[idx][pkrVW],
                                        PokerTable[idx][pkrInt]
                                );
                        }
                        idx++;
                }
                fclose(file);
        }
        return 1;
}

SavePokerTables()
{
        new idx;
        new File: file;
        while (idx < sizeof(PokerTable))
        {
                new tmpString[512];
                format(tmpString, sizeof(tmpString), "%f|%f|%f|%f|%f|%f|%d|%d\n",
                        PokerTable[idx][pkrX],
                        PokerTable[idx][pkrY],
                        PokerTable[idx][pkrZ],
                        PokerTable[idx][pkrRX],
                        PokerTable[idx][pkrRY],
                        PokerTable[idx][pkrRZ],
                        PokerTable[idx][pkrVW],
                        PokerTable[idx][pkrInt]
                );

                if(idx == 0) {
                        file = fopen("pokertables.cfg", io_write);
                } else {
                        file = fopen("pokertables.cfg", io_append);
                }

                fwrite(file, tmpString);
                idx++;
                fclose(file);
        }
        return 1;
}

ResetPokerRound(tableid)
{
        PokerTable[tableid][pkrRound] = 0;
        PokerTable[tableid][pkrStage] = 0;
        PokerTable[tableid][pkrActiveBet] = 0;
        PokerTable[tableid][pkrActive] = 2;
        PokerTable[tableid][pkrDelay] = PokerTable[tableid][pkrSetDelay];
        PokerTable[tableid][pkrPot] = 0;
        PokerTable[tableid][pkrRotations] = 0;
        PokerTable[tableid][pkrSlotRotations] = 0;
        PokerTable[tableid][pkrWinnerID] = -1;
        PokerTable[tableid][pkrWinners] = 0;

        // Reset Player Variables
        for(new i = 0; i < 6; i++) {
                new playerid = PokerTable[tableid][pkrSlot][i];

                if(playerid != -1) {
                        DeletePVar(playerid, "pkrWinner");
                        DeletePVar(playerid, "pkrRoomBigBlind");
                        DeletePVar(playerid, "pkrRoomSmallBlind");
                        DeletePVar(playerid, "pkrRoomDealer");
                        DeletePVar(playerid, "pkrCard1");
                        DeletePVar(playerid, "pkrCard2");
                        DeletePVar(playerid, "pkrActivePlayer");
                        DeletePVar(playerid, "pkrTime");

                        if(GetPVarInt(playerid, "pkrActiveHand")) {
                                PokerTable[tableid][pkrActiveHands]--;

                                // Animation
                                if(!ComAnim[playerid]) ApplyAnimation(playerid, "CASINO", "cards_out", 4.1, 0, 1, 1, 1, 1, 1);
                        }

                        DeletePVar(playerid, "pkrActiveHand");
                        DeletePVar(playerid, "pkrCurrentBet");
                        DeletePVar(playerid, "pkrResultString");
                        DeletePVar(playerid, "pkrHide");
                }
        }

        return 1;
}

ResetPokerTable(tableid)
{
        new szString[32];
        format(szString, sizeof(szString), "");
        strmid(PokerTable[tableid][pkrPass], szString, 0, strlen(szString), 64);

        PokerTable[tableid][pkrActive] = 0;
        PokerTable[tableid][pkrLimit] = 6;
        PokerTable[tableid][pkrBuyInMax] = 1000;
        PokerTable[tableid][pkrBuyInMin] = 500;
        PokerTable[tableid][pkrBlind] = 100;
        PokerTable[tableid][pkrPos] = 0;
        PokerTable[tableid][pkrRound] = 0;
        PokerTable[tableid][pkrStage] = 0;
        PokerTable[tableid][pkrActiveBet] = 0;
        PokerTable[tableid][pkrDelay] = 0;
        PokerTable[tableid][pkrPot] = 0;
        PokerTable[tableid][pkrSetDelay] = 15;
        PokerTable[tableid][pkrRotations] = 0;
        PokerTable[tableid][pkrSlotRotations] = 0;
        PokerTable[tableid][pkrWinnerID] = -1;
        PokerTable[tableid][pkrWinners] = 0;
}

CreatePokerGUI(playerid)
{
        PlayerPokerUI[playerid][0] = CreatePlayerTextDraw(playerid, 390.000000, 263.000000, " "); // Seat 2 (SEAT 1)
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][0], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][0], 100);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][0], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][0], 0.159998, 1.200001);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][0], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][0], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][0], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][0], 0);

        PlayerPokerUI[playerid][1] = CreatePlayerTextDraw(playerid, 389.000000, 273.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][1], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][1], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][1], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][1], 0.159998, 1.200001);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][1], 16711935);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][1], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][1], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][1], 0);

        PlayerPokerUI[playerid][2] = CreatePlayerTextDraw(playerid, 369.000000, 286.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][2], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][2], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][2], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][2], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][2], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][2], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][2], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][2], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][2], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][2], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][2], 20.000000, 33.000000);

        PlayerPokerUI[playerid][3] = CreatePlayerTextDraw(playerid, 392.000000, 286.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][3], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][3], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][3], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][3], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][3], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][3], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][3], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][3], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][3], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][3], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][3], 20.000000, 33.000000);

        PlayerPokerUI[playerid][4] = CreatePlayerTextDraw(playerid, 391.000000, 319.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][4], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][4], 100);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][4], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][4], 0.180000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][4], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][4], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][4], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][4], 0);

        PlayerPokerUI[playerid][5] = CreatePlayerTextDraw(playerid, 250.000000, 263.000000, " "); // Seat 1 (SEAT 2)
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][5], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][5], 100);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][5], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][5], 0.159999, 1.200001);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][5], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][5], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][5], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][5], 0);

        PlayerPokerUI[playerid][6] = CreatePlayerTextDraw(playerid, 250.000000, 273.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][6], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][6], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][6], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][6], 0.159999, 1.200001);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][6], 16711935);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][6], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][6], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][6], 0);

        PlayerPokerUI[playerid][7] = CreatePlayerTextDraw(playerid, 229.000000, 286.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][7], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][7], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][7], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][7], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][7], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][7], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][7], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][7], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][7], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][7], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][7], 20.000000, 33.000000);

        PlayerPokerUI[playerid][8] = CreatePlayerTextDraw(playerid, 252.000000, 286.000000, " ");
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][8], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][8], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][8], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][8], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][8], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][8], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][8], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][8], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][8], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][8], 20.000000, 33.000000);

        PlayerPokerUI[playerid][9] = CreatePlayerTextDraw(playerid, 250.000000, 319.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][9], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][9], 100);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][9], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][9], 0.180000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][9], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][9], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][9], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][9], 0);

        PlayerPokerUI[playerid][10] = CreatePlayerTextDraw(playerid, 199.000000, 190.000000, " "); // Seat 6 (SEAT 3)
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][10], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][10], 100);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][10], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][10], 0.159998, 1.200001);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][10], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][10], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][10], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][10], 0);

        PlayerPokerUI[playerid][11] = CreatePlayerTextDraw(playerid, 199.000000, 199.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][11], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][11], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][11], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][11], 0.159998, 1.200001);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][11], 16711935);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][11], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][11], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][11], 0);

        PlayerPokerUI[playerid][12] = CreatePlayerTextDraw(playerid, 179.000000, 212.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][12], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][12], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][12], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][12], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][12], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][12], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][12], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][12], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][12], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][12], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][12], 20.000000, 33.000000);

        PlayerPokerUI[playerid][13] = CreatePlayerTextDraw(playerid, 202.000000, 212.000000, " ");
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][13], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][13], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][13], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][13], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][13], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][13], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][13], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][13], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][13], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][13], 20.000000, 33.000000);

        PlayerPokerUI[playerid][14] = CreatePlayerTextDraw(playerid, 200.000000, 245.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][14], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][14], 100);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][14], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][14], 0.180000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][14], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][14], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][14], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][14], 0);

        PlayerPokerUI[playerid][15] = CreatePlayerTextDraw(playerid, 250.000000, 116.000000, " ");  // Seat 5 (SEAT 4)
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][15], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][15], 100);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][15], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][15], 0.159998, 1.200001);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][15], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][15], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][15], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][15], 0);

        PlayerPokerUI[playerid][16] = CreatePlayerTextDraw(playerid, 250.000000, 126.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][16], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][16], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][16], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][16], 0.159998, 1.200001);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][16], 16711935);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][16], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][16], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][16], 0);

        PlayerPokerUI[playerid][17] = CreatePlayerTextDraw(playerid, 229.000000, 139.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][17], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][17], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][17], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][17], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][17], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][17], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][17], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][17], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][17], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][17], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][17], 20.000000, 33.000000);

        PlayerPokerUI[playerid][18] = CreatePlayerTextDraw(playerid, 252.000000, 139.000000, " ");
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][18], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][18], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][18], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][18], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][18], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][18], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][18], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][18], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][18], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][18], 20.000000, 33.000000);

        PlayerPokerUI[playerid][19] = CreatePlayerTextDraw(playerid, 250.000000, 172.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][19], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][19], 100);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][19], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][19], 0.180000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][19], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][19], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][19], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][19], 0);

        PlayerPokerUI[playerid][20] = CreatePlayerTextDraw(playerid, 390.000000, 116.000000, " "); // Seat 4 (SEAT 5)
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][20], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][20], 100);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][20], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][20], 0.159997, 1.200001);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][20], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][20], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][20], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][20], 0);

        PlayerPokerUI[playerid][21] = CreatePlayerTextDraw(playerid, 389.000000, 126.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][21], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][21], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][21], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][21], 0.159997, 1.200001);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][21], 16711935);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][21], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][21], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][21], 0);

        PlayerPokerUI[playerid][22] = CreatePlayerTextDraw(playerid, 369.000000, 139.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][22], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][22], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][22], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][22], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][22], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][22], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][22], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][22], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][22], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][22], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][22], 20.000000, 33.000000);

        PlayerPokerUI[playerid][23] = CreatePlayerTextDraw(playerid, 392.000000, 139.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][23], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][23], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][23], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][23], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][23], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][23], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][23], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][23], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][23], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][23], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][23], 20.000000, 33.000000);

        PlayerPokerUI[playerid][24] = CreatePlayerTextDraw(playerid, 391.000000, 172.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][24], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][24], 100);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][24], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][24], 0.180000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][24], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][24], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][24], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][24], 0);

        PlayerPokerUI[playerid][25] = CreatePlayerTextDraw(playerid, 443.000000, 190.000000, " "); // Seat 3 (SEAT 6)
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][25], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][25], 100);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][25], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][25], 0.159998, 1.200001);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][25], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][25], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][25], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][25], 0);

        PlayerPokerUI[playerid][26] = CreatePlayerTextDraw(playerid, 442.000000, 199.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][26], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][26], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][26], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][26], 0.159998, 1.200001);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][26], 16711935);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][26], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][26], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][26], 0);

        PlayerPokerUI[playerid][27] = CreatePlayerTextDraw(playerid, 422.000000, 212.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][27], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][27], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][27], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][27], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][27], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][27], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][27], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][27], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][27], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][27], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][27], 20.000000, 33.000000);

        PlayerPokerUI[playerid][28] = CreatePlayerTextDraw(playerid, 445.000000, 212.000000, " ");
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][28], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][28], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][28], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][28], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][28], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][28], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][28], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][28], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][28], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][28], 20.000000, 33.000000);

        PlayerPokerUI[playerid][29] = CreatePlayerTextDraw(playerid, 444.000000, 245.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][29], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][29], 100);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][29], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][29], 0.180000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][29], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][29], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][29], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][29], 0);

        PlayerPokerUI[playerid][30] = CreatePlayerTextDraw(playerid, 265.000000, 205.000000, "New Textdraw"); // Community Card Box
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][30], 0);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][30], 1);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][30], 0.539999, 2.099998);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][30], 0);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][30], 1);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][30], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][30], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][30], 100);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][30], 375.000000, 71.000000);

        PlayerPokerUI[playerid][31] = CreatePlayerTextDraw(playerid, 266.000000, 208.000000, "LD_CARD:cdback");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][31], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][31], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][31], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][31], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][31], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][31], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][31], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][31], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][31], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][31], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][31], 20.000000, 33.000000);

        PlayerPokerUI[playerid][32] = CreatePlayerTextDraw(playerid, 288.000000, 208.000000, "LD_CARD:cdback");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][32], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][32], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][32], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][32], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][32], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][32], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][32], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][32], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][32], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][32], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][32], 20.000000, 33.000000);

        PlayerPokerUI[playerid][33] = CreatePlayerTextDraw(playerid, 310.000000, 208.000000, "LD_CARD:cdback");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][33], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][33], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][33], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][33], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][33], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][33], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][33], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][33], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][33], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][33], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][33], 20.000000, 33.000000);

        PlayerPokerUI[playerid][34] = CreatePlayerTextDraw(playerid, 332.000000, 208.000000, "LD_CARD:cdback");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][34], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][34], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][34], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][34], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][34], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][34], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][34], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][34], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][34], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][34], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][34], 20.000000, 33.000000);

        PlayerPokerUI[playerid][35] = CreatePlayerTextDraw(playerid, 354.000000, 208.000000, "LD_CARD:cdback");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][35], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][35], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][35], 4);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][35], 0.500000, 1.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][35], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][35], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][35], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][35], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][35], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][35], 255);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][35], 20.000000, 33.000000);

        PlayerPokerUI[playerid][36] = CreatePlayerTextDraw(playerid, 320.000000, 193.000000, "New Textdraw");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][36], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][36], 0);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][36], 1);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][36], 0.500000, 0.399999);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][36], 0);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][36], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][36], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][36], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][36], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][36], 50);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][36], 390.000000, 110.000000);

        PlayerPokerUI[playerid][37] = CreatePlayerTextDraw(playerid, 318.000000, 191.000000, "RJ Holden");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][37], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][37], -1);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][37], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][37], 0.199999, 1.200000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][37], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][37], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][37], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][37], 0);

        PlayerPokerUI[playerid][38] = CreatePlayerTextDraw(playerid, 321.000000, 268.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][38], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][38], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][38], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][38], 0.189999, 1.200000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][38], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][38], 1);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][38], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][38], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][38], 45);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][38], 10.000000, 26.000000);
        PlayerTextDrawSetSelectable(playerid, PlayerPokerUI[playerid][38], 1);

        PlayerPokerUI[playerid][39] = CreatePlayerTextDraw(playerid, 321.000000, 284.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][39], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][39], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][39], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][39], 0.189999, 1.200000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][39], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][39], 1);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][39], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][39], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][39], 45);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][39], 10.000000, 26.000000);
        PlayerTextDrawSetSelectable(playerid, PlayerPokerUI[playerid][39], 1);

        PlayerPokerUI[playerid][40] = CreatePlayerTextDraw(playerid, 321.000000, 300.000000, " ");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][40], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][40], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][40], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][40], 0.189999, 1.200000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][40], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][40], 1);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][40], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][40], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][40], 45);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][40], 10.000000, 26.000000);
        PlayerTextDrawSetSelectable(playerid, PlayerPokerUI[playerid][40], 1);

        PlayerPokerUI[playerid][41] = CreatePlayerTextDraw(playerid, 318.000000, 120.000000, "SAIR");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][41], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][41], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][41], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][41], 0.189999, 1.200000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][41], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][41], 1);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][41], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][41], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][41], 45);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][41], 10.000000, 36.000000);
        PlayerTextDrawSetSelectable(playerid, PlayerPokerUI[playerid][41], 1);

        PlayerPokerUI[playerid][42] = CreatePlayerTextDraw(playerid, 590.000000, 400.000000, "2024");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][42], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][42], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][42], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][42], 0.500000, 2.000000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][42], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][42], 1);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][42], 1);

        PlayerPokerUI[playerid][43] = CreatePlayerTextDraw(playerid, 569.000000, 396.000000, "Sao_Paulo");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][43], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][43], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][43], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][43], 0.180000, 0.800000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][43], 200);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][43], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][43], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][43], 0);

        PlayerPokerUI[playerid][44] = CreatePlayerTextDraw(playerid, 588.000000, 437.000000, "_");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][44], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][44], 255);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][44], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][44], 0.180000, 0.800000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][44], 200);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][44], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][44], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][44], 0);

        PlayerPokerUI[playerid][45] = CreatePlayerTextDraw(playerid, 5.000000, 100.000000, "Debug:");
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][45], 0);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][45], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][45], 0.159999, 1.099999);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][45], 200);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][45], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][45], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][45], 1);

        PlayerPokerUI[playerid][46] = CreatePlayerTextDraw(playerid, 318.000000, 245.000000, "RJ Holden");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][46], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][46], -1);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][46], 2);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][46], 0.199999, 1.200000);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][46], -1);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][46], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][46], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][46], 0);

        PlayerPokerUI[playerid][47] = CreatePlayerTextDraw(playerid, 320.000000, 248.000000, "New Textdraw");
        PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][47], 2);
        PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][47], 0);
        PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][47], 1);
        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][47], 0.500000, 0.399998);
        PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][47], 0);
        PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][47], 0);
        PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][47], 1);
        PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][47], 1);
        PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][47], 1);
        PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][47], 50);
        PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][47], 390.000000, 110.000000);
}

ShowPokerGUI(playerid, guitype)
{
        switch(guitype)
        {
                case GUI_POKER_TABLE:
                {
                        SetPVarInt(playerid, "pkrTableGUI", 1);
                        for(new i = 0; i < MAX_PLAYERPOKERUI; i++) {
                                PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][i]);
                        }
                }
        }
}

DestroyPokerGUI(playerid)
{
        for(new i = 0; i < MAX_PLAYERPOKERUI; i++) {
                PlayerTextDrawDestroy(playerid, PlayerPokerUI[playerid][i]);
        }
}

PlacePokerTable(tableid, skipmisc, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, virtualworld, interior)
{
        PokerTable[tableid][pkrPlaced] = 1;
        PokerTable[tableid][pkrX] = x;
        PokerTable[tableid][pkrY] = y;
        PokerTable[tableid][pkrZ] = z;
        PokerTable[tableid][pkrRX] = rx;
        PokerTable[tableid][pkrRY] = ry;
        PokerTable[tableid][pkrRZ] = rz;
        PokerTable[tableid][pkrVW] = virtualworld;
        PokerTable[tableid][pkrInt] = interior;

        // Create Table
        PokerTable[tableid][pkrObjectID] = CreateDynamicObject(OBJ_POKER_TABLE, x, y, z, rx, ry, rz, virtualworld, interior, -1, DRAWDISTANCE_POKER_TABLE);

        if(skipmisc != 0) {
        }

        // Create 3D Text Label
        new szString[64];
        format(szString, sizeof(szString), "[Mesa de Poker %d]", tableid);
        PokerTable[tableid][pkrText3DID] = CreateDynamic3DTextLabel(szString, COLOR_GOLD, x, y, z+1.3, DRAWDISTANCE_POKER_MISC, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, virtualworld);

        SavePokerTables();

        return tableid;
}

DestroyPokerTable(tableid)
{
        PokerTable[tableid][pkrX] = 0.0;
        PokerTable[tableid][pkrY] = 0.0;
        PokerTable[tableid][pkrZ] = 0.0;
        PokerTable[tableid][pkrRX] = 0.0;
        PokerTable[tableid][pkrRY] = 0.0;
        PokerTable[tableid][pkrRZ] = 0.0;
        PokerTable[tableid][pkrVW] = 0;
        PokerTable[tableid][pkrInt] = 0;

        if(PokerTable[tableid][pkrPlaced] == 1) {

                // Delete Table
                if(IsValidDynamicObject(PokerTable[tableid][pkrObjectID])) DestroyDynamicObject(PokerTable[tableid][pkrObjectID]);

                // Delete 3D Text Label
                if (IsValidDynamic3DTextLabel(PokerTable[tableid][pkrText3DID]))
                	DestroyDynamic3DTextLabel(PokerTable[tableid][pkrText3DID]);

                // Delete Misc Obj
                for(new c = 0; c < MAX_POKERTABLEMISCOBJS; c++) {
                        if(IsValidDynamicObject(PokerTable[tableid][pkrMiscObjectID][c])) DestroyDynamicObject(PokerTable[tableid][pkrMiscObjectID][c]);
                }
        }

        PokerTable[tableid][pkrPlayers] = 0;
        PokerTable[tableid][pkrLimit] = 6;
        PokerTable[tableid][pkrPlaced] = 0;

        SavePokerTables();

        return tableid;
}

JoinPokerTable(playerid, tableid)
{
        // Check if there is room for the player
        if(PokerTable[tableid][pkrPlayers] < PokerTable[tableid][pkrLimit])
        {
                // Check if table is not joinable.
                if(PokerTable[tableid][pkrActive] == 1) {
                        SendClientMessage(playerid, COLOR_WHITE, "*** Alguém já está configurando essa mesa, tente novamente mais tarde.");
                        return 1;
                }

                // Find an open seat
                for(new s; s < 6; s++) {
                        if(PokerTable[tableid][pkrSlot][s] == -1) {

                                SetPVarInt(playerid, "pkrTableID", tableid+1);
                                SetPVarInt(playerid, "pkrSlot", s);

                                // Occuply Slot
                                PokerTable[tableid][pkrPlayers] += 1;
                                PokerTable[tableid][pkrSlot][s] = playerid;

                                // Check & Start Game Loop if Not Active
                                if(PokerTable[tableid][pkrPlayers] == 1) {

                                        // Player is Room Creator
                                        SetPVarInt(playerid, "pkrRoomLeader", 1);
                                        ShowCasinoGamesMenu(playerid, DIALOG_CGAMESSETUPPGAME);

                                        PokerTable[tableid][pkrActive] = 1; // Warmup Phase
                                        PokerTable[tableid][pkrPulseTimer] = SetTimerEx("PokerPulse", 1000, true, "i", tableid);

                                        //PokerPulse(tableid);
                                } else { // Execute code for Non-Room Creators
                                        ShowCasinoGamesMenu(playerid, DIALOG_CGAMESBUYINPOKER);
                                        SelectTextDraw(playerid, COLOR_GOLD);
                                }

                                CameraRadiusSetPos(playerid, PokerTable[tableid][pkrX], PokerTable[tableid][pkrY], PokerTable[tableid][pkrZ], 90.0, 4.7, 0.1);

                                new Float:tmpPos[3];
                                GetPlayerPos(playerid, tmpPos[0], tmpPos[1], tmpPos[2]);

                                SetPVarFloat(playerid, "pkrTableJoinX", tmpPos[0]);
                                SetPVarFloat(playerid, "pkrTableJoinY", tmpPos[1]);
                                SetPVarFloat(playerid, "pkrTableJoinZ", tmpPos[2]);

                                TogglePlayerControllable(playerid, 0);
                                SetPlayerPosObjectOffset(PokerTable[tableid][pkrObjectID], playerid, PokerTableMiscObjOffsets[s][0], PokerTableMiscObjOffsets[s][1], PokerTableMiscObjOffsets[s][2]);
                                SetPlayerFacingAngle(playerid, PokerTableMiscObjOffsets[s][5]+90.0);
                                SetPlayerInterior(playerid, PokerTable[tableid][pkrInt]);

                                if(!ComAnim[playerid]) ApplyAnimation(playerid, "CASINO", "cards_out", 4.1, 0, 1, 1, 1, 1, 1);

                                // Create GUI
                                CreatePokerGUI(playerid);
                                ShowPokerGUI(playerid, GUI_POKER_TABLE);

                                // Hide Action Bar
                                PokerOptions(playerid, 0);

                                return 1;
                        }
                }
        }
 		return 1;
}

LeavePokerTable(playerid)
{
        new tableid = GetPVarInt(playerid, "pkrTableID")-1;

        // SFX
        new leaveSoundID[2] = {5852, 5853};
        new randomLeaveSoundID = random(sizeof(leaveSoundID));
        PlayerPlaySound(playerid, leaveSoundID[randomLeaveSoundID], 0.0, 0.0, 0.0);

        // Convert prkChips to Grana
        PlayerInfo[playerid][pGrana] += GetPVarInt(playerid, "pkrChips");

        // De-occuply Slot
        PokerTable[tableid][pkrPlayers] -= 1;
        if(GetPVarInt(playerid, "pkrStatus")) PokerTable[tableid][pkrActivePlayers] -= 1;
        PokerTable[tableid][pkrSlot][GetPVarInt(playerid, "pkrSlot")] = -1;

        // Check & Stop the Game Loop if No Players at the Table
        if(PokerTable[tableid][pkrPlayers] == 0) {
                KillTimer(PokerTable[tableid][pkrPulseTimer]);

                new tmpString[64];
                format(tmpString, sizeof(tmpString), "[Mesa de Poker %d]", tableid);
                UpdateDynamic3DTextLabelText(PokerTable[tableid][pkrText3DID], COLOR_GOLD, tmpString);

                ResetPokerTable(tableid);
        }

        if(PokerTable[tableid][pkrRound] == 0 && PokerTable[tableid][pkrDelay] < 5) {
                ResetPokerRound(tableid);
        }

        SetPlayerPos(playerid, GetPVarFloat(playerid, "pkrTableJoinX"), GetPVarFloat(playerid, "pkrTableJoinY"), GetPVarFloat(playerid, "pkrTableJoinZ")+0.1);
        SetCameraBehindPlayer(playerid);
        TogglePlayerControllable(playerid, 1);
        ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
        CancelSelectTextDraw(playerid);

        if(GetPVarInt(playerid, "pkrActiveHand")) {
                PokerTable[tableid][pkrActiveHands]--;
        }

        // Destroy Poker Memory
        DeletePVar(playerid, "pkrWinner");
        DeletePVar(playerid, "pkrCurrentBet");
        DeletePVar(playerid, "pkrChips");
        DeletePVar(playerid, "pkrTableJoinX");
        DeletePVar(playerid, "pkrTableJoinY");
        DeletePVar(playerid, "pkrTableJoinZ");
        DeletePVar(playerid, "pkrTableID");
        DeletePVar(playerid, "pkrSlot");
        DeletePVar(playerid, "pkrStatus");
        DeletePVar(playerid, "pkrRoomLeader");
        DeletePVar(playerid, "pkrRoomBigBlind");
        DeletePVar(playerid, "pkrRoomSmallBlind");
        DeletePVar(playerid, "pkrRoomDealer");
        DeletePVar(playerid, "pkrCard1");
        DeletePVar(playerid, "pkrCard2");
        DeletePVar(playerid, "pkrActivePlayer");
        DeletePVar(playerid, "pkrActiveHand");
        DeletePVar(playerid, "pkrHide");

        // Destroy GUI
        DestroyPokerGUI(playerid);

        // Delay Exit Call
        SetTimerEx("PokerExit", 250, false, "d", playerid);

        return 1;
}

ShowCasinoGamesMenu(playerid, dialogid)
{
        switch(dialogid)
        {
                case DIALOG_CGAMESCALLPOKER:
                {
                        if(GetPVarInt(playerid, "pkrChips") > 0) {
                                SetPVarInt(playerid, "pkrActionChoice", 1);

                                new tableid = GetPVarInt(playerid, "pkrTableID")-1;
                                new actualBet = PokerTable[tableid][pkrActiveBet]-GetPVarInt(playerid, "pkrCurrentBet");

                                new szString[128];
                                if(actualBet > GetPVarInt(playerid, "pkrChips")) {
                                        format(szString, sizeof(szString), "{FFFFFF}Tem certeza de que deseja pagar R$%d (All-In)?:", actualBet);
                                        return ShowPlayerDialog(playerid, DIALOG_CGAMESCALLPOKER, DIALOG_STYLE_MSGBOX, "{FFFFFF}RJ Holden - (Pagar)", szString, "All-In", "Cancelar");
                                }
                                format(szString, sizeof(szString), "{FFFFFF}Tem certeza de que deseja pagar R$%d?:", actualBet);
                                return ShowPlayerDialog(playerid, DIALOG_CGAMESCALLPOKER, DIALOG_STYLE_MSGBOX, "{FFFFFF}RJ Holden - (Pagar)", szString, "Pagar", "Cancelar");
                        } else {
                                SendClientMessage(playerid, COLOR_WHITE, "DEALER: Você não tem fundos para pagar.");
                                new noFundsSoundID[] = {5823, 5824, 5825};
                                new randomNoFundsSoundID = random(sizeof(noFundsSoundID));
                                PlayerPlaySound(playerid, noFundsSoundID[randomNoFundsSoundID], 0.0, 0.0, 0.0);
                        }
                }
                case DIALOG_CGAMESRAISEPOKER:
                {
                        new tableid = GetPVarInt(playerid, "pkrTableID")-1;

                        SetPVarInt(playerid, "pkrActionChoice", 1);

                        if(GetPVarInt(playerid, "pkrCurrentBet")+GetPVarInt(playerid, "pkrChips") > PokerTable[tableid][pkrActiveBet]+PokerTable[tableid][pkrBlind]/2)
						{
                                SetPVarInt(playerid, "pkrActionChoice", 1);
                                new szString[128];
                                format(szString, sizeof(szString), "{FFFFFF}Quanto você quer apostar? (R$%d-R$%d):", PokerTable[tableid][pkrActiveBet]+PokerTable[tableid][pkrBlind]/2, GetPVarInt(playerid, "pkrCurrentBet")+GetPVarInt(playerid, "pkrChips"));
                                return ShowPlayerDialog(playerid, DIALOG_CGAMESRAISEPOKER, DIALOG_STYLE_INPUT, "{FFFFFF}RJ Holden - (Apostar)", szString, "Apostar", "Cancelar");
                        } else if(GetPVarInt(playerid, "pkrCurrentBet")+GetPVarInt(playerid, "pkrChips") == PokerTable[tableid][pkrActiveBet]+PokerTable[tableid][pkrBlind]/2) {
                                SetPVarInt(playerid, "pkrActionChoice", 1);

                                new szString[128];
                                format(szString, sizeof(szString), "{FFFFFF}Quanto você quer apostar? (All-In):", PokerTable[tableid][pkrActiveBet]+PokerTable[tableid][pkrBlind]/2, GetPVarInt(playerid, "pkrCurrentBet")+GetPVarInt(playerid, "pkrChips"));
                                return ShowPlayerDialog(playerid, DIALOG_CGAMESRAISEPOKER, DIALOG_STYLE_INPUT, "{FFFFFF}RJ Holden - (Apostar)", szString, "All-In", "Cancelar");
                        } else {
                                SendClientMessage(playerid, COLOR_WHITE, "DEALER: Você não tem fundos para pagar.");
                                new noFundsSoundID[] = {5823, 5824, 5825};
                                new randomNoFundsSoundID = random(sizeof(noFundsSoundID));
                                PlayerPlaySound(playerid, noFundsSoundID[randomNoFundsSoundID], 0.0, 0.0, 0.0);
                        }

                }
                case DIALOG_CGAMESBUYINPOKER:
                {
                        new szString[386];
                        format(szString, sizeof(szString), "{FFFFFF}Por favor coloque um buy-in para a mesa:\n\nDinheiro Atual: {00FF00}R$%d{FFFFFF}\nBuy-In Maximo/Minimo: {00FF00}R$%d{FFFFFF}/{00FF00}R$%d{FFFFFF}", PlayerInfo[playerid][pGrana], PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrBuyInMax], PokerTable[GetPVarInt(playerid, "pkrTableID")-1][pkrBuyInMin]);
                        return ShowPlayerDialog(playerid, DIALOG_CGAMESBUYINPOKER, DIALOG_STYLE_INPUT, "{FFFFFF}Mesa de Poker - (BuyIn)", szString, "Buy In", "Sair");
                }
                case DIALOG_CGAMESADMINMENU:
                {
                        return ShowPlayerDialog(playerid, DIALOG_CGAMESADMINMENU, DIALOG_STYLE_LIST, "{FFFFFF}Mesa de Poker - (Admin Menu)", "{FFFFFF}Criar mesa de Poker...\nLine2\nCredits", "Selecionar", "Fechar");
                }
                case DIALOG_CGAMESSELECTPOKER:
                {
                        new szString[4096];
                        new szPlaced[64];

                        for(new i = 0; i < MAX_POKERTABLES; i++) {
                                if(PokerTable[i][pkrPlaced] == 1) { format(szPlaced, sizeof(szPlaced), "{00FF00}Ativa{FFFFFF}"); }
                                if(PokerTable[i][pkrPlaced] == 0) { format(szPlaced, sizeof(szPlaced), "{FF0000}Desativada{FFFFFF}"); }
                                format(szString, sizeof(szString), "%sPoker Table %d (%s)\n", szString, i, szPlaced, PokerTable[i][pkrPlayers]);
                        }
                        return ShowPlayerDialog(playerid, DIALOG_CGAMESSELECTPOKER, DIALOG_STYLE_LIST, "Mesas de Poker", szString, "Selecionar", "Voltar");
                }
                case DIALOG_CGAMESSETUPPOKER:
                {
                        new tableid = OutrasInfos[playerid][oEditandoMesaPoker]-1;

                        if(PokerTable[tableid][pkrPlaced] == 0) {
                                return ShowPlayerDialog(playerid, DIALOG_CGAMESSETUPPOKER, DIALOG_STYLE_LIST, "{FFFFFF}Mesas de Poker", "{FFFFFF}Colocar mesa...", "Selecionar", "Sair");
                        } else {
                                return ShowPlayerDialog(playerid, DIALOG_CGAMESSETUPPOKER, DIALOG_STYLE_LIST, "{FFFFFF}Mesas de Poker", "{FFFFFF}Editar mesa...\nDeletar mesa...", "Selecionar", "Sair");
                        }
                }
                case DIALOG_CGAMESCREDITS:
                {
                        return ShowPlayerDialog(playerid, DIALOG_CGAMESCREDITS, DIALOG_STYLE_MSGBOX, "{FFFFFF}Mesas de Poker", "{FFFFFF}Developed By: Dan 'GhoulSlayeR' Reed", "Back", "");
                }
                case DIALOG_CGAMESSETUPPGAME:
                {
                        new tableid = GetPVarInt(playerid, "pkrTableID")-1;

                        if(GetPVarType(playerid, "pkrTableID")) {
                                new szString[512];

                                if(PokerTable[tableid][pkrPass][0] == EOS) {
                                        format(szString, sizeof(szString), "{FFFFFF}Buy-In Max\t({00FF00}R$%d{FFFFFF})\nBuy-In Min\t({00FF00}R$%d{FFFFFF})\nBlind\t\t({00FF00}R$%d{FFFFFF} / {00FF00}R$%d{FFFFFF})\nLimite\t\t(%d)\nSenha\t(%s)\nTempo por Round\t(%d)\nIniciar jogo",
                                                PokerTable[tableid][pkrBuyInMax],
                                                PokerTable[tableid][pkrBuyInMin],
                                                PokerTable[tableid][pkrBlind],
                                                PokerTable[tableid][pkrBlind]/2,
                                                PokerTable[tableid][pkrLimit],
                                                "None",
                                                PokerTable[tableid][pkrSetDelay]
                                        );
                                } else {
                                        format(szString, sizeof(szString), "{FFFFFF}Buy-In Max\t({00FF00}R$%d{FFFFFF})\nBuy-In Min\t({00FF00}R$%d{FFFFFF})\nBlind\t\t({00FF00}R$%d{FFFFFF} / {00FF00}R$%d{FFFFFF})\nLimite\t\t(%d)\nSenha\t(%s)\nTempo por Round\t(%d)\nIniciar jogo",
                                                PokerTable[tableid][pkrBuyInMax],
                                                PokerTable[tableid][pkrBuyInMin],
                                                PokerTable[tableid][pkrBlind],
                                                PokerTable[tableid][pkrBlind]/2,
                                                PokerTable[tableid][pkrLimit],
                                                PokerTable[tableid][pkrPass],
                                                PokerTable[tableid][pkrSetDelay]
                                        );
                                }
                                return ShowPlayerDialog(playerid, DIALOG_CGAMESSETUPPGAME, DIALOG_STYLE_LIST, "{FFFFFF}Mesa de Poker - (Ajustes)", szString, "Selecionar", "Sair");
                        }
                }
                case DIALOG_CGAMESSETUPPGAME2:
                {
                        if(GetPVarType(playerid, "pkrTableID")) {
                                return ShowPlayerDialog(playerid, DIALOG_CGAMESSETUPPGAME2, DIALOG_STYLE_INPUT, "{FFFFFF}Mesa de Poker - (Buy-In Max)", "{FFFFFF}Insira o valor de Buy-In máximo:", "Alterar", "Voltar");
                        }
                }
                case DIALOG_CGAMESSETUPPGAME3:
                {
                        if(GetPVarType(playerid, "pkrTableID")) {
                                return ShowPlayerDialog(playerid, DIALOG_CGAMESSETUPPGAME3, DIALOG_STYLE_INPUT, "{FFFFFF}Mesa de Poker - (Buy-In Min)", "{FFFFFF}Insira o valor de Buy-In minimo:", "Alterar", "Voltar");
                        }
                }
                case DIALOG_CGAMESSETUPPGAME4:
                {
                        if(GetPVarType(playerid, "pkrTableID")) {
                                return ShowPlayerDialog(playerid, DIALOG_CGAMESSETUPPGAME4, DIALOG_STYLE_INPUT, "{FFFFFF}Mesa de Poker - (Blinds)", "{FFFFFF}Insira o valor do Blind:\n\nNota: Small blinds será automáticamente a metado do Big blind.", "Alterar", "Voltar");
                        }
                }
                case DIALOG_CGAMESSETUPPGAME5:
                {
                        if(GetPVarType(playerid, "pkrTableID")) {
                                return ShowPlayerDialog(playerid, DIALOG_CGAMESSETUPPGAME5, DIALOG_STYLE_INPUT, "{FFFFFF}Mesa de Poker - (Limite)", "{FFFFFF}Insira o numero máximo de jogadores (2-6):", "Alterar", "Voltar");
                        }
                }
                case DIALOG_CGAMESSETUPPGAME6:
                {
                        if(GetPVarType(playerid, "pkrTableID")) {
                                return ShowPlayerDialog(playerid, DIALOG_CGAMESSETUPPGAME6, DIALOG_STYLE_INPUT, "{FFFFFF}Mesa de Poker - (Password)", "{FFFFFF}Insira uma senha para a mesa:\n\nNota: Deixe o campo em branco para uma mesa pública", "Alterar", "Voltar");
                        }
                }
                case DIALOG_CGAMESSETUPPGAME7:
                {
                        if(GetPVarType(playerid, "pkrTableID")) {
                                return ShowPlayerDialog(playerid, DIALOG_CGAMESSETUPPGAME7, DIALOG_STYLE_INPUT, "{FFFFFF}Mesa de Poker - (Tempo por Round)", "{FFFFFF}Insira o tempo por Round (15-120 sec):", "Alterar", "Voltar");
                        }
                }
        }
        return 1;
}

CMD:casinogames(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] >= 3000)
	{
		ShowCasinoGamesMenu(playerid, DIALOG_CGAMESADMINMENU);
  	}
    return 1;
}

CMD:debugseat(playerid, params[]) // DEBUG ONLY
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	for(new t = 0; t < MAX_POKERTABLES; t++)
	{
 		if(IsPlayerInRangeOfPoint(playerid, 5.0, PokerTable[t][pkrX], PokerTable[t][pkrY], PokerTable[t][pkrZ]))
 		{
	   		new s = strval(params);

			if(s < 6 && s >= 0)
			{
	  			SetPlayerPosObjectOffset(PokerTable[t][pkrObjectID], playerid, PokerTableMiscObjOffsets[s][0], PokerTableMiscObjOffsets[s][1], PokerTableMiscObjOffsets[s][2]);
	     		SetPlayerFacingAngle(playerid, PokerTableMiscObjOffsets[s][5]+90.0);
	       }
		}
  	}
  	return 1;
}

CMD:debugcamera(playerid, params[]) // DEBUG ONLY
{
    	if(!PlayerInfo[playerid][pLogado]) return 1;
        for(new t = 0; t < MAX_POKERTABLES; t++) {
                if(IsPlayerInRangeOfPoint(playerid, 5.0, PokerTable[t][pkrX], PokerTable[t][pkrY], PokerTable[t][pkrZ])) {
                        CameraRadiusSetPos(playerid, PokerTable[t][pkrX], PokerTable[t][pkrY], PokerTable[t][pkrZ], 90.0, 4.7, 0.1);
                }
        }
        return 1;
}
CMD:debugcamera1(playerid, params[]) // DEBUG ONLY
{
    	if(!PlayerInfo[playerid][pLogado]) return 1;
        for(new t = 0; t < MAX_POKERTABLES; t++) {
                if(IsPlayerInRangeOfPoint(playerid, 5.0, PokerTable[t][pkrX], PokerTable[t][pkrY], PokerTable[t][pkrZ])) {
                        CameraRadiusSetPos(playerid, PokerTable[t][pkrX], PokerTable[t][pkrY], PokerTable[t][pkrZ], 87.0, 4.7, 0.1);
                }
        }
        return 1;
}
CMD:debugcamera2(playerid, params[]) // DEBUG ONLY
{
    	if(!PlayerInfo[playerid][pLogado]) return 1;
        for(new t = 0; t < MAX_POKERTABLES; t++) {
                if(IsPlayerInRangeOfPoint(playerid, 5.0, PokerTable[t][pkrX], PokerTable[t][pkrY], PokerTable[t][pkrZ])) {
                        CameraRadiusSetPos(playerid, PokerTable[t][pkrX], PokerTable[t][pkrY], PokerTable[t][pkrZ], 93.0, 4.7, 0.1);
                }
        }
        return 1;
}

CMD:leavedebugcamera(playerid, params[]) // DEBUG ONLY
{
        if(!PlayerInfo[playerid][pLogado]) return 1;
        SetCameraBehindPlayer(playerid);
        TogglePlayerControllable(playerid, 1);
        ClearAnimations(playerid, 1);

        return 1;
}

CMD:sentarmesa(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(GetPVarType(playerid, "pkrTableID") == 0)
	{
 		for(new t = 0; t < MAX_POKERTABLES; t++)
 		{
   			if(IsPlayerInRangeOfPoint(playerid, 5.0, PokerTable[t][pkrX], PokerTable[t][pkrY], PokerTable[t][pkrZ]))
   			{
   			    if(PokerTable[t][pkrVW] == GetPlayerVirtualWorld(playerid))
   			    {
	      			if(PokerTable[t][pkrPass][0] != EOS)
		  			{
	      				if(!strcmp(params, PokerTable[t][pkrPass], false, 32))
					  	{
	       					JoinPokerTable(playerid, t);
	            		}
						else
						{
	     					return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}[USE]:{FFFFFF} /sentarmesa (senha)");
	     				}
	      			}
				  	else
				  	{
	      				JoinPokerTable(playerid, t);
	      			}
         			return 1;
				}
			}
		}
	}
  	else
  	{
   		SendClientMessage(playerid, COLOR_WHITE, "Você já está numa mesa de poker! Você deve /sairmesa antes de sentar em outra mesa.");
	}
   	return 1;
}

CMD:sairmesa(playerid, params[])
{
		if(!PlayerInfo[playerid][pLogado]) return 1;
        if(GetPVarType(playerid, "pkrTableID")) {
                LeavePokerTable(playerid);
        }
        return 1;
}

CMD:debugsound(playerid, params[]) // DEBUG ONLY
{
        if(!PlayerInfo[playerid][pLogado]) return 1;
        PlayerPlaySound(playerid, strval(params), 0.0, 0.0, 0.0);
       	return 1;
}

CMD:debugtextsize(playerid, params[])
{
        if(!PlayerInfo[playerid][pLogado]) return 1;
        switch(strval(params))
        {
                case 0:
                {
                        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][37], 0.199999, 1.200000);
                }
                case 1:
                {
                        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][37], 0.189999, 1.100000);
                }
                case 2:
                {
                        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][37], 0.179999, 1.000000);
                }
                case 3:
                {
                        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][37], 0.169999, 0.90000);
                }
                case 4:
                {
                        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][37], 0.159999, 0.800000);
                }
                case 5:
                {
                        PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][37], 0.149999, 0.700000);
                }
        }
        return 1;
}


public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	SetObjectPos(objectid, fX, fY, fZ);
 	SetObjectRot(objectid, fRotX, fRotY, fRotZ);
	if(response == EDIT_RESPONSE_FINAL)
 	{
  		if(GetPVarInt(playerid, "AttachingTo") != 0)
		{
			new car = GetPVarInt(playerid, "AttachingTo");
  			SendClientMessage(playerid, 0xfce80cFF, "Finished Edition.");
   			new carslot = FindFreeObjectSlotInCar(car);
    		if(carslot != -1)
    		{
   				new Float:ofx, Float:ofy, Float:ofz, Float:ofaz;
    			new Float:finalx, Float:finaly;
    			new Float:px, Float:py, Float:pz, Float:roz;
     			GetVehiclePos(car, px, py, pz);
    			GetVehicleZAngle(car, roz);
     			ofx = fX-px;
      			ofy = fY-py;
      			ofz = fZ-pz;
      			ofaz = fRotZ-roz;
				finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
				finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);
				AttachObjectToVehicle(AttachingObjects[playerid], car, finalx, finaly, ofz, fRotX, fRotY, ofaz);
				AttachedObjects[car][carslot] = AttachingObjects[playerid];
 				DeletePVar(playerid, "AttachingTo");
 				format(string, sizeof(string), "Created in array slot %d of car %d", carslot, car);
				SendClientMessage(playerid, 0xfce80cFF, string);

				format(string, sizeof(string), "X: %f, Y: %f, Z: %f, RX: %f, RY: %f, RZ: %f", finalx, finaly, ofz, fRotX, fRotY, ofaz);
				CMDLog(string);
			}
			else
			{
				SendClientMessage(playerid, 0xfce80cFF, "No more objects can be added to the car.");
 				DestroyObject(AttachingObjects[playerid]);
 				DeletePVar(playerid, "AttachingTo");
			}
		}
  	}
  	return 1;
}
forward CMDLog(stringss[]);
public CMDLog(stringss[])
{
    new entry[128],readfile[128];

	format(entry, sizeof(entry), "[AOBJ] %s: %s\n", stringss);
	format(readfile, sizeof(readfile), "debug/DebugObj.log");
	new File: hFile = fopen(readfile, io_append);
	if(!hFile) return 1; // Do not saved a corrupt file.
	fwrite(hFile, entry);
	fclose(hFile);
	return 1;
}
//==============================================================================
// 								EMPREGO DE MECANICO
//==============================================================================
CMD:rodas(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está logado!");
	if(PlayerInfo[playerid][pJob] != JOB_MECANICO) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um mecânico.");
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você precisa estar dentro do veículo.");
	ShowWheels(playerid);
	OutrasInfos[playerid][oModRod] = 1;
 	return 1;
}
forward PertoGuincho(playerid);
public PertoGuincho(playerid)
{
	new winner = -1; new Float:windistance = 9999999.0;
	new Float:X, Float:Y, Float:Z;
	for(new i = 0; i < MAX_CA_VEHICLES; i ++)
	{
	    if(VehicleInfo[i][vVehicle] > -1)
	    {
            if(VehicleInfo[i][vOwner] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pChaveEmprestada] == VehicleInfo[i][vID])
	    	{
	        	if(VehicleInfo[i][vModel] == 525)
		    	{
					GetVehiclePos(VehicleInfo[i][vVehicle],X,Y,Z);
					new Float:distance = GetDistanceToPoint(playerid,X,Y,Z);
					if(distance < windistance && distance < 30.0)
					{
			    		winner = VehicleInfo[i][vVehicle];
			    		windistance = distance;
					}
				}
			}
		}
	}
	return winner;
}
CMD:reparar(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está logado!");
    new veh = GetPlayerVehicleID(playerid);

    if (IsPlayerInRangeOfPoint (playerid, 10, 2507.6438,-1551.7308,24.0324) || IsPlayerInRangeOfPoint( playerid, 5, 1720.7937,-1578.8098,13.5547) ) {
		if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ || FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_EB) {
		    new slot = GetVehicleSlot(veh);
		    if(slot > -1) {
	  		    if(VehicleInfo[slot][vFaction] != 1 || VehicleInfo[slot][vFaction] != 2 || VehicleInfo[slot][vFaction] != 3 || VehicleInfo[slot][vFaction] != 5) {
	  		    	SetTimerEx("ReparandoVeiculo", 5000, false, "ddd", playerid, veh, 1);
					ProxDetector(10.0, playerid, "** Um mecanico começa a reparar o veículo.",COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					return 1;
				}
			 	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Apenas veículos governamentais podem ser reparados aqui.");
	  		}
	  		else return 1;
		}
	    else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode reparar seu veículo aqui.");
	}

    if(PlayerInfo[playerid][pJob] != JOB_MECANICO) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um mecânico.");
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você precisa estar fora do veículo.");
    if(GetNearestTGarage(playerid) != -1) {
        	for (new i = 1; i != MAX_VEHICLES; i ++) {
				if (IsPlayerNearHood(playerid, i)) {
					new slot = GetVehicleSlot(i);
		 			if(slot > -1) {
		   		   		new param[7], str[256], vname[64];
		        		GetVehicleParamsEx(i,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
						if(param[4]) {
					    	if(param[0] == 0) {
					        	new totalp = 0;
					        	if(IsATruck(i)) 		if(PlayerInfo[playerid][pPecasMecanicas][5] < 10) { totalp = 10; return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 10 peças de reparo para reparar este veículo."); }
								else if(IsASUV(i)) 		if(PlayerInfo[playerid][pPecasMecanicas][5] < 8) { totalp = 8; return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 8 peças de reparo para reparar este veículo."); }
								else if(IsASportCar(i)) if(PlayerInfo[playerid][pPecasMecanicas][5] < 5) { totalp = 5; return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 5 peças de reparo para reparar este veículo."); }
								else if(IsAVan(i)) 		if(PlayerInfo[playerid][pPecasMecanicas][5] < 7) { totalp = 7; return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 7 peças de reparo para reparar este veículo."); }
								else if(IsAPopularCar(i))if(PlayerInfo[playerid][pPecasMecanicas][5] < 5) { totalp = 5; return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 5 peças de reparo para reparar este veículo."); }
								else if(IsAUnique(i)) 	if(PlayerInfo[playerid][pPecasMecanicas][5] < 12) { totalp = 12; return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 12 peças de reparo para reparar este veículo."); }
	                        	else if(IsABike(i))   	if(PlayerInfo[playerid][pPecasMecanicas][5] < 2) { totalp = 2; return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 2 peças de reparo para reparar este veículo."); }
								else if(PlayerInfo[playerid][pPecasMecanicas][5] < 3) { totalp = 3; return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 3 peças de reparo para reparar este veículo."); }
						    	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
						    	SetTimerEx("ReparandoVeiculo", 5000, false, "ddd", playerid, i, 0);
						    	PlayerInfo[playerid][pPecasMecanicas][5] = PlayerInfo[playerid][pPecasMecanicas][5]-totalp;
						    	GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
						    	format(str,sizeof(str),"** %s começa a reparar o veículo %s.", PlayerName(playerid, 1), vname);
								ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								return 1;
							}
							else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você precisa desligar o motor do veículo.");
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você precisa abrir o capo do veículo.");
		  			}
		  			else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Este veículo não pode ser reparado!");
				}
				else if(GetVehicleModel(veh) == 448 || GetVehicleModel(veh) == 461 || GetVehicleModel(veh) == 462 || GetVehicleModel(veh) == 463 || GetVehicleModel(veh) == 468 || GetVehicleModel(veh) == 471 || GetVehicleModel(veh) == 481
				|| GetVehicleModel(veh) == 521 || GetVehicleModel(veh) == 522 || GetVehicleModel(veh) == 523 || GetVehicleModel(veh) == 581 || GetVehicleModel(veh) == 568)
				{
			    	new str[256], vname[64];
			    	new slot = GetVehicleSlot(i);
					if(slot > -1)
					{
					    ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
				    	SetTimerEx("ReparandoVeiculo", 5000, false, "ddd", playerid, i, 0);
				    	PlayerInfo[playerid][pPecasMecanicas][5]--;
				    	GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
				    	format(str,sizeof(str),"** %s começa a reparar o veículo %s.", PlayerName(playerid, 1), vname);
						ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
			  		}
			  		else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Este veículo não pode ser reparado!");
				}
			}
    }
    else
    {
	    new slotew = PertoGuincho(playerid);
		if(slotew > -1)
		{
	    	for (new i = 1; i != MAX_VEHICLES; i ++)
			{
				if (IsPlayerNearHood(playerid, i))
				{
					new slot = GetVehicleSlot(i);
		 			if(slot > -1)
		  			{
		   		   		new param[7], str[256], vname[64];
		        		GetVehicleParamsEx(i,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
						if(param[4])
						{
					    	if(param[0] == 0)
					    	{
					        	new totalp = 0;
					        	if(IsATruck(i)) 		if(PlayerInfo[playerid][pPecasMecanicas][5] < 10) { totalp = 10; return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 10 peças de reparo para reparar este veículo."); }
								else if(IsASUV(i)) 		if(PlayerInfo[playerid][pPecasMecanicas][5] < 8) { totalp = 8; return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 8 peças de reparo para reparar este veículo."); }
								else if(IsASportCar(i)) if(PlayerInfo[playerid][pPecasMecanicas][5] < 5) { totalp = 5; return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 5 peças de reparo para reparar este veículo."); }
								else if(IsAVan(i)) 		if(PlayerInfo[playerid][pPecasMecanicas][5] < 7) { totalp = 7; return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 7 peças de reparo para reparar este veículo."); }
								else if(IsAPopularCar(i))if(PlayerInfo[playerid][pPecasMecanicas][5] < 5) { totalp = 5; return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 5 peças de reparo para reparar este veículo."); }
								else if(IsAUnique(i)) 	if(PlayerInfo[playerid][pPecasMecanicas][5] < 12) { totalp = 12; return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 12 peças de reparo para reparar este veículo."); }
	                        	else if(IsABike(i))   	if(PlayerInfo[playerid][pPecasMecanicas][5] < 2) { totalp = 2; return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 2 peças de reparo para reparar este veículo."); }
								else if(PlayerInfo[playerid][pPecasMecanicas][5] < 3) { totalp = 3; return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa de 3 peças de reparo para reparar este veículo."); }
						    	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
						    	SetTimerEx("ReparandoVeiculo", 5000, false, "ddd", playerid, i, 0);
						    	PlayerInfo[playerid][pPecasMecanicas][5] = PlayerInfo[playerid][pPecasMecanicas][5]-totalp;
						    	GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
						    	format(str,sizeof(str),"** %s começa a reparar o veículo %s.", PlayerName(playerid, 1), vname);
								ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								return 1;
							}
							else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você precisa desligar o motor do veículo.");
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você precisa abrir o capo do veículo.");
		  			}
		  			else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Este veículo não pode ser reparado!");
				}
				else if(GetVehicleModel(veh) == 448 || GetVehicleModel(veh) == 461 || GetVehicleModel(veh) == 462 || GetVehicleModel(veh) == 463 || GetVehicleModel(veh) == 468 || GetVehicleModel(veh) == 471 || GetVehicleModel(veh) == 481
				|| GetVehicleModel(veh) == 521 || GetVehicleModel(veh) == 522 || GetVehicleModel(veh) == 523 || GetVehicleModel(veh) == 581 || GetVehicleModel(veh) == 568)
				{
			    	new str[256], vname[64];
			    	new slot = GetVehicleSlot(i);
					if(slot > -1)
					{
					    ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 1, 0, 0, 0, 0, 1);
				    	SetTimerEx("ReparandoVeiculo", 5000, false, "ddd", playerid, i, 0);
				    	PlayerInfo[playerid][pPecasMecanicas][5]--;
				    	GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
				    	format(str,sizeof(str),"** %s começa a reparar o veículo %s.", PlayerName(playerid, 1), vname);
						ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
			  		}
			  		else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Este veículo não pode ser reparado!");
				}
			}
		}
	}
	return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a seu guincho ou a uma oficina, ou não está em frente o capo do veiculo.");
}
forward ReparandoVeiculo(playerid, vid, momento);
public ReparandoVeiculo(playerid, vid, momento)
{
	if(momento == 0)
	{
		if(!IsPlayerNearHood(playerid, vid))
		{
		    ClearAnimations(playerid, 1);
		    PlayerInfo[playerid][pPecasMecanicas][5]++;
		    SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você se afastou do capo");
		    return 1;
		}
		RepairVehicleEx(vid);
	    ClearAnimations(playerid, 1);
	    return 1;
	}
	else
	{
	    if (IsPlayerInRangeOfPoint( playerid, 5, 2507.6438,-1551.7308,24.0324) )
		{
		    RepairVehicleEx(vid);
	    	return 1;
		}
		else if (IsPlayerInRangeOfPoint( playerid, 5, 1720.7937,-1578.8098,13.5547) )
		{
        	RepairVehicleEx(vid);
	    	return 1;
		}
		else if (IsPlayerInRangeOfPoint( playerid, 5, 1093.9487, -1313.2205, 14.0851))
		{
        	RepairVehicleEx(vid);
	    	return 1;
		}
		else SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você se afastou da oficina.");



	}
	return 1;
}

stock RepairVehicleEx(vehicleid)
{
    new slot = GetVehicleSlot(vehicleid);
    if(slot > -1)
    {
        VehicleInfo[slot][vConsertando] = 5;
	}

	RepairVehicle(vehicleid);
	ResetVehicleDamage(vehicleid);
}

CMD:sairemprego(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] >= 3000)
	{
	    if(PlayerInfo[playerid][pJob] == JOB_LIXEIRO) { OnPlayerEndGarbage(playerid); }
     	SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você saiu do seu emprego.");
     	PlayerInfo[playerid][pJob] = 0;
     	PlayerInfo[playerid][pJobTempo] = 0;
	    return 1;
	}
	if(PlayerInfo[playerid][pJob] != 0)
	{
	    if(PlayerInfo[playerid][pJobTempo] == 0 || PlayerInfo[playerid][pDoador] > 0)
	    {
	        if(PlayerInfo[playerid][pJob] == JOB_LIXEIRO) { OnPlayerEndGarbage(playerid); }
	        SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você saiu do seu emprego.");
	        PlayerInfo[playerid][pJob] = 0;
	    }
		else
		{
		    new stringa[256];
		    format(stringa, sizeof(stringa), "Você ainda deve esperar %d paycheck's para sair de seu emprego.",PlayerInfo[playerid][pJobTempo]);
		    SendClientMessage(playerid, COLOR_LIGHTRED, stringa);
		    return 1;
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem um emprego.");
	return 1;
}

CMD:pegaremprego(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pJob] == 0)
	{
	    if(PlayerInfo[playerid][pJobTempo] == 0)
	    {
	    	new biz = PlayerInfo[playerid][pEntrouEmpresa];
			if(biz != -1)
			{
				if( EmpInfo[biz][eTipo] == EMP_TIPO_EMP_CENTER)
	    			return Dialog_Show(playerid, Dialog_Empregos, DIALOG_STYLE_LIST, "Empregos disponiveis", "Mecânico\nCaminhoneiro [Requisito: Veículo Próprio]\nTaxista [Requisito: Veículo Próprio]\nLixeiro\nVendedor de HotDog [Requisito: Veículo Próprio]\nPescador\nTreinador\nMotoboy [Em desenvolvimento]\nHACKER", "Selecionar", "Voltar");
			}

			if (IsPlayerInRangeOfPoint(playerid, 5, 1414.8279,-1577.5049,20.0859))
			{
			    PlayerInfo[playerid][pJob] = JOB_FALSIFICADOR;
		        SendClientMessage(playerid,COLOR_YELLOW," Agora você é um falsificador, utilize /ajudaemprego para mais informações.");
				PlayerInfo[playerid][pJobTempo] = 5;
		        return 1;
			}

   			SetPlayerCheckpoint(playerid, -206.7139,1212.2993,19.8906, 3.0);
			cp_target[playerid] = 1;
			SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está na Agencia de Empregos ou em um ponto de emprego.");
			return 1;
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você já tem um emprego. Use /sairemprego antes de pegar outro.");
    return 1;
}

Dialog:Dialog_Empregos(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
		switch(listitem)
		{
		    case 0:
		    {
		        PlayerInfo[playerid][pJob] = JOB_MECANICO;
		        SendClientMessage(playerid,COLOR_YELLOW," Agora você é um mecânico, utilize /ajudaemprego para mais informações.");


				if(PlayerInfo[playerid][pDoador] >= 2) PlayerInfo[playerid][pJobTempo] = 1;
				else PlayerInfo[playerid][pJobTempo] = 5;
		    }
		    case 1:
		    {
		    	PlayerInfo[playerid][pJob] = JOB_CAMINHONEIRO;
		        SendClientMessage(playerid,COLOR_YELLOW," Agora você é um caminhoneiro, utilize /ajudaemprego para mais informações.");
		        if(PlayerInfo[playerid][pDoador] >= 2) PlayerInfo[playerid][pJobTempo] = 1;
				else PlayerInfo[playerid][pJobTempo] = 5;
		    }
		    case 2:
		    {
		    	PlayerInfo[playerid][pJob] = JOB_TAXISTA;
		        SendClientMessage(playerid,COLOR_YELLOW," Agora você é um taxista, utilize /ajudaemprego para mais informações.");
		        if(PlayerInfo[playerid][pDoador] >= 2) PlayerInfo[playerid][pJobTempo] = 1;
				else PlayerInfo[playerid][pJobTempo] = 5;
		    }
		    case 3:
		    {
		        PlayerInfo[playerid][pJob] = JOB_LIXEIRO;
		        SendClientMessage(playerid,COLOR_YELLOW," Agora você é um lixeiro, utilize /ajudaemprego para mais informações.");
		        if(PlayerInfo[playerid][pDoador] >= 2) PlayerInfo[playerid][pJobTempo] = 1;
				else PlayerInfo[playerid][pJobTempo] = 5;
		    }
		    case 4:
		    {
		        PlayerInfo[playerid][pJob] = JOB_HOTDOG;
		        SendClientMessage(playerid,COLOR_YELLOW," Agora você é um vendedor de HotDog, utilize /ajudaemprego para mais informações.");
		        if(PlayerInfo[playerid][pDoador] >= 2) PlayerInfo[playerid][pJobTempo] = 1;
				else PlayerInfo[playerid][pJobTempo] = 5;
		    }
		    case 5:
		    {
		        PlayerInfo[playerid][pJob] = JOB_PESCADOR;
		        SendClientMessage(playerid,COLOR_YELLOW," Agora você é um Pescador, utilize /ajudaemprego para mais informações.");
		        if(PlayerInfo[playerid][pDoador] >= 2) PlayerInfo[playerid][pJobTempo] = 1;
				else PlayerInfo[playerid][pJobTempo] = 5;
		    }
		    case 6:
		    {
		        PlayerInfo[playerid][pJob] = JOB_TREINADOR;
		        SendClientMessage(playerid,COLOR_YELLOW," Agora você é um treinador, utilize /ajudaemprego para mais informações.");
		        if(PlayerInfo[playerid][pDoador] >= 2) PlayerInfo[playerid][pJobTempo] = 1;
				else PlayerInfo[playerid][pJobTempo] = 5;
		    }
		    case 7:
		    {
		        PlayerInfo[playerid][pJob] = JOB_MOTOBOY;
		        SendClientMessage(playerid,COLOR_YELLOW," Agora você é um motoboy, utilize /ajudaemprego para mais informações.");
		        if(PlayerInfo[playerid][pDoador] >= 2) PlayerInfo[playerid][pJobTempo] = 1;
				else PlayerInfo[playerid][pJobTempo] = 5;
		    }
		    case 8:
		    {
		        PlayerInfo[playerid][pJob] = JOB_HACK;
		        SendClientMessage(playerid,COLOR_YELLOW," Agora você é um hack, utilize /ajudaemprego para mais informações.");
		        if(PlayerInfo[playerid][pDoador] >= 2) PlayerInfo[playerid][pJobTempo] = 1;
				else PlayerInfo[playerid][pJobTempo] = 5;
		    }
		    case 9:
		    {
		        PlayerInfo[playerid][pJob] = JOB_MOTORISTA;
		        SendClientMessage(playerid,COLOR_YELLOW," Agora você é um Motorista de Onibus, utilize /ajudaemprego para mais informações.");
		        if(PlayerInfo[playerid][pDoador] >= 2) PlayerInfo[playerid][pJobTempo] = 1;
				else PlayerInfo[playerid][pJobTempo] = 5;
		    }

		}
	}
	return 1;
}

CMD:contrabando(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	{
	   	if (IsPlayerInRangeOfPoint(playerid, 5, 1096.8484,-1528.9009,22.7434))
			Dialog_Show(playerid, DIALOG_VENDERJOIAS, DIALOG_STYLE_LIST, "Contrabando", "1x Ouro [R$2500]\n1x Prata [R$1600]\n1x Bronze [R$900]", "Vender", "Voltar");
		else {
  			SetPlayerCheckpoint(playerid, 1096.8484,-1528.9009,22.7434, 5.0);
			cp_target[playerid] = 1;
			SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está no local de contrabando.");
			return 1;
		}
	}
    return 1;
}

CMD:comprarpecas(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pJob] == JOB_MECANICO)
	{
	   	if (IsPlayerInRangeOfPoint(playerid, 5, 1096.8484,-1528.9009,22.7434))
			Dialog_Show(playerid, Dialog_CPecas, DIALOG_STYLE_LIST, "Peças de Mecanico", "1x Rádio [R$20]\n1x Neon [R$100]\n1x GPS [R$20]\n1x Immob [R$30]\n1x Tranca [R$20]\nPeças de Reparo\nBaterias", "Selecionar", "Voltar");
		else {
  			SetPlayerCheckpoint(playerid, 1096.8484,-1528.9009,22.7434, 5.0);
			cp_target[playerid] = 1;
			SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está no local de venda de peças.");
			return 1;
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é um mecanico.");
    return 1;
}

CMD:comprarplaca(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pJob] == JOB_FALSIFICADOR)
	{
	   	if (IsPlayerInRangeOfPoint(playerid, 5, 1096.8484,-1528.9009,22.7434) )
			Dialog_Show(playerid, Dialog_CPlacas, DIALOG_STYLE_LIST, "Itens para Falsificadores", "1x Placa [R$1000]", "Selecionar", "Voltar");
		else {
  			SetPlayerCheckpoint(playerid, 1096.8484,-1528.9009,22.7434, 5.0);
			cp_target[playerid] = 1;
			SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está no local de venda de placas.");
			return 1;
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é um falsificador.");
    return 1;
}

Dialog:Dialog_CPlacas(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
		switch(listitem)
		{
		    case 0:
		    {
		        if(PlayerInfo[playerid][pGranaSuja] >= 1000)
				{
					PlayerInfo[playerid][pPlacas]++;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você comprou uma Placa nova por R$1000 sujo.");
					PlayerInfo[playerid][pGranaSuja] = PlayerInfo[playerid][pGranaSuja]-1000;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem R$1000 em sua mão.");
			}
		}
	}
	return 1;
}
Dialog:DIALOG_VENDERJOIAS(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
	    new NaEmpresa = PlayerInfo[playerid][pEntrouEmpresa];

	    switch(listitem)
		{
		    case 0:
		    {
		        if(EmpInfo[NaEmpresa][eBank] >= 0)
				{
				    if(PlayerInfo[playerid][pOuro] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um Ouro.");
					PlayerInfo[playerid][pOuro]--;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[OURO] Você vendeu uma barra de ouro por R$2500.");
					PlayerInfo[playerid][pGranaSuja] = PlayerInfo[playerid][pGranaSuja]+2500;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A empresa não tem dinheiro o suficiente.");
			}
			case 1:
		    {
		        if(EmpInfo[NaEmpresa][eBank] >= 0)
		        {
		            if(PlayerInfo[playerid][pPrata] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem uma barra de prata.");

					PlayerInfo[playerid][pPrata]--;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[PRATA] Você vendeu uma barra de prata por R$1600.");
					PlayerInfo[playerid][pGranaSuja] = PlayerInfo[playerid][pGranaSuja]+1600;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A empresa não tem dinheiro o suficiente.");
			}
			case 2:
		    {
		        if(EmpInfo[NaEmpresa][eBank] >= 0)
		        {
		            if(PlayerInfo[playerid][pPrata] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem uma barra de bronze.");

					PlayerInfo[playerid][pPrata]--;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[BRONZE] Você vendeu uma barra de bronze por R$900.");
					PlayerInfo[playerid][pGranaSuja] = PlayerInfo[playerid][pGranaSuja]+900;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A empresa não tem dinheiro o suficiente.");
			}
		}
	}
	return 1;
}
Dialog:Dialog_CPecas(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
		switch(listitem)
		{
		    case 0:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 20)
				{
					PlayerInfo[playerid][pPecasMecanicas][0]++;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Peças] Você comprou um rádio por R$20.");
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-20;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 1:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 100)
		        {
					PlayerInfo[playerid][pPecasMecanicas][1]++;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Peças] Você comprou um jogo de Neon por R$100.");
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-100;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 2:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 20)
		        {
					PlayerInfo[playerid][pPecasMecanicas][2]++;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Peças] Você comprou um GPS por R$20.");
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-20;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 3:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 30)
		        {
					PlayerInfo[playerid][pPecasMecanicas][3]++;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Peças] Você comprou um Immob por R$30.");
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-30;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 4:
		    {
		        if(PlayerInfo[playerid][pGrana] >= 20)
		        {
					PlayerInfo[playerid][pPecasMecanicas][4]++;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Peças] Você comprou um Tranca por R$20.");
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-20;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");
			}
			case 5:
		    {
				Dialog_Show(playerid, Dialog_CPecas2, DIALOG_STYLE_INPUT, "Comprar Peças", "Digite a quantidade de peças que você deseja comprar.\n\nValor por peça: R$20", "Comprar", "Cancelar");
		        /*if(PlayerInfo[playerid][pGrana] >= 20)
                {
					PlayerInfo[playerid][pPecasMecanicas][5]++;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Peças] Você comprou um Peça de Reparo por R$20.");
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-20;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");*/
			}
			case 6:
		    {
				Dialog_Show(playerid, Dialog_CPecas3, DIALOG_STYLE_INPUT, "Comprar bateria", "Digite a quantidade de bateria que você deseja comprar.\n\nValor por peça: R$20", "Comprar", "Cancelar");
		        /*if(PlayerInfo[playerid][pGrana] >= 20)
                {
					PlayerInfo[playerid][pPecasMecanicas][5]++;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Peças] Você comprou um Peça de Reparo por R$20.");
					PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-20;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro o suficiente.");*/
			}
		}
	}
	return 1;
}

Dialog:Dialog_CPecas2(playerid, response, listitem, inputtext[]) {
	if(response){
	    new quantidade = strval(inputtext);
	    new precopecas = quantidade*20;

	    if(PlayerInfo[playerid][pGrana] >= 20){
            PlayerInfo[playerid][pPecasMecanicas][5] += quantidade;

            format(string, sizeof string, "Você comprou %d peças de reparo por R$%d.", quantidade, precopecas);
	        SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-precopecas;
		}
	    else {
	        format(string, sizeof string, "Você não tem R$%d para comprar %d peças.",precopecas, quantidade);
	        SendClientMessage(playerid, COLOR_LIGHTRED, string);
	    }
	}
  	return 1;
}

Dialog:Dialog_CPecas3(playerid, response, listitem, inputtext[]) {
	if(response){
	    new quantidade = strval(inputtext);
	    new precopecas = quantidade*20;

	    if(PlayerInfo[playerid][pGrana] >= 20){
            PlayerInfo[playerid][pBateria] += quantidade;

            format(string, sizeof string, "Você comprou %d baterias por R$%d.", quantidade, precopecas);
	        SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
			PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-precopecas;
		}
	    else {
	        format(string, sizeof string, "Você não tem R$%d para comprar %d baterias.",precopecas, quantidade);
	        SendClientMessage(playerid, COLOR_LIGHTRED, string);
	    }
	}
  	return 1;
}


CMD:minhasbombas(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está logado!");
	format(string,sizeof(string),"_______Peças de %s:_______", PlayerName(playerid, 0));
	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	format(string,sizeof(string),"[Dinamite (%d)], [C4 (%d)], [TNT (%d)] ", PlayerInfo[playerid][pBomba], PlayerInfo[playerid][pC4], PlayerInfo[playerid][pTNT]);
    SendClientMessage(playerid,-1,string);
    //SendClientMessage(playerid,COLOR_CINZA, "Você pode usar o comando /darbomba para entregar uma a alguém.");
	return 1;
}

CMD:minhaspecas(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está logado!");
	//if(PlayerInfo[playerid][pJob] != JOB_MECANICO && PlayerInfo[playerid][pJob] != JOB_DESMANCHE) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um mecânico.");
	format(string,sizeof(string),"_______Peças de %s:_______", PlayerName(playerid, 0));
	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	format(string,sizeof(string),"[Rádio (%d)] [Neon (%d)] [GPS (%d)]", PlayerInfo[playerid][pPecasMecanicas][0], PlayerInfo[playerid][pPecasMecanicas][1], PlayerInfo[playerid][pPecasMecanicas][2]);
    SendClientMessage(playerid,-1,string);
    format(string,sizeof(string),"[Immob (%d)] [Tranca (%d)] [Peça de Reparo (%d)]", PlayerInfo[playerid][pPecasMecanicas][3], PlayerInfo[playerid][pPecasMecanicas][4], PlayerInfo[playerid][pPecasMecanicas][5]);
    SendClientMessage(playerid,-1,string);
    SendClientMessage(playerid,COLOR_CINZA, "Você pode usar o comando /darpeca para entregar uma a alguém.");
	return 1;
}

CMD:darbomba(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está logado!");
	new option[12],
		other = -1,
		quant;

	if (sscanf(params, "s[12]ii",option, other, quant)) {
		SendClientMessage(playerid,COLOR_LIGHTRED, "USE: /darbomba [opcao] [playerid] [quantidade]");
		SendClientMessage(playerid,COLOR_LIGHTRED, "Opções: {FFFFFF} dinamite, c4, tnt");
		return 1;
	}
	else {
	    if(other < 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Player inválido.");
	    if(quant < 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Quantidade inválida.");
	    if(other == playerid) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode se entregar.");
	    if(!PlayerInfo[other][pLogado]) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está logado!");
     	if(GetDistanceBetweenPlayers(playerid,other) > 7.5) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está perto deste jogador.");

	    if(strcmp(option, "dinamite", true) == 0){
		    if(PlayerInfo[playerid][pBomba] >= quant) {
            	PlayerInfo[other][pBomba] += quant;
            	PlayerInfo[playerid][pBomba] -= quant;

            	format(string,sizeof(string),"%s lhe entregou %d dinamites.", PlayerName(playerid, 1), quant);
    			SendClientMessage(other, COLOR_LIGHTGREEN, string);

    			format(string,sizeof(string),"Você entregou %d dinamites para %s.", quant, PlayerName(other, 1));
    			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
            }
            else SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de dinamites.");
		}
		if(strcmp(option, "c4", true) == 0){
		    if(PlayerInfo[playerid][pC4] >= quant) {
            	PlayerInfo[other][pC4] += quant;
            	PlayerInfo[playerid][pC4] -= quant;

            	format(string,sizeof(string),"%s lhe entregou %d artefatos de C4.", PlayerName(playerid, 1), quant);
    			SendClientMessage(other, COLOR_LIGHTGREEN, string);

    			format(string,sizeof(string),"Você entregou %d artefatos de C4 para %s.", quant, PlayerName(other, 1));
    			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
            }
            else SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de artefatos de C4.");
		}
		if(strcmp(option, "tnt", true) == 0){
		    if(PlayerInfo[playerid][pTNT] >= quant) {
            	PlayerInfo[other][pTNT] += quant;
            	PlayerInfo[playerid][pTNT] -= quant;

            	format(string,sizeof(string),"%s lhe entregou %d artefatos de TNT.", PlayerName(playerid, 1), quant);
    			SendClientMessage(other, COLOR_LIGHTGREEN, string);

    			format(string,sizeof(string),"Você entregou %d artefatos de TNT para %s.", quant, PlayerName(other, 1));
    			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
            }
            else SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de artefatos de TNT.");
		}
	}
	return 1;
}

CMD:darpeca(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está logado!");
	new option[12],
		other = -1,
		quant;

	if (sscanf(params, "s[12]ii",option, other, quant)) {
		SendClientMessage(playerid,COLOR_LIGHTRED, "USE: /darpeca [opcao] [playerid] [quantidade]");
		SendClientMessage(playerid,COLOR_LIGHTRED, "Opções: {FFFFFF}radio, neon, gps, immob, tranca, pecas");
		return 1;
	}
	else {
	    if(other < 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Player inválido.");
	    if(quant < 0) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Quantidade inválida.");
	    if(other == playerid) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode se entregar.");
	    if(!PlayerInfo[other][pLogado]) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está logado!");
     	if(GetDistanceBetweenPlayers(playerid,other) > 7.5) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está perto deste jogador.");

	    if(strcmp(option, "radio", true) == 0){
		    if(PlayerInfo[playerid][pPecasMecanicas][0] >= quant) {
            	PlayerInfo[other][pPecasMecanicas][0] += quant;
            	PlayerInfo[playerid][pPecasMecanicas][0] -= quant;

            	format(string,sizeof(string),"%s lhe entregou %d rádios.", PlayerName(playerid, 1), quant);
    			SendClientMessage(other, COLOR_LIGHTGREEN, string);

    			format(string,sizeof(string),"Você entregou %d rádios para %s.", quant, PlayerName(other, 1));
    			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
            }
            else SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de rádios.");
		}
		if(strcmp(option, "neon", true) == 0){
		    if(PlayerInfo[playerid][pPecasMecanicas][1] >= quant) {
            	PlayerInfo[other][pPecasMecanicas][1] += quant;
            	PlayerInfo[playerid][pPecasMecanicas][1] -= quant;

            	format(string,sizeof(string),"%s lhe entregou %d peças de neon.", PlayerName(playerid, 1), quant);
    			SendClientMessage(other, COLOR_LIGHTGREEN, string);

    			format(string,sizeof(string),"Você entregou %d peças de neon para %s.", quant, PlayerName(other, 1));
    			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
            }
            else SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de peças de neon.");
		}
		if(strcmp(option, "gps", true) == 0){
		    if(PlayerInfo[playerid][pPecasMecanicas][2] >= quant) {
            	PlayerInfo[other][pPecasMecanicas][2] += quant;
            	PlayerInfo[playerid][pPecasMecanicas][2] -= quant;

            	format(string,sizeof(string),"%s lhe entregou %d peças de gps.", PlayerName(playerid, 1), quant);
    			SendClientMessage(other, COLOR_LIGHTGREEN, string);

    			format(string,sizeof(string),"Você entregou %d peças de gps para %s.", quant, PlayerName(other, 1));
    			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
            }
            else SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de peças de gps.");
		}
		if(strcmp(option, "immob", true) == 0){
		    if(PlayerInfo[playerid][pPecasMecanicas][3] >= quant) {
            	PlayerInfo[other][pPecasMecanicas][3] += quant;
            	PlayerInfo[playerid][pPecasMecanicas][3] -= quant;

            	format(string,sizeof(string),"%s lhe entregou %d peças de immob.", PlayerName(playerid, 1), quant);
    			SendClientMessage(other, COLOR_LIGHTGREEN, string);

    			format(string,sizeof(string),"Você entregou %d peças de immob para %s.", quant, PlayerName(other, 1));
    			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
            }
            else SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de peças de immob.");
		}
		if(strcmp(option, "tranca", true) == 0){
		    if(PlayerInfo[playerid][pPecasMecanicas][4] >= quant) {
            	PlayerInfo[other][pPecasMecanicas][4] += quant;
            	PlayerInfo[playerid][pPecasMecanicas][4] -= quant;

            	format(string,sizeof(string),"%s lhe entregou %d tranca(s).", PlayerName(playerid, 1), quant);
    			SendClientMessage(other, COLOR_LIGHTGREEN, string);

    			format(string,sizeof(string),"Você entregou %d tranca(s) para %s.", quant, PlayerName(other, 1));
    			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
            }
            else SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de tranca(s).");
		}
		if(strcmp(option, "pecas", true) == 0){
		    if(PlayerInfo[playerid][pPecasMecanicas][5] >= quant) {
            	PlayerInfo[other][pPecasMecanicas][5] += quant;
            	PlayerInfo[playerid][pPecasMecanicas][5] -= quant;

            	format(string,sizeof(string),"%s lhe entregou %d peças de reparo.", PlayerName(playerid, 1), quant);
    			SendClientMessage(other, COLOR_LIGHTGREEN, string);

    			format(string,sizeof(string),"Você entregou %d peças de reparo para %s.", quant, PlayerName(other, 1));
    			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
            }
            else SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem tudo isso de peças de reparo.");
		}
	}
	return 1;
}

CMD:instalar(playerid,params[])
{
	if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está logado!");
	if(PlayerInfo[playerid][pJob] != JOB_MECANICO) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um mecânico.");
	if( GetNearestTGarage( playerid ) == -1 ) return SCM(playerid, COLOR_LIGHTRED, "Você não está em uma oficina.");

    new idx = 0;
	new tmp[256];
	tmp = strtok(params,idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /instalar [bateria / radio / gps / imob / neon / tranca]");
		return 1;
	}
	if(strcmp(tmp,"bateria",true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new veh = GetPlayerVehicleID(playerid);
	        new slot = GetVehicleSlot(veh);
	        if(slot > -1)
	        {
    		   	if(PlayerInfo[playerid][pBateria] > 0)
			    {
           			new tmp2[32];
					tmp2 = strtok(params,idx);
     				if(!strlen(tmp2))
				 	{
					 	SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /instalar [bateria] [level 50, 70 e 100]");
					 	return 1;
				 	}
					new level = strval(tmp2);
      				if(level < 50 || level > 100) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} O level não pode ser menor que 50 ou maior que 100.");
          			if(PlayerInfo[playerid][pBateria] == 3) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem bateria o suficiente.");
					PlayerInfo[playerid][pBateria] -= 3;
					VehicleInfo[slot][vBateria] = level;
                    new vname[64], str[256];
                    GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
                    format(str,sizeof(str),"** %s instala uma nova bateria nivel %i no veiculo %s.", PlayerName(playerid, 1), level, vname);
					ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    SaveVehicle(slot);
					//SetTimerEx("BateriaCarro2", 100, false, "d", playerid);
     				return 1;
		      	}
		      	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem peças do tipo 'bateria' para instalar.");
	        }
	        else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode instalar baterias neste veiculo");
	    }
	    else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está dentro de um veículo");
	}
	if(strcmp(tmp,"tranca",true) == 0)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new veh = GetPlayerVehicleID(playerid);
	        new slot = GetVehicleSlot(veh);
	        if(slot > -1)
	        {
    		   	if(PlayerInfo[playerid][pPecasMecanicas][4] > 0)
			    {
           			new tmp2[32];
					tmp2 = strtok(params,idx);
     				if(!strlen(tmp2))
				 	{
					 	SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /instalar [tranca] [level 1~4]");
					 	SendClientMessage(playerid,COLOR_CINZA,"Para cada nivel é uma peça");
					 	return 1;
				 	}
				 	new level = strval(tmp2);
      				if(level < 1 || level > 4) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} O level não pode ser menor que 1 ou maior que 4.");
          			if(PlayerInfo[playerid][pPecasMecanicas][4] < level) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem 4 peças de trancas.");
                    PlayerInfo[playerid][pPecasMecanicas][4] -= level;
                    VehicleInfo[slot][vLock] = level;
                    new vname[64], str[256];
                    GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
                    format(str,sizeof(str),"** %s instala novas trancas nivel %d no veiculo %s.", PlayerName(playerid, 1), level, vname);
					ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    SaveVehicle(slot);
     				return 1;
		      	}
		      	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem peças do tipo 'tranca' para instalar.");
	        }
	        else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode instalar tracas neste veiculo");
	    }
	    else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está dentro de um veículo");
	}
	if(strcmp(tmp,"imob",true) == 0)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
		    for (new i = 1; i != MAX_VEHICLES; i ++) if (IsPlayerNearHood(playerid, i))
			{
			  	new slot = GetVehicleSlot(i);
			  	if(slot > -1)
			  	{
      				new tmp2[32];
					tmp2 = strtok(params,idx);
     				if(!strlen(tmp2))
				 	{
					 	SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} /instalar immob [level(1 - 4)]");
					 	SendClientMessage(playerid,-1,"{C5C3C1}[Gastos] Level 1: 1 Peça, Level 2: 2 Peças, Level 3: 3 Peças, Level 4: 4 Peças.");
					 	return 1;
				 	}
				 	new level = strval(tmp2);
      				if(level < 1 || level > 4) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} O level não pode ser menor que 1 ou maior que 4.");
          			if(PlayerInfo[playerid][pPecasMecanicas][3] < level) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem peças do tipo 'Imob' o suficiente.");
                    PlayerInfo[playerid][pPecasMecanicas][3] -= level;
					VehicleInfo[slot][vImmob] = level;
        			new str[256],vname[64];
        			GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
					format(str,sizeof(str),"** %s instala um imob level %d no veiculo %s.", PlayerName(playerid, 1), level, vname);
					ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SaveVehicle(slot);
					return 1;
				}
				else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode instalar imob neste veículo.");
			}
        }
	    else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você precisa estar fora do veiculo.");
	}
	if(strcmp(tmp,"neon",true) == 0)
	{
	    if(!IsPlayerInAnyVehicle(playerid))
	    {
	        for (new i = 1; i != MAX_VEHICLES; i ++) if (IsPlayerNearHood(playerid, i))
			{
			  	new slot = GetVehicleSlot(i);
			  	if(slot > -1)
			  	{
			  	    if(PlayerInfo[playerid][pPecasMecanicas][1] > 0)
			  	    {
	         			ShowPlayerDialog(playerid,DIALOG_BUYNEON,DIALOG_STYLE_LIST,"Escolha a cor do Neon","Vermelho\nAzul\nVerde\nAmarelo\nPink\nBranco","Confirmar","Cancelar");
						return 1;
			  	    }
			  	    else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma peça do tipo 'neon' para instalar.");
			  	}
			  	else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Este veiculo não aceita luzes de neon.");
			}
			SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a nenhum capo!");
		}
		else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você precisa estar fora do veiculo.");
	}
	if(strcmp(tmp,"radio",true) == 0)
	{
	    if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você precisa estar dentro do veiculo.");
		new veh = GetPlayerVehicleID(playerid);
	  	new slot = GetVehicleSlot(veh);
	  	if(slot > -1)
	  	{
	  	    if(PlayerInfo[playerid][pPecasMecanicas][0] > 0)
	  	    {
				if(!VehicleInfo[slot][vRadio])
				{
					VehicleInfo[slot][vRadio] = 1;
					new vname[64], str[256];
					GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
	    			format(str,sizeof(str),"** %s instala um rádio no veiculo %s.", PlayerName(playerid, 1), vname);
					ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	       			PlayerInfo[playerid][pPecasMecanicas][0]--;
	            	SaveVehicle(slot);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{C5C3C1} Este veiculo já tem um rádio.");
          	}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{C5C3C1} Você não possui um rádio para instalar.");
	  	}
	  	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode instalar um rádio neste veículo.");
	}
	if(strcmp(tmp,"gps",true) == 0)
	{
		if(!IsPlayerInAnyVehicle(playerid))
	    {
	        for (new i = 1; i != MAX_VEHICLES; i ++) if (IsPlayerNearHood(playerid, i))
			{
		        new slot = GetVehicleSlot(i);
		        if(slot > -1)
		        {
		            new param[7];
		            GetVehicleParamsEx(i,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
					if(param[4])
					{
		         		if(PlayerInfo[playerid][pPecasMecanicas][2] > 0)
		           		{
		             		if(!VehicleInfo[slot][vGps])
		               		{
		               		    PlayerInfo[playerid][pPecasMecanicas][2]--;
		                     	VehicleInfo[slot][vGps] = 1;
		                      	new vname[64],str[256];
								GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
			    				format(str,sizeof(str),"** %s instala um GPS no veiculo %s.", PlayerName(playerid, 1), vname);
								ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);
								SetTimerEx("StopAnimSV", 2000, false, "d", playerid);
		                      	SaveVehicle(slot);
								return 1;
		      				}
		          			else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você já possui um GPS neste veículo.");
						}
						else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não possui um GPS para instalar.");
	                }
		        	else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você precisa abrir o capo do veículo antes.");
				}
		        else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode instalar um GPS neste veiculo.");
			}
			SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a nenhum capo!");
		}
	    else return SendClientMessage(playerid,COLOR_LIGHTRED,"USE:{C5C3C1} Você precisa estar fora do veiculo.");
	}
	return 1;
}
forward StopAnimSV(playerid);
public StopAnimSV(playerid)
{
    ClearAnimations(playerid, 1);
    return 1;
}
stock GetVehicleFromBehind(vehicleid)
{
	static
	    Float:fCoords[7];

	GetVehiclePos(vehicleid, fCoords[0], fCoords[1], fCoords[2]);
	GetVehicleZAngle(vehicleid, fCoords[3]);

	for (new i = 1; i != MAX_VEHICLES; i ++) if (i != vehicleid && GetVehiclePos(i, fCoords[4], fCoords[5], fCoords[6]))
	{
		if (floatabs(fCoords[0] - fCoords[4]) < 6 && floatabs(fCoords[1] - fCoords[5]) < 6 && floatabs(fCoords[2] - fCoords[6]) < 6)
			return i;
	}
	return INVALID_VEHICLE_ID;
}
stock IsPlayerNearHood(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleHood(vehicleid, fX, fY, fZ);
	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ);
}

stock GetVehicleHood(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	static
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] + (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] + (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

stock IsPlayerNearBoot(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleBoot(vehicleid, fX, fY, fZ);
	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ);
}

stock GetVehicleBoot(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
 		return (x = 0.0, y = 0.0, z = 0.0), 0;

	static
		Float:pos[7]
	;
 	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
 	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
 	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] - (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

stock ShowWheels(playerid)
{
	PlayerTextDrawShow(playerid, Wheels[playerid][0]);
 	PlayerTextDrawShow(playerid, Wheels[playerid][1]);
  	PlayerTextDrawShow(playerid, Wheels[playerid][2]);
	PlayerTextDrawShow(playerid, Wheels[playerid][3]);
 	PlayerTextDrawShow(playerid, Wheels[playerid][4]);
 	PlayerTextDrawShow(playerid, Wheels[playerid][5]);
 	PlayerTextDrawShow(playerid, Wheels[playerid][6]);
 	PlayerTextDrawShow(playerid, Wheels[playerid][7]);
 	PlayerTextDrawShow(playerid, Wheels[playerid][8]);
 	PlayerTextDrawShow(playerid, Wheels[playerid][9]);
  	PlayerTextDrawShow(playerid, Wheels[playerid][10]);
   	PlayerTextDrawShow(playerid, Wheels[playerid][11]);
   	PlayerTextDrawShow(playerid, Wheels[playerid][12]);
   	PlayerTextDrawShow(playerid, Wheels[playerid][13]);
   	PlayerTextDrawShow(playerid, Wheels[playerid][14]);
   	PlayerTextDrawShow(playerid, Wheels[playerid][15]);
   	PlayerTextDrawShow(playerid, Wheels[playerid][20]);

	PlayerTextDrawShow(playerid, Wheels[playerid][22]);
 	PlayerTextDrawSetString(playerid, Wheels[playerid][22], "Prox ~g~>");
  	PlayerTextDrawShow(playerid, Wheels[playerid][21]);
   	Page[playerid] = 1;

	SelectTextDraw(playerid,0xFFFFFFFF);
 	return 1;
}
stock HideWheels(playerid)
{
	PlayerTextDrawHide(playerid, Wheels[playerid][0]);
 	PlayerTextDrawHide(playerid, Wheels[playerid][1]);
  	PlayerTextDrawHide(playerid, Wheels[playerid][2]);
   	PlayerTextDrawHide(playerid, Wheels[playerid][3]);
    PlayerTextDrawHide(playerid, Wheels[playerid][4]);
    PlayerTextDrawHide(playerid, Wheels[playerid][5]);
    PlayerTextDrawHide(playerid, Wheels[playerid][6]);
    PlayerTextDrawHide(playerid, Wheels[playerid][7]);
    PlayerTextDrawHide(playerid, Wheels[playerid][8]);
    PlayerTextDrawHide(playerid, Wheels[playerid][9]);
    PlayerTextDrawHide(playerid, Wheels[playerid][10]);
    PlayerTextDrawHide(playerid, Wheels[playerid][11]);
    PlayerTextDrawHide(playerid, Wheels[playerid][12]);
    PlayerTextDrawHide(playerid, Wheels[playerid][13]);
    PlayerTextDrawHide(playerid, Wheels[playerid][14]);
    PlayerTextDrawHide(playerid, Wheels[playerid][15]);
    PlayerTextDrawHide(playerid, Wheels[playerid][16]);
    PlayerTextDrawHide(playerid, Wheels[playerid][17]);
    PlayerTextDrawHide(playerid, Wheels[playerid][18]);
    PlayerTextDrawHide(playerid, Wheels[playerid][19]);
    PlayerTextDrawHide(playerid, Wheels[playerid][20]);
    PlayerTextDrawHide(playerid, Wheels[playerid][21]);
    PlayerTextDrawHide(playerid, Wheels[playerid][22]);
    Page[playerid] = 0;
    OutrasInfos[playerid][oModRod] = 0;
    CancelSelectTextDraw(playerid);
    return 1;
}
stock ShowPage2(playerid)
{
	PlayerTextDrawHide(playerid, Wheels[playerid][3]);
    PlayerTextDrawHide(playerid, Wheels[playerid][4]);
    PlayerTextDrawHide(playerid, Wheels[playerid][5]);
    PlayerTextDrawHide(playerid, Wheels[playerid][6]);
    PlayerTextDrawHide(playerid, Wheels[playerid][7]);
    PlayerTextDrawHide(playerid, Wheels[playerid][8]);
    PlayerTextDrawHide(playerid, Wheels[playerid][9]);
    PlayerTextDrawHide(playerid, Wheels[playerid][10]);
    PlayerTextDrawHide(playerid, Wheels[playerid][11]);
    PlayerTextDrawHide(playerid, Wheels[playerid][12]);
    PlayerTextDrawHide(playerid, Wheels[playerid][13]);
    PlayerTextDrawHide(playerid, Wheels[playerid][14]);
    PlayerTextDrawHide(playerid, Wheels[playerid][15]);

	PlayerTextDrawShow(playerid, Wheels[playerid][16]);
	PlayerTextDrawShow(playerid, Wheels[playerid][17]);
	PlayerTextDrawShow(playerid, Wheels[playerid][18]);
	PlayerTextDrawShow(playerid, Wheels[playerid][19]);

	PlayerTextDrawSetString(playerid, Wheels[playerid][22], "Ant ~g~<");
 	PlayerTextDrawShow(playerid, Wheels[playerid][22]);
 	Page[playerid] = 2;
	return 1;
}
stock ShowPage1(playerid)
{
    PlayerTextDrawShow(playerid, Wheels[playerid][3]);
    PlayerTextDrawShow(playerid, Wheels[playerid][4]);
    PlayerTextDrawShow(playerid, Wheels[playerid][5]);
    PlayerTextDrawShow(playerid, Wheels[playerid][6]);
    PlayerTextDrawShow(playerid, Wheels[playerid][7]);
    PlayerTextDrawShow(playerid, Wheels[playerid][8]);
    PlayerTextDrawShow(playerid, Wheels[playerid][9]);
    PlayerTextDrawShow(playerid, Wheels[playerid][10]);
    PlayerTextDrawShow(playerid, Wheels[playerid][11]);
    PlayerTextDrawShow(playerid, Wheels[playerid][12]);
    PlayerTextDrawShow(playerid, Wheels[playerid][13]);
    PlayerTextDrawShow(playerid, Wheels[playerid][14]);
    PlayerTextDrawShow(playerid, Wheels[playerid][15]);

	PlayerTextDrawHide(playerid, Wheels[playerid][16]);
 	PlayerTextDrawHide(playerid, Wheels[playerid][17]);
 	PlayerTextDrawHide(playerid, Wheels[playerid][18]);
 	PlayerTextDrawHide(playerid, Wheels[playerid][19]);

	PlayerTextDrawSetString(playerid, Wheels[playerid][22], "Prox ~g~>");
	PlayerTextDrawShow(playerid, Wheels[playerid][22]);
	Page[playerid] = 1;

	return 1;
}
//=====================================================================================================================================//
//  	Outras Public's - Outras Public's - Outras Public's - Outras Public's - Outras Public's - Outras Public's - Outras Public's
//=====================================================================================================================================//
public OnPlayerWeaponShot( playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ )
{
	    new idArma = PlayerInfo[playerid][pArmaMao];

	    if(weaponid > 21 && weaponid < 35) {
		    if(TazerPlayer[playerid] == 1 && weaponid == 23 && weaponid == 25) {
			    SCM(playerid, COLOR_LIGHTGREEN, "-> Recarregando taser/Calibre 12.");
			    SetPVarInt(playerid, "TempoTaser", 5);
			}
		    //Anti Bullet Crasher
		    if(!((22 <= weaponid <= 34) || weaponid == 38 || weaponid > 46)) {
			    new hour, mins, sec;
				new d,m,y;
				new DataSalvar[32];
				getdate(y,m,d);
				gettime(hour,mins,sec);
			    new strh[24], hourstr[4], minstr[4], secstr[4];
				if(hour < 10) { format(hourstr,sizeof(hourstr),"0%d",hour); } else { format(hourstr,sizeof(hourstr),"%d",hour); }
				if(mins < 10) { format(minstr,sizeof(minstr),"0%d",mins); } else { format(minstr,sizeof(minstr),"%d",mins); }
				if(sec < 10) { format(secstr,sizeof(secstr),"0%d",sec); } else { format(secstr,sizeof(secstr),"%d",sec); }
				format(strh,sizeof(strh),"%s:%s:%s",hourstr,minstr,secstr);
				format(DataSalvar,sizeof(DataSalvar),"%d-%d-%d - %s",d,m,y,strh);
		        new stringip[28];
				format(stringip, sizeof(stringip), "IP: %s", PrintPlayerIP(playerid));
			    new str2[256];
				format(str2,sizeof(str2),"INSERT INTO a_kickrec (PlayerNome,PlayerID,Data,Motivo,Admin,IP) VALUES ('%s','%d','%s','Anti Bullet Crash','Sistema','%s')",PlayerName(playerid,0),PlayerInfo[playerid][pID],DataSalvar,stringip);
				mysql_function_query(Pipeline, str2, false, "noReturnQuery", "");
				Kick(playerid);
				return 1;
			}

			if(PlayerInfo[playerid][pArmaMao] == 0) {
			    if(TazerPlayer[playerid] == 0) {
				    TogglePlayerControllable(playerid, false);
			  		format(string, sizeof(string), "[ANTI-CHEAT] %s [%d] foi banido por tentar criar arma(s).", PlayerName(playerid, 0), playerid);
					SendAdminMessage(COLOR_LIGHTRED,string);
					SendClientMessage(playerid, -1, "<!> O anti-cheat de armas está ativo.");
			        PlayerInfo[playerid][pBanido] = 1;

					print(string);
					//========================================
				  	DesarmandoPlayer[playerid] = 2;
					ResetPlayerWeapons(playerid);
					//SetPlayerAmmo(playerid, weaponid, 0);
					PlayerInfo[playerid][pArmaMao] = 0;
					RemovePlayerAttachedObject(playerid, 0);
					//=======================================
			  		Banir(PrintPlayerIP(playerid),GetUserName(playerid),PlayerInfo[playerid][pID], "Anti Cheat","Weapon Hack");
			        SetTimerEx("TimerKick", 500, 0, "d", playerid);
			        return 1;
				}
			}

		    //new GunAmmo = GetPlayerAmmo(playerid);
		    if(weaponid != 0) {
		        if( TazerPlayer[playerid] == 0) {
				    if(ArmaData[idArma][ArmaModelo] != GetPlayerWeapon(playerid) && weaponid != 46) {
					    TogglePlayerControllable(playerid, false);
			  			format(string, sizeof(string), "[ANTI-CHEAT] %s [%d] está tentando criar arma(s).", PlayerName(playerid, 0), playerid);
						SendAdminMessage(-1,string);
						SendClientMessage(playerid, -1, "<!> O anti-cheat de armas está ativo.");

						print(string);
						//========================================
					    DesarmandoPlayer[playerid] = 2;
						ResetPlayerWeapons(playerid);
						//SetPlayerAmmo(playerid, weaponid, 0);
						PlayerInfo[playerid][pArmaMao] = 0;
						RemovePlayerAttachedObject(playerid, 0);
						//========================================
						return 1;
					}
					if(weaponid > 21 && weaponid <  40) {
					    if(ArmaData[idArma][ArmaAmmo] <= 0) {
					        if(PlayerInfo[playerid][pAdmin] < 3000) {
						        TogglePlayerControllable(playerid, false);
								format(string, sizeof(string), "[ANTI-CHEAT] %s [%d] está tentando criar munição.", PlayerName(playerid, 0), playerid);
								SendAdminMessage(-1,string);
								SendClientMessage(playerid, -1, "<!> O anti-cheat de munições está ativo.");

								print(string);
								//========================================
							    DesarmandoPlayer[playerid] = 2;
								ResetPlayerWeapons(playerid);
								PlayerInfo[playerid][pArmaMao] = 0;
								RemovePlayerAttachedObject(playerid, 0);
								//========================================
								return 1;
							}
					    }
		   			 	else {
							ArmaData[idArma][ArmaAmmo]--;
				     		new GunAmmo = GetPlayerAmmo(playerid);
							if(GunAmmo > ArmaData[idArma][ArmaAmmo]+2)
						    	SetPlayerAmmo(playerid, weaponid, ArmaData[idArma][ArmaAmmo]);
						}
					}
				}
			}
		}

		new Float:pos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		new VwAtt = GetPlayerVirtualWorld(playerid);

		if(weaponid > 21 && weaponid < 39)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(i != playerid)
				{
				    if(GetPlayerVirtualWorld(i) == VwAtt)
				    {
				        new inter = GetPlayerInterior(i);
						if(inter == 0)
						{
							if(AvisoTiroOuvido[i][weaponid] == 0)
							{
								if(weaponid == 23)
								{
								    if(TazerPlayer[playerid] == 1)
								    {
									    if(IsPlayerInRangeOfPoint(i, 50.0, pos[0], pos[1], pos[2]))
				      					{
				           					new location[MAX_ZONE_NAME];
											Get2DZone(location, TOTAL_ZONE_NAME, pos[0], pos[1], pos[2]);

										  	format(string, sizeof(string), "* Possivel ouvir barulhos de Taser *", location);
									    	SendClientMessage(i, COLOR_PURPLE, string);
									   		AvisoTiroOuvido[i][weaponid] = 60;
										}
									}
									else
									{
									    if(IsPlayerInRangeOfPoint(i, 50.0, pos[0], pos[1], pos[2]))
				      					{
				           					new location[MAX_ZONE_NAME];
											Get2DZone(location, TOTAL_ZONE_NAME, pos[0], pos[1], pos[2]);

										  	format(string, sizeof(string), "* Possivel ouvir barulhos de tiros de %s vindos de %s *", GunNames[weaponid], location);
									    	SendClientMessage(i, COLOR_PURPLE, string);
									   		AvisoTiroOuvido[i][weaponid] = 60;
										}
									}
								}
								else
								{
									if(IsPlayerInRangeOfPoint(i, 300.0, pos[0], pos[1], pos[2]))
			      					{
			           					new location[MAX_ZONE_NAME];
										Get2DZone(location, TOTAL_ZONE_NAME, pos[0], pos[1], pos[2]);

									  	format(string, sizeof(string), "* Possivel ouvir barulhos de tiros de %s vindos de %s *", GunNames[weaponid], location);
								    	SendClientMessage(i, COLOR_PURPLE, string);
								   		AvisoTiroOuvido[i][weaponid] = 60;
									}
								}
							}
						}
						else
						{
						    if(AvisoTiroOuvido[i][weaponid] == 0)
							{
							    if(weaponid == 23)
								{
									if(IsPlayerInRangeOfPoint(i, 50.0, pos[0], pos[1], pos[2]))
			      					{
			           					new location[MAX_ZONE_NAME];
										Get2DZone(location, TOTAL_ZONE_NAME, pos[0], pos[1], pos[2]);

									  	format(string, sizeof(string), "* Possivel ouvir barulhos de tiros de %s *", GunNames[weaponid]);
								    	SendClientMessage(i, COLOR_PURPLE, string);
								   		AvisoTiroOuvido[i][weaponid] = 60;
									}
								}
								else
								{
								    if(IsPlayerInRangeOfPoint(i, 300.0, pos[0], pos[1], pos[2]))
			      					{
			           					new location[MAX_ZONE_NAME];
										Get2DZone(location, TOTAL_ZONE_NAME, pos[0], pos[1], pos[2]);

									  	format(string, sizeof(string), "* Possivel ouvir barulhos de tiros de %s *", GunNames[weaponid]);
								    	SendClientMessage(i, COLOR_PURPLE, string);
								   		AvisoTiroOuvido[i][weaponid] = 60;
									}
								}
							}
						}
					}
				}
			}
		}
    	return 1;
}

stock TaEmUmElevador(playerid)
{
	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
    if (pos[1] > (Y_ELEVATOR_POS - 1.8) && pos[1] < (Y_ELEVATOR_POS + 1.8) && pos[0] < (X_ELEVATOR_POS + 1.8) && pos[0] > (X_ELEVATOR_POS - 1.8)) { return true; }
    else if(pos[1] < -1301.4 && pos[1] > -1303.2417 && pos[0] < 1786.2131 && pos[0] > 1784.1555) { return true; }
	else if (pos[1] > (Y_ELEVATOR_POS2 - 1.8) && pos[1] < (Y_ELEVATOR_POS2 + 1.8) && pos[0] < (X_ELEVATOR_POS2 + 1.8) && pos[0] > (X_ELEVATOR_POS2 - 1.8)) { return true; }
	else return false;
}
//=====================================================================================================================================//
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if( _:playertextid == INVALID_TEXT_DRAW)
	{
	    CancelSelectTextDraw(playerid);
	}
	if(playertextid == Wheels[playerid][3])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1073);
    }
    if(playertextid == Wheels[playerid][4])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1074);
    }
    if(playertextid == Wheels[playerid][5])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1075);
    }
    if(playertextid == Wheels[playerid][6])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1076);
    }
    if(playertextid == Wheels[playerid][7])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1077);
    }
    if(playertextid == Wheels[playerid][8])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1078);
    }
    if(playertextid == Wheels[playerid][9])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1079);
    }
    if(playertextid == Wheels[playerid][10])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1080);
    }
    if(playertextid == Wheels[playerid][11])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1081);
    }
    if(playertextid == Wheels[playerid][12])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1082);
    }
    if(playertextid == Wheels[playerid][13])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1083);
    }
    if(playertextid == Wheels[playerid][14])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1084);
    }
    if(playertextid == Wheels[playerid][15])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1085);
    }
    if(playertextid == Wheels[playerid][16])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1025);
    }
    if(playertextid == Wheels[playerid][17])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1096);
    }
    if(playertextid == Wheels[playerid][18])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1097);
    }
    if(playertextid == Wheels[playerid][19])
    {
        if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "Você não está em um veículo.");
        new vehid = GetPlayerVehicleID(playerid);
        AddVehicleComponent(vehid, 1098);
    }
    if(playertextid == Wheels[playerid][21])
    {
        HideWheels(playerid);
    }
    if(playertextid == Wheels[playerid][22])
    {
    	if(Page[playerid] == 1)
        {
            ShowPage2(playerid);
        }
        else if(Page[playerid] == 2)
        {
            ShowPage1(playerid);
        }
	}
	new tableid = GetPVarInt(playerid, "pkrTableID")-1;
	if(playertextid == PlayerPokerUI[playerid][38])
    {
    	switch(GetPVarInt(playerid, "pkrActionOptions"))
     	{
      		case 1: // Raise
      		{
        		PokerRaiseHand(playerid);
        		PokerTable[tableid][pkrRotations] = 0;
          	}
			case 2: // Call
			{
				PokerCallHand(playerid);
			}
			case 3: // Check
			{
				PokerCheckHand(playerid);
				PokerRotateActivePlayer(tableid);
			}
		}
	}
	if(playertextid == PlayerPokerUI[playerid][39])
    {
		switch(GetPVarInt(playerid, "pkrActionOptions"))
		{
			case 1: // Check
			{
   				PokerCheckHand(playerid);
       			PokerRotateActivePlayer(tableid);
          	}
           	case 2: // Raise
            {
            	PokerRaiseHand(playerid);
             	PokerTable[tableid][pkrRotations] = 0;
			}
			case 3: // Fold
			{
				PokerFoldHand(playerid);
				PokerRotateActivePlayer(tableid);
			}
		}
	}
	if(playertextid == PlayerPokerUI[playerid][40])
    {
		switch(GetPVarInt(playerid, "pkrActionOptions"))
		{
			case 1: // Fold
			{
				PokerFoldHand(playerid);
				PokerRotateActivePlayer(tableid);
			}
   			case 2: // Fold
 			{
   				PokerFoldHand(playerid);
        		PokerRotateActivePlayer(tableid);
        	}
		}
    }
	if(playertextid == PlayerPokerUI[playerid][41]) // LEAVE
    {
		if(GetPVarType(playerid, "pkrTableID"))
		{
			LeavePokerTable(playerid);
		}
    }
    //Tunning
    if( playertextid == TuningBuy[ playerid ][ 7 ] )
	{ // desno
 		if( !IsPlayerInAnyVehicle( playerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Você não está em um veículo." );
   		if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Você não está no banco do motorista." );
     	if( TPInfo[ playerid ][ tPaintjob ] == false )
 		{
      		new compid = -1, vehicleid = GetPlayerVehicleID( playerid );
        	for( new i = ( TPInfo[ playerid ][ tID ]+1 ); i < MAX_COMPONENTS; i++ ) {
         		if( cInfo[ i ][ cType ] == TPInfo[ playerid ][ tType ] ) {
           			if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
              			compid = i;
                 		break;
                   	}
      			}
   			}
      		if( compid == -1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Não há nenhuma modificação compativel com o modelo de seu veículo." );
        	RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );
			TPInfo[ playerid ][ tID ] = compid;
			format( globalstring, sizeof( globalstring ), "%s", cInfo[ compid ][ cName ] );
   			PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
      		format( globalstring, sizeof( globalstring ), "pecas: ~w~%d", cInfo[ compid ][ cPrice ] );
        	PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
       		AddVehicleComponent( vehicleid, cInfo[ compid ][ cID ] );
			SelectTextDraw( playerid, COLOR_ORANGE );
   		}
     	else if( TPInfo[ playerid ][ tPaintjob ] == true )
 		{
			new paintid = -1, vehicleid = GetPlayerVehicleID( playerid );
   			for( new i = ( TPInfo[ playerid ][ tID ]+1 ); i < NUMBER_TYPE_PAINTJOB; i++ ) {
      			if( pjInfo[ i ][ vehID ] == GetVehicleModel( vehicleid ) ) {
         			paintid = i;
            		break;
            	}
            }
            if( paintid == -1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Não há nenhuma modificação compativel com o modelo de seu veículo." );
            TPInfo[ playerid ][ tID ] = paintid;
            format( globalstring, sizeof( globalstring ), "%s", pjInfo[ paintid ][ pName ] );
            PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
            format( globalstring, sizeof( globalstring ), "pecas: ~w~%d", pjInfo[ paintid ][ pPrice ] );
            PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
            ChangeVehiclePaintjob( vehicleid, pjInfo[ paintid ][ pNumber ] );
            SelectTextDraw( playerid, COLOR_ORANGE );
      	}
	}
 	if( playertextid == TuningBuy[ playerid ][ 8 ] )
 	{ // levo
  		if( TPInfo[ playerid ][ tPaintjob ] == false )
  		{
      		if( !IsPlayerInAnyVehicle( playerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Você não está em um veículo." );
   			if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Você não está no banco do motorista." );
			new compid = -1, vehicleid = GetPlayerVehicleID( playerid );
   			for( new i = (TPInfo[ playerid ][ tID ]-1); i > 0; i-- )
   			{
      			if( cInfo[ i ][ cType ] == TPInfo[ playerid ][ tType ] ) {
      				if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
          				compid = i;
             			break;
                	}
                 }
         	}
          	if( compid == -1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Não há nenhuma modificação compativel com o modelo de seu veículo." );
			RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );
   			TPInfo[ playerid ][ tID ] = compid;
			format( globalstring, sizeof( globalstring ), "%s", cInfo[ compid ][ cName ] );
   			PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
      		format( globalstring, sizeof( globalstring ), "pecas: ~w~%d", cInfo[ compid ][ cPrice ] );
        	PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
         	AddVehicleComponent( vehicleid, cInfo[ compid ][ cID ] );
          	SelectTextDraw( playerid, COLOR_ORANGE );
		}
  		else if( TPInfo[ playerid ][ tPaintjob ] == true )
  		{
			new paintid = -1, vehicleid = GetPlayerVehicleID( playerid );
			for( new i = (TPInfo[ playerid ][ tID ]-1); i > 0; i-- ) {
				if( pjInfo[ i ][ vehID ] == GetVehicleModel( vehicleid ) ) {
					paintid = i;
  					break;
      			}
			}
			if( paintid == -1 ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Não há nenhum PaintJob disponivel para modelo de seu veículo." );
		   	TPInfo[ playerid ][ tID ] = paintid;
		   	format( globalstring, sizeof( globalstring ), "%s", pjInfo[ paintid ][ pName ] );
		   	PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
		   	format( globalstring, sizeof( globalstring ), "pecas: ~w~%d", pjInfo[ paintid ][ pPrice ] );
		   	PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );
		   	ChangeVehiclePaintjob( vehicleid, pjInfo[ paintid ][ pNumber ] );
		   	SelectTextDraw( playerid, COLOR_ORANGE );
		}
  	}
   	if( playertextid == TuningBuy[ playerid ][ 9 ] )
   	{ // buy
    	if( !IsPlayerInAnyVehicle( playerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Você não está em um veículo." );
   		if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Você não está no banco do motorista." );
      	new Float:Pos[ 6 ], vehicleid = GetPlayerVehicleID( playerid ), veiculo = GetVehicleSlot(vehicleid);
       	if( TPInfo[ playerid ][ tPaintjob ] == false )
	   	{
			if( PlayerInfo[playerid][pPecasMecanicas][5] < cInfo[ TPInfo[ playerid ][ tID ] ][ cPrice ] ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Você não tem peças de reparo o suficiente." );
			new cid = TPInfo[ playerid ][ tID ];
			RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );
			VehicleInfo[ veiculo ][ vTuned ] = true;
			AddComponentToVehicle( vehicleid, cInfo[ cid ][ cID ] );
   			PlayerInfo[playerid][pPecasMecanicas][5] = PlayerInfo[playerid][pPecasMecanicas][5]-cInfo[TPInfo[playerid][tID]][cPrice];
		}
  		else if( TPInfo[ playerid ][ tPaintjob ] == true )
  		{
			if( PlayerInfo[playerid][pPecasMecanicas][5] < pjInfo[ TPInfo[ playerid ][ tID ] ][ pPrice ] ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Você não tem peças de reparo o suficiente." );
			new paintid = TPInfo[ playerid ][ tID ];
			VehicleInfo[ veiculo ][ vTuned ] = true;
			VehicleInfo[ veiculo ][ vPaintJob ] = pjInfo[ paintid ][ pNumber ];
			PlayerInfo[playerid][pPecasMecanicas][5] = PlayerInfo[playerid][pPecasMecanicas][5]-pjInfo[TPInfo[playerid][tID]][pPrice];
			ChangeVehicleColor( vehicleid, TPInfo[ playerid ][ PJColor ][ 0 ], TPInfo[ playerid ][ PJColor ][ 1 ] );
			ChangeVehiclePaintjob( vehicleid, pjInfo[ paintid ][ pNumber ] );
		}
  		GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 );
  		SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
  		SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
		CancelSelectTextDraw( playerid );
		TuningTDControl( playerid, false );
  		TogglePlayerControllable( playerid, true );
		SPD( playerid, dialog_TUNING, DSL, D_TOP, D_TEXT, D_OK, D_CANCEL );
  	}
   	if( playertextid == TuningBuy[ playerid ][ 13 ] )
   	{ // close
		if( !IsPlayerInAnyVehicle( playerid ) ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Você não está em um veículo." );
   		if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SendClientMessage( playerid, COLOR_LIGHTRED, "Você não está no banco do motorista." );
		new Float:Pos[ 6 ], vehicleid = GetPlayerVehicleID( playerid );
  		if( TPInfo[ playerid ][ tPaintjob ] == false )
  		{
			new slot = GetVehicleSlot(vehicleid);
			if(slot > -1)
			{
				RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );
				SetTune( vehicleid, 0, slot);
			}
   		}
     	else if( TPInfo[ playerid ][ tPaintjob ] == true )
	 	{
   			ChangeVehiclePaintjob( vehicleid, 3 );
      		ChangeVehicleColor( vehicleid, TPInfo[ playerid ][ PJColor ][ 0 ], TPInfo[ playerid ][ PJColor ][ 1 ] );
        }
        GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 );
        SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
        GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
        SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
        CancelSelectTextDraw( playerid );
        TuningTDControl( playerid, false );
        TogglePlayerControllable( playerid, true );
		SPD( playerid, dialog_TUNING, DSL, D_TOP, D_TEXT, D_OK, D_CANCEL );
  	}
  	if(playertextid == Celular_PlayerV[playerid][2])
    {
        if(CelularData[playerid][NavegandoCel] == 3 || CelularData[playerid][NavegandoCel] == 20) return 1;

        new antigoSelect = (CelularData[playerid][MenuSelecionado]+1);
		CelularData[playerid][MenuSelecionado] = 1;
		new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
		SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);

  		if(CelularData[playerid][NavegandoCel] == 5)
	    {
            new PaginaContatos = CelularData[playerid][MenuContatos],
				ContatoSelecionado = (PaginaContatos+CelularData[playerid][MenuSelecionado])-1,
				StrMsg[23];

   			if(MensagensInfo[playerid][ContatoSelecionado][smsLido] == 2)
			{
			   	format(StrMsg, 14, "%s",MensagensInfo[playerid][ContatoSelecionado][smsMensagemLimpa]);
				strcat(StrMsg, "...");
				MensagensInfo[playerid][ContatoSelecionado][smsLido] = 1;
    			PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][MenuSelect], StrMsg);
			}

			new Smsnaolidos = 0;
			for(new smss = 0; smss < 40; smss++)
			{
			    if(MensagensInfo[playerid][smss][smsLido] == 2) Smsnaolidos++;
			}
			if(Smsnaolidos == 0) TextDrawHideForPlayer(playerid,Celular_Base[13]);
		}
    }
	if(playertextid == Celular_PlayerV[playerid][3])
	{
	    new antigoSelect = (CelularData[playerid][MenuSelecionado]+1);
		CelularData[playerid][MenuSelecionado] = 2;
		new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
		SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);

	    if(CelularData[playerid][NavegandoCel] == 5)
	    {
            new PaginaContatos = CelularData[playerid][MenuContatos],
				ContatoSelecionado = (PaginaContatos+CelularData[playerid][MenuSelecionado])-1,
				StrMsg[23];

   			if(MensagensInfo[playerid][ContatoSelecionado][smsLido] == 2)
			{
			   	format(StrMsg, 14, "%s",MensagensInfo[playerid][ContatoSelecionado][smsMensagemLimpa]);
				strcat(StrMsg, "...");
				MensagensInfo[playerid][ContatoSelecionado][smsLido] = 1;
    			PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][MenuSelect], StrMsg);
			}

			new Smsnaolidos = 0;
			for(new smss = 0; smss < 40; smss++)
			{
			    if(MensagensInfo[playerid][smss][smsLido] == 2) Smsnaolidos++;
			}
			if(Smsnaolidos == 0) TextDrawHideForPlayer(playerid,Celular_Base[13]);
		}
	}
	if(playertextid == Celular_PlayerV[playerid][4])
	{
	    new antigoSelect = (CelularData[playerid][MenuSelecionado]+1);
		CelularData[playerid][MenuSelecionado] = 3;
		new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
		SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);

	    if(CelularData[playerid][NavegandoCel] == 5)
	    {
            new PaginaContatos = CelularData[playerid][MenuContatos],
				ContatoSelecionado = (PaginaContatos+CelularData[playerid][MenuSelecionado])-1,
				StrMsg[23];

   			if(MensagensInfo[playerid][ContatoSelecionado][smsLido] == 2)
			{
			   	format(StrMsg, 14, "%s",MensagensInfo[playerid][ContatoSelecionado][smsMensagemLimpa]);
				strcat(StrMsg, "...");
				MensagensInfo[playerid][ContatoSelecionado][smsLido] = 1;
    			PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][MenuSelect], StrMsg);
			}

			new Smsnaolidos = 0;
			for(new smss = 0; smss < 40; smss++)
			{
			    if(MensagensInfo[playerid][smss][smsLido] == 2) Smsnaolidos++;
			}
			if(Smsnaolidos == 0) TextDrawHideForPlayer(playerid,Celular_Base[13]);
		}
	}
	if(playertextid == Celular_PlayerV[playerid][5])
	{
	    new antigoSelect = (CelularData[playerid][MenuSelecionado]+1);
		CelularData[playerid][MenuSelecionado] = 4;
		new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
		SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);

	    if(CelularData[playerid][NavegandoCel] == 5)
	    {
            new PaginaContatos = CelularData[playerid][MenuContatos],
				ContatoSelecionado = (PaginaContatos+CelularData[playerid][MenuSelecionado])-1,
				StrMsg[23];

   			if(MensagensInfo[playerid][ContatoSelecionado][smsLido] == 2)
			{
			   	format(StrMsg, 14, "%s",MensagensInfo[playerid][ContatoSelecionado][smsMensagemLimpa]);
				strcat(StrMsg, "...");
				MensagensInfo[playerid][ContatoSelecionado][smsLido] = 1;
    			PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][MenuSelect], StrMsg);
			}

			new Smsnaolidos = 0;
			for(new smss = 0; smss < 40; smss++)
			{
			    if(MensagensInfo[playerid][smss][smsLido] == 2) Smsnaolidos++;
			}
			if(Smsnaolidos == 0) TextDrawHideForPlayer(playerid,Celular_Base[13]);
		}
	}
	if(playertextid == TelPub[playerid][0])
	{
	    CancelSelectTextDraw(playerid);
	    //FAZER LIGAÇÃO
	    new number[15], id_orelhao = CelularData[playerid][OreID];
        format(number, 13, "%s",CelularData[playerid][NumOrelhao]);
		if(number[0] == '0' && number[1] == '2' && number[2] == '4') // Usando Prefixos orelhão
		{
		    if(number[3] == '-' && number[7] == '-')
		    {
		        for(new i = 0; i < MAX_ORELHOES; i++)
		        {
		            if(TelPublico[i][orCriado] == 1)
		            {
			            if(number[4] == '8' && number[5] == '5' && number[6] == '1') return SendClientMessage(playerid, COLOR_WHITE, "Este código de área não está autorizado a receber ligações.");
			            if(TelPublico[i][orPrefixo][0] == number[4] && TelPublico[i][orPrefixo][1] == number[5] && TelPublico[i][orPrefixo][2] == number[6])
			            {
							if(TelPublico[i][orNumero][0] == number[8] && TelPublico[i][orNumero][1] == number[9] && TelPublico[i][orNumero][2] == number[10])
		    				{
		    				    if(id_orelhao == i) return SendClientMessage(playerid, COLOR_WHITE, "Você não pode ligar para o orelhão que você está usando.");
			            	    if(TelPublico[i][orUsando] == 1) return SendClientMessage(playerid, COLOR_WHITE, "O numero que você ligou no momento está ocupado.");
			            	    AnimCelular(playerid, 3);
			            	    LigarPara(playerid, i, 3, i);
			            	    TogglePlayerControllable(playerid,0);
			            	    return 1;
			            	}
						}
					}
				}
			}
			else if(number[3] != '-' && number[7] != '-')
			{
			    for(new i = 0; i < MAX_ORELHOES; i++)
		        {
		            if(TelPublico[i][orCriado] == 1)
		            {
			            if(number[3] == '8' && number[4] == '5' && number[5] == '1') return SendClientMessage(playerid, COLOR_WHITE, "Este código de área não está autorizado a receber ligações.");
			            if(TelPublico[i][orPrefixo][0] == number[3] && TelPublico[i][orPrefixo][1] == number[4] && TelPublico[i][orPrefixo][2] == number[5])
			            {
							if(TelPublico[i][orNumero][0] == number[6] && TelPublico[i][orNumero][1] == number[7] && TelPublico[i][orNumero][2] == number[8])
		    				{
		    				    if(id_orelhao == i) return SendClientMessage(playerid, COLOR_WHITE, "Você não pode ligar para o orelhão que você está usando.");
			            	    if(TelPublico[i][orUsando] == 1) return SendClientMessage(playerid, COLOR_WHITE, "O numero que você ligou no momento está ocupado.");
			            	    AnimCelular(playerid, 3);
			            	    LigarPara(playerid, i, 3, i);
			            	    TogglePlayerControllable(playerid,0);
			            	    return 1;
			            	}
						}
					}
				}
			}
		}
		new telefonefinal;

		if(strlen(number) == 8)
		{
			if(number[0] == '5' && number[1] == '5' && number[2] == '5' && number[3] == '-') // Usando Prefixo Numeros normais
			{
			    number[0] = number[4];
			    number[1] = number[5];
			    number[2] = number[6];
			    number[3] = number[7];
			    number[4] = number[8];

			    strdel(number, 5, 9);
			}
		}
		telefonefinal = strval(number);

		new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
		if(10 < FacInfo[FacId][fTipo] < 14) //Gang
		{
	 		if(telefonefinal == FacInfo[FacId][fTrafNum])
	   		{
	     		if(OutrasInfos[playerid][oTraficanteID] == 9999)
	       		{
	         		CriarTraficantes(playerid, 2);
					return 1;
				}
				else
				{
				    if(OutrasInfos[playerid][oAguardandoNewTraf] == 1) {
						SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você ainda não pode fazer outro pedido, aguarde.");
				    }
				    else {
		   				format(string, sizeof(string), "SMS: Você já tem um contato a sua espera.. Vou te mandar a localização, Remetente: %d", FacInfo[FacId][fTrafNum]);
						SCM(playerid, COLOR_YELLOW, string);
						OutrasInfos[playerid][oEntrouCheckPointTraf] = 1;

						new rand = OutrasInfos[playerid][oTraficanteRand];
						SetPlayerCheckpoint(playerid, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2], 5.0);
					}
					return 1;
				}
	        }
	   	}
	   	else if(13 < FacInfo[FacId][fTipo] < 18) //Mafia
		{
			if(telefonefinal == FacInfo[FacId][fTrafNum])
			{
			    if(OutrasInfos[playerid][oTraficanteID] == 9999)
	      		{
		    		CriarTraficantes(playerid, 1);
			    	return 1;
				}
				else
				{
	   				format(string, sizeof(string), "SMS: Você já tem um contato a sua espera.. Vou te mandar a localização, Remetente: %d", FacInfo[FacId][fTrafNum]);
					SCM(playerid, COLOR_YELLOW, string);
					OutrasInfos[playerid][oEntrouCheckPointTraf] = 1;
					new rand = OutrasInfos[playerid][oTraficanteRand];
					SetPlayerCheckpoint(playerid, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2], 5.0);
					return 1;
				}
			}
		}

		AnimCelular(playerid, 3);
		TogglePlayerControllable(playerid,0);
		LigarPara(playerid, telefonefinal, 1, id_orelhao);
	}
	return 1;
}


Dialog:Dialog_Genero(playerid, response, listitem, inputtext[])
{
    if (!response)
    {
        Dialog_Show(playerid, Dialog_Genero, DIALOG_STYLE_LIST, "Selecione seu genêro", "Masculino/nFeminino", "Selecionar", "");
    }
	else
	{
	    switch(listitem)
	    {
	    	case 0:
	    	{
    			SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Personagem] Certo, seu personagem é um Homem.");
				ShowPlayerDialog(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, "Idade", "Entre com a idade de seu personagem.", "Proximo", "Cancelar");
				PlayerInfo[playerid][pGender] = 1;
			}
			case 1:
			{
			    SendClientMessage(playerid, COLOR_LIGHTGREEN, "[Personagem] Certo, seu personagem é uma Mulher.");
				ShowPlayerDialog(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, "Idade", "Entre com a idade de seu personagem.", "Proximo", "Cancelar");
				PlayerInfo[playerid][pGender] = 2;
			}
		}
	}
	return 1;
}

//=====================================================================================================================================//
//  	Outras Stock's - Outras Stock's - Outras Stock's - Outras Stock's - Outras Stock's - Outras Stock's - Outras Stock's
//=====================================================================================================================================//
forward EnviarAnuncioDePlayer(color,strings[]);
public EnviarAnuncioDePlayer(color,strings[])
{
    foreach (Player,i)
    {
        if(PlayerInfo[i][pLogado])
		{
			if(GetPVarInt(i, "TogAnuncios") == 0)
			{
	  			SendClientMessage(i,color,strings);
		    }
		}
    }
    return 1;
}

forward SendAdminChatMessage(color,strings[]);
public SendAdminChatMessage(color,strings[])
{
    foreach (Player,i)
    {
        if(PlayerInfo[i][pLogado])
		{
			if(PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pTester] > 0)
			{
				if(GetPVarInt(i, "TogChatADM") == 0)
				{
			        SendClientMessage(i,color,strings);

					LogCMD_AM(strings);
			    }
			}
		}
    }
    return 1;
}

forward SendAdminMessage(color,strings[]);
public SendAdminMessage(color,strings[])
{
    foreach (Player,i)
    {
		if(PlayerInfo[i][pLogado])
		{
			if(PlayerInfo[i][pAdmin] > 0 || PlayerInfo[i][pTester] > 0)
			{
				if(GetPVarInt(i, "TogHa") == 0)
				{
			        SendClientMessage(i,color,strings);

			        LogCMD_AM(strings);
			    }
			}
		}
    }
    return 1;
}

forward SendFacMessage(color,fac,strings[]);
public SendFacMessage(color,fac,strings[])
{
    foreach (Player,i)
    {
        if(PlayerInfo[i][pLogado])
		{
			if(PlayerInfo[i][pFac] == fac)
			{
				if(GetPVarInt(i, "TogFacChat") == 0)
				{
			        new stringfull[192];
	                new lengths[96];
	                new length2[96];
	                strmid(stringfull, strings, 0, 192);
	                strmid(lengths, stringfull, 0, 96);
	                strmid(length2, strings, 95, 192);
	                if(strlen(strings) > 96)
	                {
	                    new message[102];
	                    format(message, 102, "%s ...", lengths);
	                    SendClientMessage(i, color, message);
	                    format(message, 102, "... %s", length2);
	                    SendClientMessage(i, color, message);
	                }
	                else
	                {
	                    new message[192];
	                    format(message, 192, "%s", strings);
	                    SendClientMessage(i, color, message);
	                }
			    }
			}
		}
    }
    LogCMD_FAC(strings);
    return 1;
}

stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(targetid, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}
stock GiveGMX()
{
	foreach(Player, i)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
			SendClientMessage(i, COLOR_LIGHTRED, "[========================================[GMX]========================================]");
			SendClientMessage(i, COLOR_ESPECIAL1, "O servidor sofrerá um GMX em instantes. Para evitar que você tome rollback, deslogue.");
			SendClientMessage(i, COLOR_ESPECIAL2, "Caso deseje, tire uma SS do seu /stats AGORA.");
			SendClientMessage(i, COLOR_ESPECIAL1, "O servidor será reiniciado (e você kickado) em trinta segundos...");
			SendClientMessage(i, COLOR_LIGHTRED, "[=====================================================================================]");
			SalvarPlayer(i);
			SaveVehicles();
    		SalvarCasas();
    		SalvarGoverno();
			SalvarFaccoes();
		}
		if (IsPlayerNPC(i)) Kick(i);
	}
	SetTimer("GMXA", 3000, 0);
}
forward GMXA();
public GMXA()
{
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
		{
			SendClientMessage(i, COLOR_YELLOW, "_________[GMX]_________");
			SendClientMessage(i, COLOR_YELLOW, "Reiniciando servidor...");
			SendClientMessage(i, COLOR_YELLOW, "_______________________");

			Kick(i);
		}
	}
	SetTimer("GMXA2", 3000, 0);
}
forward GMXA2();
public GMXA2()
{	
	GameModeExit();
    return 1;
}

forward ProxDetectorS(Float:radi, playerid, targetid);
public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		new Float:radiz = 3.0;
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radiz) && (tempposz > -radiz)))
		{
		    if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
		    {
				return 1;
			}
		}
	}
	return 0;
}

stock int_in_array( needle, array[ ], arraylength = sizeof( array ) )
{
   for( new i = 0; i < arraylength; i++ ) if( needle == array[ i ] ) return i;
   return -1;
}

forward ProxDetector(Float:radi, playerid, oioi[],col1,col2,col3,col4,col5);
public ProxDetector(Float:radi, playerid, oioi[],col1,col2,col3,col4,col5)
{
	if(!IsPlayerConnected(playerid)) return 1;
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
		{
			GetPlayerPos(i, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);
			new Float:radiz = 3.0;
			if (((tempposx < radi/15) && (tempposx > -radi/15)) && ((tempposy < radi/16) && (tempposy > -radi/17)) && ((tempposz < radiz/18) && (tempposz > -radiz/18)))
			{
                SendClientMessageA(i,col1,oioi);
			}
			else if (((tempposx < radi/6) && (tempposx > -radi/6)) && ((tempposy < radi/6) && (tempposy > -radi/6)) && ((tempposz < radiz/6) && (tempposz > -radiz/6)))
			{
				SendClientMessageA(i, col2, oioi);
			}
			else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radiz/4) && (tempposz > -radiz/4)))
			{
				SendClientMessageA(i, col3, oioi);
			}
			else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radiz/2) && (tempposz > -radiz/2)))
			{
				SendClientMessageA(i, col4, oioi);
			}
			else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radiz) && (tempposz > -radiz)))
			{
				SendClientMessageA(i, col5, oioi);
			}
		}
	}
	return 1;
}

forward ProxDetectorJanela(Float:radi, playerid, oioi[],col1,col2,col3,col4,col5);
public ProxDetectorJanela(Float:radi, playerid, oioi[],col1,col2,col3,col4,col5)
{
	if(!IsPlayerConnected(playerid)) return 1;
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);

	if(IsPlayerInAnyVehicle(playerid))
	{
     	if(IsAWindowCar(playerid))
	    {
			new veh = GetPlayerVehicleID(playerid);
			new slot = GetVehicleSlot(veh);
			if(slot > -1)
			{
				new param[4];
				GetVehicleParamsCarWindows(veh, param[0], param[1], param[2], param[3]);
				if((param[0] != 0 && param[1] != 0 && param[2] != 0 && param[3] != 0)) //Janelas Fechadas
				{
	   				foreach(Player, i)
					{
						if(IsPlayerConnected(i))
						{
		    				if(GetPlayerVehicleID(i) == veh)
						    {
		        				format(string, 256, "[JANELA FECHADA] %s",oioi);
						        SendClientMessageA(i,col1,string);
						    }
						}
					}
					return 1;
				}
			}
		}
	}

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
		{
			GetPlayerPos(i, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);
			new Float:radiz = 3.0;

			if (((tempposx < radi/15) && (tempposx > -radi/15)) && ((tempposy < radi/16) && (tempposy > -radi/17)) && ((tempposz < radiz/18) && (tempposz > -radiz/18)))
			{
                SendClientMessageA(i,col1,oioi);
			}
			else if (((tempposx < radi/6) && (tempposx > -radi/6)) && ((tempposy < radi/6) && (tempposy > -radi/6)) && ((tempposz < radiz/6) && (tempposz > -radiz/6)))
			{
				SendClientMessageA(i, col2, oioi);
			}
			else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radiz/4) && (tempposz > -radiz/4)))
			{
				SendClientMessageA(i, col3, oioi);
			}
			else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radiz/2) && (tempposz > -radiz/2)))
			{
				SendClientMessageA(i, col4, oioi);
			}
			else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radiz) && (tempposz > -radiz)))
			{
				SendClientMessageA(i, col5, oioi);
			}
		}
	}
	return 1;
}

forward ProxDetectorG(Float:radi, playerid, oioi[],col1,col2,col3,col4,col5);
public ProxDetectorG(Float:radi, playerid, oioi[],col1,col2,col3,col4,col5)
{
	if(!IsPlayerConnected(playerid)) return 1;
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
		{
			GetPlayerPos(i, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);
			if (((tempposx < radi/15) && (tempposx > -radi/15)) && ((tempposy < radi/16) && (tempposy > -radi/17)) && ((tempposz < radi/18) && (tempposz > -radi/18)))
			{
                SendClientMessageA(i,col1,oioi);
			}
			else if (((tempposx < radi/6) && (tempposx > -radi/6)) && ((tempposy < radi/6) && (tempposy > -radi/6)) && ((tempposz < radi/6) && (tempposz > -radi/6)))
			{
				SendClientMessageA(i, col2, oioi);
			}
			else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
			{
				SendClientMessageA(i, col3, oioi);
			}
			else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
			{
				SendClientMessageA(i, col4, oioi);
			}
			else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
			{
				SendClientMessageA(i, col5, oioi);
			}
		}
	}
	return 1;
}

forward ProxDetectorNP(Float:radi, playerid, oioi[],col1,col2,col3,col4,col5);
public ProxDetectorNP(Float:radi, playerid, oioi[],col1,col2,col3,col4,col5)
{
	if(!IsPlayerConnected(playerid)) return 1;
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(i != playerid)
	    {
		    if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
			{
				GetPlayerPos(i, posx, posy, posz);
				tempposx = (oldposx -posx);
				tempposy = (oldposy -posy);
				tempposz = (oldposz -posz);
				if (((tempposx < radi/15) && (tempposx > -radi/15)) && ((tempposy < radi/16) && (tempposy > -radi/17)) && ((tempposz < radi/18) && (tempposz > -radi/18)))
				{
	                SendClientMessageA(i,col1,oioi);
				}
				else if (((tempposx < radi/6) && (tempposx > -radi/6)) && ((tempposy < radi/6) && (tempposy > -radi/6)) && ((tempposz < radi/6) && (tempposz > -radi/6)))
				{
					SendClientMessageA(i, col2, oioi);
				}
				else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
				{
					SendClientMessageA(i, col3, oioi);
				}
				else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
				{
					SendClientMessageA(i, col4, oioi);
				}
				else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				{
					SendClientMessageA(i, col5, oioi);
				}
			}
		}
	}
	return 1;
}
//====================================================================================================================================
stock Elevator_Initialize3()
{
	Obj_Elevator3 			= CreateObject(18755, X_ELEVATOR_POS3, Y_ELEVATOR_POS3, GROUND_Z_COORD3, 0.000000, 0.000000, 80.000000);
	Obj_ElevatorDoors3[0] 	= CreateObject(18757, X_ELEVATOR_POS3, Y_ELEVATOR_POS3, GROUND_Z_COORD3, 0.000000, 0.000000, 80.000000);
	Obj_ElevatorDoors3[1] 	= CreateObject(18756, X_ELEVATOR_POS3, Y_ELEVATOR_POS3, GROUND_Z_COORD3, 0.000000, 0.000000, 80.000000);

	Label_Elevator3 = CreateDynamic3DTextLabel("{CCCCCC}Pressione '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' para utilizar o elevador", 0xCCCCCCAA, X_ELEVATOR_POS3 + 1.6, Y_ELEVATOR_POS3 - 1.85, GROUND_Z_COORD3 - 0.4, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

	new Float:z;

	for (new i; i < sizeof(Obj_FloorDoors3); i ++)
	{
	    Obj_FloorDoors3[i][0] 	= CreateObject(18757, X_ELEVATOR_POS3, Y_ELEVATOR_POS3 - 0.245, GetDoorsZCoordForFloor3(i) + 0.05, 0.000000, 0.000000, 80.000000);
		Obj_FloorDoors3[i][1] 	= CreateObject(18756, X_ELEVATOR_POS3, Y_ELEVATOR_POS3 - 0.245, GetDoorsZCoordForFloor3(i) + 0.05, 0.000000, 0.000000, 80.000000);

		format(string, sizeof(string), "{CCCCCC}[%s]\n{CCCCCC}Pressione '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' para chamar o elevador", FloorNames3[i]);

		z = GetDoorsZCoordForFloor3(i);

		Label_Floors3[i] = CreateDynamic3DTextLabel(string, 0xCCCCCCAA, X_ELEVATOR_POS3 + 2, Y_ELEVATOR_POS3 -3, z - 0.2, 10.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}
	Floor_OpenDoors3(0);
	Elevator_OpenDoors3();
	return 1;
}

stock Elevator_Destroy3()
{
	DestroyObject(Obj_Elevator3);
	DestroyObject(Obj_ElevatorDoors3[0]);
	DestroyObject(Obj_ElevatorDoors3[1]);

	if (IsValidDynamic3DTextLabel(Label_Elevator3))
		DestroyDynamic3DTextLabel(Label_Elevator3);

	for(new i; i < sizeof(Obj_FloorDoors3); i ++)
	{
	    DestroyObject(Obj_FloorDoors3[i][0]);
		DestroyObject(Obj_FloorDoors3[i][1]);
		if (IsValidDynamic3DTextLabel(Label_Floors3[i]))
			DestroyDynamic3DTextLabel(Label_Floors3[i]);
	}

	return 1;
}

stock Elevator_OpenDoors3()
{
	new Float:x, Float:y, Float:z;

	GetObjectPos(Obj_ElevatorDoors3[0], x, y, z);
	MoveObject(Obj_ElevatorDoors3[0], X_DOOR_L_OPENED3, Y_DOOR_L_OPENED3, z, DOORS_SPEED3);
	MoveObject(Obj_ElevatorDoors3[1], X_DOOR_R_OPENED3, Y_DOOR_R_OPENED3, z, DOORS_SPEED3);

	return 1;
}

stock Elevator_CloseDoors3()
{
    if(ElevatorState3 == ELEVATOR_STATE_MOVING)
	    return 0;

    new Float:x, Float:y, Float:z;

	GetObjectPos(Obj_ElevatorDoors3[0], x, y, z);
	MoveObject(Obj_ElevatorDoors3[0], X_ELEVATOR_POS3, Y_ELEVATOR_POS3, z, DOORS_SPEED3);
	MoveObject(Obj_ElevatorDoors3[1], X_ELEVATOR_POS3, Y_ELEVATOR_POS3, z, DOORS_SPEED3);

	return 1;
}

stock Floor_OpenDoors3(floorid)
{
    // Opens the doors at the specified floor.

    MoveObject(Obj_FloorDoors3[floorid][0], X_FDOOR_L_OPENED3, Y_FDOOR_L_OPENED3, GetDoorsZCoordForFloor3(floorid) + 0.05, DOORS_SPEED3);
	MoveObject(Obj_FloorDoors3[floorid][1], X_FDOOR_R_OPENED3, Y_FDOOR_R_OPENED3, GetDoorsZCoordForFloor3(floorid) + 0.05, DOORS_SPEED3);

	PlaySoundForPlayersInRange(6401, 50.0, X_ELEVATOR_POS3, Y_ELEVATOR_POS3, GetDoorsZCoordForFloor3(floorid) + 5.0);

	return 1;
}

stock Floor_CloseDoors3(floorid)
{
    // Closes the doors at the specified floor.

    MoveObject(Obj_FloorDoors3[floorid][0], X_ELEVATOR_POS3, Y_ELEVATOR_POS3 - 0.245, GetDoorsZCoordForFloor3(floorid) + 0.05, DOORS_SPEED3);
	MoveObject(Obj_FloorDoors3[floorid][1], X_ELEVATOR_POS3, Y_ELEVATOR_POS3 - 0.245, GetDoorsZCoordForFloor3(floorid) + 0.05, DOORS_SPEED3);

	PlaySoundForPlayersInRange(6401, 50.0, X_ELEVATOR_POS3, Y_ELEVATOR_POS3, GetDoorsZCoordForFloor3(floorid) + 5.0);

	return 1;
}

stock Elevator_MoveToFloor3(floorid)
{
	// Moves the elevator to specified floor (doors are meant to be already closed).

	ElevatorState3 = ELEVATOR_STATE_MOVING;
	ElevatorFloor3 = floorid;

	// Move the elevator slowly, to give time to clients to sync the object surfing. Then, boost it up:
	MoveObject(Obj_Elevator3, X_ELEVATOR_POS3, Y_ELEVATOR_POS3, GetElevatorZCoordForFloor3(floorid), 0.25);
    MoveObject(Obj_ElevatorDoors3[0], X_ELEVATOR_POS3, Y_ELEVATOR_POS3, GetDoorsZCoordForFloor3(floorid), 0.25);
    MoveObject(Obj_ElevatorDoors3[1], X_ELEVATOR_POS3, Y_ELEVATOR_POS3, GetDoorsZCoordForFloor3(floorid), 0.25);

    if (IsValidDynamic3DTextLabel(Label_Elevator3))
    	DestroyDynamic3DTextLabel(Label_Elevator3);

	ElevatorBoostTimer3 = SetTimerEx("Elevator_Boost3", 2000, 0, "i", floorid);

	return 1;
}

public Elevator_Boost3(floorid)
{
	// Increases the elevator's speed until it reaches 'floorid'
	StopObject(Obj_Elevator3);
	StopObject(Obj_ElevatorDoors3[0]);
	StopObject(Obj_ElevatorDoors3[1]);

	MoveObject(Obj_Elevator3, X_ELEVATOR_POS3, Y_ELEVATOR_POS3, GetElevatorZCoordForFloor3(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors3[0], X_ELEVATOR_POS3, Y_ELEVATOR_POS3, GetDoorsZCoordForFloor3(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors3[1], X_ELEVATOR_POS3, Y_ELEVATOR_POS3, GetDoorsZCoordForFloor3(floorid), ELEVATOR_SPEED);

	return 1;
}

public Elevator_TurnToIdle3()
{
	ElevatorState3 = ELEVATOR_STATE_IDLE3;
	ReadNextFloorInQueue3();

	return 1;
}

stock RemoveFirstQueueFloor3()
{
	// Removes the data in ElevatorQueue[0], and reorders the queue accordingly.

	for(new i; i < sizeof(ElevatorQueue3) - 1; i ++)
	    ElevatorQueue3[i] = ElevatorQueue3[i + 1];

	ElevatorQueue3[sizeof(ElevatorQueue3) - 1] = INVALID_FLOOR;

	return 1;
}

stock AddFloorToQueue3(floorid)
{
	new slot = -1;
	for(new i; i < sizeof(ElevatorQueue3); i ++)
	{
	    if(ElevatorQueue3[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue3[slot] = floorid;

     	// If needed, move the elevator.
	    if(ElevatorState3 == ELEVATOR_STATE_IDLE)
	        ReadNextFloorInQueue3();

	    return 1;
	}

	return 0;
}

stock ResetElevatorQueue3()
{
	// Resets the queue.

	for(new i; i < sizeof(ElevatorQueue3); i ++)
	{
	    ElevatorQueue3[i] 	= INVALID_FLOOR;
	    FloorRequestedBy3[i] = INVALID_PLAYER_ID;
	}

	return 1;
}

stock IsFloorInQueue3(floorid)
{
	// Checks if the specified floor is currently part of the queue.

	for(new i; i < sizeof(ElevatorQueue3); i ++)
	    if(ElevatorQueue3[i] == floorid)
	        return 1;

	return 0;
}

stock ReadNextFloorInQueue3()
{
	// Reads the next floor in the queue, closes doors, and goes to it.

	if(ElevatorState3 != ELEVATOR_STATE_IDLE || ElevatorQueue3[0] == INVALID_FLOOR)
	    return 0;

	Elevator_CloseDoors3();
	Floor_CloseDoors3(ElevatorFloor3);

	return 1;
}

stock DidPlayerRequestElevator3(playerid)
{
	for(new i; i < sizeof(FloorRequestedBy3); i ++)
	    if(FloorRequestedBy3[i] == playerid)
	        return 1;

	return 0;
}

stock ShowElevatorDialog3(playerid)
{
	new stringa[256];
	for(new i; i < sizeof(ElevatorQueue3); i ++)
	{
	    if(FloorRequestedBy3[i] != INVALID_PLAYER_ID)
	        strcat(stringa, "{FF0000}");

	    strcat(stringa, FloorNames3[i]);
	    strcat(stringa, "\n");
	}

	ShowPlayerDialog(playerid, DIALOG_ID3, DIALOG_STYLE_LIST, "Elevador...", stringa, "Selecionar", "Cancelar");

	return 1;
}

stock CallElevator3(playerid, floorid)
{
	if(FloorRequestedBy3[floorid] != INVALID_PLAYER_ID || IsFloorInQueue3(floorid))
	    return 0;

	FloorRequestedBy3[floorid] = playerid;
	AddFloorToQueue3(floorid);

	return 1;
}

stock Float:GetElevatorZCoordForFloor3(floorid)
{
	// Return Z height value
    return (GROUND_Z_COORD3 + FloorZOffsets3[floorid]);
}

stock Float:GetDoorsZCoordForFloor3(floorid)
{
    // Return Z height value
	return (GROUND_Z_COORD3 + FloorZOffsets3[floorid]);
}
//====================================================================================================================================
stock Elevator_Initialize()
{
	// Create the elevator and elevator door objects
	Obj_Elevator 			= CreateObject(18755, X_ELEVATOR_POS, Y_ELEVATOR_POS, GROUND_Z_COORD + ELEVATOR_OFFSET, 0.000000, 0.000000, 0.000000);
	Obj_ElevatorDoors[0] 	= CreateObject(18757, X_ELEVATOR_POS, Y_ELEVATOR_POS, GROUND_Z_COORD + ELEVATOR_OFFSET, 0.000000, 0.000000, 0.000000);
	Obj_ElevatorDoors[1] 	= CreateObject(18756, X_ELEVATOR_POS, Y_ELEVATOR_POS, GROUND_Z_COORD + ELEVATOR_OFFSET, 0.000000, 0.000000, 0.000000);

    // Create the 3D text label for inside the elevator
	Label_Elevator = CreateDynamic3DTextLabel("{CCCCCC}Pressione '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' para chamar o elevador", 0xCCCCCCAA, X_ELEVATOR_POS - 1.7, Y_ELEVATOR_POS - 1.75, GROUND_Z_COORD - 0.4, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

	// Create variables
	new strings[128], Float:z;

	// Loop
	for (new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    // Create elevator floor door objects
	    Obj_FloorDoors[i][0] 	= CreateObject(18757, X_ELEVATOR_POS - 0.245, Y_ELEVATOR_POS, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 0.000000);
		Obj_FloorDoors[i][1] 	= CreateObject(18756, X_ELEVATOR_POS - 0.245, Y_ELEVATOR_POS, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 0.000000);

		// Format strings for the floor 3D text label
		format(strings, sizeof(strings), "{CCCCCC}[%s]\n{CCCCCC}Pressione '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' para chamar o elevador", FloorNames[i]);

		// Get label Z position
		z = GetDoorsZCoordForFloor(i);

		// Create floor label
		Label_Floors[i] = CreateDynamic3DTextLabel(strings, 0xCCCCCCAA, X_ELEVATOR_POS - 2.5, Y_ELEVATOR_POS - 2.5, z - 0.2, 10.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}

	// Open the car park floor doors and the elevator doors
	Floor_OpenDoors(0);
	Elevator_OpenDoors();

    // Exit here
	return 1;
}

stock Elevator_Destroy()
{
	// Destroys the elevator.

	DestroyObject(Obj_Elevator);
	DestroyObject(Obj_ElevatorDoors[0]);
	DestroyObject(Obj_ElevatorDoors[1]);

	if (IsValidDynamic3DTextLabel(Label_Elevator))
		DestroyDynamic3DTextLabel(Label_Elevator);

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    DestroyObject(Obj_FloorDoors[i][0]);
		DestroyObject(Obj_FloorDoors[i][1]);

		if (IsValidDynamic3DTextLabel(Label_Floors[i]))
			DestroyDynamic3DTextLabel(Label_Floors[i]);
	}

	return 1;
}

stock Elevator_OpenDoors()
{
	// Opens the elevator's doors.

	new Float:x, Float:y, Float:z;

	GetObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveObject(Obj_ElevatorDoors[0], x, Y_DOOR_L_OPENED, z, DOORS_SPEED);
	MoveObject(Obj_ElevatorDoors[1], x, Y_DOOR_R_OPENED, z, DOORS_SPEED);

	return 1;
}

stock Elevator_CloseDoors()
{
    // Closes the elevator's doors.

    if(ElevatorState == ELEVATOR_STATE_MOVING)
	    return 0;

    new Float:x, Float:y, Float:z;

	GetObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveObject(Obj_ElevatorDoors[0], x, Y_DOOR_CLOSED, z, DOORS_SPEED);
	MoveObject(Obj_ElevatorDoors[1], x, Y_DOOR_CLOSED, z, DOORS_SPEED);

	return 1;
}

stock Floor_OpenDoors(floorid)
{
    // Opens the doors at the specified floor.

    MoveObject(Obj_FloorDoors[floorid][0], X_ELEVATOR_POS - 0.245, Y_DOOR_L_OPENED, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveObject(Obj_FloorDoors[floorid][1], X_ELEVATOR_POS - 0.245, Y_DOOR_R_OPENED, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	PlaySoundForPlayersInRange(6401, 50.0, X_ELEVATOR_POS, Y_ELEVATOR_POS, GetDoorsZCoordForFloor(floorid) + 5.0);

	return 1;
}

stock Floor_CloseDoors(floorid)
{
    // Closes the doors at the specified floor.

    MoveObject(Obj_FloorDoors[floorid][0], X_ELEVATOR_POS - 0.245, Y_ELEVATOR_POS, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveObject(Obj_FloorDoors[floorid][1], X_ELEVATOR_POS - 0.245, Y_ELEVATOR_POS, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	PlaySoundForPlayersInRange(6401, 50.0, X_ELEVATOR_POS, Y_ELEVATOR_POS, GetDoorsZCoordForFloor(floorid) + 5.0);

	return 1;
}

stock Elevator_MoveToFloor(floorid)
{
	// Moves the elevator to specified floor (doors are meant to be already closed).

	ElevatorState = ELEVATOR_STATE_MOVING;
	ElevatorFloor = floorid;

	// Move the elevator slowly, to give time to clients to sync the object surfing. Then, boost it up:
	MoveObject(Obj_Elevator, X_ELEVATOR_POS, Y_ELEVATOR_POS, GetElevatorZCoordForFloor(floorid), 0.25);
    MoveObject(Obj_ElevatorDoors[0], X_ELEVATOR_POS, Y_ELEVATOR_POS, GetDoorsZCoordForFloor(floorid), 0.25);
    MoveObject(Obj_ElevatorDoors[1], X_ELEVATOR_POS, Y_ELEVATOR_POS, GetDoorsZCoordForFloor(floorid), 0.25);

    if (IsValidDynamic3DTextLabel(Label_Elevator))
    	DestroyDynamic3DTextLabel(Label_Elevator);

	ElevatorBoostTimer = SetTimerEx("Elevator_Boost", 2000, 0, "i", floorid);

	return 1;
}

public Elevator_Boost(floorid)
{
	// Increases the elevator's speed until it reaches 'floorid'
	StopObject(Obj_Elevator);
	StopObject(Obj_ElevatorDoors[0]);
	StopObject(Obj_ElevatorDoors[1]);

	MoveObject(Obj_Elevator, X_ELEVATOR_POS, Y_ELEVATOR_POS, GetElevatorZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors[0], X_ELEVATOR_POS, Y_ELEVATOR_POS, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors[1], X_ELEVATOR_POS, Y_ELEVATOR_POS, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);

	return 1;
}

public Elevator_TurnToIdle()
{
	ElevatorState = ELEVATOR_STATE_IDLE;
	ReadNextFloorInQueue();

	return 1;
}

stock RemoveFirstQueueFloor()
{
	// Removes the data in ElevatorQueue[0], and reorders the queue accordingly.

	for(new i; i < sizeof(ElevatorQueue) - 1; i ++)
	    ElevatorQueue[i] = ElevatorQueue[i + 1];

	ElevatorQueue[sizeof(ElevatorQueue) - 1] = INVALID_FLOOR;

	return 1;
}

stock AddFloorToQueue(floorid)
{
 	// Adds 'floorid' at the end of the queue.

	// Scan for the first empty space:
	new slot = -1;
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(ElevatorQueue[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue[slot] = floorid;

     	// If needed, move the elevator.
	    if(ElevatorState == ELEVATOR_STATE_IDLE)
	        ReadNextFloorInQueue();

	    return 1;
	}

	return 0;
}

stock ResetElevatorQueue()
{
	// Resets the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    ElevatorQueue[i] 	= INVALID_FLOOR;
	    FloorRequestedBy[i] = INVALID_PLAYER_ID;
	}

	return 1;
}

stock IsFloorInQueue(floorid)
{
	// Checks if the specified floor is currently part of the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	    if(ElevatorQueue[i] == floorid)
	        return 1;

	return 0;
}

stock ReadNextFloorInQueue()
{
	// Reads the next floor in the queue, closes doors, and goes to it.

	if(ElevatorState != ELEVATOR_STATE_IDLE || ElevatorQueue[0] == INVALID_FLOOR)
	    return 0;

	Elevator_CloseDoors();
	Floor_CloseDoors(ElevatorFloor);

	return 1;
}

stock DidPlayerRequestElevator(playerid)
{
	for(new i; i < sizeof(FloorRequestedBy); i ++)
	    if(FloorRequestedBy[i] == playerid)
	        return 1;

	return 0;
}

stock ShowElevatorDialog(playerid)
{
	new strings[512];
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(FloorRequestedBy[i] != INVALID_PLAYER_ID)
	        strcat(strings, "{FF0000}");

	    strcat(strings, FloorNames[i]);
	    strcat(strings, "\n");
	}

	ShowPlayerDialog(playerid, DIALOG_ID, DIALOG_STYLE_LIST, "Elevador...", strings, "Selecionar", "Cancelar");

	return 1;
}

stock CallElevator(playerid, floorid)
{
	// Calls the elevator (also used with the elevator dialog).

	if(FloorRequestedBy[floorid] != INVALID_PLAYER_ID || IsFloorInQueue(floorid))
	    return 0;

	FloorRequestedBy[floorid] = playerid;
	AddFloorToQueue(floorid);

	return 1;
}

stock Float:GetElevatorZCoordForFloor(floorid)
{
    // Return Z height value plus a small offset
    return (GROUND_Z_COORD + FloorZOffsets[floorid] + ELEVATOR_OFFSET);
}

stock Float:GetDoorsZCoordForFloor(floorid)
{
	// Return Z height value plus a small offset
	return (GROUND_Z_COORD + FloorZOffsets[floorid] + ELEVATOR_OFFSET);
}
//==============================================================================
stock Elevator_Initialize1()
{
	// Initializes the elevator.

	Obj_Elevator1 			= CreateObject(18755, 1786.678100, -1303.459472, GROUND_Z_COORD1 + ELEVATOR_OFFSET1, 0.000000, 0.000000, 270.000000);
	Obj_Elevator1Doors1[0] 	= CreateObject(18757, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD1, 0.000000, 0.000000, 270.000000);
	Obj_Elevator1Doors1[1] 	= CreateObject(18756, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD1, 0.000000, 0.000000, 270.000000);

	Label_Elevator1          = CreateDynamic3DTextLabel("{CCCCCC}Pressione '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' para chamar o elevador", 0xCCCCCCAA, 1784.9822, -1302.0426, 13.6491, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

	new Float:z;

	for(new i; i < sizeof(Obj_FloorDoors1); i ++)
	{
	    Obj_FloorDoors1[i][0] 	= CreateObject(18757, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor1(i), 0.000000, 0.000000, 270.000000);
		Obj_FloorDoors1[i][1] 	= CreateObject(18756, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor1(i), 0.000000, 0.000000, 270.000000);

		format(string, sizeof(string), "{CCCCCC}[%s]\n{CCCCCC}Pressione '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' para chamar o elevador", FloorNames1[i]);

		if(i == 0)
		    z = 13.4713;
		else
		    z = 13.4713 + 8.7396 + ((i-1) * 5.45155);

		Label_Floors1[i]         = CreateDynamic3DTextLabel(string, 0xCCCCCCAA, 1783.9799, -1300.7660, z, 10.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
		// Label_Elevator1, Text3D:Label_Floors1[21];
	}

	// Open ground floor doors:
	Floor_OpenDoors1(0);
	Elevator_OpenDoors1();

	return 1;
}

stock Elevator_Destroy1()
{
	// Destroys the elevator.

	DestroyObject(Obj_Elevator1);
	DestroyObject(Obj_Elevator1Doors1[0]);
	DestroyObject(Obj_Elevator1Doors1[1]);

	if (IsValidDynamic3DTextLabel(Label_Elevator1))
		DestroyDynamic3DTextLabel(Label_Elevator1);

	for(new i; i < sizeof(Obj_FloorDoors1); i ++)
	{
	    DestroyObject(Obj_FloorDoors1[i][0]);
		DestroyObject(Obj_FloorDoors1[i][1]);

		if (IsValidDynamic3DTextLabel(Label_Floors1[i]))
			DestroyDynamic3DTextLabel(Label_Floors1[i]);
	}

	return 1;
}

stock Elevator_OpenDoors1()
{
	// Opens the elevator's doors.

	new Float:x, Float:y, Float:z;

	GetObjectPos(Obj_Elevator1Doors1[0], x, y, z);
	MoveObject(Obj_Elevator1Doors1[0], X_DOOR_L_OPENED, y, z, DOORS_SPEED);
	MoveObject(Obj_Elevator1Doors1[1], X_DOOR_R_OPENED, y, z, DOORS_SPEED);

	return 1;
}

stock Elevator_CloseDoors1()
{
    // Closes the elevator's doors.

    if(ElevatorState1 == ELEVATOR_STATE_MOVING)
	    return 0;

    new Float:x, Float:y, Float:z;

	GetObjectPos(Obj_Elevator1Doors1[0], x, y, z);
	MoveObject(Obj_Elevator1Doors1[0], X_DOOR_CLOSED, y, z, DOORS_SPEED);
	MoveObject(Obj_Elevator1Doors1[1], X_DOOR_CLOSED, y, z, DOORS_SPEED);

	return 1;
}

stock Floor_OpenDoors1(floorid)
{
    // Opens the doors at the specified floor.

    MoveObject(Obj_FloorDoors1[floorid][0], X_DOOR_L_OPENED, -1303.171142, GetDoorsZCoordForFloor1(floorid), DOORS_SPEED);
	MoveObject(Obj_FloorDoors1[floorid][1], X_DOOR_R_OPENED, -1303.171142, GetDoorsZCoordForFloor1(floorid), DOORS_SPEED);

	PlaySoundForPlayersInRange(6401, 50.0, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor1(floorid) + 5.0);

	return 1;
}

stock Floor_CloseDoors1(floorid)
{
    // Closes the doors at the specified floor.

    MoveObject(Obj_FloorDoors1[floorid][0], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor1(floorid), DOORS_SPEED);
	MoveObject(Obj_FloorDoors1[floorid][1], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor1(floorid), DOORS_SPEED);

	PlaySoundForPlayersInRange(6401, 50.0, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor1(floorid) + 5.0);

	return 1;
}

stock Elevator_MoveToFloor1(floorid)
{
	// Moves the elevator to specified floor (doors are meant to be already closed).

	ElevatorState1 = ELEVATOR_STATE_MOVING;
	ElevatorFloor1 = floorid;

	// Move the elevator slowly, to give time to clients to sync the object surfing. Then, boost it up:
	MoveObject(Obj_Elevator1, 1786.678100, -1303.459472, GetElevatorZCoordForFloor1(floorid), 0.25);
    MoveObject(Obj_Elevator1Doors1[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor1(floorid), 0.25);
    MoveObject(Obj_Elevator1Doors1[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor1(floorid), 0.25);

    if (IsValidDynamic3DTextLabel(Label_Elevator1))
    	DestroyDynamic3DTextLabel(Label_Elevator1);

	ElevatorBoostTimer1 = SetTimerEx("Elevator_Boost1", 2000, 0, "i", floorid);

	return 1;
}

public Elevator_Boost1(floorid)
{
	// Increases the elevator's speed until it reaches 'floorid'
	StopObject(Obj_Elevator1);
	StopObject(Obj_Elevator1Doors1[0]);
	StopObject(Obj_Elevator1Doors1[1]);

	MoveObject(Obj_Elevator1, 1786.678100, -1303.459472, GetElevatorZCoordForFloor1(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_Elevator1Doors1[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor1(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_Elevator1Doors1[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor1(floorid), ELEVATOR_SPEED);

	return 1;
}

public Elevator_TurnToIdle1()
{
	ElevatorState1 = ELEVATOR_STATE_IDLE;
	ReadNextFloorInQueue1();

	return 1;
}

stock RemoveFirstQueueFloor1()
{
	// Removes the data in ElevatorQueue1[0], and reorders the queue accordingly.

	for(new i; i < sizeof(ElevatorQueue1) - 1; i ++)
	    ElevatorQueue1[i] = ElevatorQueue1[i + 1];

	ElevatorQueue1[sizeof(ElevatorQueue1) - 1] = INVALID_FLOOR;

	return 1;
}

stock AddFloorToQueue1(floorid)
{
 	// Adds 'floorid' at the end of the queue.

	// Scan for the first empty space:
	new slot = -1;
	for(new i; i < sizeof(ElevatorQueue1); i ++)
	{
	    if(ElevatorQueue1[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue1[slot] = floorid;

     	// If needed, move the elevator.
	    if(ElevatorState1 == ELEVATOR_STATE_IDLE)
	        ReadNextFloorInQueue1();

	    return 1;
	}

	return 0;
}

stock ResetElevatorQueue1()
{
	// Resets the queue.

	for(new i; i < sizeof(ElevatorQueue1); i ++)
	{
	    ElevatorQueue1[i] 	= INVALID_FLOOR;
	    FloorRequestedBy1[i] = INVALID_PLAYER_ID;
	}

	return 1;
}

stock IsFloorInQueue1(floorid)
{
	// Checks if the specified floor is currently part of the queue.

	for(new i; i < sizeof(ElevatorQueue1); i ++)
	    if(ElevatorQueue1[i] == floorid)
	        return 1;

	return 0;
}

stock ReadNextFloorInQueue1()
{
	// Reads the next floor in the queue, closes doors, and goes to it.

	if(ElevatorState1 != ELEVATOR_STATE_IDLE || ElevatorQueue1[0] == INVALID_FLOOR)
	    return 0;

	Elevator_CloseDoors1();
	Floor_CloseDoors1(ElevatorFloor1);

	return 1;
}

stock DidPlayerRequestElevator1(playerid)
{
	for(new i; i < sizeof(FloorRequestedBy1); i ++)
	    if(FloorRequestedBy1[i] == playerid)
	        return 1;

	return 0;
}

stock ShowElevatorDialog1(playerid)
{
	new strings[524];
	for(new i; i < sizeof(ElevatorQueue1); i ++)
	{
	    if(FloorRequestedBy1[i] != INVALID_PLAYER_ID)
	        strcat(strings, "{FF0000}");

	    strcat(strings, FloorNames1[i]);
	    strcat(strings, "\n");
	}

	ShowPlayerDialog(playerid, DIALOG_ID1, DIALOG_STYLE_LIST, "Elevador", strings, "Selecionar", "Cancelar");

	return 1;
}

stock CallElevator1(playerid, floorid)
{
	// Calls the elevator (also used with the elevator dialog).

	if(FloorRequestedBy1[floorid] != INVALID_PLAYER_ID || IsFloorInQueue1(floorid))
	    return 0;

	FloorRequestedBy1[floorid] = playerid;
 	AddFloorToQueue1(floorid);

	return 1;
}

stock Float:GetElevatorZCoordForFloor1(floorid)
    return (GROUND_Z_COORD1 + FloorZOffsets1[floorid] + ELEVATOR_OFFSET1); // A small offset for the elevator object itself.

stock Float:GetDoorsZCoordForFloor1(floorid)
	return (GROUND_Z_COORD1 + FloorZOffsets1[floorid]);
//==============================================================================
stock Elevator_Initialize2()
{
	// Create the elevator and elevator door objects
	Obj_Elevator2 			= CreateObject(18755, X_ELEVATOR_POS2, Y_ELEVATOR_POS2, GROUND_Z_COORD2, 0.000000, 0.000000, 180.000000);
	Obj_ElevatorDoors2[0] 	= CreateObject(18757, X_ELEVATOR_POS2, Y_ELEVATOR_POS2, GROUND_Z_COORD2, 0.000000, 0.000000, 180.000000);
	Obj_ElevatorDoors2[1] 	= CreateObject(18756, X_ELEVATOR_POS2, Y_ELEVATOR_POS2, GROUND_Z_COORD2, 0.000000, 0.000000, 180.000000);

    // Create the 3D text label for inside the elevator
	Label_Elevator2 = CreateDynamic3DTextLabel("{CCCCCC}Pressione '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' para chamar o elevador", 0xCCCCCCAA, X_ELEVATOR_POS2 + 1.7, Y_ELEVATOR_POS2 + 1.75, GROUND_Z_COORD2 - 0.4, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

	// Create variables
	new strings[128];//, Float:z;

	// Loop
	for (new i; i < sizeof(Obj_FloorDoors2); i ++)
	{
     // Create elevator floor door objects
	    Obj_FloorDoors2[i][0] 	= CreateObject(18757, 2483.5911, -1512.4995, GetDoorsZCoordForFloor2(i) + 0.05, 0.000000, 0.000000, 180.000000);
		Obj_FloorDoors2[i][1] 	= CreateObject(18756, 2483.5911, -1512.4865, GetDoorsZCoordForFloor2(i) + 0.05, 0.000000, 0.000000, 180.000000);

		// Format strings for the floor 3D text label
		format(strings, sizeof(strings), "{CCCCCC}[%s]\n{CCCCCC}Pressione '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' para chamar o elevador", FloorNames2[i]);

		// Get label Z position
		//z = GetDoorsZCoordForFloor2(i);

		// Create floor label
		//Label_Floors2[i] = CreateDynamic3DTextLabel(string, 0xCCCCCCAA, X_ELEVATOR_POS2 + 2, Y_ELEVATOR_POS2 -3, z - 0.2, 10.5, 0, 1);
		if(i == 0) Label_Floors2[i] = CreateDynamic3DTextLabel(strings, 0xCCCCCCAA, 2485.7844, -1510.4736, 844.0852, 10.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    	if(i == 1) Label_Floors2[i] = CreateDynamic3DTextLabel(strings, 0xCCCCCCAA, 2486.0627, -1510.4987, 852.7059, 10.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    	if(i == 2) Label_Floors2[i] = CreateDynamic3DTextLabel(strings, 0xCCCCCCAA, 2486.0413, -1510.3726, 860.9070, 10.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}

	// Open the car park floor doors and the elevator doors
	Floor_OpenDoors2(0);
	Elevator_OpenDoors2();

    CreateDynamicObject(19852, 2516.81592, -1503.68103, 851.46820,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18758, 2483.61621, -1512.52185, 853.19623,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(18758, 2483.60620, -1512.52185, 844.79822,   0.00000, 0.00000, 180.00000);

	CreateDynamicObject(1533, 1556.35425, -1685.56543, 5.19240,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1533, 1556.36279, -1684.07690, 5.19240,   0.00000, 0.00000, -90.00000);
	return 1;
}

stock Elevator_Destroy2()
{
	// Destroys the elevator.

	DestroyObject(Obj_Elevator2);
	DestroyObject(Obj_ElevatorDoors2[0]);
	DestroyObject(Obj_ElevatorDoors2[1]);

	if (IsValidDynamic3DTextLabel(Label_Elevator2))
		DestroyDynamic3DTextLabel(Label_Elevator2);

	for(new i; i < sizeof(Obj_FloorDoors2); i ++)
	{
	    DestroyObject(Obj_FloorDoors2[i][0]);
		DestroyObject(Obj_FloorDoors2[i][1]);

		if (IsValidDynamic3DTextLabel(Label_Floors2[i]))
			DestroyDynamic3DTextLabel(Label_Floors2[i]);
	}

	return 1;
}

stock Elevator_OpenDoors2()
{
	// Opens the elevator's doors.

	new Float:x, Float:y, Float:z;

	GetObjectPos(Obj_ElevatorDoors2[0], x, y, z);
	MoveObject(Obj_ElevatorDoors2[0], 2483.5190, -1514.2675, z, DOORS_SPEED);
	MoveObject(Obj_ElevatorDoors2[1], 2483.5190, -1510.7184, z, DOORS_SPEED);

	return 1;
}

stock Elevator_CloseDoors2()
{
    // Closes the elevator's doors.

    if(ElevatorState2 == ELEVATOR_STATE_MOVING)
	    return 0;

    new Float:x, Float:y, Float:z;

	GetObjectPos(Obj_ElevatorDoors2[0], x, y, z);
	MoveObject(Obj_ElevatorDoors2[0], 2483.5190, -1512.4995, z, DOORS_SPEED);
	MoveObject(Obj_ElevatorDoors2[1], 2483.5190, -1512.4865, z, DOORS_SPEED);

	return 1;
}

stock Floor_OpenDoors2(floorid)
{
    // Opens the doors at the specified floor.
	if(floorid == 0)
	{
    	MoveObject(Obj_FloorDoors2[0][0], 2483.5911, -1514.2675, 844.9482, DOORS_SPEED);
		MoveObject(Obj_FloorDoors2[0][1], 2483.5911, -1510.7184, 844.9482, DOORS_SPEED);
	}
	else if(floorid == 1)
	{
	    MoveObject(Obj_FloorDoors2[1][0], 2483.5911, -1514.2675, 853.3842, DOORS_SPEED);
		MoveObject(Obj_FloorDoors2[1][1], 2483.5911, -1510.7184, 853.3842, DOORS_SPEED);
	}
	else if(floorid == 2)
	{
	    MoveObject(Obj_FloorDoors2[2][0], 2483.5911, -1514.2675, 862.3842, DOORS_SPEED);
		MoveObject(Obj_FloorDoors2[2][1], 2483.5911, -1510.7184, 862.3842, DOORS_SPEED);
	}
	PlaySoundForPlayersInRange(6401, 50.0, X_ELEVATOR_POS2, Y_ELEVATOR_POS2, GetDoorsZCoordForFloor2(floorid) + 5.0);

	return 1;
}

stock Floor_CloseDoors2(floorid)
{
    // Closes the doors at the specified floor.
	if(floorid == 0)
	{
	    MoveObject(Obj_FloorDoors2[0][0], 2483.5911, -1512.4995, 844.9482, DOORS_SPEED);
		MoveObject(Obj_FloorDoors2[0][1], 2483.5911, -1512.4865, 844.9482, DOORS_SPEED);
	}
	else if(floorid == 1)
	{
	    MoveObject(Obj_FloorDoors2[1][0], 2483.5911, -1512.4995, 853.3842, DOORS_SPEED);
		MoveObject(Obj_FloorDoors2[1][1], 2483.5911, -1512.4865, 853.3842, DOORS_SPEED);
	}
	else if(floorid == 2)
	{
	    MoveObject(Obj_FloorDoors2[2][0], 2483.5911, -1512.4995, 862.3842, DOORS_SPEED);
		MoveObject(Obj_FloorDoors2[2][1], 2483.5911, -1512.4865, 862.3842, DOORS_SPEED);
	}
	PlaySoundForPlayersInRange(6401, 50.0, X_ELEVATOR_POS2, Y_ELEVATOR_POS2, GetDoorsZCoordForFloor2(floorid) + 5.0);
	return 1;
}

stock Elevator_MoveToFloor2(floorid)
{
	// Moves the elevator to specified floor (doors are meant to be already closed).

	ElevatorState2 = ELEVATOR_STATE_MOVING;
	ElevatorFloor2 = floorid;

	// Move the elevator slowly, to give time to clients to sync the object surfing. Then, boost it up:
	MoveObject(Obj_Elevator2, X_ELEVATOR_POS2, Y_ELEVATOR_POS2, GetElevatorZCoordForFloor2(floorid), 0.25);
    MoveObject(Obj_ElevatorDoors2[0], 2483.5190, -1512.4995, GetDoorsZCoordForFloor2(floorid), 0.25);
    MoveObject(Obj_ElevatorDoors2[1], 2483.5190, -1512.4865, GetDoorsZCoordForFloor2(floorid), 0.25);

    if (IsValidDynamic3DTextLabel(Label_Elevator2))
    	DestroyDynamic3DTextLabel(Label_Elevator2);

	ElevatorBoostTimer2 = SetTimerEx("Elevator_Boost2", 2000, 0, "i", floorid);

	return 1;
}

public Elevator_Boost2(floorid)
{
	// Increases the elevator's speed until it reaches 'floorid'
	StopObject(Obj_Elevator2);
	StopObject(Obj_ElevatorDoors2[0]);
	StopObject(Obj_ElevatorDoors2[1]);

	MoveObject(Obj_Elevator2, X_ELEVATOR_POS2, Y_ELEVATOR_POS2, GetElevatorZCoordForFloor2(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors2[0], 2483.5190, -1512.4995, GetDoorsZCoordForFloor2(floorid), ELEVATOR_SPEED);
    MoveObject(Obj_ElevatorDoors2[1], 2483.5190, -1512.4865, GetDoorsZCoordForFloor2(floorid), ELEVATOR_SPEED);
	return 1;
}

public Elevator_TurnToIdle2()
{
	ElevatorState2 = ELEVATOR_STATE_IDLE;
	ReadNextFloorInQueue2();

	return 1;
}

stock RemoveFirstQueueFloor2()
{
	// Removes the data in ElevatorQueue[0], and reorders the queue accordingly.

	for(new i; i < sizeof(ElevatorQueue2) - 1; i ++)
	    ElevatorQueue2[i] = ElevatorQueue2[i + 1];

	ElevatorQueue2[sizeof(ElevatorQueue2) - 1] = INVALID_FLOOR;

	return 1;
}

stock AddFloorToQueue2(floorid)
{
	// Scan for the first empty space:
	new slot = -1;
	for(new i; i < sizeof(ElevatorQueue2); i ++)
	{
	    if(ElevatorQueue2[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue2[slot] = floorid;

     	// If needed, move the elevator.
	    if(ElevatorState2 == ELEVATOR_STATE_IDLE)
	        ReadNextFloorInQueue2();
	    return 1;
	}
	return 0;
}

stock ResetElevatorQueue2()
{
	// Resets the queue.

	for(new i; i < sizeof(ElevatorQueue2); i ++)
	{
	    ElevatorQueue2[i] 	= INVALID_FLOOR;
	    FloorRequestedBy2[i] = INVALID_PLAYER_ID;
	}

	return 1;
}

stock IsFloorInQueue2(floorid)
{
	// Checks if the specified floor is currently part of the queue.

	for(new i; i < sizeof(ElevatorQueue2); i ++)
	    if(ElevatorQueue2[i] == floorid)
	        return 1;

	return 0;
}

stock ReadNextFloorInQueue2()
{
	// Reads the next floor in the queue, closes doors, and goes to it.

	if(ElevatorState2 != ELEVATOR_STATE_IDLE || ElevatorQueue2[0] == INVALID_FLOOR)
	    return 0;

	Elevator_CloseDoors2();
	Floor_CloseDoors2(ElevatorFloor2);

	return 1;
}

stock DidPlayerRequestElevator2(playerid)
{
	for(new i; i < sizeof(FloorRequestedBy2); i ++)
	    if(FloorRequestedBy2[i] == playerid)
	        return 1;

	return 0;
}

stock ShowElevatorDialog2(playerid)
{
	new strings[512];
	for(new i; i < sizeof(ElevatorQueue2); i ++)
	{
	    if(FloorRequestedBy2[i] != INVALID_PLAYER_ID)
	        strcat(strings, "{FF0000}");

	    strcat(strings, FloorNames2[i]);
	    strcat(strings, "\n");
	}

	ShowPlayerDialog(playerid, DIALOG_ID2, DIALOG_STYLE_LIST, "PMESP", strings, "Selecionar", "Cancelar");

	return 1;
}

stock CallElevator2(playerid, floorid)
{
	// Calls the elevator (also used with the elevator dialog).

	if(FloorRequestedBy2[floorid] != INVALID_PLAYER_ID || IsFloorInQueue2(floorid))
	    return 0;

	FloorRequestedBy2[floorid] = playerid;
	AddFloorToQueue2(floorid);
	return 1;
}

stock Float:GetElevatorZCoordForFloor2(floorid)
{
	// Return Z height value
    return (GROUND_Z_COORD2 + FloorZOffsets2[floorid]);
}

stock Float:GetDoorsZCoordForFloor2(floorid)
{
    // Return Z height value
	return (GROUND_Z_COORD2 + FloorZOffsets2[floorid]);
}

//==========================================================================================================================================================================================
public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
	new panels, doors, lights, tires;
 	if(newstate)
  	{
       	new slot = GetVehicleSlot(vehicleid);
		if(slot > -1)
		{
		    if(VehicleInfo[slot][vFaction] > 0)
		    {
   				FlashTime[vehicleid] = SetTimerEx("OnLightFlash", flashtime, true, "d", vehicleid);
			}
		}
    }
    else
    {
    	KillTimer(FlashTime[vehicleid]);
     	GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
     	UpdateVehicleDamageStatus(vehicleid, panels, doors, 0, tires);
    }
    return 1;
}

forward OnLightFlash(vehicleid);
public OnLightFlash(vehicleid)
{
    new panels, doors, lights, tires;
    GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

	switch(Flash[vehicleid])
	{
        case 0: UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);
		case 1: UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
		case 2: UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);
		case 3: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);
		case 4: UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
		case 5: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);
  	}
	if(Flash[vehicleid] >=5) Flash[vehicleid] = 0;
	else Flash[vehicleid] ++;
	return 1;
}

forward IsLaw(playerid);
public IsLaw(playerid)
{
	new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	if(FacId == 0) return false;
	if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ || FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ || FacInfo[FacId][fTipo] == FAC_TIPO_EB || FacInfo[FacId][fTipo] == FAC_TIPO_BANK) return true;
	return false;
}

forward IsLaw2(playerid);
public IsLaw2(playerid)
{
	new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	if(FacId == 0) return false;
	if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ || FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ || FacInfo[FacId][fTipo] == FAC_TIPO_EB || FacInfo[FacId][fTipo] == FAC_TIPO_BANK) return true;
	return false;
}


forward IsMedic(playerid);
public IsMedic(playerid)
{
	new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	if(FacId == 0) return false;
	if(FacInfo[FacId][fTipo] == FAC_TIPO_CBERJ) return true;
	return false;
}



COMMAND:sirene(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new i = GetPlayerVehicleID(playerid);
    if(GetVehicleModel(i) == 525)
    {
        new slot = GetVehicleSlot(i);
        if(slot > -1)
        {
            if(VehicleInfo[slot][vSirene][0] == 0)
       		{
    	    	if (IsValidDynamicObject(VehicleInfo[slot][vSirene][0]))
				{
	 				if(IsValidDynamicObject(VehicleInfo[slot][vSirene][0]))DestroyDynamicObject(VehicleInfo[slot][vSirene][0]);
					VehicleInfo[slot][vSirene][0] = 0;
				}
				VehicleInfo[slot][vSirene][0] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
				AttachObjectToVehicle(VehicleInfo[slot][vSirene][0], VehicleInfo[slot][vVehicle], 0.0, 0.75, 0.275, 0.0, 0.1, 0.0);
				SendClientMessage(playerid, COLOR_WHITE,"{FF6347} Sirene Ligada");
				return 1;
			}
			else
			{
   				if (IsValidDynamicObject(VehicleInfo[slot][vSirene][0]))
			    {
		    		if(IsValidDynamicObject(VehicleInfo[slot][vSirene][0])) DestroyDynamicObject(VehicleInfo[slot][vSirene][0]);
					VehicleInfo[slot][vSirene][0] = 0;
				}
				SendClientMessage(playerid, COLOR_WHITE,"{FF6347} Sirene Desligada");
				return 1;
			}
		}
    }
	if(IsLaw(playerid) || IsMedic(playerid))
    {
        //new vehicleid = GetPlayerVehicleID(playerid);
        new slot = GetVehicleSlot(i);
        if(slot > -1)
        {
            new Float:vehx, Float:vehy, Float:vehz, Float:z_rot;
          	GetVehiclePos(i, vehx, vehy, vehz);
          	GetVehicleZAngle(i, z_rot);

            new opcao;
			if (sscanf(params, "i", opcao))
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /sirene [1/2] (1. Sirene - 2. Sirene portátil)");
				return 1;
			}
			if(opcao == 1)
   			{
	        	if(VehicleInfo[slot][vSirene][1] == -1)
	        	{
		 			new Float:px, Float:py, Float:pz;
				   	GetPlayerPos(playerid, px, py, pz);
                    DestruirObjetosCarro(slot, VehicleInfo[slot][vVehicle]);
                    VehicleInfo[slot][vTuned] = false;

				   	DestroyVehicle(VehicleInfo[slot][vVehicle]);
				   	VehicleInfo[slot][vSemUso] = 3600;
					VehicleInfo[slot][vVehicle] = CreateVehicle(VehicleInfo[slot][vModel], vehx, vehy, vehz, z_rot, VehicleInfo[slot][vColor1], VehicleInfo[slot][vColor2],-1, 1);
	                PutPlayerInVehicle(playerid, VehicleInfo[slot][vVehicle], 0);
	                VehicleInfo[slot][vSirene][1] = 1;
					ArmasNoPortaMalas(slot);
					VehicleInfo[slot][vConsertando] = 2;

					if(strlen(VehicleInfo[slot][vPlate])) { SetVehicleNumberPlate(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vPlate]); }
					SetVehicleDamage(VehicleInfo[slot][vVehicle]);
					SetVehicleVirtualWorld(VehicleInfo[slot][vVehicle], VehicleInfo[slot][vWorld]);
					LinkVehicleToInterior(VehicleInfo[slot][vVehicle], VehicleInfo[slot][vInterior]);
					AddVehicleMods(VehicleInfo[slot][vVehicle],slot);
					SaveVehicle(slot);
					return 1;
				}
				else
				{
				    DestruirObjetosCarro(slot, VehicleInfo[slot][vVehicle]);
				    DestroyVehicle(VehicleInfo[slot][vVehicle]);
				    VehicleInfo[slot][vTuned] = false;
				    VehicleInfo[slot][vSemUso] = 3600;

					VehicleInfo[slot][vVehicle] = CreateVehicle(VehicleInfo[slot][vModel], vehx, vehy, vehz, z_rot, VehicleInfo[slot][vColor1],VehicleInfo[slot][vColor2],-1,0);
	                PutPlayerInVehicle(playerid, VehicleInfo[slot][vVehicle], 0);
					DestroyObject(VehicleInfo[slot][vSirene]);
					VehicleInfo[slot][vSirene][1] = -1;
					ArmasNoPortaMalas(slot);
					VehicleInfo[slot][vConsertando] = 2;

					if(strlen(VehicleInfo[slot][vPlate])) { SetVehicleNumberPlate(VehicleInfo[slot][vVehicle],VehicleInfo[slot][vPlate]); }
					SetVehicleDamage(VehicleInfo[slot][vVehicle]);
					SetVehicleVirtualWorld(VehicleInfo[slot][vVehicle], VehicleInfo[slot][vWorld]);
					LinkVehicleToInterior(VehicleInfo[slot][vVehicle], VehicleInfo[slot][vInterior]);
					AddVehicleMods(VehicleInfo[slot][vVehicle],slot);
					SaveVehicle(slot);
					return 1;
				}
			}
			else if(opcao == 2)
			{
			    if(VehicleInfo[slot][vSirene][0] == 0)
	        	{
	        	    if (IsValidDynamicObject(VehicleInfo[slot][vSirene][0]))
					{
				 		if(IsValidDynamicObject(VehicleInfo[slot][vSirene][0])) DestroyDynamicObject(VehicleInfo[slot][vSirene][0]);
						VehicleInfo[slot][vSirene][0] = 0;
					}
					new vehicleid = GetPlayerVehicleID(playerid);

   					VehicleInfo[slot][vSirene][0] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0, 0, 0);
   					AttachDynamicObjectToVehicle(VehicleInfo[slot][vSirene][0], vehicleid, 0.0, 0.75, 0.275, 0.0, 0.1, 0.0);
   					SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Sirene Adicionada");
   					return 1;
				}
				else
				{
				    if (IsValidDynamicObject(VehicleInfo[slot][vSirene][0]))
				    {
				    	if(IsValidDynamicObject(VehicleInfo[slot][vSirene][0])) DestroyDynamicObject(VehicleInfo[slot][vSirene][0]);
						VehicleInfo[slot][vSirene][0] = 0;
					}
					VehicleInfo[slot][vSirene][0] = 0;
					SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Sirene Removida");
					return 1;
				}
			}
			else
			{
   				SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /sirene [1/2] (1. Sirene - 2. Sirene portátil)");
				return 1;
			}
		}
    }
    return 1;
}

CMD:f(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	if(FacId == -1) return 1;

	if(FacInfo[FacId][fBlockf] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} {FFFFFF}O chat da facção está bloqueado.");
	if(FacInfo[FacId][fTipo] > 0)
	{
	    new opcao[256], StrMsg[256];
		if (sscanf(params, "s[256]", opcao))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /f [texto]");
			return 1;
		}
		else
		{
		    format(StrMsg, sizeof(StrMsg), "((%s %s: %s))", GetPlayerCargo(playerid), PlayerName(playerid, 0), opcao);
    		SendFacMessage(0x7BDDA5AA,FacId,StrMsg);
    	}
	}
	return 1;
}

stock SendEBMessage(radioid,slot,color,strings[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(FacInfo[PlayerInfo[i][pFac]][fTipo] == FAC_TIPO_PMERJ)
        {
            if(PlayerInfo[i][pRadioChan] == radioid || PlayerInfo[i][pRadioChan2] == radioid)
            {
                if(OutrasInfos[i][oRadioPD] == slot)
                {
                    if(PegarSinalCelular(i) > 1.0) {
	                    new stringfull[192];
		                new lengths[96];
		                new length2[96];
		                strmid(stringfull, strings, 0, 192);
		                strmid(lengths, stringfull, 0, 96);
		                strmid(length2, strings, 95, 192);
		                if(strlen(strings) > 96)
		                {
		                    new message[102];
		                    format(message, 102, "%s ...", lengths);
		                    SendClientMessage(i, color, message);
		                    format(message, 102, "... %s", length2);
		                    SendClientMessage(i, color, message);
		                }
		                else
		                {
		                    new message[192];
		                    format(message, 192, "%s", strings);
		                    SendClientMessage(i, color, message);
		                }
		                LogCMD_FAC(strings);
					}
				}
			}
        }
    }
    return 1;
}
stock SendPOLICIAMessage(radioid,slot,color,strings[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(FacInfo[PlayerInfo[i][pFac]][fTipo] == FAC_TIPO_PCERJ)
        {
            if(PlayerInfo[i][pRadioChan] == radioid || PlayerInfo[i][pRadioChan2] == radioid)
            {
                if(OutrasInfos[i][oRadioPD] == slot)
                {
                    if(PegarSinalCelular(i) > 1.0) {
                        new stringfull[192];
                        new lengths[96];
                        new length2[96];
                        strmid(stringfull, strings, 0, 192);
                        strmid(lengths, stringfull, 0, 96);
                        strmid(length2, strings, 95, 192);
                        if(strlen(strings) > 96)
                        {
                            new message[102];
                            format(message, 102, "%s ...", lengths);
                            SendClientMessage(i, color, message);
                            format(message, 102, "... %s", length2);
                            SendClientMessage(i, color, message);
                        }
                        else
                        {
                            new message[192];
                            format(message, 192, "%s", strings);
                            SendClientMessage(i, color, message);
                        }
                        LogCMD_FAC(strings);
                    }
                }
            }
        }
    }
    return 1;
}

COMMAND:canalradio(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pMorto] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você está muito ferido para executar essa ação.");
	if(!PlayerInfo[playerid][pRadio]) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não tem um rádio.");

	new aimid,
		temperm = 0;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /canalradio [canais de 0 (Desligado) até 99999] ");
	else
	{
	    if(aimid < 0 || aimid > 99999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /canalradio [canais de 0 (Desligado) até 99999]");
	    if(aimid > 180 && aimid < 555) {
		    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	     	new Job = PlayerInfo[playerid][pJob];
            if(aimid == 190)
            {
                if(FacInfo[FacId][fTipo] != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito a PMESP.");
                temperm = 1;
            }
            if(aimid == 193) 
			{
                if(FacInfo[FacId][fTipo] != 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito a GBESP.");
                temperm = 1;
            }
			if(aimid == 197)
            {
                if(FacInfo[FacId][fTipo] != 2) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito a PCESP.");
                temperm = 1;
            }
            if(aimid == 183) {
                if(FacInfo[FacId][fTipo] != 7) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito ao TJSP.");
                temperm = 1;
            }
			if(aimid == 181) {
			    if(FacInfo[FacId][fTipo] != 4) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito ao Governo.");
			    temperm = 1;
			}
			if(aimid == 180) {
			    if(FacInfo[FacId][fTipo] != 5) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito ao Exército.");
			    temperm = 1;
			}
			if(aimid == 185) {
			    if(FacInfo[FacId][fTipo] != 6) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito a PROTEGE.");
			    temperm = 1;
			}
			if(aimid == 444) {
			    if(Job != JOB_TAXISTA) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito a taxistas.");
			    temperm = 1;
			}
			if(aimid == 555) {
			    if(Job != JOB_MECANICO) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito a mecanicos.");
			    temperm = 1;
			}
			if(temperm == 1){
			    format(string, sizeof(string),"Canal do rádio alternado para (%d).", aimid);
	    		SendClientMessage(playerid, COLOR_WHITE, string);
     			PlayerInfo[playerid][pRadioChan] = aimid;
				updateTextDrawCanalRadio(playerid);
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este canal de rádio é de uso restrito.");

		}
 		else {
   			format(string, sizeof(string),"Canal do rádio alternado para (%d).", aimid);
	    	SendClientMessage(playerid, COLOR_WHITE, string);
     		PlayerInfo[playerid][pRadioChan] = aimid;
			updateTextDrawCanalRadio(playerid);
		}
	}
	return 1;
}

COMMAND:canalradio2(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pMorto] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você está muito ferido para executar essa ação.");
    if(!PlayerInfo[playerid][pRadio]) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não tem um rádio.");

    new aimid,
        temperm = 0;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /canalradio2 [canais de 0 (Desligado) até 99999]");
	else
	{
	    if(aimid < 0 || aimid > 99999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /canalradio2 [canais de 0 (Desligado) até 99999]");
	    if(aimid > 180 && aimid < 555) {
            new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
            new Job = PlayerInfo[playerid][pJob];
	
            if(aimid == 190) {
                if(FacInfo[FacId][fTipo] != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito a PMESP.");
                temperm = 1;
            }
            if(aimid == 197) {
                if(FacInfo[FacId][fTipo] != 2) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito a PCESP.");
                temperm = 1;
            }
            if(aimid == 193) {
                if(FacInfo[FacId][fTipo] != 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito a GBESP.");
                temperm = 1;
            }
            if(aimid == 183) {
                if(FacInfo[FacId][fTipo] != 7) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito ao TJSP.");
                temperm = 1;
            }
            if(aimid == 181) {
                if(FacInfo[FacId][fTipo] != 4) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito ao Governo.");
                temperm = 1;
            }
			if(aimid == 180) {
			    if(FacInfo[FacId][fTipo] != 5) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito ao Exército.");
			    temperm = 1;
			}
			if(aimid == 185) {
			    if(FacInfo[FacId][fTipo] != 6) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito a PROTEGE.");
			    temperm = 1;
			}
            if(aimid == 444) {
                if(Job != JOB_TAXISTA) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito a taxistas.");
                temperm = 1;
            }
            if(aimid == 555) {
                if(Job != JOB_MECANICO) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este rádio é restrito a mecanicos.");
                temperm = 1;
            }
            if(temperm == 1){
                format(string, sizeof(string),"Canal do rádio alternado para (%d).", aimid);
                SendClientMessage(playerid, COLOR_WHITE, string);
                PlayerInfo[playerid][pRadioChan2] = aimid;
            }
            else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este canal de rádio é de uso restrito.");

        }
        else {
            format(string, sizeof(string),"Canal do rádio alternado para (%d).", aimid);
            SendClientMessage(playerid, COLOR_WHITE, string);
            PlayerInfo[playerid][pRadioChan2] = aimid;
        }
    }
    return 1;
}

ALTCOMMAND:r->radio;
CMD:radio(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(!PlayerInfo[playerid][pRadio]) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não tem um rádio.");
    if(OutrasInfos[playerid][oAlgemado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:: Você não pode falar no rádio estando algemado.");
    if(OutrasInfos[playerid][oAmarrado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não pode falar no rádio estando amarrado.");
    if(PegarSinalCelular(playerid) < 5.0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há sinal nesta área.");

    new opcao[256], StrMsg[256];
	if (sscanf(params, "s[256]", opcao))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /r [texto]{FF6347},{FFFFFF} /rbaixo [texto]");
		return 1;
	}

    if(PlayerInfo[playerid][pRadioChan] == 0)
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Seu rádio está desligado.");
		return 1;
    }
	else
	{
		format(StrMsg, sizeof(StrMsg), "**[CH: %d, S: 1] %s: %s", PlayerInfo[playerid][pRadioChan], PlayerName(playerid, 0), opcao);
		SendRadioMessage(0xFFFF79FF,PlayerInfo[playerid][pRadioChan],StrMsg);

		format(StrMsg, sizeof(StrMsg), "%s (rádio): %s", PlayerName(playerid, 1), opcao);
		ProxDetectorNP(10.0, playerid, StrMsg,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	}
	return 1;
}

ALTCOMMAND:r2->radio2;
CMD:radio2(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(!PlayerInfo[playerid][pRadio]) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não tem um rádio.");
    if(OutrasInfos[playerid][oAlgemado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:: Você não pode falar no rádio estando algemado.");
    if(OutrasInfos[playerid][oAmarrado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não pode falar no rádio estando amarrado.");
    if(PegarSinalCelular(playerid) < 5.0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há sinal nesta área.");
    new opcao[256], StrMsg[256];
    if (sscanf(params, "s[256]", opcao))
    {
        SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /r2 [texto]{FF6347},{FFFFFF} /rbaixo2 [texto]");
        return 1;
    }

    if(PlayerInfo[playerid][pRadioChan2] == 0)
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Seu rádio está desligado.");
        return 1;
    }
    else
    {
        format(StrMsg, sizeof(StrMsg), "**[CH: %d, S: 2] %s: %s", PlayerInfo[playerid][pRadioChan2], PlayerName(playerid, 0), opcao);
        SendRadioMessage(0xFFFF79FF,PlayerInfo[playerid][pRadioChan2],StrMsg);

        format(StrMsg, sizeof(StrMsg), "%s (rádio): %s", PlayerName(playerid, 1), opcao);
        ProxDetectorNP(10.0, playerid, StrMsg,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
    }
    return 1;
}

ALTCOMMAND:rbaixo->radiobaixo;
CMD:radiobaixo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(!PlayerInfo[playerid][pRadio]) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não tem um rádio.");
    if(OutrasInfos[playerid][oAlgemado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:: Você não pode falar no rádio estando algemado.");
    if(OutrasInfos[playerid][oAmarrado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não pode falar no rádio estando amarrado.");
    if(PegarSinalCelular(playerid) < 5.0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há sinal nesta área.");

    new opcao[256], StrMsg[256];
	if (sscanf(params, "s[256]", opcao))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /r [texto]{FF6347},{FFFFFF} /rbaixo [texto]");
		return 1;
	}

    if(PlayerInfo[playerid][pRadioChan] == 0)
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Seu rádio está desligado.");
		return 1;
    }
	else
	{
		format(StrMsg, sizeof(StrMsg), "**[CH: %d, S: 1] %s: %s", PlayerInfo[playerid][pRadioChan], PlayerName(playerid, 0), opcao);
		SendRadioMessage(0xFFFF79FF,PlayerInfo[playerid][pRadioChan],StrMsg);

		format(StrMsg, sizeof(StrMsg), "%s (rádio): %s", PlayerName(playerid, 1), opcao);
		ProxDetectorNP(10.0, playerid, StrMsg,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	}
	return 1;
}

ALTCOMMAND:rbaixo2->radiobaixo2;
CMD:radiobaixo2(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(!PlayerInfo[playerid][pRadio]) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não tem um rádio.");
    if(OutrasInfos[playerid][oAlgemado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:: Você não pode falar no rádio estando algemado.");
    if(OutrasInfos[playerid][oAmarrado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não pode falar no rádio estando amarrado.");
    if(PegarSinalCelular(playerid) < 5.0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há sinal nesta área.");

    new opcao[256], StrMsg[256];
    if (sscanf(params, "s[256]", opcao))
    {
        SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /r [texto]{FF6347},{FFFFFF} /rbaixo [texto]");
        return 1;
    }

    if(PlayerInfo[playerid][pRadioChan2] == 0)
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Seu rádio está desligado.");
        return 1;
    }
    else
    {
        format(StrMsg, sizeof(StrMsg), "**[CH: %d, S: 2] %s: %s", PlayerInfo[playerid][pRadioChan2], PlayerName(playerid, 0), opcao);
        SendRadioMessage(0xFFFF79FF,PlayerInfo[playerid][pRadioChan2],StrMsg);

        format(StrMsg, sizeof(StrMsg), "%s (rádio): %s", PlayerName(playerid, 1), opcao);
        ProxDetectorNP(10.0, playerid, StrMsg,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
    }
    return 1;
}

stock SendRadioMessage(color,radioid,stringa[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(PlayerInfo[i][pRadio] == 1)
        {
	        if(PlayerInfo[i][pRadioChan] == radioid || PlayerInfo[i][pRadioChan2] == radioid)
	        {
                if(PegarSinalCelular(i) > 1.0) {
	            	SendClientMessage(i,color,stringa);
					new Float:x, Float:y, Float:z, Float:Distance = 10.0;
    				GetPlayerPos(i, x, y, z);
    				PlayAudioStreamForPlayer(i, "https://cp-frp.com.br.com/midia/bleep.mp3", x, y, z, Distance, 1);
	            }
	        }
		}
    }
    return 1;
}

ALTCOMMAND:dep->departamento; 
CMD:departamento(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(!PlayerInfo[playerid][pRadio]) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não tem um rádio.");

    new FacId = PlayerInfo[playerid][pFac];
	if(FacId == 1 || FacId == 2  || FacId == 3 || FacId == 4 || FacId == 5  || FacId == 6)
	{
	    new opcao[256], StrMsg[256], StrFac[24];
		if(sscanf(params, "s[256]", opcao))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /dep [texto]{FF6347},{FFFFFF} /depbaixo [texto]");
			return 1;
		}
		else
		{
		   	if(FacId == 1) format(StrFac, sizeof(StrFac), "PMESP");
            else if(FacId == 2) format(StrFac, sizeof(StrFac), "PCESP");
            else if(FacId == 3) format(StrFac, sizeof(StrFac), "GBESP");
		   	else if(FacId == 4) format(StrFac, sizeof(StrFac), "GOV SP");
			else if(FacId == 6) format(StrFac, sizeof(StrFac), "EB");
			else if(FacId == 5) format(StrFac, sizeof(StrFac), "PROTEGE");
		    format(StrMsg, sizeof(StrMsg), "** [%s] %s: %s", StrFac, PlayerName(playerid, 0), opcao);
            SendFacMessage(0xff8282FF, PlayerInfo[playerid][pFac],StrMsg);
          

    		format(StrMsg, sizeof(StrMsg), "%s (rádio): %s", PlayerName(playerid, 1), opcao);
    		ProxDetectorNP(10.0, playerid, StrMsg,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);

			new Float:x, Float:y, Float:z, Float:Distance = 10.0;
    		GetPlayerPos(playerid, x, y, z);
    		PlayAudioStreamForPlayer(playerid, "https://cp-frp.com.br.com/midia/bleep.mp3", x, y, z, Distance, 1);
    	}
	}
	return 1;
}

ALTCOMMAND:depbaixo->departamentobaixo;
CMD:departamentobaixo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(!PlayerInfo[playerid][pRadio]) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não tem um rádio.");

    new FacId = PlayerInfo[playerid][pFac];
	if(FacId == 1 || FacId == 2  || FacId == 3 || FacId == 4 || FacId == 5  || FacId == 6)
	{
	    new opcao[256], StrMsg[256], StrFac[24];
		if(sscanf(params, "s[256]", opcao))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /dep [texto]{FF6347},{FFFFFF} /depbaixo [texto]");
			return 1;
		}
		else
		{
		   	if(FacId == 1) format(StrFac, sizeof(StrFac), "PMESP");
            else if(FacId == 2) format(StrFac, sizeof(StrFac), "PCESP");
            else if(FacId == 3) format(StrFac, sizeof(StrFac), "GBESP");
		   	else if(FacId == 4) format(StrFac, sizeof(StrFac), "GOV SP");
			else if(FacId == 6) format(StrFac, sizeof(StrFac), "EB");
			else if(FacId == 5) format(StrFac, sizeof(StrFac), "PROTEGE");
		    format(StrMsg, sizeof(StrMsg), "** [%s] %s: %s", StrFac, PlayerName(playerid, 0), opcao);
           	SendFacMessage(0xff8282FF, PlayerInfo[playerid][pFac],StrMsg);

    		format(StrMsg, sizeof(StrMsg), "%s (rádio): %s", PlayerName(playerid, 1), opcao);
    		ProxDetectorNP(6.0, playerid, StrMsg,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
    	}
	}
	return 1;
}

stock GetPlayerCargo(playerid)
{
	new StringCargo[126];
	new faccao = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	if(faccao != 0)
	{
		switch(PlayerInfo[playerid][pFacCargo])
		{
		    case 1: format(StringCargo, sizeof(StringCargo), "%s", FacInfo[faccao][fRank1]);
		    case 2: format(StringCargo, sizeof(StringCargo), "%s", FacInfo[faccao][fRank2]);
		    case 3: format(StringCargo, sizeof(StringCargo), "%s", FacInfo[faccao][fRank3]);
		    case 4: format(StringCargo, sizeof(StringCargo), "%s", FacInfo[faccao][fRank4]);
		    case 5: format(StringCargo, sizeof(StringCargo), "%s", FacInfo[faccao][fRank5]);
		    case 6: format(StringCargo, sizeof(StringCargo), "%s", FacInfo[faccao][fRank6]);
		    case 7: format(StringCargo, sizeof(StringCargo), "%s", FacInfo[faccao][fRank7]);
		    case 8: format(StringCargo, sizeof(StringCargo), "%s", FacInfo[faccao][fRank8]);
		    case 9: format(StringCargo, sizeof(StringCargo), "%s", FacInfo[faccao][fRank9]);
		    case 10: format(StringCargo, sizeof(StringCargo), "%s", FacInfo[faccao][fRank10]);
		    case 11: format(StringCargo, sizeof(StringCargo), "%s", FacInfo[faccao][fRank11]);
		    case 12: format(StringCargo, sizeof(StringCargo), "%s", FacInfo[faccao][fRank12]);
		}
	}
	else
	{
	    format(StringCargo, sizeof(StringCargo), "Nenhum");
	}
	return StringCargo;
}

CMD:nomecargo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pFac] == 0) return 1;
	else
	{
	    new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	    if(FacInfo[FacId][fTipo] == FAC_TIPO_PMERJ || FacInfo[FacId][fTipo] == FAC_TIPO_CBERJ || FacInfo[FacId][fTipo] == FAC_TIPO_EB || FacInfo[FacId][fTipo] == FAC_TIPO_GOV || FacInfo[FacId][fTipo] == FAC_TIPO_TJRP || FacInfo[FacId][fTipo] == FAC_TIPO_PCERJ || FacInfo[FacId][fTipo] == FAC_TIPO_BANK)
	    {
	        if(PlayerInfo[playerid][pFacCargo] < 9)
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissão para alterar os cargos.");
	            return 1;
	        }
			new cargo,opcao[24];
			if (sscanf(params, "is[24]", cargo, opcao))
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /nomecargo [Cargo (1-12)] [Nome]");
				return 1;
			}
			else
			{
			    if(cargo == 1) strmid(FacInfo[FacId][fRank1], opcao, 0, strlen(opcao), 255);
			    else if(cargo == 2) strmid(FacInfo[FacId][fRank2], opcao, 0, strlen(opcao), 255);
                else if(cargo == 3) strmid(FacInfo[FacId][fRank3], opcao, 0, strlen(opcao), 255);
                else if(cargo == 4) strmid(FacInfo[FacId][fRank4], opcao, 0, strlen(opcao), 255);
                else if(cargo == 5) strmid(FacInfo[FacId][fRank5], opcao, 0, strlen(opcao), 255);
                else if(cargo == 6) strmid(FacInfo[FacId][fRank6], opcao, 0, strlen(opcao), 255);
                else if(cargo == 7) strmid(FacInfo[FacId][fRank7], opcao, 0, strlen(opcao), 255);
                else if(cargo == 8) strmid(FacInfo[FacId][fRank8], opcao, 0, strlen(opcao), 255);
                else if(cargo == 9) strmid(FacInfo[FacId][fRank9], opcao, 0, strlen(opcao), 255);
                else if(cargo == 10) strmid(FacInfo[FacId][fRank10], opcao, 0, strlen(opcao), 255);
                else if(cargo == 11) strmid(FacInfo[FacId][fRank11], opcao, 0, strlen(opcao), 255);
                else if(cargo == 12) strmid(FacInfo[FacId][fRank12], opcao, 0, strlen(opcao), 255);
                else return SendClientMessage(playerid, COLOR_LIGHTRED, "Cargo Inválido. (Apenas de 1 à 12)");

			    format(string, sizeof(string), "Você alterou o cargo %d para %s.", cargo, opcao);
	        	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	        	SalvarFaccao(FacId);
	        	return 1;
			}
		}
	    else if(FacInfo[FacId][fTipo] == FAC_TIPO_PRIXY)
	    {
	        if(PlayerInfo[playerid][pFacCargo] < 4)
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissão para alterar os cargos.");
	            return 1;
	        }
			new cargo,opcao[24];
			if (sscanf(params, "is[24]", cargo, opcao))
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /nomecargo [Cargo (1-12)] [Nome]");
				return 1;
			}
			else
			{
			    if(cargo == 1) strmid(FacInfo[FacId][fRank1], opcao, 0, strlen(opcao), 255);
			    else if(cargo == 2) strmid(FacInfo[FacId][fRank2], opcao, 0, strlen(opcao), 255);
                else if(cargo == 3) strmid(FacInfo[FacId][fRank3], opcao, 0, strlen(opcao), 255);
                else if(cargo == 4) strmid(FacInfo[FacId][fRank4], opcao, 0, strlen(opcao), 255);
                else if(cargo == 5) strmid(FacInfo[FacId][fRank5], opcao, 0, strlen(opcao), 255);
                else if(cargo == 6) strmid(FacInfo[FacId][fRank6], opcao, 0, strlen(opcao), 255);
                else if(cargo == 7) strmid(FacInfo[FacId][fRank7], opcao, 0, strlen(opcao), 255);
                else if(cargo == 8) strmid(FacInfo[FacId][fRank8], opcao, 0, strlen(opcao), 255);
                else if(cargo == 9) strmid(FacInfo[FacId][fRank9], opcao, 0, strlen(opcao), 255);
                else if(cargo == 10) strmid(FacInfo[FacId][fRank10], opcao, 0, strlen(opcao), 255);
                else if(cargo == 11) strmid(FacInfo[FacId][fRank11], opcao, 0, strlen(opcao), 255);
                else if(cargo == 12) strmid(FacInfo[FacId][fRank12], opcao, 0, strlen(opcao), 255);
                else return SendClientMessage(playerid, COLOR_LIGHTRED, "Cargo Inválido. (Apenas de 1 à 12)");

			    format(string, sizeof(string), "Você alterou o cargo %d para %s.", cargo, opcao);
	        	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	        	SalvarFaccao(FacId);
	        	return 1;
			}
		}
		else if(10 < FacInfo[FacId][fTipo] < 18)
	    {
	        if(PlayerInfo[playerid][pFacCargo] < 5)
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissão para alterar os cargos.");
	            return 1;
	        }
			new cargo,opcao[24];
			if (sscanf(params, "is[24]", cargo, opcao))
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /nomecargo [Cargo (1-6)] [Nome]");
				return 1;
			}
			else
			{
			    if(cargo == 1) strmid(FacInfo[FacId][fRank1], opcao, 0, strlen(opcao), 255);
			    else if(cargo == 2) strmid(FacInfo[FacId][fRank2], opcao, 0, strlen(opcao), 255);
                else if(cargo == 3) strmid(FacInfo[FacId][fRank3], opcao, 0, strlen(opcao), 255);
                else if(cargo == 4) strmid(FacInfo[FacId][fRank4], opcao, 0, strlen(opcao), 255);
                else if(cargo == 5) strmid(FacInfo[FacId][fRank5], opcao, 0, strlen(opcao), 255);
                else if(cargo == 6) strmid(FacInfo[FacId][fRank6], opcao, 0, strlen(opcao), 255);
                else return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}Cargo Inválido. (Apenas de 1 à 6)");

			    format(string, sizeof(string), "{33AA33}Você alterou o cargo %d para %s.", cargo, opcao);
	        	SendClientMessage(playerid, COLOR_WHITE, string);
	        	SalvarFaccao(FacId);
	        	return 1;
			}
		}
	}
	return 1;
}

CMD:factipo(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return 1;
	if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pFactionTeam] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso a esse comando.");
	new id, var2;
	if (sscanf(params, "ii", id, var2))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"USE: /factipo [Id da Facção] [Tipo]");
		SendClientMessage(playerid, COLOR_WHITE,"{FF6347}[Tipos]: 1 - PMERJ / 2 - PCERJ / 3 - CBERJ / 4 - GOV / 5 - EB / 6 - T. Valores / 10~13 - Gang / 14~17 - Mafia / 7 - Load & Reload / 8 - Civil");
		return 1;
	}
	else
	{
	    if(FacInfo[id][fCriada] == 1)
	    {
	        FacInfo[id][fTipo] = var2;
	        format(string, sizeof(string), "{FF6347}AdmCmd: Você setou a facção %s [%d] para o tipo: %d.", FacInfo[id][fNome], id, var2);
	        SendClientMessage(playerid, COLOR_WHITE, string);

	    	SalvarFaccao(id);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED,"{FF6347}ERRO:{FFFFFF} Facção Inválida");
	}
	return 1;
}
CMD:criarfaccao(playerid, params[])
{
	if(!PlayerInfo[playerid][pLogado]) return 1;
	if (PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso a esse comando.");
	new opcao[34];
	if (sscanf(params, "s[34]", opcao)) return SendClientMessage(playerid, COLOR_LIGHTRED,"USE: /criarfaccao [Nome]");
	else
	{
	    new stringf[256],NomeDoMovel[32];
	    strmid(NomeDoMovel, opcao, 0, strlen(opcao), 255);

        for (new i = 1; i < MAX_FACCOES; i ++)
		{
		    if(FacInfo[i][fCriada] == 1)
				if(i == (MAX_FACCOES-1)) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} O limite de facções foi atingido.");
	    	if(FacInfo[i][fCriada] == 2)
			{
			    FacInfo[i][fOrdem] = newfacid+1;
			    FacInfo[i][fTipo] = 0;
			    FacInfo[i][fCriada] = 1;
    			format(FacInfo[i][fNome], 34, "%s",NomeDoMovel);

    			SalvarFaccao(i);
    			format(string, sizeof(string), "{FF6347}AdmCmd: Faccao %s [SQL ID: %d] criada| ServerID: %d.", NomeDoMovel, FacInfo[i][fID], i);
 				SendClientMessage(playerid, COLOR_LIGHTRED, string);
 				newfacid++;

 				//format(string, sizeof(string),"UPDATE `server` SET `fac_newid`='%d' WHERE `id`= 1", newfacid);
				mysql_function_query(Pipeline, string, false, "", "");
    			return 1;
			}
		}

 		format(stringf, sizeof(stringf), "INSERT INTO `faccoes` (`fNome`) VALUES('%s')", NomeDoMovel);
		mysql_function_query(Pipeline, stringf, false, "FaccaoCriada", "ds",playerid,NomeDoMovel);
	}
	return 1;
}

forward CarregarServerInfo();
public CarregarServerInfo() {
    new Rows, Fields;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		cache_get_field_content(0, "fac_newid", string);
	 	newfacid = strval(string);
	}
	return 1;
}

forward FaccaoCriada(playerid,StrNome[]);
public FaccaoCriada(playerid,StrNome[])
{
	for (new i = 0; i < MAX_FACCOES; i++){
		if (FacInfo[i][fCriada] == 0){
			new id = cache_insert_id();
			FacInfo[i][fID] =  id;
			FacInfo[i][fCriada] = 1;
			FacInfo[i][fTipo] = 0;
			FacInfo[i][fOrdem] = newfacid+1;

			strmid(FacInfo[i][fNome], StrNome, 0, strlen(StrNome), 255);

			format(string, sizeof(string), "{FF6347}AdmCmd: Faccao %s [SQL ID: %d] criada. | Ordem: %d", StrNome, id, newfacid);
			SendClientMessage(playerid, COLOR_LIGHTRED, string);
			newfacid++;

			//format(string, sizeof(string),"UPDATE `server` SET `fac_newid`='%d' WHERE `id`= 1", newfacid);
			mysql_function_query(Pipeline, string, false, "", "");

			SalvarFaccao(i);
			break;
		}
		
	}
	
    return 1;
}
//===========================================================================================================================================================================================
CMD:faccoes(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	ViewFactions(playerid);
	return 1;
}

stock ViewFactions(playerid)
{
	new counter, counter2, count_list, stringfac[2056], stringa[2056];

	format(stringfac, sizeof(stringfac), "ID\tNome da Facção\tMembros\tEm Serviço\n");
	strcat(stringa, stringfac);
	for (new ordem = 1; ordem < MAX_FACCOES; ordem ++)
	{
	    new i = ordem;
	    if(FacInfo[i][fCriada] == 1 && FacInfo[i][fID] > 0){
			//printf("%i\t%s\t{008C00}%i{FFFFFF}/%d\n", i, FacInfo[i][fNome], counter, FacInfo[i][fMembros]);
		    VendoTPDA[playerid][count_list] = i;
		    counter = 0;
		    counter2 = 0;
	    	foreach(Player, n) {
				if(PlayerInfo[n][pFac] == FacInfo[i][fID]) {
					counter++;
					if(PlayerInfo[n][pEmServico] == 1) counter2++;
				}
			}

			if(PlayerInfo[playerid][pAdmin] == 0) {
				if(FacInfo[i][fTipo] == FAC_TIPO_PMERJ || FacInfo[i][fTipo] == FAC_TIPO_EB || FacInfo[i][fTipo] == FAC_TIPO_BANK || FacInfo[i][fTipo] == FAC_TIPO_PCERJ || FacInfo[i][fTipo] == FAC_TIPO_CBERJ) format(stringfac, sizeof(stringfac), "%i\t%s\t{008C00}%i{FFFFFF}/%d\tEm serviço: %d\n", i, FacInfo[i][fNome], counter, FacInfo[i][fMembros], counter2);
				else format(stringfac, sizeof(stringfac), "%i\t%s\t{008C00}%i{FFFFFF}/%d\n", FacInfo[i][fNome], counter, FacInfo[i][fMembros]);
			}
			else {
				if(FacInfo[i][fTipo] == FAC_TIPO_PMERJ || FacInfo[i][fTipo] == FAC_TIPO_EB || FacInfo[i][fTipo] == FAC_TIPO_BANK || FacInfo[i][fTipo] == FAC_TIPO_PCERJ  || FacInfo[i][fTipo] == FAC_TIPO_CBERJ) format(stringfac, sizeof(stringfac), "%d\t%s\t{008C00}%i{FFFFFF}/%d\tEm serviço: %d\n", i, FacInfo[i][fNome], counter, FacInfo[i][fMembros], counter2);
				else format(stringfac, sizeof(stringfac), "%i\t%s\t{008C00}%i{FFFFFF}/%d\n", i, FacInfo[i][fNome], counter, FacInfo[i][fMembros]);
			}
			strcat(stringa, stringfac);
			count_list++;
		}
	}
	if(PlayerInfo[playerid][pAdmin] < 5) Dialog_Show(playerid, FactionsList, DIALOG_STYLE_TABLIST_HEADERS, "Facções [CP:RPP]", stringa, "Fechar", "");
	else Dialog_Show(playerid, FactionsList, DIALOG_STYLE_TABLIST_HEADERS, "Facções [CP:RPP]", stringa, "Editar", "Fechar");
	return 1;
}

stock ReturnFacByOrdem(ordem){
    for (new i = 1; i != MAX_FACCOES; i ++) {
        if(FacInfo[i][fCriada] == 1)
    		if(FacInfo[i][fOrdem] == ordem)
    	    	return i;
	}
	return -1;
}
stock GetFactionBySqlId(sqlid){
	if (sqlid == 0) return 0;
    for (new i = 0; i < MAX_FACCOES; i ++) {
        if(FacInfo[i][fCriada] == 1)
    		if(FacInfo[i][fID] == sqlid)
    	    return i;
	}
	return -1;
}

new SelectedEditFactionId[MAX_PLAYERS];
Dialog:FactionsList(playerid, response, listitem, inputtext[]){
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;

    if(response){
        new FacID = VendoTPDA[playerid][listitem], string_name[24];
        SelectedEditFactionId[playerid] = FacID;

        format(string_name, sizeof(string_name), "%s", FacInfo[FacID][fNome]);
        format(string, sizeof(string), "Mudar nome da Fac [%s]\nMudar o tipo da Fac [%d]\n----------\nDeletar Facção", FacInfo[FacID][fNome], FacInfo[FacID][fTipo]);
	    Dialog_Show(playerid, FactionsList2, DIALOG_STYLE_LIST, string_name, string, "Escolher", "Cancelar");
	}
	return 1;
}

Dialog:FactionsList2(playerid, response, listitem, inputtext[]){
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;

    if(response){
        new FacID = SelectedEditFactionId[playerid], string_name[24];

        switch(listitem)
        {
            case 0:
            {
                format(string_name, sizeof(string_name), "%s", FacInfo[FacID][fNome]);
                format(string, sizeof(string), "Mudar nome da Fac [%s]\n\nEntre com o novo nome da facção:", FacInfo[FacID][fNome], FacInfo[FacID][fTipo]);
	    		Dialog_Show(playerid, FactionsList_NewName, DIALOG_STYLE_INPUT, string_name, string, "Escolher", "Cancelar");
            }
            case 1:
            {
                format(string_name, sizeof(string_name), "%s - Tipo", FacInfo[FacID][fNome]);
                format(string, sizeof(string), "PMESP\nPCESP\nGBESP\nEB\nGOV\n--- [Drugs] ---\nNível 1\nNível 2\nNível 3\nNível 4\n--- [Armas] ---\nNível 1\nNível 2\nNível 3\nNível 4", FacInfo[FacID][fNome], FacInfo[FacID][fTipo]);
	    		Dialog_Show(playerid, FactionsList_NewType, DIALOG_STYLE_LIST, string_name, string, "Escolher", "Cancelar");
            }
            case 3:
            {
                format(string, sizeof(string), "Tem certeza que deseja deletar a facção?\n(%s)", FacInfo[FacID][fNome]);
                Dialog_Show(playerid, FactionsList_Del, DIALOG_STYLE_MSGBOX, "Deletar Facção", string, "DELETAR", "Cancelar");
            }
        }
	}
	return 1;
}
Dialog:FactionsList_Del(playerid, response, listitem, inputtext[]){
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;

    if(response){
        new FacID = SelectedEditFactionId[playerid];

        format(string, sizeof(string), "DELETE FROM faccoes WHERE `fID` = '%d'", FacInfo[FacID][fID]);
		mysql_function_query(Pipeline, string, false, "", "");

		FacInfo[FacID][fCriada] = 2;

		SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Facção deletada.");

		VendoTPDA[playerid][49] = -1;
	}
	return 1;
}

Dialog:FactionsList_NewType(playerid, response, listitem, inputtext[]){
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;

    if(response){
        new FacID = SelectedEditFactionId[playerid];
        switch(listitem)
        {
            case 0: {
                FacInfo[FacID][fTipo] = 1;
                SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Tipo alterado para: PMESP.");
            }
            case 1: {
                FacInfo[FacID][fTipo] = 2;
                SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Tipo alterado para: PCESP.");
            }
            case 2: {
                FacInfo[FacID][fTipo] = 3;
                SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Tipo alterado para: GBESP.");
            }
            case 3: {
                FacInfo[FacID][fTipo] = 5;
                SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Tipo alterado para: EB.");
            }
            case 4: {
                FacInfo[FacID][fTipo] = 4;
                SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Tipo alterado para: GOV.");
            }
            case 5: {
                FacInfo[FacID][fTipo] = 6;
                SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Tipo alterado para: Bank.");
            }
            case 6: {
                FacInfo[FacID][fTipo] = 7;
                SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Tipo alterado para: Load & Reload.");
            }
            case 7: {
                FacInfo[FacID][fTipo] = 8;
                SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Tipo alterado para: Governo.");
            }
            //Drugs
            case 8: {
                FacInfo[FacID][fTipo] = 10;
                SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Tipo alterado para: Drugs - Nível 1.");
            }
            case 9: {
                FacInfo[FacID][fTipo] = 11;
                SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Tipo alterado para: Drugs - Nível 2.");
            }
            case 10: {
                FacInfo[FacID][fTipo] = 12;
                SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Tipo alterado para: Drugs - Nível 3.");
            }
            case 11: {
                FacInfo[FacID][fTipo] = 13;
                SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Tipo alterado para: Drugs - Nível 4.");
            }
            //Armas
            case 12: {
                FacInfo[FacID][fTipo] = 14;
                SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Tipo alterado para: Armas - Nível 1.");
            }
            case 13: {
                FacInfo[FacID][fTipo] = 15;
                SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Tipo alterado para: Armas - Nível 2.");
            }
            case 14: {
                FacInfo[FacID][fTipo] = 16;
                SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Tipo alterado para: Armas - Nível 3.");
            }
            case 15: {
                FacInfo[FacID][fTipo] = 17;
                SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Tipo alterado para: Armas - Nível 4.");
            }

        }
		SalvarFaccao(FacID);
    }
    return 1;
}

Dialog:FactionsList_NewName(playerid, response, listitem, inputtext[]){
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;

    if(response){
        new FacID = SelectedEditFactionId[playerid];
		format(FacInfo[FacID][fNome], 24, "%s", inputtext);
		ViewFactions(playerid);
		SCM(playerid, COLOR_LIGHTRED, "AdmCmd: Nome da facção alterado com sucesso.");
		SalvarFaccao(FacID);
    }
	return 1;
}


COMMAND:setarportaofac(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new portaoid, faccao;
	if(sscanf(params, "dd", portaoid, faccao)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /setarportaofac [PortaoID] [Faction ID]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
		if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
		{
		    if(PortaoInfo[portaoid][ptCriado])
		    {
		        PortaoInfo[portaoid][ptFac] = FacInfo[faccao][fID];
		        PortaoInfo[portaoid][ptEmpresa] = 0;

				if(faccao != 190) format(string,sizeof(string),"{FF6347}AdmCmd: Você setou o portão %d para a facção %s [%d].", portaoid, FacInfo[faccao][fNome], faccao);
				else format(string,sizeof(string),"{FF6347}AdmCmd: Você setou o portão %d para o PMESP.", portaoid);
	    		SendClientMessage(playerid, COLOR_LIGHTRED, string);

	    		SalvarPortao(portaoid);
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "* Portão inválido.");
		}
	}
	return 1;
}

COMMAND:setarportaoemp(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new portaoid, faccao;
	if(sscanf(params, "dd", portaoid, faccao)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /setarportaoemp [PortaoID] [Empresa ID]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
		if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
		{
		    if(PortaoInfo[portaoid][ptCriado])
		    {
		        PortaoInfo[portaoid][ptFac] = 0;
		        PortaoInfo[portaoid][ptEmpresa] = faccao;

	      		format(string,sizeof(string),"{FF6347}AdmCmd: Você setou o portão %d para a empresa %s [%d].", portaoid, EmpInfo[faccao][eNome], faccao);
	    		SendClientMessage(playerid, COLOR_LIGHTRED, string);

	    		SalvarPortao(portaoid);
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "* Portão inválido.");
		}
	}
	return 1;
}

CMD:facname(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pFactionTeam] < 1) return 1;
    new type[255],id;
	if(sscanf(params, "ds[255]", id, type)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /facname [Facid] [Nome da Facção]");
	else
	{
	    if(PlayerInfo[playerid][pFac] > 0)
	    {
			strmid(FacInfo[id][fNome], type, 0, strlen(type), 255);

			format(string, sizeof(string), "[ADMIN] Você alterou o nome da facção %d para %s.", id, FacInfo[id][fNome]);
			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

			SalvarFaccao(id);
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma facção.");
	}
	return 1;
}


COMMAND:setarrange(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new portaoid, Range;
	if(sscanf(params, "dd", portaoid, Range)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /setarrange [PortaoID] [Range]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
		if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
		{
		    if(PortaoInfo[portaoid][ptCriado])
		    {
		        PortaoInfo[portaoid][ptRange] = Range;

	      		format(string,sizeof(string),"{FF6347}AdmCmd: Você setou o range do portão %d para %f.", portaoid, PortaoInfo[portaoid][ptRange]);
	    		SendClientMessage(playerid, COLOR_LIGHTRED, string);

	    		SalvarPortao(portaoid);
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Portão inválido.");
		}
	}
	return 1;
}

COMMAND:tempoaberto(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new portaoid, Range;
	if(sscanf(params, "dd", portaoid, Range)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /tempoaberto [PortaoID] [Tempo (Segundos)]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
		if (PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1) return 1;
		{
		    if(PortaoInfo[portaoid][ptCriado])
		    {
		        PortaoInfo[portaoid][ptTempo] = Range;

	      		format(string,sizeof(string),"{FF6347}AdmCmd: Você setou o tempo de abertura do portão %d para %d.", portaoid, PortaoInfo[portaoid][ptTempo]);
	    		SendClientMessage(playerid, COLOR_WHITE, string);

	    		SalvarPortao(portaoid);
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "* Portão inválido.");
		}
	}
	return 1;
}

CMD:aportao(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 5 && PlayerInfo[playerid][pPropertyTeam] < 1 && PlayerInfo[playerid][pFactionTeam] < 1) return 1;
	new opcao[24], var;
	if (sscanf(params, "s[24]I(300)", opcao,var))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"USE: /aportao [opção] [Variavel]");
		SendClientMessage(playerid, COLOR_LIGHTRED,"criar editar id trancar");
		return 1;
	}
    else
    {
        if (!strcmp(opcao, "criar", true))
        {
            if(var == 300) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} /aportao criar [modelo]");
            new str2[520];
            format(str2,sizeof(str2),"INSERT INTO portoes (ptModelo) VALUES ('%d')",var);
            mysql_function_query(Pipeline, str2, false, "PortaoCriado", "dd",playerid,var);
            return 1;
        }
		else if (!strcmp(opcao, "editar", true))
		{
		    if(var == 300) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO:{FFFFFF} /aportao editar [Portao ID]");
			for(new i; i < MAX_PORTOES; i++)
		    {
		        if(!PortaoInfo[var][ptCriado]) return 1;
		    	if(IsPlayerInRangeOfPoint(playerid, 10, PortaoInfo[i][ptX], PortaoInfo[i][ptY], PortaoInfo[i][ptZ]) && GetPlayerVirtualWorld(playerid) == PortaoInfo[i][ptWorld] && GetPlayerInterior(playerid) == PortaoInfo[i][ptInt])
		    	{
					format(string, sizeof(string), "{FF6347}INFO:{FFFFFF} Editando portão: %d!", i);
 					SendClientMessage(playerid, COLOR_WHITE, string);

 					PlayerInfo[playerid][pEditandoPortao][0] = i;
					PlayerInfo[playerid][pEditandoPortao][1] = -1;

					EditDynamicObject(playerid, PortaoInfo[i][ptObjeto]);
		        }
			}
		}
	 	else if (!strcmp(opcao, "id", true))
		{
		    new portoes = 0;
			for(new i; i < MAX_PORTOES; i++)
		    {
		        if(portoes < 10)
		        {
			    	if(IsPlayerInRangeOfPoint(playerid, 5, PortaoInfo[i][ptX], PortaoInfo[i][ptY], PortaoInfo[i][ptZ]) && GetPlayerVirtualWorld(playerid) == PortaoInfo[i][ptWorld] && GetPlayerInterior(playerid) == PortaoInfo[i][ptInt])
			    	{
						format(string, sizeof(string), "ERRO:{FFFFFF} Id do portao: %d!", i);
	 					SendClientMessage(playerid, COLOR_WHITE, string);
	 					portoes++;
			        }
				}
			}
		}
		else if (!strcmp(opcao, "trancar", true))
		{
		    if(var == 300) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /aportao trancar [Portao ID]");
	    	if(IsPlayerInRangeOfPoint(playerid, 50, PortaoInfo[var][ptX], PortaoInfo[var][ptY], PortaoInfo[var][ptZ]) && GetPlayerVirtualWorld(playerid) == PortaoInfo[var][ptWorld] && GetPlayerInterior(playerid) == PortaoInfo[var][ptInt])
	    	{
 	    		if(PortaoInfo[var][ptLock])
   	    		{
					format(string, sizeof(string), "{33AA33} Você destrancou o portão: %d!", var);
					SendClientMessage(playerid, COLOR_WHITE, string);
					PortaoInfo[var][ptLock] = 0;
				}
				else
				{
    				format(string, sizeof(string), "{33AA33} Você trancou o portão: %d!", var);
					SendClientMessage(playerid, COLOR_WHITE, string);
					PortaoInfo[var][ptLock] = 1;
				}
			}
		}
	}
	return 1;
}
forward PortaoCriado(playerid,modelid);
public PortaoCriado(playerid,modelid)
{
	new i = cache_insert_id();
    new Inter = GetPlayerInterior(playerid);
    new World = GetPlayerVirtualWorld(playerid);

    PortaoInfo[i][ptID] = i;
	PortaoInfo[i][ptCriado] = 1;
	PortaoInfo[i][ptFac] = 0;
	PortaoInfo[i][ptCasa] = -1;
	GetPlayerPos(playerid, PortaoInfo[i][ptX], PortaoInfo[i][ptY], PortaoInfo[i][ptZ]);
	PortaoInfo[i][ptInt] = Inter;
	PortaoInfo[i][ptWorld] = World;
	PortaoInfo[i][ptLock] = 1;
	PortaoInfo[i][ptAberto] = 0;
	PortaoInfo[i][ptModelo] = modelid;

	PlayerInfo[playerid][pEditandoPortao][0] = i;
	PlayerInfo[playerid][pEditandoPortao][1] = -1;
	format(string, sizeof(string), "{33AA33}Portao %d criado, ajuste a localização do mesmo!", i);
	SCM(playerid, -1, string);
	PortaoInfo[i][ptObjeto] = CreateDynamicObject(PortaoInfo[i][ptModelo], PortaoInfo[i][ptX], PortaoInfo[i][ptY], PortaoInfo[i][ptZ], 0.0,0.0,0.0, PortaoInfo[i][ptWorld], PortaoInfo[i][ptInt]);
	EditDynamicObject(playerid, PortaoInfo[i][ptObjeto]);
	return 1;
}
//===========================================================================================================================================================================================

forward StopTalk(playerid);
public StopTalk(playerid)
{
  	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
  	//in_anim[playerid] = 0;
    return 1;
}

public OnIncomingConnection(playerid, ip_address[], port)
{
	if(!strcmp(IncomingConnection[IncomingIP], ip_address, true) && IncomingConnection[IncomingTempo] > gettime()) {
		if(IncomingConnection[IncomingVezes] > 2) return BlockIpAddress(ip_address, 600 * 1000), printf("ip %s bloqueado!", ip_address);
		IncomingConnection[IncomingVezes]++;
		return 1;
	}
	format(IncomingConnection[IncomingIP], 16, ip_address);
	IncomingConnection[IncomingVezes] = 0;
	IncomingConnection[IncomingTempo] = gettime()+2;

    new url[255];
    format(url, sizeof(url), "proxy.conexao-roleplay.site/api-ip.php?ip=%s", ip_address);
    printf("%s", url);
    HTTP(playerid, HTTP_GET, url, "", "OnPlayerCheckIP");

	return 1;
}
forward OnPlayerCheckIP(playerid, response_code, data[]);
public OnPlayerCheckIP(playerid, response_code, data[])


{
    if(response_code == 200)
    {
        new pip[16], stringvpn[256];
        GetPlayerIp(playerid, pip, 16);
        printf("IP %s conectando de %s", pip, data);
        if (strcmp(data, "Brazil", true)) {

            format(stringvpn, sizeof(stringvpn), "AdmCmd: Um jogador (ID: %d) conectou do pais %s, IP: %s", playerid, data, pip);
            SendAdminMessage(COLOR_LIGHTRED, stringvpn);

		    /*format(string, sizeof(string),"banip %s", type);
			SendRconCommand(string);
			SendRconCommand("reloadbans");*/

        }
        return 1;
    } else {
        printf("ERRO NO CheckIP: %d, %s", response_code, data);
    }
    return 0;
}

stock IsPlayerInWater(playerid)
{
    new anim = GetPlayerAnimationIndex(playerid);
    if (((anim >=  1538) && (anim <= 1542)) || (anim == 1544) || (anim == 1250) || (anim == 1062)) return true;
	return false;
}

stock ChangeName(playerid,newname[])
{
    static query[256];

    format(query, sizeof(query), "UPDATE `accounts` SET `Username` = '%s' WHERE `ID` = '%d'",
        newname,
		PlayerInfo[playerid][pID]
	);
	mysql_function_query(Pipeline, query, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);

	format(string, sizeof(string), "Você mudou seu nome para %s!", newname);
	SCM(playerid, COLOR_LIGHTGREEN, string);
	format(PlayerInfo[playerid][pNomeP],24,"%s",newname);
	PlayerInfo[playerid][pChangeNames]--;

    Dialog_Show(playerid,DIALOG_CN_S,DIALOG_STYLE_MSGBOX,"Changename","Qual o sexo do seu personagem?","Masculino","Feminino");

	SetPlayerName(playerid, newname);

	for(new i = 0; i < MAX_CA_VEHICLES; i ++) { if(VehicleInfo[i][vOwner] == PlayerInfo[playerid][pID]) {format(VehicleInfo[i][vOwnerName],MAX_PLAYER_NAME,"%s",PlayerName(playerid,1)); }}

	return 1;
}

Dialog:DIALOG_CN_S(playerid, response, listitem, inputtext[])
{
    if(!response)
    {
        SendClientMessage(playerid, COLOR_GREEN, "[Namechange] Certo, agora sua personagem é uma Mulher. Boa vida nova!");
        PlayerInfo[playerid][pGender] = 2;
        //Dialog_Show(playerid,DIALOG_CN_ID,DIALOG_STYLE_INPUT,"Namechange","Qual a idade do seu personagem?","Masculino","Feminino");
    }
	else
	{
	    SendClientMessage(playerid, COLOR_GREEN, "[Namechange] Certo, agora sua personagem é um Homem. Boa vida nova!");
	    PlayerInfo[playerid][pGender] = 1;
	    //Dialog_Show(playerid,DIALOG_CN_ID,DIALOG_STYLE_INPUT,"Namechange","Qual a idade do seu personagem?","Masculino","Feminino");
	}
	return 1;
}
/*Dialog:DIALOG_CN_ID(playerid, response, listitem, inputtext[])
{
	new idade = strval(inputtext);
    PlayerInfo[playerid][pAge] = idade;
    format(string,126,"[Namechange] Certo, sua personagem tem %d anos. Boa vida nova!",idade);
    SCM(playerid, COLOR_GREEN, string);
    return 1;
}*/

stock IsPlayerFacingPlayer(playerid, targetid, Float:dOffset)
{
	new
 		Float:pX,
   		Float:pY,
     	Float:pZ,
      	Float:pA,
       	Float:X,
        Float:Y,
        Float:Z,
        Float:ang;

	if(!IsPlayerConnected(playerid) || !IsPlayerConnected(targetid)) return 0;

	GetPlayerPos(targetid, pX, pY, pZ);
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, pA);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	if(AngleInRangeOfAngle(-ang, pA, dOffset)) return true;

	return false;
}

stock AngleInRangeOfAngle(Float:a1, Float:a2, Float:range)
{
	a1 -= a2;
 	if((a1 < range) && (a1 > -range)) return true;
  	return false;
}

forward ClearAnim(playerid);
public ClearAnim(playerid)
{
	ClearAnimations(playerid);
 	return 1;
}

forward AdicionarAviso(playerid,novatrans[]);
public AdicionarAviso(playerid,novatrans[])
{
	new str[120], _string[256];
    format(_string, sizeof(_string),"%s", PlayerInfo[playerid][pAviso2]);	strmid(PlayerInfo[playerid][pAviso3], _string, 0, 255, 255);
    format(_string, sizeof(_string),"%s", PlayerInfo[playerid][pAviso1]);	strmid(PlayerInfo[playerid][pAviso2], _string, 0, 255, 255);
    format(str, sizeof(str),"%s", novatrans);								strmid(PlayerInfo[playerid][pAviso1], str, 0, 255, 255);
    PlayerInfo[playerid][pAvisos]++;

    if(PlayerInfo[playerid][pAvisos] == 3)
    {
        format(_string, sizeof(_string),"3 Avisos");
		PlayerInfo[playerid][pBanAll]++;
		BanExtra(playerid,_string,_string);
    }
}
//=========================================================================================================================================================

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if( _:clickedid == INVALID_TEXT_DRAW)
	{
	    if(GetPVarType(playerid, "pkrTableID") != 0) SelectTextDraw(playerid, COLOR_GOLD);
    	//else if(ComprandoCarro[playerid][2] == -1) SelectTextDraw(playerid, COLOR_GOLD);
	}
	//==========================================================================
    //                      		Botão: Menu/Confirma & Botão Direta
    //==========================================================================
    if(clickedid == Celular_Base[4] || clickedid == Celular_Base[8])//Botão Menu/Confirma --- Botão para Direita
    {
		if(CelularData[playerid][NavegandoCel] == 1)
		{
      		CelularData[playerid][MenuSelecionado] = 1;
		    SelecionarNovaOpcao(playerid,0,2);
		    NavegandoCelular(playerid,2);//Menu Celular
		}
		else if(CelularData[playerid][NavegandoCel] == 2)
		{
		    if(CelularData[playerid][MenuSelecionado] == 1)
		    {
		        CelularData[playerid][MenuSelecionado] = 1;
		        NavegandoCelular(playerid,4); //Contatos
		    }
		    else if(CelularData[playerid][MenuSelecionado] == 2)
		    {
		        CelularData[playerid][MenuSelecionado] = 1;
		        SelecionarNovaOpcao(playerid,3,2);
		        NavegandoCelular(playerid,5);//Mensagens
		    }
		    else if(CelularData[playerid][MenuSelecionado] == 3)
		    {
		        CelularData[playerid][MenuSelecionado] = 2;
		        SelecionarNovaOpcao(playerid,4,3);
		        NavegandoCelular(playerid,3);//Ajustes
		    }
		}
		//=========
		else if(CelularData[playerid][NavegandoCel] == 4)//Contatos
		{
  			new PaginaContatos = CelularData[playerid][MenuContatos],
				ContatoSelecionado = (PaginaContatos+CelularData[playerid][MenuSelecionado])-1;

            CelularData[playerid][VendoContato] = ContatoSelecionado;

            SelecionarNovaOpcao(playerid,CelularData[playerid][MenuSelecionado]+1,3);
            CelularData[playerid][MenuSelecionado] = 2;

            PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][2],ContatoInfo[playerid][ContatoSelecionado][ContatoNome]);
            PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][3],"Ligar");
			PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Mandar_sms");
			PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][5],"Editar");

			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][2]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][3]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][4]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][5]);

			CelularData[playerid][NavegandoCel] = 20;
		}
		else if(CelularData[playerid][NavegandoCel] == 20)
		{
            switch(CelularData[playerid][MenuSelecionado])
			{
		    	case 2: LigarPara(playerid, ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNumero], 1, -1);
		    	case 3:
		    	{
           			new Titulo[40];
					format(Titulo, sizeof(Titulo), "Enviar SMS - [%s]",ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNome]);
					Dialog_Show(playerid, DIALOG_CEL_ENV_SMS, DIALOG_STYLE_INPUT, Titulo, "Digite a mensagem a ser enviada.", "Enviar", "Cancelar");
		    	}
		    	case 4:
		    	{
		    	    CelularData[playerid][NavegandoCel] = 21;
		    	    CelularData[playerid][MenuSelecionado] = 1;
		    	    SelecionarNovaOpcao(playerid,4,2);

		    	    PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][2],"Editar_nome");
					PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][3],"Editar_numero");
					PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Deletar");
					PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][5],"_");

					PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][2]);
					PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][3]);
					PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][4]);
					PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][5]);
		    	}
			}
		}
		else if(CelularData[playerid][NavegandoCel] == 21)
		{
		    switch(CelularData[playerid][MenuSelecionado])
		    {
		        case 1:
				{
				    new Titulo[40];
					format(Titulo, sizeof(Titulo), "Editar Nome - [%s]",ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNome]);
					Dialog_Show(playerid, DIALOG_CEL_NOVONOME, DIALOG_STYLE_INPUT, Titulo, "Digite um novo nome para este contato", "Alterar", "Cancelar");
				}
				case 2:
				{
				    new Titulo[56],Msg[56];
					format(Titulo, sizeof(Titulo), "Editar Numero - [%s]",ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNome]);
					format(Msg, sizeof(Msg), "Numero atual: %d\n\nDigite um novo número para este contato.",ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNumero]);
					Dialog_Show(playerid, DIALOG_CEL_NOVONUMERO, DIALOG_STYLE_INPUT, Titulo, Msg, "Alterar", "Cancelar");
				}
				case 3:
				{
				    new Titulo[56],Msg[56];
					format(Titulo, sizeof(Titulo), "Deletar Contato - [%s]",ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNome]);
					format(Msg, sizeof(Msg), "Você tem certeza que deseja deletar %s de sua agenda?",ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNome]);
				    Dialog_Show(playerid, DIALOG_CEL_DELETAR, DIALOG_STYLE_MSGBOX, Titulo, Msg, "Deletar", "Cancelar");
				}
		    }
		}
		else if(CelularData[playerid][NavegandoCel] == 3)//Ajustes
		{
		    switch(CelularData[playerid][MenuSelecionado])
			{
		    	case 1: return 1;
		    	case 2:
		    	{
		    	    if(CelularData[playerid][celModo] < 3) CelularData[playerid][celModo]++;
		    	    else CelularData[playerid][celModo] = 1;
		    	    switch(CelularData[playerid][celModo])
					{
						case 1: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][3],"Modo:_Normal");
						case 2:
						{
						    PararToqueDeCelular(playerid);
							PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][3],"Modo:_Silencioso");
						}
						case 3:
						{
						    PararToqueDeCelular(playerid);
							PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][3],"Modo:_Aviao");
						}
					}
		    	}
		    	case 3:
		    	{
		    	    if(CelularData[playerid][celRingTone] < 8) CelularData[playerid][celRingTone]++;
		    	    else CelularData[playerid][celRingTone] = 1;
                    switch(CelularData[playerid][celRingTone])
					{
						case 1: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_OTB");
						case 2: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Go_track"); // PlayerPlaySound(playerid,1062,0.0,0.0,0.0);
						case 3: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Dual_track"); // PlayerPlaySound(playerid,1068,0.0,0.0,0.0);
						case 4: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Bee_track"); // 	PlayerPlaySound(playerid,1076,0.0,0.0,0.0);
						case 5: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Award"); //		PlayerPlaySound(playerid,1097,0.0,0.0,0.0);
						case 6: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Rock"); //		PlayerPlaySound(playerid,1183,0.0,0.0,0.0);
						case 7: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Emocional"); //	PlayerPlaySound(playerid,1185,0.0,0.0,0.0);
						case 8: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Orquestra"); //	PlayerPlaySound(playerid,1187,0.0,0.0,0.0);
					}
		    	}
		    	case 4:
		    	{
		    	    new Float:pos[3];
					GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    	    switch(CelularData[playerid][celRingTone])
					{
					    case 1: PlayerPlaySound(playerid,1142,pos[0], pos[1], pos[2]);
						case 2: PlayerPlaySound(playerid,1062,pos[0], pos[1], pos[2]);
						case 3: PlayerPlaySound(playerid,1068,pos[0], pos[1], pos[2]);
						case 4: PlayerPlaySound(playerid,1076,pos[0], pos[1], pos[2]);
						case 5: PlayerPlaySound(playerid,1097,pos[0], pos[1], pos[2]);
						case 6: PlayerPlaySound(playerid,1183,pos[0], pos[1], pos[2]);
						case 7: PlayerPlaySound(playerid,1185,pos[0], pos[1], pos[2]);
						case 8: PlayerPlaySound(playerid,1187,pos[0], pos[1], pos[2]);
					}
		    	}
	  		}
		}
		else if(CelularData[playerid][NavegandoCel] == 5)//Sms
		{
		    new PaginaContatos = CelularData[playerid][MenuContatos],
				ContatoSelecionado = (PaginaContatos+CelularData[playerid][MenuSelecionado])-1;

            if(MensagensInfo[playerid][ContatoSelecionado][smsAtivo] != 1) return 1;

		    LerSMS(playerid, ContatoSelecionado);
		}
		//=========
    }
    //==========================================================================
    //                      		Botão: Voltar / Seta Esquerda
    //==========================================================================
    else if(clickedid == Celular_Base[5] || clickedid == Celular_Base[9])//Botão Voltar -- Botão esquerda
    {
        if(CelularData[playerid][NavegandoCel] == 2)
		{
		    NavegandoCelular(playerid,6);//Voltar para a tela inicial
		}
		else if(CelularData[playerid][NavegandoCel] == 3 || CelularData[playerid][NavegandoCel] == 4 || CelularData[playerid][NavegandoCel] == 5)
		{
		    if(CelularData[playerid][NavegandoCel] == 3 && CelularData[playerid][MenuSelecionado] == 2 && clickedid == Celular_Base[9])
		    {
		        if(CelularData[playerid][celModo] > 1) CelularData[playerid][celModo]--;
	    	    else CelularData[playerid][celModo] = 3;
	    	    switch(CelularData[playerid][celModo])
				{
					case 1: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][3],"Modo:_Normal");
					case 2:
					{
					    PararToqueDeCelular(playerid);
						PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][3],"Modo:_Silencioso");
					}
					case 3:
					{
					    PararToqueDeCelular(playerid);
						PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][3],"Modo:_Aviao");
					}
				}
		    }
		    else if(CelularData[playerid][NavegandoCel] == 3 && CelularData[playerid][MenuSelecionado] == 3 && clickedid == Celular_Base[9])
		    {
		        if(CelularData[playerid][celRingTone] > 1) CelularData[playerid][celRingTone]--;
	    	    else CelularData[playerid][celRingTone] = 8;
          		switch(CelularData[playerid][celRingTone])
				{
					case 1: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_OTB");
					case 2: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Go_track"); // PlayerPlaySound(playerid,1062,0.0,0.0,0.0);
					case 3: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Dual_track"); // PlayerPlaySound(playerid,1068,0.0,0.0,0.0);
					case 4: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Bee_track"); // 	PlayerPlaySound(playerid,1076,0.0,0.0,0.0);
					case 5: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Award"); //		PlayerPlaySound(playerid,1097,0.0,0.0,0.0);
					case 6: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Rock"); //		PlayerPlaySound(playerid,1183,0.0,0.0,0.0);
					case 7: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Emocional"); //	PlayerPlaySound(playerid,1185,0.0,0.0,0.0);
					case 8: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Orquestra"); //	PlayerPlaySound(playerid,1187,0.0,0.0,0.0);
				}
			}
			else
			{
				SelecionarNovaOpcao(playerid,CelularData[playerid][MenuSelecionado]+1,2);
		    	CelularData[playerid][MenuSelecionado] = 1;
		    	NavegandoCelular(playerid,2);//Voltar para o Menu Celular
		    }
		}
		else if(CelularData[playerid][NavegandoCel] == 20)
		{
      		SelecionarNovaOpcao(playerid,CelularData[playerid][MenuSelecionado]+1,2);
		    CelularData[playerid][MenuSelecionado] = 1;
      		NavegandoCelular(playerid,4); //Contatos
		}
		else if(CelularData[playerid][NavegandoCel] == 21)//Contatos
		{
  			new ContatoSelecionado = CelularData[playerid][VendoContato];

            SelecionarNovaOpcao(playerid,CelularData[playerid][MenuSelecionado]+1,3);
            SelecionarNovaOpcao(playerid,5,3);
		    CelularData[playerid][MenuSelecionado] = 2;

            PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][2],ContatoInfo[playerid][ContatoSelecionado][ContatoNome]);
            PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][3],"Ligar");
			PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Mandar_sms");
			PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][5],"Editar");

			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][2]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][3]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][4]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][5]);

			CelularData[playerid][NavegandoCel] = 20;
		}
		else if(CelularData[playerid][NavegandoCel] == 50)
		{
		    NavegandoCelular(playerid,6);//Voltar para a tela inicial
		}
    }
    //==========================================================================
    //                      		FECHAR CELULAR
    //==========================================================================
    else if(clickedid == Celular_Base[6])
    {
        SumirCelular(playerid);
    }
    //==========================================================================
    //                      		SETA SUBIR
    //==========================================================================
	else if(clickedid == Celular_Base[7])
	{
	    if(CelularData[playerid][NavegandoCel] == 2)
 		{
 		    if(CelularData[playerid][MenuSelecionado] > 1)
	        {
	 		    new antigoSelect = (CelularData[playerid][MenuSelecionado]+1);
				CelularData[playerid][MenuSelecionado]--;
				new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
				SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);
			}
 		}
 		else if(CelularData[playerid][NavegandoCel] == 3) // Ajustes
 		{
 		    if(CelularData[playerid][MenuSelecionado] > 2)
	        {
	 		    new antigoSelect = (CelularData[playerid][MenuSelecionado]+1);
				CelularData[playerid][MenuSelecionado]--;
				new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
				SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);
			}
 		}
 		else if(CelularData[playerid][NavegandoCel] == 20)
		{
		    if(CelularData[playerid][MenuSelecionado] > 2)
	        {
	 		    new antigoSelect = (CelularData[playerid][MenuSelecionado]+1);
				CelularData[playerid][MenuSelecionado]--;
				new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
				SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);
			}
		}
        else if(CelularData[playerid][NavegandoCel] == 21)
		{
		    if(CelularData[playerid][MenuSelecionado] > 1)
	        {
	 		    new antigoSelect = (CelularData[playerid][MenuSelecionado]+1);
				CelularData[playerid][MenuSelecionado]--;
				new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
				SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);
			}
		}
	    else if(CelularData[playerid][NavegandoCel] == 4)
	    {
		    if(CelularData[playerid][MenuSelecionado] == 1)
	     	{
	     	    if(CelularData[playerid][MenuContatos] != 0)
	     	    {
                 	SelecionarNovaOpcao(playerid,2,5);
			        CelularData[playerid][MenuContatos] -= 4;
			        CelularData[playerid][MenuSelecionado] = 4;
			        NavegandoCelular(playerid,4); //Contatos
				}
		    }
		    else
		    {
          		new antigoSelect = (CelularData[playerid][MenuSelecionado]+1);
                CelularData[playerid][MenuSelecionado]--;
    			new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
	  			SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);
		    }
		}
		else if(CelularData[playerid][NavegandoCel] == 5)
	    {
	        new	PaginaContatos = CelularData[playerid][MenuContatos],
				ContatoSelecionado = (PaginaContatos+CelularData[playerid][MenuSelecionado])-1,
				StrMsg[17];

		    if(CelularData[playerid][MenuSelecionado] == 1)
	     	{
	     	    if(CelularData[playerid][MenuContatos] != 0)
	     	    {
                 	SelecionarNovaOpcao(playerid,2,5);
			        CelularData[playerid][MenuContatos] -= 4;
			        CelularData[playerid][MenuSelecionado] = 4;
			        NavegandoCelular(playerid,5); //SMS's
				}
		    }
		    else
		    {
          		new antigoSelect = (CelularData[playerid][MenuSelecionado]+1);
                CelularData[playerid][MenuSelecionado]--;
    			new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
	  			SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);
		    }
		    if(MensagensInfo[playerid][ContatoSelecionado][smsLido] == 2)
			{
			    new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
	 			format(StrMsg, 14, "%s",MensagensInfo[playerid][ContatoSelecionado][smsMensagemLimpa]);
				strcat(StrMsg, "...");
				MensagensInfo[playerid][ContatoSelecionado][smsLido] = 1;
  				PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][MenuSelect], StrMsg);
			}

			new Smsnaolidos = 0;
			for(new smss = 0; smss < 40; smss++)
			{
   				if(MensagensInfo[playerid][smss][smsLido] == 2) Smsnaolidos++;
			}
			if(Smsnaolidos == 0) TextDrawHideForPlayer(playerid,Celular_Base[13]);
		}
	}
	//==========================================================================
    //                      		SETA DESCER
    //==========================================================================
	else if(clickedid == Celular_Base[10])
	{
 		if(CelularData[playerid][NavegandoCel] == 2)
 		{
 		    if(CelularData[playerid][MenuSelecionado] < 3)
	        {
	 		    new antigoSelect = (CelularData[playerid][MenuSelecionado]+1);
				CelularData[playerid][MenuSelecionado]++;
				new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
				SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);
			}
 		}
 		else if(CelularData[playerid][NavegandoCel] == 3) // Ajustes
 		{
 		    if(CelularData[playerid][MenuSelecionado] < 4)
	        {
	 		    new antigoSelect = (CelularData[playerid][MenuSelecionado]+1);
				CelularData[playerid][MenuSelecionado]++;
				new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
				SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);
			}
 		}
 		else if(CelularData[playerid][NavegandoCel] == 20)
		{
		    if(CelularData[playerid][MenuSelecionado] < 4)
	        {
	 		    new antigoSelect = (CelularData[playerid][MenuSelecionado]+1);
				CelularData[playerid][MenuSelecionado]++;
				new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
				SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);
			}
		}
		else if(CelularData[playerid][NavegandoCel] == 21)
		{
		    if(CelularData[playerid][MenuSelecionado] < 3)
	        {
	 		    new antigoSelect = (CelularData[playerid][MenuSelecionado]+1);
				CelularData[playerid][MenuSelecionado]++;
				new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
				SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);
			}
		}
	    else if(CelularData[playerid][NavegandoCel] == 4)
	    {
	        if(CelularData[playerid][MenuSelecionado] == 4)
	        {
		    	new MaxContatos = GetPlayerMaxContatosCel(playerid);

				if((CelularData[playerid][MenuContatos]+4) < MaxContatos)
				{
	  				SelecionarNovaOpcao(playerid,5,2);
				    CelularData[playerid][MenuContatos] += 4;
				    CelularData[playerid][MenuSelecionado] = 1;
				    NavegandoCelular(playerid,4); //Contatos
				}
			}
			else
			{
			    new antigoSelect = (CelularData[playerid][MenuSelecionado]+1);
				CelularData[playerid][MenuSelecionado]++;
    			new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
  				SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);
			}
		}
		else if(CelularData[playerid][NavegandoCel] == 5)
	    {
	        new MaxSMSs = GetPlayerMaxSMSCel(playerid);

			new	PaginaContatos = CelularData[playerid][MenuContatos],
				ProxContato = (PaginaContatos+CelularData[playerid][MenuSelecionado]),
				ContatoSelecionado = (PaginaContatos+CelularData[playerid][MenuSelecionado])-1,
				StrMsg[17];

            if(MensagensInfo[playerid][ProxContato][smsAtivo] == 1)
			{
		        if(CelularData[playerid][MenuSelecionado] == 4)
		        {
					if((CelularData[playerid][MenuContatos]+4) < MaxSMSs)
					{
						SelecionarNovaOpcao(playerid,5,2);
		    			CelularData[playerid][MenuContatos] += 4;
					    CelularData[playerid][MenuSelecionado] = 1;
					    NavegandoCelular(playerid,5); //SMS's
					}
				}
				else
				{
    				new antigoSelect = (CelularData[playerid][MenuSelecionado]+1);
					CelularData[playerid][MenuSelecionado]++;
	    			new MenuSelect = CelularData[playerid][MenuSelecionado]+1;
	  				SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect);
				}
				if(MensagensInfo[playerid][ContatoSelecionado][smsLido] == 2)
				{
				    new MenuSelect = CelularData[playerid][MenuSelecionado];
				 	format(StrMsg, 14, "%s",MensagensInfo[playerid][ContatoSelecionado][smsMensagemLimpa]);
					strcat(StrMsg, "...");
					MensagensInfo[playerid][ContatoSelecionado][smsLido] = 1;
		    		PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][MenuSelect], StrMsg);
				}

				new Smsnaolidos = 0;
				for(new smss = 0; smss < 40; smss++)
				{
				    if(MensagensInfo[playerid][smss][smsLido] == 2) Smsnaolidos++;
				}
				if(Smsnaolidos == 0) TextDrawHideForPlayer(playerid,Celular_Base[13]);
			}
		}
	}
	//==========================================================================
	//                  				ORELHÃO
	//==========================================================================
	else if(clickedid == TelPubBase[6]) TelPubNovoNumero(playerid, 7);
	else if(clickedid == TelPubBase[7]) TelPubNovoNumero(playerid, 8);
	else if(clickedid == TelPubBase[8]) TelPubNovoNumero(playerid, 9);
	else if(clickedid == TelPubBase[9]) TelPubNovoNumero(playerid, 4);
	else if(clickedid == TelPubBase[10]) TelPubNovoNumero(playerid, 5);
	else if(clickedid == TelPubBase[11]) TelPubNovoNumero(playerid, 6);
	else if(clickedid == TelPubBase[12]) TelPubNovoNumero(playerid, 1);
	else if(clickedid == TelPubBase[13]) TelPubNovoNumero(playerid, 2);
	else if(clickedid == TelPubBase[14]) TelPubNovoNumero(playerid, 3);
	else if(clickedid == TelPubBase[15]) TelPubNovoNumero(playerid, 0);
	else if(clickedid == TelPubBase[4]) TelPubNovoNumero(playerid, 999);

 	for(new i=1; i < sizeof(ChangeColor); i++)
  	{
		if(clickedid == ChangeColor[i])
		{
			CancelSelectTextDraw(playerid);
			ComprandoCarro[playerid][2] = ColorsAvailable[i-1];
			for(new j; j < sizeof(ChangeColor); j++)
			{
				TextDrawHideForPlayer(playerid,ChangeColor[j]);
			}
			new parafac = 0;
			if (ComprandoCarro[playerid][3] == MODEL_SELECTION_CONCE_5) parafac = 1;
			printf("parafac: %d", parafac);
			Terminar_Compra(playerid, ComprandoCarro[playerid][0], ComprandoCarro[playerid][1], parafac);
		}
	}
	return 1;
}
forward QUERY_LOAD_ATMS();
public QUERY_LOAD_ATMS()
{
	new b[256];
	new rows,fields;
	cache_get_data(rows, fields);
 	for(new i; i < rows; i++)
  	{
        cache_get_field_content(i,"id",b);  				ATMs[i][atID] = strval(b);
        cache_get_field_content(i,"setada",b);         		ATMs[i][aSeteda] = strval(b);
        cache_get_field_content(i,"posx",b);         		ATMs[i][aposX] = floatstr(b);
        cache_get_field_content(i,"posy",b);         		ATMs[i][aposY] = floatstr(b);
        cache_get_field_content(i,"posz",b);         		ATMs[i][aposZ] = floatstr(b);
    	cache_get_field_content(i,"posr",b);         		ATMs[i][aposR] = floatstr(b);
    	cache_get_field_content(i,"aGrana",b);         		ATMs[i][aGrana] = strval(b);

		if(ATMs[i][aGrana] < 0)
			ATMs[i][aGrana] = 5000;

    	if(ATMs[i][aSeteda] == 1)
    	{
    		ATMs[i][aObjeto] = CreateDynamicObject(-2900, ATMs[i][aposX], ATMs[i][aposY], ATMs[i][aposZ], 0.000000, 0.000000, ATMs[i][aposR], 0);
			//gerartextoatm();
		}
	}
	return 1;
}

forward QUERY_LOAD_COFRELOJAS();
public QUERY_LOAD_COFRELOJAS()
{
	new b[256];
	new rows,fields;
	cache_get_data(rows, fields);
 	for(new i; i < rows; i++)
  	{
        cache_get_field_content(i,"id",b);  				cLoja[i][clID] = strval(b);
        cache_get_field_content(i,"setada",b);         		cLoja[i][clSeteda] = strval(b);
        cache_get_field_content(i,"posx",b);         		cLoja[i][clposX] = floatstr(b);
        cache_get_field_content(i,"posy",b);         		cLoja[i][clposY] = floatstr(b);
        cache_get_field_content(i,"posz",b);         		cLoja[i][clposZ] = floatstr(b);
    	cache_get_field_content(i,"posr",b);         		cLoja[i][clposR] = floatstr(b);


    	if(cLoja[i][clSeteda] == 1)
    	{
    		cLoja[i][clObjeto] = CreateDynamicObject(2332, cLoja[i][clposX], cLoja[i][clposY], cLoja[i][clposZ], 0.000000, 0.000000, cLoja[i][clposR], 0);
			//gerarcofreloja();
		}
	}
	return 1;
}

forward QUERY_LOAD_COFREBANCO();
public QUERY_LOAD_COFREBANCO()
{
	new b[256];
	new rows,fields;
	cache_get_data(rows, fields);
 	for(new i; i < rows; i++)
  	{
        cache_get_field_content(i,"id",b);  				cbanco[i][cbID] = strval(b);
        cache_get_field_content(i,"setada",b);         		cbanco[i][cbSeteda] = strval(b);
        cache_get_field_content(i,"posx",b);         		cbanco[i][cbposX] = floatstr(b);
        cache_get_field_content(i,"posy",b);         		cbanco[i][cbposY] = floatstr(b);
        cache_get_field_content(i,"posz",b);         		cbanco[i][cbposZ] = floatstr(b);
    	cache_get_field_content(i,"posr",b);         		cbanco[i][cbposR] = floatstr(b);


    	if(cbanco[i][cbSeteda] == 1)
    	{
    		cbanco[i][cbObjeto] = CreateDynamicObject(2332, cbanco[i][cbposX], cbanco[i][cbposY], cbanco[i][cbposZ], 0.000000, 0.000000, cbanco[i][cbposR], 0);
			//gerarcofrebanco();
		}
	}
	return 1;
}

forward QUERY_LOAD_JOIAS();
public QUERY_LOAD_JOIAS()
{
	new b[256];
	new rows,fields;
	cache_get_data(rows, fields);
 	for(new i; i < rows; i++)
  	{
        cache_get_field_content(i,"id",b);  				joalheria[i][jlID] = strval(b);
        cache_get_field_content(i,"setada",b);         		joalheria[i][jlSeteda] = strval(b);
        cache_get_field_content(i,"posx",b);         		joalheria[i][jlposX] = floatstr(b);
        cache_get_field_content(i,"posy",b);         		joalheria[i][jlposY] = floatstr(b);
        cache_get_field_content(i,"posz",b);         		joalheria[i][jlposZ] = floatstr(b);
    	cache_get_field_content(i,"posr",b);         		joalheria[i][jlposR] = floatstr(b);


    	if(joalheria[i][jlSeteda] == 1)
    	{
    		joalheria[i][jlObjeto] = CreateDynamicObject(2332, joalheria[i][jlposX], joalheria[i][jlposY], joalheria[i][jlposZ], 0.000000, 0.000000, joalheria[i][jlposR], 0);
			//gerarcofrebanco();
		}
	}
	return 1;
}

forward QUERY_LOAD_LABORATORIO();
public QUERY_LOAD_LABORATORIO()
{
	new b[256];
	new rows,fields;
	cache_get_data(rows, fields);
 	for(new i; i < rows; i++)
  	{
        cache_get_field_content(i,"id",b);  				LaboDrug[i][ldID] = strval(b);
        cache_get_field_content(i,"setada",b);         		LaboDrug[i][ldSeteda] = strval(b);
        cache_get_field_content(i,"posx",b);         		LaboDrug[i][ldposX] = floatstr(b);
        cache_get_field_content(i,"posy",b);         		LaboDrug[i][ldposY] = floatstr(b);
        cache_get_field_content(i,"posz",b);         		LaboDrug[i][ldposZ] = floatstr(b);
    	cache_get_field_content(i,"posr",b);         		LaboDrug[i][ldposR] = floatstr(b);


    	if(LaboDrug[i][ldSeteda] == 1)
    	{
    		LaboDrug[i][ldObjeto] = CreateDynamicObject(-2307, LaboDrug[i][ldposX], LaboDrug[i][ldposY], LaboDrug[i][ldposZ], 0.000000, 0.000000, LaboDrug[i][ldposR], 0);
			//gerartextolabo();
		}
	}
	return 1;
}
//=========================================================================================================================================================
//                                                          ARMARIO DINAMICO / Dudut
//=========================================================================================================================================================
CMD:attachtrailer(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	if(!PlayerInfo[playerid][pLogado]) return 1;
	new vehicleid, trailerid;
	if (sscanf(params, "ii", vehicleid, trailerid)) return SendClientMessage(playerid, COLOR_LIGHTRED,"USE: /attachtrailer [veiculoid] [trailerid]");
	else
	{
		SendClientMessage(playerid, COLOR_WHITE,"Comando executado com sucesso.");
		AttachTrailerToVehicle(trailerid, vehicleid);
	}
	return 1;
}
CMD:setararmario(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	if(!PlayerInfo[playerid][pLogado]) return 1;
	new facid;
	if (sscanf(params, "i", facid)) return SendClientMessage(playerid, COLOR_LIGHTRED,"USE: /setarrarmario [facID]");
	else
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		FacInfo[facid][fArmarioPosX] = x;
		FacInfo[facid][fArmarioPosY] = y;
		FacInfo[facid][fArmarioPosZ] = z;  
		FacInfo[facid][fArmarioVw] =  GetPlayerVirtualWorld(playerid);
		gerarArmario(facid);
		SalvarFaccao(facid);
	}
	return 1;
}
stock gerarArmario(facid){
	if (IsValidDynamic3DTextLabel(FacInfo[facid][fArmario3DText])) DestroyDynamic3DTextLabel(FacInfo[facid][fArmario3DText]);
	if (IsValidDynamicPickup(FacInfo[facid][fArmarioPickup])) DestroyDynamicPickup(FacInfo[facid][fArmarioPickup]);

	new text[128];
	format(text, sizeof(text), "[%s]\n/trabalho'\nUse '/equipar'\nUse '/uniforme'\nUse '/armario'", FacInfo[facid][fNome]);
	FacInfo[facid][fArmario3DText] = CreateDynamic3DTextLabel(text, 0xffffffff, FacInfo[facid][fArmarioPosX], FacInfo[facid][fArmarioPosY], FacInfo[facid][fArmarioPosZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, FacInfo[facid][fArmarioVw]);
    FacInfo[facid][fArmarioPickup] = CreateDynamicPickup(1239,  1, FacInfo[facid][fArmarioPosX], FacInfo[facid][fArmarioPosY], FacInfo[facid][fArmarioPosZ], FacInfo[facid][fArmarioVw]);
}


/*stock gerarcofrebanco()
{
	for(new i = 0; i < MAX_COFREB; i++)
    {
		new text[128];
		format(text, sizeof(text), "[COFRE]\n/'\nUse '/explodir");
		CreateDynamic3DTextLabel(text, 0xffffffff, cbanco[i][cbposX], cbanco[i][cbposY], cbanco[i][cbposZ]);
	}
	return 1;
}

stock gerarcofreloja()
{
	for(new i = 0; i < MAX_COFRE; i++)
    {
		new text[128];
		format(text, sizeof(text), "[COFRE]\n/'\nUse '/explodir");
		CreateDynamic3DTextLabel(text, 0xffffffff, cLoja[i][clposX], cLoja[i][clposY], cLoja[i][clposZ]);
	}
	return 1;
}

stock gerartextoatm()
{
	for(new i = 0; i < MAX_ATM; i++)
	{
		new text[128];
		format(text, sizeof(text), "[CAIXA]\n/'\nUse '/caixa'\nUse '/explodir'");
		CreateDynamic3DTextLabel(text, 0xffffffff, ATMs[i][aposX], ATMs[i][aposY], ATMs[i][aposZ]);
	}
	return 1;
}
stock gerartextolabo()
{
	for(new i = 0; i < MAX_COFREB; i++)
	{
		new text[128];
		format(text, sizeof(text), "[LABORATORIO]\n/'\nUse '/misturar'");
		CreateDynamic3DTextLabel(text, 0xffffffff, LaboDrug[i][ldposX], LaboDrug[i][ldposY], LaboDrug[i][ldposZ]);
	}
	return 1;
}*/
//=========================================================================================================================================================
//                      										ATM SYSTEM / Freeze
//=========================================================================================================================================================
COMMAND:criaratm(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		CriarATMDB(playerid);
		return 1;
	}
	return 1;
}
stock CriarATMDB(playerid)
{
	new str[256];
    for(new i = 0; i < MAX_ATM; i++)
    {
        if(ATMs[i][aSeteda] == 0)
        {
            ATMs[i][aSeteda] = 1;
            format(str,sizeof(str),"INSERT INTO rp_atms (setada) VALUES ('%d')", ATMs[i][aSeteda]);
   			mysql_function_query(Pipeline, str, false, "CriouATMnaDB", "d",playerid);
   			return 1;
		}
	}
	return 1;
}
forward CriouATMnaDB(playerid);
public CriouATMnaDB(playerid)
{
    new Float:sys_pos_dono[3];
	new i = cache_insert_id();
    GetPlayerPos(playerid, sys_pos_dono[0], sys_pos_dono[1], sys_pos_dono[2]);

    ATMs[i][atID] = i;
	ATMs[i][aGrana] = 5000;
	ATMs[i][aposX] = sys_pos_dono[0];
	ATMs[i][aposY] = sys_pos_dono[1]+2;
	ATMs[i][aposZ] = sys_pos_dono[2];

	ATMs[i][aObjeto] = CreateDynamicObject(-2900, sys_pos_dono[0], sys_pos_dono[1]+2, sys_pos_dono[2]-1, 0.000000, 0.000000, 0.0, 0);
   	//Streamer_UpdateEx(playerid, sys_pos_dono[0], sys_pos_dono[1], sys_pos_dono[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
   	Streamer_Update(playerid);
    EditDynamicObject(playerid, ATMs[i][aObjeto]);
    SetPVarInt(playerid, "EditATM", 1);
    SetPVarInt(playerid, "EditATMID", i);
    return 1;
}
forward SaveATM(i);
public SaveATM(i)
{
	new str[254];
	format(str,sizeof(str),"UPDATE `rp_atms` SET `posx`='%f',`posy`='%f',`posz`='%f',`posr`='%f',`aGrana`='%d' WHERE id=%d LIMIT 1",
 	ATMs[i][aposX],
	ATMs[i][aposY],
	ATMs[i][aposZ],
	ATMs[i][aposR],
	ATMs[i][aGrana],
	ATMs[i][atID]);
	mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
	return 1;
}
//=================[SISTEMA DE LABOLATORIO]======================
COMMAND:criarlabo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if (PlayerInfo[playerid][pAdmin] < 5)
	{
		CriarFABRICADROGA(playerid);
		return 1;
	}
	return 1;
}
stock CriarFABRICADROGA(playerid)
{
	new str[256];
    for(new i = 0; i < MAX_COFREB; i++)
    {
        if(LaboDrug[i][ldSeteda] == 0)
        {
            LaboDrug[i][ldSeteda] = 1;
            format(str,sizeof(str),"INSERT INTO rp_laboratorio (setada) VALUES ('%d')", LaboDrug[i][ldSeteda]);
   			mysql_function_query(Pipeline, str, false, "CriouFABRICAnaDB", "d",playerid);
   			return 1;
		}
	}
	return 1;
}
forward CriouFABRICAnaDB(playerid);
public CriouFABRICAnaDB(playerid)
{
    new Float:sys_pos_dono[3];
	new i = cache_insert_id();
    GetPlayerPos(playerid, sys_pos_dono[0], sys_pos_dono[1], sys_pos_dono[2]);

    LaboDrug[i][ldID] = i;
	LaboDrug[i][ldposX] = sys_pos_dono[0];
	LaboDrug[i][ldposY] = sys_pos_dono[1]+2;
	LaboDrug[i][ldposZ] = sys_pos_dono[2];

	LaboDrug[i][ldObjeto] = CreateDynamicObject(-2307, sys_pos_dono[0], sys_pos_dono[1]+2, sys_pos_dono[2]-1, 0.000000, 0.000000, 0.0, 0);
   	Streamer_Update(playerid);
    EditDynamicObject(playerid, LaboDrug[i][ldObjeto]);
    SetPVarInt(playerid, "EditFABRICAD", 1);
    SetPVarInt(playerid, "EditFABRICADID", i);
    return 1;
}
forward SaveFABRICAD(i);
public SaveFABRICAD(i)
{
	new str[254];
	format(str,sizeof(str),"UPDATE `rp_laboratorio` SET `posx`='%f',`posy`='%f',`posz`='%f',`posr`='%f' WHERE id=%d LIMIT 1",
 	LaboDrug[i][ldposX],
	LaboDrug[i][ldposY],
	LaboDrug[i][ldposZ],
	LaboDrug[i][ldposR],
	LaboDrug[i][ldID]);
	mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
	return 1;
}
//=================[SISTEMA ROUBO DE COFRE]======================
COMMAND:criarjoia(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		CriarJOIA(playerid);
		return 1;
	}
	return 1;
}
stock CriarJOIA(playerid)
{
	new str[256];
    for(new i = 0; i < MAX_JOIA; i++)
    {
        if(joalheria[i][jlSeteda] == 0)
        {
            joalheria[i][jlSeteda] = 1;
            format(str,sizeof(str),"INSERT INTO rp_joias (setada) VALUES ('%d')", joalheria[i][jlSeteda]);
   			mysql_function_query(Pipeline, str, false, "CriouJOIAnaDB", "d",playerid);
   			return 1;
		}
	}
	return 1;
}
forward CriouJOIAnaDB(playerid);
public CriouJOIAnaDB(playerid)
{
    new Float:sys_pos_dono[3];
	new i = cache_insert_id();
    GetPlayerPos(playerid, sys_pos_dono[0], sys_pos_dono[1], sys_pos_dono[2]);

    joalheria[i][jlID] = i;
	joalheria[i][jlposX] = sys_pos_dono[0];
	joalheria[i][jlposY] = sys_pos_dono[1]+2;
	joalheria[i][jlposZ] = sys_pos_dono[2];

	joalheria[i][jlObjeto] = CreateDynamicObject(2332, sys_pos_dono[0], sys_pos_dono[1]+2, sys_pos_dono[2]-1, 0.000000, 0.000000, 0.0, 0);
   	//Streamer_UpdateEx(playerid, sys_pos_dono[0], sys_pos_dono[1], sys_pos_dono[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
   	Streamer_Update(playerid);
    EditDynamicObject(playerid, joalheria[i][jlObjeto]);
    SetPVarInt(playerid, "EditJOIA", 1);
    SetPVarInt(playerid, "EditJOIAID", i);
    return 1;
}
forward SaveJOIA(i);
public SaveJOIA(i)
{
	new str[254];
	format(str,sizeof(str),"UPDATE `rp_joias` SET `posx`='%f',`posy`='%f',`posz`='%f',`posr`='%f' WHERE id=%d LIMIT 1",
 	joalheria[i][jlposX],
	joalheria[i][jlposY],
	joalheria[i][jlposZ],
	joalheria[i][jlposR],
	joalheria[i][jlID]);
	mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
	return 1;
}
COMMAND:criarcofre(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		CriarCOFREBDB(playerid);
		return 1;
	}
	return 1;
}
stock CriarCOFREBDB(playerid)
{
	new str[256];
    for(new i = 0; i < MAX_COFREB; i++)
    {
        if(cbanco[i][cbSeteda] == 0)
        {
            cbanco[i][cbSeteda] = 1;
            format(str,sizeof(str),"INSERT INTO rp_joias (setada) VALUES ('%d')", cbanco[i][cbSeteda]);
   			mysql_function_query(Pipeline, str, false, "CriouCOFREBnaDB", "d",playerid);
   			return 1;
		}
	}
	return 1;
}
forward CriouCOFREBnaDB(playerid);
public CriouCOFREBnaDB(playerid)
{
    new Float:sys_pos_dono[3];
	new i = cache_insert_id();
    GetPlayerPos(playerid, sys_pos_dono[0], sys_pos_dono[1], sys_pos_dono[2]);

    cbanco[i][cbID] = i;
	cbanco[i][cbposX] = sys_pos_dono[0];
	cbanco[i][cbposY] = sys_pos_dono[1]+2;
	cbanco[i][cbposZ] = sys_pos_dono[2];

	cbanco[i][cbObjeto] = CreateDynamicObject(2332, sys_pos_dono[0], sys_pos_dono[1]+2, sys_pos_dono[2]-1, 0.000000, 0.000000, 0.0, 0);
   	//Streamer_UpdateEx(playerid, sys_pos_dono[0], sys_pos_dono[1], sys_pos_dono[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
   	Streamer_Update(playerid);
    EditDynamicObject(playerid, cbanco[i][cbObjeto]);
    SetPVarInt(playerid, "EditCOFREB", 1);
    SetPVarInt(playerid, "EditCOFREBID", i);
    return 1;
}
forward SaveCOFREB(i);
public SaveCOFREB(i)
{
	new str[254];
	format(str,sizeof(str),"UPDATE `rp_cofre` SET `posx`='%f',`posy`='%f',`posz`='%f',`posr`='%f' WHERE id=%d LIMIT 1",
 	cbanco[i][cbposX],
	cbanco[i][cbposY],
	cbanco[i][cbposZ],
	cbanco[i][cbposR],
	cbanco[i][cbID]);
	mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
	return 1;
}

COMMAND:criarcofrel(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] >= 5)
	{
		CriarCOFRELDB(playerid);
		return 1;
	}
	return 1;
}
stock CriarCOFRELDB(playerid)
{
	new str[256];
    for(new i = 0; i < MAX_COFRE; i++)
    {
        if(cLoja[i][clSeteda] == 0)
        {
            cLoja[i][clSeteda] = 1;
            format(str,sizeof(str),"INSERT INTO rp_cloja (setada) VALUES ('%d')", cLoja[i][clSeteda]);
   			mysql_function_query(Pipeline, str, false, "CriouCOFRELnaDB", "d",playerid);
   			return 1;
		}
	}
	return 1;
}
forward CriouCOFRELnaDB(playerid);
public CriouCOFRELnaDB(playerid)
{
    new Float:sys_pos_dono[3];
	new i = cache_insert_id();
    GetPlayerPos(playerid, sys_pos_dono[0], sys_pos_dono[1], sys_pos_dono[2]);

    cLoja[i][clID] = i;
	cLoja[i][clposX] = sys_pos_dono[0];
	cLoja[i][clposY] = sys_pos_dono[1]+2;
	cLoja[i][clposZ] = sys_pos_dono[2];

	cLoja[i][clObjeto] = CreateDynamicObject(2332, sys_pos_dono[0], sys_pos_dono[1]+2, sys_pos_dono[2]-1, 0.000000, 0.000000, 0.0, 0);
   	//Streamer_UpdateEx(playerid, sys_pos_dono[0], sys_pos_dono[1], sys_pos_dono[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
   	Streamer_Update(playerid);
    EditDynamicObject(playerid, cLoja[i][clObjeto]);
    SetPVarInt(playerid, "EditCOFREL", 1);
    SetPVarInt(playerid, "EditCOFRELID", i);
    return 1;
}
forward SaveCOFREL(i);
public SaveCOFREL(i)
{
	new str[254];
	format(str,sizeof(str),"UPDATE `rp_cloja` SET `posx`='%f',`posy`='%f',`posz`='%f',`posr`='%f' WHERE id=%d LIMIT 1",
 	cLoja[i][clposX],
	cLoja[i][clposY],
	cLoja[i][clposZ],
	cLoja[i][clposR],
	cLoja[i][clID]);
	mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
	return 1;
}

CMD:comecarcarregamento(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_BANK)
	{
	    new CaixasAEntregar=0,str[64];
		for(new i = 0; i < MAX_ATM; i++)
 		{
   			if(ATMs[i][aSeteda] == 1)
  			{
  				if(ATMs[i][aGrana] < 15000)
    			{
 	    			CaixasAEntregar++;
   	    			format(str,sizeof(str),"%d",CaixasAEntregar);
   	    			ATMText[i] = CreatePlayer3DTextLabel(playerid,str,0x00893F9E,ATMs[i][aposX],ATMs[i][aposY],ATMs[i][aposZ],20.0);
				}
				else
				{
    				format(str,sizeof(str),"%d",CaixasAEntregar);
				    ATMText[i] = CreatePlayer3DTextLabel(playerid,str,0x8900009E,ATMs[i][aposX],ATMs[i][aposY],ATMs[i][aposZ],20.0);
				}
    		}
   		}
	   	if(CaixasAEntregar > 0)
	   	{
	    	format(str,sizeof(str),"Atualmente %d caixas eletrônicos precisam ser carregadas.",CaixasAEntregar); SendClientMessage(playerid,0xFF7B30FF,str);
   			SECURITY_VEHICLE[playerid] = GetPlayerVehicleID(playerid);
			company_work_stage[playerid] = 1;
			SetPlayerCheckpoint(playerid, 1405.7192,-5.6531,1003.9926,5.0);
			cp_target[playerid] = 1;
			SendClientMessage(playerid,0xFF7B30FF,"Vá até o banco da Caixa Economica e fale com o segurança para pegar os malotes de dinheiro.");
			SendClientMessage(playerid,0xFF7B30FF, "Use {698596}/pararcarregamento{FFFFFF} quando desejar parar as entregas de malote.");
			SetPVarInt(playerid, "PegarDinheiro", 1);
		}
		else
		{
			SendClientMessage(playerid,0xFF7B30FF,"Os serviços de sua corporação não estão sendo solicitados no momento.");
			for(new i = 0; i < MAX_ATM; i++)
			{
				if(ATMs[i][aSeteda] == 1)
        		{
    	 			DeletePlayer3DTextLabel(playerid, ATMText[i]);
				}
			}
		}
	}
	return 1;
}

COMMAND:falar(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(IsPlayerInRangeOfPoint(playerid,5.0, 1405.7192,-5.6531,1003.9926))
 	{
 	    if(PlayerInfo[playerid][pArmaMao] != 0) return SCM(playerid, COLOR_LIGHTRED, "Você não pode pegar um malote em quanto segura uma arma.");
  		new str[64];
		if(company_work_stage[playerid] == 2)
		{
			if(SECURITY_SEGURANDOMALOTE[playerid] == 0)
   			{
	    		//BizInfo[in_biz[playerid]][bBank] -= 1000;
			    SetPlayerAttachedObject( playerid, 0, 1210,5,0.3,0.1,0.0,0.0,270.0,0.0);
			    ProxDetector(10.0, playerid, "Segurança diz: Olá, eu estava lhe aguardando, aqui está o malote.",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
    			format(str,sizeof(str),"O Segurança entrega um malote a %s.",PlayerName(playerid, 1));
				ProxDetector(10.0, playerid, str,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SendClientMessage(playerid,0xFF7B30FF,"Leve o malote para o caminhão e guarde-o usando {698596}/v guardarmalote{FFFFFF}.");

				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(playerid,X,Y,Z);
			    GetPosInFrontOfVehicle(SECURITY_VEHICLE[playerid], X, Y, -2.5);
				SetPlayerCheckpoint(playerid,X,Y,Z,2.0);
				cp_target[playerid] = 1;
				SECURITY_SEGURANDOMALOTE[playerid] = 1;
				return 1;
			}
			else return SendClientMessage(playerid,COLOR_RED,"Você já está segurando um malote!");
		}
		else
		{
			ProxDetector(10.0, playerid, "Segurança diz: Olá, desculpe mas não posso conversar agora.",COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			return 1;
		}
	}
	return 1;
}

COMMAND:entregarmalotes(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
  		if(company_work_stage[playerid] > 0)
    	{
     		for(new i = 0; i < MAX_ATM; i++)
		 	{
  				if(ATMs[i][aGrana] < 15000)
	    		{
  	    			SendClientMessage(playerid, 0xFF7B30FF, "Leve o malote até um caixa eletrônico e use o comando {698596}/carregaratm{FFFFFF}.");
					company_work_stage[playerid] = 5;
 					return 1;
      			}
			}
			SendClientMessage(playerid,COLOR_LIGHTRED,"Nenhum caixa eletrônico precisa ser carregada no momento.");
			return 1;
  		}
  		else return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não está trabalhando.");
	}
	else return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não está no banco do motorista do caminhão.");
}

COMMAND:carregaratm(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	for(new i = 0; i < MAX_ATM; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,3.0,ATMs[i][aposX], ATMs[i][aposY], ATMs[i][aposZ]))
 		{
   			if(company_work_stage[playerid] == 5)
 	    	{
       			if(SECURITY_SEGURANDOMALOTE[playerid] == 1)
 		    	{
        			if(ATMs[i][aGrana] < 15000)
	   				{
		    			SetProgressBarValue(progress_bar[playerid],0.0);
 				    	ShowProgressBarForPlayer(playerid,progress_bar[playerid]);
  				    	CarregandoATM[playerid] = i;
			    		SendClientMessage(playerid, 0xFF7B30FF, "Você está colocando o dinheiro dentro do caixa eletrônico.");
			    		TogglePlayerControllable(playerid,0);

			    		ApplyAnimation(i, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
						ComAnim[i] = 0;
						ClearAnimations(i, 1);

			    		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			    		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			    		SetPlayerProgressBar(playerid,PROGRESS_BAR_MALOTE,8);
					}
    				return SendClientMessage(playerid, COLOR_RED, "Esse caixa eletrônico não está precisando ser recarregada.");
				}
				else return SendClientMessage(playerid, 0xD90000FF, "Você não pegou um malote no caminhão. {698596}/v pegarmalote{D90000} para pegar um.");
    		}
      	}
	}
	return 1;
}

COMMAND:pararcarregamento(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(company_work_stage[playerid] > 0)
 	{
  		DisablePlayerCheckpoint(playerid);
		company_work_stage[playerid] = 0;
		SendClientMessage(playerid,0xD90000FF,"Trabalho cancelado.");
		for(new i = 0; i < MAX_ATM; i++)
		{
			if(ATMs[i][aSeteda] == 1)
			{
				DeletePlayer3DTextLabel(playerid, ATMText[i]);
			}
		}
	}
	return 1;
}

stock OnProgressBarFinish(playerid,type)
{
	switch(type)
	{
		case PROGRESS_BAR_MALOTE:
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	        {
             	if(IsPlayerInRangeOfPoint(playerid,10.0,ATMs[CarregandoATM[playerid]][aposX],ATMs[CarregandoATM[playerid]][aposY],ATMs[CarregandoATM[playerid]][aposZ]))
	            {
	            	ATMs[CarregandoATM[playerid]][aGrana] += 5000;
	            	CarregandoATM[playerid] = -1;
	            	SECURITY_SEGURANDOMALOTE[playerid] = 0;
					SendClientMessage(playerid, 0xFF7B30FF, "Você carregou o caixa eletrônico com 5 mil reais.");
		    		TogglePlayerControllable(playerid,1);
		    		RemovePlayerAttachedObject(playerid, 0);

		    		//new pay = 600;
        			//new player_pay = ((pay /100) * CompanyInfo[slot][ciPayRate]);

		    		//CompanyInfo[slot][ciBank] += (pay - player_pay);
					//CompanyInfo[slot][ciJobsComplete]++;
					//CompanyInfo[slot][ciJobMoney] += (pay - player_pay);
					//CharacterInfo[playerid][active_character[playerid]][cPayday] += player_pay;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "Você não está proximo o caixa eletrônico que está recarregando.");
	            	CarregandoATM[playerid] = -1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_RED, "Você precisa estar apé para concluir a recarga.");
	            CarregandoATM[playerid] = -1;
	        }
		}
	}
	return 1;
}

public CreateFireEx(Float:X, Float:Y, Float:Z, World, Interior,Health)
{
    for(new i=0;i<sizeof(FDInfo);i++)
    {
		if(FDInfo[i][fObject] == 0)
		{
		    FDInfo[i][fObject] = CreateDynamicObject(18691, X, Y, Z-2.0, 0.0, 0.0, 0.0, World, Interior, -1, 800.0);
		    FDInfo[i][fdX]=X;
		    FDInfo[i][fdY]=Y;
		    FDInfo[i][fdZ]=Z;
		    FDInfo[i][fWorld]=World;
		    FDInfo[i][fInt]=Interior;
		    FDInfo[i][fTime]=60;
		    FDInfo[i][fHealth]=Health;
		    return 1;
		}
    }
    return 1;
}
COMMAND:afogo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new Float:X, Float:Y, Float:Z;
    	GetPlayerPos(playerid, X, Y, Z);
		CreateFireEx(X, Y, Z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), 40);
	}
	return 1;
}
COMMAND:localizarfogo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[FacId][fTipo] == FAC_TIPO_CBERJ)
    {
		new found = 0;
      	for(new i = 0; i < sizeof(FDInfo); i++)
  	    {
		    if(FDInfo[i][fTime] > 0)
		    {
				SendClientMessage(playerid, COLOR_WHITE, "[Despacho]: Nós marcamos a posição do incêndio no seu GPS.");
				//new area[TOTAL_ZONE_NAME];
 				//Get2DZone(area, TOTAL_ZONE_NAME, FDInfo[i][fdX], FDInfo[i][fdY], FDInfo[i][fdZ]);
				//SendClientMessage(playerid, COLOR_WHITE, string);
	            SetPlayerCheckpoint(playerid,FDInfo[i][fdX], FDInfo[i][fdY], FDInfo[i][fdZ],2.0);
	            cp_target[playerid] = 1;
		        found++;
		        return true;
		    }
  	    }
  	    if(found == 0) return SendClientMessage(playerid, COLOR_GREY, "Não há nenhum incêndio ativo!");
    }
	return 1;
}
COMMAND:removerfogo(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] >= 3)
	{
	    if(IsAroundFire(playerid, 1, 2.5) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        new id = IsAroundFire(playerid,2,2.5);
		    if(IsValidDynamicObject(FDInfo[id][fObject])) DestroyDynamicObject(FDInfo[id][fObject]);
			FDInfo[id][fObject]=0;
		    FDInfo[id][fdX]=0.0;
		    FDInfo[id][fdY]=0.0;
		    FDInfo[id][fdZ]=0.0;
		    FDInfo[id][fWorld]=0;
		    FDInfo[id][fInt]=0;
		    FDInfo[id][fTime]=0;
		    FDInfo[id][fHealth]=0;
	    }
    }
	return 1;
}

stock IsAroundFire(playerid, type, Float:distance)
{
    for(new i=0;i<sizeof(FDInfo);i++)
    {
		if(FDInfo[i][fObject] != 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid,distance,FDInfo[i][fdX],FDInfo[i][fdY],FDInfo[i][fdZ]))
		    {
				if(GetPlayerInterior(playerid) == FDInfo[i][fInt])
				{
					if(GetPlayerVirtualWorld(playerid) == FDInfo[i][fWorld])
					{
		        		switch(type)
						{
				    		case 1:
				    		{
				        		return true;
				    		}
				    		case 2:
				    		{
				       			return i;
				    		}
						}
					}
				}
		    }
		}
	}
	return false;
}

public Get2DZone(zone[], len, Float:x, Float:y, Float:z)
{
    #pragma unused z
 	for(new i = 0; i != sizeof(gSAZones); i++)
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME]);
		}
	}
	return format(zone, len, "San Andreas");
}

stock GetPlayer2DZone(playerid, zone[], len)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
 	for(new i = 0; i != sizeof(gSAZones); i++ )
 	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}

//========================================================================================================================================================
//==============================================================================
forward SaveDrogas(playerid);
public SaveDrogas(playerid)
{
	if(!PlayerInfo[playerid][pLogado]) return 1;
    new _dinamicString[1024];
    if(!IsPlayerConnected(playerid)) { return 1; }

	new pname[24];
	format(pname, 24, "%s", PlayerName(playerid,0));

    format(_dinamicString, sizeof(_dinamicString), "UPDATE `drogas` SET `Name` = '%s', `MaconhaR`=%d,`MaconhaB`=%d,`MaconhaE`=%d,`CocaR`=%d,`CocaB`=%d,`CocaE`=%d ,`CrackR`=%d,`CrackB`=%d,`CrackE`=%d,`LSDR`=%d,`LSDB`=%d,`LSDE`=%d,`MetR`=%d,`MetB`=%d,`MetE`=%d,`Sementes`=%d,`BDS`=%d,`PBC`=%d,`Acloridrico`=%d,`Efedrina`=%d,`benzococa`=%d,`lidococa`=%d,`hidroxina`=%d,`LancaPer`=%d WHERE `IDp` = '%d'",
	PlayerInfo[playerid][pNomeP],
	PlayerDroga[playerid][MaconhaR],
	PlayerDroga[playerid][MaconhaB],
	PlayerDroga[playerid][MaconhaE],
	PlayerDroga[playerid][CocaR],
	PlayerDroga[playerid][CocaB],
	PlayerDroga[playerid][CocaE],
	PlayerDroga[playerid][CrackR],
	PlayerDroga[playerid][CrackB],
	PlayerDroga[playerid][CrackE],
	PlayerDroga[playerid][LSDR],
	PlayerDroga[playerid][LSDB],
	PlayerDroga[playerid][LSDE],
	PlayerDroga[playerid][MetR],
	PlayerDroga[playerid][MetB],
	PlayerDroga[playerid][MetE],
	PlayerDroga[playerid][Sementes],
	PlayerDroga[playerid][BDS],
	PlayerDroga[playerid][PBC],
	PlayerDroga[playerid][Acloridrico],
	PlayerDroga[playerid][Efedrina],
	PlayerDroga[playerid][LancaPer],
	PlayerDroga[playerid][BZC],
	PlayerDroga[playerid][LDC],
	PlayerDroga[playerid][HDZ],
	PlayerInfo[playerid][pID]);
    mysql_function_query(Pipeline, _dinamicString, false, "noReturnQuery", "d", 5);
	printf("%s", Pipeline);
    return true;
}
forward ShowDrugs(playerid, ownerid);
public ShowDrugs(playerid, ownerid)
{
    new str[256];
    format(str,sizeof(str),"___________Drogas de %s___________",PlayerName(ownerid, 0)); SendClientMessage(playerid, COLOR_LIGHTGREEN,str);
    format(str,sizeof(str),"[ 1. Maconha Ruim(%d) ][ 2. Maconha Boa(%d) ][ 3. Maconha Excelente(%d) ]",PlayerDroga[ownerid][MaconhaR],PlayerDroga[ownerid][MaconhaB],PlayerDroga[ownerid][MaconhaE]); SendClientMessage(playerid,COLOR_WHITE,str);
	format(str,sizeof(str),"[ 4. Cocaína Ruim(%d) ][ 5. Cocaina Boa(%d) ][ 6. Cocaina Excelente(%d) ]",PlayerDroga[ownerid][CocaR],PlayerDroga[ownerid][CocaB],PlayerDroga[ownerid][CocaE]); SendClientMessage(playerid,COLOR_WHITE,str);
	format(str,sizeof(str),"[ 7. Crack Ruim(%d) ][ 8. Crack Boa(%d)] [ 9. Crack Excelente(%d) ]",PlayerDroga[ownerid][CrackR],PlayerDroga[ownerid][CrackB],PlayerDroga[ownerid][CrackE]); SendClientMessage(playerid,COLOR_WHITE,str);
	format(str,sizeof(str),"[ 10. LSD Ruim(%d) ][ 11. LSD Bom(%d)] [ 12. LSD Excelente(%d) ]",PlayerDroga[ownerid][LSDR],PlayerDroga[ownerid][LSDB],PlayerDroga[ownerid][LSDE]); SendClientMessage(playerid,COLOR_WHITE,str);
	format(str,sizeof(str),"[ 13. Metanfetamina Ruim(%d) ][ 14. Metanfetamina Boa(%d) ][ 15. Metanfetamina Excelente(%d) ]",PlayerDroga[ownerid][MetR],PlayerDroga[ownerid][MetB],PlayerDroga[ownerid][MetE]); SendClientMessage(playerid,COLOR_WHITE,str);
	format(str,sizeof(str),"[ 21. Lança Perfume (%dml) ]",PlayerDroga[ownerid][LancaPer]); SendClientMessage(playerid,COLOR_WHITE,str);
}

forward ShowIngredientes(playerid, ownerid);
public ShowIngredientes(playerid, ownerid)
{
    new str[256];
    format(str,sizeof(str),"___________Ingredientes de %s___________",PlayerName(ownerid, 0)); SendClientMessage(playerid, COLOR_LIGHTGREEN,str);
	format(str,sizeof(str),"[ 16. Sementes (%d) ][ 17. Bicarbonato de Sódio (%d) ][ 18. Pasta Base (%d) ]",PlayerDroga[ownerid][Sementes],PlayerDroga[ownerid][BDS],PlayerDroga[ownerid][PBC]); SendClientMessage(playerid,COLOR_WHITE,str);
    format(str,sizeof(str),"[ 19. Ácido cloridrico(%d) ][20. Efedrina(%d) ][21. Hidroxizina(%d) ][22. Lidocaína(%d) ][22. Benzocaína(%d) ]",PlayerDroga[ownerid][Acloridrico],PlayerDroga[ownerid][Efedrina],PlayerDroga[ownerid][HDZ],PlayerDroga[ownerid][LDC],PlayerDroga[ownerid][BZC]); SendClientMessage(playerid,COLOR_WHITE,str);
}



	

forward LoadPlayerDrugs(playerid);
public LoadPlayerDrugs(playerid)
{
	new _loginString[128];
    format(_loginString, sizeof(_loginString), "SELECT * FROM `drogas` WHERE `IDp` = '%d'", PlayerInfo[playerid][pID]);
    mysql_function_query(Pipeline, _loginString, true, "onDrogasLoaded2", "d", playerid);
	printf("%s", Pipeline);
    return 1;
}

/*forward onDrogasLoaded(playerid);
public onDrogasLoaded(playerid)
{
    new rows, fields, fetch[30];
    cache_get_data(rows, fields);


    new Rows, Fields;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
        cache_get_field_content(0, "MaconhaR", fetch); 	PlayerDroga[playerid][MaconhaR] = strval(fetch);
        cache_get_field_content(0, "MaconhaB", fetch);	PlayerDroga[playerid][MaconhaB] = strval(fetch);
        cache_get_field_content(0, "MaconhaE", fetch);	PlayerDroga[playerid][MaconhaE] = strval(fetch);
        cache_get_field_content(0, "CocaR", fetch);		PlayerDroga[playerid][CocaR] = strval(fetch);
        cache_get_field_content(0, "CocaB", fetch);		PlayerDroga[playerid][CocaB] = strval(fetch);
	    cache_get_field_content(0, "CocaE", fetch);		PlayerDroga[playerid][CocaE] = strval(fetch);
        cache_get_field_content(0, "CrackR", fetch);	PlayerDroga[playerid][CrackR] = strval(fetch);
        cache_get_field_content(0, "CrackB", fetch);	PlayerDroga[playerid][CrackB] = strval(fetch);
        cache_get_field_content(0, "CrackE", fetch);	PlayerDroga[playerid][CrackE] = strval(fetch);
        cache_get_field_content(0, "LSDR", fetch);		PlayerDroga[playerid][LSDR] = strval(fetch);
        cache_get_field_content(0, "LSDB", fetch);		PlayerDroga[playerid][LSDB] = strval(fetch);
	    cache_get_field_content(0, "LSDE", fetch);		PlayerDroga[playerid][LSDE] = strval(fetch);
	    cache_get_field_content(0, "MetR", fetch);		PlayerDroga[playerid][MetR] = strval(fetch);
	    cache_get_field_content(0, "MetB", fetch);		PlayerDroga[playerid][MetB] = strval(fetch);
	    cache_get_field_content(0, "MetE", fetch);		PlayerDroga[playerid][MetE] = strval(fetch);
	    cache_get_field_content(0, "Sementes", fetch);	PlayerDroga[playerid][Sementes] = strval(fetch);
	    cache_get_field_content(0, "BDS", fetch);		PlayerDroga[playerid][BDS] = strval(fetch);
	    cache_get_field_content(0, "PBC", fetch);		PlayerDroga[playerid][PBC] = strval(fetch);
	    cache_get_field_content(0, "Acloridrico", fetch);	PlayerDroga[playerid][Acloridrico] = strval(fetch);
	    cache_get_field_content(0, "Efedrina", fetch);	PlayerDroga[playerid][Efedrina] = strval(fetch);
    }
    else
    {
        new _loginString[128];
    	format(_loginString, sizeof(_loginString), "SELECT * FROM `drogas` WHERE `Name` = '%s'", GetUserName(playerid));
    	mysql_function_query(Pipeline, _loginString, true, "onDrogasLoaded2", "d", playerid);
    }
    return 1;
}*/

forward onDrogasLoaded2(playerid);
public onDrogasLoaded2(playerid)
{
    new rows, fields, fetch[30];
    cache_get_data(rows, fields);


    new Rows, Fields;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
        cache_get_field_content(0, "MaconhaR", fetch); 	PlayerDroga[playerid][MaconhaR] = strval(fetch);
        cache_get_field_content(0, "MaconhaB", fetch);	PlayerDroga[playerid][MaconhaB] = strval(fetch);
        cache_get_field_content(0, "MaconhaE", fetch);	PlayerDroga[playerid][MaconhaE] = strval(fetch);
        cache_get_field_content(0, "CocaR", fetch);	PlayerDroga[playerid][CocaR] = strval(fetch);
        cache_get_field_content(0, "CocaB", fetch);	PlayerDroga[playerid][CocaB] = strval(fetch);
	    cache_get_field_content(0, "CocaE", fetch);	PlayerDroga[playerid][CocaE] = strval(fetch);
        cache_get_field_content(0, "CrackR", fetch);	PlayerDroga[playerid][CrackR] = strval(fetch);
        cache_get_field_content(0, "CrackB", fetch);	PlayerDroga[playerid][CrackB] = strval(fetch);
        cache_get_field_content(0, "CrackE", fetch);	PlayerDroga[playerid][CrackE] = strval(fetch);
        cache_get_field_content(0, "LSDR", fetch);	PlayerDroga[playerid][LSDR] = strval(fetch);
        cache_get_field_content(0, "LSDB", fetch);	PlayerDroga[playerid][LSDB] = strval(fetch);
	    cache_get_field_content(0, "LSDE", fetch);	PlayerDroga[playerid][LSDE] = strval(fetch);
	    cache_get_field_content(0, "MetR", fetch);	PlayerDroga[playerid][MetR] = strval(fetch);
	    cache_get_field_content(0, "MetB", fetch);	PlayerDroga[playerid][MetB] = strval(fetch);
	    cache_get_field_content(0, "MetE", fetch);	PlayerDroga[playerid][MetE] = strval(fetch);
	    cache_get_field_content(0, "Sementes", fetch);	PlayerDroga[playerid][Sementes] = strval(fetch);
	    cache_get_field_content(0, "BDS", fetch);	PlayerDroga[playerid][BDS] = strval(fetch);
	    cache_get_field_content(0, "PBC", fetch);	PlayerDroga[playerid][PBC] = strval(fetch);
	    cache_get_field_content(0, "lidococa", fetch);	PlayerDroga[playerid][LDC] = strval(fetch);
	    cache_get_field_content(0, "benzococa", fetch);	PlayerDroga[playerid][BZC] = strval(fetch);
		cache_get_field_content(0, "hidroxina", fetch);	PlayerDroga[playerid][HDZ] = strval(fetch);
	    cache_get_field_content(0, "Acloridrico", fetch);	PlayerDroga[playerid][Acloridrico] = strval(fetch);
	    cache_get_field_content(0, "Efedrina", fetch);	PlayerDroga[playerid][Efedrina] = strval(fetch);
		cache_get_field_content(0, "LancaPer", fetch);	PlayerDroga[playerid][LancaPer] = strval(fetch);
	
    }
    return 1;
}

forward dd_Drogas(playerid);
public dd_Drogas(playerid)
{
    new _loginString[128];
    format(_loginString, sizeof(_loginString), "SELECT * FROM `drogas` WHERE `IDp` = '%d'", PlayerInfo[playerid][pID]);
    mysql_function_query(Pipeline, _loginString, true, "_checkDrogas", "d", playerid);
    return 1;
}
forward _checkDrogas(extraid);
public _checkDrogas(extraid)
{
    if( !IsPlayerConnected(extraid)) return 1;
    new rows, fields;
    cache_get_data(rows, fields);
    if(rows)
	{
		SaveDrogas(extraid);
    }
    else
    {
        format(string, sizeof(string), "SELECT * FROM `drogas` WHERE `IDp` = '%d'", PlayerInfo[extraid][pID]);
    	mysql_function_query(Pipeline, string, true, "_checkDrogas2", "d", extraid);
    }
    return 1;
}

forward _checkDrogas2(extraid);
public _checkDrogas2(extraid)
{
    if( !IsPlayerConnected(extraid)) return 1;
    new rows, fields;
    cache_get_data(rows, fields);
    if(rows)
	{
		SaveDrogas(extraid);
    }
    else
    {
   		format(string, sizeof(string), "INSERT INTO drogas (Name,MaconhaR,MaconhaB,MaconhaE,CocaR,CocaB,CocaE,CrackR,CrackB,CrackE,LSDR,LSDB,LSDE,MetR,MetB,MetE,Sementes,BDS,PBC,Acloridrico,Efedrina,LancaPer,lidococa,benzococa,hidroxina,IDp)\
 		VALUES('%s',%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d, %d)",
	 	GetUserName(extraid),
	 	PlayerDroga[extraid][MaconhaR],
	    PlayerDroga[extraid][MaconhaB],
	    PlayerDroga[extraid][MaconhaE],
	    PlayerDroga[extraid][CocaR],
	    PlayerDroga[extraid][CocaB],
		PlayerDroga[extraid][CocaE],
	    PlayerDroga[extraid][CrackR],
	    PlayerDroga[extraid][CrackB],
	    PlayerDroga[extraid][CrackE],
	    PlayerDroga[extraid][LSDR],
	    PlayerDroga[extraid][LSDB],
		PlayerDroga[extraid][LSDE],
		PlayerDroga[extraid][MetR],
		PlayerDroga[extraid][MetB],
		PlayerDroga[extraid][MetE],
		PlayerDroga[extraid][Sementes],
		PlayerDroga[extraid][BDS],
		PlayerDroga[extraid][PBC],
		PlayerDroga[extraid][Acloridrico],
		PlayerDroga[extraid][Efedrina],
		PlayerDroga[extraid][LancaPer],
		PlayerDroga[extraid][LDC],
		PlayerDroga[extraid][BZC],
		PlayerDroga[extraid][HDZ],
		PlayerInfo[extraid][pID]);
		mysql_function_query(Pipeline, string, false, "noReturnQuery", "d", 17);
    }
    return 1;
}

forward UsarDroga(playerid,DrogaID, qualidade);
public UsarDroga(playerid,DrogaID, qualidade)
{
	if(DrogaID == 1) // Maconha
	{
	    if(qualidade == 1)
	    {
	    	new tempo = randomEx(5, 10);
			PlayerInfo[playerid][pMenosDanoTiro] = 2.0;
			PlayerInfo[playerid][pDrogaTime] = tempo;
			PlayerInfo[playerid][pUsouDroga] = 11;
			//SetPlayerWeather(playerid, -22);
			//SetPlayerTime( playerid, 10, 0);
			PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-300;
			if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_____ Beneficios: _____|");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Vida máxima aumentada em +10.0 até o fim da brisa.");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Menos dano ao tomar tiro. (-2.0)");
			FumandoMaconha[playerid] = 1;
			FumandoMaconhaQ[playerid] = 1;
			PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+10;

			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
		}
		else if(qualidade == 2)
	    {
	    	new tempo = randomEx(5, 10);
			PlayerInfo[playerid][pMenosDanoTiro] = 4.0;
			PlayerInfo[playerid][pDrogaTime] = tempo;
			PlayerInfo[playerid][pUsouDroga] = 12;
			//SetPlayerWeather(playerid, -22);
			//SetPlayerTime( playerid, 10, 0);
			PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-500;
			if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_____ Beneficios: _____|");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Vida máxima aumentada em +20.0 até o fim da brisa.");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Menos dano ao tomar tiro. (-4.0)");
			FumandoMaconha[playerid] = 1;
			FumandoMaconhaQ[playerid] = 2;
            PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+20;

			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
		}
		else if(qualidade == 3)
	    {
	    	new tempo = randomEx(5, 10);
			PlayerInfo[playerid][pMenosDanoTiro] = 6.0;
			PlayerInfo[playerid][pDrogaTime] = tempo;
			PlayerInfo[playerid][pUsouDroga] = 13;
			//SetPlayerWeather(playerid, -22);
			//SetPlayerTime( playerid, 10, 0);
			PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-800;
			if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_____ Beneficios: _____|");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Vida máxima aumentada em +30.0 até o fim da brisa.");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Menos dano ao tomar tiro. (-6.0)");
			FumandoMaconha[playerid] = 1;
			FumandoMaconhaQ[playerid] = 3;
			PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+30;

			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
		}
	}
	if(DrogaID == 2) // Cocaina
	{
	    if(qualidade == 1)
	    {
	    	new tempo = randomEx(10, 15);
			PlayerInfo[playerid][pMenosDanoTiro] = 4.0;
			PlayerInfo[playerid][pDrogaTime] = tempo;
			PlayerInfo[playerid][pUsouDroga] = 21;
			//SetPlayerWeather(playerid, -89);
			//SetPlayerTime( playerid, 10, 0);
			PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-500;
			if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
			PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+40;
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_____ Beneficios: _____|");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Vida máxima aumentada em +40.0.");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Menos dano ao tomar tiro. (-4.0)");
		}
		else if(qualidade == 2)
	    {
	    	new tempo = randomEx(10, 15);
			PlayerInfo[playerid][pMenosDanoTiro] = 6.0;
			PlayerInfo[playerid][pDrogaTime] = tempo;
			PlayerInfo[playerid][pUsouDroga] = 22;
			//SetPlayerWeather(playerid, -89);
			//SetPlayerTime( playerid, 10, 0);
			PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-800;
			if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
			PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+50;
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_____ Beneficios: _____|");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Vida máxima aumentada em +50.0.");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Menos dano ao tomar tiro. (-6.0)");
		}
		else if(qualidade == 3)
	    {
	    	new tempo = randomEx(1, 5);
			PlayerInfo[playerid][pMenosDanoTiro] = 8.0;
			PlayerInfo[playerid][pDrogaTime] = tempo;
			PlayerInfo[playerid][pUsouDroga] = 23;
			//SetPlayerWeather(playerid, -89);
			//SetPlayerTime( playerid, 10, 0);
			PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-1000;
			if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
			PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+60;
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_____ Beneficios: _____|");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Vida máxima aumentada em +60.0.");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Menos dano ao tomar tiro. (-8.0)");
		}
	}
	if(DrogaID == 3) // Crack
	{
	    if(qualidade == 1)
	    {
	    	new tempo = randomEx(15, 20);
			PlayerInfo[playerid][pMenosDanoTiro] = 5.0;
			PlayerInfo[playerid][pDrogaTime] = tempo;
			PlayerInfo[playerid][pUsouDroga] = 31;
			//SetPlayerWeather(playerid, -73);
			//SetPlayerTime( playerid, 10, 0);
			PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-1000;
			if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
			PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+50;
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_____ Beneficios: _____|");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Vida máxima aumentada em +50.0.");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Menos 5.0 de dado ao tomar um tiro.");
		}
		else if(qualidade == 2)
	    {
	    	new tempo = randomEx(15, 20);
			PlayerInfo[playerid][pMenosDanoTiro] = 7.0;
			PlayerInfo[playerid][pDrogaTime] = tempo;
			PlayerInfo[playerid][pUsouDroga] = 32;
			//SetPlayerWeather(playerid, -73);
			//SetPlayerTime( playerid, 10, 0);
			PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-1500;
			if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
			PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+70;
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_____ Beneficios: _____|");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Vida máxima aumentada em +70.0.");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Menos 7.0 de dado ao tomar um tiro de qualquer arma.");
		}
		else if(qualidade == 3)
	    {
	    	new tempo = randomEx(15, 20);
			PlayerInfo[playerid][pMenosDanoTiro] = 9.0;
			PlayerInfo[playerid][pDrogaTime] = tempo;
			PlayerInfo[playerid][pUsouDroga] = 33;
			//SetPlayerWeather(playerid, -73);
			//SetPlayerTime( playerid, 10, 0);
			PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-2000;
			if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
			PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+100;
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_____ Beneficios: _____|");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Vida máxima aumentada em +100.0.");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Menos 9.0 de dado ao tomar um tiro de qualquer arma.");
		}
	}
	if(DrogaID == 4) // LSD
	{
	    if(qualidade == 1)
	    {
	    	new tempo = randomEx(15, 20);
			PlayerInfo[playerid][pMenosDanoTiro] = 6.0;
			PlayerInfo[playerid][pDrogaTime] = tempo;
			PlayerInfo[playerid][pUsouDroga] = 41;
			//SetPlayerWeather(playerid, -66);
			//SetPlayerTime( playerid, 10, 0);
			PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-2000;
			if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
			PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+20;
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_____ Beneficios: _____|");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Vida máxima aumentada em +20.0.");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Menos 6.0 de dado ao tomar um tiro de qualquer arma.");
		}
		else if(qualidade == 2)
	    {
	    	new tempo = randomEx(15, 20);
			PlayerInfo[playerid][pMenosDanoTiro] = 8.0;
			PlayerInfo[playerid][pDrogaTime] = tempo;
			PlayerInfo[playerid][pUsouDroga] = 42;
			//SetPlayerWeather(playerid, -66);
			//SetPlayerTime( playerid, 10, 0);
			PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-4000;
			if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
			PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+30;
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_____ Beneficios: _____|");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Vida máxima aumentada em +30.0.");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Menos 8.0 de dado ao tomar um tiro de qualquer arma.");
		}
		else if(qualidade == 3)
	    {
	    	new tempo = randomEx(15, 20);
			PlayerInfo[playerid][pMenosDanoTiro] = 10.0;
			PlayerInfo[playerid][pDrogaTime] = tempo;
			PlayerInfo[playerid][pUsouDroga] = 43;
			//SetPlayerWeather(playerid, -66);
			//SetPlayerTime( playerid, 10, 0);
			PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-4000;
			if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
			PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+40;
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_____ Beneficios: _____|");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Vida máxima aumentada em +40.0.");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Menos 10.0 de dado ao tomar um tiro de qualquer arma.");
		}
	}
	if(DrogaID == 5) // Metanfetamina
	{
	    if(qualidade == 1)
	    {
	    	new tempo = randomEx(20, 30);
			PlayerInfo[playerid][pMenosDanoTiro] = 6.0;
			PlayerInfo[playerid][pDrogaTime] = tempo;
			PlayerInfo[playerid][pUsouDroga] = 51;
			PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-4000;
			if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
			//SetPlayerWeather(playerid, -94);
			//SetPlayerTime( playerid, 10, 0);
			PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+70;
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_____ Beneficios: _____|");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Vida máxima aumentada em +70.0.");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Menos 6.0 de dado ao tomar um tiro de qualquer arma.");
            SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Mais 1.0 de dano ao dar um soco.");
		}
		else if(qualidade == 2)
	    {
	    	new tempo = randomEx(20, 30);
			PlayerInfo[playerid][pMenosDanoTiro] = 8.0;
			PlayerInfo[playerid][pDrogaTime] = tempo;
			PlayerInfo[playerid][pUsouDroga] = 52;
			PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-5000;
			if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
			//SetPlayerWeather(playerid, -94);
			//SetPlayerTime( playerid, 10, 0);
			PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+90;
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_____ Beneficios: _____|");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Vida máxima aumentada em +90.0.");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Menos 8.0 de dado ao tomar um tiro de qualquer arma.");
            SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Mais 1.5 de dano ao dar um soco.");
		}
		else if(qualidade == 3)
	    {
	    	new tempo = randomEx(20, 30);
			PlayerInfo[playerid][pMenosDanoTiro] = 10.0;
			PlayerInfo[playerid][pDrogaTime] = tempo;
			PlayerInfo[playerid][pUsouDroga] = 53;
			PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-5500;
			if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
			//SetPlayerWeather(playerid, -94);
			//SetPlayerTime( playerid, 10, 0);
			PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+120;
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_____ Beneficios: _____|");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Vida máxima aumentada em +120.0.");
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Menos 10.0 de dado ao tomar um tiro de qualquer arma.");
            SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Mais 2.0 de dano ao dar um soco.");
		}
	}
	if(DrogaID == 6) // Lança Perfume
	{
	    new tempo = randomEx(20, 30);
		PlayerInfo[playerid][pMenosDanoTiro] = 6.0;
		PlayerInfo[playerid][pDrogaTime] = tempo;
		PlayerInfo[playerid][pUsouDroga] = 54;
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-6000;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		//SetPlayerWeather(playerid, -94);
		//SetPlayerTime( playerid, 10, 0);
		PlayerInfo[playerid][pHealthMax] = PlayerInfo[playerid][pHealthMax]+80;
		SendClientMessage(playerid,COLOR_LIGHTGREEN,"|_____ Beneficios: _____|");
		SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Vida máxima aumentada em +80.0.");
		SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Menos 6.0 de dado ao tomar um tiro de qualquer arma.");
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"- Mais 1.0 de dano ao dar um soco.");

	}
    return 1;
}

forward UsarDrogaLogando(playerid);
public UsarDrogaLogando(playerid)
{
    new DrogaID = PlayerInfo[playerid][pUsouDroga];
    if(DrogaID == 11)
    {
		PlayerInfo[playerid][pMenosDanoTiro] = 2.0;
		//SetPlayerWeather(playerid, -22);
		//SetPlayerTime( playerid, 10, 0);
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-300;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		SendClientMessage(playerid,-1,"Fumou maconha ruim");

		ApplyAnimation(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	}
	else if(DrogaID == 12)
	{
		PlayerInfo[playerid][pMenosDanoTiro] = 4.0;
		//SetPlayerWeather(playerid, -22);
		//SetPlayerTime( playerid, 10, 0);
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-500;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		SendClientMessage(playerid,-1,"Fumou maconha boa");

		ApplyAnimation(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	}
	else if(DrogaID == 13)
  	{
		PlayerInfo[playerid][pMenosDanoTiro] = 6.0;
		//SetPlayerWeather(playerid, -22);
		//SetPlayerTime( playerid, 10, 0);
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-800;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		SendClientMessage(playerid,-1,"Fumou maconha excelente");

		ApplyAnimation(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	}
	else if(DrogaID == 21)
 	{
		PlayerInfo[playerid][pMenosDanoTiro] = 4.0;
		//SetPlayerWeather(playerid, -89);
		//SetPlayerTime( playerid, 10, 0);
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-500;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		SendClientMessage(playerid,-1,"Cheirou Cocaína Ruim");
	}
	else if(DrogaID == 22)
 	{
		PlayerInfo[playerid][pMenosDanoTiro] = 6.0;
		//SetPlayerWeather(playerid, -89);
		//SetPlayerTime( playerid, 10, 0);
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-800;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		SendClientMessage(playerid,-1,"Cheirou cocaina boa");
	}
	else if(DrogaID == 23)
 	{
		PlayerInfo[playerid][pMenosDanoTiro] = 8.0;
		//SetPlayerWeather(playerid, -89);
		//SetPlayerTime( playerid, 10, 0);
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-1000;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		SendClientMessage(playerid,-1,"Cheirou cocaina excelente");
	}
	else if(DrogaID == 31)
 	{
		PlayerInfo[playerid][pMenosDanoTiro] = 5.0;
		//SetPlayerWeather(playerid, -73);
		//SetPlayerTime( playerid, 10, 0);
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-1000;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		SendClientMessage(playerid,-1,"Fumou crack ruim");
	}
	else if(DrogaID == 32)
 	{
		PlayerInfo[playerid][pMenosDanoTiro] = 7.0;
		//SetPlayerWeather(playerid, -73);
		//SetPlayerTime( playerid, 10, 0);
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-1500;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		SendClientMessage(playerid,-1,"Fumou crack boa");
	}
	else if(DrogaID == 33)
 	{
		PlayerInfo[playerid][pMenosDanoTiro] = 9.0;
		//SetPlayerWeather(playerid, -73);
		//SetPlayerTime( playerid, 10, 0);
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-2000;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		SendClientMessage(playerid,-1,"Fumou crack excelente");
	}
	else if(DrogaID == 41)
    {
		PlayerInfo[playerid][pMenosDanoTiro] = 6.0;
		//SetPlayerWeather(playerid, -66);
		//SetPlayerTime( playerid, 10, 0);
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-2000;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		SendClientMessage(playerid,-1,"Ingeriu LSD ruim");
	}
	else if(DrogaID == 42)
 	{
		PlayerInfo[playerid][pMenosDanoTiro] = 8.0;
		//SetPlayerWeather(playerid, -66);
		//SetPlayerTime( playerid, 10, 0);
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-4000;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		SendClientMessage(playerid,-1,"Ingeriu LSD bom");
	}
	else if(DrogaID == 43)
 	{
		PlayerInfo[playerid][pMenosDanoTiro] = 10.0;
		//SetPlayerWeather(playerid, -66);
		//SetPlayerTime( playerid, 10, 0);
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-4000;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		SendClientMessage(playerid,-1,"Ingeriu LSD excelente");
	}
	else if(DrogaID == 51)
 	{
		PlayerInfo[playerid][pMenosDanoTiro] = 6.0;
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-4000;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		//SetPlayerWeather(playerid, -94);
		//SetPlayerTime( playerid, 10, 0);
		SendClientMessage(playerid,-1,"Cheirou/Fumou Metanfetamina ruim");
	}
	else if(DrogaID == 52)
 	{
		PlayerInfo[playerid][pMenosDanoTiro] = 8.0;
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-5000;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		//SetPlayerWeather(playerid, -94);
		//SetPlayerTime( playerid, 10, 0);
		SendClientMessage(playerid,-1,"Cheirou/Fumou Metanfetamina boa");
	}
	else if(DrogaID == 53)
 	{
		PlayerInfo[playerid][pMenosDanoTiro] = 10.0;
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-5500;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		//SetPlayerWeather(playerid, -94);
		//SetPlayerTime( playerid, 10, 0);
		SendClientMessage(playerid,-1,"Cheirou/Fumou Metanfetamina excelente");
	}
	else if(DrogaID == 54)
 	{
		PlayerInfo[playerid][pMenosDanoTiro] = 12.0;
		PlayerInfo[playerid][pTremorAtirar] = PlayerInfo[playerid][pSkillTiro]-6000;
		if(PlayerInfo[playerid][pTremorAtirar] < 0) PlayerInfo[playerid][pTremorAtirar] = 0;
		//SetPlayerWeather(playerid, -94);
		//SetPlayerTime( playerid, 10, 0);
		SendClientMessage(playerid,-1,"Baforou lança perfume.");
	}
    return 1;
}

CMD:minhasdrogas(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    ShowDrugs(playerid, playerid);
	return 1;
}
CMD:meusingredientes(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    ShowIngredientes(playerid, playerid);
	return 1;
}

stock SetAllPlayerDrugs(playerid)
{
    PlayerDroga[playerid][MaconhaR] = 5000;
    PlayerDroga[playerid][MaconhaB] = 5000;
    PlayerDroga[playerid][MaconhaE] = 5000;

    PlayerDroga[playerid][CocaR] = 5000;
    PlayerDroga[playerid][CocaB] = 5000;
    PlayerDroga[playerid][CocaE] = 5000;

    PlayerDroga[playerid][CrackR] = 5000;
    PlayerDroga[playerid][CrackB] = 5000;
    PlayerDroga[playerid][CrackE] = 5000;

	PlayerDroga[playerid][LSDR] = 5000;
	PlayerDroga[playerid][LSDB] = 5000;
	PlayerDroga[playerid][LSDE] = 5000;

	PlayerDroga[playerid][MetR] = 5000;
	PlayerDroga[playerid][MetB] = 5000;
	PlayerDroga[playerid][MetE] = 5000;

	PlayerDroga[playerid][Sementes] = 5000;
	PlayerDroga[playerid][BDS] = 5000;
	PlayerDroga[playerid][PBC] = 5000;
	PlayerDroga[playerid][Acloridrico] = 5000;
	PlayerDroga[playerid][Efedrina] = 5000;
	PlayerDroga[playerid][LancaPer] = 5000;
	PlayerDroga[playerid][LDC] = 5000;
	PlayerDroga[playerid][HDZ] = 5000;
	PlayerDroga[playerid][BZC] = 5000;
}

stock ResetPlayerDrugs(playerid)
{
    PlayerDroga[playerid][MaconhaR] = 0;
    PlayerDroga[playerid][MaconhaB] = 0;
    PlayerDroga[playerid][MaconhaE] = 0;

    PlayerDroga[playerid][CocaR] = 0;
    PlayerDroga[playerid][CocaB] = 0;
    PlayerDroga[playerid][CocaE] = 0;

    PlayerDroga[playerid][CrackR] = 0;
    PlayerDroga[playerid][CrackB] = 0;
    PlayerDroga[playerid][CrackE] = 0;

	PlayerDroga[playerid][LSDR] = 0;
	PlayerDroga[playerid][LSDB] = 0;
	PlayerDroga[playerid][LSDE] = 0;

	PlayerDroga[playerid][MetR] = 0;
	PlayerDroga[playerid][MetB] = 0;
	PlayerDroga[playerid][MetE] = 0;

	PlayerDroga[playerid][Sementes] = 0;
	PlayerDroga[playerid][BDS] = 0;
	PlayerDroga[playerid][PBC] = 0;
	PlayerDroga[playerid][Acloridrico] = 0;
	PlayerDroga[playerid][Efedrina] = 0;
	PlayerDroga[playerid][LancaPer] = 0;
	PlayerDroga[playerid][LDC] = 0;
	PlayerDroga[playerid][HDZ] = 0;
	PlayerDroga[playerid][BZC] = 0;
}

CMD:drogas(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    new str[256];
	if(!PlayerInfo[playerid][pLogado]) return 1;
	new alternativa[64], nomedroga[64], other, ammount;
	if(sscanf(params, "s[64]S(nada)[64]I(-1)I(-1)", alternativa, nomedroga, ammount, other))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{ffffff} /drogas [usar / entregar / plantar / colher / destruir]");
		SendClientMessage(playerid, COLOR_LIGHTWHITE, "Inventário: /minhasdrogas, /meusingredientes");
		return 1;
 	}
 	if(!strcmp(alternativa, "entregar", true))
	{
	    if(!strcmp(nomedroga, "nada", true))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{ffffff} /drogas entregar [slot(id)] [quantidade] [playerid]");
			SendClientMessage(playerid, COLOR_LIGHTRED, "Para ver o slot(id) da droga use /minhasdrogas");
			return 1;
		}

	    new drogaid = strval(nomedroga);
	    if(drogaid < 1 || drogaid > 24) return SendClientMessage(playerid, COLOR_LIGHTRED, "ID da droga inválido.");
		if(ammount < 1 || ammount > 5000) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode entregar mais de 5000g de uma só vez.");
        if(!PlayerInfo[other][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode entregar drogas a este player.");
        if(!IsPlayerConnected(other)) { SendClientMessageA(playerid,COLOR_LIGHTRED,"Este jogador não está conectado"); return 1; }
    	if(GetDistanceBetweenPlayers(playerid,other) > 7.5) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está proximo a este player.");
	    if(drogaid == 1)
		{
		    if(PlayerDroga[playerid][MaconhaR] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Maconha. (Ruim)");
		    if(PlayerDroga[playerid][MaconhaR] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Maconha. (Ruim)");
            PlayerDroga[playerid][MaconhaR] -= ammount;
            PlayerDroga[other][MaconhaR] += ammount;
            format(str,sizeof(str),"Você entregou %d gramas de Maconha para %s.",ammount,PlayerName(other, 1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d gramas de Maconha.",PlayerName(playerid, 1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
        else if(drogaid == 2)
		{
		    if(PlayerDroga[playerid][MaconhaB] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Maconha. (Boa)");
		    if(PlayerDroga[playerid][MaconhaB] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Maconha. (Boa)");
            PlayerDroga[playerid][MaconhaB] -= ammount;
            PlayerDroga[other][MaconhaB] += ammount;
            format(str,sizeof(str),"Você entregou %d gramas de Maconha para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d gramas de Maconha.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
        else if(drogaid == 3)
		{
		    if(PlayerDroga[playerid][MaconhaE] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Maconha. (Excelente)");
		    if(PlayerDroga[playerid][MaconhaE] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Maconha. (Excelente)");
            PlayerDroga[playerid][MaconhaE] -= ammount;
            PlayerDroga[other][MaconhaE] += ammount;
            format(str,sizeof(str),"Você entregou %d gramas de Maconha para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d gramas de Maconha.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
        else if(drogaid == 4)
		{
		    if(PlayerDroga[playerid][CocaR] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Cocaina. (Ruim)");
		    if(PlayerDroga[playerid][CocaR] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Cocaina. (Ruim)");
            PlayerDroga[playerid][CocaR] -= ammount;
            PlayerDroga[other][CocaR] += ammount;
            format(str,sizeof(str),"Você entregou %d gramas de Cocaina para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d gramas de Cocaina.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
	    else if(drogaid == 5)
		{
		    if(PlayerDroga[playerid][CocaB] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Cocaina. (Boa)");
		    if(PlayerDroga[playerid][CocaB] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Cocaina. (Boa)");
            PlayerDroga[playerid][CocaB] -= ammount;
            PlayerDroga[other][CocaB] += ammount;
            format(str,sizeof(str),"Você entregou %d gramas de Cocaina para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d gramas de Cocaina.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
        else if(drogaid == 6)
		{
		    if(PlayerDroga[playerid][CocaE] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Cocaina. (Excelente)");
		    if(PlayerDroga[playerid][CocaE] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Cocaina. (Excelente)");
            PlayerDroga[playerid][CocaE] -= ammount;
            PlayerDroga[other][CocaE] += ammount;
            format(str,sizeof(str),"Você entregou %d gramas de Cocaina para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d gramas de Cocaina.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
        else if(drogaid == 7)
		{
		    if(PlayerDroga[playerid][CrackR] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Crack. (Ruim)");
		    if(PlayerDroga[playerid][CrackR] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Crack. (Ruim)");
            PlayerDroga[playerid][CrackR] -= ammount;
            PlayerDroga[other][CrackR] += ammount;
            format(str,sizeof(str),"Você entregou %d gramas de Crack para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d gramas de Crack.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
        else if(drogaid == 8)
		{
		    if(PlayerDroga[playerid][CrackB] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Crack. (Boa)");
		    if(PlayerDroga[playerid][CrackB] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Crack. (Boa)");
            PlayerDroga[playerid][CrackB] -= ammount;
            PlayerDroga[other][CrackB] += ammount;
            format(str,sizeof(str),"Você entregou %d gramas de Crack para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d gramas de Crack.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
		else if(drogaid == 9)
		{
		    if(PlayerDroga[playerid][CrackE] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Crack. (Excelente)");
		    if(PlayerDroga[playerid][CrackE] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Crack. (Excelente)");
            PlayerDroga[playerid][CrackE] -= ammount;
            PlayerDroga[other][CrackE] += ammount;
            format(str,sizeof(str),"Você entregou %d gramas de Crack para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d gramas de Crack.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
		else if(drogaid == 10)
		{
		    if(PlayerDroga[playerid][LSDR] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem LSD. (Ruim)");
		    if(PlayerDroga[playerid][LSDR] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de LSD. (Ruim)");
            PlayerDroga[playerid][LSDR] -= ammount;
            PlayerDroga[other][LSDR] += ammount;
            format(str,sizeof(str),"Você entregou %d de LSD para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d de LSD.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
		else if(drogaid == 11)
		{
		    if(PlayerDroga[playerid][LSDB] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem LSD. (Boa)");
		    if(PlayerDroga[playerid][LSDB] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de LSD. (Boa)");
            PlayerDroga[playerid][LSDB] -= ammount;
            PlayerDroga[other][LSDB] += ammount;
            format(str,sizeof(str),"Você entregou %d de LSD para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d de LSD.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
		else if(drogaid == 12)
		{
		    if(PlayerDroga[playerid][LSDE] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem LSD. (Excelente)");
		    if(PlayerDroga[playerid][LSDE] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de LSD. (Excelente)");
            PlayerDroga[playerid][LSDE] -= ammount;
            PlayerDroga[other][LSDE] += ammount;
            format(str,sizeof(str),"Você entregou %d de LSD para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d de LSD.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
		else if(drogaid == 13)
		{
		    if(PlayerDroga[playerid][MetR] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Metanfetamina. (Ruim)");
		    if(PlayerDroga[playerid][MetR] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Metanfetamina. (Ruim)");
            PlayerDroga[playerid][MetR] -= ammount;
            PlayerDroga[other][MetR] += ammount;
            format(str,sizeof(str),"Você entregou %d gramas de Metanfetamina para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d gramas de Metanfetamina.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
  		else if(drogaid == 14)
		{
		    if(PlayerDroga[playerid][MetB] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Metanfetamina. (Boa)");
		    if(PlayerDroga[playerid][MetB] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Metanfetamina. (Boa)");
            PlayerDroga[playerid][MetB] -= ammount;
            PlayerDroga[other][MetB] += ammount;
            format(str,sizeof(str),"Você entregou %d gramas de Metanfetamina para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d gramas de Metanfetamina.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
        else if(drogaid == 15)
		{
		    if(PlayerDroga[playerid][MetE] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Metanfetamina. (Excelente)");
		    if(PlayerDroga[playerid][MetE] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Metanfetamina. (Excelente)");
            PlayerDroga[playerid][MetE] -= ammount;
            PlayerDroga[other][MetE] += ammount;
            format(str,sizeof(str),"Você entregou %d gramas de Metanfetamina para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d gramas de Metanfetamina.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
        else if(drogaid == 16)
		{
		    if(PlayerDroga[playerid][Sementes] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Sementes.");
		    if(PlayerDroga[playerid][Sementes] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Sementes.");
            PlayerDroga[playerid][Sementes] -= ammount;
            PlayerDroga[other][Sementes] += ammount;
            format(str,sizeof(str),"Você entregou %d Sementes para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d Sementes.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
		else if(drogaid == 17)
		{
		    if(PlayerDroga[playerid][BDS] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Bicarbonato de Sódio.");
		    if(PlayerDroga[playerid][BDS] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Bicarbonato de Sódio.");
            PlayerDroga[playerid][BDS] -= ammount;
            PlayerDroga[other][BDS] += ammount;
            format(str,sizeof(str),"Você entregou %d sacoletes de Bicarbonato de sódio para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d sacoletes de Bicarbonato de sódio.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
		else if(drogaid == 18)
		{
		    if(PlayerDroga[playerid][PBC] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Pasta Base de Cocaina.");
		    if(PlayerDroga[playerid][PBC] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Pasta Base de Cocaina.");
            PlayerDroga[playerid][PBC] -= ammount;
            PlayerDroga[other][PBC] += ammount;
            format(str,sizeof(str),"Você entregou %d gramas de Pasta Base de Cocaina para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d gramas de Pasta Base de Cocaina.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
		else if(drogaid == 19)
		{
		    if(PlayerDroga[playerid][Acloridrico] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Acido cloridrico.");
		    if(PlayerDroga[playerid][Acloridrico] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Acido cloridrico.");
            PlayerDroga[playerid][Acloridrico] -= ammount;
            PlayerDroga[other][Acloridrico] += ammount;
            format(str,sizeof(str),"Você entregou %d potes de Acido cloridrico para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d potes de Acido cloridrico.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
		else if(drogaid == 20)
		{
		    if(PlayerDroga[playerid][Efedrina] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Acido cloridrico.");
		    if(PlayerDroga[playerid][Efedrina] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Acido cloridrico.");
            PlayerDroga[playerid][Efedrina] -= ammount;
            PlayerDroga[other][Efedrina] += ammount;
            format(str,sizeof(str),"Você entregou %d caixas de efedrina para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %d caixas de efedrina.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
		else if(drogaid == 21)
		{
		    if(PlayerDroga[playerid][LancaPer] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Lança Perfume.");
		    if(PlayerDroga[playerid][LancaPer] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de Lança Perfume.");
            PlayerDroga[playerid][LancaPer] -= ammount;
            PlayerDroga[other][LancaPer] += ammount;
            format(str,sizeof(str),"Você entregou %dml de Lança Perfume para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %dml de Lança Perfume.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
		else if(drogaid == 22)
		{
		    if(PlayerDroga[playerid][BZC] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem benzocaina.");
		    if(PlayerDroga[playerid][BZC] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de benzocaina.");
            PlayerDroga[playerid][BZC] -= ammount;
            PlayerDroga[other][BZC] += ammount;
            format(str,sizeof(str),"Você entregou %dg de benzocaina para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %dg de benzocaina.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
		else if(drogaid == 23)
		{
		    if(PlayerDroga[playerid][LDC] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem lidocaína.");
		    if(PlayerDroga[playerid][LDC] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de lidocaína.");
            PlayerDroga[playerid][LDC] -= ammount;
            PlayerDroga[other][LDC] += ammount;
            format(str,sizeof(str),"Você entregou %dg de lidocaína para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %dg de lidocaína.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
		else if(drogaid == 24)
		{
		    if(PlayerDroga[playerid][HDZ] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem hidroxizina.");
		    if(PlayerDroga[playerid][HDZ] < ammount) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem tudo isso de hidroxizina.");
            PlayerDroga[playerid][HDZ] -= ammount;
            PlayerDroga[other][HDZ] += ammount;
            format(str,sizeof(str),"Você entregou %dg de hidroxizina para %s.",ammount,PlayerName(other,1));
			SendClientMessage(playerid,COLOR_YELLOW,str);
			format(str,sizeof(str),"%s lhe entregou %dg de hidroxizina.",PlayerName(playerid,1),ammount);
			SendClientMessage(other,COLOR_YELLOW,str);
            SaveDrogas(playerid);
            SaveDrogas(other);
            return 1;
		}
	}
 	if(!strcmp(alternativa, "usar", true))
	{
	    if(PlayerInfo[playerid][pUsouDroga] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já está sob o efeito de alguma droga, espere passar para usar novamente.");
		if(!strcmp(nomedroga, "nada", true))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "/drogas usar <id da droga>.");
			SendClientMessage(playerid, COLOR_LIGHTRED, "Para ver o ID da droga use /minhasdrogas");
			return 1;
		}

		new drogaid = strval(nomedroga);
	    if(drogaid < 1 || drogaid > 21) return SendClientMessage(playerid, COLOR_LIGHTRED, "ID da droga inválido.");

	    if(drogaid == 1)
		{
		    if(PlayerDroga[playerid][MaconhaR] < 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa de pelo menos 3g para utilizar.");
            PlayerDroga[playerid][MaconhaR] = PlayerDroga[playerid][MaconhaR]-1;
            SendClientMessage(playerid,COLOR_YELLOW,"Você usou 1 gramas de Maconha. (Ruim) (Você pode usar /passarcig para passar o baseado a alguém)");
            UsarDroga(playerid,1,1);
            SaveDrogas(playerid);
            return 1;
		}
		else if(drogaid == 2)
		{
		    if(PlayerDroga[playerid][MaconhaB] < 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa de pelo menos 3g para utilizar.");
            PlayerDroga[playerid][MaconhaB] = PlayerDroga[playerid][MaconhaB]-1;
            SendClientMessage(playerid,COLOR_YELLOW,"Você usou 1 gramas de Maconha. (Boa) (Você pode usar /passarcig para passar o baseado a alguém)");
            UsarDroga(playerid,1,2);
            SaveDrogas(playerid);
            return 1;
		}
		else if(drogaid == 3)
		{
		    if(PlayerDroga[playerid][MaconhaE] < 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa de pelo menos 3g para utilizar.");
            PlayerDroga[playerid][MaconhaE] = PlayerDroga[playerid][MaconhaE]-1;
            SendClientMessage(playerid,COLOR_YELLOW,"Você usou 1 gramas de Maconha. (Excelente) (Você pode usar /passarcig para passar o baseado a alguém)");
            UsarDroga(playerid,1,3);
            SaveDrogas(playerid);
            return 1;
		}
  		else if(drogaid == 4)
		{
		    if(PlayerDroga[playerid][CocaR] < 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa de pelo menos 3g para utilizar.");
            PlayerDroga[playerid][CocaR] = PlayerDroga[playerid][CocaR]-1;
            SendClientMessage(playerid,COLOR_YELLOW,"Você usou 1 gramas de Cocaina. (Ruim)");
            UsarDroga(playerid,2,1);
            SaveDrogas(playerid);
            return 1;
		}
		else if(drogaid == 5)
		{
		    if(PlayerDroga[playerid][CocaB] < 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa de pelo menos 3g para utilizar.");
            PlayerDroga[playerid][CocaB] = PlayerDroga[playerid][CocaB]-1;
            SendClientMessage(playerid,COLOR_YELLOW,"Você usou 1 gramas de Cocaina. (Boa)");
            UsarDroga(playerid,2,2);
            SaveDrogas(playerid);
            return 1;
		}
		else if(drogaid == 6)
		{
		    if(PlayerDroga[playerid][CocaE] < 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa de pelo menos 3g para utilizar.");
            PlayerDroga[playerid][CocaE] = PlayerDroga[playerid][CocaE]-1;
            SendClientMessage(playerid,COLOR_YELLOW,"Você usou 1 gramas de Cocaina. (Excelente)");
            UsarDroga(playerid,2,3);
            SaveDrogas(playerid);
            return 1;
		}
		else if(drogaid == 7)
		{
		    if(PlayerDroga[playerid][CrackR] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa de pelo menos 1g para utilizar.");
            PlayerDroga[playerid][CrackR] = PlayerDroga[playerid][CrackR]-1;
            SendClientMessage(playerid,COLOR_YELLOW,"Você usou 1 gramas de Crack. (Ruim)");
            UsarDroga(playerid,3,1);
            SaveDrogas(playerid);
            return 1;
		}
		else if(drogaid == 8)
		{
		    if(PlayerDroga[playerid][CrackB] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa de pelo menos 1g para utilizar.");
            PlayerDroga[playerid][CrackB] = PlayerDroga[playerid][CrackB]-1;
            SendClientMessage(playerid,COLOR_YELLOW,"Você usou 1 gramas de Crack. (Bom)");
            UsarDroga(playerid,3,2);
            SaveDrogas(playerid);
            return 1;
		}
		else if(drogaid == 9)
		{
		    if(PlayerDroga[playerid][CrackE] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa de pelo menos 1g para utilizar.");
            PlayerDroga[playerid][CrackE] = PlayerDroga[playerid][CrackE]-1;
            SendClientMessage(playerid,COLOR_YELLOW,"Você usou 1 gramas de Crack. (Excelente)");
            UsarDroga(playerid,3,3);
            SaveDrogas(playerid);
            return 1;
		}
		else if(drogaid == 10)
		{
		    if(PlayerDroga[playerid][LSDR] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa de pelo menos 1g para utilizar.");
            PlayerDroga[playerid][LSDR] = PlayerDroga[playerid][LSDR]-1;
            SendClientMessage(playerid,COLOR_YELLOW,"Você usou 1 LSD. (Ruim)");
            UsarDroga(playerid,4,1);
            SaveDrogas(playerid);
            return 1;
		}
		else if(drogaid == 11)
		{
		    if(PlayerDroga[playerid][LSDB] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa de pelo menos 1g para utilizar.");
            PlayerDroga[playerid][LSDB] = PlayerDroga[playerid][LSDB]-1;
            SendClientMessage(playerid,COLOR_YELLOW,"Você usou 1 LSD. (Bom)");
            UsarDroga(playerid,4,2);
            SaveDrogas(playerid);
            return 1;
		}
		else if(drogaid == 12)
		{
		    if(PlayerDroga[playerid][LSDE] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa de pelo menos 1g para utilizar.");
            PlayerDroga[playerid][LSDE] = PlayerDroga[playerid][LSDE]-1;
            SendClientMessage(playerid,COLOR_YELLOW,"Você usou 1 LSD. (Excelente)");
            UsarDroga(playerid,4,3);
            SaveDrogas(playerid);
            return 1;
		}
		else if(drogaid == 13)
		{
		    if(PlayerDroga[playerid][MetR] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa de pelo menos 1g para utilizar.");
            PlayerDroga[playerid][MetR] = PlayerDroga[playerid][MetR]-1;
            SendClientMessage(playerid,COLOR_YELLOW,"Você usou 1 gramas de Metanfetamina. (Ruim)");
            UsarDroga(playerid,5,1);
            SaveDrogas(playerid);
            return 1;
		}
		else if(drogaid == 14)
		{
		    if(PlayerDroga[playerid][MetB] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa de pelo menos 1g para utilizar.");
            PlayerDroga[playerid][MetB] = PlayerDroga[playerid][MetB]-1;
            SendClientMessage(playerid,COLOR_YELLOW,"Você usou 1 gramas de Metanfetamina. (Boa)");
            UsarDroga(playerid,5,2);
            SaveDrogas(playerid);
            return 1;
		}
		else if(drogaid == 15)
		{
		    if(PlayerDroga[playerid][MetE] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa de pelo menos 1g para utilizar.");
            PlayerDroga[playerid][MetE] = PlayerDroga[playerid][MetE]-1;
            SendClientMessage(playerid,COLOR_YELLOW,"Você usou 1 gramas de Metanfetamina. (Excelente)");
            UsarDroga(playerid,5,3);
            SaveDrogas(playerid);
            return 1;
		}
		else if(drogaid == 21)
		{
		    if(PlayerDroga[playerid][LancaPer] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa de pelo menos 1ml para utilizar.");
            PlayerDroga[playerid][LancaPer] = PlayerDroga[playerid][LancaPer]-1;
            SendClientMessage(playerid,COLOR_YELLOW,"Você usou 1ml de lança Perfume.");
            UsarDroga(playerid,5,3);
            SaveDrogas(playerid);
            return 1;
		}
	}
 	if(!strcmp(alternativa, "plantar", true))
	{
		if(PlayerDroga[playerid][Sementes] <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem nenhuma semente de cannabis.");
        PlayerDroga[playerid][Sementes]--;
		SendClientMessage(playerid, COLOR_LIGHTRED, "AVISO: O processo total demora 1h30.");
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
        SaveDrogas(playerid);
		PlantandoDroga(playerid);
		return 1;
	}
	if(!strcmp(alternativa, "colher", true))
	{
	    new nada = 0;
		for(new i = 0; i < MAX_DRUGPLANT; i ++)
		{
		    if(DrogaPlantada[i][ddSeteda] == 1)
	    	{
	    	    if(IsPlayerInRangeOfPoint(playerid, 1.5, DrogaPlantada[i][ddX], DrogaPlantada[i][ddY], DrogaPlantada[i][ddZ]) && DrogaPlantada[i][ddWorld] == GetPlayerVirtualWorld(playerid))
				{
		    	    if(DrogaPlantada[i][ddEstado] == 0)
					{
	    				if(IsValidDynamicObject(DrogaPlantada[i][ddObjeto])) DestroyDynamicObject(DrogaPlantada[i][ddObjeto]);
	    				DrogaPlantada[i][ddEstado] = 5;
	    				DrogaPlantada[i][ddTempo] = 0;
	    				DrogaPlantada[i][ddSeteda] = 0;
	    				new qnttt = randomEx(5, 80);
	    				new qnttta = 0,
							achouSemente = random(5);

	    				if(achouSemente == 2) qnttta++;

	    				if(qnttta == 0)
	    					format(str,sizeof(str),"Você colheu %d gramas de maconha.", qnttt);
						else
						    format(str,sizeof(str),"Você colheu %d gramas de maconha e conseguiu uma semente!", qnttt);

						SendClientMessage(playerid,COLOR_GREEN,str);

	    				switch(DrogaPlantada[i][ddWorld] == 0)
	    				{
	    				    case 0:
							{
							    new qualidade = randomEx(0, 10);
							    switch(qualidade)
							    {
							        case 0, 2, 4, 6:
							        {
							            PlayerDroga[playerid][MaconhaB] += qnttt;
                        				PlayerDroga[playerid][Sementes] += qnttta;
							        }
							        case 3, 8:
							        {
							            PlayerDroga[playerid][MaconhaE] += qnttt;
                        				PlayerDroga[playerid][Sementes] += qnttta;
							        }
							        default:
							        {
							            PlayerDroga[playerid][MaconhaR] += qnttt;
                        				PlayerDroga[playerid][Sementes] += qnttta;
							        }
							    }

							}
							default:
							{
							    new qualidade = randomEx(0, 10);
							    switch(qualidade)
							    {
							        case 2, 6:
							        {
							            PlayerDroga[playerid][MaconhaB] += qnttt;
                        				PlayerDroga[playerid][Sementes] += qnttta;
							        }
							        case 0:
							        {
							            PlayerDroga[playerid][MaconhaE] += qnttt;
                        				PlayerDroga[playerid][Sementes] += qnttta;
							        }
							        default:
							        {
							            PlayerDroga[playerid][MaconhaR] += qnttt;
                        				PlayerDroga[playerid][Sementes] += qnttta;
							        }
							    }

							}
						}
	    				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	 					SaveDroga(i);
	 					SaveDrogas(playerid);
	 					nada++;
	 					return 1;
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você ainda não pode colher essa droga.");
				}
			}
		}
		if(nada == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está perto de nenhuma planta.");
	}
	if(!strcmp(alternativa, "destruir", true))
	{
	    new nada = 0;
		for(new i = 0; i < MAX_DRUGPLANT; i ++)
		{
		    if(DrogaPlantada[i][ddSeteda] == 1)
	    	{
	    	    if(IsPlayerInRangeOfPoint(playerid, 1.5, DrogaPlantada[i][ddX], DrogaPlantada[i][ddY], DrogaPlantada[i][ddZ]) && DrogaPlantada[i][ddWorld] == GetPlayerVirtualWorld(playerid))
				{
					if(IsValidDynamicObject(DrogaPlantada[i][ddObjeto])) DestroyDynamicObject(DrogaPlantada[i][ddObjeto]);
					DrogaPlantada[i][ddEstado] = 5;
					DrogaPlantada[i][ddTempo] = 0;
					DrogaPlantada[i][ddSeteda] = 0;
					SaveDroga(i);
					SendClientMessage(playerid, COLOR_LIGHTRED, " Você destruiu a plantação de droga.");
					nada++;
					return 1;
				}
			}
		}
		if(nada == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está perto de nenhuma planta.");
	}
	return 1;
}
stock PlantandoDroga(playerid)
{
	new str[256];
    for(new i = 0; i < MAX_DRUGPLANT; i++)
    {
        if(DrogaPlantada[i][ddSeteda] == 0)
        {
            format(str,sizeof(str),"INSERT INTO rp_drogasplant (setada) VALUES ('1')");
   			mysql_function_query(Pipeline, str, false, "CriandoDrogaPlantada", "d",playerid);
   			return 1;
		}
	}
	return 1;
}
forward CriandoDrogaPlantada(playerid);
public CriandoDrogaPlantada(playerid)
{
	new i = cache_insert_id();
	new Float:X, Float:Y, Float:Z;
    GetPlayerPos(playerid, X, Y, Z);

    DrogaPlantada[i][ddID] = i;
	DrogaPlantada[i][ddTempo] = 1800;
	DrogaPlantada[i][ddEstado] = 3;
	DrogaPlantada[i][ddX] = X;
	DrogaPlantada[i][ddY] = Y;
	DrogaPlantada[i][ddZ] = Z-1.0;
    DrogaPlantada[i][ddSeteda] = 1;
    DrogaPlantada[i][ddWorld] = GetPlayerVirtualWorld(playerid);

	DrogaPlantada[i][ddObjeto] = CreateDynamicObject(859, X, Y, Z-1.0, 0.000000, 0.000000, 0.0, DrogaPlantada[i][ddWorld]);
   	//Streamer_UpdateEx(playerid, X, Y, Z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
   	Streamer_Update(playerid);

   	SaveDroga(i);
    return 1;
}
forward SaveDroga(i);
public SaveDroga(i)
{
	new str[254];
	format(str,sizeof(str),"UPDATE `rp_drogasplant` SET `x`='%f',`y`='%f',`z`='%f',`r`='%f',`tempo`='%d',`estado`='%d',`setada`='%d',`world`='%d' WHERE id=%d LIMIT 1",
 	DrogaPlantada[i][ddX],
	DrogaPlantada[i][ddY],
	DrogaPlantada[i][ddZ],
	DrogaPlantada[i][ddR],
	DrogaPlantada[i][ddTempo],
	DrogaPlantada[i][ddEstado],
	DrogaPlantada[i][ddSeteda],
	DrogaPlantada[i][ddWorld],
	DrogaPlantada[i][ddID]);
	mysql_function_query(Pipeline, str, false, "noReturnQuery", "");
}
forward QUERY_LOAD_DRUGPLAN();
public QUERY_LOAD_DRUGPLAN()
{
    new b[256];
	new rows,fields;
	cache_get_data(rows, fields);
	new drogas = rows, total = 0;
 	for(new i; i < drogas; i++)
  	{
        cache_get_field_content(i,"id",b);  				DrogaPlantada[i][ddID] = strval(b);
        cache_get_field_content(i,"setada",b);         		DrogaPlantada[i][ddSeteda] = strval(b);
        cache_get_field_content(i,"x",b);         			DrogaPlantada[i][ddX] = floatstr(b);
        cache_get_field_content(i,"y",b);         			DrogaPlantada[i][ddY] = floatstr(b);
        cache_get_field_content(i,"z",b);         			DrogaPlantada[i][ddZ] = floatstr(b);
    	cache_get_field_content(i,"r",b);         			DrogaPlantada[i][ddR] = floatstr(b);
    	cache_get_field_content(i,"tempo",b);         		DrogaPlantada[i][ddTempo] = strval(b);
    	cache_get_field_content(i,"estado",b);         		DrogaPlantada[i][ddEstado] = strval(b);
    	cache_get_field_content(i,"world",b);         		DrogaPlantada[i][ddWorld] = strval(b);

    	if(DrogaPlantada[i][ddSeteda] == 1)
    	{
    	    if(DrogaPlantada[i][ddEstado] == 3) DrogaPlantada[i][ddObjeto] = CreateDynamicObject(859, DrogaPlantada[i][ddX], DrogaPlantada[i][ddY], DrogaPlantada[i][ddZ], 0.000000, 0.000000, DrogaPlantada[i][ddR], DrogaPlantada[i][ddWorld]);
        	if(DrogaPlantada[i][ddEstado] == 2) DrogaPlantada[i][ddObjeto] = CreateDynamicObject(861, DrogaPlantada[i][ddX], DrogaPlantada[i][ddY], DrogaPlantada[i][ddZ], 0.000000, 0.000000, DrogaPlantada[i][ddR], DrogaPlantada[i][ddWorld]);
            if(DrogaPlantada[i][ddEstado] <= 1) DrogaPlantada[i][ddObjeto] = CreateDynamicObject(19473, DrogaPlantada[i][ddX], DrogaPlantada[i][ddY], DrogaPlantada[i][ddZ], 0.000000, 0.000000, DrogaPlantada[i][ddR], DrogaPlantada[i][ddWorld]);
            total++;
		}
	}
	printf("[Drug System] Atualmente existem %d drogas plantadas por SA.",total);
	return 1;
}
//==============================================================================


//==============================================================================
//Anti AimBot [ Anti Cheater ]
public OnPlayerSuspectedForAimbot(playerid,hitid,weaponid,warnings)
{
	new str[144],nme[MAX_PLAYER_NAME],wname[32],Float:Wstats[BUSTAIM_WSTATS_SHOTS];

	ids[playerid]++;
	GetPlayerName(playerid,nme,sizeof(nme));
	GetWeaponName(weaponid,wname,sizeof(wname));
	if(warnings & WARNING_OUT_OF_RANGE_SHOT)
	{
	    TogglePlayerControllable(playerid, false);
	    format(str,256,"O ANTI-CHEAT[%d]%s(%d) disparou tiros de uma distância maior do que %s's.(Normal Range:%f)",ids[playerid],nme,playerid,wname,BustAim::GetNormalWeaponRange(weaponid));
		SendAdminMessage(-1,str);
		BustAim::GetRangeStats(playerid,Wstats);
		format(str,256,"Shooter to Victim Distance(SA Units): 1)%f 2)%f 3)%f",Wstats[0],Wstats[1],Wstats[2]);
		SendAdminMessage(-1,str);
	}
	if(warnings & WARNING_PROAIM_TELEPORT)
	{
	    TogglePlayerControllable(playerid, false);
	    format(str,256,"O ANTI-CHEAT[%d]%s(%d) está usando PROAIM (Teleport Detectado)",ids[playerid],nme,playerid);
		SendAdminMessage(-1,str);
		BustAim::GetTeleportStats(playerid,Wstats);
		format(str,256,"Bullet to Victim Distance(SA Units): 1)%f 2)%f 3)%f",Wstats[0],Wstats[1],Wstats[2]);
		SendAdminMessage(-1,str);
	}
	if(warnings & WARNING_RANDOM_AIM)
	{
	    TogglePlayerControllable(playerid, false);
	    format(str,256,"O ANTI-CHEAT[%d]%s(%d) é suspeito de estar usando aimbot (Hit com a Random Aim com %s)",ids[playerid],nme,playerid,wname);
		SendAdminMessage(-1,str);
		BustAim::GetRandomAimStats(playerid,Wstats);
		format(str,256,"Random Aim Offsets: 1)%f 2)%f 3)%f",Wstats[0],Wstats[1],Wstats[2]);
		SendAdminMessage(-1,str);
	}
	/*if(warnings & WARNING_BACKWARD_SHOT)
	{
	    TogglePlayerControllable(playerid, false);
	    format(str,256,"O ANTI-CHEAT[%d]%s(%d) atirou em um jogador atrás dele com %s.",ids[playerid],nme,playerid,wname);
		SendAdminMessage(-1,str);
	}*/
	if(warnings & WARNING_CONTINOUS_SHOTS)
	{
	    TogglePlayerControllable(playerid, false);
	    format(str,256,"O ANTI-CHEAT[%d]%s(%d) disparou 10 tiros continuamente com %s(%d)",ids[playerid],nme,playerid,wname,weaponid);
		SendAdminMessage(-1,str);
	}
	return 0;
}

//==============================================================================
forward SalvarCrime(playerid,CrimID);
public SalvarCrime(playerid,CrimID)
{
    new _dinamicString[1024];
    if(!IsPlayerConnected(playerid)) { return 1; }

    format(_dinamicString, sizeof(_dinamicString), "UPDATE `crimes` SET `CriOwn`='%d',`CriOwnN`='%s',`CriData`='%s',`CriCrime`='%s',`CriPena`='%s',`CrimeRelat`='%s' ,`CriOutrInfo`='%s' WHERE `CriID` = '%d'",
	CrimeData[CrimID][CriOwn],
	CrimeData[CrimID][CriOwnN],
	CrimeData[CrimID][CriData],
	CrimeData[CrimID][CriCrime],
	CrimeData[CrimID][CriPena],
	CrimeData[CrimID][CrimeRelat],
	CrimeData[CrimID][CriOutrInfo],
	CrimID);
    mysql_function_query(Pipeline, _dinamicString, false, "noReturnQuery", "d", 5);
    return true;
}
//==============================================================================
public OnPlayerAirbreak(playerid)
{
    TogglePlayerControllable(playerid, false);
    format(string,256,"O ANTI-CHEAT %s(%d) pode estar de AirBreak.",PlayerName(playerid,0),playerid);
	SendAdminMessage(COLOR_LIGHTRED,string);
	//BanEx(playerid, "Airbreak");
    return 1;
}

Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ)
{
        new Float:TGTDistance;

        TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

        new Float:tmpX, Float:tmpY, Float:tmpZ;

        tmpX = FrX * TGTDistance + CamX;
        tmpY = FrY * TGTDistance + CamY;
        tmpZ = FrZ * TGTDistance + CamZ;

        return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}
Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:X, Float:Y)
{

  new Float:DX, Float:DY;
  new Float:angle;

  DX = floatabs(floatsub(x2,X));
  DY = floatabs(floatsub(y2,Y));

  if (DY == 0.0 || DX == 0.0)
  {
    if(DY == 0 && DX > 0) angle = 0.0;
    else if(DY == 0 && DX < 0) angle = 180.0;
    else if(DY > 0 && DX == 0) angle = 90.0;
    else if(DY < 0 && DX == 0) angle = 270.0;
    else if(DY == 0 && DX == 0) angle = 0.0;
  }
  else
  {
    angle = atan(DX/DY);

    if(X > x2 && Y <= y2) angle += 90.0;
    else if(X <= x2 && Y < y2) angle = floatsub(90.0, angle);
    else if(X < x2 && Y >= y2) angle -= 90.0;
    else if(X >= x2 && Y > y2) angle = floatsub(270.0, angle);
  }
  return floatadd(angle, 90.0);
}

GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance)
{
        x += (distance * floatsin(-angle, degrees));
        y += (distance * floatcos(-angle, degrees));
}

IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
        new Float:camera_x,Float:camera_y,Float:camera_z,Float:vector_x,Float:vector_y,Float:vector_z;
        GetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);
        GetPlayerCameraFrontVector(playerid, vector_x, vector_y, vector_z);

        new Float:vertical, Float:horizontal;

        switch (GetPlayerWeapon(playerid))
        {
                        case 34,35,36: {
                        if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, vector_x, vector_y, vector_z) < radius) return true;
                        return false;
                        }
                        case 30,31: {vertical = 4.0; horizontal = -1.6;}
                        case 33: {vertical = 2.7; horizontal = -1.0;}
                        default: {vertical = 6.0; horizontal = -2.2;}
        }

        new Float:angle = GetPointAngleToPoint(0, 0, floatsqroot(vector_x*vector_x+vector_y*vector_y), vector_z) - 270.0;
        new Float:resize_x, Float:resize_y, Float:resize_z = floatsin(angle+vertical, degrees);
        GetXYInFrontOfPoint(resize_x, resize_y, GetPointAngleToPoint(0, 0, vector_x, vector_y)+horizontal, floatcos(angle+vertical, degrees));

        if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, resize_x, resize_y, resize_z) < radius) return true;
        return false;
}

forward bool:IsPlayerAimingAtPlayer(playerid, target);
public bool:IsPlayerAimingAtPlayer(playerid, target)
{
        new Float:x, Float:y, Float:z;
        GetPlayerPos(target, x, y, z);
        if (IsPlayerAimingAt(playerid, x, y, z-0.75, 0.25)) return true;
        if (IsPlayerAimingAt(playerid, x, y, z-0.25, 0.25)) return true;
        if (IsPlayerAimingAt(playerid, x, y, z+0.25, 0.25)) return true;
        if (IsPlayerAimingAt(playerid, x, y, z+0.75, 0.25)) return true;
        return false;
}

forward SetPlayerArmour_CA(playerid, Float:armour);
public SetPlayerArmour_CA(playerid, Float:armour)
{
    P_Armour[playerid] = armour;

    SetPlayerArmour(playerid, armour);
    return 1;
}

CMD:ns(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new stats[400+1];
 	GetPlayerNetworkStats(playerid, stats, sizeof(stats)); // get your own networkstats
 	SendClientMessage(playerid,-1, stats);

 	new szString[144];
  	format(szString, sizeof(szString), "Packets lost: %.2f percent.", NetStats_PacketLossPercent(playerid));
  	SendClientMessage(playerid, COLOR_WHITE, szString);
	return 1;
}
//==============================================================================
stock GetClosestAlarme(playerid)
{
	new winner = -1;
	new Float:winning_distance = 99999.9;
	for(new i = 0; i < MAX_HOUSES; i ++)
	{
	    if(HouseInfo[i][hCriada] && HouseInfo[i][hAlarmeDisparado] > 0)
	    {
	        if(GetPlayerVirtualWorld(playerid) == HouseInfo[i][hExWorld])
	        {
				new Float:distance = GetDistanceToPoint(playerid,HouseInfo[i][hExX],HouseInfo[i][hExY],HouseInfo[i][hExZ]);
			    if(distance < winning_distance && distance < 50.0)
			    {
					winner = i;
					winning_distance = distance;
			    }
			}
		}
	}
	return winner;
}
stock GetClosestAlarmeGaragem(playerid)
{
	new winner = -1;
	new Float:winning_distance = 99999.9;
	for(new i = 0; i < MAX_GARAGENS; i ++)
	{
	    if(GaragemInfo[i][hCriada] && GaragemInfo[i][hAlarmeDisparado] > 0)
	    {
	        if(GetPlayerVirtualWorld(playerid) == GaragemInfo[i][hExWorld])
	        {
				new Float:distance = GetDistanceToPoint(playerid,GaragemInfo[i][hExX],GaragemInfo[i][hExY],GaragemInfo[i][hExZ]);
			    if(distance < winning_distance && distance < 50.0)
			    {
					winner = i;
					winning_distance = distance;
			    }
			}
		}
	}
	return winner;
}
//==============================================================================
stock CreateBoomBox(playerid,Float:X, Float:Y, Float:Z, Float:R, world)
{
	Z -= 1.0;
	new slot = FetchNextBoomBoxSlot();
	if(slot > -1)
	{
	    BoomBoxInfo[slot][boX] = X;
	    BoomBoxInfo[slot][boY] = Y;
	    BoomBoxInfo[slot][boZ] = Z;
		BoomBoxInfo[slot][boObject] = CreateDynamicObject(2226,X,Y,Z,0.0,0.0,R, world);
		BoomBoxInfo[slot][boUsed] = 1;
		BoomBoxInfo[slot][boWorld] = world;
		BoomBoxInfo[slot][boPlacer] = PlayerInfo[playerid][pID];
		PlayerInfo[playerid][pBoombox] = 0;
		BoomBoxInfo[slot][boVolume] = 50;
		return 1;
	}
	else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Um erro ocorreu ao criar sua boombox, tente novamente daqui a alguns minutos.");
}

stock FetchNextBoomBoxSlot()
{
	for(new i = 0; i < MAX_BOOMBOXES; i ++)
	{
	    if(BoomBoxInfo[i][boUsed] == 0)
	    {
	        return i;
	    }
	}
	return -1;
}

stock HasPlacedBoomBox(playerid)
{
	for(new i = 0; i < MAX_BOOMBOXES; i ++)
	{
		if(BoomBoxInfo[i][boUsed])
		{
		    if(BoomBoxInfo[i][boPlacer] == PlayerInfo[playerid][pID]) return true;
		}
	}
	return false;
}

stock GetClosestBoomBox(playerid,Float:maxdistance)
{
	new winner = -1;
	new Float:winning_distance = 99999.9;
	for(new i = 0; i < MAX_BOOMBOXES; i ++)
	{
	    if(BoomBoxInfo[i][boUsed])
	    {
	        if(GetPlayerVirtualWorld(playerid) == BoomBoxInfo[i][boWorld])
	        {
				new Float:distance = GetDistanceToPoint(playerid,BoomBoxInfo[i][boX],BoomBoxInfo[i][boY],BoomBoxInfo[i][boZ]);
			    if(distance < winning_distance && distance < maxdistance)
			    {
					winner = i;
					winning_distance = distance;
			    }
			}
		}
	}
	return winner;
}

stock RefreshBoomBoxListeners(box)
{
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(streaming_boombox[i] == box)
	        {
                StopAudioStreamForPlayer(i);
	            streaming_boombox[i] = -1;
	            boom_box_handle[i] = -1;
	            Streamer_Update(i);
	        }
	    }
	}
}

forward QUERY_TUNE_BOOMBOX(playerid);
public QUERY_TUNE_BOOMBOX(playerid)
{
    new Rows, Fields;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
 	    new box = changing_boombox[playerid];
		new boom_box_str[526];
		cache_get_field_content(0,"URL",boom_box_str); format(BoomBoxInfo[box][boStream],526,"%s",boom_box_str);
		changing_boombox[playerid] = -1;
 		RefreshBoomBoxListeners(box);
	}
 	else
  	{
		SendClientMessage(playerid,COLOR_LIGHTRED,"Esta estação de radio não existe.");
	}
	return 1;
}

forward Float:GetPosInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance);
public Float:GetPosInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    if (IsPlayerInAnyVehicle(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    else GetPlayerFacingAngle(playerid, a);
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
    return a;
}

stock RefreshXMRListeners(box)
{
	for(new i = 0; i < MAX_PLAYERS; i ++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(ouvindoxmradio[i] == 1)
	        {
	            if(ouvindoxmradioID[i] == box)
	            {
		            if(strlen(HouseInfo[PlayerInfo[i][pEntrouCasa]][hXMR]))
				    {
				        StopAudioStreamForPlayer(i);

   						PlayAudioStreamForPlayer(i, HouseInfo[PlayerInfo[i][pEntrouCasa]][hXMR]);
					}
					else
 					{
 						StopAudioStreamForPlayer(i);
  						ouvindoxmradio[i] = 0;
   						ouvindoxmradioID[i] = 0;
					}
				}
	        }
	        else if(ouvindoxmradio[i] == 2)
	        {
	            if(ouvindoxmradioID[i] == box)
	            {
		            if(strlen(EmpInfo[PlayerInfo[i][pEntrouEmpresa]][eXMR]))
	    			{
	    			    StopAudioStreamForPlayer(i);

     					PlayAudioStreamForPlayer(i, EmpInfo[PlayerInfo[i][pEntrouEmpresa]][eXMR]);
					}
					else
 					{
 						StopAudioStreamForPlayer(i);
  						ouvindoxmradio[i] = 0;
   						ouvindoxmradioID[i] = 0;
					}
				}
	        }
	        else if(ouvindoxmradio[i] == 3)
	        {
	            if(ouvindoxmradioID[i] == box)
	            {
		            if(strlen(EmpInfo[PlayerInfo[i][pEntrouComplexo]][eXMR]))
	   				{
	   				    StopAudioStreamForPlayer(i);

       					PlayAudioStreamForPlayer(i, ComplexoInfo[PlayerInfo[i][pEntrouComplexo]][cXMR]);
					}
					else
 					{
 						StopAudioStreamForPlayer(i);
  						ouvindoxmradio[i] = 0;
   						ouvindoxmradioID[i] = 0;
					}
				}
	        }
	        else if(ouvindoxmradio[i] == 4)
	        {
	            if(ouvindoxmradioID[i] == box)
	            {
		            new slot = GetVehicleSlot(GetPlayerVehicleID(i));
					if(slot > -1)
					{
						if(strlen(VehicleInfo[slot][vXMR]))
					   	{
					   	    StopAudioStreamForPlayer(i);

    						PlayAudioStreamForPlayer(i, VehicleInfo[slot][vXMR]);
						}
					}
					else
 					{
 						StopAudioStreamForPlayer(i);
  						ouvindoxmradio[i] = 0;
   						ouvindoxmradioID[i] = 0;
					}
				}
	        }
	        else if(ouvindoxmradio[i] == 5)
	        {
	            if(ouvindoxmradioID[i] == box)
	            {
		            if(strlen(GaragemInfo[PlayerInfo[i][pEntrouGaragem]][hXMR]))
				    {
				        StopAudioStreamForPlayer(i);

   						PlayAudioStreamForPlayer(i, GaragemInfo[PlayerInfo[i][pEntrouGaragem]][hXMR]);
					}
					else
 					{
 						StopAudioStreamForPlayer(i);
  						ouvindoxmradio[i] = 0;
   						ouvindoxmradioID[i] = 0;
					}
				}
	        }
	    }
	}
}
//============================================================================== [ Phone System ]

stock MenuCompraArma(playerid, pag)
{
	if(pag == 1)
	{
		print("Chegou arma");
	    new traficid = OutrasInfos[playerid][oTraficanteID];

	    new stringw[526], _string[126];
	    format(stringw, sizeof(stringw), "Item\n");
	    for(new i = 0; i < 15; i++)
	    {
    		if(TraficInfo[traficid][traPed][i] > 21)
			{
				format(_string, sizeof(_string), "%d - %s\n",i,GunNames[TraficInfo[traficid][traPed][i]]);
			}
  			else
			{
				if(TraficInfo[traficid][traPed][i] == 1) format(_string, sizeof(_string), "%d - Caixa de munição 9mm\n",i);
				else if(TraficInfo[traficid][traPed][i] == 2) format(_string, sizeof(_string), "Caixa de munição 5.56mm\n",i);
				else if(TraficInfo[traficid][traPed][i] == 3) format(_string, sizeof(_string), "%d - Caixa de cartuchos\n",i);
				else if(TraficInfo[traficid][traPed][i] == 4) format(_string, sizeof(_string), "%d - Caixa de munição 12.7x106mm\n",i);
				else format(_string, sizeof(_string), "%d - Vazio\n", i);
			}
		    strcat(stringw, _string);
	    }
		print("Chegou droga");
	    format(_string, sizeof(_string), "\nCancelar Pedido\n\n---------------------\nValor: R$%d", TraficInfo[traficid][traPedPrec]);
	    strcat(stringw, _string);
	    Dialog_Show(playerid, DIALOG_VPEDIDO, DIALOG_STYLE_TABLIST_HEADERS, "Seu Pedido", stringw, "Selecionar", "Finalizar Pedido");
	}
	else if(pag == 2)
	{
	    new traficid = 9999,
			temcarroperto = 0,
			Float:X,Float:Y,Float:Z;
	    for(new i = 0; i  < MAX_TRAFICANTES; i++)
		{
			GetVehiclePos(TraficInfo[i][traCarro],X,Y,Z);
		    if(IsPlayerInRangeOfPoint(playerid, 10.0, X, Y, Z))
			{
			    temcarroperto = 1;
	    		if(TraficInfo[i][traFaccao] == PlayerInfo[playerid][pFac])
	    		{
	    		    traficid = i;
	    	    }
	    	}
		}
		if(temcarroperto == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo de nenhum veículo.");
		if(temcarroperto == 1 && traficid == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem acesso a este veículo.");

	    new stringw[526], _string[126], vazio = 0;
	    format(stringw, sizeof(stringw), "Item\n");
	    for(new i = 0; i < 15; i++)
	    {
    		if(TraficInfo[traficid][traPed][i] > 21)
			{
				format(_string, sizeof(_string), "%s\n",GunNames[TraficInfo[traficid][traPed][i]]);
			}
  			else
			{
				if(TraficInfo[traficid][traPed][i] == 1) format(_string, sizeof(_string), "Caixa de munição 9mm\n");
				else if(TraficInfo[traficid][traPed][i] == 2) format(_string, sizeof(_string), "Caixa de munição 5.56mm\n");
				else if(TraficInfo[traficid][traPed][i] == 3) format(_string, sizeof(_string), "Caixa de cartuchos\n");
				else if(TraficInfo[traficid][traPed][i] == 4) format(_string, sizeof(_string), "Caixa de munição 12.7x106mm\n");
				else
				{
					format(_string, sizeof(_string), "Vazio\n");
					vazio++;
				}
			}
		    strcat(stringw, _string);
	    }
	    strcat(stringw, _string);

	    if(vazio == 15)
     	{
		 	SetVehicleParamsEx(TraficInfo[traficid][traCarro],0,0,0,1,0,0,0);
            SCM(playerid, COLOR_LIGHTRED, "Não há mais nada neste portamalas.");
            OutrasInfos[playerid][oAguardandoNewTraf] = 1;
		}
	    else
			Dialog_Show(playerid, DIALOG_PPEDIDO, DIALOG_STYLE_TABLIST_HEADERS, "Seu Pedido", stringw, "Pegar", "Cancelar");
	}
	return 1;
}

Dialog:DIALOG_PPEDIDO(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
		new traficid = 9999,
			temcarroperto = 0,
			Float:X,Float:Y,Float:Z;
	    for(new i = 0; i  < MAX_TRAFICANTES; i++)
		{
			GetVehiclePos(TraficInfo[i][traCarro],X,Y,Z);
		    if(IsPlayerInRangeOfPoint(playerid, 10.0, X, Y, Z))
			{
			    temcarroperto = 1;
	    		if(TraficInfo[i][traFaccao] == PlayerInfo[playerid][pFac])
	    		{
	    		    traficid = i;
	    	    }
	    	}
		}
		if(temcarroperto == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo de nenhum veículo.");
		if(temcarroperto == 1 && traficid == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem acesso a este veículo.");
		if(traficid != 9999)
		{
			new pedidoid = listitem;
			new _string[64];

			if(TraficInfo[traficid][traPed][pedidoid] != 0)
			{
			    if(TraficInfo[traficid][traPed][pedidoid] > 21)
			    {
			        if(PlayerInfo[playerid][pArmaMao] != 0) return SCM(playerid, COLOR_LIGHTRED, "Você já tem uma arma em mãos.");

					EntregandoArmaSQL(playerid, TraficInfo[traficid][traPed][pedidoid], 0, 0, 1);
					format(string,sizeof(string),"Você pegou uma %s do portamalas.", GunNames[TraficInfo[traficid][traPed][pedidoid]]);
		 			SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
				}
				else
				{
				    if(TraficInfo[traficid][traPed][pedidoid] == 1)
					{
						format(_string, sizeof(_string), "Caixa de munição 9mm");
						PlayerInfo[playerid][pMun9mm] += 50;
					}
					else if(TraficInfo[traficid][traPed][pedidoid] == 2)
					{
						format(_string, sizeof(_string), "Caixa de munição 5.56mm");
						PlayerInfo[playerid][pMun556] += 50;
					}
					else if(TraficInfo[traficid][traPed][pedidoid] == 3)
					{
						format(_string, sizeof(_string), "Caixa de cartuchos");
						PlayerInfo[playerid][pMunCart] += 50;
					}
					else if(TraficInfo[traficid][traPed][pedidoid] == 4)
					{
						format(_string, sizeof(_string), "Caixa de munição 12.7x106mm");
						PlayerInfo[playerid][pMun127] += 5;
					}
					else format(_string, sizeof(_string), "Vazio");
					{
						format(string,sizeof(string),"Você pegou uma %s do portamalas.", _string);
		 				SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
					}
				}

				TraficInfo[traficid][traPed][pedidoid] = 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Não há nada neste slot do pedido.");
			}
		}
	}
    return 1;
}

Dialog:DIALOG_VPEDIDO(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    new trafid = OutrasInfos[playerid][oTraficanteID];
	    new algumdif = 0;
	    for(new te = 0; te < 15; te++)
		{
			if(TraficInfo[trafid][traPed][te] != 0)
			{
			    algumdif++;
			    break;
			}
		}
		if(algumdif != 0)
		{
		    new rand = TraficInfo[trafid][traRand];
		    new location[MAX_ZONE_NAME];
			Get2DZone(location, TOTAL_ZONE_NAME, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2]);
	 		format(string, sizeof(string), "Traficante diz (celular): Seu pedido foi anotado. Vai estar tudo em um porta-malas de um carro em %s.. Não demore.", location);
			SCM(playerid, COLOR_YELLOW, string);
			SCM(playerid, COLOR_WHITE, "(Use /encomenda para pegar seu pedido | /encomendac para reviver o checkpoint)");

		    //EndCall(playerid);

			OutrasInfos[playerid][oTraficanteRand] = rand;

			new randomcar = random(30),
			    carforcreate;
			switch(randomcar)
			{
			    case 0: carforcreate = 401;
			    case 1: carforcreate = 400;
			    case 2: carforcreate = 404;
			    case 3: carforcreate = 405;
			    case 4: carforcreate = 410;
			    case 5: carforcreate = 413;
			    case 6: carforcreate = 418;
			    case 7: carforcreate = 426;
			    case 8: carforcreate = 436;
			    case 9: carforcreate = 440;
			    case 10: carforcreate = 445;
			    case 11: carforcreate = 458;
			    case 12: carforcreate = 459;
			    case 13: carforcreate = 466;
			    case 14: carforcreate = 475;
			    case 15: carforcreate = 479;
			    case 16: carforcreate = 489;
			    case 17: carforcreate = 491;
			    case 18: carforcreate = 492;
			    case 19: carforcreate = 496;
			    case 20: carforcreate = 516;
			    case 21: carforcreate = 517;
			    case 22: carforcreate = 542;
			    case 23: carforcreate = 547;
			    case 24: carforcreate = 561;
			    case 25: carforcreate = 580;
			    case 26: carforcreate = 589;
			    case 27: carforcreate = 602;
			    default: carforcreate = 579;
			}

			TraficInfo[trafid][traCarro] = AddStaticVehicle(carforcreate, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2], TraficanteCarpos[rand][3], random(10), random(10));
			SetPlayerCheckpoint(playerid, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2], 5.0);
			SetVehicleParamsEx(TraficInfo[trafid][traCarro],0,0,0,1,0,0,0);

			TraficInfo[trafid][traTempoSumir] = 30;
			OutrasInfos[playerid][oEntrouCheckPointTraf] = 1;

			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você cancelou o pedido.");
		    //EndCall(playerid);

			TraficInfo[trafid][traTipo] = 0;
            TraficInfo[trafid][traRand] = 9999;
            TraficInfo[trafid][traUsando] = 0;
            TraficInfo[trafid][traFaccao] = 0;
			OutrasInfos[playerid][oTraficanteID] = 9999;
		}
	}
	else
	{
	    if(listitem < 15)
	    {
		    OutrasInfos[playerid][oPedidoID] = listitem;


            Dialog_Show(playerid, DIALOG_TRAFICANTESARMA, DIALOG_STYLE_TABLIST_HEADERS, string, "Produto\tPreço\n \
                Colt\tR$12000\n \
                9mm Silenced\tR$12000\n \
                Desert Eagle\tR$13000\n \
                Shotgun\tR$50000\n \
                Uzi\tR$22000\n \
                AK-47\tR$150000\n \
				M4A1\tR$230000\n \
                Tec-9\tR$22000\n \
                Munição: 9mm [50 balas]\tR$500\n \
                Munição: 556mm [50 balas]\tR$800\n \
                Munição: cartuchos [10 balas]\tR$500\n \
                Munição: 12.7x106mm [5 balas]\tR$800\n \
                Remover do Pedido \
                ", "Pedir", "Cancelar");
		}
		else if(listitem == 15)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você cancelou o pedido.");
		    //EndCall(playerid);

			new traficid = OutrasInfos[playerid][oTraficanteID];

			TraficInfo[traficid][traTipo] = 0;
            TraficInfo[traficid][traRand] = 9999;
            TraficInfo[traficid][traUsando] = 0;
            TraficInfo[traficid][traFaccao] = 0;

			OutrasInfos[playerid][oTraficanteID] = 9999;
		}
		else
		{
		    MenuCompraArma(playerid, 1);
		}
	}
	return 1;
}

Dialog:DIALOG_TRAFICANTESARMA(playerid, response, listitem, inputtext[])
{
	if(!response)
	{
	    MenuCompraArma(playerid, 1);
	}
	else
	{
		new traficid = OutrasInfos[playerid][oTraficanteID];
        new pedidoid = OutrasInfos[playerid][oPedidoID];
		//new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);

		if(TraficInfo[traficid][traPed][pedidoid] != 0)
		{
		    switch(TraficInfo[traficid][traPed][pedidoid])
		    {
                case 22: TraficInfo[traficid][traPedPrec] = TraficInfo[traficid][traPedPrec]-12000;
                case 23: TraficInfo[traficid][traPedPrec] = TraficInfo[traficid][traPedPrec]-12000;
                case 24: TraficInfo[traficid][traPedPrec] = TraficInfo[traficid][traPedPrec]-13000;
                case 25: TraficInfo[traficid][traPedPrec] = TraficInfo[traficid][traPedPrec]-50000;
                case 28: TraficInfo[traficid][traPedPrec] = TraficInfo[traficid][traPedPrec]-22000;
                case 29: TraficInfo[traficid][traPedPrec] = TraficInfo[traficid][traPedPrec]-22000;
                case 30: TraficInfo[traficid][traPedPrec] = TraficInfo[traficid][traPedPrec]-150000;
                case 31: TraficInfo[traficid][traPedPrec] = TraficInfo[traficid][traPedPrec]-250000;
                case 32: TraficInfo[traficid][traPedPrec] = TraficInfo[traficid][traPedPrec]-22000;
                case 33: TraficInfo[traficid][traPedPrec] = TraficInfo[traficid][traPedPrec]-15000000;
                case 34: TraficInfo[traficid][traPedPrec] = TraficInfo[traficid][traPedPrec]-15000000;
                case 1: TraficInfo[traficid][traPedPrec] = TraficInfo[traficid][traPedPrec]-500;
                case 2: TraficInfo[traficid][traPedPrec] = TraficInfo[traficid][traPedPrec]-800;
                case 3: TraficInfo[traficid][traPedPrec] = TraficInfo[traficid][traPedPrec]-500;
                case 4: TraficInfo[traficid][traPedPrec] = TraficInfo[traficid][traPedPrec]-800;
		    }
		}

	    switch(listitem)
	    {
	        case 0:
	        {
             	TraficInfo[traficid][traPedPrec] += 12000;
            	format(string,sizeof(string),"Pedido %d - Colt.", OutrasInfos[playerid][oPedidoID]);
            	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
            	TraficInfo[traficid][traPed][pedidoid] = 22;
            	MenuCompraArma(playerid, 1);
	        }
	        case 1:
	        {
             	TraficInfo[traficid][traPedPrec] += 12000;
	           	format(string,sizeof(string),"Pedido %d - Silenced.", OutrasInfos[playerid][oPedidoID]);
	           	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	            TraficInfo[traficid][traPed][pedidoid] = 23;
	           	MenuCompraArma(playerid, 1);
	        }
	        case 2:
	        {
         		TraficInfo[traficid][traPedPrec] += 13000;
          		format(string,sizeof(string),"Pedido %d - Eagle.", OutrasInfos[playerid][oPedidoID]);
           		SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
           		TraficInfo[traficid][traPed][pedidoid] = 24;
            	MenuCompraArma(playerid, 1);
	        }
	        case 3:
	        {
         		TraficInfo[traficid][traPedPrec] += 50000;
	        	format(string,sizeof(string),"Pedido %d - Shotgun.", OutrasInfos[playerid][oPedidoID]);
	        	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	        	TraficInfo[traficid][traPed][pedidoid] = 25;
	        	MenuCompraArma(playerid, 1);
	        }
	        case 4:
	        {
             	TraficInfo[traficid][traPedPrec] += 22000;
            	format(string,sizeof(string),"Pedido %d - Uzi.", OutrasInfos[playerid][oPedidoID]);
            	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
            	TraficInfo[traficid][traPed][pedidoid] = 28;
            	MenuCompraArma(playerid, 1);
	        }
	        case 5:
	        {
             	TraficInfo[traficid][traPedPrec] += 150000;
            	format(string,sizeof(string),"Pedido %d - AK47.", OutrasInfos[playerid][oPedidoID]);
            	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
            	TraficInfo[traficid][traPed][pedidoid] = 30;
            	MenuCompraArma(playerid, 1);
	        }
	        case 6:
	        {
         		TraficInfo[traficid][traPedPrec] += 22000;
          		format(string,sizeof(string),"Pedido %d - Tec-9.", OutrasInfos[playerid][oPedidoID]);
	           	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	           	TraficInfo[traficid][traPed][pedidoid] = 32;
	           	MenuCompraArma(playerid, 1);
	        }
	        case 7:
	        {
         		TraficInfo[traficid][traPedPrec] += 250000;
          		format(string,sizeof(string),"Pedido %d - M4A1.", OutrasInfos[playerid][oPedidoID]);
	           	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	           	TraficInfo[traficid][traPed][pedidoid] = 31;
	           	MenuCompraArma(playerid, 1);
	        }
	        case 8:
	        {
	            TraficInfo[traficid][traPedPrec] += 500;
               	format(string,sizeof(string),"Pedido %d - Caixa de munição 9mm.", OutrasInfos[playerid][oPedidoID]);
	           	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	           	TraficInfo[traficid][traPed][pedidoid] = 1;
	           	MenuCompraArma(playerid, 1);
	        }
	        case 9:
	        {
         		TraficInfo[traficid][traPedPrec] += 800;
           		format(string,sizeof(string),"Pedido %d - Caixa de munição 5.56mm.", OutrasInfos[playerid][oPedidoID]);
            	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
            	TraficInfo[traficid][traPed][pedidoid] = 2;
            	MenuCompraArma(playerid, 1);
	        }
	        case 10:
	        {
	       		TraficInfo[traficid][traPedPrec] += 500;
        		format(string,sizeof(string),"Pedido %d - Caixa de cartuchos.", OutrasInfos[playerid][oPedidoID]);
	         	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	         	TraficInfo[traficid][traPed][pedidoid] = 3;
	          	MenuCompraArma(playerid, 1);
	        }
	        case 11:
	        {
	        	TraficInfo[traficid][traPedPrec] += 800;
				format(string,sizeof(string),"Pedido %d - Caixa de munição 12.7x106mm.", OutrasInfos[playerid][oPedidoID]);
	         	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	           	TraficInfo[traficid][traPed][pedidoid] = 4;
	         	MenuCompraArma(playerid, 1);
	        }
	        case 12:
	        {
				format(string,sizeof(string),"Pedido %d - Vazio.", OutrasInfos[playerid][oPedidoID]);
	         	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);
	           	TraficInfo[traficid][traPed][pedidoid] = 0;
	         	MenuCompraArma(playerid, 1);
	        }
	    }
	}
	return 1;
}

CMD:encomenda(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    /*new traficid = OutrasInfos[playerid][oTraficanteID];
	if(traficid == 9999) return 1;
	if(OutrasInfos[playerid][oTraficanteRand] == 9999) return 1;*/
	new traficid = 9999,
	    temcarroperto = 0,
		Float:X,
		Float:Y,
		Float:Z;

	for(new i = 0; i  < MAX_TRAFICANTES; i++)
	{
		GetVehiclePos(TraficInfo[i][traCarro],X,Y,Z);
	    if(IsPlayerInRangeOfPoint(playerid, 10.0, X, Y, Z))
		{
		    temcarroperto = 1;
    		if(TraficInfo[i][traFaccao] == PlayerInfo[playerid][pFac])
    		{
    		    traficid = i;
    	    }
    	}
	}
	if(temcarroperto == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo de nenhum veículo.");
	if(temcarroperto == 1 && traficid == 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem acesso a este veículo.");
	if(traficid != 9999)
	{
		if(TraficInfo[traficid][traTipo] == 1)
		{
			if(TraficInfo[traficid][traJaPagou] == 0)
			{
				if(PlayerInfo[playerid][pGrana] >= TraficInfo[traficid][traPedPrec])
				{
				    TraficInfo[traficid][traJaPagou] = 1;

		            PlayerInfo[playerid][pGrana] -= TraficInfo[traficid][traPedPrec];

				    /*new rand = OutrasInfos[playerid][oTraficanteRand];
					if(IsPlayerInRangeOfPoint(playerid, 10.0, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2]))
					{*/
	    			SetVehicleParamsEx(TraficInfo[traficid][traCarro],0,0,0,1,0,1,0);
	   				MenuCompraArma(playerid, 2);
					//}
				}
				else
				{
					format(string, sizeof(string), "Você não tem R$%d. Vá buscar o dinheiro antes de pegar as armas.", TraficInfo[traficid][traPedPrec]);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
				}
			}
			else
			{
			    /*new rand = OutrasInfos[playerid][oTraficanteRand];
				if(IsPlayerInRangeOfPoint(playerid, 10.0, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2]))
				{*/
				    SetVehicleParamsEx(TraficInfo[traficid][traCarro],0,0,0,1,0,1,0);
			    	MenuCompraArma(playerid, 2);
				//}
			}
		}
		else if(TraficInfo[traficid][traTipo] == 2)
		{
		    if(OutrasInfos[playerid][oComprandoDrugQ] == 0)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Alguém já pegou essa encomenda.");
				SetVehicleParamsEx(TraficInfo[traficid][traCarro],0,0,0,1,0,0,0);
				return 1;
			}
		    if(TraficInfo[traficid][traJaPagou] == 0)
			{
				if(PlayerInfo[playerid][pGrana] >= TraficInfo[traficid][traPedPrec])
				{
				    TraficInfo[traficid][traJaPagou] = 1;

		            PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-TraficInfo[traficid][traPedPrec];

				    new rand = OutrasInfos[playerid][oTraficanteRand];
					if(IsPlayerInRangeOfPoint(playerid, 10.0, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2]))
					{
					    SetVehicleParamsEx(TraficInfo[traficid][traCarro],0,0,0,1,0,1,0);
				    	new drug_q = OutrasInfos[playerid][oComprandoDrugQ];

				    	switch(OutrasInfos[playerid][oComprandoDrug])
						{
							case 0:
							{
							    format(string, sizeof(string), "Você pegou %d gramas de Maconha (boa).", drug_q);
								PlayerDroga[playerid][MaconhaB] += drug_q;
							}
							case 1:
							{
							    format(string, sizeof(string), "Você pegou %d gramas de Cocaina (boa).", drug_q);
								PlayerDroga[playerid][CocaB] += drug_q;
							}
							case 2:
							{
							    format(string, sizeof(string), "Você pegou %d gramas de Crack (bom).", drug_q);
								PlayerDroga[playerid][CrackB] += drug_q;
							}
							case 3:
							{
							    format(string, sizeof(string), "Você pegou %d cartelas de LSD (bom).", drug_q);
		      					PlayerDroga[playerid][LSDB] += drug_q;
							}
							case 4:
							{
							    format(string, sizeof(string), "Você pegou %d cartelas de Metanfetamina (boa).", drug_q);
							    PlayerDroga[playerid][MetB] += drug_q;
							}
							case 5:
							{
							    format(string, sizeof(string), "Você pegou %d Pasta base de cocaina.", drug_q);
							    PlayerDroga[playerid][PBC] += drug_q;
							}
							case 6:
							{
								format(string, sizeof(string), "Você pegou %d Lança perfume.", drug_q);
								PlayerDroga[playerid][LancaPer] += drug_q;
							}
							default: format(string, sizeof(string), "ERRO #301 - Poste na área de Bug Report.");
						}
						OutrasInfos[playerid][oComprandoDrugQ] = 0;
						OutrasInfos[playerid][oComprandoDrug] = 0;
						SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

						SaveDrogas(playerid);
					}
				}
				else
				{
					format(string, sizeof(string), "Você não tem R$%d. Vá buscar o dinheiro antes de pegar as drogas.", TraficInfo[traficid][traPedPrec]);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
				}
			}
			else
			{
			    new rand = OutrasInfos[playerid][oTraficanteRand];
				if(IsPlayerInRangeOfPoint(playerid, 10.0, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2]))
				{
				    SetVehicleParamsEx(TraficInfo[traficid][traCarro],0,0,0,1,0,1,0);
			    	new drug_q = OutrasInfos[playerid][oComprandoDrugQ];

			    	switch(OutrasInfos[playerid][oComprandoDrug])
					{
						case 0:
						{
						    format(string, sizeof(string), "Você pegou %d gramas de Maconha (boa).", drug_q);
							PlayerDroga[playerid][MaconhaB] += drug_q;
						}
						case 1:
						{
						    format(string, sizeof(string), "Você pegou %d gramas de Cocaina (boa).", drug_q);
							PlayerDroga[playerid][CocaB] += drug_q;
						}
						case 2:
						{
						    format(string, sizeof(string), "Você pegou %d gramas de Crack (bom).", drug_q);
							PlayerDroga[playerid][CrackB] += drug_q;
						}
						case 3:
						{
						    format(string, sizeof(string), "Você pegou %d cartelas de LSD (bom).", drug_q);
	      					PlayerDroga[playerid][LSDB] += drug_q;
						}
						case 4:
						{
						    format(string, sizeof(string), "Você pegou %d cartelas de Metanfetamina (boa).", drug_q);
						    PlayerDroga[playerid][MetB] += drug_q;
						}
						case 5:
						{
						    format(string, sizeof(string), "Você pegou %d Pasta base de cocaina.", drug_q);
						    PlayerDroga[playerid][MetB] += drug_q;
						}
						case 6:
						{
						    format(string, sizeof(string), "Você pegou %d Lança perfume.", drug_q);
						    PlayerDroga[playerid][LancaPer] += drug_q;
						}
						default: format(string, sizeof(string), "ERRO #301 - Poste na área de Bug Report.");
					}
					OutrasInfos[playerid][oComprandoDrugQ] = 0;
					OutrasInfos[playerid][oComprandoDrug] = 0;
					SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

					SaveDrogas(playerid);
				}
			}
		}
	}
	return 1;
}

forward SendJobMessage(job, color, strings[]);
public SendJobMessage(job, color, strings[])
{
    for(new i = 0; i <= MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i) && PlayerInfo[i][pLogado])
		{
		    if(PlayerInfo[i][pJob] == job)
		    {
                new stringfull[192];
                new lengths[96];
                new length2[96];
                strmid(stringfull, strings, 0, 192);
                strmid(lengths, stringfull, 0, 96);
                strmid(length2, strings, 95, 192);
                if(strlen(string) > 96)
                {
                    new message[102];
                    format(message, 102, "%s ...", lengths);
                    SendClientMessage(i, color, message);
                    format(message, 102, "... %s", length2);
                    SendClientMessage(i, color, message);
                }
                else
                {
                    new message[192];
                    format(message, 192, "%s", strings);
                    SendClientMessage(i, color, message);
                }
			}
		}
	}
}

stock GetVehiclePrice(vehiclemod)
{
	new price;
	switch(vehiclemod)
	{
	    case 457: price = 12000;
	    case 471: price = 84000;
		//Bikes
		case 481: price = 300;
		case 509: price = 300;
		case 510: price = 360;
		case 462: price = 800;
		case 581: price = 38000;
		case 461: price = 42000;
		case 521: price = 80000;
		case 463: price = 20000;
		case 586: price = 10000;
		case 468: price = 80000;
		case 522: price = 2000000;
		//Public service
		case 420: price = 8200;
		case 438: price = 15000;
		case 431: price = 20000;
		case 437: price = 22000;
		case 414: price = 13000;
		//Lowriders
		case 536: price = 63000;
		case 575: price = 60000;
		case 534: price = 70000;
		case 567: price = 53500;
		case 535: price = 40300;
		case 566: price = 45900;
		case 576: price = 50000;
		case 412: price = 45000;
		//Off Road
		case 579: price = 120000;
  		case 400: price = 30000;
		case 500: price = 20000;
		case 489: price = 15500;
		case 505: price = 15500;
		//Station Wagons
		case 418: price = 30000;
		case 404: price = 31000;
		case 479: price = 40000;
		case 458: price = 40000;
		case 561: price = 50000;
		//Saloons
		case 445: price = 50000;
		case 401: price = 50000;
		case 518: price = 40000;
		case 527: price = 25000;
		case 542: price = 56000;
		case 507: price = 31500;
		case 585: price = 41000;
		case 419: price = 50000;
		case 526: price = 62000;
		case 466: price = 53000;
		case 492: price = 75000;
		case 474: price = 73000;
		case 546: price = 83000;
		case 517: price = 62000;
		case 410: price = 1000;
		case 551: price = 46000;
		case 516: price = 40000;
		case 467: price = 60000;
		case 426: price = 41000;
		case 436: price = 42000;
		case 547: price = 35000;
		case 405: price = 43000;
		case 580: price = 350000;
		case 550: price = 23000;
		case 549: price = 29000;
		case 540: price = 45000;
		case 491: price = 54000;
		case 529: price = 45000;
		case 421: price = 65000;
		//Conversiveis
		case 533: price = 240000;
		case 439: price = 300000;
		case 555: price = 911000;
		//Outros
		case 409: price = 800000;
		case 423: price = 7600;
		case 428: price = 20000;
		case 434: price = 95000;
		case 442: price = 20000;
		case 483: price = 30000;
		case 508: price = 45000;
		case 525: price = 38000;
		case 545: price = 32000;
		case 572: price = 41000;
		case 588: price = 26000;
		//Industrial
		case 499: price = 10000;
		case 422: price = 22100;
		case 482: price = 53000;
		case 498: price = 78000;
		case 609: price = 78000;
		case 524: price = 94600;
		case 578: price = 93500;
		case 455: price = 86000;
		case 403: price = 92800;
		case 415: price = 8000000;
		case 443: price = 82000;
		case 514: price = 93000;
		case 600: price = 19500;
		case 413: price = 48000;
		case 440: price = 43510;
		case 543: price = 13000;
		case 459: price = 48000;
		case 531: price = 40000;
		case 408: price = 35000;
		case 552: price = 74000;
		case 478: price = 1800;
		case 456: price = 35000;
		case 554: price = 82600;
		//Sport Vehicles
		case 558: price = 120000;
		case 475: price = 62000;
		case 602: price = 89000;
		case 496: price = 50000;
		case 402: price = 140000;
		case 589: price = 90000;
		case 587: price = 84000;
		case 562: price = 82000;
		case 565: price = 65000;
		case 411: price = 5200000;
		case 559: price = 1200000;
		case 560: price = 1800000;
		case 603: price = 75000;
		case 429: price = 1600000;
		case 506: price = 2000000;
		case 541: price = 2700000;
		case 515: price = 80000;
		case 480: price = 150000;
		case 451: price = 2500000;
		case 477: price = 87000;
		//
		case 530: price = 15000;
		//Carretas
		case 435: price = 22000;
		case 450: price = 22000;
		case 584: price = 35000;
		case 591: price = 25000;
		//
		case 486: price = 23000;
		case 424: price = 82500;
		//Barcos
		case 446: price = 120000;
		case 452: price = 130000;
		case 453: price = 180000;
		case 454: price = 200000;
		case 472: price = 120000;
		case 473: price = 98000;
		case 484: price = 170000;
		case 493: price = 87000;

	}
	return price;
}
//==============================================================================
//                      		Tunning System
//==============================================================================
stock CreatePlayerTextDraws( playerid ) { 	

        TuningBuy[ playerid ][ 0 ] = CreatePlayerTextDraw(playerid, 425.125000, 338.666687, "usebox");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 0 ], 0.000000, 8.627778);
        PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 0 ], 216.125000, 0.000000);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 0 ], 1);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 0 ], 0);
        PlayerTextDrawUseBox(playerid, TuningBuy[ playerid ][ 0 ], true);
        PlayerTextDrawBoxColor(playerid, TuningBuy[ playerid ][ 0 ], 102);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 0 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 0 ], 0);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 0 ], 0);

        TuningBuy[ playerid ][ 1 ] = CreatePlayerTextDraw(playerid, 319.375000, 337.749847, "Hidraulica");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 1 ], 0.386249, 1.156664);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 1 ], 2);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 1 ], -1);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 1 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 1 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 1 ], 51 );
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 1 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 1 ], 1 );
        PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 1 ], false );

        TuningBuy[ playerid ][ 2 ] = CreatePlayerTextDraw(playerid, 198.375000, 361.583282, "-");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 2 ], 18.981874, 0.514999);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 2 ], 1);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 2 ], -10092289);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 2 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 2 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 2 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 2 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 2 ], 1);

        TuningBuy[ playerid ][ 3 ] = CreatePlayerTextDraw(playerid, 222.500000, 352.916656, "Left `Chrome Flames` Sideskirt");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 3 ], 0.244999, 1.092499);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 3 ], 1);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 3 ], -1);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 3 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 3 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 3 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 3 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 3 ], 1);

        TuningBuy[ playerid ][ 4 ] = CreatePlayerTextDraw(playerid, 222.500000, 365.000000, "Preco: ~w~R$10000");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 4 ], 0.244999, 1.092499);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 4 ], 1);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 4 ], -1);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 4 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 4 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 4 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 4 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 4 ], 1);

        TuningBuy[ playerid ][ 5 ] = CreatePlayerTextDraw(playerid, 215.125000, 372.999877, "-");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 5 ], 6.743125, 0.444999);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 5 ], 1);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 5 ], -10092289);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 5 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 5 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 5 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 5 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 5 ], 1);

        TuningBuy[ playerid ][ 6 ] = CreatePlayerTextDraw(playerid, 206.750000, 347.166564, "-");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 6 ], 18.981874, 0.514999);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 6 ], 1);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 6 ], -10092289);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 6 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 6 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 6 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 6 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 6 ], 1);

        TuningBuy[ playerid ][ 7 ] = CreatePlayerTextDraw(playerid, 385.000000, 381.500000, "ld_beat:right");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 7 ], 0.449999, 1.600000);
        PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 7 ], 27.500000, 13.416657);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 7 ], 2);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 7 ], -1);
        PlayerTextDrawUseBox(playerid, TuningBuy[ playerid ][ 7 ], true);
        PlayerTextDrawBoxColor(playerid, TuningBuy[ playerid ][ 7 ], 255);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 7 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 7 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 7 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 7 ], 4);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 7 ], 1);
        PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 7 ], true);

        TuningBuy[ playerid ][ 8 ] = CreatePlayerTextDraw(playerid, 230.375000, 381.916473, "ld_beat:left");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 8 ], 0.449999, 1.600000);
        PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 8 ], 27.500000, 13.416657);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 8 ], 2);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 8 ], -1);
        PlayerTextDrawUseBox(playerid, TuningBuy[ playerid ][ 8 ], true);
        PlayerTextDrawBoxColor(playerid, TuningBuy[ playerid ][ 8 ], 255);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 8 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 8 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 8 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 8 ], 4);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 8 ], 1);
        PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 8 ], true);

        TuningBuy[ playerid ][ 9 ] = CreatePlayerTextDraw(playerid, 320.000000, 381.499938, "COMPRAR");
        PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 9 ], 23.000000, 13.000000 );
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 9 ], 0.421249, 1.360832 );
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 9 ], 2);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 9 ], -1);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 9 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 9 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 9 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 9 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 9 ], 1);
        PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 9 ], true);

        TuningBuy[ playerid ][ 10 ] = CreatePlayerTextDraw(playerid, 200.000000, 396.416656, "-");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 10 ], 18.981874, 0.514999);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 10 ], 1);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 10 ], -10092289);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 10 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 10 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 10 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 10 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 10 ], 1);

        TuningBuy[ playerid ][ 11 ] = CreatePlayerTextDraw(playerid, 225.000000, 401.916595, "Garagem de Tunning ~r~CP:RPP");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 11 ], 0.258749, 0.987497);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 11 ], 1);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 11 ], -1);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 11 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 11 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 11 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 11 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 11 ], 1);

        TuningBuy[ playerid ][ 12 ] = CreatePlayerTextDraw(playerid, 203.500000, 411.416839, "-");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 12 ], 18.981874, 0.514998);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 12 ], 1);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 12 ], -10092289);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 12 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 12 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 12 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 12 ], 2);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 12 ], 1);

        TuningBuy[ playerid ][ 13 ] = CreatePlayerTextDraw(playerid, 404.500000, 337.999877, "ld_beat:cross");
        PlayerTextDrawLetterSize(playerid, TuningBuy[ playerid ][ 13 ], 0.449999, 1.600000);
        PlayerTextDrawTextSize(playerid, TuningBuy[ playerid ][ 13 ], 17.500000, 8.749991);
        PlayerTextDrawAlignment(playerid, TuningBuy[ playerid ][ 13 ], 2);
        PlayerTextDrawColor(playerid, TuningBuy[ playerid ][ 13 ], -1);
        PlayerTextDrawUseBox(playerid, TuningBuy[ playerid ][ 13 ], true);
        PlayerTextDrawBoxColor(playerid, TuningBuy[ playerid ][ 13 ], 255);
        PlayerTextDrawSetShadow(playerid, TuningBuy[ playerid ][ 13 ], 0);
        PlayerTextDrawSetOutline(playerid, TuningBuy[ playerid ][ 13 ], 1);
        PlayerTextDrawBackgroundColor(playerid, TuningBuy[ playerid ][ 13 ], 51);
        PlayerTextDrawFont(playerid, TuningBuy[ playerid ][ 13 ], 4);
        PlayerTextDrawSetProportional(playerid, TuningBuy[ playerid ][ 13 ], 1);
        PlayerTextDrawSetSelectable(playerid, TuningBuy[ playerid ][ 13 ], true);
}

GetNearestTGarage( playerid ) {
    for(new i = 1; i < MAX_GARAGES; i++)
	{
    	if( IsPlayerInRangeOfPoint( playerid, 5.0, tGarage[ i ][ Position ][ 0 ], tGarage[ i ][  Position ][ 1 ], tGarage[ i ][ Position ][ 2 ] ) ) { return i; }
    }
    return -1;
}
//==============================================================================
forward SaveTGarage( id );
public SaveTGarage( id ) {
	new iFile[ 40 ];
	format( iFile, sizeof( iFile ), TG_FILE, id );
	new INI:File = INI_Open( iFile );
 	INI_WriteFloat( File, "Position1", tGarage[ id ][ Position ][ 0 ] );
  	INI_WriteFloat( File, "Position2", tGarage[ id ][ Position ][ 1 ] );
   	INI_WriteFloat( File, "Position3", tGarage[ id ][ Position ][ 2 ] );
    INI_Close( File );
    return 1;
}
//==============================================================================
forward LoadTGarage( id, name[], value[] );
public LoadTGarage( id, name[], value[] ) {
	INI_Float( "Position1", tGarage[ id ][ Position ][ 0 ] );
 	INI_Float( "Position2", tGarage[ id ][ Position ][ 1 ] );
  	INI_Float( "Position3", tGarage[ id ][ Position ][ 2 ] );
    return true;
}

stock AddComponentToVehicle( veiculo, componentid )
{
    new vehicleid = GetVehicleSlot(veiculo);
   	if( VehicleInfo[ vehicleid ][ vTuned ] )
	{
 		if( GetVehicleComponentType( componentid ) == CARMODTYPE_SPOILER ) {
   			VehicleInfo[ vehicleid ][ vSpoiler ] = componentid;
      		if( VehicleInfo[ vehicleid ][ vSpoiler ] != -1 ) AddVehicleComponent( veiculo, componentid );
        }
        else if( GetVehicleComponentType( componentid ) == CARMODTYPE_HOOD ) {
        	VehicleInfo[ vehicleid ][ vHood ] = componentid;
         	if( VehicleInfo[ vehicleid ][ vHood ] != -1 ) AddVehicleComponent( veiculo, componentid );
      	}
       	else if( GetVehicleComponentType( componentid ) == CARMODTYPE_ROOF ) {
        	VehicleInfo[ vehicleid ][ vRoof ] = componentid;
         	if( VehicleInfo[ vehicleid ][ vRoof ] != -1 ) AddVehicleComponent( veiculo, componentid );
        }
        else if( GetVehicleComponentType( componentid ) == CARMODTYPE_SIDESKIRT ) {
        	VehicleInfo[ vehicleid ][ vSkirt ] = componentid;
         	if( VehicleInfo[ vehicleid ][ vSkirt ] != -1 ) AddVehicleComponent( veiculo, componentid );
		}
  		else if( GetVehicleComponentType( componentid ) == CARMODTYPE_LAMPS ) {
    		VehicleInfo[ vehicleid ][ vLamps ] = componentid;
      		if( VehicleInfo[ vehicleid ][ vLamps ] != -1 ) AddVehicleComponent( veiculo, componentid );
        }
        else if( GetVehicleComponentType( componentid ) == CARMODTYPE_NITRO ) {
        	VehicleInfo[ vehicleid ][ vNitro ] = componentid;
         	if( VehicleInfo[ vehicleid ][ vNitro ] != -1 ) AddVehicleComponent( veiculo, componentid );
        }
        else if( GetVehicleComponentType( componentid ) == CARMODTYPE_EXHAUST ) {
        	VehicleInfo[ vehicleid ][ vExhaust ] = componentid;
         	if( VehicleInfo[ vehicleid ][ vExhaust ] != -1 ) AddVehicleComponent( veiculo, componentid );
        }
        else if( GetVehicleComponentType( componentid ) == CARMODTYPE_WHEELS ) {
        	VehicleInfo[ vehicleid ][ vWheels ] = componentid;
         	if( VehicleInfo[ vehicleid ][ vWheels ] != -1 ) AddVehicleComponent( veiculo, componentid );
        }
        else if( GetVehicleComponentType( componentid ) == CARMODTYPE_STEREO ) {
        	VehicleInfo[ vehicleid ][ vStereo ] = componentid;
         	if( VehicleInfo[ vehicleid ][ vStereo ] != -1 ) AddVehicleComponent( veiculo, componentid );
        }
        else if( GetVehicleComponentType( componentid ) == CARMODTYPE_HYDRAULICS ) {
        	VehicleInfo[ vehicleid ][ vHydraulics ] = componentid;
         	if( VehicleInfo[ vehicleid ][ vHydraulics ] != -1 ) AddVehicleComponent( veiculo, componentid );
        }
        else if( GetVehicleComponentType( componentid ) == CARMODTYPE_FRONT_BUMPER ) {
        	VehicleInfo[ vehicleid ][ vFrontBumper ] = componentid;
         	if( VehicleInfo[ vehicleid ][ vFrontBumper ] != -1 ) AddVehicleComponent( veiculo, componentid );
        }
        else if( GetVehicleComponentType( componentid ) == CARMODTYPE_REAR_BUMPER ) {
        	VehicleInfo[ vehicleid ][ vRearBumper ] = componentid;
         	if( VehicleInfo[ vehicleid ][ vRearBumper ] != -1 ) AddVehicleComponent( veiculo, componentid );
        }
        else if( GetVehicleComponentType( componentid ) == CARMODTYPE_VENT_RIGHT ) {
        	VehicleInfo[ vehicleid ][ vRightVent ] = componentid;
         	if( VehicleInfo[ vehicleid ][ vRightVent ] != -1 ) AddVehicleComponent( veiculo, componentid );
        }
        else if( GetVehicleComponentType( componentid ) == CARMODTYPE_VENT_LEFT ) {
        	VehicleInfo[ vehicleid ][ vLeftVent ] = componentid;
         	if( VehicleInfo[ vehicleid ][ vLeftVent ] != -1 ) AddVehicleComponent( veiculo, componentid );
        }
        SaveVehicle(vehicleid);
	}
}

stock NextIDGarage(const len) {
    new id = (-1);
    for( new loop = ( 0 ), provjera = ( -1 ), Data_[ 64 ] = "\0"; loop != len; ++ loop )
	{
       provjera = ( loop+1 );
       format( Data_, ( sizeof Data_ ), TG_FILE, provjera );
       if(!fexist(Data_))
		{
          id = ( provjera );
          break;
		}
	}
 	return ( id );
}
//==============================================================================
stock IsComponentidCompatible( modelid, componentid ) {
    if( componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
   	componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
    componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
    componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086 )
	{
		return componentid;
 	}

    switch( modelid )
	{
        case 400: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024) return componentid;
        case 401: if( componentid == 1145 || componentid == 1144 || componentid == 1143 || componentid == 1142 || componentid == 1020 || componentid == 1019 || componentid == 1017 || componentid == 1013 || componentid == 1007 || componentid == 1006 || componentid == 1005 || componentid == 1004 || componentid == 1003 || componentid == 1001) return componentid;
        case 404: if( componentid == 1021 || componentid == 1020 || componentid == 1019 || componentid == 1017 || componentid == 1016 || componentid == 1013 || componentid == 1007 || componentid == 1002 || componentid == 1000) return componentid;
        case 405: if( componentid == 1023 || componentid == 1021 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1014 || componentid == 1001 || componentid == 1000) return componentid;
        case 410: if( componentid == 1024 || componentid == 1023 || componentid == 1021 || componentid == 1020 || componentid == 1019 || componentid == 1017 || componentid == 1013 || componentid == 1007 || componentid == 1003 || componentid == 1001) return componentid;
        case 415: if( componentid == 1023 || componentid == 1019 || componentid == 1018 || componentid == 1017 || componentid == 1007 || componentid == 1003 || componentid == 1001) return componentid;
        case 418: if( componentid == 1021 || componentid == 1020 || componentid == 1016 || componentid == 1006 || componentid == 1002) return componentid;
        case 420: if( componentid == 1021 || componentid == 1019 || componentid == 1005 || componentid == 1004 || componentid == 1003 || componentid == 1001) return componentid;
        case 421: if( componentid == 1023 || componentid == 1021 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1016 || componentid == 1014 || componentid == 1000) return componentid;
        case 422: if( componentid == 1021 || componentid == 1020 || componentid == 1019 || componentid == 1017 || componentid == 1013 || componentid == 1007) return componentid;
        case 426: if( componentid == 1021 || componentid == 1019 || componentid == 1006 || componentid == 1005 || componentid == 1004 || componentid == 1003 || componentid == 1001) return componentid;
        case 436: if( componentid == 1022 || componentid == 1021 || componentid == 1020 || componentid == 1019 || componentid == 1017 || componentid == 1013 || componentid == 1007 || componentid == 1006 || componentid == 1003 || componentid == 1001) return componentid;
        case 439: if( componentid == 1145 || componentid == 1144 || componentid == 1143 || componentid == 1142 || componentid == 1023 || componentid == 1017 || componentid == 1013 || componentid == 1007 || componentid == 1003 || componentid == 1001) return componentid;
        case 477: if( componentid == 1021 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1017 || componentid == 1007 || componentid == 1006) return componentid;
        case 478: if( componentid == 1024 || componentid == 1022 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1012 || componentid == 1005 || componentid == 1004) return componentid;
        case 489: if( componentid == 1024 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1016 || componentid == 1013 || componentid == 1006 || componentid == 1005 || componentid == 1004 || componentid == 1002 || componentid == 1000) return componentid;
        case 491: if( componentid == 1145 || componentid == 1144 || componentid == 1143 || componentid == 1142 || componentid == 1023 || componentid == 1021 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1017 || componentid == 1014 || componentid == 1007 || componentid == 1003) return componentid;
        case 492: if( componentid == 1016 || componentid == 1006 || componentid == 1005 || componentid == 1004 || componentid == 1000) return componentid;
        case 496: if( componentid == 1143 || componentid == 1142 || componentid == 1023 || componentid == 1020 || componentid == 1019 || componentid == 1017 || componentid == 1011 || componentid == 1007 || componentid == 1006 || componentid == 1003 || componentid == 1002 || componentid == 1001) return componentid;
        case 500: if( componentid == 1024 || componentid == 1021 || componentid == 1020 || componentid == 1019 || componentid == 1013) return componentid;
        case 516: if( componentid == 1021 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1017 || componentid == 1016 || componentid == 1015 || componentid == 1007 || componentid == 1004 || componentid == 1002 || componentid == 1000) return componentid;
        case 517: if( componentid == 1145 || componentid == 1144 || componentid == 1143 || componentid == 1142 || componentid == 1023 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1017 || componentid == 1016 || componentid == 1007 || componentid == 1003 || componentid == 1002) return componentid;
        case 518: if( componentid == 1145 || componentid == 1144 || componentid == 1143 || componentid == 1142 || componentid == 1023 || componentid == 1020 || componentid == 1018 || componentid == 1017 || componentid == 1013 || componentid == 1007 || componentid == 1006 || componentid == 1005 || componentid == 1003 || componentid == 1001) return componentid;
        case 527: if( componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1017 || componentid == 1015 || componentid == 1014 || componentid == 1007 || componentid == 1001) return componentid;
        case 529: if( componentid == 1023 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1017 || componentid == 1012 || componentid == 1011 || componentid == 1007 || componentid == 1006 || componentid == 1003 || componentid == 1001) return componentid;
        case 534: if( componentid == 1185 || componentid == 1180 || componentid == 1179 || componentid == 1178 || componentid == 1127 || componentid == 1126 || componentid == 1125 || componentid == 1124 || componentid == 1123 || componentid == 1122 || componentid == 1106 || componentid == 1101 || componentid == 1100) return componentid;
        case 535: if( componentid == 1121 || componentid == 1120 || componentid == 1119 || componentid == 1118 || componentid == 1117 || componentid == 1116 || componentid == 1115 || componentid == 1114 || componentid == 1113 || componentid == 1110 || componentid == 1109) return componentid;
        case 536: if( componentid == 1184 || componentid == 1183 || componentid == 1182 || componentid == 1181 || componentid == 1128 || componentid == 1108 || componentid == 1107 || componentid == 1105 || componentid == 1104 || componentid == 1103) return componentid;
        case 540: if( componentid == 1145 || componentid == 1144 || componentid == 1143 || componentid == 1142 || componentid == 1024 || componentid == 1023 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1017 || componentid == 1007 || componentid == 1006 || componentid == 1004 || componentid == 1001) return componentid;
        case 542: if( componentid == 1145 || componentid == 1144 || componentid == 1021 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1015 || componentid == 1014) return componentid;
        case 546: if( componentid == 1145 || componentid == 1144 || componentid == 1143 || componentid == 1142 || componentid == 1024 || componentid == 1023 || componentid == 1019 || componentid == 1018 || componentid == 1017 || componentid == 1007 || componentid == 1006 || componentid == 1004 || componentid == 1002 || componentid == 1001) return componentid;
        case 547: if( componentid == 1143 || componentid == 1142 || componentid == 1021 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1016 || componentid == 1003 || componentid == 1000) return componentid;
        case 549: if( componentid == 1145 || componentid == 1144 || componentid == 1143 || componentid == 1142 || componentid == 1023 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1017 || componentid == 1012 || componentid == 1011 || componentid == 1007 || componentid == 1003 || componentid == 1001) return componentid;
        case 550: if( componentid == 1145 || componentid == 1144 || componentid == 1143 || componentid == 1142 || componentid == 1023 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1006 || componentid == 1005 || componentid == 1004 || componentid == 1003 || componentid == 1001) return componentid;
        case 551: if( componentid == 1023 || componentid == 1021 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1016 || componentid == 1006 || componentid == 1005 || componentid == 1003 || componentid == 1002) return componentid;
        case 558: if( componentid == 1168 || componentid == 1167 || componentid == 1166 || componentid == 1165 || componentid == 1164 || componentid == 1163 || componentid == 1095 || componentid == 1094 || componentid == 1093 || componentid == 1092 || componentid == 1091 || componentid == 1090 || componentid == 1089 || componentid == 1088) return componentid;
        case 559: if( componentid == 1173 || componentid == 1162 || componentid == 1161 || componentid == 1160 || componentid == 1159 || componentid == 1158 || componentid == 1072 || componentid == 1071 || componentid == 1070 || componentid == 1069 || componentid == 1068 || componentid == 1067 || componentid == 1066 || componentid == 1065) return componentid;
        case 560: if( componentid == 1170 || componentid == 1169 || componentid == 1141 || componentid == 1140 || componentid == 1139 || componentid == 1138 || componentid == 1033 || componentid == 1032 || componentid == 1031 || componentid == 1030 || componentid == 1029 || componentid == 1028 || componentid == 1027 || componentid == 1026) return componentid;
        case 561: if( componentid == 1157 || componentid == 1156 || componentid == 1155 || componentid == 1154 || componentid == 1064 || componentid == 1063 || componentid == 1062 || componentid == 1061 || componentid == 1060 || componentid == 1059 || componentid == 1058 || componentid == 1057 || componentid == 1056 || componentid == 1055 || componentid == 1031 || componentid == 1030 || componentid == 1027 || componentid == 1026) return componentid;
        case 562: if( componentid == 1172 || componentid == 1171 || componentid == 1149 || componentid == 1148 || componentid == 1147 || componentid == 1146 || componentid == 1041 || componentid == 1040 || componentid == 1039 || componentid == 1038 || componentid == 1037 || componentid == 1036 || componentid == 1035 || componentid == 1034) return componentid;
        case 565: if( componentid == 1153 || componentid == 1152 || componentid == 1151 || componentid == 1150 || componentid == 1054 || componentid == 1053 || componentid == 1052 || componentid == 1051 || componentid == 1050 || componentid == 1049 || componentid == 1048 || componentid == 1047 || componentid == 1046 || componentid == 1045) return componentid;
        case 567: if( componentid == 1189 || componentid == 1188 || componentid == 1187 || componentid == 1186 || componentid == 1133 || componentid == 1132 || componentid == 1131 || componentid == 1130 || componentid == 1129 || componentid == 1102) return componentid;
        case 575: if( componentid == 1177 || componentid == 1176 || componentid == 1175 || componentid == 1174 || componentid == 1099 || componentid == 1044 || componentid == 1043 || componentid == 1042) return componentid;
        case 576: if( componentid == 1193 || componentid == 1192 || componentid == 1191 || componentid == 1190 || componentid == 1137 || componentid == 1136 || componentid == 1135 || componentid == 1134) return componentid;
        case 580: if( componentid == 1023 || componentid == 1020 || componentid == 1018 || componentid == 1017 || componentid == 1007 || componentid == 1006 || componentid == 1001) return componentid;
        case 589: if( componentid == 1145 || componentid == 1144 || componentid == 1024 || componentid == 1020 || componentid == 1018 || componentid == 1017 || componentid == 1016 || componentid == 1013 || componentid == 1007 || componentid == 1006 || componentid == 1005 || componentid == 1004 || componentid == 1000) return componentid;
        case 600: if( componentid == 1022 || componentid == 1020 || componentid == 1018 || componentid == 1017 || componentid == 1013 || componentid == 1007 || componentid == 1006 || componentid == 1005 || componentid == 1004) return componentid;
        case 603: if( componentid == 1145 || componentid == 1144 || componentid == 1143 || componentid == 1142 || componentid == 1024 || componentid == 1023 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1017 || componentid == 1007 || componentid == 1006 || componentid == 1001) return componentid;
    }
    return false;
}

stock GetVehicleCameraPos( vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff=0.0, Float:yoff=0.0, Float:zoff=0.0 ) { // credits Pasha
    new Float:rot;
    GetVehicleZAngle( vehicleid, rot );
    rot = 360 - rot;
    GetVehiclePos( vehicleid, x, y, z );
    x = floatsin( rot, degrees ) * yoff + floatcos( rot, degrees ) * xoff + x;
    y = floatcos( rot, degrees ) * yoff - floatsin( rot, degrees ) * xoff + y;
    z = zoff + z;
}
//==============================================================================
stock TuningTDControl( playerid, bool:show ) {
	if( show == true ) {
 		for( new i = 0; i < 14; i ++ ) {
  			PlayerTextDrawShow( playerid, TuningBuy[ playerid ][ i ] );
     	}
	}
 	else if( show == false ){
  		for( new i = 0; i < 14; i ++ ) {
    		PlayerTextDrawHide( playerid, TuningBuy[ playerid ][ i ]);
      	}
	}
}
//==============================================================================
ResetTuningInfo( playerid ) {
	TPInfo[ playerid ][ tID ] = -1;
 	TPInfo[ playerid ][ tType ] = -1;
  	TPInfo[ playerid ][ tPaintjob ] = false;
   	TPInfo[ playerid ][ PJColor ] = -1;
    TPInfo[ playerid ][ PJColor ] = -1;
}
//==============================================================================
forward  ResetTuning( slot );
public ResetTuning( slot )
{
	VehicleInfo[ slot ][ vTuned ] = false;
	VehicleInfo[ slot ][ vSpoiler ] = -1;
	VehicleInfo[ slot ][ vHood ] = -1;
	VehicleInfo[ slot ][ vRoof ] = -1;
	VehicleInfo[ slot ][ vSkirt ] = -1;
 	VehicleInfo[ slot ][ vLamps ] = -1;
 	VehicleInfo[ slot ][ vNitro ] = -1;
 	VehicleInfo[ slot ][ vExhaust ] = -1;
 	VehicleInfo[ slot ][ vWheels ] = -1;
 	VehicleInfo[ slot ][ vStereo ] = -1;
 	VehicleInfo[ slot ][ vHydraulics ] = -1;
 	VehicleInfo[ slot ][ vFrontBumper ] = -1;
 	VehicleInfo[ slot ][ vRearBumper ] = -1;
 	VehicleInfo[ slot ][ vRightVent ] = -1;
 	VehicleInfo[ slot ][ vLeftVent ] = -1;
	VehicleInfo[ slot ][ vPaintJob ] = 255;
    SaveVehicle(slot);
}

CMD:tunar( playerid, params[] )
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pJob] != JOB_MECANICO) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um mecânico.");

	new taperto = 0;
 	for(new i = 1; i < MAX_GARAGES; i++)
	{
		if( IsPlayerInRangeOfPoint( playerid, 10.0, tGarage[ i ][ Position ][ 0 ], tGarage[ i ][  Position ][ 1 ], tGarage[ i ][ Position ][ 2 ] ) )
		{
			taperto = 1;
			break;
		}
 	}
 	if(taperto == 0) return SCM(playerid, COLOR_LIGHTRED, "Você não está em uma oficina.");

	new vehicleid = GetVehicleSlot(GetPlayerVehicleID(playerid));
	if(vehicleid > -1)
	{
		SPD( playerid, dialog_TUNING, DSL, D_TOP, D_TEXT, D_OK, D_CANCEL );
		OutrasInfos[playerid][oModShop] = 1;
		return 1;
	}
	else return SCM(playerid, COLOR_LIGHTRED, "Este veículo não pode ser tunado.");
}

CMD:removertunnings( playerid, params[] )
{
        if(!PlayerInfo[playerid][pLogado]) return 1;
    	if(PlayerInfo[playerid][pJob] != JOB_MECANICO && PlayerInfo[playerid][pAdmin] < 3000) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um mecânico.");

        new taperto = 0;
        for(new i = 1; i < MAX_GARAGES; i++)
		{
    		if( IsPlayerInRangeOfPoint( playerid, 10.0, tGarage[ i ][ Position ][ 0 ], tGarage[ i ][  Position ][ 1 ], tGarage[ i ][ Position ][ 2 ] ) )
			{
				taperto = 1;
				break;
			}
    	}
    	if(taperto == 0) return SCM(playerid, COLOR_LIGHTRED, "Você não está em uma oficina.");

    	if( !IsPlayerInAnyVehicle( playerid ) ) return SCM(playerid, COLOR_LIGHTRED, "Você não está em um veículo.");
        if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return SCM(playerid, COLOR_LIGHTRED, "Você não está no banco do motorista.");
        new vehicleid = GetPlayerVehicleID( playerid ), componentid;
        new slot = GetVehicleSlot(vehicleid);
		if(slot > -1)
		{
    		ResetTuning(slot);

	        ChangeVehiclePaintjob( vehicleid, 3 );
	        for( new i; i < 14; i++ ) {
	                componentid = GetVehicleComponentInSlot( vehicleid, i );
	                if( componentid != 0 )
	                        RemoveVehicleComponent( vehicleid, componentid );
	        }
	        SCM(playerid, COLOR_LIGHTGREEN, "Mod's removidos com sucesso.");
		}
        return true;
}
//==============================================================================
CMD:criartunador( playerid, params[] ) {
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 3000 ) return true;
    new i = NextIDGarage( MAX_GARAGES ), Float:Pos[ 3 ], file[ 40 ];
    GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
    format( file, sizeof( file ), TG_FILE, i );
    if( fexist( file ) ) return SCM(playerid, COLOR_LIGHTRED, "Ocorreu um erro.. Poste no fórum caso persista.");
    tGarage[ i ][ Position ][ 0 ] = Pos[ 0 ];
    tGarage[ i ][ Position ][ 1 ] = Pos[ 1 ];
    tGarage[ i ][ Position ][ 2 ] = Pos[ 2 ];
    tGarage[ i ][ tg3D ] = CreateDynamic3DTextLabel( "{FFFFFF}/tunar", -1, tGarage[ i ][ Position ][ 0 ], tGarage[ i ][ Position ][ 1 ], tGarage[ i ][ Position ][ 2 ], 10.0 , INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
    tGarage[ i ][ tgPickup ] = CreatePickup( 1239, 1, tGarage[ i ][ Position ][ 0 ], tGarage[ i ][ Position ][ 1 ], tGarage[ i ][ Position ][ 2 ], -1 );
    SaveTGarage( i );
    return true;
}
//==============================================================================
CMD:deletartunador( playerid, params[] ) {
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 3000 ) return true;
    new i = GetNearestTGarage( playerid );
    if( i == -1 ) return SCM(playerid, COLOR_LIGHTRED, "Você não está próximo a uma oficina.");

	tGarage[ i ][ Position ][ 0 ] = 0.0;
 	tGarage[ i ][ Position ][ 1 ] = 0.0;
  	tGarage[ i ][ Position ][ 2 ] = 0.0;
	DestroyPickup( tGarage[ i ][ tgPickup ] );

	if (IsValidDynamic3DTextLabel( tGarage[ i ][ tg3D ] ))
 	DestroyDynamic3DTextLabel( tGarage[ i ][ tg3D ] );

    new file[ 50 ];
    format( file, sizeof( file ), TG_FILE, i );
    if( fexist( file ) ) { fremove( file ); }

	SCM(playerid, COLOR_LIGHTGREEN, "Você deletou um ponto de tunning.");
 	return true;
}

stock SetTune( veiculo, ocasiao, vehicleid)
{
	switch(ocasiao)
	{
	    case 1:
	    {
	        if( VehicleInfo[ vehicleid ][ vPaintJob ] != 255 ) 	ChangeVehiclePaintjob( veiculo, VehicleInfo[ vehicleid ][ vPaintJob ] );
		    if( VehicleInfo[ vehicleid ][ vSpoiler ] != -1 ) 	AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vSpoiler ] );
		    if( VehicleInfo[ vehicleid ][ vHood ] != -1 ) 		AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vHood ] );
		    if( VehicleInfo[ vehicleid ][ vRoof ] != -1 ) 		AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vRoof ] );
		    if( VehicleInfo[ vehicleid ][ vSkirt ] != -1 ) 		AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vSkirt ] );
		    if( VehicleInfo[ vehicleid ][ vLamps ] != -1 ) 		AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vLamps ] );
		    if( VehicleInfo[ vehicleid ][ vNitro ] != -1 ) 		AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vNitro ] );
		    if( VehicleInfo[ vehicleid ][ vExhaust ] != -1 ) 	AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vWheels ] );
		    if( VehicleInfo[ vehicleid ][ vWheels ] != -1 ) 	AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vWheels ] );
		    if( VehicleInfo[ vehicleid ][ vStereo ] != -1 ) 	AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vStereo ] );
		    if( VehicleInfo[ vehicleid ][ vHydraulics ] != -1 ) AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vHydraulics ] );
		    if( VehicleInfo[ vehicleid ][ vFrontBumper ] != -1 )AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vFrontBumper ] );
		    if( VehicleInfo[ vehicleid ][ vRearBumper ] != -1 ) AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vRearBumper ] );
		    if( VehicleInfo[ vehicleid ][ vRightVent ] != -1 ) 	AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vRightVent ] );
		    if( VehicleInfo[ vehicleid ][ vLeftVent ] != -1 ) 	AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vLeftVent ] );
	    }
	    default:
	    {
		    if( VehicleInfo[ vehicleid ][ vTuned ] )
			{
			    if( VehicleInfo[ vehicleid ][ vPaintJob ] != 255 ) 	ChangeVehiclePaintjob( veiculo, VehicleInfo[ vehicleid ][ vPaintJob ] );
			    if( VehicleInfo[ vehicleid ][ vSpoiler ] != -1 ) 	AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vSpoiler ] );
			    if( VehicleInfo[ vehicleid ][ vHood ] != -1 ) 		AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vHood ] );
			    if( VehicleInfo[ vehicleid ][ vRoof ] != -1 ) 		AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vRoof ] );
			    if( VehicleInfo[ vehicleid ][ vSkirt ] != -1 ) 		AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vSkirt ] );
			    if( VehicleInfo[ vehicleid ][ vLamps ] != -1 ) 		AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vLamps ] );
			    if( VehicleInfo[ vehicleid ][ vNitro ] != -1 ) 		AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vNitro ] );
			    if( VehicleInfo[ vehicleid ][ vExhaust ] != -1 ) 	AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vWheels ] );
			    if( VehicleInfo[ vehicleid ][ vWheels ] != -1 ) 	AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vWheels ] );
			    if( VehicleInfo[ vehicleid ][ vStereo ] != -1 ) 	AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vStereo ] );
			    if( VehicleInfo[ vehicleid ][ vHydraulics ] != -1 ) AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vHydraulics ] );
			    if( VehicleInfo[ vehicleid ][ vFrontBumper ] != -1 )AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vFrontBumper ] );
			    if( VehicleInfo[ vehicleid ][ vRearBumper ] != -1 ) AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vRearBumper ] );
			    if( VehicleInfo[ vehicleid ][ vRightVent ] != -1 ) 	AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vRightVent ] );
			    if( VehicleInfo[ vehicleid ][ vLeftVent ] != -1 ) 	AddVehicleComponent( veiculo, VehicleInfo[ vehicleid ][ vLeftVent ] );
		    }
		}
	}
}
//==============================================================================
CMD:criarcarro2(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] < 5) return 1;
    new vehid;
    new param[7];
    new Float:X, Float:Y, Float:Z, cor1, cor2;
    if(sscanf(params,"ddd",vehid,cor1,cor2))return SendClientMessage(playerid,-1,"USE: /criarcarro2 [id] [cor1] [cor2]");
    GetPlayerPos(playerid,X,Y,Z);
    new Carro = CreateVehicle(vehid, X+2,Y,Z, 0, cor1, cor2, -1);
	GetVehicleParamsEx(Carro,param[0],param[1],param[2],param[3],param[4],param[5],param[6]);
	SetVehicleParamsEx(Carro,1,param[1],param[2],param[3],param[4],param[5],param[6]);

    format(string,sizeof(string),"AdmCmd: Você criou um veiculo ID: %d | Carro: %d | Use /destruircarro para destrui-lo.",vehid ,Carro);
    SendClientMessage(playerid,COLOR_LIGHTRED,string);

    return 1;
}

CMD:destruircarro2(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	new slot = GetVehicleSlot(GetPlayerVehicleID(playerid));
 	if(slot > -1)
 	{
  		SCM(playerid, COLOR_LIGHTRED, "Este veículo não pode ser excluido.");
        return 1;
 	}
	if(IsPlayerInAnyVehicle(playerid))
	{
	    new vehid = GetPlayerVehicleID(playerid);
	    DestroyVehicle(vehid);
	    format(string,sizeof(string),"Você destruiu o veiculo ID: %d.",vehid);
	    SendClientMessage(playerid, COLOR_LIGHTRED,string);
	}
	else return SCM(playerid, COLOR_LIGHTRED, "Você não está em um veículo.");
    return 1;
}

stock FindFreeObjectSlotInCar(vehid)
{
        for(new i=0; i<MAX_OBJ_PER_VEHICLE; i++)
        {
        	if(!IsValidObject(AttachedObjects[vehid][i])) return i;
        }
        return -1;
}

COMMAND:aobj(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 3000) return 1;
	new objectmodel, car;
 	if(sscanf(params, "ii", objectmodel, car))
  	{
   		SendClientMessage(playerid, 0xfce80cFF, "Use: /attachobject [object model] [SAMP Car ID]");
     	return 1;
	}
    if(0 < car < MAX_VEHICLES)
    {
    	new Float:px, Float:py, Float:pz;
     	GetPlayerPos(playerid, px, py, pz);
	    AttachingObjects[playerid] = CreateObject(objectmodel, px, py, pz, 0.0, 0.0, 0.0);
	    SendClientMessage(playerid, 0xfce80cFF, "Object created. Editing...");
	    EditObject(playerid, AttachingObjects[playerid]);
	    SetPVarInt(playerid, "AttachingTo", car);
	}
	else
	{
		SendClientMessage(playerid, 0xfce80cFF, "Invalid vehicle");
	}
	return 1;
}

COMMAND:dobj(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 3000) return 1;
	new arrayid, car;
 	if(sscanf(params, "ii", arrayid, car))
  	{
   		SendClientMessage(playerid, 0xfce80cFF, "Use: /deleteobject [arrayid] [SAMP Car ID]");
     	return 1;
	}
	if(0 <= arrayid < 20)
	{
		if(0 < car < MAX_VEHICLES)
		{
			if(!IsValidObject(AttachedObjects[car][arrayid]))
			{
				SendClientMessage(playerid, 0xfce80cFF, "No object found at position");
				return 1;
			}
			DestroyObject(AttachedObjects[car][arrayid]);
			SendClientMessage(playerid, 0xfce80cFF, "Object removed");
			return 1;
		}
		else return SendClientMessage(playerid, 0xfce80cFF, "Invalid vehicle");
	}
	else return SendClientMessage(playerid, 0xfce80cFF, "No object found at position");
}

COMMAND:nickbranco(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ && FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ)
    if(PlayerInfo[playerid][pEmServico] != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em serviço.");
    {
		SetPlayerColor(playerid, 0xFFFFFFFF);
	}
	return 1;
}
COMMAND:nickazul(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PMERJ && FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_PCERJ)
    if(PlayerInfo[playerid][pEmServico] != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em serviço.");
    {
		SetPlayerColor(playerid, 0x8d8dff00);
	}
	return 1;
}

COMMAND:nickgb(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_CBERJ)
    if(PlayerInfo[playerid][pEmServico] != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em serviço.");
    {
		SetPlayerColor(playerid, 0xFF8282FF);
	}
	return 1;
}

COMMAND:lancargranada(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] != FAC_TIPO_PMERJ && FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] != FAC_TIPO_PCERJ && FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] != FAC_TIPO_EB) return SendClientMessage(playerid, COLOR_WHITE, "Você deve ser um policial para usar este comando.");
	if(PlayerInfo[playerid][pEmServico] != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em serviço.");
    for(new h = 0; h < MAX_HOUSES; h++)
	{
	    if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[h][hExX],HouseInfo[h][hExY],HouseInfo[h][hExZ]))
	    {
	        if(HouseInfo[h][hSmoke] != 0) return SendClientMessage(playerid,COLOR_GREY,"ERRO:{FFFFFF} Uma granada já foi lançada dentro desta casa.");
	        HouseInfo[h][hSmoke]=30;
	        HouseInfo[h][hSmokeO][0] = CreateDynamicObject(18710, HouseInfo[h][hExX],	 HouseInfo[h][hExY],	HouseInfo[h][hExZ]-1.0, 0.0, 0.0, 0.0, HouseInfo[h][hExWorld]);
	        HouseInfo[h][hSmokeO][1] = CreateDynamicObject(18710, HouseInfo[h][hInX],	 HouseInfo[h][hInY],	HouseInfo[h][hInZ]-1.0, 0.0, 0.0, 0.0, h+100);
	        HouseInfo[h][hSmokeO][2] = CreateDynamicObject(18710, HouseInfo[h][hInX],	 HouseInfo[h][hInY]+2.0,HouseInfo[h][hInZ]-1.0, 0.0, 0.0, 0.0, h+100);
	        HouseInfo[h][hSmokeO][3] = CreateDynamicObject(18710, HouseInfo[h][hInX],	 HouseInfo[h][hInY]-2.0,HouseInfo[h][hInZ]-1.0, 0.0, 0.0, 0.0, h+100);
	        HouseInfo[h][hSmokeO][4] = CreateDynamicObject(18710, HouseInfo[h][hInX]+2.0,HouseInfo[h][hInY],	HouseInfo[h][hInZ]-1.0, 0.0, 0.0, 0.0, h+100);
	        HouseInfo[h][hSmokeO][5] = CreateDynamicObject(343,   HouseInfo[h][hExX],	 HouseInfo[h][hExY],	HouseInfo[h][hExZ]-1.0, 80.0, 0.0, 0.0, HouseInfo[h][hExWorld]);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[h][hExX2],HouseInfo[h][hExY2],HouseInfo[h][hExZ2]))
	    {
	        if(HouseInfo[h][hSmoke] != 0) return SendClientMessage(playerid,COLOR_GREY,"ERRO:{FFFFFF} Uma granada já foi lançada dentro desta casa.");
	        HouseInfo[h][hSmoke]=30;
	        HouseInfo[h][hSmokeO][0] = CreateDynamicObject(18710, HouseInfo[h][hExX2],	 HouseInfo[h][hExY2],	HouseInfo[h][hExZ2]-1.0, 0.0, 0.0, 0.0, HouseInfo[h][hExWorld]);
	        HouseInfo[h][hSmokeO][1] = CreateDynamicObject(18710, HouseInfo[h][hInX2],	 HouseInfo[h][hInY2],	HouseInfo[h][hInZ2]-1.0, 0.0, 0.0, 0.0, h+100);
	        HouseInfo[h][hSmokeO][2] = CreateDynamicObject(18710, HouseInfo[h][hInX2],	 HouseInfo[h][hInY2]+2.0,HouseInfo[h][hInZ2]-1.0, 0.0, 0.0, 0.0, h+100);
	        HouseInfo[h][hSmokeO][3] = CreateDynamicObject(18710, HouseInfo[h][hInX2],	 HouseInfo[h][hInY2]-2.0,HouseInfo[h][hInZ2]-1.0, 0.0, 0.0, 0.0, h+100);
	        HouseInfo[h][hSmokeO][4] = CreateDynamicObject(18710, HouseInfo[h][hInX2]+2.0,HouseInfo[h][hInY2],	HouseInfo[h][hInZ2]-1.0, 0.0, 0.0, 0.0, h+100);
	        HouseInfo[h][hSmokeO][5] = CreateDynamicObject(343,   HouseInfo[h][hExX2],	 HouseInfo[h][hExY2],	HouseInfo[h][hExZ2]-1.0, 80.0, 0.0, 0.0, HouseInfo[h][hExWorld]);
	    }
	}
	for(new h = 0; h < MAX_GARAGENS; h++)
	{
	    if(IsPlayerInRangeOfPoint(playerid,2.0,GaragemInfo[h][hExX],GaragemInfo[h][hExY],GaragemInfo[h][hExZ]))
	    {
	        if(GaragemInfo[h][hSmoke] != 0) return SendClientMessage(playerid,COLOR_GREY,"ERRO:{FFFFFF} Uma granada já foi lançada dentro desta garagem.");
	        GaragemInfo[h][hSmoke]=30;
	        GaragemInfo[h][hSmokeO][0] = CreateDynamicObject(18710, GaragemInfo[h][hExX],	 GaragemInfo[h][hExY],	GaragemInfo[h][hExZ]-1.0, 0.0, 0.0, 0.0, GaragemInfo[h][hExWorld]);
	        GaragemInfo[h][hSmokeO][1] = CreateDynamicObject(18710, GaragemInfo[h][hInX],	 GaragemInfo[h][hInY],	GaragemInfo[h][hInZ]-1.0, 0.0, 0.0, 0.0, h+100);
	        GaragemInfo[h][hSmokeO][2] = CreateDynamicObject(18710, GaragemInfo[h][hInX],	 GaragemInfo[h][hInY]+2.0,GaragemInfo[h][hInZ]-1.0, 0.0, 0.0, 0.0, h+100);
	        GaragemInfo[h][hSmokeO][3] = CreateDynamicObject(18710, GaragemInfo[h][hInX],	 GaragemInfo[h][hInY]-2.0,GaragemInfo[h][hInZ]-1.0, 0.0, 0.0, 0.0, h+100);
	        GaragemInfo[h][hSmokeO][4] = CreateDynamicObject(18710, GaragemInfo[h][hInX]+2.0,GaragemInfo[h][hInY],	GaragemInfo[h][hInZ]-1.0, 0.0, 0.0, 0.0, h+100);
	        GaragemInfo[h][hSmokeO][5] = CreateDynamicObject(343,   GaragemInfo[h][hExX],	 GaragemInfo[h][hExY],	GaragemInfo[h][hExZ]-1.0, 80.0, 0.0, 0.0, GaragemInfo[h][hExWorld]);
	    }
	}
	return 1;
}

stock GetNumberOfPlayersOnThisIP(test_ip[])
{
	new against_ip[32+1];
	new x = 0;
	new ip_count = 0;
	for(x=0; x<MAX_PLAYERS; x++) {
		if(IsPlayerConnected(x)) {
		    GetPlayerIp(x,against_ip,32);
		    if(!strcmp(against_ip,test_ip)) ip_count++;
		}
	}
	return ip_count;
}

stock GetPlayer2DRadarZone(playerid, zone[], len) {
	new Float:x22, Float:y22, Float:z22;
	GetPlayerPos(playerid, x22, y22, z22);
 	for(new i = 0; i != sizeof(gSAZones); ++i ) {
		if(x22 >= gSAZones[i][SAZONE_AREA][0] && x22 <= gSAZones[i][SAZONE_AREA][3] && y22 >= gSAZones[i][SAZONE_AREA][1] && y22 <= gSAZones[i][SAZONE_AREA][4]) {
		    return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
		}
	}
	return 0;
}

stock phoneAnim(playerid, type)
{
	if(type == 1)
	{
	    if(CelularData[playerid][celModelo] == 0) CelularData[playerid][celModelo] = 330;

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		if(CelularData[playerid][celModelo] == 330) SetPlayerAttachedObject(playerid, 4, CelularData[playerid][celModelo], 6);
		else SetPlayerAttachedObject(playerid, 4, CelularData[playerid][celModelo], 6, 0.089411, 0.020775, -0.016320, 279.668365, 359.140991, 169.287139, 1.000000, 1.000000, 1.000000);

	}
	else
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 4);
	}
	return 1;
}

COMMAND:distintivo(playerid, params[])
{
    if (!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_WHITE, "Você deve estar logado para utilizar este comando.");

	new other;
	if(sscanf(params,"d",other))
	{
		SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /distintivo [playerid]");
		return 1;
	}
    format(string, sizeof(string), "* %s mostra seu distintivo para %s.", PlayerName(playerid,1),PlayerName(other,1));
	ProxDetector(6.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	SendClientMessage(other, COLOR_LIGHTGREEN, "|__________[Distintivo]__________|");
	format(string, sizeof(string), "%s", FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fNome]); SendClientMessage(other, COLOR_WHITE, string);
	format(string, sizeof(string), "Nome: %s", PlayerName(playerid, 0)); SendClientMessage(other, COLOR_WHITE, string);
	format(string, sizeof(string), "Cargo: %s", GetPlayerCargo(playerid)); SendClientMessage(other, COLOR_WHITE, string);
	SendClientMessage(other, COLOR_LIGHTGREEN, "|________________________________|");
	return 1;
}

COMMAND:funcional(playerid, params[])
{
    if (!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_WHITE, "Você deve estar logado para utilizar este comando.");

	new other;
	if(sscanf(params,"d",other))
	{
		SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /funcional [playerid]");
		return 1;
	}
    format(string, sizeof(string), "* %s mostra sua funcional para %s.", PlayerName(playerid,1),PlayerName(other,1));
	ProxDetector(6.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	SendClientMessage(other, COLOR_LIGHTGREEN, "|__________[FUNCIONAL MILITAR]__________|");
	format(string, sizeof(string), "%s", FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fNome]); SendClientMessage(other, COLOR_WHITE, string);
	format(string, sizeof(string), "Nome: %s", PlayerName(playerid, 0)); SendClientMessage(other, COLOR_WHITE, string);
	format(string, sizeof(string), "Cargo: %s", GetPlayerCargo(playerid)); SendClientMessage(other, COLOR_WHITE, string);
	SendClientMessage(other, COLOR_LIGHTGREEN, "|________________________________|");
	return 1;
}

stock IsPointInRangeOfPoint(Float:x, Float:y, Float:z, Float:x2, Float:y2, Float:z2, Float:range)
{
	x2 -= x;
	y2 -= y;
	z2 -= z;
	return ((x2 * x2) + (y2 * y2) + (z2 * z2)) < (range * range);
}
//==============================================================================
public DeleteObject(playerid)
{
	if(IsValidDynamicObject(ShowFont[playerid])) DestroyDynamicObject(ShowFont[playerid]);
	ShowPlayerDialog(playerid,DIALOG_GRAFITE_5,DIALOG_STYLE_LIST,"{DAA520}Selecione a Fonte a ser utilizada:","{ffffff}Fonte 1 {4682B4}[Urban Riot]\n{ffffff}Fonte 2 {4682B4}[Bombing]\n{ffffff}Fonte 3 {4682B4}[Impact]\n{ffffff}Fonte 4 {4682B4}[Los Santos]\n{ffffff}Fonte 5 {4682B4}[Gangland Style]","Avançar","Voltar");
	return 1;
}

public CreateGraffiti(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x,y,z);
	format(string, 128, "{%s}%s", GraffitiColor[playerid], GraffitiText[playerid]);
	GraffitiObject[playerid] = CreateDynamicObject(19482, x+0.5, y, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), playerid, 200);
	SetDynamicObjectMaterialText(GraffitiObject[playerid], 0, string, OBJECT_MATERIAL_SIZE_256x256, GraffitiFont[playerid], GraffitiSize[playerid], 0, 0xFFFFFFFF, 0, 1);
	EditDynamicObject(playerid, GraffitiObject[playerid]);
	SendClientMessage(playerid,-1,"Use o Editor de objeto para a colocação de texto na parede. (Pixes longe da parede serão excluidos)");
	SendClientMessage(playerid,-1,"No momento o texto é visível apenas para você.");
	return 1;
}

public StartDrawing(playerid)
{
    PlayerTextDrawShow(playerid, ClickTD[playerid]);
    SendClientMessage(playerid,0xFFFFFFFF,"A cada 3 segundos, será mostrado uma tecla que você deve apertar para concluir seu pixe.");
    UpdateTimer[playerid] = SetTimerEx("UpdateKey",2000,true,"i",playerid);
    ColorNow[playerid] = 1;
    CountTimer[playerid] = 0;
    ApplyAnimation(playerid, "SPRAYCAN", "spraycan_full", 4.0, 1, 1, 1, 0, 0, 1);
	return 1;
}

public UpdateKey(playerid)
{
    CountTimer[playerid] += 1;
	if(CountTimer[playerid] >= 10)
	{
		format(string,sizeof(string),"INSERT INTO pixes (cor) VALUES ('1') ");
		mysql_function_query(Pipeline, string, false, "GraffitiDone", "d",playerid);
		return 1;
	}
	if(KeyPressed[playerid] == 0 && KeyForPress[playerid] != 0) return GraffitiFailed(playerid);
	KeyPressed[playerid] = 0;
	new txt[2];
	new changecolor[4];
	switch(random(3))
	{
	    case 0: KeyForPress[playerid] = 1, txt = "Y";
	    case 1: KeyForPress[playerid] = 2, txt = "H";
	    case 2: KeyForPress[playerid] = 3, txt = "N";
	}
	if(ColorNow[playerid] == 1) { ColorNow[playerid] = 2; } else if(ColorNow[playerid] == 2) { ColorNow[playerid] = 1; }
	switch(ColorNow[playerid])
	{
	    case 1: changecolor = "~r~";
	    case 2: changecolor = "~g~";
	}
	PlayerTextDrawShow(playerid, ClickTD[playerid]);
	PlayerPlaySound(playerid, 1137, 0.0, 0.0, 0.0);
	format(string, 64, "PRESSIONE: %s%s", changecolor, txt);
	PlayerTextDrawSetString(playerid,ClickTD[playerid],string);
	return 1;
}

public GraffitiDone(playerid)
{
    new i = cache_insert_id();
    GrafiteSys[i][gID] = i;

    KillTimer(UpdateTimer[playerid]);
    if(IsValidDynamicObject(GraffitiObject[playerid])) DestroyDynamicObject(GraffitiObject[playerid]);
	format(string, 128, "{%s}%s", GraffitiColor[playerid], GraffitiText[playerid]);
	GrafiteSys[i][gObj] = CreateDynamicObject(19482, GraffitiPos[playerid][0], GraffitiPos[playerid][1], GraffitiPos[playerid][2], GraffitiPos[playerid][3], GraffitiPos[playerid][4], GraffitiPos[playerid][5], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 2000);
	SetDynamicObjectMaterialText(GrafiteSys[i][gObj], 0, string, OBJECT_MATERIAL_SIZE_256x256, GraffitiFont[playerid], GraffitiSize[playerid], 0, 0xFFFFFFFF, 0, 1);

	format(GrafiteSys[i][gTexto], 124, "%s",string);
	format(GrafiteSys[i][gCor], 124, "%s",GraffitiColor[playerid]);
	format(GrafiteSys[i][gFonte], 256, "%s",GraffitiFont[playerid]);

	GrafiteSys[i][gTamanho] = GraffitiSize[playerid];
	GrafiteSys[i][gX] = GraffitiPos[playerid][0];
	GrafiteSys[i][gY] = GraffitiPos[playerid][1];
	GrafiteSys[i][gZ] = GraffitiPos[playerid][2];
	GrafiteSys[i][gRX] = GraffitiPos[playerid][3];
	GrafiteSys[i][gRY] = GraffitiPos[playerid][4];
	GrafiteSys[i][gRZ] = GraffitiPos[playerid][5];

	GrafiteSys[i][gWorld] = GetPlayerVirtualWorld(playerid);
	GrafiteSys[i][gInterior] = GetPlayerInterior(playerid);

	format(GrafiteSys[i][gPor], 24, "%s",PlayerName(playerid,0));

	ResetVariables(playerid);
	SendClientMessage(playerid,0xFFFFFFFF,"Você terminou o seu pixe.");
	PlayerTextDrawSetString(playerid,ClickTD[playerid],"PRONTO!!!");
	PlayerTextDrawHide(playerid, ClickTD[playerid]);
	ClearAnimations(playerid);

	SalvarPixe(i);
	return 1;
}

public GraffitiFailed(playerid)
{
    KillTimer(UpdateTimer[playerid]);
    if(IsValidDynamicObject(GraffitiObject[playerid])) DestroyDynamicObject(GraffitiObject[playerid]);
	ResetVariables(playerid);
	SendClientMessage(playerid,0xFF6800FF,"Você falhou/cancelou o seu pixe.");
	PlayerTextDrawSetString(playerid,ClickTD[playerid],"PREPARADO!!!");
	PlayerTextDrawHide(playerid, ClickTD[playerid]);
	ClearAnimations(playerid);
	return 1;
}

public ResetVariables(playerid)
{
    SetPVarInt(playerid, "SettingGraffiti", 0);
	KeyPressed[playerid] = 0;
	KeyForPress[playerid] = 0;
	ColorNow[playerid] = 0;
	CountTimer[playerid] = 0;
	return 1;
}

CMD:pixar(playerid, params[], help)
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(GetPlayerWeapon(playerid) == 41)
	{
	    if(PlayerInfo[playerid][pLevel] > 25)
     	{
		    ShowPlayerDialog(playerid,DIALOG_GRAFITE_1,DIALOG_STYLE_INPUT,"Pixação","Entre com o texto a ser pixado.\n\nMáximo de caracteres: {ff0000}18","Avançar","Cancelar");
		    SetPVarInt(playerid, "SettingGraffiti", 1);
		    PreloadAnimLib(playerid, "SPRAYCAN");
		    SCM(playerid, COLOR_LIGHTRED, "LEMBRE-SE: VOCÊ PODE SER BANIDO POR PIXAÇÕES INVÁLIDAS, SEM NOÇÃO, OFENSIVAS, DE ZOEIRA OOC, ETC..!");
		    return 1;
		}
		else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa ter TC 25 ou mais.");
	}
	else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está segurando uma lata de Spray.");
}

forward CarregandoPixes();
public CarregandoPixes()
{
    new Rows, Fields, totaltorres = 0;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		new tmp[256];

		for(new i ; i < Rows; i++) if(i < MAX_PIXES)
		{
			cache_get_field_content(i, "id", tmp);
			new pid = strval(tmp);
		 	GrafiteSys[pid][gID] = strval(tmp);

		 	cache_get_field_content(i, "texto", tmp); format(GrafiteSys[pid][gTexto], 124, "%s", tmp);
		 	cache_get_field_content(i, "cor", tmp); format(GrafiteSys[pid][gCor], 124, "%s", tmp);
		 	cache_get_field_content(i, "fonte", tmp); format(GrafiteSys[pid][gFonte], 255, "%s", tmp);
		 	cache_get_field_content(i, "tamanho", tmp); GrafiteSys[pid][gTamanho] = strval(tmp);
		 	cache_get_field_content(i, "x", tmp); GrafiteSys[pid][gX] = floatstr(tmp);
		 	cache_get_field_content(i, "y", tmp); GrafiteSys[pid][gY] = floatstr(tmp);
		 	cache_get_field_content(i, "z", tmp); GrafiteSys[pid][gZ] = floatstr(tmp);
		 	cache_get_field_content(i, "rx", tmp); GrafiteSys[pid][gRX] = floatstr(tmp);
		 	cache_get_field_content(i, "ry", tmp); GrafiteSys[pid][gRY] = floatstr(tmp);
		 	cache_get_field_content(i, "rz", tmp); GrafiteSys[pid][gRZ] = floatstr(tmp);
		 	cache_get_field_content(i, "world", tmp); GrafiteSys[pid][gWorld] = strval(tmp);
		 	cache_get_field_content(i, "interior", tmp); GrafiteSys[pid][gInterior] = strval(tmp);
		 	cache_get_field_content(i, "por", tmp); format(GrafiteSys[pid][gPor], 24, "%s", tmp);

			if(GrafiteSys[pid][gID] > 0)
			{
			    totaltorres++;
				format(string, 128, "{%s}%s", GrafiteSys[pid][gCor], GrafiteSys[pid][gTexto]);
				GrafiteSys[pid][gObj] = CreateDynamicObject(19482, GrafiteSys[pid][gX], GrafiteSys[pid][gY], GrafiteSys[pid][gZ], GrafiteSys[pid][gRX], GrafiteSys[pid][gRY], GrafiteSys[pid][gRZ], GrafiteSys[pid][gWorld], GrafiteSys[pid][gInterior], -1, 2000);
				SetDynamicObjectMaterialText(GrafiteSys[pid][gObj], 0, string, OBJECT_MATERIAL_SIZE_256x256, GrafiteSys[pid][gFonte], GrafiteSys[pid][gTamanho], 0, 0xFFFFFFFF, 0, 1);
			}
		}
	}
	printf("[CARREGADO] Pixes: %d",totaltorres);
	return 1;
}

SalvarPixe(pid)
{
	static
	    query[2048];

	format(query, sizeof(query), "UPDATE `pixes` SET `texto` = '%s', `cor` = '%s', `fonte` = '%s', `tamanho` = '%d', `x` = '%.4f', `y` = '%.4f' WHERE `id` = '%d'",
		GrafiteSys[pid][gTexto],
		GrafiteSys[pid][gCor],
		GrafiteSys[pid][gFonte],
		GrafiteSys[pid][gTamanho],
		GrafiteSys[pid][gX],
		GrafiteSys[pid][gY],
		GrafiteSys[pid][gID]
	);
 	mysql_function_query(Pipeline, query, false, "", "");

 	format(query, sizeof(query), "UPDATE `pixes` SET `z` = '%.4f', `rx` = '%.4f', `ry` = '%.4f', `rz` = '%.4f', `world` = '%d', `interior` = '%d', `por` = '%s' WHERE `id` = '%d'",
		GrafiteSys[pid][gZ],
	 	GrafiteSys[pid][gRX],
		GrafiteSys[pid][gRY],
		GrafiteSys[pid][gRZ],
		GrafiteSys[pid][gWorld],
		GrafiteSys[pid][gInterior],
		GrafiteSys[pid][gPor],
		GrafiteSys[pid][gID]
	);
 	mysql_function_query(Pipeline, query, false, "", "");
 	return 1;
}

CMD:suporte(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(IsPlayerEditandoAlgo(playerid)) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes.");

	new veiculo = GetPlayerVehicleID(playerid);
	new vehicleid = GetVehicleSlot(veiculo);

    if(PlayerInfo[playerid][pEmServico] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando fora de serviço.");

	if(GetVehicleModel(veiculo) != 427 && GetVehicleModel(veiculo) != 490
	&& GetVehicleModel(veiculo) != 528 && GetVehicleModel(veiculo) != 596
	&& GetVehicleModel(veiculo) != 597 && GetVehicleModel(veiculo) != 470
	&& GetVehicleModel(veiculo) != 598 && GetVehicleModel(veiculo) != 599) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não tem suporte.");

    new faccao = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
    if(FacInfo[faccao][fTipo] == FAC_TIPO_PMERJ || FacInfo[faccao][fTipo] == FAC_TIPO_PCERJ)
	{
		new opcao[128];
		if(sscanf(params, "s[128]", opcao)) {
			SendClientMessage(playerid, COLOR_WHITE, "/suporte [função]");
			SendClientMessage(playerid, COLOR_GREEN,"[FUNÇÕES]: info, ga, pa");
			return 1;
		}

		if (!strcmp(opcao, "info", true))
		{
			new _string[128];
			new ArmaModel = ArmaData[VehicleInfo[vehicleid][vGunHack]][ArmaModelo];

			format(_string, 128, "suporte: Arma ID:[%i] | Arma Nome:[%s] | Munição:[%d]", VehicleInfo[vehicleid][vGunHack], GunNames[ArmaModel], VehicleInfo[vehicleid][vGunHackA]);
			SendClientMessage(playerid, COLOR_WHITE, _string);

			SendClientMessage(playerid, COLOR_WHITE,"/suporte guardararma ou /suporte retirararma ");
		}

		if (!strcmp(opcao, "guardar", true) || !strcmp(opcao, "ga", true))
		{
			if(PlayerInfo[playerid][pArmaMao] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem uma arma em mãos.");

			if(VehicleInfo[vehicleid][vGunHack] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED ,"Já existe uma arma no suporte. desta viatura.");
			VehicleInfo[vehicleid][vGunHack] = PlayerInfo[playerid][pArmaMao];
			VehicleInfo[vehicleid][vGunHackA] = ArmaData[PlayerInfo[playerid][pArmaMao]][ArmaAmmo];

			new IdPahSalva = PlayerInfo[playerid][pArmaMao];

			DesarmandoPlayer[playerid] = 2;
			ResetPlayerWeapons(playerid);
			PlayerInfo[playerid][pArmaMao] = 0;
			RemovePlayerAttachedObject(playerid, 0);

			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você guardou com sucesso uma arma no suporte. da viatura.");

			SalvarArma(IdPahSalva);
			return 1;
		}

		if (!strcmp(opcao, "retirar", true) || !strcmp(opcao, "pa", true))
		{
			if(!VehicleInfo[vehicleid][vGunHack]) return SendClientMessage(playerid, COLOR_LIGHTRED ,"O suporte. desta vitura está vázio.");
			if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_WHITE, "Você precisa largar a caixa para realizar essa ação.");
			if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você já tem uma arma em mãos.");

			new ArmaModel = ArmaData[VehicleInfo[vehicleid][vGunHack]][ArmaModelo];
			new IdPahSalva = VehicleInfo[vehicleid][vGunHack];

			GivePlayerWeapon(playerid, ArmaModel, ArmaData[IdPahSalva][ArmaAmmo]);

			if(ArmaData[VehicleInfo[vehicleid][vGunHack]][ArmaExtra] == 0) SetPlayerAttachedObject(playerid, 0, GunObjects[ArmaModel], 6);
			else SetPlayerAttachedObject(playerid, 0, ArmaData[VehicleInfo[vehicleid][vGunHack]][ArmaExtra], 6);

			PlayerInfo[playerid][pArmaMao] = IdPahSalva;
			VehicleInfo[vehicleid][vGunHack] = 0;
			VehicleInfo[vehicleid][vGunHackA] = 0;
			FloodCMD[playerid] = gettime()+2;

			SalvarArma(IdPahSalva);
		}
	}
    return 1;
}
//==============================
public OnPlayerDropGarbage(playerid)
{
    RemovePlayerAttachedObject(playerid, 8);
    DisablePlayerCheckpoint(playerid);
	SendClientMessage(playerid,COLOR_LIGHTGREEN,"Lixo colocado dentro do caminhão, siga para o próximo.");
	GameTextForPlayer(playerid,"~w~Lixo coletado",5000,1);
	garbage_run_state[playerid] = 0;
	garbage_run_stage[playerid] ++;
	RefreshGarbageStage(playerid);
}

public OnPlayerPickupGarbage(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	//garbage_object[playerid] = CreateObject(1265,X,Y,Z,0.0,0.0,0.0);
    SetPlayerAttachedObject(playerid, 8, 1265, 6);
	AttachObjectToPlayer(garbage_object[playerid],playerid,0.0,0.7,0.0,0.0,0.0,0.0);
	SendClientMessage(playerid,COLOR_LIGHTGREEN,"Jogue o saco de lixo na traseira do caminhão.");
	garbage_run_state[playerid] = 1;
    GetPosInFrontOfVehicle(garbage_run_vehicle[playerid], X, Y, -4.5);
	SetPlayerCheckpoint(playerid,X,Y,Z,2.0);
}

public RefreshGarbageStage(playerid)
{
    if(PlayerInfo[playerid][pJob] == JOB_LIXEIRO)
	{
    	if(garbage_run_stage[playerid] < 13)
    	{
    		SetPlayerCheckpoint(playerid,garbage_profiles[garbage_run[playerid]][garbage_run_stage[playerid]][0],garbage_profiles[garbage_run[playerid]][garbage_run_stage[playerid]][1],garbage_profiles[garbage_run[playerid]][garbage_run_stage[playerid]][2],2.0);
    		SendClientMessage(playerid,COLOR_LIGHTGREEN,"Vá até o checkpoint para coletar o lixo.");
    	}
    	else
    	{
    	    SendClientMessage(playerid,COLOR_LIGHTGREEN,"Trajeto completo, vá até a base.");
            PlayerInfo[playerid][pJobInPd]++;
    		SetPlayerCheckpoint(playerid,2134.3435,-2140.6255,13.2739,5.0);
    		garbage_run_state[playerid] = 3;
        }
	}
}

public OnPlayerEndGarbage(playerid)
{
	if(garbage_object[playerid] > -1) { DestroyObject(garbage_object[playerid]); garbage_object[playerid] = -1; }
    garbage_run[playerid] = -1;
    garbage_run_stage[playerid] = -1;
    garbage_run_state[playerid] = -1;
    SetVehicleToRespawn(garbage_run_vehicle[playerid]);

    garbage_run_vehicle[playerid] = -1;
    DisablePlayerCheckpoint(playerid);
}

public OnPlayerStartGarbage(playerid)
{
    new run;
    if(PlayerInfo[playerid][pJob] == JOB_LIXEIRO)
	{
    	run = random((sizeof(garbage_profiles) - 1));
    	garbage_run[playerid] = run;
    	garbage_run_stage[playerid] = 0;
    	garbage_run_state[playerid] = 0;
    	garbage_run_vehicle[playerid] = GetPlayerVehicleID(playerid);
    	RefreshGarbageStage(playerid);
    	StartEngine(GetPlayerVehicleID(playerid));
    	SendClientMessage(playerid,COLOR_LIGHTGREEN,"Colete o lixo nos Checkpoints, saindo do caminhão para pega-los.");

     }
}

public InGarbage(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) { return false; }
	new id = GetPlayerVehicleID(playerid);
	for(new i = 0; i < sizeof(garbage_vehicles); i ++)
	{
	    if(garbage_vehicles[i] == id)
	        return true;
	}
	return false;
}

COMMAND:comecarcoleta(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(!InGarbage(playerid)) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está em um caminhão de lixo.");
	if(PlayerInfo[playerid][pJob] != JOB_LIXEIRO) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não é um lixeiro.");
	if(PlayerInfo[playerid][pJobInPd] > 6) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já trabalhou bastante neste PayDay, volte após seu pagamento.");
	if(garbage_run[playerid] != -1) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já está em serviço, use /cancelarcoleta para cancelar.");

	OnPlayerStartGarbage(playerid);
	return 1;
}

COMMAND:cancelarcoleta(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(garbage_run[playerid] > -1)
    {
       	GameTextForPlayer(playerid,"~r~Trabalho cancelado",5000,5);
        OnPlayerEndGarbage(playerid);
        return 1;
    }
    else
    {
        SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está trabalhando.");
        return 1;
    }
}

//==============================================================================
COMMAND:apagao(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new type[128],amount;
	if(sscanf(params, "s[128]i", type, amount))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /apagao [Bairro] [0/1]");
        SendClientMessage(playerid, COLOR_GREY, "Bairros: Ganton (ganton)");
        return 1;
	}
	else
	{
	    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_GREY, "INFO: Você precisa está logado para usar este comando.");
		if(PlayerInfo[playerid][pAdmin] > 3000)
		{
		    if(amount == 0 || amount == 1)
		    {
			    if(strcmp(type, "Ganton", true) == 0)
			    {
			        ApagaoEmGanton = amount;
			        SendClientMessage(playerid, COLOR_GREY, "INFO: Você ativou/desativou um apagão em Ganton.");
				}
			}
			else return SendClientMessage(playerid, COLOR_GREY, "ERRO:{FFFFFF} Valores 0 ou 1 apenas.");
		}
	}
	return 1;
}
//==============================================================================
COMMAND:freio(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(IsPlayerInAnyVehicle(playerid))
 	{
 	    if(IsPushbike(GetVehicleModel(GetPlayerVehicleID(playerid)))) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não tem freio.");
 	    new partes[7];
 	    new string_freno[256];
  		new coche = GetPlayerVehicleID(playerid);
    	if(FrenodeMano[coche] == 1)
     	{
      		FrenodeMano[coche] = 0;
        	format(string_freno, sizeof(string_freno), "* %s empurra o freio de mão do veículo para baixo.", PlayerName(playerid, 1));
         	ProxDetector(8.0, playerid, string_freno, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
           	return 1;
		}
  		if(FrenodeMano[coche] == 0)
    	{
    	    GetVehicleParamsEx(coche, partes[0], partes[1], partes[2], partes[3], partes[4], partes[5], partes[6]);
    	    if(partes[0]) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} O veículo precisa estar desligado.");

     		FrenodeMano[coche] = 1;
       		GetVehiclePos(coche, VehFrenoPOS[coche][0], VehFrenoPOS[coche][1], VehFrenoPOS[coche][2]);
         	GetVehicleZAngle(coche, VehFrenoPOS[coche][3]);
          	SetVehicleVelocity(coche, 0, 0, 0);

           	format(string_freno, sizeof(string_freno), "* %s puxa o freio de mão do veículo para cima.", PlayerName(playerid, 1));
            ProxDetector(8.0, playerid, string_freno, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
	}
 	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em um veículo.");
 	return 1;
}
//============================================================================== [ Sistema de Multas ]
forward CarregandoMultas();
public CarregandoMultas()
{
    new Rows, Fields, totalmultas = 0;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		new tmp[256];

		for(new i ; i < Rows; i++) if(i < MAX_MULTAS)
		{
			cache_get_field_content(i, "mID", tmp);
			new pid = strval(tmp);
		 	MultasInfo[pid][mID] = strval(tmp);

		 	MultasInfo[pid][mCriada] = 1;

		 	cache_get_field_content(i, "mDono", tmp); MultasInfo[pid][mDono] = strval(tmp);
		 	cache_get_field_content(i, "mCarro", tmp); MultasInfo[pid][mCarro] = strval(tmp);
		 	cache_get_field_content(i, "mValor", tmp); MultasInfo[pid][mValor] = strval(tmp);

		 	cache_get_field_content(i, "mData", tmp); format(MultasInfo[pid][mData], 64, "%s", tmp);
		 	cache_get_field_content(i, "mMotivo", tmp); format(MultasInfo[pid][mMotivo], 124, "%s", tmp);
		 	cache_get_field_content(i, "mIssuer", tmp); format(MultasInfo[pid][mIssuer], 24, "%s", tmp);

		 	cache_get_field_content(i, "mPayHours", tmp); MultasInfo[pid][mPayHours] = strval(tmp);

		 	cache_get_field_content(i, "mPaga", tmp); MultasInfo[pid][mPaga] = strval(tmp);

		 	totalmultas++;
		}
	}
	printf("[CARREGADO] Multas: %d",totalmultas);
	return 1;
}

SalvarMulta(pid)
{
	static
	    query[2048];

	format(query, sizeof(query), "UPDATE `multas` SET `mDono` = '%d', `mCarro` = '%d', `mValor` = '%d', `mData` = '%s', `mMotivo` = '%s', `mIssuer` = '%s', `mPayHours` = '%d', `mPaga`='%d' WHERE `mID` = '%d'",
		MultasInfo[pid][mDono],
		MultasInfo[pid][mCarro],
		MultasInfo[pid][mValor],
		MultasInfo[pid][mData],
		MultasInfo[pid][mMotivo],
		MultasInfo[pid][mIssuer],
		MultasInfo[pid][mPayHours],
		MultasInfo[pid][mPaga],
		MultasInfo[pid][mID]
	);
 	mysql_function_query(Pipeline, query, false, "", "");
 	return 1;
}

COMMAND:multar(playerid, params[])
{
    if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] != FAC_TIPO_PMERJ && FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] != FAC_TIPO_PCERJ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso a este comando.");
    if(PlayerInfo[playerid][pEmServico] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando estando fora de serviço.");
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");

	new type[24],amount,pcid,motivo[124];
	if(sscanf(params, "s[24]iis[124]", type, pcid, amount, motivo))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /multa [carro/player] [id] [valor] [motivo]");
        return 1;
	}
	else
	{
	    if(amount < 1 || amount > 3500) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Valor da multa inválido (Minimo 1, máximo 3,500).");
        if(strcmp(type, "player", true) == 0)
		{
		    if(!IsPlayerConnected(pcid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player não está logado.");

		    if(GetDistanceBetweenPlayers(playerid,pcid) < 7.5)
			{
			    new string_m[1024], tipo = 1;
            	format(string_m,sizeof(string_m),"INSERT INTO multas (mDono) VALUES ('%d') ", PlayerInfo[pcid][pID]);
				mysql_function_query(Pipeline, string_m, false, "FinalizarMulta", "dddd",playerid,amount,tipo,PlayerInfo[pcid][pID]);

				format(DandoMulta[playerid], 124,"%s",motivo);

				new string_m1[526];
				format(string_m1,sizeof(string_m1),"** %s escreve algo em seu bloco de multas, rasgando a folha entregando a %s.", PlayerName(playerid, 1), PlayerName(pcid, 1));
				ProxDetector(8.0, playerid, string_m1, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				format(string_m1,sizeof(string_m1),"[!] Você recebeu um multa de %s por %s. Veja em /multas.", PlayerName(playerid, 1), motivo);
				SendClientMessage(pcid, COLOR_PURPLE, string_m1);
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo deste player.");
		}
		else if(strcmp(type, "carro", true) == 0)
		{
		    static Float:fCoords[3];
			GetVehiclePos(pcid, fCoords[0], fCoords[1], fCoords[2]);
			if(IsPlayerInRangeOfPoint(playerid,8.0,fCoords[0], fCoords[1], fCoords[2]))
	   		{
			    new slot = GetVehicleSlot(pcid);
			 	if(slot > -1)
			 	{

					new string_m[1024], tipo = 2;
	            	format(string_m,sizeof(string_m),"INSERT INTO multas (mCarro) VALUES ('%d') ", VehicleInfo[slot][vID]);
					mysql_function_query(Pipeline, string_m, false, "FinalizarMulta", "dddd",playerid,amount,tipo,VehicleInfo[slot][vID]);

                    format(DandoMulta[playerid], 124,"%s",motivo);

					new string_m1[526], vname[64];
					GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
					format(string_m1,sizeof(string_m1),"** %s escreve algo em seu bloco de multas, rasgando a folha colocando-a no vidro do %s.", PlayerName(playerid, 1), vname);
					ProxDetector(8.0, playerid, string_m1, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					for(new i = 0; i < MAX_PLAYERS; i++)
					{
					    if(IsPlayerConnected(i))
					    {
					        if(VehicleInfo[slot][vOwner] == PlayerInfo[i][pID])
					        {
								GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);

					        	format(string_m1,sizeof(string_m1),"[!] O seu veículo modelo %s recebeu um multa por %s. Veja em /multas.", vname, motivo);
								SendClientMessage(pcid, COLOR_PURPLE, string_m1);
								break;
							}
					    }
					}
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não pode receber multas.");
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a este veículo.");
		}
	}
	return 1;
}

forward FinalizarMulta(playerid,amount,tipo,pcid);
public FinalizarMulta(playerid,amount,tipo,pcid)
{
    new i = cache_insert_id();
    MultasInfo[i][mID] = i;

    if(tipo == 1)
		MultasInfo[i][mDono] = pcid;
	else
		MultasInfo[i][mCarro] = pcid;

	MultasInfo[i][mValor] = amount;

    MultasInfo[i][mCriada] = 1;

	new hour, mins, sec;
	new d,m,y;
	new DataSalvar[124];
	getdate(y,m,d);
	gettime(hour,mins,sec);
 	new strh[24], hourstr[4], minstr[4], secstr[4];
	if(hour < 10) { format(hourstr,sizeof(hourstr),"0%d",hour); } else { format(hourstr,sizeof(hourstr),"%d",hour); }
	if(mins < 10) { format(minstr,sizeof(minstr),"0%d",mins); } else { format(minstr,sizeof(minstr),"%d",mins); }
	if(sec < 10) { format(secstr,sizeof(secstr),"0%d",sec); } else { format(secstr,sizeof(secstr),"%d",sec); }
	format(strh,sizeof(strh),"%s:%s:%s",hourstr,minstr,secstr);
	format(DataSalvar,sizeof(DataSalvar),"%d-%d-%d - %s",d,m,y,strh);

	format(MultasInfo[i][mData],64,"%s", DataSalvar);
	format(MultasInfo[i][mMotivo],256,"%s", DandoMulta[playerid]);
	format(MultasInfo[i][mIssuer],24,"%s", PlayerName(playerid, 0));
	MultasInfo[i][mPayHours] = 4320;
	MultasInfo[i][mPaga] = 0;

	SalvarMulta(i);
	return 1;
}

COMMAND:multas(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
	if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");

	new Linha1[2056], LinhaAtt[526], multas = 0;

	for(new mm = 0; mm < MAX_MULTAS; mm++)
	{

	    if(MultasInfo[mm][mCriada] == 1)
	    {
		    if(MultasInfo[mm][mPaga] == 0)
		    {
				if(MultasInfo[mm][mDono] > 0)
				{
					if(MultasInfo[mm][mDono] == PlayerInfo[playerid][pID])
					{
					    if(multas == 0)
						{
							format(LinhaAtt, 126, "Multa #%d [{7E98B6}R$%d]{ffffff} por %s",mm,MultasInfo[mm][mValor], MultasInfo[mm][mMotivo]);
							strcat(Linha1, LinhaAtt);
						}
						else
						{
						    format(LinhaAtt, 126, "\nMulta #%d [{7E98B6}R$%d]{ffffff} por %s",mm,MultasInfo[mm][mValor], MultasInfo[mm][mMotivo]);
							strcat(Linha1, LinhaAtt);
						}

						VendoMultas[playerid][multas] = mm;
						multas++;
					}
				}
				else if(MultasInfo[mm][mCarro] > 0)
		  		{
		  		    for(new cars = 0; cars < MAX_VEHICLES; cars++)
		  		    {
		  		        if(VehicleInfo[cars][vID] == MultasInfo[mm][mCarro])
		  		        {
							if(VehicleInfo[cars][vOwner] == PlayerInfo[playerid][pID])
							{
							    new vname[64];
								GetVehicleNameByModel(VehicleInfo[cars][vModel],vname);

								if(multas == 0)
								{
									format(LinhaAtt, 126, "[%s] Multa #%d [{7E98B6}R$%d]{ffffff} por %s",vname,mm,MultasInfo[mm][mValor], MultasInfo[mm][mMotivo]);
									strcat(Linha1, LinhaAtt);
								}
								else
								{
								    format(LinhaAtt, 126, "\n[%s] Multa #%d [{7E98B6}R$%d]{ffffff} por %s",vname,mm,MultasInfo[mm][mValor], MultasInfo[mm][mMotivo]);
									strcat(Linha1, LinhaAtt);
								}
								VendoMultas[playerid][multas] = mm;
								multas++;
							}
						}
					}
				}
			}
		}
	}
	if(multas == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma multa pendente.");
    Dialog_Show(playerid, DIALOG_VERMULTAS, DIALOG_STYLE_LIST, "Lista de Multas", Linha1, "Detalhes", "Cancelar");
    return 1;
}

Dialog:DIALOG_VERMULTAS(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	new multa_id = VendoMultas[playerid][listitem];

	PagandoMulta[playerid] = multa_id;

	new Titulo[56], Informacoes[1024], tempo[124];
	format(Titulo, 56, "Detalhes da Multa #%d",multa_id);

	new tempototal = (MultasInfo[multa_id][mPayHours]/60);

	if(MultasInfo[multa_id][mPayHours] > 60)
		format(tempo, 124, "Você tem {7E98B6}%d horas{A9C4E4} para pagar esta multa.",tempototal);
	else if(MultasInfo[multa_id][mPayHours] == 0)
        format(tempo, 124, "{CC0000}O pagamento desta multa está atrasado.",tempototal);
	else
	    format(tempo, 124, "Você tem {7E98B6}%d minutos{A9C4E4} para pagar esta multa.",MultasInfo[multa_id][mPayHours]);

	format(Informacoes, 1024, "{A9C4E4}Polícia Militar\t\t{7E98B6}Do São Paulo \
	\n{A9C4E4}Policial:\t\t\t{7E98B6}%s \n \
	\n{A9C4E4}Valor:\t\t\t{7E98B6}R$%d \
	\n{A9C4E4}Razão:\t\t\t{7E98B6}%s \
	\n{A9C4E4}Data:\t\t\t{7E98B6}%s \
	\n\n{A9C4E4}\t%s",MultasInfo[multa_id][mIssuer],MultasInfo[multa_id][mValor],MultasInfo[multa_id][mMotivo],MultasInfo[multa_id][mData],tempo);

	Dialog_Show(playerid, DIALOG_PAGARMULTAS, DIALOG_STYLE_MSGBOX, Titulo, Informacoes, "Pagar", "Fechar");

	return 1;
}

Dialog:DIALOG_PAGARMULTAS(playerid, response, listitem, inputtext[])
{
    if(!response)
	{
	    PagandoMulta[playerid] = 0;

		return 1;
	}

    new multa_id = PagandoMulta[playerid];

    if(IsPlayerInRangeOfPoint(playerid,8.0, -501.2948,293.6831,2001.0950))
	{
        if(PlayerInfo[playerid][pGrana] >= MultasInfo[multa_id][mValor])
        {
            PlayerInfo[playerid][pGrana]-= MultasInfo[multa_id][mValor];
			GovInfo[gCofres] += MultasInfo[multa_id][mValor];

            new str[124];
		    format(str, 124, "Você pagou a multa #%d de R$%d.", multa_id, MultasInfo[multa_id][mValor]);
            SendClientMessage(playerid, COLOR_LIGHTGREEN, str);

            format(string, sizeof(string), "DELETE FROM `multas` WHERE `mID` = '%d'", multa_id);
			mysql_function_query(Pipeline, string, false, "", "");

            MultasInfo[multa_id][mPaga] = 1;
            MultasInfo[multa_id][mCriada] = 0;
            PagandoMulta[playerid] = 0;

            SalvarMulta(multa_id);
            return 1;
        }
        else
		{
		    new str[124];
		    format(str, 124, "Você não tem R$%d para pagar esta multa.", MultasInfo[multa_id][mValor]);
			SendClientMessage(playerid, COLOR_LIGHTRED, str);
			return 1;
		}
    }
    else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está na prefeitura.");
}

COMMAND:vermultas(playerid, params[])
{
    if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] != FAC_TIPO_PMERJ && FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] != FAC_TIPO_PCERJ) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso a este comando.");
    if(PlayerInfo[playerid][pEmServico] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando estando fora de serviço.");
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");

	new type[24],pcidop[24];
	if(sscanf(params, "s[24]s[24]", type, pcidop))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /vermultas [carroid/carroplaca/player] [id/placa]");
        return 1;
	}
	else
	{
	    new Linha1[2056], LinhaAtt[526], multas = 0;

        if(strcmp(type, "player", true) == 0)
		{
		    new pcid = strval(pcidop);
		    if(!IsPlayerConnected(pcid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player não está logado.");
		    if(!PlayerInfo[pcid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player não está logado.");

			for(new mm = 0; mm < MAX_MULTAS; mm++)
			{
			    if(MultasInfo[mm][mCriada] == 1)
			    {
				    if(MultasInfo[mm][mPaga] == 0)
				    {
						if(MultasInfo[mm][mDono] > 0)
						{
							if(MultasInfo[mm][mDono] == PlayerInfo[pcid][pID])
							{
							    new tempototal = (MultasInfo[mm][mPayHours]/60), tempo[124];
								if(MultasInfo[mm][mPayHours] > 60)
									format(tempo, 124, "{7E98B6}%d horas.",tempototal);
								else if(MultasInfo[mm][mPayHours] == 0)
								    format(tempo, 124, "{CC0000}Atrasado.",tempototal);
								else
								    format(tempo, 124, "{7E98B6}%d minutos.",MultasInfo[mm][mPayHours]);

							    if(multas == 0)
								{
									format(LinhaAtt, 126, "Multa\tValor\tMotivo\tTempo para Pagar\n#%d\t{7E98B6}R$%d\t{ffffff}%s\t%s",mm,MultasInfo[mm][mValor], MultasInfo[mm][mMotivo],tempo);
									strcat(Linha1, LinhaAtt);
								}
								else
								{
								    format(LinhaAtt, 126, "\n#%d\t{7E98B6}R$%d\t{ffffff}%s\t%s",mm,MultasInfo[mm][mValor], MultasInfo[mm][mMotivo],tempo);
									strcat(Linha1, LinhaAtt);
								}

								VendoMultas[playerid][multas] = mm;
								multas++;
							}
						}
					}
				}
			}
			if(multas == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este player não tem nenhuma multa pendente.");
			new dname[124];
			format(dname, 124, "Lista de multas de %s",PlayerName(pcid,0));
    		Dialog_Show(playerid, DIALOG_VERMULTAS_P, DIALOG_STYLE_TABLIST_HEADERS, dname, Linha1, "Detalhes", "Cancelar");
      	}
		else if(strcmp(type, "carroid", true) == 0)
		{
		    new pcid = strval(pcidop);

		    new vplaca[24], vname[64];
		    for(new mm = 0; mm < MAX_MULTAS; mm++)
			{
			    if(MultasInfo[mm][mPaga] == 0)
			    {
					if(MultasInfo[mm][mCarro] > 0)
			  		{
			  		    for(new cars = 0; cars < MAX_VEHICLES; cars++)
			  		    {
			  		        if(VehicleInfo[cars][vVehicle] == pcid)
							{
			  		        	if(VehicleInfo[cars][vID] == MultasInfo[mm][mCarro])
			  		        	{
  		    						new slot = GetVehicleSlot(VehicleInfo[cars][vVehicle]);
								    if(slot > -1)
								    {
	                                    new tempototal = (MultasInfo[mm][mPayHours]/60), tempo[124];
										if(MultasInfo[mm][mPayHours] > 60)
											format(tempo, 124, "{7E98B6}%d horas.",tempototal);
										else if(MultasInfo[mm][mPayHours] == 0)
									        format(tempo, 124, "{CC0000}Atrasado.",tempototal);
										else
										    format(tempo, 124, "{7E98B6}%d minutos.",MultasInfo[mm][mPayHours]);


										if(multas == 0)
										{
											format(LinhaAtt, 126, "{ffffff}Multa\tValor\tMotivo\tTempo para Pagar\n#%d\t{7E98B6}R$%d\t{ffffff}%s\t%s",mm,MultasInfo[mm][mValor], MultasInfo[mm][mMotivo],tempo);
											strcat(Linha1, LinhaAtt);
										}
										else
										{
										    format(LinhaAtt, 126, "\n#%d\t{7E98B6}R$%d\t{ffffff}%s\t%s",mm,MultasInfo[mm][mValor], MultasInfo[mm][mMotivo],tempo);
											strcat(Linha1, LinhaAtt);
										}
										VendoMultas[playerid][multas] = mm;
										format(vplaca, 24, "%s",VehicleInfo[cars][vPlate]);
										GetVehicleNameByModel(VehicleInfo[cars][vModel],vname);
										multas++;
									}
									else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} ID do veículo inválido.");
								}
							}
						}
					}
				}
			}
		}
		else if(strcmp(type, "carroplaca", true) == 0)
		{
		    new vplaca[24], vname[64], dname[86];
		    for(new cc = 0; cc < MAX_CA_VEHICLES; cc++)
			{
				if(VehicleInfo[cc][vVehicle] != -1)
				{
			    	if(strcmp(VehicleInfo[cc][vPlate], pcidop, true) == 0)
			    	{
		    			for(new mm = 0; mm < MAX_MULTAS; mm++)
						{
			    			if(MultasInfo[mm][mPaga] == 0)
			    			{
								if(MultasInfo[mm][mCarro] > 0)
			  					{
			  		        		if(VehicleInfo[cc][vID] == MultasInfo[mm][mCarro])
			  		        		{
  		    							new slot = GetVehicleSlot(VehicleInfo[cc][vVehicle]);
								    	if(slot > -1)
								    	{
	                                    	new tempototal = (MultasInfo[mm][mPayHours]/60), tempo[124];
											if(MultasInfo[mm][mPayHours] > 60)
												format(tempo, 124, "{7E98B6}%d horas.",tempototal);
											else if(MultasInfo[mm][mPayHours] == 0)
									        	format(tempo, 124, "{CC0000}Atrasado.",tempototal);
											else
										    	format(tempo, 124, "{7E98B6}%d minutos.",MultasInfo[mm][mPayHours]);

											if(multas == 0)
											{
												format(LinhaAtt, 126, "{ffffff}Multa\tValor\tMotivo\tTempo para Pagar\n#%d\t{7E98B6}R$%d\t{ffffff}%s\t%s",mm,MultasInfo[mm][mValor], MultasInfo[mm][mMotivo],tempo);
												strcat(Linha1, LinhaAtt);
											}
											else
											{
										    	format(LinhaAtt, 126, "\n#%d\t{7E98B6}R$%d\t{ffffff}%s\t%s",mm,MultasInfo[mm][mValor], MultasInfo[mm][mMotivo],tempo);
												strcat(Linha1, LinhaAtt);
											}
											VendoMultas[playerid][multas] = mm;
											format(vplaca, 24, "%s",VehicleInfo[cc][vPlate]);
											GetVehicleNameByModel(VehicleInfo[cc][vModel],vname);
											multas++;
										}
										else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Placa do veículo inválido.");
									}
								}
							}
						}
					}
				}
			}
			if(multas == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não tem nenhuma multa pendente.");
			format(dname, 86, "Lista de multas [%s-%s]",vname,vplaca);
			Dialog_Show(playerid, DIALOG_VERMULTAS_P, DIALOG_STYLE_TABLIST_HEADERS, dname, Linha1, "Detalhes", "Cancelar");
		}
	}
    return 1;
}

Dialog:DIALOG_VERMULTAS_P(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	new multa_id = VendoMultas[playerid][listitem];

	PagandoMulta[playerid] = multa_id;

	new Titulo[56], Informacoes[1024], tempo[124];
	format(Titulo, 56, "Detalhes da Multa #%d",multa_id);

	new tempototal = (MultasInfo[multa_id][mPayHours]/60);

	if(MultasInfo[multa_id][mPayHours] > 60)
		format(tempo, 124, "Você tem {7E98B6}%d horas{A9C4E4} para pagar esta multa.",tempototal);
	else if(MultasInfo[multa_id][mPayHours] == 0)
        format(tempo, 124, "{CC0000}O pagamento desta multa está atrasado.",tempototal);
	else
	    format(tempo, 124, "Você tem {7E98B6}%d minutos{A9C4E4} para pagar esta multa.",MultasInfo[multa_id][mPayHours]);

	format(Informacoes, 1024, "{A9C4E4}Polícia Militar\t\t{7E98B6}Do São Paulo \
	\n{A9C4E4}Policial:\t\t\t{7E98B6}%s \n \
	\n{A9C4E4}Valor:\t\t\t{7E98B6}R$%d \
	\n{A9C4E4}Razão:\t\t\t{7E98B6}%s \
	\n{A9C4E4}Data:\t\t\t{7E98B6}%s \
	\n\n{A9C4E4}\t%s",MultasInfo[multa_id][mIssuer],MultasInfo[multa_id][mValor],MultasInfo[multa_id][mMotivo],MultasInfo[multa_id][mData],tempo);

	Dialog_Show(playerid, 99999999, DIALOG_STYLE_MSGBOX, Titulo, Informacoes, "Fechar", "");

	return 1;
}
//==================================================================================================================

COMMAND:cinto(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
    if(IsPlayerInAnyVehicle(playerid))
	{
		new carid = GetPlayerVehicleID(playerid);
	    if(GetVehicleModel(carid) == 448 || GetVehicleModel(carid) == 461 || GetVehicleModel(carid) == 462 ||
		GetVehicleModel(carid) == 463 || GetVehicleModel(carid) == 468 || GetVehicleModel(carid) == 471 ||
		GetVehicleModel(carid) == 481 || GetVehicleModel(carid) == 509 || GetVehicleModel(carid) == 510 ||
		GetVehicleModel(carid) == 521 || GetVehicleModel(carid) == 522 || GetVehicleModel(carid) == 523 ||
		GetVehicleModel(carid) == 581 || GetVehicleModel(carid) == 586) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não tem porta-malas.");

	    new string_m1[256];
	    if(GetPVarInt(playerid, "CintoVeicular") == 0)
	    {
	        SetPVarInt(playerid, "CintoVeicular", 1);
	        format(string_m1,sizeof(string_m1),"** %s leva a sua mão até seu cinto e encaixa ele em sua trava.", PlayerName(playerid, 1));
			ProxDetector(8.0, playerid, string_m1, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    }
	    else
	    {
	        SetPVarInt(playerid, "CintoVeicular", 0);
	        format(string_m1,sizeof(string_m1),"** %s leva sua mão até a trava de seu cinto, retirando-o.", PlayerName(playerid, 1));
			ProxDetector(8.0, playerid, string_m1, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    }
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em um veículo.");
	return 1;
}

COMMAND:checarcinto(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new targetid,stext[50];
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_GREY, "ERRO:{FFFFFF} /checarcinto [ID do jogador]");
	else
	{
	    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_WHITE, "ERRO:Você deve estar logado para utilizar este comando.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "ERRO:{FFFFFF} Este jogador não está conectado!");
	    if(!IsPlayerInAnyVehicle(targetid)) return SendClientMessage(playerid, COLOR_GREY, "ERRO:Este jogador não está em um veículo.");
	    if(GetDistanceBetweenPlayers(playerid,targetid) < 5.1)
     	{
    	    switch(GetPVarInt(targetid, "CintoVeicular"))
            {
                case 0: stext = "não está usando";
                case 1: stext = "está usando";
            }
    	    format(string, sizeof(string), "** %s checa se %s está de cinto.", PlayerName(playerid, 1), PlayerName(targetid, 1));
    	    ProxDetector(8.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

    	    format(string, sizeof(string), "** %s %s o cinto.", PlayerName(targetid, 1), stext);
    	    SCM(playerid,COLOR_YELLOW, string);
      	}
      	else SendClientMessage(playerid,COLOR_GREY,"ERRO:{FFFFFF} Você não está próximo suficiente deste jogador!");
	}
	return 1;
}

COMMAND:corrida(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(IsPlayerConnected(playerid))
 	{
  		if(PlayerInfo[playerid][pJob] == JOB_TAXISTA)
		{
			if(TransportDuty[playerid] > 0)
			{
			    TaxiDrivers -= 1;
   				TransportDuty[playerid] = 0;
				format(string, sizeof(string), "* Você está fora de serviço e ganhou R$%d.", TransportMoney[playerid]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				PlayerInfo[playerid][pGrana] += TransportMoney[playerid];
				TransportValue[playerid] = 0;
				TransportMoney[playerid] = 0;
				return 1;
			}
			else
			{
				new Veh = GetPlayerVehicleID(playerid);
				new model = GetVehicleModel(Veh);
				if(model == 560 || model == 420 || model == 438 || model == 418 || model == 405 || model == 426 || model == 445 || model == 516 || model == 540 || model == 546 || model == 547)
				{
				    new moneys;
					if(sscanf(params, "d", moneys)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /corrida [valor(1-5)]");
					else {
					    if(GetPlayerState(playerid) == 2) {
							if(moneys < 1 || moneys > 5) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O preço da corrida deve ser entre R$1 e 5R$.");
							TransportDuty[playerid] = 1;
							TaxiDrivers += 1;
							TransportValue[playerid] = moneys;
						    SendClientMessage(playerid, COLOR_WHITE, "INFO: Você entrou em serviço de taxista.");
						}
						else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é o motorista de taxi.");
					}
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veiculo não pode ser usado para trabalhar de taxista.");
			}
		}
		else return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um taxista.");
 	}
	return 1;
}

COMMAND:cancelartaxi(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(ChamouTaxi[playerid] == 1)
 	{
  		if(TaxiCallTime[playerid] > 0)
    	{
   			for(new i = 0; i <= MAX_PLAYERS; ++i)
			{
   				if(IsPlayerConnected(i))
			    {
      				if(TaxiAccepted[i] == playerid)
		        	{
            			TaxiAccepted[i] = 999;
           				SendClientMessage(playerid,COLOR_LIGHTRED,"AVISO: O cliente cancelou a chamada do taxi.");
           				TaxiCallTime[i] = 0;
			            DisablePlayerCheckpoint(i);
			            break;
			        }
			    }
			}
			TaxiAccepted[playerid] = 999;
            SendClientMessage(playerid,COLOR_LIGHTRED,"INFO: Você cancelou o chamado de taxi.");
			TaxiCallTime[playerid] = 0;
			ChamouTaxi[playerid] = 0;
		}
	}
	return 1;
}

COMMAND:cancelarmecanico(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(ChamouMec[playerid] == 1)
 	{
  		if(MecCallTime[playerid] > 0)
    	{
   			for(new i = 0; i <= MAX_PLAYERS; ++i)
			{
   				if(IsPlayerConnected(i))
			    {
      				if(MecAccepted[i] == playerid)
		        	{
            			MecAccepted[i] = 999;
           				SendClientMessage(playerid,COLOR_LIGHTRED,"INFO: O cliente cancelou a chamada do mecanico.");
           				MecCallTime[i] = 0;
			            DisablePlayerCheckpoint(i);
						break;
			        }
			    }
			}
			MecAccepted[playerid] = 999;
            SendClientMessage(playerid,COLOR_LIGHTRED,"INFO: Você cancelou o chamado do mecanico.");
			MecCallTime[playerid] = 0;
			ChamouMec[playerid] = 0;
		}
	}
	return 1;
}
//==============================================================================
public OnPlayerJackVehicle(playerid, targetid, vehicleid)
{
    format(string, sizeof(string), "[CAR-JACKED] %s (%d) deu carJack em %s (%d). [Vehicleid: %d]", PlayerName(playerid,1), playerid, PlayerName(targetid,1), targetid, vehicleid);
	SendAdminMessage(COLOR_LIGHTRED,string);



	format(string, sizeof(string), "[CAR-JACKED] %s (%d) deu carJack em você. [Vehicleid: %d]", PlayerName(playerid,1), playerid, vehicleid);
	SCM(targetid, COLOR_LIGHTRED, string);
	return 1;
}
//==================== [ fire ]

//==============================================================================
COMMAND:verplaca(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");

	new vid;
	if(sscanf(params, "d", vid))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /verplaca [vehicleid]");
        return 1;
	}
	else
	{
 		static Float:fCoords[3];
		GetVehiclePos(vid, fCoords[0], fCoords[1], fCoords[2]);
		if(IsPlayerInRangeOfPoint(playerid,8.0,fCoords[0], fCoords[1], fCoords[2]))
		{
  			new slot = GetVehicleSlot(vid);
 			if(slot > -1)
		 	{
		 	    new vname[64], string_m1[256];
				GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
   				format(string_m1,sizeof(string_m1),"Placa do veículo: %s | Modelo: %s.", VehicleInfo[slot][vPlate], vname);
				SendClientMessage(playerid, COLOR_PURPLE, string_m1);
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO #489 - Veículo da administração (Não pode ser usado para RP).");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo a este veículo.");
	}
	return 1;
}
//==============================================================================
COMMAND:hotdog(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa estar logado.");
	if(PlayerInfo[playerid][pJob] != JOB_HOTDOG) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não é um vendedor de HotDog.");

	new targetid, preco;
	if(sscanf(params, "dd", targetid, preco))
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /hotdog [playerid] [preço]");
        return 1;
	}
	else
	{
	    if(preco < 1 || preco > 100) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O preço deve ser entre R$1 e R$100.");

	    if(IsPlayerConnected(targetid))
	    {
     	   	new vid = GetPlayerVehicleID(playerid);
   		  	new modelid = GetVehicleModel(vid);
			if(modelid != 588) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você só pode usar esse comando em um carro de HotDog!");

			format(string, sizeof(string), "Você ofereceu um HotDog para %s.", PlayerName(targetid,1));
			SendClientMessage(playerid, COLOR_GREEN, string);
			format(string, sizeof(string), "%s te ofereceu um hot dog por R$%d. (digite '/aceitar hotdog' para aceitar).", PlayerName(playerid,1),preco);
			SendClientMessage(targetid, COLOR_GREEN, string);
			HotDogAccept[targetid] = 1;
			HotDogOffer[targetid] = playerid;
			HotDogPrice[targetid] = preco;
  		}
	}
	return 1;
}
//==============================================================================
forward CriandoLast911(playerid);
public CriandoLast911(playerid)
{
    new i = cache_insert_id();

    new hour, mins, sec, query[1028];
	new d,m,y;
	new DataSalvar[124],DataFinal[128];
	getdate(y,m,d);
	gettime(hour,mins,sec);
 	new strh[24], hourstr[4], minstr[4], secstr[4];
	if(hour < 10) { format(hourstr,sizeof(hourstr),"0%d",hour); } else { format(hourstr,sizeof(hourstr),"%d",hour); }
	if(mins < 10) { format(minstr,sizeof(minstr),"0%d",mins); } else { format(minstr,sizeof(minstr),"%d",mins); }
	if(sec < 10) { format(secstr,sizeof(secstr),"0%d",sec); } else { format(secstr,sizeof(secstr),"%d",sec); }
	format(strh,sizeof(strh),"%s:%s:%s",hourstr,minstr,secstr);
	format(DataSalvar,sizeof(DataSalvar),"%d-%d-%d - %s",d,m,y,strh);

	format(DataFinal,128,"%s", DataSalvar);

	new Local[255];
	format(Local,255,"%s", OutrasInfos[playerid][o911Local]);

	new result[286];
	result = str_replace("'", " ", Local);

	format(query, sizeof(query), "UPDATE `last911` SET `nNome` = '%s', `nLocalizacao` = '%s', `nSituacao` = '%s', `nRastreador` = '%s' WHERE `nID` = '%d'",
		OutrasInfos[playerid][o911Nome],
		result,
		OutrasInfos[playerid][o911Text],
		OutrasInfos[playerid][o911Reastreador],
		i);
 	mysql_function_query(Pipeline, query, false, "", "");

 	format(query, sizeof(query), "UPDATE `last911` SET `nTelefone` = '%d', `nTipo` = '%d', `nAtendido` = '0', `nData` = '%s', `nUsando` = '1' WHERE `nID` = '%d'",
		CelularData[playerid][celNumero],
		OutrasInfos[playerid][o911Tipo],
		DataFinal,
		i);
 	mysql_function_query(Pipeline, query, false, "", "");
	return 1;
}
//==============================================================================
public CriarCelular_Base()
{
	Celular_Fundo[0] = TextDrawCreate(510.800079, 325.9, "_");//Fundo - Preto
	TextDrawLetterSize(Celular_Fundo[0], 0.399200, 13.524268);
	TextDrawTextSize(Celular_Fundo[0], 617.000000, 0.000000);
	TextDrawAlignment(Celular_Fundo[0], 1);
	TextDrawColor(Celular_Fundo[0], -1);
	TextDrawUseBox(Celular_Fundo[0], 1);
	TextDrawBoxColor(Celular_Fundo[0], 255);
	TextDrawSetShadow(Celular_Fundo[0], -2);
	TextDrawSetOutline(Celular_Fundo[0], 0);
	TextDrawBackgroundColor(Celular_Fundo[0], 255);
	TextDrawFont(Celular_Fundo[0], 1);
	TextDrawSetProportional(Celular_Fundo[0], 1);
	TextDrawSetShadow(Celular_Fundo[0], -2);

	Celular_Fundo[1] = TextDrawCreate(510.800079, 325.9, "_");//Fundo - Marrom/Amarelado
	TextDrawLetterSize(Celular_Fundo[1], 0.399200, 13.524268);
	TextDrawTextSize(Celular_Fundo[1], 617.000000, 0.000000);
	TextDrawAlignment(Celular_Fundo[1], 1);
	TextDrawColor(Celular_Fundo[1], -1);
	TextDrawUseBox(Celular_Fundo[1], 1);
	TextDrawBoxColor(Celular_Fundo[1], 0x7D4606FF);
	TextDrawSetShadow(Celular_Fundo[1], -2);
	TextDrawSetOutline(Celular_Fundo[1], 0);
	TextDrawBackgroundColor(Celular_Fundo[1], 255);
	TextDrawFont(Celular_Fundo[1], 1);
	TextDrawSetProportional(Celular_Fundo[1], 1);
	TextDrawSetShadow(Celular_Fundo[1], -2);

	Celular_Fundo[2] = TextDrawCreate(510.800079, 325.9, "_");//Fundo - Azul Claro
	TextDrawLetterSize(Celular_Fundo[2], 0.399200, 13.524268);
	TextDrawTextSize(Celular_Fundo[2], 617.000000, 0.000000);
	TextDrawAlignment(Celular_Fundo[2], 1);
	TextDrawColor(Celular_Fundo[2], -1);
	TextDrawUseBox(Celular_Fundo[2], 1);
	TextDrawBoxColor(Celular_Fundo[2], 0x173350FF);
	TextDrawSetShadow(Celular_Fundo[2], -2);
	TextDrawSetOutline(Celular_Fundo[2], 0);
	TextDrawBackgroundColor(Celular_Fundo[2], 255);
	TextDrawFont(Celular_Fundo[2], 1);
	TextDrawSetProportional(Celular_Fundo[2], 1);
	TextDrawSetShadow(Celular_Fundo[2], -2);

	Celular_Fundo[3] = TextDrawCreate(510.800079, 325.9, "_");//Fundo - Laranja/Avermelhado
	TextDrawLetterSize(Celular_Fundo[3], 0.399200, 13.524268);
	TextDrawTextSize(Celular_Fundo[3], 617.000000, 0.000000);
	TextDrawAlignment(Celular_Fundo[3], 1);
	TextDrawColor(Celular_Fundo[3], -1);
	TextDrawUseBox(Celular_Fundo[3], 1);
	TextDrawBoxColor(Celular_Fundo[3], 0x581300FF);
	TextDrawSetShadow(Celular_Fundo[3], -2);
	TextDrawSetOutline(Celular_Fundo[3], 0);
	TextDrawBackgroundColor(Celular_Fundo[3], 255);
	TextDrawFont(Celular_Fundo[3], 1);
	TextDrawSetProportional(Celular_Fundo[3], 1);
	TextDrawSetShadow(Celular_Fundo[3], -2);

	Celular_Fundo[4] = TextDrawCreate(510.800079, 325.9, "_");//Fundo - Preto
	TextDrawLetterSize(Celular_Fundo[4], 0.399200, 13.524268);
	TextDrawTextSize(Celular_Fundo[4], 617.000000, 0.000000);
	TextDrawAlignment(Celular_Fundo[4], 1);
	TextDrawColor(Celular_Fundo[4], -1);
	TextDrawUseBox(Celular_Fundo[4], 1);
	TextDrawBoxColor(Celular_Fundo[4], 0x0A0A0AFF);
	TextDrawSetShadow(Celular_Fundo[4], -2);
	TextDrawSetOutline(Celular_Fundo[4], 0);
	TextDrawBackgroundColor(Celular_Fundo[4], 255);
	TextDrawFont(Celular_Fundo[4], 1);
	TextDrawSetProportional(Celular_Fundo[4], 1);
	TextDrawSetShadow(Celular_Fundo[4], -2);

	Celular_Fundo[5] = TextDrawCreate(510.800079, 325.9, "_");//Fundo - Rosa
	TextDrawLetterSize(Celular_Fundo[5], 0.399200, 13.524268);
	TextDrawTextSize(Celular_Fundo[5], 617.000000, 0.000000);
	TextDrawAlignment(Celular_Fundo[5], 1);
	TextDrawColor(Celular_Fundo[5], -1);
	TextDrawUseBox(Celular_Fundo[5], 1);
	TextDrawBoxColor(Celular_Fundo[5], 0xD800FFFF);
	TextDrawSetShadow(Celular_Fundo[5], -2);
	TextDrawSetOutline(Celular_Fundo[5], 0);
	TextDrawBackgroundColor(Celular_Fundo[5], 255);
	TextDrawFont(Celular_Fundo[5], 1);
	TextDrawSetProportional(Celular_Fundo[5], 1);
	TextDrawSetShadow(Celular_Fundo[5], -2);

	Celular_Fundo[6] = TextDrawCreate(510.800079, 325.9, "_");//Fundo - Vermelho/Vinho
	TextDrawLetterSize(Celular_Fundo[6], 0.399200, 13.524268);
	TextDrawTextSize(Celular_Fundo[6], 617.000000, 0.000000);
	TextDrawAlignment(Celular_Fundo[6], 1);
	TextDrawColor(Celular_Fundo[6], -1);
	TextDrawUseBox(Celular_Fundo[6], 1);
	TextDrawBoxColor(Celular_Fundo[6], 0x5F0000FF);
	TextDrawSetShadow(Celular_Fundo[6], -2);
	TextDrawSetOutline(Celular_Fundo[6], 0);
	TextDrawBackgroundColor(Celular_Fundo[6], 255);
	TextDrawFont(Celular_Fundo[6], 1);
	TextDrawSetProportional(Celular_Fundo[6], 1);
	TextDrawSetShadow(Celular_Fundo[6], -2);

	Celular_Fundo[7] = TextDrawCreate(510.800079, 325.9, "_");//Fundo - Verde
	TextDrawLetterSize(Celular_Fundo[7], 0.399200, 13.524268);
	TextDrawTextSize(Celular_Fundo[7], 617.000000, 0.000000);
	TextDrawAlignment(Celular_Fundo[7], 1);
	TextDrawColor(Celular_Fundo[7], -1);
	TextDrawUseBox(Celular_Fundo[7], 1);
	TextDrawBoxColor(Celular_Fundo[7], 0x005600FF);
	TextDrawSetShadow(Celular_Fundo[7], -2);
	TextDrawSetOutline(Celular_Fundo[7], 0);
	TextDrawBackgroundColor(Celular_Fundo[7], 255);
	TextDrawFont(Celular_Fundo[7], 1);
	TextDrawSetProportional(Celular_Fundo[7], 1);
	TextDrawSetShadow(Celular_Fundo[7], -2);

	Celular_Fundo[8] = TextDrawCreate(510.800079, 325.9, "_");//Fundo - Azul Escurão
	TextDrawLetterSize(Celular_Fundo[8], 0.399200, 13.524268);
	TextDrawTextSize(Celular_Fundo[8], 617.000000, 0.000000);
	TextDrawAlignment(Celular_Fundo[8], 1);
	TextDrawColor(Celular_Fundo[8], -1);
	TextDrawUseBox(Celular_Fundo[8], 1);
	TextDrawBoxColor(Celular_Fundo[8], 0x000F2DFF);
	TextDrawSetShadow(Celular_Fundo[8], -2);
	TextDrawSetOutline(Celular_Fundo[8], 0);
	TextDrawBackgroundColor(Celular_Fundo[8], 255);
	TextDrawFont(Celular_Fundo[8], 1);
	TextDrawSetProportional(Celular_Fundo[8], 1);
	TextDrawSetShadow(Celular_Fundo[8], -2);

	Celular_Fundo[9] = TextDrawCreate(510.800079, 325.9, "_");//Fundo - Amarelo
	TextDrawLetterSize(Celular_Fundo[9], 0.399200, 13.524268);
	TextDrawTextSize(Celular_Fundo[9], 617.000000, 0.000000);
	TextDrawAlignment(Celular_Fundo[9], 1);
	TextDrawColor(Celular_Fundo[9], -1);
	TextDrawUseBox(Celular_Fundo[9], 1);
	TextDrawBoxColor(Celular_Fundo[9], 0x858606FF);
	TextDrawSetShadow(Celular_Fundo[9], -2);
	TextDrawSetOutline(Celular_Fundo[9], 0);
	TextDrawBackgroundColor(Celular_Fundo[9], 255);
	TextDrawFont(Celular_Fundo[9], 1);
	TextDrawSetProportional(Celular_Fundo[9], 1);
	TextDrawSetShadow(Celular_Fundo[9], -2);

	Celular_Fundo[10] = TextDrawCreate(510.800079, 325.9, "_");//Fundo - Cinza/Branco
	TextDrawLetterSize(Celular_Fundo[10], 0.399200, 13.524268);
	TextDrawTextSize(Celular_Fundo[10], 617.000000, 0.000000);
	TextDrawAlignment(Celular_Fundo[10], 1);
	TextDrawColor(Celular_Fundo[10], -1);
	TextDrawUseBox(Celular_Fundo[10], 1);
	TextDrawBoxColor(Celular_Fundo[10], 0xABA8ABFF);
	TextDrawSetShadow(Celular_Fundo[10], -2);
	TextDrawSetOutline(Celular_Fundo[10], 0);
	TextDrawBackgroundColor(Celular_Fundo[10], 255);
	TextDrawFont(Celular_Fundo[10], 1);
	TextDrawSetProportional(Celular_Fundo[10], 1);
	TextDrawSetShadow(Celular_Fundo[10], -2);

	Celular_Fundo[11] = TextDrawCreate(510.800079, 325.9, "_");//Fundo - Branco
	TextDrawLetterSize(Celular_Fundo[11], 0.399200, 13.524268);
	TextDrawTextSize(Celular_Fundo[11], 617.000000, 0.000000);
	TextDrawAlignment(Celular_Fundo[11], 1);
	TextDrawColor(Celular_Fundo[11], -1);
	TextDrawUseBox(Celular_Fundo[11], 1);
	TextDrawBoxColor(Celular_Fundo[11], 0xFFFFFFFF);
	TextDrawSetShadow(Celular_Fundo[11], -2);
	TextDrawSetOutline(Celular_Fundo[11], 0);
	TextDrawBackgroundColor(Celular_Fundo[11], 255);
	TextDrawFont(Celular_Fundo[11], 1);
	TextDrawSetProportional(Celular_Fundo[11], 1);
	TextDrawSetShadow(Celular_Fundo[11], -2);
	//==========================================================================

    Celular_Base[0] = TextDrawCreate(508.599670, 320.0, "ld_grav:tvcorn"); //Fundo esquerda
	TextDrawLetterSize(Celular_Base[0], 0.000000, 0.000000);
	//TextDrawTextSize(Celular_Base[0], 73.000000, 127.000000);
	TextDrawTextSize(Celular_Base[0], 73.000000, 130.000000);
	TextDrawAlignment(Celular_Base[0], 1);
	TextDrawColor(Celular_Base[0], -1);
	TextDrawSetShadow(Celular_Base[0], 0);
	TextDrawSetOutline(Celular_Base[0], 0);
	TextDrawBackgroundColor(Celular_Base[0], 255);
	TextDrawFont(Celular_Base[0], 4);
	TextDrawSetProportional(Celular_Base[0], 0);
	TextDrawSetShadow(Celular_Base[0], 0);

	Celular_Base[1] = TextDrawCreate(537.199829, 334.8, "RJ_Telefonica");
	TextDrawLetterSize(Celular_Base[1], 0.253598, 1.069864);
	TextDrawAlignment(Celular_Base[1], 1);
	TextDrawColor(Celular_Base[1], -1);
	TextDrawSetShadow(Celular_Base[1], 0);
	TextDrawSetOutline(Celular_Base[1], 0);
	TextDrawBackgroundColor(Celular_Base[1], 255);
	TextDrawFont(Celular_Base[1], 1);
	TextDrawSetProportional(Celular_Base[1], 1);
	TextDrawSetShadow(Celular_Base[1], 0);

	Celular_Base[2] = TextDrawCreate(621.000366, 320.0, "ld_grav:tvcorn");// Fundo Direita
	TextDrawLetterSize(Celular_Base[2], 0.000000, 0.000000);
	TextDrawTextSize(Celular_Base[2], -65.000000, 128.000000);
	TextDrawAlignment(Celular_Base[2], 1);
	TextDrawColor(Celular_Base[2], -1);
	TextDrawSetShadow(Celular_Base[2], 0);
	TextDrawSetOutline(Celular_Base[2], 0);
	TextDrawBackgroundColor(Celular_Base[2], 255);
	TextDrawFont(Celular_Base[2], 4);
	TextDrawSetProportional(Celular_Base[2], 0);
	TextDrawSetShadow(Celular_Base[2], 0);

	Celular_Base[3] = TextDrawCreate(524.399963, 353.6, "_");// Tela
	TextDrawLetterSize(Celular_Base[3], 0.420800, 5.803733);
	TextDrawTextSize(Celular_Base[3], 601.000000, 0.000000);
	TextDrawAlignment(Celular_Base[3], 1);
	TextDrawColor(Celular_Base[3], -1);
	TextDrawUseBox(Celular_Base[3], 1);
	TextDrawBoxColor(Celular_Base[3], -1061109505);
	TextDrawSetShadow(Celular_Base[3], 0);
	TextDrawSetOutline(Celular_Base[3], 0);
	TextDrawBackgroundColor(Celular_Base[3], 255);
	TextDrawFont(Celular_Base[3], 1);
	TextDrawSetProportional(Celular_Base[3], 1);
	TextDrawSetShadow(Celular_Base[3], 0);

	Celular_Base[4] = TextDrawCreate(525.199951, 413.9, "___");//Botão Menu
	TextDrawLetterSize(Celular_Base[4], 0.401600, 0.226132);
	TextDrawTextSize(Celular_Base[4], 545.000000, 8.000000);
	TextDrawAlignment(Celular_Base[4], 1);
	TextDrawColor(Celular_Base[4], -1);
	TextDrawUseBox(Celular_Base[4], 1);
	TextDrawBoxColor(Celular_Base[4], -2139062017);
	TextDrawSetShadow(Celular_Base[4], 0);
	TextDrawSetOutline(Celular_Base[4], 0);
	TextDrawBackgroundColor(Celular_Base[4], 255);
	TextDrawFont(Celular_Base[4], 1);
	TextDrawSetProportional(Celular_Base[4], 1);
	TextDrawSetShadow(Celular_Base[4], 0);
	TextDrawSetSelectable(Celular_Base[4], true);

	Celular_Base[5] = TextDrawCreate(580.399902, 413.9, "___");//Botão Voltar
	TextDrawLetterSize(Celular_Base[5], 0.400800, 0.248532);
	TextDrawTextSize(Celular_Base[5], 601.000000, 8.000000);
	TextDrawAlignment(Celular_Base[5], 1);
	TextDrawColor(Celular_Base[5], -1);
	TextDrawUseBox(Celular_Base[5], 1);
	TextDrawBoxColor(Celular_Base[5], -2139062017);
	TextDrawSetShadow(Celular_Base[5], 0);
	TextDrawSetOutline(Celular_Base[5], 0);
	TextDrawBackgroundColor(Celular_Base[5], 255);
	TextDrawFont(Celular_Base[5], 1);
	TextDrawSetProportional(Celular_Base[5], 1);
	TextDrawSetShadow(Celular_Base[5], 0);
	TextDrawSetSelectable(Celular_Base[5], true);

	Celular_Base[6] = TextDrawCreate(599.399841, 320.2, "LD_BEAT:circle"); //Fechar ( Circulo )
	TextDrawLetterSize(Celular_Base[6], 0.000000, 0.000000);
	TextDrawTextSize(Celular_Base[6], 18.000000, 16.000000);
	TextDrawAlignment(Celular_Base[6], 1);
	TextDrawColor(Celular_Base[6], -1);
	TextDrawSetShadow(Celular_Base[6], 0);
	TextDrawSetOutline(Celular_Base[6], 0);
	TextDrawBackgroundColor(Celular_Base[6], 255);
	TextDrawFont(Celular_Base[6], 4);
	TextDrawSetProportional(Celular_Base[6], 0);
	TextDrawSetShadow(Celular_Base[6], 0);
	TextDrawSetSelectable(Celular_Base[6], true);

	Celular_Base[7] = TextDrawCreate(554.299865, 412.1, "LD_BEAT:up");//Seta subir
	TextDrawLetterSize(Celular_Base[7], 0.000000, 0.000000);
	TextDrawTextSize(Celular_Base[7], 20.000000, 15.000000);
	TextDrawAlignment(Celular_Base[7], 1);
	TextDrawColor(Celular_Base[7], -1);
	TextDrawSetShadow(Celular_Base[7], 0);
	TextDrawSetOutline(Celular_Base[7], 0);
	TextDrawBackgroundColor(Celular_Base[7], 255);
	TextDrawFont(Celular_Base[7], 4);
	TextDrawSetProportional(Celular_Base[7], 0);
	TextDrawSetShadow(Celular_Base[7], 0);
	TextDrawSetSelectable(Celular_Base[7], true);

	Celular_Base[8] = TextDrawCreate(567.200256, 423.0, "LD_BEAT:right");//Seta direita
	TextDrawLetterSize(Celular_Base[8], 0.000000, 0.000000);
	TextDrawTextSize(Celular_Base[8], 20.000000, 15.000000);
	TextDrawAlignment(Celular_Base[8], 1);
	TextDrawColor(Celular_Base[8], -1);
	TextDrawSetShadow(Celular_Base[8], 0);
	TextDrawSetOutline(Celular_Base[8], 0);
	TextDrawBackgroundColor(Celular_Base[8], 255);
	TextDrawFont(Celular_Base[8], 4);
	TextDrawSetProportional(Celular_Base[8], 0);
	TextDrawSetShadow(Celular_Base[8], 0);
	TextDrawSetSelectable(Celular_Base[8], true);

	Celular_Base[9] = TextDrawCreate(540.999938, 423.0, "LD_BEAT:left");//Seta esquerda
	TextDrawLetterSize(Celular_Base[9], 0.000000, 0.000000);
	TextDrawTextSize(Celular_Base[9], 20.000000, 15.000000);
	TextDrawAlignment(Celular_Base[9], 1);
	TextDrawColor(Celular_Base[9], -1);
	TextDrawSetShadow(Celular_Base[9], 0);
	TextDrawSetOutline(Celular_Base[9], 0);
	TextDrawBackgroundColor(Celular_Base[9], 255);
	TextDrawFont(Celular_Base[9], 4);
	TextDrawSetProportional(Celular_Base[9], 0);
	TextDrawSetShadow(Celular_Base[9], 0);
	TextDrawSetSelectable(Celular_Base[9], true);

	Celular_Base[10] = TextDrawCreate(554.000427, 433.5, "LD_BEAT:down");//Seta baixo
	TextDrawLetterSize(Celular_Base[10], 0.000000, 0.000000);
	TextDrawTextSize(Celular_Base[10], 20.000000, 15.000000);
	TextDrawAlignment(Celular_Base[10], 1);
	TextDrawColor(Celular_Base[10], -1);
	TextDrawSetShadow(Celular_Base[10], 0);
	TextDrawSetOutline(Celular_Base[10], 0);
	TextDrawBackgroundColor(Celular_Base[10], 255);
	TextDrawFont(Celular_Base[10], 4);
	TextDrawSetProportional(Celular_Base[10], 0);
	TextDrawSetShadow(Celular_Base[10], 0);
	TextDrawSetSelectable(Celular_Base[10], true);
	//==========================================================================

	Celular_Base[11] = TextDrawCreate(524.399841, 373.6, "mensagem_enviada");
	TextDrawLetterSize(Celular_Base[11], 0.250000, 1.000000);
	TextDrawAlignment(Celular_Base[11], 1);
	TextDrawColor(Celular_Base[11], -2139062017);
	TextDrawSetShadow(Celular_Base[11], 0);
	TextDrawSetOutline(Celular_Base[11], 0);
	TextDrawBackgroundColor(Celular_Base[11], 255);
	TextDrawFont(Celular_Base[11], 1);
	TextDrawSetProportional(Celular_Base[11], 1);
	TextDrawSetShadow(Celular_Base[11], 0);

	Celular_Base[12] = TextDrawCreate(521.000000, 323.0, "LD_CHAT:goodcha");//Mensagem enviada com sucesso
	TextDrawLetterSize(Celular_Base[12], 0.000000, 0.000000);
	TextDrawTextSize(Celular_Base[12], -17.000000, 14.000000);
	TextDrawAlignment(Celular_Base[12], 1);
	TextDrawColor(Celular_Base[12], -1);
	TextDrawSetShadow(Celular_Base[12], 0);
	TextDrawSetOutline(Celular_Base[12], 0);
	TextDrawBackgroundColor(Celular_Base[12], 255);
	TextDrawFont(Celular_Base[12], 4);
	TextDrawSetProportional(Celular_Base[12], 0);
	TextDrawSetShadow(Celular_Base[12], 0);

	Celular_Base[13] = TextDrawCreate(496.199920, 66.893295, "LD_CHAT:BADCHAT");//Nova mensagem
	TextDrawLetterSize(Celular_Base[13], 0.000000, 0.000000);
	TextDrawTextSize(Celular_Base[13], -14.000000, 12.000000);
	TextDrawAlignment(Celular_Base[13], 1);
	TextDrawColor(Celular_Base[13], -1);
	TextDrawSetShadow(Celular_Base[13], 0);
	TextDrawSetOutline(Celular_Base[13], 0);
	TextDrawBackgroundColor(Celular_Base[13], 255);
	TextDrawFont(Celular_Base[13], 4);
	TextDrawSetProportional(Celular_Base[13], 0);
	TextDrawSetShadow(Celular_Base[13], 0);

	Celular_Base[14] = TextDrawCreate(521.000000, 323.0, "LD_CHAT:thumbdn");//Falha no envio
	TextDrawLetterSize(Celular_Base[14], 0.000000, 0.000000);
	TextDrawTextSize(Celular_Base[14], -17.000000, 14.000000);
	TextDrawAlignment(Celular_Base[14], 1);
	TextDrawColor(Celular_Base[14], -1);
	TextDrawSetShadow(Celular_Base[14], 0);
	TextDrawSetOutline(Celular_Base[14], 0);
	TextDrawBackgroundColor(Celular_Base[14], 255);
	TextDrawFont(Celular_Base[14], 4);
	TextDrawSetProportional(Celular_Base[14], 0);
	TextDrawSetShadow(Celular_Base[14], 0);

	Celular_Base[15] = TextDrawCreate(521.000000, 323.0, "LD_CHAT:thumbup");//Enviando Mensagem
	TextDrawLetterSize(Celular_Base[15], 0.000000, 0.000000);
	TextDrawTextSize(Celular_Base[15], -17.000000, 14.000000);
	TextDrawAlignment(Celular_Base[15], 1);
	TextDrawColor(Celular_Base[15], -1);
	TextDrawSetShadow(Celular_Base[15], 0);
	TextDrawSetOutline(Celular_Base[15], 0);
	TextDrawBackgroundColor(Celular_Base[15], 255);
	TextDrawFont(Celular_Base[15], 4);
	TextDrawSetProportional(Celular_Base[15], 0);
	TextDrawSetShadow(Celular_Base[15], 0);
	//==========================================================================[ Tela Inicial ]
	Celular_Inicial[0] = TextDrawCreate(562.000061, 355.7, "17:58");
	TextDrawLetterSize(Celular_Inicial[0], 0.400000, 1.600000);
	TextDrawAlignment(Celular_Inicial[0], 2);
	TextDrawColor(Celular_Inicial[0], 255);
	TextDrawSetShadow(Celular_Inicial[0], 0);
	TextDrawSetOutline(Celular_Inicial[0], 0);
	TextDrawBackgroundColor(Celular_Inicial[0], 255);
	TextDrawFont(Celular_Inicial[0], 1);
	TextDrawSetProportional(Celular_Inicial[0], 1);
	TextDrawSetShadow(Celular_Inicial[0], 0);

	Celular_Inicial[1] = TextDrawCreate(561.999633, 369.2, "6,_Outubro");
	TextDrawLetterSize(Celular_Inicial[1], 0.300000, 0.800000);
	TextDrawAlignment(Celular_Inicial[1], 2);
	TextDrawColor(Celular_Inicial[1], 255);
	TextDrawSetShadow(Celular_Inicial[1], 0);
	TextDrawSetOutline(Celular_Inicial[1], 0);
	TextDrawBackgroundColor(Celular_Inicial[1], 255);
	TextDrawFont(Celular_Inicial[1], 1);
	TextDrawSetProportional(Celular_Inicial[1], 1);
	TextDrawSetShadow(Celular_Inicial[1], 0);

	Celular_Inicial[2] = TextDrawCreate(522.799987, 400.5, "menu");
	TextDrawLetterSize(Celular_Inicial[2], 0.300000, 0.899999);
	TextDrawAlignment(Celular_Inicial[2], 1);
	TextDrawColor(Celular_Inicial[2], 255);
	TextDrawSetShadow(Celular_Inicial[2], 0);
	TextDrawSetOutline(Celular_Inicial[2], 0);
	TextDrawBackgroundColor(Celular_Inicial[2], 255);
	TextDrawFont(Celular_Inicial[2], 1);
	TextDrawSetProportional(Celular_Inicial[2], 1);
	TextDrawSetShadow(Celular_Inicial[2], 0);

	Celular_Inicial[3] = TextDrawCreate(573.999694, 400.5, "voltar");
	TextDrawLetterSize(Celular_Inicial[3], 0.300000, 0.899999);
	TextDrawAlignment(Celular_Inicial[3], 1);
	TextDrawColor(Celular_Inicial[3], 255);
	TextDrawSetShadow(Celular_Inicial[3], 0);
	TextDrawSetOutline(Celular_Inicial[3], 0);
	TextDrawBackgroundColor(Celular_Inicial[3], 255);
	TextDrawFont(Celular_Inicial[3], 1);
	TextDrawSetProportional(Celular_Inicial[3], 1);
	TextDrawSetShadow(Celular_Inicial[3], 0);

	//==========================================================================[ Telefone publico ]
	TelPubBase[0] = TextDrawCreate(501.199951, 293.040008, "_");
	TextDrawLetterSize(TelPubBase[0], 0.622398, 12.688006);
	TextDrawTextSize(TelPubBase[0], 598.000000, 0.000000);
	TextDrawAlignment(TelPubBase[0], 1);
	TextDrawColor(TelPubBase[0], -1);
	TextDrawUseBox(TelPubBase[0], 1);
	TextDrawBoxColor(TelPubBase[0], 0x888888FF);
	TextDrawSetShadow(TelPubBase[0], 0);
	TextDrawSetOutline(TelPubBase[0], 0);
	TextDrawBackgroundColor(TelPubBase[0], 255);
	TextDrawFont(TelPubBase[0], 1);
	TextDrawSetProportional(TelPubBase[0], 1);
	TextDrawSetShadow(TelPubBase[0], 0);

	TelPubBase[1] = TextDrawCreate(505.900177, 297.519958, "_");
	TextDrawLetterSize(TelPubBase[1], 0.403200, 1.263998);
	TextDrawTextSize(TelPubBase[1], 594.158813, 0.000000);
	TextDrawAlignment(TelPubBase[1], 1);
	TextDrawColor(TelPubBase[1], 255);
	TextDrawUseBox(TelPubBase[1], 1);
	TextDrawBoxColor(TelPubBase[1], 0xCCCCCCFF);
	TextDrawSetShadow(TelPubBase[1], 0);
	TextDrawSetOutline(TelPubBase[1], 0);
	TextDrawBackgroundColor(TelPubBase[1], 255);
	TextDrawFont(TelPubBase[1], 2);
	TextDrawSetProportional(TelPubBase[1], 1);
	TextDrawSetShadow(TelPubBase[1], 0);

	TelPubBase[2] = TextDrawCreate(499.899932, 317.733459, "Anuncie_aqui");
	TextDrawLetterSize(TelPubBase[2], 0.25000, 0.600000);
	TextDrawTextSize(TelPubBase[2], 599.991699, 0.200000);
	TextDrawAlignment(TelPubBase[2], 1);
	TextDrawColor(TelPubBase[2], -1);
	TextDrawUseBox(TelPubBase[2], 1);
	TextDrawBoxColor(TelPubBase[2], 0x1C8FBEFF);
	TextDrawSetShadow(TelPubBase[2], 0);
	TextDrawSetOutline(TelPubBase[2], 0);
	TextDrawBackgroundColor(TelPubBase[2], 255);
	TextDrawFont(TelPubBase[2], 1);
	TextDrawSetProportional(TelPubBase[2], 1);
	TextDrawSetShadow(TelPubBase[2], 0);

	TelPubBase[3] = TextDrawCreate(549.599853, 400.560180, "RJ_Telefonica");
	TextDrawLetterSize(TelPubBase[3], 0.150000, 1.000000);
	TextDrawAlignment(TelPubBase[3], 2);
	TextDrawColor(TelPubBase[3], 0xB5B5B5FF);
	TextDrawSetShadow(TelPubBase[3], 0);
	TextDrawSetOutline(TelPubBase[3], 0);
	TextDrawBackgroundColor(TelPubBase[3], 255);
	TextDrawFont(TelPubBase[3], 2);
	TextDrawSetProportional(TelPubBase[3], 1);
	TextDrawSetShadow(TelPubBase[3], 0);

	TelPubBase[4] = TextDrawCreate(590.899536, 297.326782, "<");
	TextDrawLetterSize(TelPubBase[4], 0.339999, 1.295733);
	TextDrawTextSize(TelPubBase[4], 18.309998, 7.000000);
	TextDrawAlignment(TelPubBase[4], 2);
	TextDrawColor(TelPubBase[4], -1);
	TextDrawUseBox(TelPubBase[4], 1);
	TextDrawBoxColor(TelPubBase[4], 0x555555FF);
	TextDrawSetShadow(TelPubBase[4], 0);
	TextDrawSetOutline(TelPubBase[4], 0);
	TextDrawBackgroundColor(TelPubBase[4], 255);
	TextDrawFont(TelPubBase[4], 1);
	TextDrawSetProportional(TelPubBase[4], 1);
	TextDrawSetShadow(TelPubBase[4], 0);
	TextDrawSetSelectable(TelPubBase[4], true);

	TelPubBase[5] = TextDrawCreate(510.800048, 333.360015, "_");
	TextDrawLetterSize(TelPubBase[5], 0.391199, 7.155199);
	TextDrawTextSize(TelPubBase[5], 588.000000, 0.000000);
	TextDrawAlignment(TelPubBase[5], 1);
	TextDrawColor(TelPubBase[5], -1);
	TextDrawUseBox(TelPubBase[5], 1);
	TextDrawBoxColor(TelPubBase[5], 0xCACACAFF);
	TextDrawSetShadow(TelPubBase[5], 0);
	TextDrawSetOutline(TelPubBase[5], 0);
	TextDrawBackgroundColor(TelPubBase[5], 255);
	TextDrawFont(TelPubBase[5], 1);
	TextDrawSetProportional(TelPubBase[5], 1);
	TextDrawSetShadow(TelPubBase[5], 0);

	TelPubBase[6] = TextDrawCreate(518.000061, 335.153350, "7");
	TextDrawLetterSize(TelPubBase[6], 0.400800, 1.156266);
	TextDrawTextSize(TelPubBase[6], 18.000000, 11.000000);
	TextDrawAlignment(TelPubBase[6], 2);
	TextDrawColor(TelPubBase[6], 0xFFFFFFFF);
	TextDrawUseBox(TelPubBase[6], 1);
	TextDrawBoxColor(TelPubBase[6], 0x555555FF);
	TextDrawSetShadow(TelPubBase[6], 0);
	TextDrawSetOutline(TelPubBase[6], 0);
	TextDrawBackgroundColor(TelPubBase[6], 255);
	TextDrawFont(TelPubBase[6], 3);
	TextDrawSetProportional(TelPubBase[6], 1);
	TextDrawSetShadow(TelPubBase[6], 0);
	TextDrawSetSelectable(TelPubBase[6], true);

	TelPubBase[7] = TextDrawCreate(537.499511, 335.153350, "8");
	TextDrawLetterSize(TelPubBase[7], 0.400800, 1.156266);
	TextDrawTextSize(TelPubBase[7], 18.000000, 11.000000);
	TextDrawAlignment(TelPubBase[7], 2);
	TextDrawColor(TelPubBase[7], 0xFFFFFFFF);
	TextDrawUseBox(TelPubBase[7], 1);
	TextDrawBoxColor(TelPubBase[7], 0x555555FF);
	TextDrawSetShadow(TelPubBase[7], 0);
	TextDrawSetOutline(TelPubBase[7], 0);
	TextDrawBackgroundColor(TelPubBase[7], 255);
	TextDrawFont(TelPubBase[7], 3);
	TextDrawSetProportional(TelPubBase[7], 1);
	TextDrawSetShadow(TelPubBase[7], 0);
	TextDrawSetSelectable(TelPubBase[7], true);

	TelPubBase[8] = TextDrawCreate(555.999389, 334.953338, "9");
	TextDrawLetterSize(TelPubBase[8], 0.400800, 1.156266);
	TextDrawTextSize(TelPubBase[8], 18.000000, 11.000000);
	TextDrawAlignment(TelPubBase[8], 2);
	TextDrawColor(TelPubBase[8], 0xFFFFFFFF);
	TextDrawUseBox(TelPubBase[8], 1);
	TextDrawBoxColor(TelPubBase[8], 0x555555FF);
	TextDrawSetShadow(TelPubBase[8], 0);
	TextDrawSetOutline(TelPubBase[8], 0);
	TextDrawBackgroundColor(TelPubBase[8], 255);
	TextDrawFont(TelPubBase[8], 3);
	TextDrawSetProportional(TelPubBase[8], 1);
	TextDrawSetShadow(TelPubBase[8], 0);
	TextDrawSetSelectable(TelPubBase[8], true);

	TelPubBase[9] = TextDrawCreate(518.199462, 351.726745, "4");
	TextDrawLetterSize(TelPubBase[9], 0.400800, 1.156266);
	TextDrawTextSize(TelPubBase[9], 18.000000, 11.000000);
	TextDrawAlignment(TelPubBase[9], 2);
	TextDrawColor(TelPubBase[9], 0xFFFFFFFF);
	TextDrawUseBox(TelPubBase[9], 1);
	TextDrawBoxColor(TelPubBase[9], 0x555555FF);
	TextDrawSetShadow(TelPubBase[9], 0);
	TextDrawSetOutline(TelPubBase[9], 0);
	TextDrawBackgroundColor(TelPubBase[9], 255);
	TextDrawFont(TelPubBase[9], 3);
	TextDrawSetProportional(TelPubBase[9], 1);
	TextDrawSetShadow(TelPubBase[9], 0);
	TextDrawSetSelectable(TelPubBase[9], true);

	TelPubBase[10] = TextDrawCreate(537.299316, 351.726745, "5");
	TextDrawLetterSize(TelPubBase[10], 0.400800, 1.156266);
	TextDrawTextSize(TelPubBase[10], 18.000000, 11.000000);
	TextDrawAlignment(TelPubBase[10], 2);
	TextDrawColor(TelPubBase[10], 0xFFFFFFFF);
	TextDrawUseBox(TelPubBase[10], 1);
	TextDrawBoxColor(TelPubBase[10], 0x555555FF);
	TextDrawSetShadow(TelPubBase[10], 0);
	TextDrawSetOutline(TelPubBase[10], 0);
	TextDrawBackgroundColor(TelPubBase[10], 255);
	TextDrawFont(TelPubBase[10], 3);
	TextDrawSetProportional(TelPubBase[10], 1);
	TextDrawSetShadow(TelPubBase[10], 0);
	TextDrawSetSelectable(TelPubBase[10], true);

	TelPubBase[11] = TextDrawCreate(555.999145, 351.726745, "6");
	TextDrawLetterSize(TelPubBase[11], 0.400800, 1.156266);
	TextDrawTextSize(TelPubBase[11], 18.000000, 11.000000);
	TextDrawAlignment(TelPubBase[11], 2);
	TextDrawColor(TelPubBase[11], 0xFFFFFFFF);
	TextDrawUseBox(TelPubBase[11], 1);
	TextDrawBoxColor(TelPubBase[11], 0x555555FF);
	TextDrawSetShadow(TelPubBase[11], 0);
	TextDrawSetOutline(TelPubBase[11], 0);
	TextDrawBackgroundColor(TelPubBase[11], 255);
	TextDrawFont(TelPubBase[11], 3);
	TextDrawSetProportional(TelPubBase[11], 1);
	TextDrawSetShadow(TelPubBase[11], 0);
	TextDrawSetSelectable(TelPubBase[11], true);

	TelPubBase[12] = TextDrawCreate(518.099304, 368.506896, "1");
	TextDrawLetterSize(TelPubBase[12], 0.400800, 1.156266);
	TextDrawTextSize(TelPubBase[12], 18.000000, 11.000000);
	TextDrawAlignment(TelPubBase[12], 2);
	TextDrawColor(TelPubBase[12], 0xFFFFFFFF);
	TextDrawUseBox(TelPubBase[12], 1);
	TextDrawBoxColor(TelPubBase[12], 0x555555FF);
	TextDrawSetShadow(TelPubBase[12], 0);
	TextDrawSetOutline(TelPubBase[12], 0);
	TextDrawBackgroundColor(TelPubBase[12], 255);
	TextDrawFont(TelPubBase[12], 3);
	TextDrawSetProportional(TelPubBase[12], 1);
	TextDrawSetShadow(TelPubBase[12], 0);
	TextDrawSetSelectable(TelPubBase[12], true);

	TelPubBase[13] = TextDrawCreate(537.199035, 368.206878, "2");
	TextDrawLetterSize(TelPubBase[13], 0.400800, 1.156266);
	TextDrawTextSize(TelPubBase[13], 18.000000, 11.000000);
	TextDrawAlignment(TelPubBase[13], 2);
	TextDrawColor(TelPubBase[13], 0xFFFFFFFF);
	TextDrawUseBox(TelPubBase[13], 1);
	TextDrawBoxColor(TelPubBase[13], 0x555555FF);
	TextDrawSetShadow(TelPubBase[13], 0);
	TextDrawSetOutline(TelPubBase[13], 0);
	TextDrawBackgroundColor(TelPubBase[13], 255);
	TextDrawFont(TelPubBase[13], 3);
	TextDrawSetProportional(TelPubBase[13], 1);
	TextDrawSetShadow(TelPubBase[13], 0);
	TextDrawSetSelectable(TelPubBase[13], true);

	TelPubBase[14] = TextDrawCreate(556.098815, 368.506896, "3");
	TextDrawLetterSize(TelPubBase[14], 0.400800, 1.156266);
	TextDrawTextSize(TelPubBase[14], 18.000000, 11.000000);
	TextDrawAlignment(TelPubBase[14], 2);
	TextDrawColor(TelPubBase[14], 0xFFFFFFFF);
	TextDrawUseBox(TelPubBase[14], 1);
	TextDrawBoxColor(TelPubBase[14], 0x555555FF);
	TextDrawSetShadow(TelPubBase[14], 0);
	TextDrawSetOutline(TelPubBase[14], 0);
	TextDrawBackgroundColor(TelPubBase[14], 255);
	TextDrawFont(TelPubBase[14], 3);
	TextDrawSetProportional(TelPubBase[14], 1);
	TextDrawSetShadow(TelPubBase[14], 0);
	TextDrawSetSelectable(TelPubBase[14], true);

	TelPubBase[15] = TextDrawCreate(517.999084, 385.880401, "0");
	TextDrawLetterSize(TelPubBase[15], 0.400800, 1.156266);
	TextDrawTextSize(TelPubBase[15], 18.000000, 11.000000);
	TextDrawAlignment(TelPubBase[15], 2);
	TextDrawColor(TelPubBase[15], 0xFFFFFFFF);
	TextDrawUseBox(TelPubBase[15], 1);
	TextDrawBoxColor(TelPubBase[15], 0x555555FF);
	TextDrawSetShadow(TelPubBase[15], 0);
	TextDrawSetOutline(TelPubBase[15], 0);
	TextDrawBackgroundColor(TelPubBase[15], 255);
	TextDrawFont(TelPubBase[15], 3);
	TextDrawSetProportional(TelPubBase[15], 1);
	TextDrawSetShadow(TelPubBase[15], 0);
	TextDrawSetSelectable(TelPubBase[15], true);

	TelPubBase[16] = TextDrawCreate(573.200073, 339.333404, "_");
	TextDrawLetterSize(TelPubBase[16], 0.400000, 4.168532);
	TextDrawTextSize(TelPubBase[16], 579.000000, 0.000000);
	TextDrawAlignment(TelPubBase[16], 1);
	TextDrawColor(TelPubBase[16], -1);
	TextDrawUseBox(TelPubBase[16], 1);
	TextDrawBoxColor(TelPubBase[16], 255);
	TextDrawSetShadow(TelPubBase[16], 0);
	TextDrawSetOutline(TelPubBase[16], 0);
	TextDrawBackgroundColor(TelPubBase[16], 255);
	TextDrawFont(TelPubBase[16], 1);
	TextDrawSetProportional(TelPubBase[16], 1);
	TextDrawSetShadow(TelPubBase[16], 0);
}

public CriarTextsCelularP(playerid)
{
    	Celular_PlayerV[playerid][0] = CreatePlayerTextDraw(playerid, 599.599853, 330.6, "."); //Ponto de Sinal
		PlayerTextDrawLetterSize(playerid, Celular_PlayerV[playerid][0], 0.800000, 2.000000);
		PlayerTextDrawAlignment(playerid, Celular_PlayerV[playerid][0], 1);
		PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][0], -1);
		PlayerTextDrawSetShadow(playerid, Celular_PlayerV[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, Celular_PlayerV[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, Celular_PlayerV[playerid][0], 255);
		PlayerTextDrawFont(playerid, Celular_PlayerV[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, Celular_PlayerV[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, Celular_PlayerV[playerid][0], 0);

		Celular_PlayerV[playerid][1] = CreatePlayerTextDraw(playerid, 562.199829, 370.6, "Traficante~n~(589789)");
		PlayerTextDrawLetterSize(playerid, Celular_PlayerV[playerid][1], 0.349999, 0.850000);
		PlayerTextDrawAlignment(playerid, Celular_PlayerV[playerid][1], 2);
		PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][1], -2139062017);
		PlayerTextDrawSetShadow(playerid, Celular_PlayerV[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, Celular_PlayerV[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, Celular_PlayerV[playerid][1], 255);
		PlayerTextDrawFont(playerid, Celular_PlayerV[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, Celular_PlayerV[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, Celular_PlayerV[playerid][1], 0);

		Celular_PlayerV[playerid][2] = CreatePlayerTextDraw(playerid, 526.399902, 355.3, "Contato_1");
		PlayerTextDrawLetterSize(playerid, Celular_PlayerV[playerid][2], 0.265598, 0.830932);
		PlayerTextDrawTextSize(playerid, Celular_PlayerV[playerid][2], 600.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, Celular_PlayerV[playerid][2], 1);
		PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][2], 255);
		PlayerTextDrawUseBox(playerid, Celular_PlayerV[playerid][2], 1);
		PlayerTextDrawBoxColor(playerid, Celular_PlayerV[playerid][2], -2139062017);
		PlayerTextDrawSetShadow(playerid, Celular_PlayerV[playerid][2], 0);
		PlayerTextDrawSetOutline(playerid, Celular_PlayerV[playerid][2], 0);
		PlayerTextDrawBackgroundColor(playerid, Celular_PlayerV[playerid][2], 255);
		PlayerTextDrawFont(playerid, Celular_PlayerV[playerid][2], 1);
		PlayerTextDrawSetProportional(playerid, Celular_PlayerV[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid, Celular_PlayerV[playerid][2], 0);
		PlayerTextDrawSetSelectable(playerid, Celular_PlayerV[playerid][2], true);

		Celular_PlayerV[playerid][3] = CreatePlayerTextDraw(playerid, 526.399902, 369.7, "Contato_2");
		PlayerTextDrawLetterSize(playerid, Celular_PlayerV[playerid][3], 0.265598, 0.830932);
		PlayerTextDrawTextSize(playerid, Celular_PlayerV[playerid][3], 600.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, Celular_PlayerV[playerid][3], 1);
		PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][3], 255);
		PlayerTextDrawUseBox(playerid, Celular_PlayerV[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid, Celular_PlayerV[playerid][3], -2139062017);
		PlayerTextDrawSetShadow(playerid, Celular_PlayerV[playerid][3], 0);
		PlayerTextDrawSetOutline(playerid, Celular_PlayerV[playerid][3], 0);
		PlayerTextDrawBackgroundColor(playerid, Celular_PlayerV[playerid][3], 255);
		PlayerTextDrawFont(playerid, Celular_PlayerV[playerid][3], 1);
		PlayerTextDrawSetProportional(playerid, Celular_PlayerV[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid, Celular_PlayerV[playerid][3], 0);
		PlayerTextDrawSetSelectable(playerid, Celular_PlayerV[playerid][3], true);

		Celular_PlayerV[playerid][4] = CreatePlayerTextDraw(playerid, 526.399902, 383.9, "Contato_3");
		PlayerTextDrawLetterSize(playerid, Celular_PlayerV[playerid][4], 0.265598, 0.830932);
		PlayerTextDrawTextSize(playerid, Celular_PlayerV[playerid][4], 600.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, Celular_PlayerV[playerid][4], 1);
		PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][4], 255);
		PlayerTextDrawUseBox(playerid, Celular_PlayerV[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid, Celular_PlayerV[playerid][4], -2139062017);
		PlayerTextDrawSetShadow(playerid, Celular_PlayerV[playerid][4], 0);
		PlayerTextDrawSetOutline(playerid, Celular_PlayerV[playerid][4], 0);
		PlayerTextDrawBackgroundColor(playerid, Celular_PlayerV[playerid][4], 255);
		PlayerTextDrawFont(playerid, Celular_PlayerV[playerid][4], 1);
		PlayerTextDrawSetProportional(playerid, Celular_PlayerV[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid, Celular_PlayerV[playerid][4], 0);
		PlayerTextDrawSetSelectable(playerid, Celular_PlayerV[playerid][4], true);

		Celular_PlayerV[playerid][5] = CreatePlayerTextDraw(playerid, 526.399902, 398.1, "Contato_4");
		PlayerTextDrawLetterSize(playerid, Celular_PlayerV[playerid][5], 0.265598, 0.830932);
		PlayerTextDrawTextSize(playerid, Celular_PlayerV[playerid][5], 600.000000, 10.000000);
		PlayerTextDrawAlignment(playerid, Celular_PlayerV[playerid][5], 1);
		PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][5], 255);
		PlayerTextDrawUseBox(playerid, Celular_PlayerV[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid, Celular_PlayerV[playerid][5], -2139062017);
		PlayerTextDrawSetShadow(playerid, Celular_PlayerV[playerid][5], 0);
		PlayerTextDrawSetOutline(playerid, Celular_PlayerV[playerid][5], 0);
		PlayerTextDrawBackgroundColor(playerid, Celular_PlayerV[playerid][5], 255);
		PlayerTextDrawFont(playerid, Celular_PlayerV[playerid][5], 1);
		PlayerTextDrawSetProportional(playerid, Celular_PlayerV[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid, Celular_PlayerV[playerid][5], 0);
		PlayerTextDrawSetSelectable(playerid, Celular_PlayerV[playerid][5], true);

		TelPub[playerid][0] = CreatePlayerTextDraw(playerid, 557.398071, 385.880401, "LIGAR");
		PlayerTextDrawLetterSize(playerid, TelPub[playerid][0], 0.400800, 1.156266);
		PlayerTextDrawTextSize(playerid, TelPub[playerid][0], 8.000000, 52.000000);
		PlayerTextDrawAlignment(playerid, TelPub[playerid][0], 2);
		PlayerTextDrawColor(playerid, TelPub[playerid][0], 255);
		PlayerTextDrawUseBox(playerid, TelPub[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid, TelPub[playerid][0], 0x2F7543FF);
		PlayerTextDrawSetShadow(playerid, TelPub[playerid][0], 0);
		PlayerTextDrawSetOutline(playerid, TelPub[playerid][0], 0);
		PlayerTextDrawBackgroundColor(playerid, TelPub[playerid][0], 255);
		PlayerTextDrawFont(playerid, TelPub[playerid][0], 1);
		PlayerTextDrawSetProportional(playerid, TelPub[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid, TelPub[playerid][0], 0);
		PlayerTextDrawSetSelectable(playerid, TelPub[playerid][0], true);

		TelPub[playerid][1] = CreatePlayerTextDraw(playerid, 506.000000, 299.426910, "024-255-025");
		PlayerTextDrawLetterSize(playerid, TelPub[playerid][1], 0.300000, 1.000000);
		PlayerTextDrawAlignment(playerid, TelPub[playerid][1], 1);
		PlayerTextDrawColor(playerid, TelPub[playerid][1], 255);
		PlayerTextDrawSetShadow(playerid, TelPub[playerid][1], 0);
		PlayerTextDrawSetOutline(playerid, TelPub[playerid][1], 0);
		PlayerTextDrawBackgroundColor(playerid, TelPub[playerid][1], 255);
		PlayerTextDrawFont(playerid, TelPub[playerid][1], 1);
		PlayerTextDrawSetProportional(playerid, TelPub[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid, TelPub[playerid][1], 0);
}

CMD:planos(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(CelularData[playerid][celNumero] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um celular.");
	Dialog_Show(playerid, DIALOG_CEL_PLANOS, DIALOG_STYLE_LIST, "RJ Telefonica - Planos de cobrança", "Pacote Regular\nPacote Básico\nPacote Premium Completo\nPacote Premium SMS\nPacote Premium Fala Mais", "Ver Infos", "Fechar");
	return 1;
}

Dialog:DIALOG_CEL_PLANOS(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new Infos[825];
	    switch(listitem)
	    {
	        case 0://Pacote Regular
	        {
	            format(Infos, sizeof(Infos), "No pacote regular você paga apenas pelo que usar!\n\n \
				É o famoso pós-pago, usou, pagou.\n\n \
				Você pagará as seguintes taxas de uso:\n \
				R$0,40 por segundo de sligação.\n \
				R$8 por SMS enviado.\n\n \
				- ATENÇÃO: Ao trocar de plano você assina um contrato de 6 PayDay's.");
	            Dialog_Show(playerid, DIALOG_CEL_PLANO1, DIALOG_STYLE_MSGBOX, "RJ Telefonica - Pacote regular", Infos, "Assinar", "Voltar");
	        }
	        case 1://Pacote Básico
	        {
	            format(Infos, sizeof(Infos), "No pacote básico você tem direito a alguns serviços, pagando um valor fixo por PayDay.\n\n \
				É um pacote Pré-Pago.\n\n \
				Você terá os seguintes beneficios:\n \
				40 minutos de ligações.\n \
				30 SMS's.\n \
				Valor: R$100 por PayDay.\n\n \
				- AVISO: Caso você utilizar mais minutos ou SMS's do que o assinado, você pagará a mais de acordo com o plano regular.\n \
				- ATENÇÃO: Ao trocar de plano você assina um contrato de 6 PayDay's.");
	            Dialog_Show(playerid, DIALOG_CEL_PLANO2, DIALOG_STYLE_MSGBOX,"RJ Telefonica - Pacote básico", Infos, "Assinar", "Voltar");
	        }
	        case 2://Pacote Premium Completo
	        {
	            format(Infos, sizeof(Infos), "No pacote premium completo você tem direito a alguns serviços, pagando um valor fixo por PayDay.\n\n \
				É um pacote Pré-Pago.\n\n \
				Você terá os seguintes beneficios:\n \
				120 minutos de ligações.\n \
				60 SMS's.\n \
				Valor: R$200 por PayDay.\n\n \
				- AVISO: Caso você utilizar mais minutos ou SMS's do que o assinado, você pagará a mais de acordo com o plano regular.\n \
				- ATENÇÃO: Ao trocar de plano você assina um contrato de 6 PayDay's.");
	            Dialog_Show(playerid, DIALOG_CEL_PLANO3, DIALOG_STYLE_MSGBOX, "RJ Telefonica - Pacote premium completo", Infos, "Assinar", "Voltar");
	        }
	        case 3://Pacote Premium SMS
	        {
	            format(Infos, sizeof(Infos), "No pacote premium SMS você tem direito a alguns serviços, pagando um valor fixo por PayDay.\n\n \
				É um pacote Pré-Pago.\n\n \
				Você terá os seguintes beneficios:\n \
				30 minutos de ligações.\n \
				100 SMS's.\n \
				Valor: R$250 por PayDay.\n\n \
				- AVISO: Caso você utilizar mais minutos ou SMS's do que o assinado, você pagará a mais de acordo com o plano regular.\n \
				- ATENÇÃO: Ao trocar de plano você assina um contrato de 6 PayDay's.");
	            Dialog_Show(playerid, DIALOG_CEL_PLANO4, DIALOG_STYLE_MSGBOX, "RJ Telefonica - Pacote premium SMS", Infos, "Assinar", "Voltar");
	        }
	        case 4://Pacote Premium Fala Mais
	        {
	            format(Infos, sizeof(Infos), "No pacote premium Fala Mais você tem direito a alguns serviços, pagando um valor fixo por PayDay.\n\n \
				É um pacote Pré-Pago.\n\n \
				Você terá os seguintes beneficios:\n \
				200 minutos de ligações.\n \
				30 SMS's.\n \
				Valor: R$350 por PayDay.\n\n \
				- AVISO: Caso você utilizar mais minutos ou SMS's do que o assinado, você pagará a mais de acordo com o plano regular.\n \
				- ATENÇÃO: Ao trocar de plano você assina um contrato de 6 PayDay's.");
	            Dialog_Show(playerid, DIALOG_CEL_PLANO5, DIALOG_STYLE_MSGBOX, "RJ Telefonica - Pacote premium Fala Mais", Infos, "Assinar", "Voltar");
	        }
		}
	}
	return 1;
}

Dialog:DIALOG_CEL_PLANO1(playerid, response, listitem, inputtext[])
{
    if(!response) return Dialog_Show(playerid, DIALOG_CEL_PLANOS, DIALOG_STYLE_INPUT, "RJ Telefonica - Planos de cobrança", "Pacote Regular\nPacote Básico\nPacote Premium Completo\nPacote Premium SMS\nPacote Premium Fala Mais", "Ver Infos", "Fechar");
	else return ComprandoPlano(playerid, 0);
}
Dialog:DIALOG_CEL_PLANO2(playerid, response, listitem, inputtext[])
{
    if(!response) return Dialog_Show(playerid, DIALOG_CEL_PLANOS, DIALOG_STYLE_INPUT, "RJ Telefonica - Planos de cobrança", "Pacote Regular\nPacote Básico\nPacote Premium Completo\nPacote Premium SMS\nPacote Premium Fala Mais", "Ver Infos", "Fechar");
	else return ComprandoPlano(playerid, 1);
}
Dialog:DIALOG_CEL_PLANO3(playerid, response, listitem, inputtext[])
{
    if(!response) return Dialog_Show(playerid, DIALOG_CEL_PLANOS, DIALOG_STYLE_INPUT, "RJ Telefonica - Planos de cobrança", "Pacote Regular\nPacote Básico\nPacote Premium Completo\nPacote Premium SMS\nPacote Premium Fala Mais", "Ver Infos", "Fechar");
	else return ComprandoPlano(playerid, 2);
}
Dialog:DIALOG_CEL_PLANO4(playerid, response, listitem, inputtext[])
{
    if(!response) return Dialog_Show(playerid, DIALOG_CEL_PLANOS, DIALOG_STYLE_INPUT, "RJ Telefonica - Planos de cobrança", "Pacote Regular\nPacote Básico\nPacote Premium Completo\nPacote Premium SMS\nPacote Premium Fala Mais", "Ver Infos", "Fechar");
	else return ComprandoPlano(playerid, 3);
}
Dialog:DIALOG_CEL_PLANO5(playerid, response, listitem, inputtext[])
{
    if(!response) return Dialog_Show(playerid, DIALOG_CEL_PLANOS, DIALOG_STYLE_INPUT, "RJ Telefonica - Planos de cobrança", "Pacote Regular\nPacote Básico\nPacote Premium Completo\nPacote Premium SMS\nPacote Premium Fala Mais", "Ver Infos", "Fechar");
	else return ComprandoPlano(playerid, 4);
}

public ComprandoPlano(playerid, plano)
{
    if(CelularData[playerid][celPlano] == plano) return SendClientMessage(playerid, COLOR_WHITE, "Você já tem este plano.");
    if(CelularData[playerid][celTPlano] > 0) return SendClientMessage(playerid, COLOR_WHITE, "Você ainda não pode mudar de plano.");


    CelularData[playerid][celPlano] = plano;
    CelularData[playerid][celTPlano] = 6;
	switch(plano)
	{
	    case 0:
	    {
	        CelularData[playerid][celMinutos] = 0;
	        CelularData[playerid][celSMSs] = 0;
	    }
	    case 1:
	    {
	        CelularData[playerid][celMinutos] = 40;
	        CelularData[playerid][celSMSs] = 30;
	    }
	    case 2:
	    {
	        CelularData[playerid][celMinutos] = 120;
	        CelularData[playerid][celSMSs] = 60;
	    }
	    case 3:
	    {
	        CelularData[playerid][celMinutos] = 30;
	        CelularData[playerid][celSMSs] = 100;
	    }
	    case 4:
	    {
	        CelularData[playerid][celMinutos] = 200;
	        CelularData[playerid][celSMSs] = 30;
	    }
	}

	return 1;
}

public GetPlayerMaxContatosCel(playerid)
{
	return 25;
}

public GetPlayerMaxSMSCel(playerid)
{
	return 25;
}

public NavegandoCelular(playerid,parte)
{
	switch(parte)
	{
	    case 1: //Tela Inicial
	    {
	        CelularData[playerid][NavegandoCel] = 1;

	        for(new i = 0; i < 4; i++)
			{
			    TextDrawShowForPlayer(playerid,Celular_Inicial[i]);
			}
	    }
	    case 2: //Menu Celular
	    {
	        CelularData[playerid][NavegandoCel] = 2;
	        CelularData[playerid][MenuContatos] = 0;

	        for(new i = 2; i < 6; i++)
			{
  				PlayerTextDrawBoxColor(playerid, Celular_PlayerV[playerid][i], -2139062017);
				PlayerTextDrawBackgroundColor(playerid, Celular_PlayerV[playerid][i], 255);
				PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][i], 0x111111FF);

				PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][i]);
			}
            PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][1]);

	        for(new i = 0; i < 4; i++)
			{
			    TextDrawHideForPlayer(playerid,Celular_Inicial[i]);
			}

			SelecionarNovaOpcao(playerid,CelularData[playerid][MenuSelecionado]+1,2);
		    CelularData[playerid][MenuSelecionado] = 1;

			PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][2],"Contatos");
			PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][3],"Mensagens");
			PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Ajustes");

			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][2]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][3]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][4]);
			PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][5]);
	    }
		case 3://Ajustes
		{
		    CelularData[playerid][NavegandoCel] = 3;

		    new str_numero[24];
		    format(str_numero, 24, "Num:_%d",CelularData[playerid][celNumero]);
		    PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][2], str_numero);

			switch(CelularData[playerid][celModo])
			{
				case 1: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][3],"Modo:_Normal");
				case 2:
				{
				    PararToqueDeCelular(playerid);
					PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][3],"Modo:_Silencioso");
				}
				case 3:
				{
				    PararToqueDeCelular(playerid);
					PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][3],"Modo:_Aviao");
				}
				default:
				{
				    PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][3],"Modo:_Normal");
				    CelularData[playerid][celModo] = 1;
				}
			}
			switch(CelularData[playerid][celRingTone])
			{
				case 1: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_OTB");
				case 2: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Go_track"); // PlayerPlaySound(playerid,1062,0.0,0.0,0.0);
				case 3: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Dual_track"); // PlayerPlaySound(playerid,1068,0.0,0.0,0.0);
				case 4: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Bee_track"); // 	PlayerPlaySound(playerid,1076,0.0,0.0,0.0);
				case 5: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Award"); //		PlayerPlaySound(playerid,1097,0.0,0.0,0.0);
				case 6: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Rock"); //		PlayerPlaySound(playerid,1183,0.0,0.0,0.0);
				case 7: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Emocional"); //	PlayerPlaySound(playerid,1185,0.0,0.0,0.0);
				case 8: PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Orquestral"); //	PlayerPlaySound(playerid,1187,0.0,0.0,0.0);
				default:
				{
				    PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][4],"Toque:_Classico");
				    CelularData[playerid][celRingTone] = 1;
				}
			}
			PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][5],"Ouvir_toque");

			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][2]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][3]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][4]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][5]);
		}
		case 4: //Contatos
		{
		    CelularData[playerid][NavegandoCel] = 4;
		    new	PaginaContatos = CelularData[playerid][MenuContatos],
		        MaxPagina = PaginaContatos+4,
		        CountMenu = 2;

            PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][1]);
            PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][2]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][3]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][4]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][5]);

			for(new i = PaginaContatos; i < MaxPagina; i++)
			{
		        PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][CountMenu], ContatoInfo[playerid][i][ContatoNome]);
		        CountMenu++;
		    }
		}
		case 5:
		{
		    CelularData[playerid][NavegandoCel] = 5;
		    new	PaginaContatos = CelularData[playerid][MenuContatos],
		        MaxPagina = PaginaContatos+4,
		        CountMenu = 2;

            PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][1]);
            PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][2]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][3]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][4]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][5]);

			new StrMsg[24];
			for(new i = PaginaContatos; i < MaxPagina; i++)
			{
			    format(StrMsg, 14, "");
                if(MensagensInfo[playerid][i][smsAtivo] == 1)
                {
                    if(CountMenu == 2 && MensagensInfo[playerid][i][smsLido] == 2)
                    {
		 				format(StrMsg, 14, "%s",MensagensInfo[playerid][i][smsMensagemLimpa]);
						strcat(StrMsg, "...");
						MensagensInfo[playerid][i][smsLido] = 1;
						PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][2], StrMsg);
						CountMenu++;
                    }
                    else
                    {
				    	if(MensagensInfo[playerid][i][smsLido] == 2) format(StrMsg, 14, ">_%s",MensagensInfo[playerid][i][smsMensagemLimpa]);
						else format(StrMsg, 14, "%s",MensagensInfo[playerid][i][smsMensagemLimpa]);
						strcat(StrMsg, "...");
	                    //printf("\n\n%s\n",StrMsg);
				        PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][CountMenu], StrMsg);
				        CountMenu++;
					}
				}
				else
				{
                    PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][CountMenu]);
			        CountMenu++;
				}
		    }

		    new totalsms = 0, totalnaolidos = 0;
			for(new i = 0; i < 40; i++)
			{
				if(MensagensInfo[playerid][i][smsAtivo] == 1) totalsms++;
				if(MensagensInfo[playerid][i][smsLido] == 2) totalnaolidos++;
			}
			if(totalnaolidos == 0) TextDrawHideForPlayer(playerid,Celular_Base[13]);

		    if(totalsms == 0)
		    {
		        PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][1], 0x111111FF);
		        PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], "Nenhum_sms~n~encontrado");
		        PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][1]);
		    }
		}
		case 6: //Voltar para a Tela Inicial
		{
		    CelularData[playerid][NavegandoCel] = 1;

            PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][1]);
            PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][2]);
			PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][3]);
			PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][4]);
			PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][5]);

	        for(new i = 0; i < 4; i++)
			{
			    TextDrawShowForPlayer(playerid,Celular_Inicial[i]);
			}
		}
	}
	return 1;
}

public TelPubNovoNumero(playerid, num)
{
	if(num != 999)
	{
	    format(CelularData[playerid][NumOrelhao], 13, "%s%d",CelularData[playerid][NumOrelhao],num);
		PlayerTextDrawSetString(playerid,TelPub[playerid][1], CelularData[playerid][NumOrelhao]);
	}
	else
	{
	    new tamanho = strlen(CelularData[playerid][NumOrelhao]);
        strdel(CelularData[playerid][NumOrelhao], tamanho-1, tamanho);
        PlayerTextDrawSetString(playerid,TelPub[playerid][1], CelularData[playerid][NumOrelhao]);
	}
}

public SelecionarNovaOpcao(playerid,antigoSelect,MenuSelect)
{
	if((antigoSelect > 1 && antigoSelect < 6) && (MenuSelect > 1 && MenuSelect < 6))
	{
		if(antigoSelect != 0)
		{
		    PlayerTextDrawBoxColor(playerid, Celular_PlayerV[playerid][antigoSelect], -2139062017);
			PlayerTextDrawBackgroundColor(playerid, Celular_PlayerV[playerid][antigoSelect], 255);
			PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][antigoSelect], 0x111111FF);
			PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][antigoSelect]);
			PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][antigoSelect]);
		}

		PlayerTextDrawBoxColor(playerid, Celular_PlayerV[playerid][MenuSelect], 0x222222FF);
		PlayerTextDrawBackgroundColor(playerid, Celular_PlayerV[playerid][MenuSelect], 0x222222FF);
		PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][MenuSelect], 0x989898FF);
		PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][MenuSelect]);

		if(CelularData[playerid][NavegandoCel] == 2)
		{
		    PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][2]);
		    PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][3]);
		    PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][4]);
		    PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][5]);
		}
		else PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][MenuSelect]);
	}
}

public MostrarCelular(playerid)
{
    PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][0]);

 	switch(CelularData[playerid][celModelo])
	{
  		case 330: TextDrawShowForPlayer(playerid,Celular_Fundo[0]);
		case 18865: TextDrawShowForPlayer(playerid,Celular_Fundo[1]);
		case 18866: TextDrawShowForPlayer(playerid,Celular_Fundo[2]);
		case 18867: TextDrawShowForPlayer(playerid,Celular_Fundo[3]);
		case 18868: TextDrawShowForPlayer(playerid,Celular_Fundo[4]);
		case 18869: TextDrawShowForPlayer(playerid,Celular_Fundo[5]);
		case 18870: TextDrawShowForPlayer(playerid,Celular_Fundo[6]);
		case 18871: TextDrawShowForPlayer(playerid,Celular_Fundo[7]);
		case 18872: TextDrawShowForPlayer(playerid,Celular_Fundo[8]);
		case 18873: TextDrawShowForPlayer(playerid,Celular_Fundo[9]);
		case 18874: TextDrawShowForPlayer(playerid,Celular_Fundo[10]);
		case 19513: TextDrawShowForPlayer(playerid,Celular_Fundo[11]);
	}

    for(new i = 0; i < 11; i++)
	{
	    TextDrawShowForPlayer(playerid, Celular_Base[i]);
	}

    if(CelularData[playerid][celModelo] == 330) SetPlayerAttachedObject(playerid, 4, CelularData[playerid][celModelo], 6);
	else SetPlayerAttachedObject(playerid, 4, CelularData[playerid][celModelo], 6, 0.089411, 0.020775, -0.016320, 279.668365, 359.140991, 169.287139, 1.000000, 1.000000, 1.000000);

	CelularData[playerid][CelularAberto] = 1;
	CelularData[playerid][MenuSelecionado] = 1;
	CelularData[playerid][MenuContatos] = 0;
	NavegandoCelular(playerid,1);
	return 1;
}

public SumirCelular(playerid)
{
    for(new i = 0; i < 6; i++)
	{
		PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][i]);
	}
	for(new i = 0; i < 4; i++)
	{
	    TextDrawHideForPlayer(playerid,Celular_Inicial[i]);
	}
    for(new i = 0; i < 16; i++)
	{
	    if(i != 13) TextDrawHideForPlayer(playerid,Celular_Base[i]);
	}

    switch(CelularData[playerid][celModelo])
	{
		case 330: TextDrawHideForPlayer(playerid,Celular_Fundo[0]);
		case 18865: TextDrawHideForPlayer(playerid,Celular_Fundo[1]);
		case 18866: TextDrawHideForPlayer(playerid,Celular_Fundo[2]);
		case 18867: TextDrawHideForPlayer(playerid,Celular_Fundo[3]);
		case 18868: TextDrawHideForPlayer(playerid,Celular_Fundo[4]);
		case 18869: TextDrawHideForPlayer(playerid,Celular_Fundo[5]);
		case 18870: TextDrawHideForPlayer(playerid,Celular_Fundo[6]);
		case 18871: TextDrawHideForPlayer(playerid,Celular_Fundo[7]);
		case 18872: TextDrawHideForPlayer(playerid,Celular_Fundo[8]);
		case 18873: TextDrawHideForPlayer(playerid,Celular_Fundo[9]);
		case 18874: TextDrawHideForPlayer(playerid,Celular_Fundo[10]);
		case 19513: TextDrawHideForPlayer(playerid,Celular_Fundo[11]);
	}
	RemovePlayerAttachedObject(playerid, 4);
	PararToqueDeCelular(playerid);
	CelularData[playerid][NavegandoCel] = 0;
	CelularData[playerid][CelularAberto] = 0;
	CancelSelectTextDraw(playerid);
	return 1;
}

CMD:vivavoz(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(CelularData[playerid][celNumero] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um celular.");
    if(CelularData[playerid][UsandoCelOrOre] != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar em uma chamada, utilizando seu celular para poder ativar o vivavoz.");
    if(PlayerInfo[playerid][pMorto] > 0)  return SendClientMessage(playerid, COLOR_LIGHTRED, "Você está muito ferido para isso.");

	switch(CelularData[playerid][VivaVoz])
 	{
 	    case 0:
 	    {
 	        CelularData[playerid][VivaVoz] = 1;
 	        SendClientMessage(playerid, COLOR_YELLOW, "Você ativou o vivavoz.");
 	    }
 	    case 1:
 	    {
 	        CelularData[playerid][VivaVoz] = 0;
 	        SendClientMessage(playerid, COLOR_YELLOW, "Você desativou o vivavoz.");
 	    }
	}
	return 1;
}
ALTCOMMAND:cel->celular;
CMD:celular(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(CelularData[playerid][celNumero] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um celular.");
    if(CelularData[playerid][OreID] != 0 || CelularData[playerid][EmLigacao] != 999 || CelularData[playerid][LigandoPara] != 999 || CelularData[playerid][LigandoParaNum] != 999 || CelularData[playerid][LigandoOrelhao] != 999 || CelularData[playerid][AtendeuOrelhao] != 999) return SendClientMessage(playerid, COLOR_WHITE, "Você não pode utilizar este comando em quanto estiver em uma chamada.");
    if(PlayerInfo[playerid][pMorto] > 0)  return SendClientMessage(playerid, COLOR_LIGHTRED, "Você está muito ferido para isso.");

	if(CelularData[playerid][CelularAberto] == 0)
	{
		MostrarCelular(playerid);
		SelectTextDraw(playerid, 0x72A9E8FF);
	}
	else
	{
	    SelectTextDraw(playerid, 0x72A9E8FF);
	}
	return 1;
}

public LerSMS(playerid, sms_id)
{
	new Titulo[56], Informacoes[1024];
	format(Titulo, 56, "SMS - #%d",sms_id+1);

	new stringfull[192],
 		lengths[96],
  		length2[96],
  		message[256],
  		messagestring[256];

	format(messagestring, 256, "");
   	strmid(stringfull, MensagensInfo[playerid][sms_id][smsMensagem], 0, 192);
    strmid(lengths, stringfull, 0, 96);
    strmid(length2, MensagensInfo[playerid][sms_id][smsMensagem], 95, 192);
    if(strlen(MensagensInfo[playerid][sms_id][smsMensagem]) > 96)
    {
     	format(message, 102, "%s\n", lengths);
      	strcat(messagestring, message);
      	format(message, 102, "%s", length2);
      	strcat(messagestring, message);
	}
 	else
  	{
     	format(messagestring, 192, "%s", MensagensInfo[playerid][sms_id][smsMensagem]);
	}

	CelularData[playerid][VendoContato] = sms_id;

	format(Informacoes, 1024, "{A9C4E4}SMS de:\t{7E98B6}555-%d \
	\n{A9C4E4}Recebido:\t{7E98B6}%s \n \
	\n{A9C4E4}Mensagem:\n{7E98B6}%s \
	\n\n",MensagensInfo[playerid][sms_id][smsPor],MensagensInfo[playerid][sms_id][smsData],messagestring);

	Dialog_Show(playerid, DIALOG_SMS_OPC, DIALOG_STYLE_MSGBOX, Titulo, Informacoes, "Opções", "Fechar");

	return 1;
}

Dialog:DIALOG_SMS_OPC(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new Titulo[40];
		format(Titulo, sizeof(Titulo), "SMS - #%d",CelularData[playerid][VendoContato]+1);

	    Dialog_Show(playerid, DIALOG_SMS_OPC1, DIALOG_STYLE_LIST, Titulo, "Responder\nEncaminhar\nDeletar", "Selecionar", "Fechar");
	}
	return 1;
}

Dialog:DIALOG_SMS_OPC1(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new Titulo[40];
	    switch(listitem)
	    {
			case 0:
			{
				format(Titulo, sizeof(Titulo), "SMS - #%d > Responder",CelularData[playerid][VendoContato]+1);
		    	Dialog_Show(playerid, DIALOG_CEL_RESP_SMS, DIALOG_STYLE_INPUT, Titulo, "Digite a mensagem a ser enviada.", "Responder", "Cancelar");
			}
			case 1:
			{
				format(Titulo, sizeof(Titulo), "SMS - #%d > Encaminhar",CelularData[playerid][VendoContato]+1);
		    	Dialog_Show(playerid, DIALOG_CEL_ENCA_SMS, DIALOG_STYLE_INPUT, Titulo, "Digite o numero ao qual você irá encaminhar.", "Encaminhar", "Cancelar");
			}
			case 2:
			{
			    format(Titulo, sizeof(Titulo), "SMS - #%d > Deletar",CelularData[playerid][VendoContato]+1);
		    	Dialog_Show(playerid, DIALOG_CEL_SMS_DEL, DIALOG_STYLE_MSGBOX, Titulo, "Você tem certeza que deseja excluir este SMS?", "Deletar", "Cancelar");
			}
		}
	}
	return 1;
}

Dialog:DIALOG_CEL_SMS_DEL(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
 		DeletandoSMS(playerid,CelularData[playerid][VendoContato]);
	}
	return 1;
}

Dialog:DIALOG_CEL_ENCA_SMS(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
	    new Titulo[40];
		format(Titulo, sizeof(Titulo), "SMS - #%d > Encaminhar",CelularData[playerid][VendoContato]+1);

		new novonumero = strval(inputtext);
		if(novonumero < 1000 || novonumero > 999999)
		{
			Dialog_Show(playerid, DIALOG_CEL_ENCA_SMS, DIALOG_STYLE_INPUT, Titulo, "Digite o numero ao qual você irá encaminhar.\n\nNumero inválido", "Encaminhar", "Cancelar");
			return 1;
		}
		CelularData[playerid][DelaySMS] = SetTimerEx("EnviarSMS", 6000, false, "dd", novonumero);
		SetPVarString(playerid, "SMSEnviado", MensagensInfo[playerid][CelularData[playerid][VendoContato]][smsMensagem]);
	}
	return 1;
}

Dialog:DIALOG_CEL_RESP_SMS(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
	    new Titulo[40];
		format(Titulo, sizeof(Titulo), "SMS - #%d > Responder",CelularData[playerid][VendoContato]+1);

		if(!strlen(inputtext)) return Dialog_Show(playerid, DIALOG_CEL_RESP_SMS, DIALOG_STYLE_INPUT, Titulo, "Digite a mensagem a ser enviada.\n\nERRO:{FFFFFF} Você deve digitar algo.", "Responder", "Cancelar");
  		if(strlen(inputtext) > 250)
		{
			Dialog_Show(playerid, DIALOG_CEL_RESP_SMS, DIALOG_STYLE_INPUT, Titulo, "Digite a mensagem a ser enviada.\n\nERRO:{FFFFFF} A mensagem deve ter no máximo 250 caracteres.", "Responder", "Cancelar");
			return 1;
		}
		CelularData[playerid][DelaySMS] = SetTimerEx("EnviarSMS", 6000, false, "dd", playerid,MensagensInfo[playerid][CelularData[playerid][VendoContato]][smsPor]);
		SetPVarString(playerid, "SMSEnviado", inputtext);
	}
	return 1;
}

Dialog:DIALOG_CEL_ENV_SMS(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
	    new Titulo[40];
		format(Titulo, sizeof(Titulo), "Enviar SMS - [%s]",ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNome]);

		if(!strlen(inputtext)) return Dialog_Show(playerid, DIALOG_CEL_ENV_SMS, DIALOG_STYLE_INPUT, Titulo, "Digite a mensagem a ser enviada.\n\nERRO:{FFFFFF} Você deve digitar algo.", "Enviar", "Cancelar");
  		if(strlen(inputtext) > 250)
		{
			Dialog_Show(playerid, DIALOG_CEL_ENV_SMS, DIALOG_STYLE_INPUT, Titulo, "Digite a mensagem a ser enviada.\n\nERRO:{FFFFFF} A mensagem deve ter no máximo 250 caracteres.", "Enviar", "Cancelar");
			return 1;
		}
		CelularData[playerid][DelaySMS] = SetTimerEx("EnviarSMS", 6000, false, "dd", playerid,ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNumero]);
		SetPVarString(playerid, "SMSEnviado", inputtext);
	}
	return 1;
}

public SumirIco(playerid)
{
    TextDrawHideForPlayer(playerid,Celular_Base[14]);
    TextDrawHideForPlayer(playerid,Celular_Base[15]);
    KillTimer(CelularData[playerid][DelaySMS]);

    CelularData[playerid][DelaySMS] = 0;
	return 1;
}

public EnviarSMS(playerid, numero)
{
	if(!IsPlayerConnected(playerid)) return 1;

    if(numero < 1000 || numero > 999999)
    {
        TextDrawHideForPlayer(playerid,Celular_Base[12]);
        TextDrawShowForPlayer(playerid,Celular_Base[14]);
        CelularData[playerid][DelaySMSICO] = SetTimerEx("SumirIco", 2000, false, "d", playerid);
        return 1;
    }
	new encontrado = 999;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && !IsPlayerNPC(i))
 		{
 		    if(CelularData[i][celNumero] == numero)
 		    {
 		        encontrado = i;
 		        break;
 		    }
 		}
	}
	new msg[256];
	GetPVarString(playerid, "SMSEnviado", msg, 256);

	for(new sms_id = 0; sms_id < 40; sms_id++)
	{
	    if(MensagensInfo[encontrado][sms_id][smsAtivo] == 0)
		{
			format(MensagensInfo[encontrado][sms_id][smsMensagem], 256, msg);

			//LimparMensagem(msg);
		    format(MensagensInfo[encontrado][sms_id][smsMensagemLimpa], 14, msg);

			MensagensInfo[encontrado][sms_id][smsLido] = 2;
			if(PegarSinalCelular(encontrado) < 10.0 || CelularData[encontrado][celModo] == 3) MensagensInfo[encontrado][sms_id][smsAtivo] = 2;
			else MensagensInfo[encontrado][sms_id][smsAtivo] = 1;
			MensagensInfo[encontrado][sms_id][smsPor] = CelularData[playerid][celNumero];

			new hour, mins, sec;
			new d,m,y;
			new DataSalvar[124];
			getdate(y,m,d);
			gettime(hour,mins,sec);
			new strh[24], hourstr[4], minstr[4], secstr[4];
			if(hour < 10) { format(hourstr,sizeof(hourstr),"0%d",hour); } else { format(hourstr,sizeof(hourstr),"%d",hour); }
			if(mins < 10) { format(minstr,sizeof(minstr),"0%d",mins); } else { format(minstr,sizeof(minstr),"%d",mins); }
			if(sec < 10) { format(secstr,sizeof(secstr),"0%d",sec); } else { format(secstr,sizeof(secstr),"%d",sec); }
			format(strh,sizeof(strh),"%s:%s:%s",hourstr,minstr,secstr);
			format(DataSalvar,sizeof(DataSalvar),"%d-%d-%d - %s",d,m,y,strh);

			format(MensagensInfo[encontrado][sms_id][smsData], 256, DataSalvar);

            if(PegarSinalCelular(encontrado) >= 10.0)
            {
				TextDrawShowForPlayer(encontrado,Celular_Base[13]);
				PlayerPlaySound(encontrado,1139,0.0,0.0,0.0);

				if(CelularData[encontrado][NavegandoCel] == 5)
				{
				    SelecionarNovaOpcao(encontrado,CelularData[playerid][MenuSelecionado]+1,2);
					CelularData[encontrado][MenuSelecionado] = 1;
	      			NavegandoCelular(encontrado,5);//Mensagens
				}
			}
			TextDrawHideForPlayer(playerid,Celular_Base[12]);
			TextDrawShowForPlayer(playerid,Celular_Base[15]);
   			CelularData[playerid][DelaySMSICO] = SetTimerEx("SumirIco", 2000, false, "d", playerid);

   			if(CelularData[playerid][celSMSs] > 0)
   			{
                CelularData[playerid][celSMSs]--;
   			}
   			else
   			{
   			    CelularData[playerid][celTotalPD] += 5;
   			}
			break;
		}
	}

	return 1;
}

FalhasDeSinal(texto[])
{
	new stringsedit, totaledits = strlen(texto)/8;
	for(new i = strlen(texto); i >= 0; i--)
	{
	    if(totaledits > 0)
	    {
			stringsedit = randomEx(1, strlen(texto));
			texto[stringsedit] = '.';
	  		texto[stringsedit+1] = '.';
	  		totaledits--;
		}
	}
}

LimparMensagem(palavra[])
{
    for(new i = strlen(palavra) - 1; i >= 0; i--)
    {
        if(strfind(palavra[i], " ", true) != -1) palavra[i] = '_';
        if(strfind(palavra[i], "á", true) != -1) palavra[i] = 'a';
		if(strfind(palavra[i], "à", true) != -1) palavra[i] = 'a';
		if(strfind(palavra[i], "ã", true) != -1) palavra[i] = 'a';
		if(strfind(palavra[i], "â", true) != -1) palavra[i] = 'a';
		if(strfind(palavra[i], "é", true) != -1) palavra[i] = 'e';
		if(strfind(palavra[i], "è", true) != -1) palavra[i] = 'e';
		if(strfind(palavra[i], "ê", true) != -1) palavra[i] = 'e';
		if(strfind(palavra[i], "í", true) != -1) palavra[i] = 'i';
		if(strfind(palavra[i], "ì", true) != -1) palavra[i] = 'i';
		if(strfind(palavra[i], "î", true) != -1) palavra[i] = 'i';
		if(strfind(palavra[i], "ó", true) != -1) palavra[i] = 'o';
		if(strfind(palavra[i], "ò", true) != -1) palavra[i] = 'o';
		if(strfind(palavra[i], "ô", true) != -1) palavra[i] = 'o';
		if(strfind(palavra[i], "õ", true) != -1) palavra[i] = 'o';
		if(strfind(palavra[i], "ú", true) != -1) palavra[i] = 'u';
		if(strfind(palavra[i], "ù", true) != -1) palavra[i] = 'u';
		if(strfind(palavra[i], "û", true) != -1) palavra[i] = 'u';
		if(strfind(palavra[i], "ñ", true) != -1) palavra[i] = 'n';
    }
}

Dialog:DIALOG_CEL_NOVONOME(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
	    new Titulo[40];
		format(Titulo, sizeof(Titulo), "Editar Nome - [%s]",ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNome]);

		if(!strlen(inputtext)) return Dialog_Show(playerid, DIALOG_CEL_NOVONOME, DIALOG_STYLE_INPUT, Titulo, "Digite um novo nome para este contato", "Alterar", "Cancelar");
  		if(strlen(inputtext) > 8)
		{
			SendClientMessage(playerid,0xFF6800FF,"ERRO:{FFFFFF} O nome deve ter no máximo 8 caracteres.");
			Dialog_Show(playerid, DIALOG_CEL_NOVONOME, DIALOG_STYLE_INPUT, Titulo, "Digite um novo nome para este contato", "Alterar", "Cancelar");
			return 1;
		}
		if(strfind(inputtext, "'") != -1)
		{
  			SendClientMessage(playerid, COLOR_LIGHTGREEN, "ERRO:{FFFFFF} Você não pode colocar caracteres especiais no nome do contato.");
	    	return 1;
		}
		LimparMensagem(inputtext);
		format(ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNome], 128, inputtext);
		//SendClientMessage(playerid,-1,"Nome do contato atualizado.");
	}
	return 1;
}

Dialog:DIALOG_CEL_NOVONUMERO(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;
	else
	{
	    new Titulo[56],Msg[56];
		format(Titulo, sizeof(Titulo), "Editar Numero - [%s]",ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNome]);
		format(Msg, sizeof(Msg), "Numero atual: %d\n\nDigite um novo nome para este contato.",ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNumero]);

        new novonumero = strval(inputtext);
		if(novonumero < 1000 || novonumero > 9999999)
		{
		    format(Msg, sizeof(Msg), "Numero atual: %d\n\nDigite um novo nome para este contato.\n\nERRO:{FFFFFF} Numero inválido.",ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNumero]);
			Dialog_Show(playerid, DIALOG_CEL_NOVONUMERO, DIALOG_STYLE_INPUT, Titulo, Msg, "Alterar", "Cancelar");
			return 1;
		}
		ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNumero] = novonumero;
		//SendClientMessage(playerid,-1,"Numero atualizado.");
	}
	return 1;
}

Dialog:DIALOG_CEL_DELETAR(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    format(ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNome], 128, "Contato_%d",CelularData[playerid][VendoContato]);
	    ContatoInfo[playerid][CelularData[playerid][VendoContato]][ContatoNumero] = 0;
	    //SendClientMessage(playerid,-1,"Contato deletado.");
	}
	return 1;
}

public DeletandoSMS(playerid,sms_id)
{
    format(MensagensInfo[playerid][sms_id][smsMensagem], 256, "");
	format(MensagensInfo[playerid][sms_id][smsMensagemLimpa], 14, "");
	MensagensInfo[playerid][sms_id][smsLido] = 0;
	MensagensInfo[playerid][sms_id][smsAtivo] = 0;
	MensagensInfo[playerid][sms_id][smsPor] = 0;
	format(MensagensInfo[playerid][sms_id][smsData], 256, "");

	//printf("sms_id = %d",sms_id);

	for(new i = (sms_id+1); i < 40; i++)
	{
	    new ii = i-1;
		if(MensagensInfo[playerid][i][smsAtivo] == 1)
		{
		    format(MensagensInfo[playerid][ii][smsMensagem], 256, MensagensInfo[playerid][i][smsMensagem]);
			format(MensagensInfo[playerid][ii][smsMensagemLimpa], 14, MensagensInfo[playerid][i][smsMensagemLimpa]);
			MensagensInfo[playerid][ii][smsLido] = MensagensInfo[playerid][i][smsLido];
			MensagensInfo[playerid][ii][smsAtivo] = MensagensInfo[playerid][i][smsAtivo];
			MensagensInfo[playerid][ii][smsPor] = MensagensInfo[playerid][i][smsPor];
			format(MensagensInfo[playerid][ii][smsData], 256, MensagensInfo[playerid][i][smsData]);

			format(MensagensInfo[playerid][i][smsMensagem], 256, "");
			format(MensagensInfo[playerid][i][smsMensagemLimpa], 14, "");
			MensagensInfo[playerid][i][smsLido] = 0;
			MensagensInfo[playerid][i][smsAtivo] = 0;
			MensagensInfo[playerid][i][smsPor] = 0;
			format(MensagensInfo[playerid][i][smsData], 256, "");
	    }
	}

	CelularData[playerid][MenuSelecionado] = 1;
 	SelecionarNovaOpcao(playerid,CelularData[playerid][MenuSelecionado]+1,2);
 	NavegandoCelular(playerid,5);//Mensagens
	return 1;
}

CMD:sms(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(CelularData[playerid][celNumero] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um celular.");
	if(CelularData[playerid][DelaySMS] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem um SMS sendo enviado, aguarde.");
    if(CelularData[playerid][EmLigacao] != 999 || CelularData[playerid][LigandoPara] != 999 || CelularData[playerid][LigandoParaNum] != 999 || CelularData[playerid][LigandoOrelhao] != 999 || CelularData[playerid][AtendeuOrelhao] != 999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já está em uma chamada ou está ligando.");
	if(PegarSinalCelular(playerid) < 10.0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O seu celular está sem sinal.");
    if(PlayerInfo[playerid][pMorto] > 0)  return SendClientMessage(playerid, COLOR_LIGHTRED, "Você está muito ferido para isso.");

	new number[24],sms[256];
	if(sscanf(params,"s[24]s[256]",number,sms))
	{
		SendClientMessage(playerid, COLOR_WHITE, "ERRO:{FFFFFF} /sms [Numero/Contato] [Mensagem]");
		return 1;
	}

	new valorteste = strval(number);

	if(valorteste < 10000)
	{
		for(new i = 0; i < 40; i++)
		{
		    if(strfind(ContatoInfo[playerid][i][ContatoNome], number, true) != -1)
		    {
		        valorteste = ContatoInfo[playerid][i][ContatoNumero];
		    }
		}
	}
	new tempo = randomEx(3, 6);
 	CelularData[playerid][DelaySMS] = SetTimerEx("EnviarSMS", (tempo*1000), false, "dd", playerid,valorteste);
 	SetPVarString(playerid, "SMSEnviado", sms);
 	TextDrawShowForPlayer(playerid,Celular_Base[12]);
	return 1;
}

public TempoParaAtenderem911(playerid,tipo)
{
	if(CelularData[playerid][LigandoParaNum] != 5 && CelularData[playerid][LigandoParaNum] != 101) return 1;

	new str[126], strmomento[15];
    new hour, mins, sec;
	gettime(hour,mins,sec);

	if(hour >= 5 && hour < 12) format(strmomento, sizeof(strmomento), "bom dia");
	else if(hour >= 12 && hour < 19) format(strmomento, sizeof(strmomento), "boa tarde");
	else if(hour >= 19 && hour < 0) format(strmomento, sizeof(strmomento), "boa noite");
	else if(hour >= 0 && hour < 5) format(strmomento, sizeof(strmomento), "boa noite");
	else format(strmomento, sizeof(strmomento), "");

    new strop[26];
   	if(CelularData[playerid][UsandoCelOrOre] == 1) format(strop,sizeof(strop),"[CELULAR]");
    else format(strop,sizeof(strop),"[ORELHÃO]");

	if(tipo == 1) // PMERJ
	{
	    if(CelularData[playerid][VivaVoz] == 0)
		{
 			format(str, sizeof(str), "%s Atendente diz: Polícia Militar, %s, qual o seu nome?", strop, strmomento);
    		SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
		}
		else
		{
  			format(str, sizeof(str), "[VIVA VOZ] Atendente diz: Polícia Militar, %s, qual o seu nome?", strmomento);
			ProxDetector(RANGE_VIVAVOZ, playerid, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
		}
    	CelularData[playerid][LigandoParaNum] = 191;
	}
	else if(tipo == 2) // CBERJ
	{
	    if(CelularData[playerid][VivaVoz] == 0)
		{
	    	format(str, sizeof(str), "%s Atendente diz: Bombeiros %s, qual o seu nome?", strop, strmomento);
    		SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
		}
		else
		{
		    format(str, sizeof(str), "[VIVA VOZ] Atendente diz: Bombeiros %s, qual o seu nome?", strmomento);
		    ProxDetector(RANGE_VIVAVOZ, playerid, str, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA, COLOR_LINHATELEFONICA);
		}
    	CelularData[playerid][LigandoParaNum] = 194;
	}
	return 1;
}

ALTCOMMAND:des->desligar;
CMD:desligar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(CelularData[playerid][LigandoPara] != 999 && CelularData[playerid][LigandoParaNumAtendido] == 0 && CelularData[playerid][LigandoOrelhao] == 999 && CelularData[playerid][AtendeuOrelhao] == 999)
	{
	    DesligarChamada(playerid, 1);
	}
	else if(CelularData[playerid][UsandoCelOrOre] == 2 && CelularData[playerid][LigandoOrelhao] == 888)
	{
	    for(new i = 0; i < 17; i++)
		{
			TextDrawHideForPlayer(playerid, TelPubBase[i]);
		}

		PlayerTextDrawHide(playerid,TelPub[playerid][0]);
		PlayerTextDrawHide(playerid,TelPub[playerid][1]);

		AnimCelular(playerid, 2);
		TogglePlayerControllable(playerid,1);

        CancelSelectTextDraw(playerid);
		ResetarVarsCel(playerid);
	}
	else if(CelularData[playerid][EmLigacao] != 999 && CelularData[playerid][LigandoOrelhao] == 999 && CelularData[playerid][AtendeuOrelhao] == 999)
	{
	    DesligarChamada(playerid, 2);
	}
	else if(CelularData[playerid][LigandoParaNum] != 999 && CelularData[playerid][LigandoOrelhao] == 999 && CelularData[playerid][AtendeuOrelhao] == 999)
	{
	    DesligarChamada(playerid, 4);
	}
	else if(CelularData[playerid][LigandoOrelhao] != 999)
	{
	    for(new i = 0; i < 17; i++)
		{
			TextDrawHideForPlayer(playerid, TelPubBase[i]);
		}

		PlayerTextDrawHide(playerid,TelPub[playerid][0]);
		PlayerTextDrawHide(playerid,TelPub[playerid][1]);

	    DesligarChamada(playerid, 5);
	}
	else if(CelularData[playerid][AtendeuOrelhao] != 999)
	{
	    for(new i = 0; i < 17; i++)
		{
			TextDrawHideForPlayer(playerid, TelPubBase[i]);
		}

		PlayerTextDrawHide(playerid,TelPub[playerid][0]);
		PlayerTextDrawHide(playerid,TelPub[playerid][1]);

	    DesligarChamada(playerid, 6);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em uma chamada.");
	return 1;
}

public ResetarVarsCel(playerid)
{
	CelularData[playerid][EmLigacao] = 999;
	CelularData[playerid][LigandoPara] = 999;
	CelularData[playerid][LigandoParaNum] = 999;
	CelularData[playerid][LigandoParaNumAtendido] = 0;
	CelularData[playerid][TempoChamada][0] = 0;
	CelularData[playerid][TempoChamada][1] = 0;
	CelularData[playerid][TempoChamada][2] = 0;
	CelularData[playerid][LigandoOrelhao] = 999;
   	CelularData[playerid][LigandoOrelhaoAtendido] = 0;
   	CelularData[playerid][AtendeuOrelhao] = 999;
   	CelularData[playerid][UsandoCelOrOre] = 0;
   	CelularData[playerid][VivaVoz] = 0;
   	format(CelularData[playerid][NumOrelhao], 15, "");
   	CelularData[playerid][OreID] = 0;

   	for(new i = 0; i < 17; i++)
	{
		TextDrawHideForPlayer(playerid, TelPubBase[i]);
	}
	PlayerTextDrawHide(playerid,TelPub[playerid][0]);
	PlayerTextDrawHide(playerid,TelPub[playerid][1]);
   	return 1;
}

public GetTempoChamada(playerid)
{
    if(CelularData[playerid][TempoChamada][0] > 15)
    {
        CelularData[playerid][TempoChamada][0] = 0;
        CelularData[playerid][TempoChamada][1]++;
    }
    else
    {
        if(CelularData[playerid][TempoChamada][1] == 0 && CelularData[playerid][TempoChamada][2] == 0)
        {
            return CelularData[playerid][TempoChamada][0];
        }
    }
    new	totalmin = CelularData[playerid][TempoChamada][1],
     	totalhora = CelularData[playerid][TempoChamada][2]*60;

	new total = totalmin+totalhora;
	return total;
}

public CobrarChamada(playerid)
{
	new Float:TelPubPrice = 0.30, str[64];

    if(CelularData[playerid][UsandoCelOrOre] == 1)//Celular
    {
        if(CelularData[playerid][TempoChamada][1] == 0 && CelularData[playerid][TempoChamada][2])
        {
            if(CelularData[playerid][celMinutos] == 0)
	    	{
				new tempocham = GetTempoChamada(playerid),
    				totalcusto = floatround(tempocham*0.40);

				CelularData[playerid][celTotalPD] = totalcusto;
				format(str, 64, "Você desligou a chamada, custo total: R$%d.",totalcusto);
	  			SendClientMessage(playerid, COLOR_YELLOW, str);
		    }
		    else
		    {
	       		CelularData[playerid][celMinutos]--;
		        format(str, 64, "Você desligou a chamada, minutos restantes: %d.",CelularData[playerid][celMinutos]);
	    		SendClientMessage(playerid, COLOR_YELLOW, str);
		    }
        }
        else
        {
            if(CelularData[playerid][celMinutos] != 0)
            {
		        if(GetTempoChamada(playerid) > CelularData[playerid][celMinutos])
		    	{
					new tempocham = GetTempoChamada(playerid);
					while(CelularData[playerid][celMinutos] > 0)
					{
		   				CelularData[playerid][celMinutos]--;
					    tempocham--;
					}
		            new totaltempo = tempocham*60,
						totalcusto = floatround(totaltempo*0.40);
					CelularData[playerid][celTotalPD] = totalcusto;
					format(str, 64, "Você desligou a chamada, custo total: R$%d.",totalcusto);
		  			SendClientMessage(playerid, COLOR_YELLOW, str);
			    }
			    else
			    {
		     		new tempocham = GetTempoChamada(playerid);
		       		CelularData[playerid][celMinutos] = CelularData[playerid][celMinutos]-tempocham;
			        format(str, 64, "Você desligou a chamada, minutos restantes: %d.",CelularData[playerid][celMinutos]);
		    		SendClientMessage(playerid, COLOR_YELLOW, str);
			    }
			}
			else
			{
			    new tempocham = GetTempoChamada(playerid),
    				totalcusto = floatround(tempocham*0.40);

				CelularData[playerid][celTotalPD] = totalcusto;
				format(str, 64, "Você desligou a chamada, custo total: R$%d.",totalcusto);
	  			SendClientMessage(playerid, COLOR_YELLOW, str);
			}
		}
    }
    else
	{
	    new	totaltempo = CelularData[playerid][TempoChamada][0]+(CelularData[playerid][TempoChamada][1]*60)+((CelularData[playerid][TempoChamada][2]*60)*60),
			totalcusto = floatround(totaltempo*TelPubPrice);

		format(str, 64, "Você desligou a chamada, custo total: R$%d.",totalcusto);
		SendClientMessage(playerid, COLOR_YELLOW, str);

	}
	return 1;
}

public DesligarChamada(playerid, tipo)
{
	switch(tipo)
	{
	    case 1: //Celular > Celular | Ligando
	    {
	    	ResetarVarsCel(playerid);
	    	AnimCelular(playerid, 2);

			SumirCelular(playerid);
	    	PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][1]);
		}
		case 2: //Celular > Celular | Em Chamada
		{
		    new falandocom = CelularData[playerid][EmLigacao];

			if(CelularData[playerid][LigandoPara] != 999)
			{
			    CobrarChamada(playerid);
			    SendClientMessage(falandocom, COLOR_YELLOW, "Chamada desligada.");
			}
			else
			{
			   	CobrarChamada(falandocom);
			    SendClientMessage(playerid, COLOR_YELLOW, "Você desligou.");
			}

	    	ResetarVarsCel(falandocom);
	    	AnimCelular(falandocom, 2);

	    	ResetarVarsCel(playerid);
	    	AnimCelular(playerid, 2);

            SumirCelular(playerid);
            SumirCelular(falandocom);
			PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][1]);
			PlayerTextDrawHide(falandocom,Celular_PlayerV[playerid][1]);
		}
		case 3: //Em chamada - Ligação caiu [Orelhão/Celular]
		{
      		if(CelularData[playerid][AtendeuOrelhao] != 999)
		    {
				new idp1 = TelPublico[CelularData[playerid][AtendeuOrelhao]][orLigou];
				if(idp1 != 999)
				{
					if(CelularData[playerid][LigandoPara] != 999)
					{
					    CobrarChamada(playerid);
					    SendClientMessage(idp1, COLOR_YELLOW, "Chamada desligada.");
					}
					else
					{
					    CobrarChamada(idp1);
					}
					SumirCelular(idp1);
					AnimCelular(idp1, 2);
					ResetarVarsCel(idp1);
				}

	            TogglePlayerControllable(playerid,1);
	            DestroyDynamic3DTextLabel(TelPublico[CelularData[playerid][AtendeuOrelhao]][orTextRing]);
				TelPublico[CelularData[playerid][AtendeuOrelhao]][orLigou] = 999;
				TelPublico[CelularData[playerid][AtendeuOrelhao]][orAtendeu] = 999;
				TelPublico[CelularData[playerid][AtendeuOrelhao]][orTocando] = 0;
				TelPublico[CelularData[playerid][AtendeuOrelhao]][orUsando] = 0;

				ResetarVarsCel(playerid);
				AnimCelular(playerid, 2);

				SumirCelular(playerid);
				PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][1]);
			}
			else if(CelularData[playerid][LigandoOrelhao] != 999)
			{
			    new idp1 = TelPublico[CelularData[playerid][LigandoOrelhao]][orAtendeu];
				if(idp1 != 999)
				{
					if(CelularData[playerid][LigandoPara] != 999)
					{
					    CobrarChamada(playerid);
					    SendClientMessage(idp1, COLOR_YELLOW, "Chamada desligada.");
					}
					else
					{
         				CobrarChamada(idp1);
					}
					SumirCelular(idp1);
					AnimCelular(idp1, 2);
					ResetarVarsCel(idp1);
				}

	            TogglePlayerControllable(playerid,1);
	            DestroyDynamic3DTextLabel(TelPublico[CelularData[playerid][LigandoOrelhao]][orTextRing]);
				TelPublico[CelularData[playerid][LigandoOrelhao]][orLigou] = 999;
				TelPublico[CelularData[playerid][LigandoOrelhao]][orAtendeu] = 999;
				TelPublico[CelularData[playerid][LigandoOrelhao]][orTocando] = 0;
				TelPublico[CelularData[playerid][LigandoOrelhao]][orUsando] = 0;

				ResetarVarsCel(playerid);
				AnimCelular(playerid, 2);

				SumirCelular(playerid);
				PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][1]);
			}
			else
			{
			    new falandocom = CelularData[playerid][EmLigacao];

				if(CelularData[playerid][LigandoPara] != 999)
				{
				    CobrarChamada(playerid);
				    SendClientMessage(falandocom, COLOR_YELLOW, "[CELULAR] A linha caiu.");
				}
				else
				{
        			CobrarChamada(falandocom);
				    SendClientMessage(playerid, COLOR_YELLOW, "[CELULAR] A linha caiu.");
				}

                TogglePlayerControllable(playerid,1);
		    	ResetarVarsCel(falandocom);
		    	AnimCelular(falandocom, 2);

		    	ResetarVarsCel(playerid);
		    	AnimCelular(playerid, 2);

	            SumirCelular(playerid);
	            SumirCelular(falandocom);
				PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][1]);
				PlayerTextDrawHide(falandocom,Celular_PlayerV[playerid][1]);

				KillTimer(CelularData[playerid][DelayCelular]);
			}
		}
		case 4: // Celular | Ligando Num (Numeros Gov / Orelhoes )
		{
		    KillTimer(CelularData[playerid][DelayCelular]);

            if(CelularData[playerid][LigandoOrelhao] == 999)
            {
            	SumirCelular(playerid);
	    		PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][1]);
	    	}
	    	else
	    	{
	    	    new id_orelhao = CelularData[playerid][LigandoOrelhao];
				TelPublico[id_orelhao][orLigou] = playerid;
    			TelPublico[id_orelhao][orTocando] = 0;
			    TelPublico[id_orelhao][orUsando] = 1;
			}
			TogglePlayerControllable(playerid,1);
			SendClientMessage(playerid, COLOR_YELLOW, "Você desligou.");
			ResetarVarsCel(playerid);
	    	AnimCelular(playerid, 2);
            TogglePlayerControllable(playerid,1);
		}
		case 5: //Orelhão - Player que ligou, desligou
		{
			new idp1 = TelPublico[CelularData[playerid][LigandoOrelhao]][orAtendeu];
			if(idp1 != 999)
			{
				if(CelularData[playerid][LigandoPara] != 999 || TelPublico[CelularData[playerid][LigandoOrelhao]][orLigou] == playerid)
				{
				    CobrarChamada(playerid);
				    SendClientMessage(idp1, COLOR_YELLOW, "Chamada desligada.");
				}
				else
				{
				    CobrarChamada(idp1);
				    SendClientMessage(playerid, COLOR_YELLOW, "Chamada desligada.");
				}
				TogglePlayerControllable(idp1,1);
				SumirCelular(idp1);
				AnimCelular(idp1, 2);
				ResetarVarsCel(idp1);
			}

            TogglePlayerControllable(playerid,1);
            DestroyDynamic3DTextLabel(TelPublico[CelularData[playerid][LigandoOrelhao]][orTextRing]);
			TelPublico[CelularData[playerid][LigandoOrelhao]][orLigou] = 999;
			TelPublico[CelularData[playerid][LigandoOrelhao]][orAtendeu] = 999;
			TelPublico[CelularData[playerid][LigandoOrelhao]][orTocando] = 0;
			TelPublico[CelularData[playerid][LigandoOrelhao]][orUsando] = 0;

			ResetarVarsCel(playerid);
			AnimCelular(playerid, 2);

			SumirCelular(playerid);
			PlayerTextDrawHide(playerid,Celular_PlayerV[playerid][1]);
		}
		case 6://Orelhão - Player que atendeu o celular desligou
		{
		    new idp1 = TelPublico[CelularData[playerid][AtendeuOrelhao]][orLigou];
		    if(idp1 != 999)
			{
				CobrarChamada(idp1);
				PlayerTextDrawHide(idp1,Celular_PlayerV[playerid][1]);
				SumirCelular(idp1);
				AnimCelular(idp1, 2);
				ResetarVarsCel(idp1);
			}

			TogglePlayerControllable(playerid,1);
			TelPublico[CelularData[playerid][AtendeuOrelhao]][orLigou] = 999;
			TelPublico[CelularData[playerid][AtendeuOrelhao]][orAtendeu] = 999;
			TelPublico[CelularData[playerid][AtendeuOrelhao]][orUsando] = 0;
			SumirCelular(playerid);
			AnimCelular(playerid, 2);

			ResetarVarsCel(playerid);
			SendClientMessage(playerid, COLOR_YELLOW, "Você desligou.");
		}
		case 7: //Ligou para Serviço no Celular
		{
		    TogglePlayerControllable(playerid,1);
   			TelPublico[CelularData[playerid][LigandoOrelhao]][orLigou] = 999;
			TelPublico[CelularData[playerid][LigandoOrelhao]][orAtendeu] = 999;
			TelPublico[CelularData[playerid][LigandoOrelhao]][orTocando] = 0;
			TelPublico[CelularData[playerid][LigandoOrelhao]][orUsando] = 0;
			SumirCelular(playerid);
			AnimCelular(playerid, 2);

			ResetarVarsCel(playerid);
			SendClientMessage(playerid, COLOR_YELLOW, "Você desligou.");
		}
		default:
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} #001.");
		}
	}
	return 1;
}

public MostrarCelularLigacao(playerid)
{
    PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][0]);

	switch(CelularData[playerid][celModelo])
	{
		case 330: TextDrawShowForPlayer(playerid,Celular_Fundo[0]);
		case 18865: TextDrawShowForPlayer(playerid,Celular_Fundo[1]);
		case 18866: TextDrawShowForPlayer(playerid,Celular_Fundo[2]);
		case 18867: TextDrawShowForPlayer(playerid,Celular_Fundo[3]);
		case 18868: TextDrawShowForPlayer(playerid,Celular_Fundo[4]);
		case 18869: TextDrawShowForPlayer(playerid,Celular_Fundo[5]);
		case 18870: TextDrawShowForPlayer(playerid,Celular_Fundo[6]);
		case 18871: TextDrawShowForPlayer(playerid,Celular_Fundo[7]);
		case 18872: TextDrawShowForPlayer(playerid,Celular_Fundo[8]);
		case 18873: TextDrawShowForPlayer(playerid,Celular_Fundo[9]);
		case 18874: TextDrawShowForPlayer(playerid,Celular_Fundo[10]);
		case 19513: TextDrawShowForPlayer(playerid,Celular_Fundo[11]);
	}

    for(new i = 0; i < 11; i++)
	{
	    TextDrawShowForPlayer(playerid, Celular_Base[i]);
	}

	CancelSelectTextDraw(playerid);

	CelularData[playerid][NavegandoCel] = 50;
	CelularData[playerid][CelularAberto] = 1;
	CelularData[playerid][MenuSelecionado] = 0;
	CelularData[playerid][MenuContatos] = 0;
	return 1;
}

stock AnimCelular(playerid, tipo)
{
	if(tipo == 1)//Adicionar objeto e aplicar animação
	{
	    if(CelularData[playerid][celModelo] == 0) CelularData[playerid][celModelo] = 330;

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		if(CelularData[playerid][celModelo] == 330) SetPlayerAttachedObject(playerid, 4, CelularData[playerid][celModelo], 6);
		else SetPlayerAttachedObject(playerid, 4, CelularData[playerid][celModelo], 6, 0.089411, 0.020775, -0.016320, 279.668365, 359.140991, 169.287139, 1.000000, 1.000000, 1.000000);
	}
	//Tipo 2 = Desligar
	else if(tipo == 3)//Telefone de orelhão
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	    SetPlayerAttachedObject(playerid, 4, 18868, 6, 0.089411, 0.020775, -0.016320, 279.668365, 359.140991, 169.287139, 1.000000, 1.000000, 1.000000);
	}
	else
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 4);
	}
	return 1;
}

ALTCOMMAND:at->atender;
CMD:atender(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(CelularData[playerid][celNumero] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um celular.");
    if(CelularData[playerid][OreID] != 0 || CelularData[playerid][EmLigacao] != 999 || CelularData[playerid][LigandoPara] != 999 || CelularData[playerid][LigandoParaNum] != 999 || CelularData[playerid][LigandoOrelhao] != 999 || CelularData[playerid][AtendeuOrelhao] != 999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já está em uma chamada ou está ligando.");
    if(PlayerInfo[playerid][pMorto] > 0)  return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está muito ferido para isso.");

	new id_meligando = 999;

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && !IsPlayerNPC(i))
		{
		    if(CelularData[i][LigandoPara] == playerid)
		    {
		        id_meligando = i;
		        break;
		    }
		}
	}
	if(id_meligando == 999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Ninguém está ligando para você.");

	if(CelularData[id_meligando][UsandoCelOrOre] == 2) // Atender chamada de orelhão
	{
	    new id_orelhao = CelularData[id_meligando][LigandoOrelhao];
	    CelularData[playerid][LigandoOrelhao] = 999;
	    CelularData[playerid][LigandoOrelhaoAtendido] = 1;
	    CelularData[playerid][AtendeuOrelhao] = id_orelhao;

        CelularData[id_meligando][LigandoOrelhaoAtendido] = 1;
	    CelularData[playerid][LigandoOrelhaoAtendido] = 1;

	    CelularData[playerid][UsandoCelOrOre] = 1;

	    TelPublico[id_orelhao][orAtendeu] = playerid;
	    TelPublico[id_orelhao][orTocando] = 0;
        TelPublico[id_orelhao][orUsando] = 1;

		new str[56];

		//== Abrir celular para o player que atendeu.
		if(CelularData[playerid][CelularAberto] == 1)
		{
			SumirCelular(playerid);
		}
		MostrarCelularLigacao(playerid);
		AnimCelular(playerid, 1);

		format(str,sizeof(str),"Em_chamada~n~(024-%.3s-%.3s)~n~00:00:00", TelPublico[id_orelhao][orPrefixo],TelPublico[id_orelhao][orNumero]);
	 	PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], str);
	 	PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][1], 0x111111FF);
		PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][1]);
	}
	else // Atender chamada de celular
	{
		CelularData[playerid][LigandoPara] = 999;
	    CelularData[playerid][LigandoParaNum] = CelularData[id_meligando][celNumero];
	    CelularData[id_meligando][LigandoParaNum] = CelularData[playerid][celNumero];
	    CelularData[id_meligando][LigandoParaNumAtendido] = 1;
	    CelularData[playerid][UsandoCelOrOre] = 1;

	    CelularData[playerid][EmLigacao] = id_meligando;
	    CelularData[id_meligando][EmLigacao] = playerid;

	    if(CelularData[playerid][CelularAberto] == 1)
		{
			SumirCelular(playerid);
		}
		MostrarCelularLigacao(playerid);
		AnimCelular(playerid, 1);
		AnimCelular(id_meligando, 1);

	    new str[56];
		format(str,sizeof(str),"Em_chamada~n~(%d)~n~00:00:00", CelularData[id_meligando][celNumero]);
	 	PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], str);

	 	format(str,sizeof(str),"Em_chamada~n~(%d)~n~00:00:00", CelularData[playerid][celNumero]);
	 	PlayerTextDrawSetString(id_meligando, Celular_PlayerV[id_meligando][1], str);

	 	PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][1], 0x111111FF);
		PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][1]);
	}

	PararToqueDeCelular(playerid);
	SendClientMessage(playerid, COLOR_YELLOW, "Você atendeu a chamada.");
	SendClientMessage(id_meligando, COLOR_YELLOW, "Ligação atendida.");
	return 1;
}

CMD:orelhao(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está muito ferido para isso.");
    if(CelularData[playerid][CelularAberto] == 1 || CelularData[playerid][EmLigacao] != 999 || CelularData[playerid][LigandoPara] != 999 || CelularData[playerid][LigandoParaNum] != 999 || CelularData[playerid][LigandoOrelhao] != 999 || CelularData[playerid][AtendeuOrelhao] != 999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já está em uma chamada ou está ligando ou com o celular aberto.");

	new id_orelhao = 999;
	for(new i = 0; i < MAX_ORELHOES; i++)
	{
	    if(TelPublico[i][orCriado] == 1)
	    {
	 		if(IsPlayerInRangeOfPoint(playerid,2.0,TelPublico[i][orX], TelPublico[i][orY], TelPublico[i][orZ]))
			{
				id_orelhao = i;
	  			break;
		    }
		}
	}
	if(id_orelhao == 999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está próximo de nenhum orelhão.");

	if(TelPublico[id_orelhao][orUsando] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Alguém já está utilizando este orelhão.");

	//ATENDER ORELHÃO
	if(TelPublico[id_orelhao][orTocando] == 1)
	{
        CelularData[playerid][LigandoOrelhao] = 999;
	    CelularData[playerid][LigandoOrelhaoAtendido] = 1;
	    CelularData[playerid][AtendeuOrelhao] = id_orelhao;

	    CelularData[TelPublico[id_orelhao][orLigou]][LigandoOrelhaoAtendido] = 1;
	    CelularData[playerid][LigandoOrelhaoAtendido] = 1;

	    CelularData[playerid][UsandoCelOrOre] = 2;

	    TelPublico[id_orelhao][orAtendeu] = playerid;
	    TelPublico[id_orelhao][orTocando] = 0;
        TelPublico[id_orelhao][orUsando] = 1;

        DestroyDynamic3DTextLabel(TelPublico[id_orelhao][orTextRing]);

		if(CelularData[playerid][CelularAberto] == 1)
		{
			SumirCelular(playerid);
		}

		SendClientMessage(playerid, COLOR_YELLOW, "Você atendeu o orelhão.");
		SendClientMessage(TelPublico[id_orelhao][orLigou], COLOR_YELLOW, "Ligação atendida.");

        //PlayerTextDrawBoxColor(playerid, TelPub[playerid][0], 0x8F0000FF);
	    //PlayerTextDrawSetString(playerid,TelPub[playerid][0], "DESLIGAR");

		//PlayerTextDrawHide(playerid,TelPub[playerid][0]);
		//PlayerTextDrawShow(playerid,TelPub[playerid][0]);

        TogglePlayerControllable(playerid,0);

		AnimCelular(playerid, 3);
		return 1;
	}
	else
	{
	    for(new i = 0; i < 17; i++)
		{
			TextDrawShowForPlayer(playerid, TelPubBase[i]);
		}
	    format(CelularData[playerid][NumOrelhao], 15, "");

	    PlayerTextDrawBoxColor(playerid, TelPub[playerid][0], 0x2E7241FF);
	    PlayerTextDrawSetString(playerid,TelPub[playerid][0], "LIGAR");
	    PlayerTextDrawSetString(playerid,TelPub[playerid][1], "_");

		PlayerTextDrawShow(playerid,TelPub[playerid][0]);
		PlayerTextDrawShow(playerid,TelPub[playerid][1]);
	}
    new strnumb[142];
    format(strnumb,sizeof(strnumb),"[ORELHÃO] O número deste orelhão é: 024-%.3s-%.3s.",TelPublico[id_orelhao][orPrefixo],TelPublico[id_orelhao][orNumero]);
    SendClientMessage(playerid, COLOR_YELLOW, strnumb);

	CelularData[playerid][OreID] = id_orelhao;

    TogglePlayerControllable(playerid,0);

	AnimCelular(playerid, 3);

	CelularData[playerid][LigandoOrelhao] = 888;
	CelularData[playerid][UsandoCelOrOre] = 2;

	SelectTextDraw(playerid, 0x72A9E8FF);
	return 1;
}

CMD:rastrear(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] != FAC_TIPO_PMERJ && FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] != FAC_TIPO_PCERJ && FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] != FAC_TIPO_EB) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem acesso a este comando.");

	if(CelularData[playerid][EmLigacao] != 999 || CelularData[playerid][LigandoPara] != 999 || CelularData[playerid][LigandoParaNum] != 999 || CelularData[playerid][LigandoOrelhao] != 999 || CelularData[playerid][AtendeuOrelhao] != 999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já está em uma chamada ou está ligando.");
	if(CelularData[playerid][celModo] == 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Seu celular está em modo avião.");
	if(PegarSinalCelular(playerid) < 1.0) return SendClientMessage(playerid, COLOR_WHITE, "ERRO:{FFFFFF} Não há sinal nesta área.");
	if(CelularData[playerid][RastreandoTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "ERRO:{FFFFFF} Você ainda não pode rastrear outro numero.");

	new number[15];
	if(sscanf(params,"s[15]",number)) return SendClientMessage(playerid, COLOR_WHITE, "ERRO:{FFFFFF} /rastrear [Numero]");
	new telefonefinal = strval(number);

	if(number[0] == '0' && number[1] == '2' && number[2] == '4')
	{
	    if(number[3] == '-' && number[7] == '-')
	    {
	        for(new i = 0; i < MAX_ORELHOES; i++)
	        {
	            if(TelPublico[i][orCriado] == 1)
	            {
		            if(number[4] == '8' && number[5] == '5' && number[6] == '1') return SendClientMessage(playerid, COLOR_WHITE, "ERRO:{FFFFFF} Este número é do presidio.");
		            if(TelPublico[i][orPrefixo][0] == number[4] && TelPublico[i][orPrefixo][1] == number[5] && TelPublico[i][orPrefixo][2] == number[6])
		            {
						if(TelPublico[i][orNumero][0] == number[8] && TelPublico[i][orNumero][1] == number[9] && TelPublico[i][orNumero][2] == number[10])
		            	{
		            	    SetPlayerCheckpoint(playerid, TelPublico[i][orX], TelPublico[i][orY], TelPublico[i][orZ], 5.0);
		            	    SendClientMessage(playerid, COLOR_WHITE, "{FF6347} O orelhão foi rastreador e marcado em seu mapa.");
		            	    return 1;
		            	}
					}
				}
			}
		}
	}

	if(strlen(number) == 8)
	{
		if(number[0] == '5' && number[1] == '5' && number[2] == '5' && number[3] == '-') // Usando Prefixo Numeros normais
		{
		    number[0] = number[4];
		    number[1] = number[5];
		    number[2] = number[6];
		    number[3] = number[7];
		    number[4] = number[8];

		    strdel(number, 5, 9);
		    telefonefinal = strval(number);
		}
	}
	if(telefonefinal < 10000)
	{
		for(new i = 0; i < 40; i++)
		{
		    if(strfind(ContatoInfo[playerid][i][ContatoNome], number, true) != -1)
		    {
		        telefonefinal = ContatoInfo[playerid][i][ContatoNumero];
		        break;
		    }
		}
	}
	RastreandoNumero(playerid, telefonefinal, 1, 999);
	return 1;
}

public Rastreador(playerid, numero, encontrado)
{

	    new torreinicial = CelularData[playerid][RastreIdParou],
	        Float:sinalmax,
			torresinal[56],
			str[526],
			strs[526],
			Float:SinalEncontrado = PegarSinalCelular(encontrado),
			torres_encontraram = 0;

        new c = -1;
		if(PlayerInfo[encontrado][pEntrouCasa] != -1) c = PlayerInfo[encontrado][pEntrouCasa];
		else if(PlayerInfo[encontrado][pEntrouEmpresa] != -1) c = PlayerInfo[encontrado][pEntrouEmpresa];
		else if(PlayerInfo[encontrado][pEntrouComplexo] != -1) c = PlayerInfo[encontrado][pEntrouComplexo];
		else if(PlayerInfo[encontrado][pEntrouGaragem] != -1)	c = PlayerInfo[encontrado][pEntrouGaragem];

  		if(torreinicial < MAX_TORRES)
		{
			for(new i = torreinicial; i < MAX_TORRES; i++)
			{
			    if(c == -1)
			    {
				    if(IsPlayerInRangeOfPoint(encontrado,TorreData[i][torSinal],TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]))
					{
					    new Float:Sinal = GetPlayerDistanceFromPoint(encontrado, TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]);
					    Sinal = TorreData[i][torSinal]-Sinal;

	                    sinalmax = TorreData[i][torSinal];

	                    if(SinalEncontrado >= (sinalmax*0.8)) format(torresinal, 56, "{00A300}ÓTIMA");
						else if(SinalEncontrado >= (sinalmax*0.5) && SinalEncontrado < (sinalmax*0.8) ) format(torresinal, 56, "{F0B900}BOA");
						else if(SinalEncontrado >= (sinalmax*0.2) && SinalEncontrado < (sinalmax*0.5) ) format(torresinal, 56, "{00A300}MÉDIA");
						else if(SinalEncontrado >= (sinalmax*0.1) && SinalEncontrado < (sinalmax*0.2) ) format(torresinal, 56, "{00A300}FRACA");
						else format(torresinal, 56, "{00A300}PÉSSIMA");

						GetPVarString(playerid, "RastreMsg", strs, 526);
						if(CelularData[playerid][RastreIdParou] == 0) format(str, 526, "{CDCCC6}Recebendo resposta %s {CDCCC6}da torre de {FFFFFF}%s.",torresinal,GetLocation(TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]));
	                    else format(str, 526, "%s\n{CDCCC6}Recebendo resposta %s {CDCCC6}da torre de {FFFFFF}%s.",strs,torresinal,GetLocation(TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]));

	                    CelularData[playerid][RastreIdParou] = i+1;
	            		Dialog_Show(playerid, 99999999, DIALOG_STYLE_MSGBOX, "Sistema de Rastreamento", str, "Fechar","");
	            		CelularData[playerid][RastreTime] = SetTimerEx("Rastreador", 2000, false, "ddd", playerid, numero, encontrado);

	            		SetPVarString(playerid, "RastreMsg", str);

	            		torres_encontraram++;
	            		break;
					}
				}
				else
				{
				    if(PlayerInfo[encontrado][pEntrouCasa] != -1)
					{
					    if(HouseInfo[c][hExWorld] == 0)
	    				{
							if(IsPointInRangeOfPoint(HouseInfo[c][hExX],HouseInfo[c][hExY],HouseInfo[c][hExZ],TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ],TorreData[i][torSinal]))
							{
							    new Float:Sinal = GetPointDistanceFromPoint(HouseInfo[c][hExX],HouseInfo[c][hExY],HouseInfo[c][hExZ], TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]);
							    Sinal = TorreData[i][torSinal]-Sinal;

			                    sinalmax = TorreData[i][torSinal];

			                    if(SinalEncontrado >= (sinalmax*0.8)) format(torresinal, 56, "{00A300}ÓTIMA");
								else if(SinalEncontrado >= (sinalmax*0.5) && SinalEncontrado < (sinalmax*0.8) ) format(torresinal, 56, "{F0B900}BOA");
								else if(SinalEncontrado >= (sinalmax*0.2) && SinalEncontrado < (sinalmax*0.5) ) format(torresinal, 56, "{00A300}MÉDIA");
								else if(SinalEncontrado >= (sinalmax*0.1) && SinalEncontrado < (sinalmax*0.2) ) format(torresinal, 56, "{00A300}FRACA");
								else format(torresinal, 56, "{00A300}PÉSSIMA");

								GetPVarString(playerid, "RastreMsg", strs, 526);
								if(CelularData[playerid][RastreIdParou] == 0) format(str, 526, "{CDCCC6}Recebendo resposta %s {CDCCC6}da torre de {FFFFFF}%s.",torresinal,GetLocation(TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]));
			                    else format(str, 526, "%s\n{CDCCC6}Recebendo resposta %s {CDCCC6}da torre de {FFFFFF}%s.",strs,torresinal,GetLocation(TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]));

			                    CelularData[playerid][RastreIdParou] = i+1;
			            		Dialog_Show(playerid, 99999999, DIALOG_STYLE_MSGBOX, "Sistema de Rastreamento", str, "Fechar","");
			            		CelularData[playerid][RastreTime] = SetTimerEx("Rastreador", 2000, false, "ddd", playerid, numero, encontrado);

			            		SetPVarString(playerid, "RastreMsg", str);

			            		torres_encontraram++;
			            		break;
							}
						}
						else
						{
						    for(new complex; complex < MAX_COMPLEXOS; complex++)
						    {
					        	if(ComplexoInfo[complex][cID] == (HouseInfo[c][hExWorld]-1000))
					            {
					                c = ComplexoInfo[complex][cID];
					                if(IsPointInRangeOfPoint(ComplexoInfo[c][cExX],ComplexoInfo[c][cExY],ComplexoInfo[c][cExZ],TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ],TorreData[i][torSinal]))
									{
									    new Float:Sinal = GetPointDistanceFromPoint(ComplexoInfo[c][cExX],ComplexoInfo[c][cExY],ComplexoInfo[c][cExZ], TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]);
									    Sinal = TorreData[i][torSinal]-Sinal;

					                    sinalmax = TorreData[i][torSinal];

					                    if(SinalEncontrado >= (sinalmax*0.8)) format(torresinal, 56, "{00A300}ÓTIMA");
										else if(SinalEncontrado >= (sinalmax*0.5) && SinalEncontrado < (sinalmax*0.8) ) format(torresinal, 56, "{F0B900}BOA");
										else if(SinalEncontrado >= (sinalmax*0.2) && SinalEncontrado < (sinalmax*0.5) ) format(torresinal, 56, "{00A300}MÉDIA");
										else if(SinalEncontrado >= (sinalmax*0.1) && SinalEncontrado < (sinalmax*0.2) ) format(torresinal, 56, "{00A300}FRACA");
										else format(torresinal, 56, "{00A300}PÉSSIMA");

										GetPVarString(playerid, "RastreMsg", strs, 526);
										if(CelularData[playerid][RastreIdParou] == 0) format(str, 526, "{CDCCC6}Recebendo resposta %s {CDCCC6}da torre de {FFFFFF}%s.",torresinal,GetLocation(TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]));
					                    else format(str, 526, "%s\n{CDCCC6}Recebendo resposta %s {CDCCC6}da torre de {FFFFFF}%s.",strs,torresinal,GetLocation(TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]));

					                    CelularData[playerid][RastreIdParou] = i+1;
					            		Dialog_Show(playerid, 99999999, DIALOG_STYLE_MSGBOX, "Sistema de Rastreamento", str, "Fechar","");
					            		CelularData[playerid][RastreTime] = SetTimerEx("Rastreador", 2000, false, "ddd", playerid, numero, encontrado);

					            		SetPVarString(playerid, "RastreMsg", str);
					            		torres_encontraram++;
					            		break;
									}
								}
							}
						}
					}
					else if(PlayerInfo[encontrado][pEntrouEmpresa] != -1)
					{
                        if(IsPointInRangeOfPoint(EmpInfo[c][eExX],EmpInfo[c][eExY],EmpInfo[c][eExZ],TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ],TorreData[i][torSinal]))
						{
						    new Float:Sinal = GetPointDistanceFromPoint(EmpInfo[c][eExX],EmpInfo[c][eExY],EmpInfo[c][eExZ], TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]);
						    Sinal = TorreData[i][torSinal]-Sinal;

		                    sinalmax = TorreData[i][torSinal];

		                    if(SinalEncontrado >= (sinalmax*0.8)) format(torresinal, 56, "{00A300}ÓTIMA");
							else if(SinalEncontrado >= (sinalmax*0.5) && SinalEncontrado < (sinalmax*0.8) ) format(torresinal, 56, "{F0B900}BOA");
							else if(SinalEncontrado >= (sinalmax*0.2) && SinalEncontrado < (sinalmax*0.5) ) format(torresinal, 56, "{00A300}MÉDIA");
							else if(SinalEncontrado >= (sinalmax*0.1) && SinalEncontrado < (sinalmax*0.2) ) format(torresinal, 56, "{00A300}FRACA");
							else format(torresinal, 56, "{00A300}PÉSSIMA");

							GetPVarString(playerid, "RastreMsg", strs, 526);
							if(CelularData[playerid][RastreIdParou] == 0) format(str, 526, "{CDCCC6}Recebendo resposta %s {CDCCC6}da torre de {FFFFFF}%s.",torresinal,GetLocation(TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]));
		                    else format(str, 526, "%s\n{CDCCC6}Recebendo resposta %s {CDCCC6}da torre de {FFFFFF}%s.",strs,torresinal,GetLocation(TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]));

		                    CelularData[playerid][RastreIdParou] = i+1;
		            		Dialog_Show(playerid, 99999999, DIALOG_STYLE_MSGBOX, "Sistema de Rastreamento", str, "Fechar","");
		            		CelularData[playerid][RastreTime] = SetTimerEx("Rastreador", 2000, false, "ddd", playerid, numero, encontrado);

		            		SetPVarString(playerid, "RastreMsg", str);
		            		torres_encontraram++;
		            		break;
						}
					}
					else if(PlayerInfo[encontrado][pEntrouComplexo] != -1)
					{
					    if(IsPointInRangeOfPoint(ComplexoInfo[c][cExX],ComplexoInfo[c][cExY],ComplexoInfo[c][cExZ],TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ],TorreData[i][torSinal]))
						{
						    new Float:Sinal = GetPointDistanceFromPoint(ComplexoInfo[c][cExX],ComplexoInfo[c][cExY],ComplexoInfo[c][cExZ], TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]);
						    Sinal = TorreData[i][torSinal]-Sinal;

		                    sinalmax = TorreData[i][torSinal];

		                    if(SinalEncontrado >= (sinalmax*0.8)) format(torresinal, 56, "{00A300}ÓTIMA");
							else if(SinalEncontrado >= (sinalmax*0.5) && SinalEncontrado < (sinalmax*0.8) ) format(torresinal, 56, "{F0B900}BOA");
							else if(SinalEncontrado >= (sinalmax*0.2) && SinalEncontrado < (sinalmax*0.5) ) format(torresinal, 56, "{00A300}MÉDIA");
							else if(SinalEncontrado >= (sinalmax*0.1) && SinalEncontrado < (sinalmax*0.2) ) format(torresinal, 56, "{00A300}FRACA");
							else format(torresinal, 56, "{00A300}PÉSSIMA");

							GetPVarString(playerid, "RastreMsg", strs, 526);
							if(CelularData[playerid][RastreIdParou] == 0) format(str, 526, "{CDCCC6}Recebendo resposta %s {CDCCC6}da torre de {FFFFFF}%s.",torresinal,GetLocation(TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]));
		                    else format(str, 526, "%s\n{CDCCC6}Recebendo resposta %s {CDCCC6}da torre de {FFFFFF}%s.",strs,torresinal,GetLocation(TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]));

		                    CelularData[playerid][RastreIdParou] = i+1;
		            		Dialog_Show(playerid, 99999999, DIALOG_STYLE_MSGBOX, "Sistema de Rastreamento", str, "Fechar","");
		            		CelularData[playerid][RastreTime] = SetTimerEx("Rastreador", 2000, false, "ddd", playerid, numero, encontrado);

		            		SetPVarString(playerid, "RastreMsg", str);
		            		torres_encontraram++;
		            		break;
						}
					}
					else if(PlayerInfo[encontrado][pEntrouGaragem] != -1)
					{
                        if(IsPointInRangeOfPoint(GaragemInfo[c][hExX],GaragemInfo[c][hExY],GaragemInfo[c][hExZ],TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ],TorreData[i][torSinal]))
						{
						    new Float:Sinal = GetPointDistanceFromPoint(GaragemInfo[c][hExX],GaragemInfo[c][hExY],GaragemInfo[c][hExZ], TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]);
						    Sinal = TorreData[i][torSinal]-Sinal;

		                    sinalmax = TorreData[i][torSinal];

		                    if(SinalEncontrado >= (sinalmax*0.8)) format(torresinal, 56, "{00A300}ÓTIMA");
							else if(SinalEncontrado >= (sinalmax*0.5) && SinalEncontrado < (sinalmax*0.8) ) format(torresinal, 56, "{F0B900}BOA");
							else if(SinalEncontrado >= (sinalmax*0.2) && SinalEncontrado < (sinalmax*0.5) ) format(torresinal, 56, "{00A300}MÉDIA");
							else if(SinalEncontrado >= (sinalmax*0.1) && SinalEncontrado < (sinalmax*0.2) ) format(torresinal, 56, "{00A300}FRACA");
							else format(torresinal, 56, "{00A300}PÉSSIMA");

							GetPVarString(playerid, "RastreMsg", strs, 526);
							if(CelularData[playerid][RastreIdParou] == 0) format(str, 526, "{CDCCC6}Recebendo resposta %s {CDCCC6}da torre de {FFFFFF}%s.",torresinal,GetLocation(TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]));
		                    else format(str, 526, "%s\n{CDCCC6}Recebendo resposta %s {CDCCC6}da torre de {FFFFFF}%s.",strs,torresinal,GetLocation(TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]));

		                    CelularData[playerid][RastreIdParou] = i+1;
		            		Dialog_Show(playerid, 99999999, DIALOG_STYLE_MSGBOX, "Sistema de Rastreamento", str, "Fechar","");
		            		CelularData[playerid][RastreTime] = SetTimerEx("Rastreador", 2000, false, "ddd", playerid, numero, encontrado);

		            		SetPVarString(playerid, "RastreMsg", str);
		            		torres_encontraram++;
		            		break;
						}
					}
				}

				if( i == MAX_TORRES-1 )
				{
    				GetPVarString(playerid, "RastreMsg", strs, 526);

					format(str, 526, "%s\n\n{CDCCC6}-- Busca completa. Local estimado: {FFFFFF}%s.\n", strs, GetPlayerLocation(encontrado));
	    			Dialog_Show(playerid, 99999999, DIALOG_STYLE_MSGBOX, "Sistema de Rastreamento", str, "Fechar","");

					RastreandoNumero(playerid, numero, 2, encontrado);
				}
			}
		}
		else
		{
		    GetPVarString(playerid, "RastreMsg", strs, 526);

		    format(str, 526, "%s\n\n-- Busca completa. Local estimado: %s.\n", strs, GetPlayerLocation(encontrado));
		    Dialog_Show(playerid, 99999999, DIALOG_STYLE_MSGBOX, "Sistema de Rastreamento", str, "Fechar","");

		    RastreandoNumero(playerid, numero, 2, encontrado);
		}
}

public RastreandoNumero(playerid, numero, fase, encontrado2)
{
	if(fase == 1) //Rastreando
	{
	    if(numero < 1 || numero > 999999)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "ERRO:{FFFFFF} Número não encontrado ou inválido.");
			return 1;
		}
		new encontrado = 999, foradearea = 0;
		if(numero > 10000)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
	  			if(IsPlayerConnected(i) && !IsPlayerNPC(i))
				{
	   				if(CelularData[i][celNumero] == numero)
	 		    	{
	 		    	    if(playerid == i) return SendClientMessage(playerid, COLOR_WHITE, "ERRO:{FFFFFF} Você não pode rastrear você mesmo.");
	        			if(CelularData[i][celModo] != 3)
	 		        	{
	            			if(PegarSinalCelular(i) > 0.5 && PegarSinalCelular(i) < 10.0)
	 		            	{
	                			new rand = random(4);
	 		                	if(rand == 1 || rand == 2) encontrado = i;
		 		                else foradearea = 1;
							}
							else if(PegarSinalCelular(i) < 0.5)
							{
							    foradearea = 1;
							}
							else
							{
							    encontrado = i;
							}
						}
						else foradearea = 1;
	     				break;
		    		}
	 			}
			}
			if(foradearea == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Numero fora de área ou desligado.");
			else if(encontrado == 999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Numero inexistente");
			else
			{
			    SetPVarString(playerid, "RastreMsg", "");
			    CelularData[playerid][RastreIdParou] = 0;
            	Dialog_Show(playerid, 99999999, DIALOG_STYLE_MSGBOX, "Sistema de Rastreamento", "Iniciando busca...", "Fechar","");
            	CelularData[playerid][RastreTime] = SetTimerEx("Rastreador", 2000, false, "ddd", playerid, numero, encontrado);
            	return 1;
			}
		}
	}
	else if(fase == 2) //Final -  Rastreado
	{
  		GangZoneDestroy(CelularData[playerid][GGRastreamento]);
    	new Float:TamanhoGZ,
			Float:SinalEncontrado = PegarSinalCelular(encontrado2),
			Torre_id = PegarSinalCelular_TorID(encontrado2),
		 	Float:sinalmax = TorreData[Torre_id][torSinal],
			Float:MaxX1,
			Float:MaxY1,
			Float:MinX,
			Float:MinY,
			Float:MaxX,
			Float:MaxY,
			Float:pos[3];

        new c = -1;
		if(PlayerInfo[encontrado2][pEntrouCasa] != -1)
		{
			c = PlayerInfo[encontrado2][pEntrouCasa];
			if(HouseInfo[c][hExWorld] == 0)
			{
			    pos[0] = HouseInfo[c][hExX];
			    pos[1] = HouseInfo[c][hExY];
			}
			else
			{
			    for(new i; i < MAX_COMPLEXOS; i++)
			    {
      				if(ComplexoInfo[i][cID] == (HouseInfo[c][hExWorld]-1000))
          			{
             			c = ComplexoInfo[i][cID];
             			pos[0] = ComplexoInfo[c][cExX];
			    		pos[1] = ComplexoInfo[c][cExY];
			    		break;
					}
				}
			}
		}
		else if(PlayerInfo[encontrado2][pEntrouEmpresa] != -1)
		{
			c = PlayerInfo[encontrado2][pEntrouEmpresa];
            pos[0] = EmpInfo[c][eExX];
			pos[1] = EmpInfo[c][eExY];
		}
		else if(PlayerInfo[encontrado2][pEntrouComplexo] != -1)
		{
			c = PlayerInfo[encontrado2][pEntrouComplexo];
			pos[0] = ComplexoInfo[c][cExX];
 			pos[1] = ComplexoInfo[c][cExY];
 		}
		else if(PlayerInfo[encontrado2][pEntrouGaragem] != -1)
		{
			c = PlayerInfo[encontrado2][pEntrouGaragem];
			pos[0] = GaragemInfo[c][hExX];
			pos[1] = GaragemInfo[c][hExY];
		}
		else
			GetPlayerPos(encontrado2, pos[0], pos[1], pos[2]);

		if(SinalEncontrado >= (sinalmax*0.8)) TamanhoGZ = 50.0;
		else if(SinalEncontrado >= (sinalmax*0.5) && SinalEncontrado < (sinalmax*0.8) ) TamanhoGZ = 80.0;
		else if(SinalEncontrado >= (sinalmax*0.2) && SinalEncontrado < (sinalmax*0.5) ) TamanhoGZ = 120.0;
		else if(SinalEncontrado >= (sinalmax*0.1) && SinalEncontrado < (sinalmax*0.2) ) TamanhoGZ = 150.0;
		else TamanhoGZ = 180.0;

		new Taman = floatround(TamanhoGZ, floatround_round)/randomEx(3,8),
			Possibilidades = randomEx(1,4),
  			Float:MeioX,
   			Float:MeioY;

		MaxX1 = pos[0];//+TamanhoGZ,
		MaxY1 = pos[1];//+TamanhoGZ;
		switch(Possibilidades)
		{
			case 1:
  			{
 				MeioX = (MaxX1/2)+randomEx(5,Taman);
     			MeioY = (MaxY1/2)+randomEx(5,Taman);
	    	}
		   	case 2:
		   	{
       			MeioX = (MaxX1/2)-randomEx(5,Taman);
		        MeioY = (MaxY1/2)+randomEx(5,Taman);
		    }
		    case 3:
		    {
      			MeioX = (MaxX1/2)+randomEx(5,Taman);
		        MeioY = (MaxY1/2)-randomEx(5,Taman);
		    }
		    case 4:
		    {
       			MeioX = (MaxX1/2)-randomEx(5,Taman);
       			MeioY = (MaxY1/2)-randomEx(5,Taman);
		    }
		}
   		MinX = (MeioX*2)-TamanhoGZ,
   		MinY = (MeioY*2)-TamanhoGZ,
   		MaxX = (MeioX*2)+TamanhoGZ,
   		MaxY = (MeioY*2)+TamanhoGZ;

		CelularData[playerid][GGRastreamento] = GangZoneCreate(MinX, MinY, MaxX, MaxY);
		GangZoneShowForPlayer(playerid, CelularData[playerid][GGRastreamento], 0x8E0000A6);
		CelularData[playerid][RastreandoTime] = 60;
	}
	return 1;
}

ALTCOMMAND:foguete->fogos;
ALTCOMMAND:fogos->rojao;
COMMAND:rojao(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] < 2) return SCM(playerid, COLOR_LIGHTRED, "Você precisa de TC 2 ou mais para utilizar este comando!");
    if(PlayerInfo[playerid][pMorto] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando enquanto estiver morto!");
    if(OutrasInfos[playerid][oAlgemado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver algemado.");
    if(OutrasInfos[playerid][oAmarrado] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode utilizar este comando enquanto estiver amarrado.");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	if(TomouTazer[playerid] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver sob efeito do tazer!");
	if(PlayerInfo[playerid][pArrombarDNV_C] != 0)
	{
		new stringfogos[128];
		format(stringfogos, sizeof(stringfogos),"Aguarde %d segundos antes de soltar fogos novamente.", PlayerInfo[playerid][pArrombarDNV_C]);
		SendClientMessage(playerid,COLOR_LIGHTRED, stringfogos);
		return 1;
	}

	new Float:X, Float:Y, Float:Z;
	new worldid = GetPlayerVirtualWorld(playerid);
 	new intid = GetPlayerInterior(playerid);
		
	GetPlayerPos(playerid, X, Y, Z);
	GetXYInFrontOfPlayer(playerid, X, Y, 30);

    SetPlayerAttachedObject(playerid, 6, -2063, 6, 0.05, 0.05, 0.15, 0.000000, 0.0, 0.0, 1.000000, 1.000000, 1.000000);
    TogglePlayerControllable(playerid, 0);
    ApplyAnimation(playerid, "camera", "picstnd_in", 4.1, 0, 1, 1, 1, 0, 1);
    SetTimerEx("AbaixarMao", 5500, false, "d", playerid);


	foreach(Player, i)
	{
		if(IsPlayerInRangeOfPoint(i, 20.0, X, Y, Z))
		{
			Streamer_UpdateEx(i, X, Y, (Z), worldid, intid);
		}
	}


	SetTimerEx("LancarFoguete", 2500, 0, "i", playerid);

	foreach(Player, i)
	{
		if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i, 180.0, X, Y, Z))
		{
			PlayAudioStreamForPlayer(i, "https://cp-frp.com.br.com/midia/fogo.mp3", X, Y, Z, 500.0, 1);
		}
	}
	new stringfogos1[128];
	format(stringfogos1, sizeof(stringfogos1), "* Sons de fogos e rojões são escutados nas próximidades *");
	ProxDetector(500.0, playerid, stringfogos1, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	SendAdminAlert(COLOR_LIGHTRED, "AdmCmd:{FFFFFF} %s acaba de utilizar o comando /rojao.", PlayerName(playerid, 0));
	new strl[126];
	LogCMD_ROJAO(strl);
	return 1;
}

forward LancarFoguete(playerid);
public LancarFoguete(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	GetDynamicObjectPos(Foguete[playerid], FogueteX[playerid], FogueteY[playerid], FogueteZ[playerid]);
	CreateExplosion(FogueteX[playerid], FogueteY[playerid], FogueteZ[playerid], 12, 0);
	SetTimerEx("EstourarFoguete1", 100, false, "i", playerid);
	PlayerInfo[playerid][pArrombarDNV_C] = 45;
	return 1;
}

forward EstourarFoguete1(playerid);
public EstourarFoguete1(playerid)
{
	CreateExplosion(FogueteX[playerid]-(0+(random(3))),FogueteY[playerid]-(0+(random(3))),FogueteZ[playerid]-(0+(random(3))), 12, 0);
	CreateExplosion(FogueteX[playerid]-(0+(random(3))),FogueteY[playerid]+(0+(random(3))),FogueteZ[playerid]-(0+(random(3))), 12, 0);
	CreateExplosion(FogueteX[playerid]-(0+(random(3))),FogueteY[playerid],FogueteZ[playerid]-(0+(random(3))), 12, 0);
	CreateExplosion(FogueteX[playerid]+(0+(random(3))),FogueteY[playerid]-(0+(random(3))),FogueteZ[playerid]-(0+(random(3))), 12, 0);
	CreateExplosion(FogueteX[playerid]+(0+(random(3))),FogueteY[playerid]+(0+(random(3))),FogueteZ[playerid]-(0+(random(3))), 12, 0);
	CreateExplosion(FogueteX[playerid]+(0+(random(3))),FogueteY[playerid],FogueteZ[playerid]-(0+(random(3))), 12, 0);
	CreateExplosion(FogueteX[playerid],FogueteY[playerid]-(0+(random(3))),FogueteZ[playerid]-(0+(random(3))), 12, 0);
	CreateExplosion(FogueteX[playerid],FogueteY[playerid]+(0+(random(3))),FogueteZ[playerid]-(0+(random(3))), 12, 0);
	//
	CreateExplosion(FogueteX[playerid]-(0+(random(10))),FogueteY[playerid]-(0+(random(10))),FogueteZ[playerid]-10, 12, 0);
	CreateExplosion(FogueteX[playerid]-(0+(random(10))),FogueteY[playerid]+(0+(random(10))),FogueteZ[playerid]-10, 12, 0);
	CreateExplosion(FogueteX[playerid]-(0+(random(10))),FogueteY[playerid],FogueteZ[playerid]-10, 12, 0);
	CreateExplosion(FogueteX[playerid]+(0+(random(10))),FogueteY[playerid]-(0+(random(10))),FogueteZ[playerid]-10, 12, 0);
	CreateExplosion(FogueteX[playerid]+(0+(random(10))),FogueteY[playerid]+(0+(random(10))),FogueteZ[playerid]-10, 12, 0);
	CreateExplosion(FogueteX[playerid]+(0+(random(10))),FogueteY[playerid],FogueteZ[playerid]-5, 12, 0);
	CreateExplosion(FogueteX[playerid],FogueteY[playerid]-(0+(random(10))),FogueteZ[playerid]-5, 12, 0);
	CreateExplosion(FogueteX[playerid],FogueteY[playerid]+(0+(random(10))),FogueteZ[playerid]-5, 12, 0);

	
	SetTimerEx("EstourarFoguete2", 100, false, "i", playerid);
	return 1;
}

forward EstourarFoguete2(playerid);
public EstourarFoguete2(playerid)
{
	new Float:X,Float:Y,Float:Z;
	CreateExplosion(X, Y, Z, 12, 0);
	CreateExplosion(X, Y, Z, 12, 0);
	CreateExplosion(X, Y, Z, 12, 0);
	CreateExplosion(X, Y, Z, 12, 0);
	CreateExplosion(X, Y, Z, 12, 0);
	CreateExplosion(X, Y, Z, 12, 0);
	CreateExplosion(X, Y, Z, 12, 0);
	CreateExplosion(X, Y, Z, 12, 0);
    
	return 1;
}

forward AbaixarMao(playerid);
public AbaixarMao(playerid)
{
    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid, 1);
    RemovePlayerAttachedObject(playerid, 6);

    return 1;
}

CMD:ligar(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(CelularData[playerid][celNumero] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um celular.");
	if(CelularData[playerid][EmLigacao] != 999 || CelularData[playerid][LigandoPara] != 999 || CelularData[playerid][LigandoParaNum] != 999 || CelularData[playerid][LigandoOrelhao] != 999 || CelularData[playerid][AtendeuOrelhao] != 999) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já está em uma chamada ou está ligando.");
	if(CelularData[playerid][celModo] == 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Seu celular está em modo avião.");
	if(PlayerInfo[playerid][pMorto] > 0)  return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você está muito ferido para isso.");
	if(PegarSinalCelular(playerid) < 1.0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não há sinal nesta área.");
	new number[15];
	if(sscanf(params,"s[15]",number))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /ligar [Numero/Contato]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "Números públicos: 190 - Emergencias | 444 - Taxi | 555 - Mecânico");
		return 1;
	}
	new telefonefinal = strval(number);
	new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
	if(10 < FacInfo[FacId][fTipo] < 14) //Gang
	{
 		if(telefonefinal == FacInfo[FacId][fTrafNum])
   		{
     		if(OutrasInfos[playerid][oTraficanteID] == 9999)
       		{
       		    if(ChecarPedidosTraf(playerid) == 0) {
         			CriarTraficantes(playerid, 2);
					return 1;
				}
			}

   			if(OutrasInfos[playerid][oAguardandoNewTraf] == 1) {
				SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você ainda não pode fazer outro pedido, aguarde.");
			}
			else {
				format(string, sizeof(string), "SMS: Você já tem um contato a sua espera... Vou te mandar a localização, Remetente: %d", telefonefinal);
				SCM(playerid, COLOR_YELLOW, string);
				OutrasInfos[playerid][oEntrouCheckPointTraf] = 1;

				new rand = OutrasInfos[playerid][oTraficanteRand];
				SetPlayerCheckpoint(playerid, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2], 5.0);
			}
			return 1;
        }
   	}
   	if(13 < FacInfo[FacId][fTipo] < 18) //Mafia
	{
		if(telefonefinal == FacInfo[FacId][fTrafNum])
		{
		    if(OutrasInfos[playerid][oTraficanteID] == 9999)
      		{
	    		CriarTraficantes(playerid, 1);
		    	return 1;
			}
			else
			{
                if(OutrasInfos[playerid][oAguardandoNewTraf] == 1) {
					SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você ainda não pode fazer outro pedido, aguarde.");
	    		}
			    else {
	   				format(string, sizeof(string), "SMS: Você já tem um contato a sua espera... Vou te mandar a localização, Remetente: %d", telefonefinal);
					SCM(playerid, COLOR_YELLOW, string);
					OutrasInfos[playerid][oEntrouCheckPointTraf] = 1;

					new rand = OutrasInfos[playerid][oTraficanteRand];
					SetPlayerCheckpoint(playerid, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2], 5.0);
				}
				return 1;
			}
		}
	}

	if(number[0] == '0' && number[1] == '2' && number[2] == '4')
	{
	    if(number[3] == '-' && number[7] == '-')
	    {
	        for(new i = 0; i < MAX_ORELHOES; i++)
	        {
	            if(TelPublico[i][orCriado] == 1)
	            {
		            if(number[4] == '8' && number[5] == '5' && number[6] == '1') return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este código de área não está autorizado a receber ligações.");
		            if(TelPublico[i][orPrefixo][0] == number[4] && TelPublico[i][orPrefixo][1] == number[5] && TelPublico[i][orPrefixo][2] == number[6])
		            {
						if(TelPublico[i][orNumero][0] == number[8] && TelPublico[i][orNumero][1] == number[9] && TelPublico[i][orNumero][2] == number[10])
		            	{
		            	    telefonefinal = i;
		            	    AnimCelular(playerid, 1);
		            	    LigarPara(playerid, telefonefinal, 2, i);
		            	    return 1;
		            	}
					}
				}
			}
		}
		else if(number[3] != '-' && number[7] != '-')
		{
		    for(new i = 0; i < MAX_ORELHOES; i++)
	        {
	            if(TelPublico[i][orCriado] == 1)
	            {
		            if(number[3] == '8' && number[4] == '5' && number[5] == '1') return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este código de área não está autorizado a receber ligações.");
		            if(TelPublico[i][orPrefixo][0] == number[3] && TelPublico[i][orPrefixo][1] == number[4] && TelPublico[i][orPrefixo][2] == number[5])
		            {
						if(TelPublico[i][orNumero][0] == number[6] && TelPublico[i][orNumero][1] == number[7] && TelPublico[i][orNumero][2] == number[8])
		            	{
		            	    telefonefinal = i;
		            	    AnimCelular(playerid, 1);
		            	    LigarPara(playerid, telefonefinal, 2, i);
		            	    return 1;
		            	}
					}
				}
			}
		}
	}

	if(strlen(number) == 10)
	{
		if(number[0] == '5' && number[1] == '5' && number[2] == '5' && number[3] == '-') // Usando Prefixo Numeros normais
		{
		    number[0] = number[4];
		    number[1] = number[5];
		    number[2] = number[6];
		    number[3] = number[7];
		    number[4] = number[8];

		    strdel(number, 5, 9);
		    telefonefinal = strval(number);
		    AnimCelular(playerid, 1);
			LigarPara(playerid, telefonefinal, 1, -1);
			return 1;
		}
	}
	if(telefonefinal >= 10000)
	{
	    AnimCelular(playerid, 1);
		LigarPara(playerid, telefonefinal, 1, -1);
		return 1;
	}
	if(telefonefinal > 0 && telefonefinal < 10000)
	{
	    if(telefonefinal == 190 || telefonefinal == 555 || telefonefinal == 444 || telefonefinal == 222)
		{
		    AnimCelular(playerid, 1);
			LigarPara(playerid, telefonefinal, 1, -1);
			return 1;
		}
		for(new i = 0; i < 40; i++)
		{
		    if(strfind(ContatoInfo[playerid][i][ContatoNome], number, true) != -1)
		    {
		        telefonefinal = ContatoInfo[playerid][i][ContatoNumero];
		        AnimCelular(playerid, 1);
				LigarPara(playerid, telefonefinal, 1, -1);
		        break;
		    }
		}
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Número inválido.");
	return 1;
}

public ToqueDeCelular(playerid)
{
	if(CelularData[playerid][celModo] != 1) return 1;
    new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
 	switch(CelularData[playerid][celRingTone])
	{
	    case 1: PlayerPlaySound(playerid,1142,pos[0], pos[1], pos[2]);
		case 2: PlayerPlaySound(playerid,1062,pos[0], pos[1], pos[2]);
		case 3: PlayerPlaySound(playerid,1068,pos[0], pos[1], pos[2]);
		case 4: PlayerPlaySound(playerid,1076,pos[0], pos[1], pos[2]);
		case 5: PlayerPlaySound(playerid,1097,pos[0], pos[1], pos[2]);
		case 6: PlayerPlaySound(playerid,1183,pos[0], pos[1], pos[2]);
		case 7: PlayerPlaySound(playerid,1185,pos[0], pos[1], pos[2]);
		case 8: PlayerPlaySound(playerid,1187,pos[0], pos[1], pos[2]);
	}
	return 1;
}

public PararToqueDeCelular(playerid)
{
    new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
 	switch(CelularData[playerid][celRingTone])
	{
	    case 1: PlayerPlaySound(playerid,0,pos[0], pos[1], pos[2]);
		case 2: PlayerPlaySound(playerid,0,pos[0], pos[1], pos[2]);
		case 3: PlayerPlaySound(playerid,0,pos[0], pos[1], pos[2]);
		case 4: PlayerPlaySound(playerid,0,pos[0], pos[1], pos[2]);
		case 5: PlayerPlaySound(playerid,0,pos[0], pos[1], pos[2]);
		case 6: PlayerPlaySound(playerid,0,pos[0], pos[1], pos[2]);
		case 7: PlayerPlaySound(playerid,0,pos[0], pos[1], pos[2]);
		case 8: PlayerPlaySound(playerid,0,pos[0], pos[1], pos[2]);
	}
	return 1;
}

public LigarPara(playerid, numero, tipo, id_orelhao) //Tipo 1 = Ligação Normal (Numero) | Tipo 2 = Ligação para Orelhão | Tipo 3 = Orelhão para Orelhão
{
	if(tipo == 1)
	{
	    //======================================================================
		new FacId = GetFactionBySqlId(PlayerInfo[playerid][pFac]);
		if(10 < FacInfo[FacId][fTipo] < 14) //Gang
		{
	 		if(numero == FacInfo[FacId][fTrafNum])
	   		{
	     		if(OutrasInfos[playerid][oTraficanteID] == 9999)
	       		{
	       		    if(ChecarPedidosTraf(playerid) == 0) {
	         			CriarTraficantes(playerid, 2);
						return 1;
					}
				}

	   			if(OutrasInfos[playerid][oAguardandoNewTraf] == 1) {
					SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você ainda não pode fazer outro pedido, aguarde.");
				}
				else {
					format(string, sizeof(string), "SMS: Você já tem um contato a sua espera.. Vou te mandar a localização, Remetente: %d", FacInfo[FacId][fTrafNum]);
					SCM(playerid, COLOR_YELLOW, string);
					OutrasInfos[playerid][oEntrouCheckPointTraf] = 1;

					new rand = OutrasInfos[playerid][oTraficanteRand];
					SetPlayerCheckpoint(playerid, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2], 5.0);
				}
				return 1;
	        }
	   	}
	   	if(13 < FacInfo[FacId][fTipo] < 18) //Mafia
		{
			if(numero == FacInfo[FacId][fTrafNum])
			{
			    if(OutrasInfos[playerid][oTraficanteID] == 9999)
	      		{
		    		CriarTraficantes(playerid, 1);
			    	return 1;
				}
				else
				{
	                if(OutrasInfos[playerid][oAguardandoNewTraf] == 1) {
						SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você ainda não pode fazer outro pedido, aguarde.");
		    		}
				    else {
		   				format(string, sizeof(string), "SMS: Você já tem um contato a sua espera... Vou te mandar a localização, Remetente: %d", FacInfo[FacId][fTrafNum]);
						SCM(playerid, COLOR_YELLOW, string);
						OutrasInfos[playerid][oEntrouCheckPointTraf] = 1;

						new rand = OutrasInfos[playerid][oTraficanteRand];
						SetPlayerCheckpoint(playerid, TraficanteCarpos[rand][0], TraficanteCarpos[rand][1], TraficanteCarpos[rand][2], 5.0);
					}
					return 1;
				}
			}
		}
	   	//======================================================================
	    if(numero < 1 || numero > 999999999)
		{
		    CelularData[playerid][LigandoParaNum] = 1;
			CelularData[playerid][LigandoParaNumAtendido] = 0;
		    DesligarChamada(playerid, 1);
			return 1;
		}
		new encontrado = 999, foradearea = 0;
		if(numero > 10000)
		{
		    if(numero == 778864) return LoadGetWayFRZ(playerid);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i) && !IsPlayerNPC(i))
		 		{
		 		    if(CelularData[i][celNumero] == numero)
		 		    {
						if(playerid == i) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode ligar para você mesmo.");
		 		        if(CelularData[i][celModo] != 3)
		 		        {
		 		            if(PegarSinalCelular(i) > 0.5 && PegarSinalCelular(i) < 10.0)
		 		            {
		 		                new rand = random(4);
		 		                if(rand == 1 || rand == 2) encontrado = i;
		 		                else foradearea = 1;
							}
							else if(PegarSinalCelular(i) < 0.5)
							{
							    foradearea = 1;
							}
							else
							{
							    encontrado = i;
							}
						}
						else foradearea = 1;
		 		        break;
		 		    }
		 		}
			}
			if(foradearea == 1)
			{
			    if(id_orelhao == -1)
			    {
			        CelularData[playerid][UsandoCelOrOre] = 1;
				    if(CelularData[playerid][CelularAberto] == 1)
					{
					    SumirCelular(playerid);
					}
					MostrarCelularLigacao(playerid);
					CelularData[playerid][LigandoParaNum] = numero;
					CelularData[playerid][LigandoParaNumAtendido] = 0;

				    PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][1], 0x111111FF);
					PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], "Numero~n~fora_de_area");
				 	PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][1]);
				}
				else
				{
				    CelularData[playerid][UsandoCelOrOre] = 2;
				    CelularData[playerid][LigandoParaNum] = numero;
				    CelularData[playerid][LigandoParaNumAtendido] = 0;

				    CelularData[playerid][LigandoOrelhao] = id_orelhao;
				    CelularData[playerid][LigandoOrelhaoAtendido] = 0;
				    CelularData[playerid][AtendeuOrelhao] = 999;

				    TelPublico[id_orelhao][orLigou] = playerid;
				    TelPublico[id_orelhao][orTocando] = 0;
				    TelPublico[id_orelhao][orUsando] = 1;

				    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Numero fora da área de cobertura.");
				}
			}
			if(encontrado == 999)
			{
			    if(id_orelhao == -1)
			    {
			        CelularData[playerid][UsandoCelOrOre] = 1;
				    if(CelularData[playerid][CelularAberto] == 1)
					{
					    SumirCelular(playerid);
					}
					MostrarCelularLigacao(playerid);
					CelularData[playerid][LigandoParaNum] = numero;
					CelularData[playerid][LigandoParaNumAtendido] = 0;

				    PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][1], 0x111111FF);
					PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], "Numero~n~inexistente");
				 	PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][1]);
				}
				else
				{
				    CelularData[playerid][UsandoCelOrOre] = 2;
				    CelularData[playerid][LigandoParaNum] = numero;
				    CelularData[playerid][LigandoParaNumAtendido] = 0;

				    CelularData[playerid][LigandoOrelhao] = id_orelhao;
				    CelularData[playerid][LigandoOrelhaoAtendido] = 0;
				    CelularData[playerid][AtendeuOrelhao] = 999;

				    TelPublico[id_orelhao][orLigou] = playerid;
				    TelPublico[id_orelhao][orTocando] = 0;
				    TelPublico[id_orelhao][orUsando] = 1;

				    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Numero inexistente");
				}
			}
			else if(CelularData[encontrado][EmLigacao] != 999 || CelularData[encontrado][LigandoPara] != 999 || CelularData[encontrado][LigandoParaNum] != 999)
			{
			    if(id_orelhao == -1)
			    {
			        CelularData[playerid][UsandoCelOrOre] = 1;
				    if(CelularData[playerid][CelularAberto] == 1)
					{
					    SumirCelular(playerid);
					}
					MostrarCelularLigacao(playerid);
				 	CelularData[playerid][LigandoParaNum] = numero;
				 	CelularData[playerid][LigandoParaNumAtendido] = 0;

					PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][1], 0x111111FF);
					PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], "~n~Numero_ocupado");
				 	PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][1]);
				}
				else
				{
				    CelularData[playerid][UsandoCelOrOre] = 2;
				    CelularData[playerid][LigandoParaNum] = numero;
				    CelularData[playerid][LigandoParaNumAtendido] = 0;

				    CelularData[playerid][LigandoOrelhao] = id_orelhao;
				    CelularData[playerid][LigandoOrelhaoAtendido] = 0;
				    CelularData[playerid][AtendeuOrelhao] = 999;

				    TelPublico[id_orelhao][orLigou] = playerid;
				    TelPublico[id_orelhao][orTocando] = 0;
				    TelPublico[id_orelhao][orUsando] = 1;

				    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Numero ocupado");
				}
			}
			else
			{
			    if(id_orelhao == -1)
			    {
			        CelularData[playerid][UsandoCelOrOre] = 1;
				    CelularData[playerid][LigandoPara] = encontrado;
		            CelularData[playerid][LigandoParaNum] = numero;
		            CelularData[playerid][LigandoParaNumAtendido] = 0;

		            if(CelularData[playerid][CelularAberto] == 1)
					{
					    SumirCelular(playerid);
					}
					MostrarCelularLigacao(playerid);

					new str[126];
					format(str,sizeof(str),"Chamando~n~(%d)", numero);

					PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][1], 0x111111FF);
					PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], str);
				 	PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][1]);

					format(str,sizeof(str),"O seu telefone está tocando. Ligação de #%d. ((Utilize /atender))", CelularData[playerid][celNumero]);
				    SendClientMessage(encontrado, COLOR_YELLOW, str);
				    ToqueDeCelular(encontrado);
				}
				else
				{
				    CelularData[playerid][UsandoCelOrOre] = 2;
				    CelularData[playerid][LigandoPara] = encontrado;
		            CelularData[playerid][LigandoParaNum] = numero;
		            CelularData[playerid][LigandoParaNumAtendido] = 0;

				    CelularData[playerid][LigandoOrelhao] = id_orelhao;
				    CelularData[playerid][LigandoOrelhaoAtendido] = 0;
				    CelularData[playerid][AtendeuOrelhao] = 999;

				    TelPublico[id_orelhao][orLigou] = playerid;
				    TelPublico[id_orelhao][orTocando] = 0;
				    TelPublico[id_orelhao][orUsando] = 1;

                    new str[126];
					format(str,sizeof(str),"Chamando %d", numero);
				    SendClientMessage(playerid, COLOR_WHITE, str);

                    new numexib[20];
					format(numexib,sizeof(numexib),"024-%.3s-%.3s", TelPublico[id_orelhao][orPrefixo],TelPublico[id_orelhao][orNumero]);

					format(str,sizeof(str),"O seu telefone está tocando. Ligação de #%s. ((Utilize /atender))", numexib);
				    SendClientMessage(encontrado, COLOR_YELLOW, str);
				    ToqueDeCelular(encontrado);
				}
			}
		}
		else if(numero == 190)
		{
		    if(id_orelhao == -1)
		    {
			    CelularData[playerid][UsandoCelOrOre] = 1;
			    CelularData[playerid][LigandoParaNum] = 190;
			    CelularData[playerid][LigandoParaNumAtendido] = 0;
				new str[56], tempo = randomEx(4, 10);
				format(str,sizeof(str),"Chamando~n~(%d)", numero);

				if(CelularData[playerid][CelularAberto] == 1)
				{
		  			SumirCelular(playerid);
				}
				MostrarCelularLigacao(playerid);

				PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][1], 0x111111FF);
				PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], str);
				PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][1]);

				CelularData[playerid][DelayCelular] = SetTimerEx("TempoParaAtenderem", (tempo*1000), false, "dd", playerid,1);
			}
			else
			{
			    CelularData[playerid][UsandoCelOrOre] = 2;
			    CelularData[playerid][LigandoPara] = encontrado;
       			CelularData[playerid][LigandoParaNum] = numero;
   				CelularData[playerid][LigandoParaNumAtendido] = 0;

			    CelularData[playerid][LigandoOrelhao] = id_orelhao;
			    CelularData[playerid][LigandoOrelhaoAtendido] = 0;
			    CelularData[playerid][AtendeuOrelhao] = 999;

			    TelPublico[id_orelhao][orLigou] = playerid;
			    TelPublico[id_orelhao][orTocando] = 0;
			    TelPublico[id_orelhao][orUsando] = 1;

			    new str[56], tempo = randomEx(4, 10);
			    format(str,sizeof(str),"[ORELHÃO] Ligando para %d, aguarde até ser atendido.", numero);
			    SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);

			    CelularData[playerid][DelayCelular] = SetTimerEx("TempoParaAtenderem", (tempo*1000), false, "dd", playerid,2);
			}
	 	}
	 	else if(numero == 444)
		{
		    if(GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode chamar um taxi de dentro de um interior.");
		    if(id_orelhao == -1)
		    {
			    CelularData[playerid][UsandoCelOrOre] = 1;
			    CelularData[playerid][LigandoParaNum] = 444;
			    CelularData[playerid][LigandoParaNumAtendido] = 0;
				new str[56], tempo = randomEx(4, 10);
				format(str,sizeof(str),"Chamando~n~(%d)", numero);

				if(CelularData[playerid][CelularAberto] == 1)
				{
		  			SumirCelular(playerid);
				}
				MostrarCelularLigacao(playerid);

				PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][1], 0x111111FF);
				PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], str);
				PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][1]);

				CelularData[playerid][DelayCelular] = SetTimerEx("TempoParaAtenderem", (tempo*1000), false, "dd", playerid,1);
			}
			else
			{
			    CelularData[playerid][UsandoCelOrOre] = 2;
			    CelularData[playerid][LigandoPara] = encontrado;
       			CelularData[playerid][LigandoParaNum] = numero;
   				CelularData[playerid][LigandoParaNumAtendido] = 0;

			    CelularData[playerid][LigandoOrelhao] = id_orelhao;
			    CelularData[playerid][LigandoOrelhaoAtendido] = 0;
			    CelularData[playerid][AtendeuOrelhao] = 999;

			    TelPublico[id_orelhao][orLigou] = playerid;
			    TelPublico[id_orelhao][orTocando] = 0;
			    TelPublico[id_orelhao][orUsando] = 1;

			    new str[56], tempo = randomEx(4, 10);
			    format(str,sizeof(str),"[ORELHÃO] Ligando para %d, aguarde até ser atendido.", numero);
			    SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);

			    CelularData[playerid][DelayCelular] = SetTimerEx("TempoParaAtenderem", (tempo*1000), false, "dd", playerid,2);
			}
	 	}
	 	else if(numero == 555)
		{
		    if(GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode chamar um guincho de dentro de um interior.");
		    if(id_orelhao == -1)
		    {
			    CelularData[playerid][UsandoCelOrOre] = 1;
			    CelularData[playerid][LigandoParaNum] = 555;
			    CelularData[playerid][LigandoParaNumAtendido] = 0;
				new str[56], tempo = randomEx(4, 10);
				format(str,sizeof(str),"Chamando~n~(%d)", numero);

				if(CelularData[playerid][CelularAberto] == 1)
				{
		  			SumirCelular(playerid);
				}
				MostrarCelularLigacao(playerid);

				PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][1], 0x111111FF);
				PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], str);
				PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][1]);

				CelularData[playerid][DelayCelular] = SetTimerEx("TempoParaAtenderem", (tempo*1000), false, "dd", playerid,1);
			}
			else
			{
			    CelularData[playerid][UsandoCelOrOre] = 2;
			    CelularData[playerid][LigandoPara] = encontrado;
       			CelularData[playerid][LigandoParaNum] = numero;
   				CelularData[playerid][LigandoParaNumAtendido] = 0;

			    CelularData[playerid][LigandoOrelhao] = id_orelhao;
			    CelularData[playerid][LigandoOrelhaoAtendido] = 0;
			    CelularData[playerid][AtendeuOrelhao] = 999;

			    TelPublico[id_orelhao][orLigou] = playerid;
			    TelPublico[id_orelhao][orTocando] = 0;
			    TelPublico[id_orelhao][orUsando] = 1;

			    new str[56], tempo = randomEx(4, 10);
			    format(str,sizeof(str),"[ORELHÃO] Ligando para %d, aguarde até ser atendido.", numero);
			    SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);

			    CelularData[playerid][DelayCelular] = SetTimerEx("TempoParaAtenderem", (tempo*1000), false, "dd", playerid,2);
			}
	 	}
	 	else if(numero == 222) {
		    if(id_orelhao == -1)
		    {
			    CelularData[playerid][UsandoCelOrOre] = 1;
			    CelularData[playerid][LigandoParaNum] = 222;
			    CelularData[playerid][LigandoParaNumAtendido] = 0;
				new str[56], tempo = randomEx(4, 10);
				format(str,sizeof(str),"Chamando~n~(%d)", numero);

				if(CelularData[playerid][CelularAberto] == 1) {
		  			SumirCelular(playerid);
				}
				MostrarCelularLigacao(playerid);

				PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][1], 0x111111FF);
				PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], str);
				PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][1]);

				CelularData[playerid][DelayCelular] = SetTimerEx("TempoParaAtenderem", (tempo*1000), false, "dd", playerid,1);
			}
			else
			{
			    CelularData[playerid][UsandoCelOrOre] = 2;
			    CelularData[playerid][LigandoPara] = encontrado;
       			CelularData[playerid][LigandoParaNum] = numero;
   				CelularData[playerid][LigandoParaNumAtendido] = 0;

			    CelularData[playerid][LigandoOrelhao] = id_orelhao;
			    CelularData[playerid][LigandoOrelhaoAtendido] = 0;
			    CelularData[playerid][AtendeuOrelhao] = 999;

			    TelPublico[id_orelhao][orLigou] = playerid;
			    TelPublico[id_orelhao][orTocando] = 0;
			    TelPublico[id_orelhao][orUsando] = 1;

			    new str[56], tempo = randomEx(4, 10);
			    format(str,sizeof(str),"[ORELHÃO] Ligando para %d, aguarde até ser atendido.", numero);
			    SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);

			    CelularData[playerid][DelayCelular] = SetTimerEx("TempoParaAtenderem", (tempo*1000), false, "dd", playerid,2);
			}
	 	}
	 	else
	 	{
	 	    if(id_orelhao == -1)
		    {
		 	    CelularData[playerid][UsandoCelOrOre] = 1;
		  		if(CelularData[playerid][CelularAberto] == 1)
				{
		  			SumirCelular(playerid);
				}
				MostrarCelularLigacao(playerid);
				CelularData[playerid][LigandoParaNum] = numero;
				CelularData[playerid][LigandoParaNumAtendido] = 0;

				PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][1], 0x111111FF);
				PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], "Numero~n~inexistente");
				PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][1]);
			}
			else
			{
			    CelularData[playerid][UsandoCelOrOre] = 2;
			    CelularData[playerid][LigandoPara] = encontrado;
       			CelularData[playerid][LigandoParaNum] = numero;
   				CelularData[playerid][LigandoParaNumAtendido] = 0;

			    CelularData[playerid][LigandoOrelhao] = id_orelhao;
			    CelularData[playerid][LigandoOrelhaoAtendido] = 0;
			    CelularData[playerid][AtendeuOrelhao] = 999;

			    TelPublico[id_orelhao][orLigou] = playerid;
			    TelPublico[id_orelhao][orTocando] = 0;
			    TelPublico[id_orelhao][orUsando] = 1;
			    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Número inexistente.");
			}
		}
	}
	else if(tipo == 2)// Celular para Orelhão
	{
	    CelularData[playerid][UsandoCelOrOre] = 1;
	    CelularData[playerid][LigandoOrelhao] = id_orelhao;
	    CelularData[playerid][LigandoOrelhaoAtendido] = 0;
	    CelularData[playerid][AtendeuOrelhao] = 999;
	    TelPublico[id_orelhao][orLigou] = playerid;
	    TelPublico[id_orelhao][orAtendeu] = 999;
	    TelPublico[id_orelhao][orTocando] = 1;
	    TelPublico[id_orelhao][orUsando] = 0;
	    if(IsValidDynamic3DTextLabel(TelPublico[id_orelhao][orTextRing])) DestroyDynamic3DTextLabel(TelPublico[id_orelhao][orTextRing]);

     	TelPublico[id_orelhao][orTextRing] = CreateDynamic3DTextLabel("** Telefone Público esta tocando **\n(( /orelhao para atende-lo ))", COLOR_PURPLE, TelPublico[id_orelhao][orX],TelPublico[id_orelhao][orY],TelPublico[id_orelhao][orZ]+1.2, 30.0);

		new str[126], numexib[36];
		format(numexib,sizeof(numexib),"024-%.3s-%.3s",TelPublico[id_orelhao][orPrefixo],TelPublico[id_orelhao][orNumero]);

		format(str,sizeof(str),"Chamando~n~(%s)", numexib);

		if(CelularData[playerid][CelularAberto] == 1)
		{
			SumirCelular(playerid);
		}
		MostrarCelularLigacao(playerid);

		PlayerTextDrawColor(playerid, Celular_PlayerV[playerid][1], 0x111111FF);
		PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], str);
		PlayerTextDrawShow(playerid,Celular_PlayerV[playerid][1]);
	}
	else if(tipo == 3)// Orelhão para orelhão
	{
	    CelularData[playerid][UsandoCelOrOre] = 2;
	    CelularData[playerid][LigandoOrelhao] = numero;
	    CelularData[playerid][LigandoOrelhaoAtendido] = 0;
	    CelularData[playerid][AtendeuOrelhao] = 999;
	    TelPublico[numero][orLigou] = playerid;
	    TelPublico[numero][orTocando] = 1;
	    TelPublico[numero][orUsando] = 0;
		TelPublico[numero][orAtendeu] = 999;

		if(IsValidDynamic3DTextLabel(TelPublico[id_orelhao][orTextRing])) DestroyDynamic3DTextLabel(TelPublico[id_orelhao][orTextRing]);

	    TelPublico[id_orelhao][orTextRing] = CreateDynamic3DTextLabel("** Telefone Público esta tocando **\n(( /orelhao para atende-lo ))", COLOR_PURPLE, TelPublico[id_orelhao][orX],TelPublico[id_orelhao][orY],TelPublico[id_orelhao][orZ]+1.2, 40.0);

	    new str[56], numexib[15];
	    format(numexib,sizeof(numexib),"024-%.3s-%.3s", TelPublico[numero][orPrefixo],TelPublico[numero][orNumero]);

	    format(str,sizeof(str),"[ORELHÃO] Ligando para %s.", numexib);
	    SendClientMessage(playerid, COLOR_WHITE, str);
	}
	return 1;
}

public TempoParaAtenderem(playerid,tipo) //Tipo 1: Celular | Tipo 2: Orelhão
{
	switch(CelularData[playerid][LigandoParaNum])
	{
	    case 190:
	    {
	        new str[256],strop[26];
	        if(tipo == 1)
	        {
	            format(strop,sizeof(strop),"[CELULAR]");
	            CelularData[playerid][LigandoParaNumAtendido] = 1;
	            CelularData[playerid][LigandoOrelhaoAtendido] = 0;
	        }
	        else
	        {
	            format(strop,sizeof(strop),"[ORELHÃO]");
	            CelularData[playerid][LigandoParaNumAtendido] = 0;
	            CelularData[playerid][LigandoOrelhaoAtendido] = 1;
	        }

	        new strr[24];
			new hour,mins,sec;
			gettime(hour,mins,sec);
			if(hour >= 6 && hour <= 12) format(strr, 24, "Bom dia");
			else if(hour >= 13 && hour <= 18) format(strr, 24, "Boa tarde");
			else format(strr, 24, "Boa noite");

	        CelularData[playerid][LigandoParaNumAtendido] = 1;
	        format(str,sizeof(str),"%s Atendente diz: Serviço de emergências %s, qual serviço você necessita? ((policia, bombeiros, ambos))", strop, strr);
	        SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);

			format(str,sizeof(str),"Em_chamada~n~(%d)~n~00:00:00", CelularData[playerid][LigandoParaNum]);
	        PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], str);
	    }
	    case 444:
	    {
	        new str[256],strop[26];
	        if(tipo == 1)
	        {
	            format(strop,sizeof(strop),"[CELULAR]");
	            CelularData[playerid][LigandoParaNumAtendido] = 1;
	            CelularData[playerid][LigandoOrelhaoAtendido] = 0;
	        }
	        else
	        {
	            format(strop,sizeof(strop),"[ORELHÃO]");
	            CelularData[playerid][LigandoParaNumAtendido] = 0;
	            CelularData[playerid][LigandoOrelhaoAtendido] = 1;
	        }

	        if(TaxiDrivers < 1)
      		{
			 	format(str,sizeof(str),"%s Atendente diz: Não temos Taxistas disponíveis no momento, tente em outro horário!", strop);
      			SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);
     			return 1;
        	}
        	if(TransportDuty[playerid] > 0)
        	{
         		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode ligar para um Taxista agora!");
           		return 1;
	        }

	        new strr[24];
			new hour,mins,sec;
			gettime(hour,mins,sec);
			if(hour >= 6 && hour <= 12) format(strr, 24, "Bom dia");
			else if(hour >= 13 && hour <= 18) format(strr, 24, "Boa tarde");
			else format(strr, 24, "Boa noite");

	        CelularData[playerid][LigandoParaNumAtendido] = 1;
	        format(str,sizeof(str),"%s Atendente diz: Los Santos Serviço %s, qual a sua localização por favor?", strop, strr);
	        SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);

			format(str,sizeof(str),"Em_chamada~n~(%d)~n~00:00:00", CelularData[playerid][LigandoParaNum]);
	        PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], str);
	    }
	    case 555:
	    {
	        new str[256],strop[26];
	        if(tipo == 1)
	        {
	            format(strop,sizeof(strop),"[CELULAR]");
	            CelularData[playerid][LigandoParaNumAtendido] = 1;
	            CelularData[playerid][LigandoOrelhaoAtendido] = 0;
	        }
	        else
	        {
	            format(strop,sizeof(strop),"[ORELHÃO]");
	            CelularData[playerid][LigandoParaNumAtendido] = 0;
	            CelularData[playerid][LigandoOrelhaoAtendido] = 1;
	        }

	        new strr[24];
			new hour,mins,sec;
			gettime(hour,mins,sec);
			if(hour >= 6 && hour <= 12) format(strr, 24, "Bom dia");
			else if(hour >= 13 && hour <= 18) format(strr, 24, "Boa tarde");
			else format(strr, 24, "Boa noite");

	        CelularData[playerid][LigandoParaNumAtendido] = 1;
	        format(str,sizeof(str),"%s Atendente diz: Los Santos serviço %s, qual a sua localização por favor?", strop, strr);
	        SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);

			format(str,sizeof(str),"Em_chamada~n~(%d)~n~00:00:00", CelularData[playerid][LigandoParaNum]);
	        PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], str);
	    }
	    case 222:
	    {
	        new str[256],strop[26];
	        if(tipo == 1)
	        {
	            format(strop,sizeof(strop),"[CELULAR]");
	            CelularData[playerid][LigandoParaNumAtendido] = 1;
	            CelularData[playerid][LigandoOrelhaoAtendido] = 0;
	        }
	        else
	        {
	            format(strop,sizeof(strop),"[ORELHÃO]");
	            CelularData[playerid][LigandoParaNumAtendido] = 0;
	            CelularData[playerid][LigandoOrelhaoAtendido] = 1;
	        }

	        new strr[24];
			new hour,mins,sec;
			gettime(hour,mins,sec);
			if(hour >= 6 && hour <= 12) format(strr, 24, "bom dia");
			else if(hour >= 13 && hour <= 18) format(strr, 24, "boa tarde");
			else format(strr, 24, "boa noite");

	        CelularData[playerid][LigandoParaNumAtendido] = 1;
	        format(str,sizeof(str),"%s Atendente diz: Serviço de Anúncios %s, o seu anúncio é de 'empresa' ou 'particular'?", strop, strr);
	        SendClientMessage(playerid, COLOR_LINHATELEFONICA, str);

			format(str,sizeof(str),"Em_chamada~n~(%d)~n~00:00:00", CelularData[playerid][LigandoParaNum]);
	        PlayerTextDrawSetString(playerid, Celular_PlayerV[playerid][1], str);
	    }
	}
	return 1;
}
//==============================================================================[Torres de Sinal]
stock Float:PegarSinalCelular(playerid)
{
	if(CelularData[playerid][UsandoCelOrOre] == 2) return 1000.0;
	new Float:SinalFinal = 0.0;

	new c = -1;
	if(PlayerInfo[playerid][pEntrouCasa] != -1)
	{
 		c = PlayerInfo[playerid][pEntrouCasa];

		if(HouseInfo[c][hExWorld] == 0)
	    {
		    for(new i = 0; i < MAX_TORRES; i++)
			{
			    if(IsPointInRangeOfPoint(HouseInfo[c][hExX],HouseInfo[c][hExY],HouseInfo[c][hExZ],TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ],TorreData[i][torSinal]))
				{
				    new Float:Sinal = GetPointDistanceFromPoint(HouseInfo[c][hExX],HouseInfo[c][hExY],HouseInfo[c][hExZ], TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]);
				    Sinal = TorreData[i][torSinal]-Sinal;
				    if(Sinal > SinalFinal) SinalFinal = Sinal;
				}
			}
		}
		else
		{
		    for(new i; i < MAX_COMPLEXOS; i++)
		    {
	        	if(ComplexoInfo[i][cID] == (HouseInfo[c][hExWorld]-1000))
	            {
	                c = ComplexoInfo[i][cID];
	                for(new tower = 0; tower < MAX_TORRES; tower++)
					{
					    if(IsPointInRangeOfPoint(ComplexoInfo[c][cExX],ComplexoInfo[c][cExY],ComplexoInfo[c][cExZ],TorreData[tower][torX], TorreData[tower][torY], TorreData[tower][torZ],TorreData[tower][torSinal]))
						{
						    new Float:Sinal = GetPointDistanceFromPoint(ComplexoInfo[c][cExX],ComplexoInfo[c][cExY],ComplexoInfo[c][cExZ], TorreData[tower][torX], TorreData[tower][torY], TorreData[tower][torZ]);
						    Sinal = TorreData[tower][torSinal]-Sinal;
						    if(Sinal > SinalFinal) SinalFinal = Sinal;
						}
					}
	                break;
	            }
			}
		}
	}
	else if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
	{
		c = PlayerInfo[playerid][pEntrouEmpresa];

		for(new i = 0; i < MAX_TORRES; i++)
		{
		    if(IsPointInRangeOfPoint(EmpInfo[c][eExX],EmpInfo[c][eExY],EmpInfo[c][eExZ],TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ],TorreData[i][torSinal]))
			{
			    new Float:Sinal = GetPointDistanceFromPoint(EmpInfo[c][eExX],EmpInfo[c][eExY],EmpInfo[c][eExZ], TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]);
			    Sinal = TorreData[i][torSinal]-Sinal;
			    if(Sinal > SinalFinal) SinalFinal = Sinal;
			}
		}
	}
	else if(PlayerInfo[playerid][pEntrouComplexo] != -1)
	{
		c = PlayerInfo[playerid][pEntrouComplexo];

		for(new i = 0; i < MAX_TORRES; i++)
		{
		    if(IsPointInRangeOfPoint(ComplexoInfo[c][cExX],ComplexoInfo[c][cExY],ComplexoInfo[c][cExZ],TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ],TorreData[i][torSinal]))
			{
			    new Float:Sinal = GetPointDistanceFromPoint(ComplexoInfo[c][cExX],ComplexoInfo[c][cExY],ComplexoInfo[c][cExZ], TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]);
			    Sinal = TorreData[i][torSinal]-Sinal;
			    if(Sinal > SinalFinal) SinalFinal = Sinal;
			}
		}
	}
	else if(PlayerInfo[playerid][pEntrouGaragem] != -1)
	{
		c = PlayerInfo[playerid][pEntrouGaragem];

		for(new i = 0; i < MAX_TORRES; i++)
		{
		    if(IsPointInRangeOfPoint(GaragemInfo[c][hExX],GaragemInfo[c][hExY],GaragemInfo[c][hExZ],TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ],TorreData[i][torSinal]))
			{
			    new Float:Sinal = GetPointDistanceFromPoint(GaragemInfo[c][hExX],GaragemInfo[c][hExY],GaragemInfo[c][hExZ], TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]);
			    Sinal = TorreData[i][torSinal]-Sinal;
			    if(Sinal > SinalFinal) SinalFinal = Sinal;
			}
		}
	}
 	else
 	{
		for(new i = 0; i < MAX_TORRES; i++)
		{
		    if(IsPlayerInRangeOfPoint(playerid,TorreData[i][torSinal],TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]))
			{
			    new Float:Sinal = GetPlayerDistanceFromPoint(playerid, TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]);
			    Sinal = TorreData[i][torSinal]-Sinal;
			    if(Sinal > SinalFinal) SinalFinal = Sinal;
			}
		}
	}
	return SinalFinal;
}

forward Float:GetPointDistanceFromPoint(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2);
stock Float:GetPointDistanceFromPoint(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)
{
    new Float:dist = floatsqroot(floatpower(x1 - x2, 2) + floatpower(y2 - y1, 2) + floatpower(z2 - z1, 2));
    return dist;
}

stock PegarSinalCelular_TorID(playerid)
{
	new Float:SinalFinal = 0.0, torreid = 0;
	for(new i = 0; i < MAX_TORRES; i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid,TorreData[i][torSinal],TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]))
		{
		    new Float:Sinal = GetPlayerDistanceFromPoint(playerid, TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]);
		    Sinal = TorreData[i][torSinal]-Sinal;
		    if(Sinal > SinalFinal){	SinalFinal = Sinal; torreid = i; }
		}
	}
	return torreid;
}

COMMAND:atorre(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 4) return 1;
    new option[11], variavel;
    new str[256];
	if(sscanf(params, "s[11]I(99)", option, variavel))
	{
		SendClientMessage(playerid, COLOR_WHITE, "AdmCmd: /atorre [opção]");
  		SendClientMessage(playerid, COLOR_WHITE, "Opções: criar, sinal, pos, torres, versinal");
		return 1;
	}
	else
	{
	    if(strcmp(option, "criar", true) == 0)
		{
			format(str,sizeof(str),"INSERT INTO torres (torSinal) VALUES ('100000')");
			mysql_function_query(Pipeline, str, true, "TorreCriada", "d",playerid);
		}
		else if(strcmp(option, "sinal", true) == 0)
		{
  			if(variavel == 99) return SendClientMessage(playerid, COLOR_WHITE, "/atorre sinal [torre id]");

            SetPVarInt(playerid, "EditandoTorre", variavel);
            format(str, sizeof(str), "Sinal da Torre %d", variavel);
            Dialog_Show(playerid, DIALOG_TORRE_SINAL, DIALOG_STYLE_LIST, str, "Sinal: 3000m\nSinal: 6000m\nSinal: 8000m\nSinal: 10000m\nSinal: 100000m", "Alterar", "Cancelar");
		}
		else if(strcmp(option, "pos", true) == 0)
		{
		    if(variavel == 99) return SendClientMessage(playerid, COLOR_WHITE, "/atorre pos [torre id]");

		    SetPVarInt(playerid, "EditandoTorre", variavel);
		    EditDynamicObject(playerid, TorreData[variavel][orObj]);
		}
		else if(strcmp(option, "versinal", true) == 0)
		{
		    format(str, sizeof(str), "AdmCmd: Sinal na área %.4f.", PegarSinalCelular(playerid));
			SendClientMessage(playerid, COLOR_WHITE, str);
		}
		else if(strcmp(option, "torres", true) == 0)
		{
		    for(new i = 0; i < MAX_TORRES; i++)
			{
			    if(TorreData[i][torSinal] != 0)
			    {
				    if(IsPlayerInRangeOfPoint(playerid,TorreData[i][torSinal],TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]))
					{
					    new Float:Sinal = GetPlayerDistanceFromPoint(playerid, TorreData[i][torX], TorreData[i][torY], TorreData[i][torZ]);
					    Sinal = TorreData[i][torSinal]-Sinal;

					    format(str, sizeof(str), "|- Torre %d | Sinal: %.4f -|", i, Sinal);
					    SendClientMessage(playerid, COLOR_WHITE, str);
					}
				}
			}
		}
	}
	return 1;
}

Dialog:DIALOG_TORRE_SINAL(playerid, response, listitem, inputtext[])
{
    if(!response) Dialog_Show(playerid, DIALOG_TORRE_SINAL, DIALOG_STYLE_LIST, "Sinal da Torre", "Sinal: 3000m\nSinal: 6000m\nSinal: 8000m\nSinal: 10000m\nSinal: 100000m", "Alterar", "Cancelar");
	else
	{
	    new torre_id = GetPVarInt(playerid, "EditandoTorre");
	    switch(listitem)
	    {
	        case 0: TorreData[torre_id][torSinal] = 3000.0;
	        case 1: TorreData[torre_id][torSinal] = 6000.0;
	        case 2: TorreData[torre_id][torSinal] = 8000.0;
	        case 3: TorreData[torre_id][torSinal] = 10000.0;
	        case 4: TorreData[torre_id][torSinal] = 100000.0;
	    }
	    SalvarTorre(torre_id);
	    SetPVarInt(playerid, "EditandoTorre", 0);
	}
	return 1;
}

public TorreCriada(playerid)
{
    new id = cache_insert_id(), str[56];
    TorreData[id][torID] = id;
    TorreData[id][torSinal] = 1000000.0;

    format(str, sizeof(str), "AdmCmd: Você criou a torre %d.", id);
	SendClientMessage(playerid, COLOR_WHITE, str);

    SetPVarInt(playerid, "EditandoTorre", id);

    new Float:X, Float:Y, Float:Z;
    GetPlayerPos(playerid, X, Y, Z);
    TorreData[id][orObj] = CreateDynamicObject(3763, X+8, Y+10, Z, 0.0, 0.0, 0.0, 0, 0, -1, 50000.0);
    EditDynamicObject(playerid, TorreData[id][orObj]);
    return 1;
}

public AtualizarTorre(torreid)
{
    if (IsValidDynamicObject(TorreData[torreid][orObj])) DestroyDynamicObject(TorreData[torreid][orObj]);

    TorreData[torreid][orObj] = CreateDynamicObject(3763, TorreData[torreid][torX], TorreData[torreid][torY], TorreData[torreid][torZ], 0.0, 0.0, TorreData[torreid][torR], 0, 0, -1, 50000.0);
	return 1;
}

public SalvarTorre(torreid)
{
	new query[1024];
	format(query, sizeof(query), "UPDATE `torres` SET `torSinal`='%.2f', `torX`='%.4f', `torY`='%.4f', `torZ`='%.4f', `torR`='%.4f' WHERE `torID` = '%d'",
		TorreData[torreid][torSinal],
		TorreData[torreid][torX],
		TorreData[torreid][torY],
		TorreData[torreid][torZ],
		TorreData[torreid][torR],
  		TorreData[torreid][torID]);
	mysql_function_query(Pipeline, query, true, "", "");
	return 1;
}

public CarregandoTorres()
{
    new Rows, Fields;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		new tmp[130];
		for(new i ; i < Rows; i++) if(i < MAX_TORRES)
		{
			cache_get_field_content(i, "torID", tmp);
			new torreid = strval(tmp);
		 	TorreData[torreid][torID] = strval(tmp);

			cache_get_field_content(i, "torSinal", tmp);
			TorreData[torreid][torSinal] = floatstr(tmp);

			cache_get_field_content(i, "torX", tmp);
			TorreData[torreid][torX] = floatstr(tmp);

			cache_get_field_content(i, "torY", tmp);
			TorreData[torreid][torY] = floatstr(tmp);

			cache_get_field_content(i, "torZ", tmp);
			TorreData[torreid][torZ] = floatstr(tmp);

			cache_get_field_content(i, "torR", tmp);
			TorreData[torreid][torR] = floatstr(tmp);

			if(TorreData[torreid][torSinal] > 0)
			{
                AtualizarTorre(torreid);
			}
		}
	}
	return 1;
}

COMMAND:atelpub(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pAdmin] < 4) return 1;
    new option[11], variavel;
    new str[256];
	if(sscanf(params, "s[11]I(99)", option, variavel))
	{
		SendClientMessage(playerid, COLOR_WHITE, "AdmCmd: /atelpub [opção]");
  		SendClientMessage(playerid, COLOR_WHITE, "Opções: criar, deletar, bairro, pos, ids");
		return 1;
	}
	else
	{
	    if(strcmp(option, "criar", true) == 0)
		{
			format(str,sizeof(str),"INSERT INTO telpubs (orPrefixo) VALUES ('1')");
			mysql_function_query(Pipeline, str, true, "TelPubCriado", "d",playerid);
			return 1;
		}
		else if(strcmp(option, "bairro", true) == 0)
		{
  			format(str, sizeof(str),"AdmCmd: Bairro atual: %s", GetPlayerLocation(playerid));
    		SendClientMessage(playerid, COLOR_WHITE, str);
    		return 1;
		}
		else if(strcmp(option, "pos", true) == 0)
		{
		    if(variavel == 99) return SendClientMessage(playerid, COLOR_WHITE, "/atelpub pos [tel id]");

		    SetPVarInt(playerid, "EditandoTelPub", variavel);
		    EditDynamicObject(playerid, TelPublico[variavel][orObj]);
		    return 1;
		}
		else if(strcmp(option, "ids", true) == 0)
		{
		    for(new i = 0; i < MAX_ORELHOES; i++)
			{
			    if(TelPublico[i][orCriado] == 1)
			    {
				    if(TelPublico[i][orID] != 0)
				    {
					    if(IsPlayerInRangeOfPoint(playerid,30.0,TelPublico[i][orX], TelPublico[i][orY], TelPublico[i][orZ]))
						{
						    new Float:Sinal = GetPlayerDistanceFromPoint(playerid, TelPublico[i][orX], TelPublico[i][orY], TelPublico[i][orZ]);
						    format(str, sizeof(str), "|- Tel: %d | Distancia: %.4f | Número: 024-%.3s-%.3s -|", i, Sinal, TelPublico[i][orPrefixo], TelPublico[i][orNumero]);
						    SendClientMessage(playerid, COLOR_WHITE, str);
						}
					}
				}
			}
			return 1;
		}
		else if(strcmp(option, "deletar", true) == 0)
		{
		    if(variavel == 99) return SendClientMessage(playerid, COLOR_WHITE, "/atelpub deletar [tel id]");

            TelPublico[variavel][orCriado] = 0;
			new query[1024];
			format(query, sizeof(query), "UPDATE `telpubs` SET `deletado`='1' WHERE `orID` = '%d'", TelPublico[variavel][orID]);
			mysql_function_query(Pipeline, query, true, "", "");

			if (IsValidDynamicObject(TelPublico[variavel][orObj])) DestroyDynamicObject(TelPublico[variavel][orObj]);

			return 1;
		}
	}
	return 1;
}

stock GetPlayerLocation(playerid)
{
	static
	    Float:fX,
	    Float:fY,
		Float:fZ,
		id;

	if( (id = PlayerInfo[playerid][pEntrouCasa]) != -1)
	{
	    if(HouseInfo[id][hExWorld] == 0)
	    {
		    fX = HouseInfo[id][hExX];
		    fY = HouseInfo[id][hExY];
		 	fZ = HouseInfo[id][hExZ];
		}
		else
		{
		    for(new i; i < MAX_COMPLEXOS; i++)
		    {
	        	if(ComplexoInfo[i][cID] == (HouseInfo[id][hExWorld]-1000))
	            {
	                fX = ComplexoInfo[i][cExX];
					fY = ComplexoInfo[i][cExY];
					fZ = ComplexoInfo[i][cExZ];
	                break;
	            }
			}
		}
	}
	else if((id = PlayerInfo[playerid][pEntrouGaragem]) != -1)
	{
	    fX = GaragemInfo[id][hExX];
		fY = GaragemInfo[id][hExY];
		fZ = GaragemInfo[id][hExZ];
	}
	else if((id = PlayerInfo[playerid][pEntrouComplexo]) != -1)
	{
	    fX = ComplexoInfo[id][cExX];
		fY = ComplexoInfo[id][cExY];
		fZ = ComplexoInfo[id][cExZ];
	}
	else if((id = PlayerInfo[playerid][pEntrouEmpresa]) != -1)
	{
	    fX = EmpInfo[id][eExX];
	    fY = EmpInfo[id][eExY];
	    fZ = EmpInfo[id][eExZ];
	}
	else
		GetPlayerPos(playerid, fX, fY, fZ);

	format(string, 32, GetLocation(fX, fY, fZ));
	return string;
}

	 	    	   /* if(HouseInfo[i][hExWorld] != 0)
	 	    	    {
	 	    	        SetPlayerInterior(playerid, HouseInfo[i][hExInt]);
			    	    SetPlayerVirtualWorld(playerid,HouseInfo[i][hExWorld]);
		  	    		SetPlayerPosFreeze(playerid,HouseInfo[i][hExX],HouseInfo[i][hExY],HouseInfo[i][hExZ], 1);
		    	    }?*/


public TelPubCriado(playerid)
{
    new id = cache_insert_id(), str[56];
    TelPublico[id][orID] = id;

	new bairro_player[24], num_ore = 1;

    format(bairro_player, 24, "%s", GetPlayerLocation(playerid));

	if(strfind(bairro_player, "Los Santos International", true) != -1 || strfind(bairro_player, "Ocean Docks", true) != -1) format(TelPublico[id][orPrefixo], 5, "218");
 	else if(strfind(bairro_player, "Santa Maria Beach", true) != -1 || strfind(bairro_player, "Verona Beach", true) != -1 || strfind(bairro_player, "Marina", true) != -1) format(TelPublico[id][orPrefixo], 5, "313");
  	else if(strfind(bairro_player, "Rodeo", true) != -1) format(TelPublico[id][orPrefixo], 5, "802");
   	else if(strfind(bairro_player, "Temple", true) != -1 || strfind(bairro_player, "Market", true) != -1) format(TelPublico[id][orPrefixo], 5, "343");
	else if(strfind(bairro_player, "Downtown", true) != -1 || strfind(bairro_player, "Pershing Square", true) != -1) format(TelPublico[id][orPrefixo], 5, "206");
    else if(strfind(bairro_player, "Glen Park", true) != -1) format(TelPublico[id][orPrefixo], 5, "826");
    else if(strfind(bairro_player, "Commerce", true) != -1) format(TelPublico[id][orPrefixo], 5, "310");
    else if(strfind(bairro_player, "Verdant Bluffs", true) != -1 || strfind(bairro_player, "Conference Center", true) != -1) format(TelPublico[id][orPrefixo], 5, "216");
    else if(strfind(bairro_player, "Idlewood", true) != -1 || strfind(bairro_player, "Little Mexico", true) != -1) format(TelPublico[id][orPrefixo], 5, "415");
    else if(strfind(bairro_player, "Ganton", true) != -1 || strfind(bairro_player, "Willowfield", true) != -1 || strfind(bairro_player, "Playa Del Seville", true) != -1 || strfind(bairro_player, "El Corona", true) != -1) format(TelPublico[id][orPrefixo], 5, "516");
    else if(strfind(bairro_player, "East Beach", true) != -1 || strfind(bairro_player, "Los Flores", true) != -1) format(TelPublico[id][orPrefixo], 5, "616");
    else if(strfind(bairro_player, "Jefferson", true) != -1 || strfind(bairro_player, "East Los Santos", true) != -1 || strfind(bairro_player, "Las Colinas", true) != -1) format(TelPublico[id][orPrefixo], 5, "424");
    else if(strfind(bairro_player, "Vinewood", true) != -1 || strfind(bairro_player, "Richman", true) != -1) format(TelPublico[id][orPrefixo], 5, "806");
    else if(strfind(bairro_player, "Mulholland", true) != -1 || strfind(bairro_player, "Mulholland Intersection", true) != -1) format(TelPublico[id][orPrefixo], 5, "795");
    else if(strfind(bairro_player, "North Rock", true) != -1) format(TelPublico[id][orPrefixo], 5, "828");
    else if(strfind(bairro_player, "Palomino Creek", true) != -1) format(TelPublico[id][orPrefixo], 5, "835");
    else if(strfind(bairro_player, "Montgomery", true) != -1) format(TelPublico[id][orPrefixo], 5, "824");
    else if(strfind(bairro_player, "Hampton Barns", true) != -1) format(TelPublico[id][orPrefixo], 5, "871");
    else if(strfind(bairro_player, "Blueberry", true) != -1 || strfind(bairro_player, "Blueberry Acres", true) != -1) format(TelPublico[id][orPrefixo], 5, "890");
    else if(strfind(bairro_player, "Angel Pine", true) != -1) format(TelPublico[id][orPrefixo], 5, "656");
    else if(strfind(bairro_player, "Fallen Tree", true) != -1) format(TelPublico[id][orPrefixo], 5, "891");
    else if(strfind(bairro_player, "Dillimore", true) != -1) format(TelPublico[id][orPrefixo], 5, "808");
    else if(strfind(bairro_player, "Fort Carson", true) != -1) format(TelPublico[id][orPrefixo], 5, "855");
    else if(strfind(bairro_player, "Hunter Quarry", true) != -1) format(TelPublico[id][orPrefixo], 5, "857");
    else if(strfind(bairro_player, "US Marine Corps", true) != -1) format(TelPublico[id][orPrefixo], 5, "851");
    else format(TelPublico[id][orPrefixo], 5, "999");
	//
	for(new i = 0; i < MAX_ORELHOES; i++)
	{
	    if(TelPublico[i][orCriado] == 1)
	    {
		    if(TelPublico[i][orID] != 0)
			{
		        if(TelPublico[i][orPrefixo] == TelPublico[id][orPrefixo])
		        {
					num_ore++;
				}
			}
		}
	}

	if(num_ore < 10) format(TelPublico[id][orNumero], 5, "00%d", num_ore);
	else if(10 <= num_ore < 100) format(TelPublico[id][orNumero], 5, "0%d", num_ore);
	else format(TelPublico[id][orNumero], 5, "%d", num_ore);

    format(str, sizeof(str), "AdmCmd: ID:%d | Numero do Telefone Publico: 024-%.3s-%.3s.", id,TelPublico[id][orPrefixo], TelPublico[id][orNumero]);
	SendClientMessage(playerid, COLOR_LIGHTRED, str);

    SetPVarInt(playerid, "EditandoTelPub", id);

    TelPublico[id][orCriado] = 1;

    new Float:X, Float:Y, Float:Z;
    GetPlayerPos(playerid, X, Y, Z);
    //TelPublico[id][orObj] = CreateDynamicObject(1216, X+2, Y+2, Z, 0.0, 0.0, 0.0, 0, 0, -1, 100.0);
	TelPublico[id][orObj] = CreateDynamicObject(1216, X+2, Y+2, Z, 0.0, 0.0, 0.0, 0, 0, -1, 100.0);
    EditDynamicObject(playerid, TelPublico[id][orObj]);
    return 1;
}

public AtualizarTelPub(id)
{
    if (IsValidDynamicObject(TelPublico[id][orObj])) DestroyDynamicObject(TelPublico[id][orObj]);

    //TelPublico[id][orObj] = CreateDynamicObject(1216, TelPublico[id][orX], TelPublico[id][orY], TelPublico[id][orZ], 0.0, 0.0, TelPublico[id][orR], 0, 0, -1, 500.0);
    TelPublico[id][orObj] = CreateDynamicObject(1216, TelPublico[id][orX], TelPublico[id][orY], TelPublico[id][orZ], 0.0, 0.0, TelPublico[id][orR], 0, 0, -1, 500.0);
	return 1;
}

public SalvarTelPub(id)
{
	new query[1024];
	format(query, sizeof(query), "UPDATE `telpubs` SET `orX`='%0.5f', `orY`='%.5f', `orZ`='%.5f', `orR`='%.5f', `orPrefixo`='%s', `orNumero`='%s' WHERE `orID` = '%d'",
		TelPublico[id][orX],
		TelPublico[id][orY],
		TelPublico[id][orZ],
		TelPublico[id][orR],
		TelPublico[id][orPrefixo],
		TelPublico[id][orNumero],
  		TelPublico[id][orID]);
	mysql_function_query(Pipeline, query, true, "", "");
	return 1;
}

public CarregandoTelPub()
{
    new Rows, Fields;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		new tmp[130];
		for(new i ; i < Rows; i++) if(i < MAX_ORELHOES)
		{
			cache_get_field_content(i, "orID", tmp);
			new telid = strval(tmp);
		 	TelPublico[telid][orID] = strval(tmp);

		 	TelPublico[telid][orCriado] = 1;

			cache_get_field_content(i, "orX", tmp);
			TelPublico[telid][orX] = floatstr(tmp);

			cache_get_field_content(i, "orY", tmp);
			TelPublico[telid][orY] = floatstr(tmp);

			cache_get_field_content(i, "orZ", tmp);
			TelPublico[telid][orZ] = floatstr(tmp);

			cache_get_field_content(i, "orR", tmp);
			TelPublico[telid][orR] = floatstr(tmp);

			cache_get_field_content(i,"orPrefixo",tmp);
			format(TelPublico[telid][orPrefixo],5,"%.3s",tmp);

			cache_get_field_content(i,"orNumero",tmp);
			format(TelPublico[telid][orNumero],5,"%.3s",tmp);

			if(TelPublico[telid][orID] > 0)
			{
                AtualizarTelPub(telid);
			}
		}
	}
	return 1;
}

public CarregarSMS(playerid)
{
	new maxsms = GetPlayerMaxSMSCel(playerid);
    new Rows, Fields;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		new tmp[130];
		for(new i ; i < Rows; i++) if(i < maxsms)
		{
			cache_get_field_content(i, "ativo", tmp);
			MensagensInfo[playerid][i][smsAtivo] = strval(tmp);

			if(MensagensInfo[playerid][i][smsAtivo] != 0)
			{
				cache_get_field_content(i, "lido", tmp);
				MensagensInfo[playerid][i][smsLido] = strval(tmp);

				cache_get_field_content(i,"mensagem",tmp);
				format(MensagensInfo[playerid][i][smsMensagem],256,"%s",tmp);

				cache_get_field_content(i,"mensageml",tmp);
				format(MensagensInfo[playerid][i][smsMensagemLimpa],14,"%s",tmp);

				cache_get_field_content(i, "por", tmp);
				MensagensInfo[playerid][i][smsPor] = strval(tmp);

				cache_get_field_content(i,"data",tmp);
				format(MensagensInfo[playerid][i][smsData],57,"%s",tmp);
			}
		}
	}
}

public SalvarSMS(playerid)
{
    new maxsms = GetPlayerMaxSMSCel(playerid);
	new query[1024];
	for(new sms_id = 0; sms_id < maxsms; sms_id++)
	{
	        new mensagemlimpa[128], mensagemnorm[256];
	        mysql_real_escape_string(MensagensInfo[playerid][sms_id][smsMensagem],mensagemnorm);
			mysql_real_escape_string(MensagensInfo[playerid][sms_id][smsMensagemLimpa],mensagemlimpa);

			format(query, sizeof(query), "UPDATE `sms` SET `id`='%d', `ativo`='%d', `lido`='%d', `mensageml`='%s', `por`='%d', `data`='%s' WHERE `dono` = '%d' AND `id` = '%d'",
				sms_id,
				MensagensInfo[playerid][sms_id][smsAtivo],
				MensagensInfo[playerid][sms_id][smsLido],
				mensagemlimpa,
				MensagensInfo[playerid][sms_id][smsPor],
				MensagensInfo[playerid][sms_id][smsData],
	 			PlayerInfo[playerid][pID],
			 	sms_id);

	  		mysql_function_query(Pipeline, query, false, "", "");

	  		format(query, sizeof(query), "UPDATE `sms` SET `mensagem`='%s' WHERE `id` = '%d'",
				mensagemnorm,
			 	sms_id);

	  		mysql_function_query(Pipeline, query, false, "", "");
	}
	return 1;
}

CMD:contatoscel(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] < 3000) return 1;
	CarregarContatosCel(playerid);
	SCM(playerid, COLOR_LIGHTRED, "CONTATOS RECARREGADOS!");
	return 1;
}

public CarregarContatosCel(playerid)
{
	new maxconts = GetPlayerMaxContatosCel(playerid);
    new Rows, Fields;
	cache_get_data(Rows, Fields);
	if(Rows)
 	{
  		new tmp[130];
		for(new i ; i < Rows; i++) if(i < maxconts)
		{
			cache_get_field_content(i,"nome",tmp);
			format(ContatoInfo[playerid][i][ContatoNome],24,"%s",tmp);

			cache_get_field_content(i, "numero", tmp);
			ContatoInfo[playerid][i][ContatoNumero] = strval(tmp);
		}
	}
	else
	{
	    for(new c_id= 0; c_id < 40; c_id++)
		{
			format(ContatoInfo[playerid][c_id][ContatoNome], 256, "Contato_%d",c_id+1);

			format(string,sizeof(string),"INSERT INTO contatoscel (id,nome,dono) VALUES ('%d','%s','%d')",c_id,ContatoInfo[playerid][c_id][ContatoNome],PlayerInfo[playerid][pID]);
			mysql_function_query(Pipeline, string, false, "", "");
		}
	}
}

public SalvarContatos(playerid)
{
    new maxconts = GetPlayerMaxContatosCel(playerid);
	new query[1024];
	for(new c_id = 0; c_id < maxconts; c_id++)
	{
			format(query, sizeof(query), "UPDATE `contatoscel` SET `nome`='%s', `numero`='%d' WHERE `dono` = '%d' AND `id` = '%d'",
				ContatoInfo[playerid][c_id][ContatoNome],
				ContatoInfo[playerid][c_id][ContatoNumero],
	 			PlayerInfo[playerid][pID],
			 	c_id);

	  		mysql_function_query(Pipeline, query, false, "", "");
	}
	return 1;
}


stock GetLocation(Float:fX, Float:fY, Float:fZ)
{
    enum e_ZoneData
	{
     	e_ZoneName[32 char],
     	Float:e_ZoneArea[6]
	};
	static const g_arrZoneData[][e_ZoneData] =
	{
	    {!"US Marine Corps",                 {74.6945, 1655.3068, -242.90, 435.4891, 2144.3381, 900.000}},
		{!"The Big Ear", 	              {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
		{!"Aldea Malvada",                {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
		{!"Angel Pine",                   {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
		{!"Arco del Oeste",               {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
		{!"Avispa Country Club",          {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
		{!"Avispa Country Club",          {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
		{!"Avispa Country Club",          {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
		{!"Avispa Country Club",          {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
		{!"Back o Beyond",                {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
		{!"Battery Point",                {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
		{!"Bayside",                      {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
		{!"Bayside Marina",               {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
		{!"Beacon Hill",                  {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
		{!"Blackfield",                   {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
		{!"Blackfield",                   {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
		{!"Blackfield Chapel",            {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
		{!"Blackfield Chapel",            {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
		{!"Blackfield Intersection",      {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
		{!"Blackfield Intersection",      {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
		{!"Blackfield Intersection",      {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
		{!"Blackfield Intersection",      {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
		{!"Blueberry",                    {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
		{!"Blueberry",                    {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
		{!"Blueberry Acres",              {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
		{!"Caligula's Palace",            {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
		{!"Caligula's Palace",            {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
		{!"Calton Heights",               {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
		{!"Chinatown",                    {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
		{!"City Hall",                    {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
		{!"Come-A-Lot",                   {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
		{!"Commerce",                     {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
		{!"Commerce",                     {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
		{!"Commerce",                     {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
		{!"Commerce",                     {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
		{!"Commerce",                     {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
		{!"Commerce",                     {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
		{!"Conference Center",            {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
		{!"Conference Center",            {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
		{!"Cranberry Station",            {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
		{!"Creek",                        {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
		{!"Dillimore",                    {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
		{!"Doherty",                      {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
		{!"Doherty",                      {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
		{!"Downtown",                     {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
		{!"Downtown",                     {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
		{!"Downtown",                     {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
		{!"Downtown",                     {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
		{!"Downtown",                     {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
		{!"Downtown",                     {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
		{!"Downtown Los Santos",          {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
		{!"Downtown Los Santos",          {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
		{!"Downtown Los Santos",          {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
		{!"Downtown Los Santos",          {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
		{!"Downtown Los Santos",          {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
		{!"East Beach",                   {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
		{!"East Beach",                   {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
		{!"East Beach",                   {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
		{!"East Beach",                   {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
		{!"East Los Santos",              {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
		{!"East Los Santos",              {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
		{!"East Los Santos",              {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
		{!"East Los Santos",              {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
		{!"East Los Santos",              {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
		{!"Easter Basin",                 {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
		{!"Easter Basin",                 {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
		{!"US Marine Corps",         {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
		{!"US Marine Corps",         {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
		{!"El Castillo del Diablo",       {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
		{!"El Corona",                    {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
		{!"El Corona",                    {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
		{!"El Quebrados",                 {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
		{!"Esplanade East",               {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
		{!"Esplanade East",               {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
		{!"Esplanade East",               {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
		{!"Esplanade North",              {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
		{!"Esplanade North",              {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
		{!"Esplanade North",              {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
		{!"Fallen Tree",                  {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
		{!"Fallow Bridge",                {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
		{!"Fern Ridge",                   {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
		{!"Financial",                    {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
		{!"Fisher's Lagoon",              {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
		{!"Flint Intersection",           {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
		{!"Flint Range",                  {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
		{!"Fort Carson",                  {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
		{!"Foster Valley",                {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
		{!"Foster Valley",                {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
		{!"Frederick Bridge",             {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
		{!"Gant Bridge",                  {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
		{!"Gant Bridge",                  {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
		{!"Ganton",                       {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
		{!"Ganton",                       {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
		{!"Garcia",                       {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
		{!"Garcia",                       {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
		{!"Garver Bridge",                {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
		{!"Garver Bridge",                {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
		{!"Garver Bridge",                {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
		{!"Glen Park",                    {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
		{!"Glen Park",                    {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
		{!"Glen Park",                    {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
		{!"Green Palms",                  {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
		{!"Greenglass College",           {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
		{!"Greenglass College",           {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
		{!"Hampton Barns",                {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
		{!"Hankypanky Point",             {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
		{!"Harry Gold Parkway",           {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
		{!"Hashbury",                     {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
		{!"Hilltop Farm",                 {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
		{!"Hunter Quarry",                {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
		{!"Idlewood",                     {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
		{!"Idlewood",                     {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
		{!"Idlewood",                     {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
		{!"Jefferson",                    {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
		{!"Jefferson",                    {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
		{!"Jefferson",                    {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
		{!"Jefferson",                    {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
		{!"Jefferson",                    {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
		{!"Jefferson",                    {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
		{!"Julius Thruway East",          {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
		{!"Julius Thruway East",          {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
		{!"Julius Thruway East",          {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
		{!"Julius Thruway East",          {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
		{!"Julius Thruway North",         {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
		{!"Julius Thruway North",         {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
		{!"Julius Thruway North",         {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
		{!"Julius Thruway North",         {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
		{!"Julius Thruway North",         {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
		{!"Julius Thruway North",         {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
		{!"Julius Thruway North",         {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
		{!"Julius Thruway North",         {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
		{!"Julius Thruway South",         {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
		{!"Julius Thruway South",         {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
		{!"Julius Thruway West",          {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
		{!"Julius Thruway West",          {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
		{!"Juniper Hill",                 {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
		{!"Juniper Hollow",               {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
		{!"K.A.C.C. Military Fuels",      {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
		{!"Kincaid Bridge",               {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
		{!"Kincaid Bridge",               {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
		{!"Kincaid Bridge",               {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
		{!"King's",                       {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
		{!"King's",                       {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
		{!"King's",                       {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
		{!"LVA Freight Depot",            {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
		{!"LVA Freight Depot",            {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
		{!"LVA Freight Depot",            {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
		{!"Las Barrancas",                {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
		{!"Las Brujas",                   {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
		{!"Las Colinas",                  {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
		{!"Las Colinas",                  {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
		{!"Las Colinas",                  {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
		{!"Las Colinas",                  {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
		{!"Las Colinas",                  {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
		{!"Las Payasadas",                {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
		{!"Las Venturas Airport",         {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
		{!"Las Venturas Airport",         {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
		{!"Last Dime Motel",              {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
		{!"Leafy Hollow",                 {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
		{!"Liberty City",                 {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
		{!"Lil' Probe Inn",               {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
		{!"Linden Side",                  {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
		{!"Linden Station",               {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
		{!"Linden Station",               {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
		{!"Little Mexico",                {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
		{!"Little Mexico",                {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
		{!"Los Flores",                   {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
		{!"Los Flores",                   {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
		{!"Los Santos International",     {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
		{!"Los Santos International",     {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
		{!"Los Santos International",     {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
		{!"Los Santos International",     {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
		{!"Marina",                       {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
		{!"Marina",                       {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
		{!"Marina",                       {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
		{!"Market",                       {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
		{!"Market",                       {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
		{!"Market",                       {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
		{!"Market",                       {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
		{!"Market Station",               {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
		{!"Martin Bridge",                {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
		{!"Missionary Hill",              {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
		{!"Montgomery",                   {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
		{!"Montgomery",                   {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
		{!"Montgomery Intersection",      {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
		{!"Montgomery Intersection",      {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
		{!"Mulholland",                   {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
		{!"Mulholland",                   {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
		{!"Mulholland",                   {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
		{!"Mulholland",                   {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
		{!"Mulholland",                   {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
		{!"Mulholland",                   {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
		{!"Mulholland",                   {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
		{!"Mulholland",                   {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
		{!"Mulholland",                   {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
		{!"Mulholland",                   {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
		{!"Mulholland",                   {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
		{!"Mulholland",                   {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
		{!"Mulholland",                   {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
		{!"Mulholland Intersection",      {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
		{!"North Rock",                   {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
		{!"Ocean Docks",                  {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
		{!"Ocean Docks",                  {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
		{!"Ocean Docks",                  {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
		{!"Ocean Flats",                  {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
		{!"Octane Springs",               {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
		{!"Old Venturas Strip",           {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
		{!"Palisades",                    {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
		{!"Palomino Creek",               {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
		{!"Paradiso",                     {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
		{!"Pershing Square",              {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
		{!"Pilgrim",                      {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
		{!"Pilgrim",                      {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
		{!"Pilson Intersection",          {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
		{!"Pirates in Men's Pants",       {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
		{!"Playa del Seville",            {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
		{!"Prickle Pine",                 {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
		{!"Prickle Pine",                 {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
		{!"Queens",                       {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
		{!"Queens",                       {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
		{!"Queens",                       {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
		{!"Randolph Industrial Estate",   {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
		{!"Redsands East",                {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
		{!"Redsands East",                {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
		{!"Redsands East",                {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
		{!"Redsands West",                {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
		{!"Redsands West",                {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
		{!"Redsands West",                {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
		{!"Redsands West",                {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
		{!"Regular Tom",                  {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
		{!"Richman",                      {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
		{!"Richman",                      {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
		{!"Richman",                      {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
		{!"Richman",                      {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
		{!"Richman",                      {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
		{!"Richman",                      {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
		{!"Richman",                      {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
		{!"Richman",                      {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
		{!"Robada Intersection",          {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
		{!"Roca Escalante",               {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
		{!"Roca Escalante",               {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
		{!"Rockshore East",               {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
		{!"Rockshore West",               {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
		{!"Rockshore West",               {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
		{!"Rodeo",                        {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
		{!"Rodeo",                        {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
		{!"Rodeo",                        {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
		{!"Rodeo",                        {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
		{!"Rodeo",                        {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
		{!"Rodeo",                        {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
		{!"Rodeo",                        {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
		{!"Rodeo",                        {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
		{!"Rodeo",                        {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
		{!"Rodeo",                        {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
		{!"Rodeo",                        {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
		{!"Rodeo",                        {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
		{!"Royal Casino",                 {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
		{!"San Andreas Sound",            {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
		{!"Santa Flora",                  {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
		{!"Santa Maria Beach",            {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
		{!"Santa Maria Beach",            {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
		{!"Shady Cabin",                  {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
		{!"Shady Creeks",                 {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
		{!"Shady Creeks",                 {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
		{!"Sobell Rail Yards",            {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
		{!"Spinybed",                     {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
		{!"Starfish Casino",              {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
		{!"Starfish Casino",              {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
		{!"Starfish Casino",              {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
		{!"Temple",                       {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
		{!"Temple",                       {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
		{!"Temple",                       {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
		{!"Temple",                       {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
		{!"Temple",                       {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
		{!"Temple",                       {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
		{!"The Camel's Toe",              {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
		{!"The Clown's Pocket",           {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
		{!"The Emerald Isle",             {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
		{!"The Farm",                     {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
		{!"The Four Dragons Casino",      {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
		{!"The High Roller",              {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
		{!"The Mako Span",                {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
		{!"The Panopticon",               {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
		{!"The Pink Swan",                {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
		{!"The Sherman Dam",              {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
		{!"The Strip",                    {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
		{!"The Strip",                    {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
		{!"The Strip",                    {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
		{!"The Strip",                    {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
		{!"The Visage",                   {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
		{!"The Visage",                   {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
		{!"Unity Station",                {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
		{!"Valle Ocultado",               {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
		{!"Verdant Bluffs",               {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
		{!"Verdant Bluffs",               {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
		{!"Verdant Bluffs",               {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
		{!"Verdant Meadows",              {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
		{!"Verona Beach",                 {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
		{!"Verona Beach",                 {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
		{!"Verona Beach",                 {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
		{!"Vinewood",                     {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
		{!"Vinewood",                     {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
		{!"Vinewood",                     {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
		{!"Vinewood",                     {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
		{!"Whitewood Estates",            {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
		{!"Whitewood Estates",            {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
		{!"Willowfield",                  {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
		{!"Willowfield",                  {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
		{!"Willowfield",                  {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
		{!"Willowfield",                  {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
		{!"Willowfield",                  {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
		{!"Yellow Bell Station",          {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
		{!"Los Santos",                   {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
		{!"Las Venturas",                 {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
		{!"Bone County",                  {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
		{!"Tierra Robada",                {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
		{!"Tierra Robada",                {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
		{!"San Fierro",                   {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
		{!"Red County",                   {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
		{!"Flint County",                 {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
		{!"Whetstone",                    {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
	};
	new
	    name[32] = "San Andreas";

	for (new i = 0; i != sizeof(g_arrZoneData); i ++) if ((fX >= g_arrZoneData[i][e_ZoneArea][0] && fX <= g_arrZoneData[i][e_ZoneArea][3]) && (fY >= g_arrZoneData[i][e_ZoneArea][1] && fY <= g_arrZoneData[i][e_ZoneArea][4]) && (fZ >= g_arrZoneData[i][e_ZoneArea][2] && fZ <= g_arrZoneData[i][e_ZoneArea][5])) {
		strunpack(name, g_arrZoneData[i][e_ZoneName]);

		break;
	}
	return name;
}
//============================================================================== [ Governo ]
CMD:governo(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(FacInfo[GetFactionBySqlId(PlayerInfo[playerid][pFac])][fTipo] == FAC_TIPO_GOV && PlayerInfo[playerid][pFacCargo] == 12)
	{
		OutrasInfos[playerid][oGovEditor][0] = 0;
		OutrasInfos[playerid][oGovEditor][1] = 0;

		new govdialog[255];
    	format(govdialog, 255, "Cofre Publico: R$%d\nTaxa do Governo: R$%d\nTaxa de Luz: R$%d\nSalarios Públicos\nTaxa Hospitalar: R$%d\nConvênio Médico: R$%d por/PD\nSalário Minimo: R$%d",
            GovInfo[gCofres],
			GovInfo[gTaxa],
			GovInfo[gTaxaLuz],
			GovInfo[gTaxaHP],
			GovInfo[gConvenio],
			GovInfo[gSalarioMin]);
		Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_LIST, "Governo", govdialog, "Selecionar", "Fechar");
	}
	return 1;
}
Dialog:DIALOG_GOV_EDIT(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    if(OutrasInfos[playerid][oGovEditor][0] == 0)
	    {
		    switch(listitem)
		    {
		        case 0:
		        {
		            OutrasInfos[playerid][oGovEditor][0] = 1;
		            OutrasInfos[playerid][oGovEditor][1] = 0;
                    Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_LIST, "Governo", "Sacar\nDepositar", "Selecionar", "Fechar");
		        }
		        case 1:
				{
					OutrasInfos[playerid][oGovEditor][0] = 2;
                    Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_INPUT, "Governo", "Entre com o valor da taxa do governo:", "Selecionar", "Fechar");
				}
		        case 2:
				{
					OutrasInfos[playerid][oGovEditor][0] = 3;
                    Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_INPUT, "Governo", "Entre com o valor da taxa de luz minima:", "Selecionar", "Fechar");
				}
				case 3:
				{
					OutrasInfos[playerid][oGovEditor][0] = 4;
					OutrasInfos[playerid][oGovEditor][1] = 0;
                    Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_LIST, "Governo", "PMESP\nGBESP\nGOV SP\nPCESP\nEB\nTJSP\nFacção Civil", "Selecionar", "Fechar");
				}
				case 4:
				{
					OutrasInfos[playerid][oGovEditor][0] = 5;
                    Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_INPUT, "Governo", "Entre com o valor da taxa da taxa hospitalar:", "Selecionar", "Fechar");
				}
				case 5:
				{
					OutrasInfos[playerid][oGovEditor][0] = 6;
                    Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_INPUT, "Governo", "Entre com o valor da taxa do convênio:", "Selecionar", "Fechar");
				}
				case 6:
				{
					OutrasInfos[playerid][oGovEditor][0] = 7;
                    Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_INPUT, "Governo", "Entre com o valor do salário minimo:", "Selecionar", "Fechar");
				}
		    }
	    }
	    else if(OutrasInfos[playerid][oGovEditor][0] == 1)
	    {
	        if(OutrasInfos[playerid][oGovEditor][1] == 0)
	        {
		        switch(listitem)
			    {
			        case 0:
					{
					    OutrasInfos[playerid][oGovEditor][1] = 1;
						Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_INPUT, "Governo", "Entre com o valor a ser sacado:", "Selecionar", "Fechar");
					}
			        case 1:
					{
					    OutrasInfos[playerid][oGovEditor][1] = 2;
						Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_INPUT, "Governo", "Entre com o valor a ser depositado:", "Selecionar", "Fechar");
					}
			    }
			}
			else if(OutrasInfos[playerid][oGovEditor][1] == 1)
	        {
	            new valor = strval(inputtext);
	            if(0 > valor) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O valor não pode ser menor que 0.");
	            GovInfo[gCofres] -= valor;
	            PlayerInfo[playerid][pGrana] += valor;

	            format(string, sizeof(string), "[GOV] Você retirou R$%d dos cofres publicos.", valor);
				SendClientMessage(playerid, COLOR_GREEN, string);

	            new strl[126];
				format(strl, sizeof(strl), "%s retirou R$%d dos cofres publicos. | Total no cofre: R$%d", PlayerName(playerid,0), valor, GovInfo[gCofres]);
				Cofres_Publicos(strl);

				SalvarGoverno();
	        }
	        else if(OutrasInfos[playerid][oGovEditor][1] == 2)
	        {
	            new valor = strval(inputtext);
	            if(0 > valor) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O valor não pode ser menor que 0.");
	            GovInfo[gCofres] += valor;
	            PlayerInfo[playerid][pGrana] -= valor;

                format(string, sizeof(string), "[GOV] Você depositou R$%d nos cofres publicos.", valor);
				SendClientMessage(playerid, COLOR_GREEN, string);

	            new strl[126];
				format(strl, sizeof(strl), "%s depositou R$%d dos cofres publicos. | Total no cofre: R$%d", PlayerName(playerid,0), valor, GovInfo[gCofres]);
				Cofres_Publicos(strl);

				SalvarGoverno();
	        }
	    }
	    else if(OutrasInfos[playerid][oGovEditor][0] == 2)
	    {
	        new valor = strval(inputtext);
	        if(0 > valor > 501) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A taxa do governo não pode ser mais do que 500 ou menor que 0.");
         	GovInfo[gTaxa] = valor;

            format(string, sizeof(string), "[GOV] Você alterou a taxa do governo para R$%d.", valor);
			SendClientMessage(playerid, COLOR_GREEN, string);

            new strl[126];
			format(strl, sizeof(strl), "%s alterou a taxa do governo para R$%d. | Total no cofre: R$%d", PlayerName(playerid,0), valor, GovInfo[gCofres]);
			Cofres_Publicos(strl);

			SalvarGoverno();
	    }
	    else if(OutrasInfos[playerid][oGovEditor][0] == 3)
	    {
	        new valor = strval(inputtext);
	        if(0 > valor > 201) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} A taxa minima de luz não pode ser maior do que 200 ou menor que 0.");
         	GovInfo[gTaxaLuz] = valor;

            format(string, sizeof(string), "[GOV] Você alterou a taxa minima de luz para R$%d.", valor);
			SendClientMessage(playerid, COLOR_GREEN, string);

            new strl[126];
			format(strl, sizeof(strl), "%s alterou a taxa de luz para R$%d. | Total no cofre: R$%d", PlayerName(playerid,0), valor, GovInfo[gCofres]);
			Cofres_Publicos(strl);

   			SalvarGoverno();
	    }
	    else if(OutrasInfos[playerid][oGovEditor][0] == 4)
	    {
	        if(OutrasInfos[playerid][oGovEditor][1] == 0)
	        {
	            OutrasInfos[playerid][oGovEditor][2] = 0;
		        switch(listitem)
			    {
			        case 0:
			        {
	            		OutrasInfos[playerid][oGovEditor][1] = 1;
	            		new govdialog[586];
				    	format(govdialog, 255, "Cargo\tSalário\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d",
							FacInfo[1][fRank1], GovInfo[gSalarioPMESP][0],
							FacInfo[1][fRank2], GovInfo[gSalarioPMESP][1],
							FacInfo[1][fRank3], GovInfo[gSalarioPMESP][2],
							FacInfo[1][fRank4], GovInfo[gSalarioPMESP][3],
							FacInfo[1][fRank5], GovInfo[gSalarioPMESP][4],
							FacInfo[1][fRank6], GovInfo[gSalarioPMESP][5],
							FacInfo[1][fRank7], GovInfo[gSalarioPMESP][6],
							FacInfo[1][fRank8], GovInfo[gSalarioPMESP][7],
							FacInfo[1][fRank9], GovInfo[gSalarioPMESP][8],
							FacInfo[1][fRank10], GovInfo[gSalarioPMESP][9],
							FacInfo[1][fRank11], GovInfo[gSalarioPMESP][10],
							FacInfo[1][fRank12], GovInfo[gSalarioPMESP][11]);
						Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_TABLIST_HEADERS, "Governo", govdialog, "Selecionar", "Fechar");
					}
					case 1:
					{
					    OutrasInfos[playerid][oGovEditor][1] = 2;
					    new govdialog[586];
				    	format(govdialog, 255, "Cargo\tSalário\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d",
							FacInfo[3][fRank1], GovInfo[gSalarioFD][0],
							FacInfo[3][fRank2], GovInfo[gSalarioFD][1],
							FacInfo[3][fRank3], GovInfo[gSalarioFD][2],
							FacInfo[3][fRank4], GovInfo[gSalarioFD][3],
							FacInfo[3][fRank5], GovInfo[gSalarioFD][4],
							FacInfo[3][fRank6], GovInfo[gSalarioFD][5],
							FacInfo[3][fRank7], GovInfo[gSalarioFD][6],
							FacInfo[3][fRank8], GovInfo[gSalarioFD][7],
							FacInfo[3][fRank9], GovInfo[gSalarioFD][8],
							FacInfo[3][fRank10], GovInfo[gSalarioFD][9],
							FacInfo[3][fRank11], GovInfo[gSalarioFD][10],
							FacInfo[3][fRank12], GovInfo[gSalarioFD][11]);
						Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_TABLIST_HEADERS, "Governo", govdialog, "Selecionar", "Fechar");

					}
					case 2:
					{
					    OutrasInfos[playerid][oGovEditor][1] = 3;
					    new govdialog[586];
				    	format(govdialog, 255, "Cargo\tSalário\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d",
							FacInfo[4][fRank1], GovInfo[gSalarioGOV][0],
							FacInfo[4][fRank2], GovInfo[gSalarioGOV][1],
							FacInfo[4][fRank3], GovInfo[gSalarioGOV][2],
							FacInfo[4][fRank4], GovInfo[gSalarioGOV][3],
							FacInfo[4][fRank5], GovInfo[gSalarioGOV][4],
							FacInfo[4][fRank6], GovInfo[gSalarioGOV][5],
							FacInfo[4][fRank7], GovInfo[gSalarioGOV][6],
							FacInfo[4][fRank8], GovInfo[gSalarioGOV][7],
							FacInfo[4][fRank9], GovInfo[gSalarioGOV][8],
							FacInfo[4][fRank10], GovInfo[gSalarioGOV][9],
							FacInfo[4][fRank11], GovInfo[gSalarioGOV][10],
							FacInfo[4][fRank12], GovInfo[gSalarioGOV][11]);
						Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_TABLIST_HEADERS, "Governo", govdialog, "Selecionar", "Fechar");

					}
					case 3:
					{
					    OutrasInfos[playerid][oGovEditor][1] = 3;
					    new govdialog[586];
				    	format(govdialog, 255, "Cargo\tSalário\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d",
							FacInfo[2][fRank1], GovInfo[gSalarioPC][0],
							FacInfo[2][fRank2], GovInfo[gSalarioPC][1],
							FacInfo[2][fRank3], GovInfo[gSalarioPC][2],
							FacInfo[2][fRank4], GovInfo[gSalarioPC][3],
							FacInfo[2][fRank5], GovInfo[gSalarioPC][4],
							FacInfo[2][fRank6], GovInfo[gSalarioPC][5],
							FacInfo[2][fRank7], GovInfo[gSalarioPC][6],
							FacInfo[2][fRank8], GovInfo[gSalarioPC][7],
							FacInfo[2][fRank9], GovInfo[gSalarioPC][8],
							FacInfo[2][fRank10], GovInfo[gSalarioPC][9],
							FacInfo[2][fRank11], GovInfo[gSalarioPC][10],
							FacInfo[2][fRank12], GovInfo[gSalarioPC][11]);
						Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_TABLIST_HEADERS, "Governo", govdialog, "Selecionar", "Fechar");

					}
					case 4:
					{
					    OutrasInfos[playerid][oGovEditor][1] = 3;
					    new govdialog[586];
				    	format(govdialog, 255, "Cargo\tSalário\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d",
							FacInfo[5][fRank1], GovInfo[gSalarioEB][0],
							FacInfo[5][fRank2], GovInfo[gSalarioEB][1],
							FacInfo[5][fRank3], GovInfo[gSalarioEB][2],
							FacInfo[5][fRank4], GovInfo[gSalarioEB][3],
							FacInfo[5][fRank5], GovInfo[gSalarioEB][4],
							FacInfo[5][fRank6], GovInfo[gSalarioEB][5],
							FacInfo[5][fRank7], GovInfo[gSalarioEB][6],
							FacInfo[5][fRank8], GovInfo[gSalarioEB][7],
							FacInfo[5][fRank9], GovInfo[gSalarioEB][8],
							FacInfo[5][fRank10], GovInfo[gSalarioEB][9],
							FacInfo[5][fRank11], GovInfo[gSalarioEB][10],
							FacInfo[5][fRank12], GovInfo[gSalarioEB][11]);
						Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_TABLIST_HEADERS, "Governo", govdialog, "Selecionar", "Fechar");

					}
					case 5:
					{
					    OutrasInfos[playerid][oGovEditor][1] = 3;
					    new govdialog[586];
				    	format(govdialog, 255, "Cargo\tSalário\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d",
							FacInfo[5][fRank1], GovInfo[gSalarioTJRP][0],
							FacInfo[5][fRank2], GovInfo[gSalarioTJRP][1],
							FacInfo[5][fRank3], GovInfo[gSalarioTJRP][2],
							FacInfo[5][fRank4], GovInfo[gSalarioTJRP][3],
							FacInfo[5][fRank5], GovInfo[gSalarioTJRP][4],
							FacInfo[5][fRank6], GovInfo[gSalarioTJRP][5],
							FacInfo[5][fRank7], GovInfo[gSalarioTJRP][6],
							FacInfo[5][fRank8], GovInfo[gSalarioTJRP][7],
							FacInfo[5][fRank9], GovInfo[gSalarioTJRP][8],
							FacInfo[5][fRank10], GovInfo[gSalarioTJRP][9],
							FacInfo[5][fRank11], GovInfo[gSalarioTJRP][10],
							FacInfo[5][fRank12], GovInfo[gSalarioTJRP][11]);
						Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_TABLIST_HEADERS, "Governo", govdialog, "Selecionar", "Fechar");

					}
					case 6:
					{
					    OutrasInfos[playerid][oGovEditor][1] = 3;
					    new govdialog[586];
				    	format(govdialog, 255, "Cargo\tSalário\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d\n%s\t%d",
							FacInfo[5][fRank1], GovInfo[gSalarioFacCivil][0],
							FacInfo[5][fRank2], GovInfo[gSalarioFacCivil][1],
							FacInfo[5][fRank3], GovInfo[gSalarioFacCivil][2],
							FacInfo[5][fRank4], GovInfo[gSalarioFacCivil][3],
							FacInfo[5][fRank5], GovInfo[gSalarioFacCivil][4],
							FacInfo[5][fRank6], GovInfo[gSalarioFacCivil][5],
							FacInfo[5][fRank7], GovInfo[gSalarioFacCivil][6],
							FacInfo[5][fRank8], GovInfo[gSalarioFacCivil][7],
							FacInfo[5][fRank9], GovInfo[gSalarioFacCivil][8],
							FacInfo[5][fRank10], GovInfo[gSalarioFacCivil][9],
							FacInfo[5][fRank11], GovInfo[gSalarioFacCivil][10],
							FacInfo[5][fRank12], GovInfo[gSalarioFacCivil][11]);
						Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_TABLIST_HEADERS, "Governo", govdialog, "Selecionar", "Fechar");

					}
				}
			}
			else if(OutrasInfos[playerid][oGovEditor][1] == 1)
			{
			    if(OutrasInfos[playerid][oGovEditor][2] == 0)
			    {
				    OutrasInfos[playerid][oGovEditor][2] = listitem+1;
 			    	Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_INPUT, "Governo", "Entre com o novo valor do salário:", "Selecionar", "Fechar");
				}
				else
			    {
			        new govc = OutrasInfos[playerid][oGovEditor][2]-1;
			        new valor = strval(inputtext);
			        if(0 > valor) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O salário não pode ser menor que 0.");
         	        GovInfo[gSalarioPMESP][govc] = valor;

		            format(string, sizeof(string), "[GOV] Você alterou o salário para R$%d.", valor);
					SendClientMessage(playerid, COLOR_GREEN, string);

			        new strl[126];
					format(strl, sizeof(strl), "%s alterou o salário do cargo %d da PMERJ para R$%d. | Total no cofre: R$%d", PlayerName(playerid,0), (listitem+1),valor, GovInfo[gCofres]);
					Cofres_Publicos(strl);

					SalvarGoverno();
			    }
			}
			else if(OutrasInfos[playerid][oGovEditor][1] == 2)
			{
			    if(OutrasInfos[playerid][oGovEditor][2] == 0)
			    {
				    OutrasInfos[playerid][oGovEditor][2] = listitem+1;
 			    	Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_INPUT, "Governo", "Entre com o novo valor do salário:", "Selecionar", "Fechar");
				}
				else
			    {
			        new govc = OutrasInfos[playerid][oGovEditor][2]-1;
			        new valor = strval(inputtext);
			        if(0 > valor) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O salário não pode ser menor que 0.");
         	        GovInfo[gSalarioFD][govc] = valor;

		            format(string, sizeof(string), "[GOV] Você alterou o salário para R$%d.", valor);
					SendClientMessage(playerid, COLOR_GREEN, string);

			        new strl[126];
					format(strl, sizeof(strl), "%s alterou o salário do cargo %d do GBESP para R$%d. | Total no cofre: R$%d", PlayerName(playerid,0), (listitem+1),valor, GovInfo[gCofres]);
					Cofres_Publicos(strl);

					SalvarGoverno();
			    }
			}
			else if(OutrasInfos[playerid][oGovEditor][1] == 3)
			{
			    if(OutrasInfos[playerid][oGovEditor][2] == 0)
			    {
				    OutrasInfos[playerid][oGovEditor][2] = listitem+1;
 			    	Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_INPUT, "Governo", "Entre com o novo valor do salário:", "Selecionar", "Fechar");
				}
				else
			    {
			        new govc = OutrasInfos[playerid][oGovEditor][2]-1;
			        new valor = strval(inputtext);
			        if(0 > valor) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O salário não pode ser menor que 0.");
         	        GovInfo[gSalarioGOV][govc] = valor;

		            format(string, sizeof(string), "[GOV] Você alterou o salário para R$%d.", valor);
					SendClientMessage(playerid, COLOR_GREEN, string);

			        new strl[126];
					format(strl, sizeof(strl), "%s alterou o salário do cargo %d do GOVERNO para R$%d. | Total no cofre: R$%d", PlayerName(playerid,0), (listitem+1),valor, GovInfo[gCofres]);
					Cofres_Publicos(strl);

					SalvarGoverno();
			    }
			}
			else if(OutrasInfos[playerid][oGovEditor][1] == 4)
			{
			    if(OutrasInfos[playerid][oGovEditor][2] == 0)
			    {
				    OutrasInfos[playerid][oGovEditor][2] = listitem+1;
 			    	Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_INPUT, "Governo", "Entre com o novo valor do salário:", "Selecionar", "Fechar");
				}
				else
			    {
			        new govc = OutrasInfos[playerid][oGovEditor][2]-1;
			        new valor = strval(inputtext);
			        if(0 > valor) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O salário não pode ser menor que 0.");
         	        GovInfo[gSalarioPC][govc] = valor;

		            format(string, sizeof(string), "[GOV] Você alterou o salário para R$%d.", valor);
					SendClientMessage(playerid, COLOR_GREEN, string);

			        new strl[126];
					format(strl, sizeof(strl), "%s alterou o salário do cargo %d da PCERJ para R$%d. | Total no cofre: R$%d", PlayerName(playerid,0), (listitem+1),valor, GovInfo[gCofres]);
					Cofres_Publicos(strl);

					SalvarGoverno();
			    }
			}
			else if(OutrasInfos[playerid][oGovEditor][1] == 5)
			{
			    if(OutrasInfos[playerid][oGovEditor][2] == 0)
			    {
				    OutrasInfos[playerid][oGovEditor][2] = listitem+1;
 			    	Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_INPUT, "Governo", "Entre com o novo valor do salário:", "Selecionar", "Fechar");
				}
				else
			    {
			        new govc = OutrasInfos[playerid][oGovEditor][2]-1;
			        new valor = strval(inputtext);
			        if(0 > valor) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O salário não pode ser menor que 0.");
         	        GovInfo[gSalarioEB][govc] = valor;

		            format(string, sizeof(string), "[GOV] Você alterou o salário para R$%d.", valor);
					SendClientMessage(playerid, COLOR_GREEN, string);

			        new strl[126];
					format(strl, sizeof(strl), "%s alterou o salário do cargo %d do EB para R$%d. | Total no cofre: R$%d", PlayerName(playerid,0), (listitem+1),valor, GovInfo[gCofres]);
					Cofres_Publicos(strl);

					SalvarGoverno();
			    }
			}
			else if(OutrasInfos[playerid][oGovEditor][1] == 6)
			{
			    if(OutrasInfos[playerid][oGovEditor][2] == 0)
			    {
				    OutrasInfos[playerid][oGovEditor][2] = listitem+1;
 			    	Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_INPUT, "Governo", "Entre com o novo valor do salário:", "Selecionar", "Fechar");
				}
				else
			    {
			        new govc = OutrasInfos[playerid][oGovEditor][2]-1;
			        new valor = strval(inputtext);
			        if(0 > valor) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O salário não pode ser menor que 0.");
         	        GovInfo[gSalarioTJRP][govc] = valor;

		            format(string, sizeof(string), "[GOV] Você alterou o salário DO TJSP para R$%d.", valor);
					SendClientMessage(playerid, COLOR_GREEN, string);

			        new strl[126];
					format(strl, sizeof(strl), "%s alterou o salário do cargo %d do TJSP para R$%d. | Total no cofre: R$%d", PlayerName(playerid,0), (listitem+1),valor, GovInfo[gCofres]);
					Cofres_Publicos(strl);

					SalvarGoverno();
			    }
			}
			else if(OutrasInfos[playerid][oGovEditor][1] == 7)
			{
			    if(OutrasInfos[playerid][oGovEditor][2] == 0)
			    {
				    OutrasInfos[playerid][oGovEditor][2] = listitem+1;
 			    	Dialog_Show(playerid, DIALOG_GOV_EDIT, DIALOG_STYLE_INPUT, "Governo", "Entre com o novo valor do salário:", "Selecionar", "Fechar");
				}
				else
			    {
			        new govc = OutrasInfos[playerid][oGovEditor][2]-1;
			        new valor = strval(inputtext);
			        if(0 > valor) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O salário não pode ser menor que 0.");
         	        GovInfo[gSalarioFacCivil][govc] = valor;

		            format(string, sizeof(string), "[GOV] Você alterou o salário das facções civil para R$%d.", valor);
					SendClientMessage(playerid, COLOR_GREEN, string);

			        new strl[126];
					format(strl, sizeof(strl), "%s alterou o salário do cargo %d da facs civis para R$%d. | Total no cofre: R$%d", PlayerName(playerid,0), (listitem+1),valor, GovInfo[gCofres]);
					Cofres_Publicos(strl);

					SalvarGoverno();
			    }
			}
		}
	    else if(OutrasInfos[playerid][oGovEditor][0] == 5)
	    {
	        new valor = strval(inputtext);
	        if(0 > valor > 501) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O valor da taxa hospitalar não pode ser mais do que 500 ou menor que 0.");
         	GovInfo[gTaxaHP] = valor;

            format(string, sizeof(string), "[GOV] Você alterou a taxa hospitalar para R$%d.", valor);
			SendClientMessage(playerid, COLOR_GREEN, string);

            new strl[126];
			format(strl, sizeof(strl), "%s alterou a taxa hospitalar para R$%d. | Total no cofre: R$%d", PlayerName(playerid,0), valor, GovInfo[gCofres]);
			Cofres_Publicos(strl);

			SalvarGoverno();
	    }
	    else if(OutrasInfos[playerid][oGovEditor][0] == 6)
	    {
	        new valor = strval(inputtext);
	        if(0 > valor > 201) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O valor do convenio não pode ser mais do que 200 ou menor que 0.");
         	GovInfo[gConvenio] = valor;

            format(string, sizeof(string), "[GOV] Você alterou o valor do convênio para R$%d.", valor);
			SendClientMessage(playerid, COLOR_GREEN, string);

            new strl[126];
			format(strl, sizeof(strl), "%s alterou o valor do convênio para R$%d. | Total no cofre: R$%d", PlayerName(playerid,0), valor, GovInfo[gCofres]);
			Cofres_Publicos(strl);

			SalvarGoverno();
	    }
	    else if(OutrasInfos[playerid][oGovEditor][0] == 7)
	    {
	        new valor = strval(inputtext);
	        if(0 > valor > 501) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O Salário Minimo não pode ser mais do que 500 ou menor que 0.");
         	GovInfo[gSalarioMin] = valor;

            format(string, sizeof(string), "[GOV] Você alterou o salário minimo para R$%d.", valor);
			SendClientMessage(playerid, COLOR_GREEN, string);

            new strl[126];
			format(strl, sizeof(strl), "%s alterou o salário minimo para R$%d. | Total no cofre: R$%d", PlayerName(playerid,0), valor, GovInfo[gCofres]);
			Cofres_Publicos(strl);

			SalvarGoverno();
	    }
	}
	return 1;
}

forward SalvarGoverno();
public SalvarGoverno()
{

    new salariosgov[522];
    format(salariosgov, 255, "%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d",GovInfo[gSalarioGOV][0], GovInfo[gSalarioGOV][1],GovInfo[gSalarioGOV][2],GovInfo[gSalarioGOV][3],GovInfo[gSalarioGOV][4],GovInfo[gSalarioGOV][5], GovInfo[gSalarioGOV][6], GovInfo[gSalarioGOV][7], GovInfo[gSalarioGOV][8], GovInfo[gSalarioGOV][9], GovInfo[gSalarioGOV][10], GovInfo[gSalarioGOV][11]);

    new salariospd[522];
    format(salariospd, 255, "%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d",GovInfo[gSalarioPMESP][0], GovInfo[gSalarioPMESP][1], GovInfo[gSalarioPMESP][2], GovInfo[gSalarioPMESP][3], GovInfo[gSalarioPMESP][4], GovInfo[gSalarioPMESP][5], GovInfo[gSalarioPMESP][6], GovInfo[gSalarioPMESP][7], GovInfo[gSalarioPMESP][8], GovInfo[gSalarioPMESP][9], GovInfo[gSalarioPMESP][10], GovInfo[gSalarioPMESP][11]);

    new salariosfd[522];
    format(salariosfd, 255, "%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d",GovInfo[gSalarioFD][0], GovInfo[gSalarioFD][1], GovInfo[gSalarioFD][2], GovInfo[gSalarioFD][3], GovInfo[gSalarioFD][4], GovInfo[gSalarioFD][5], GovInfo[gSalarioFD][6], GovInfo[gSalarioFD][7], GovInfo[gSalarioFD][8], GovInfo[gSalarioFD][9], GovInfo[gSalarioFD][10], GovInfo[gSalarioFD][11]);

	new salarioseb[522];
    format(salarioseb, 255, "%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d",GovInfo[gSalarioEB][0], GovInfo[gSalarioEB][1], GovInfo[gSalarioEB][2], GovInfo[gSalarioEB][3], GovInfo[gSalarioEB][4], GovInfo[gSalarioEB][5], GovInfo[gSalarioEB][6], GovInfo[gSalarioEB][7], GovInfo[gSalarioEB][8], GovInfo[gSalarioEB][9], GovInfo[gSalarioEB][10], GovInfo[gSalarioEB][11]);

    new salariospc[522];
    format(salariospc, 255, "%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d",GovInfo[gSalarioPC][0], GovInfo[gSalarioPC][1], GovInfo[gSalarioPC][2], GovInfo[gSalarioPC][3], GovInfo[gSalarioPC][4], GovInfo[gSalarioPC][5], GovInfo[gSalarioPC][6], GovInfo[gSalarioPC][7], GovInfo[gSalarioPC][8], GovInfo[gSalarioPC][9], GovInfo[gSalarioPC][10], GovInfo[gSalarioPC][11]);

	new salariosTJRP[522];
    format(salariosTJRP, 255, "%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d",GovInfo[gSalarioTJRP][0], GovInfo[gSalarioTJRP][1], GovInfo[gSalarioTJRP][2], GovInfo[gSalarioTJRP][3], GovInfo[gSalarioTJRP][4], GovInfo[gSalarioTJRP][5], GovInfo[gSalarioTJRP][6], GovInfo[gSalarioTJRP][7], GovInfo[gSalarioTJRP][8], GovInfo[gSalarioTJRP][9], GovInfo[gSalarioTJRP][10], GovInfo[gSalarioTJRP][11]);

	new salariosFacCivil[522];
    format(salariosFacCivil, 255, "%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d",GovInfo[gSalarioFacCivil][0], GovInfo[gSalarioFacCivil][1], GovInfo[gSalarioFacCivil][2], GovInfo[gSalarioFacCivil][3], GovInfo[gSalarioFacCivil][4], GovInfo[gSalarioFacCivil][5], GovInfo[gSalarioFacCivil][6], GovInfo[gSalarioFacCivil][7], GovInfo[gSalarioFacCivil][8], GovInfo[gSalarioFacCivil][9], GovInfo[gSalarioFacCivil][10], GovInfo[gSalarioFacCivil][11]);


    new query[2054];
	format(query, sizeof(query),"UPDATE `governo` SET `salariospd`='%s' WHERE `id`= 1",salariospd);
	mysql_function_query(Pipeline, query, false, "", "");

	format(query, sizeof(query),"UPDATE `governo` SET `salariosfd`='%s' WHERE `id`= 1",salariosfd);
	mysql_function_query(Pipeline, query, false, "", "");

	format(query, sizeof(query),"UPDATE `governo` SET `salarioseb`='%s' WHERE `id`= 1",salarioseb);
	mysql_function_query(Pipeline, query, false, "", "");

	format(query, sizeof(query),"UPDATE `governo` SET `salariospc`='%s' WHERE `id`= 1",salariospc);
	mysql_function_query(Pipeline, query, false, "", "");

	format(query, sizeof(query),"UPDATE `governo` SET `salariosgov`='%s' WHERE `id`= 1",salariosgov);
	mysql_function_query(Pipeline, query, false, "", "");

	format(query, sizeof(query),"UPDATE `governo` SET `salariosTJRP`='%s' WHERE `id`= 1",salariosTJRP);
	mysql_function_query(Pipeline, query, false, "", "");

	format(query, sizeof(query),"UPDATE `governo` SET `salariosFacCivil`='%s' WHERE `id`= 1",salariosFacCivil);
	mysql_function_query(Pipeline, query, false, "", "");

	format(query, sizeof(query),"UPDATE `governo` SET `cofres`='%d',`taxa`='%d',`taxaluz`='%d',`taxahp`='%d',`convenio`='%d',`prefeito`='%s',`salariomin`='%d' WHERE `id`= 1", GovInfo[gCofres],GovInfo[gTaxa], GovInfo[gTaxaLuz],GovInfo[gTaxaHP],GovInfo[gConvenio],GovInfo[gPrefeito],GovInfo[gSalarioMin]);
	mysql_function_query(Pipeline, query, false, "", "");
	return 1;
}
//==============================================================================
CMD:convenio(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pConvenio] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem um convênio, use /cancelarconvenio para cancela-lo.");
    if(IsPlayerInRangeOfPoint(playerid, 20, 174.4834,2784.5520,767.7469))
	{
        new ConvDial[522];
		format(ConvDial, 255, "\t\t\t- Convênio Médico -\t\t\t\n\n \
		- Tenha um tratamento de qualidade no melhor Hospital do São Paulo e saia curado em menos tempo!\n \
		- Reduzimos sua estadia em nosso Hospital em 50% do tempo.\n\n \
		Valor do serviço: Apenas R$80 por PayDay!\n \
		- Assine já conosco!! \n\n\n \
		ATENÇÃO: O contrato só poderá ser cancelado após 3 PD's.");
		Dialog_Show(playerid, DIALOG_CONVENIO, DIALOG_STYLE_MSGBOX, "Convenio Médico", ConvDial, "Assinar", "Cancelar");
	}
	return 1;
}
Dialog:DIALOG_CONVENIO(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    SendClientMessage(playerid, COLOR_GREEN, "Parabéns, agora você tem um convênio, use /cancelarconvenio para cancela-lo.");
	    PlayerInfo[playerid][pConvenio] = 6;
	}
	return 1;
}
CMD:cancelarconvenio(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pConvenio] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem um convênio.");
	if(PlayerInfo[playerid][pConvenio] != 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você ainda não pode cancelar o seu convênio.");
    if(IsPlayerInRangeOfPoint(playerid, 20, 175.0955, 2786.4817, 766.7490))
	{
        SendClientMessage(playerid, COLOR_GREEN, "Você cancelou o seu convênio médico.");
        PlayerInfo[playerid][pConvenio] = 0;
	}
	return 1;
}
//==============================================================================

CMD:doar(playerid, params[])
{
	new qnt;
	if (sscanf(params, "i", qnt))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} /doar [Valor]");
		return 1;
	}
	else
	{
 		if(!PlayerInfo[playerid][pLogado]) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} ID inválido.");
    	if(qnt < 1) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não pode usar valores negativos.");
    	if(PlayerInfo[playerid][pGrana] < qnt) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não tem tudo isso.");

		PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]-qnt;
        GovInfo[gCofres] += qnt;
		format(string,sizeof(string),"** Você doou R$%d para o governo. (%s)", qnt, PlayerName(playerid,0));
		SendClientMessage(playerid, COLOR_CINZA,string);

		new strl[126];
		format(strl, sizeof(strl), "%s doou para o governo a quantidade de R$%d.", PlayerName(playerid,0), qnt);
	   	LogCMD_PAGAR(strl);
   		return 1;
	}
}
COMMAND:pontolavagem(playerid, params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO: {FFFFFF}você deve estar conectado antes de usar algum comando.");
    if(PlayerInfo[playerid][pAdmin] < 5) return 1;
	new targetid, inter;
	if(sscanf(params, "ui", targetid, inter)) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} /pontolavagem [id] [range]");
	else
	{
	    if (PlayerInfo[targetid][pLogado] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} O jogador não está logado.");
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este jogador não está conectado!");
	    new Float:xls,Float:yls,Float:zls;
		GetPlayerPos(targetid,xls,yls,zls);

		OutrasInfos[targetid][oLavagemX] = xls;
		OutrasInfos[targetid][oLavagemY] = yls;
		OutrasInfos[targetid][oLavagemZ] = zls;
		OutrasInfos[targetid][oLavagemR] = inter;

		new query[528];
		format(query,sizeof(query),"UPDATE `accounts` SET `lavax`='%.4f',`lavay`='%.4f',`lavaz`='%.4f',`lavar`='%.4f' WHERE `ID` = '%d'",
		OutrasInfos[targetid][oLavagemX],
		OutrasInfos[targetid][oLavagemY],
		OutrasInfos[targetid][oLavagemZ],
		OutrasInfos[targetid][oLavagemR],
		PlayerInfo[targetid][pID]);
		mysql_function_query(Pipeline, query, true, "OnQueryFinish", "ii", THREAD_NO_RESULT, playerid);

		format(string,sizeof(string),"AdmCmd: Você setou o ponto de lavagem de dinheiro de %s.",PlayerName(targetid, 0));
		SendClientMessage(playerid, COLOR_LIGHTRED, string);
	}
	return 1;
}

CMD:desmanchar(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != JOB_DESMANCHE) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não é um perito de desmanche.");

	new vehicleid = GetPlayerVehicleID(playerid);
    if(!IsATruck(vehicleid) && !IsASUV(vehicleid) && !IsAVan(vehicleid) && !IsAPopularCar(vehicleid) && !IsASportCar(vehicleid) && !IsAUnique(vehicleid) && !IsABike(vehicleid) && !IsABicicleta(vehicleid))
        return SendClientMessage(playerid,COLOR_LIGHTRED,"Este veículo não pode ser desmanchado.");

    new partes[7];
    GetVehicleParamsEx(vehicleid, partes[0], partes[1], partes[2], partes[3], partes[4], partes[5], partes[6]);

	if(!IsPlayerInRangeOfPoint(playerid,OutrasInfos[playerid][oDesmancheR], OutrasInfos[playerid][oDesmancheX], OutrasInfos[playerid][oDesmancheY], OutrasInfos[playerid][oDesmancheZ]))
		return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está no seu ponto de desmanche.");

	if(OutrasInfos[playerid][oDesmancheTime] > 0)
	    return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Você ainda não pode desmanchar outro veículo.");

	if(partes[0]) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} O veículo precisa estar desligado.");

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa ser o motorista para usar este comando.");

	new Float:btc, veh = GetPlayerVehicleID(playerid);
 	GetVehicleHealth(veh, btc);
  	if(btc <= 300) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} O motor deste veículo está quebrado!");

    if(!IsEngineVehicle(veh)) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não pode ser desmanchado!");

	if(PlayerInfo[playerid][pToolKit] == 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não possui um kit de ferramentas.");

	if (JaEstaDesmanchando[playerid] > 0) return SendClientMessage(playerid,COLOR_LIGHTRED,"Você já está desmanchando.");

	new slot = GetVehicleSlot(veh);
	if(slot > -1)
	{
		if(VehicleInfo[slot][vLocked]) return SendClientMessage(playerid,COLOR_LIGHTRED,"Você não pode desmanchar um veículo trancado.");
	    //TogglePlayerControllable(playerid, 0);
		JaEstaDesmanchando[playerid] = veh;
		Desmanchando[playerid] = SetTimerEx("DesmanchandoVeh", 60000, 0, "ii", playerid, 1);

		format(string, sizeof(string), "* %s retira uma ferramenta do kit e começa a desmanchar o veículo.", PlayerName(playerid, 1));
	 	ProxDetector(8.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	 	SCM(playerid, COLOR_LIGHTRED, "ATENÇÃO: Se você sair do veículo antes do desmanche terminar, ele será cancelado.");
	}
	else
	{
	    SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não pode ser desmanchado.");
	}
	return 1;
}

forward DesmanchandoVeh(playerid, parte);
public DesmanchandoVeh(playerid, parte)
{
    new vid = GetPlayerVehicleID(playerid), panels, doors, lights, tires;
    if(vid != JaEstaDesmanchando[playerid])
	{
 		KillTimer(Desmanchando[playerid]);
		JaEstaDesmanchando[playerid] = 0;
 		//TogglePlayerControllable(playerid, 1);
	 	SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você saiu do veículo que estava sendo desmanchado.");
   		return 1;
	}
	if(!IsEngineVehicle(vid)) return SendClientMessage(playerid,COLOR_LIGHTRED, "ERRO:{FFFFFF} O veículo não pode estar ligado para ser desmanchado!");

	switch(parte)
	{
	    case 1:
		{
			GetVehicleDamageStatus(vid, panels, doors, lights, tires);
			UpdateVehicleDamageStatus(vid, panels, 4, lights, 15);
			Desmanchando[playerid] = SetTimerEx("DesmanchandoVeh", 30000, 0, "ii", playerid, 2);
		}
		case 2:
		{
			GetVehicleDamageStatus(vid, panels, doors, lights, tires);
			UpdateVehicleDamageStatus(vid, panels, 1024, lights, 15);
		 	Desmanchando[playerid] = SetTimerEx("DesmanchandoVeh", 30000, 0, "ii", playerid, 3);
		}
		case 3:
		{
		    GetVehicleDamageStatus(vid, panels, doors, lights, tires);
			UpdateVehicleDamageStatus(vid, panels, 262144, lights, 15);
			Desmanchando[playerid] = SetTimerEx("DesmanchandoVeh", 30000, 0, "ii", playerid, 4);
		}
		case 4:
		{
		    GetVehicleDamageStatus(vid, panels, doors, lights, tires);
			UpdateVehicleDamageStatus(vid, panels, 67108864, lights, 15);
			if(IsATruck(vid))
			{
				PlayerInfo[playerid][pPecasMecanicas][5]+= 32;
				PlayerInfo[playerid][pGranaSuja] += 9000;
				SCM(playerid, COLOR_LIGHTGREEN, "Você recebeu 32 peças de carro e R$9,000 sujo por desmanchar este veículo.");
			}
			else if(IsASUV(vid))
			{
		 		PlayerInfo[playerid][pPecasMecanicas][5]+= 25;
				PlayerInfo[playerid][pGranaSuja] += 7000;
				SCM(playerid, COLOR_LIGHTGREEN, "Você recebeu 25 peças de carro e R$7,000 sujo por desmanchar este veículo.");
			}
			else if(IsASportCar(vid))
			{
		 		PlayerInfo[playerid][pPecasMecanicas][5]+= 20;
				PlayerInfo[playerid][pGranaSuja] += 6000;
				SCM(playerid, COLOR_LIGHTGREEN, "Você recebeu 20 peças de carro e R$6,000 sujo por desmanchar este veículo.");
			}
			else if(IsAVan(vid))
			{
		 		PlayerInfo[playerid][pPecasMecanicas][5]+= 27;
				PlayerInfo[playerid][pGranaSuja] += 5500;
				SCM(playerid, COLOR_LIGHTGREEN, "Você recebeu 27 peças de carro e R$5,500 sujo por desmanchar este veículo.");
			}
			else if(IsAPopularCar(vid))
			{
		 		PlayerInfo[playerid][pPecasMecanicas][5]+= 18;
				PlayerInfo[playerid][pGranaSuja] += 4000;
				SCM(playerid, COLOR_LIGHTGREEN, "Você recebeu 18 peças de carro e R$4,000 sujo por desmanchar este veículo.");
			}
			else if(IsAUnique(vid))
			{
		 		PlayerInfo[playerid][pPecasMecanicas][5]+= 17;
				PlayerInfo[playerid][pGranaSuja] += 3600;
				SCM(playerid, COLOR_LIGHTGREEN, "Você recebeu 17 peças de carro e R$3,600 sujo por desmanchar este veículo.");
			}
			else if(IsABike(vid))
			{
		 		PlayerInfo[playerid][pPecasMecanicas][5]+= 2;
				PlayerInfo[playerid][pGranaSuja] += 1200;
				SCM(playerid, COLOR_LIGHTGREEN, "Você recebeu 6 peças de carro e R$1,200 sujo por desmanchar este veículo.");
			}
			else if(IsABicicleta(vid))
			{
				PlayerInfo[playerid][pPecasMecanicas][5]+= 1;
				PlayerInfo[playerid][pGranaSuja] += 900;
				SCM(playerid, COLOR_LIGHTGREEN, "Você recebeu 4 peças de carro e R$900 sujo por desmanchar este veículo.");
			}
			else
			{
			    PlayerInfo[playerid][pPecasMecanicas][5]+= 3;
				PlayerInfo[playerid][pGranaSuja] += 500;
				SCM(playerid, COLOR_LIGHTGREEN, "Você recebeu 3 peças de carro e R$500 sujo por desmanchar este veículo.");
			}
			new slot = GetVehicleSlot(vid);
			if(slot > -1)
			{
			    if(VehicleInfo[slot][vRadio] != 0)
			    {
			        new certoornot = randomEx(0,1);
			    	VehicleInfo[slot][vRadio] = 0;
					if(certoornot == 1)
					{
						PlayerInfo[playerid][pPecasMecanicas][0]++;
						SCM(playerid, COLOR_LIGHTGREEN, "- Você retirou um rádio do veículo.");
					}
					else
					{
					    SCM(playerid, COLOR_LIGHTGREEN, "- Você estragou o rádio do veículo tentando tira-lo.");
					}
				}
				if(VehicleInfo[slot][vImmob] > 0)
				{
				    new totalpecas = randomEx(0,VehicleInfo[slot][vImmob]);
		  			PlayerInfo[playerid][pPecasMecanicas][3] += totalpecas;

		            if(VehicleInfo[slot][vImmob] == 0) format(string, sizeof(string), "- Você estragou as peças de imob do veículo.");
		  			else if(VehicleInfo[slot][vImmob] == 1) format(string, sizeof(string), "- Você retirou %d peça de imob do veículo.", totalpecas);
					else format(string, sizeof(string), "- Você retirou %d peças de imob do veículo.", totalpecas);
					SCM(playerid, COLOR_LIGHTGREEN, string);

					VehicleInfo[slot][vImmob] = 0;
				}
				if(VehicleInfo[slot][vLock] > 0)
				{
					new totalpecas = randomEx(0,VehicleInfo[slot][vLock]);
		   			PlayerInfo[playerid][pPecasMecanicas][4] += totalpecas;

					if(VehicleInfo[slot][vImmob] == 0) format(string, sizeof(string), "- Você estragou as peças de tranca do veículo.");
		  			else if(VehicleInfo[slot][vImmob] == 1) format(string, sizeof(string), "- Você retirou %d peça de tranca do veículo.", totalpecas);
					else format(string, sizeof(string), "- Você retirou %d peças de tranca do veículo.", totalpecas);
					SCM(playerid, COLOR_LIGHTGREEN, string);

					VehicleInfo[slot][vLock] = 0;
				}

		        if(!IsABike(vid) && !IsABicicleta(vid))
				{
			        new Float:VehX, Float:VehY, Float:VehZ, Float:VehAngle; //Aqui eu crio umas variáveis pra armazenar a posição do veículo
					GetVehiclePos(vid, VehX, VehY, VehZ); //Pego a posição X, Y e Z do veículo
					GetVehicleZAngle(vid, VehAngle); //E o angulo do veículo
					Carcaca[vid] = CreateDynamicObject(3594, VehX, VehY, VehZ, 0.0, 0.0, VehAngle);
			        CarcacaCar[vid] = 0;
			        SetPlayerPos(playerid, VehX, VehY, VehZ+1.5);
				}

				new vname[256];
				new Float:X, Float:Y, Float:Z, Float:R;
		 		SaveVehicleDamage(vid);
				GetVehiclePos(vid,X,Y,Z);
				GetVehicleZAngle(vid,R);

				VehicleInfo[slot][vDesmanchado] = 1;
				VehicleInfo[slot][vSpawnR] = 0.0;
				VehicleInfo[slot][vInterior] = 0;
				VehicleInfo[slot][vWorld] = 0;

				ResetTuning(slot);
				ChangeVehiclePaintjob( vid, 3 );

				GetVehicleNameByModel(VehicleInfo[slot][vModel],vname);
				VehicleInfo[slot][vNeonState] = 0;
				if(VehicleInfo[slot][vSirene][0] != 0)
				{
					if(IsValidDynamicObject(VehicleInfo[slot][vSirene][0])) DestroyDynamicObject(VehicleInfo[slot][vSirene][0]);
					VehicleInfo[slot][vSirene][0] = 0;
				}
				DestruirObjetosCarro(slot,VehicleInfo[slot][vVehicle]);
			    VehicleInfo[slot][vTuned] = false;

				DestroyVehicle(VehicleInfo[slot][vVehicle]);
				VehicleInfo[slot][vVehicle] = -1;

				SaveVehicle(slot);
			}

			if(PlayerInfo[playerid][pDoador] >= 2) OutrasInfos[playerid][oDesmancheTime] = 60;
			else OutrasInfos[playerid][oDesmancheTime] = 300;

			KillTimer(Desmanchando[playerid]);
			JaEstaDesmanchando[playerid] = 0;
			SetVehicleHealth(vid, 300);
			TogglePlayerControllable(playerid, 1);
		}
	}
	return 1;
}

forward IsABicicleta(carid);
public IsABicicleta(carid)
{
	new id = GetVehicleModel (carid);
   	if(id == 481 || id == 509 || id == 510) {
	   return 1;
   }
 	return 0;
}

forward IsABike(carid);
public IsABike(carid)
{
	new id = GetVehicleModel (carid);
   	if(id == 461 || id == 462 || id == 463 || id == 468 || id == 521 || id == 522 || id == 581 || id == 586 || id == 471) {
	   return 1;
   }
 	return 0;
}

forward IsATruck(carid);
public IsATruck(carid)
{
	new id = GetVehicleModel (carid);
   	if(id == 403 || id == 406 || id == 408 || id == 414 || id == 423 || id == 428 || id == 431 || id == 433 || id == 437 || id == 443 || id == 455 || id == 456 || id == 498 || id == 514 || id == 515 || id == 524 || id == 532 || id == 573 || id == 578 || id == 609) {
	   return 1;
   }
 	return 0;
}

forward IsASUV(carid);
public IsASUV(carid)
{
	new id = GetVehicleModel (carid);
	if (id == 400 || id ==  404 || id == 470 || id == 489 || id == 495 || id == 500 || id == 505 || id == 579 || id == 424 || id == 508)
	{
		return 1;
	}
  	return 0;
}

forward IsASportCar(carid);
public IsASportCar(carid)
{
	new id = GetVehicleModel(carid);
	if (id == 411 || id == 415 || id == 429 || id == 451 || id == 477 || id == 480 || id == 494 || id == 502 || id == 503 || id == 506 || id == 541 || id == 559 || id == 560 || id == 562 || id == 565  || id == 587 || id == 589 || id == 602 || id == 603 || id == 409 || id == 504 || id == 558) {
		return 1;
	}
	return 0;
}

forward IsAVan(carid);
public IsAVan(carid)
{
	new id = GetVehicleModel (carid);
	if (id == 413 || id == 418 || id == 422 || id == 440|| id == 459 || id == 478 || id == 482 || id == 483 || id == 525 || id == 535 || id == 543 || id == 554 || id == 605 || id == 574 || id == 583 || id == 588 || id == 552 || id == 530)
	{
		return 1;
	}
	return 0;
}

forward IsAPopularCar(carid);
public IsAPopularCar(carid)
{
	new id = GetVehicleModel (carid);
	if (id == 401 || id == 402 || id == 404 || id == 405 || id == 410 || id == 412 || id == 419 || id == 420 || id == 421 || id == 426 || id == 436 || id == 438 || id == 439 || id == 442 || id == 445 || id == 457 || id == 458 || id == 466 || id == 467 || id == 474 || id == 475 || id == 479 || id == 491
	|| id == 492 || id == 496 || id == 507 || id == 516 || id == 517 || id == 518 || id == 526 || id == 527 || id == 529 || id == 531 || id == 533 || id == 534 || id == 536 || id == 540 || id == 542 || id == 546 || id == 547 || id == 549 || id == 550
	|| id == 551 || id == 555 || id == 561 || id == 566 || id == 567 || id == 575 || id == 576 || id == 580 || id == 585 || id == 600 || id == 604)
	{
		return 1;
	}
	return 0;
}

forward IsAUnique(carid);
public IsAUnique(carid)
{
	new id = GetVehicleModel (carid);
	if (id == 485 || id == 486 || id == 532 || id == 539 || id == 545 || id == 568 || id == 572 || id == 556 || id == 557 || id == 434)
	{
		return 1;
	}
	return 0;
}


stock IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}

CMD:parardemanche(playerid, params[])
{
 	KillTimer(Desmanchando[playerid]);
	JaEstaDesmanchando[playerid] = 0;
 	//TogglePlayerControllable(playerid, 1);
 	SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você cancelou o desmanche do veículo.");
 	return 1;
}

COMMAND:pegarcarcaca(playerid,params[])
{
	if(!PlayerInfo[playerid][pLogado]) return 1;
	if(IsPlayerConnected(playerid))
	{
	    new VehicleP = GetPlayerVehicleID(playerid);
 		if(IsPlayerInAnyVehicle(playerid))
   		{
   		    new m = GetVehicleModel(VehicleP);
    		if (m == 578)
 	   		{
	   		    new JaTemCarc = 0;
	   		    for(new c = 0; c < MAX_CARCACAS; c++)
				{
				    if(Carcaca[c] != -1)
					{
					    if(CarcacaCar[c] == VehicleP)
	    				{
	    				    JaTemCarc = 1;
	    				    break;
	    				}
					}
				}
   		        if(JaTemCarc == 1) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Já existe uma Carcaça em seu DFT.");

  	    		if(GetPlayerState(playerid)==2)
	   	    	{
	   	    	    new Float:x, Float:y, Float:z;
				    for(new c = 0; c < MAX_CARCACAS; c++)
					{
					    if(Carcaca[c] != -1)
					    {
					        if(CarcacaCar[c] < 1)
					        {
							    GetDynamicObjectPos(Carcaca[c], x, y, z);
						    	if(IsPlayerInRangeOfPoint(playerid,10.0, x, y, z))
								{
                                    CarcacaCar[c] = VehicleP;
								    AttachDynamicObjectToVehicle(Carcaca[c], VehicleP, 0.015223, -1.390295, 0.173763, 0.000000, 0.000000, 1.164390);
									SendClientMessage(playerid, COLOR_LIGHTRED, "Carcaça colocada em seu DFT.");
									break;
								}
							}
						}
					}
				}
      			else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa ser o condutor do DFT.");
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está em um DFT.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está em um DFT.");
	}
	return 1;
}

stock GetName(playerid) return Nickname[playerid];


ALTCOMMAND:mobilia->furniture;
CMD:furniture(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pEditMovel] != -1 ) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes");
	if(PlayerInfo[playerid][pEditPorta][0] != -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes");
	if(PlayerInfo[playerid][pEditPorta][1] != -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Termine de editar o objeto antes");
	if(!PlayerInfo[playerid][pLogado]) return 1;
    VendoFurniList[playerid][199] = 0;
    TexturaEdit[playerid] = 0;

    new c = -1;
    if(PlayerInfo[playerid][pEntrouCasa] != -1) c = PlayerInfo[playerid][pEntrouCasa];
    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1) c = PlayerInfo[playerid][pEntrouEmpresa];
    else if(PlayerInfo[playerid][pEntrouComplexo] != -1) c = PlayerInfo[playerid][pEntrouComplexo];
    else if(PlayerInfo[playerid][pEntrouGaragem] != -1) c = PlayerInfo[playerid][pEntrouGaragem];
    if(c == -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando aqui!");

    for(new i = 0; i < 50; i++)
    {
        VendoFurniList[playerid][i] = 0;
    }
    PlayerInfo[playerid][pEditPorta][0] = -1;
    PlayerInfo[playerid][pEditPorta][1] = -1;

    new MaxMoveis = PlayerMaxMoveis(playerid);
 	new Moveis = GetInteriorMoveis(playerid);

    new strCasa[64];
    if(PlayerInfo[playerid][pEntrouCasa] != -1)
    {
	    if(HouseInfo[c][hCriada])
		{
		    if(HouseInfo[c][hDono] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não é possível utilizar o furniture em uma casa sem dono.");
		    if(HouseInfo[c][hDono] == PlayerInfo[playerid][pID] || !strcmp(HouseInfo[c][hPerm1], PlayerName(playerid, 0), false) || !strcmp(HouseInfo[c][hPerm2], PlayerName(playerid, 0), false) || !strcmp(HouseInfo[c][hPerm3], PlayerName(playerid, 0), false))
			{
	            format(strCasa,sizeof(strCasa),"[Furniture] Casa: %d | Moveis [%d/%d]",c,Moveis,MaxMoveis);

	            Dialog_Show(playerid, DIALOG_FURNITURE_N, DIALOG_STYLE_LIST, strCasa, "Ver Moveis\nComprar Movel\nDeletar Todos", "Selecionar", "Cancelar");
	            return 1;
			}
			else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissões para mecher no móveis desta casa.");
		}
	}
	if(PlayerInfo[playerid][pEntrouGaragem] != -1)
    {
	    if(GaragemInfo[c][hCriada])
		{
		    if(GaragemInfo[c][hDono] == 0 && GaragemInfo[c][hTipo] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissões para mexer no móveis desta garagem.");
		    if(GaragemInfo[c][hDono] == 0)
			{
			    if(HouseInfo[GaragemInfo[c][hTipo]][hDono] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissões para mexer no móveis desta garagem.");
				if(HouseInfo[GaragemInfo[c][hTipo]][hDono] == PlayerInfo[playerid][pID]
				|| !strcmp(HouseInfo[GaragemInfo[c][hTipo]][hPerm1], PlayerName(playerid, 0), false)
				|| !strcmp(HouseInfo[GaragemInfo[c][hTipo]][hPerm2], PlayerName(playerid, 0), false)
				|| !strcmp(HouseInfo[GaragemInfo[c][hTipo]][hPerm3], PlayerName(playerid, 0), false))
				{
				    format(strCasa,sizeof(strCasa),"[Furniture][C] Garagem: %d | Moveis [%d/%d]",c,Moveis,MaxMoveis);

		            Dialog_Show(playerid, DIALOG_FURNITURE_N, DIALOG_STYLE_LIST, strCasa, "Ver Moveis\nComprar Movel\nDeletar Todos", "Selecionar", "Cancelar");
		            return 1;
				}
			}
			else
			{
			    if(GaragemInfo[c][hDono] == PlayerInfo[playerid][pID]
				|| !strcmp(GaragemInfo[c][hPerm1], PlayerName(playerid, 0), false)
				|| !strcmp(GaragemInfo[c][hPerm2], PlayerName(playerid, 0), false)
				|| !strcmp(GaragemInfo[c][hPerm3], PlayerName(playerid, 0), false))
				{
		            format(strCasa,sizeof(strCasa),"[Furniture][P] Garagem: %d | Moveis [%d/%d]",c,Moveis,MaxMoveis);

		            Dialog_Show(playerid, DIALOG_FURNITURE_N, DIALOG_STYLE_LIST, strCasa, "Ver Moveis\nComprar Movel\nDeletar Todos", "Selecionar", "Cancelar");
		            return 1;
				}
				else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissões para mexer no móveis desta garagem.");
			}
		}
	}
	if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
	{
		if(EmpInfo[c][eCriada])
		{
		    if(EmpInfo[c][eDono] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não é possível utilizar o furniture em uma empresa sem dono.");
		    if(EmpInfo[c][eDono] == PlayerInfo[playerid][pID] || !strcmp(EmpInfo[c][ePerm1], PlayerName(playerid, 0), false) || !strcmp(EmpInfo[c][ePerm2], PlayerName(playerid, 0), false) || !strcmp(EmpInfo[c][ePerm3], PlayerName(playerid, 0), false))
			{
	            format(strCasa,sizeof(strCasa),"[Furniture] Empresa: %d | Moveis [%d/%d]",c,Moveis,MaxMoveis);

	            Dialog_Show(playerid, DIALOG_FURNITURE_N, DIALOG_STYLE_LIST, strCasa, "Ver Moveis\nComprar Movel\nDeletar Todos", "Selecionar", "Cancelar");
	            return 1;
			}
			else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissões para mecher nos moveis desta empresa.");
		}
	}
	if(PlayerInfo[playerid][pEntrouComplexo] != -1){
		if(ComplexoInfo[c][cCriada]){
		    if(ComplexoInfo[c][cDono] == 0) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Não é possível utilizar o furniture em um complexo sem dono.");
		    if(ComplexoInfo[c][cDono] == PlayerInfo[playerid][pID] || !strcmp(ComplexoInfo[c][cPerm1], PlayerName(playerid, 0), false) || !strcmp(ComplexoInfo[c][cPerm2], PlayerName(playerid, 0), false) || !strcmp(ComplexoInfo[c][cPerm3], PlayerName(playerid, 0), false)){
	            format(strCasa,sizeof(strCasa),"[Furniture] Complexo: %d | Moveis [%d/%d]",c,Moveis,MaxMoveis);

	            Dialog_Show(playerid, DIALOG_FURNITURE_N, DIALOG_STYLE_LIST, strCasa, "Ver Moveis\nComprar Movel\nDeletar Todos", "Selecionar", "Cancelar");
	            return 1;
			}
			else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem permissões para mecher nos moveis desta empresa.");
		}
	}
	return 1;
}

stock PlayerMaxMoveis(playerid){
	new MaxMoveis;
    if(PlayerInfo[playerid][pDoador] == 1) MaxMoveis = 350;
    else if(PlayerInfo[playerid][pDoador] == 2) MaxMoveis = 600;
    else if(PlayerInfo[playerid][pDoador] == 3) MaxMoveis = 800;
    else MaxMoveis = 250;

    return MaxMoveis;
}

stock GetInteriorMoveis(playerid){
	new Moveis = 0;
    if(PlayerInfo[playerid][pEntrouCasa] != -1){
	    for(new m; m < MAX_MOVEIS; m++) {
      		if(FurniInfo[m][mCriado] != 0){
        		if(FurniInfo[m][mNaCasa] == PlayerInfo[playerid][pEntrouCasa]){
     	    		Moveis++;
           		}
			}
    	}
	}
	else if(PlayerInfo[playerid][pEntrouEmpresa] != -1){
		for(new m; m < MAX_MOVEIS; m++){
  			if(FurniInfo[m][mCriado] != 0){
     			if(FurniInfo[m][mNaEmpresa] == PlayerInfo[playerid][pEntrouEmpresa]) {
   	    			Moveis++;
          		}
           	}
		}
	}
	else if(PlayerInfo[playerid][pEntrouComplexo] != -1){
		for(new m; m < MAX_MOVEIS; m++){
			if(FurniInfo[m][mCriado] != 0){
		   		if(FurniInfo[m][mNoComplexo] == PlayerInfo[playerid][pEntrouComplexo]){
		        	Moveis++;
				}
			}
		}
	}
	else if(PlayerInfo[playerid][pEntrouGaragem] != -1){
 		for(new m; m < MAX_MOVEIS; m++){
			if(FurniInfo[m][mCriado] != 0){
		    	if(FurniInfo[m][mNaGaragem] == PlayerInfo[playerid][pEntrouGaragem]){
		        	Moveis++;
       			}
			}
		}
	}
	return Moveis;
}

Dialog:DIALOG_FURNITURE_N(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new strCasa[124];
	    new c = -1;
	    if(PlayerInfo[playerid][pEntrouCasa] != -1)
	    {
   	 		c = PlayerInfo[playerid][pEntrouCasa];
     		format(strCasa,sizeof(strCasa),"[Furniture] Casa: %d",c);
		}
		else if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
	    {
	        c = PlayerInfo[playerid][pEntrouEmpresa];
     		format(strCasa,sizeof(strCasa),"[Furniture] Empresa: %d",c);
	    }
	    else if(PlayerInfo[playerid][pEntrouComplexo] != -1)
	    {
	        c = PlayerInfo[playerid][pEntrouComplexo];
     		format(strCasa,sizeof(strCasa),"[Furniture] Complexo: %d",c);
	    }
	    else if(PlayerInfo[playerid][pEntrouGaragem] != -1)
	    {
	        c = PlayerInfo[playerid][pEntrouGaragem];
     		format(strCasa,sizeof(strCasa),"[Furniture] Garagem: %d",c);
	    }
	    if(c == -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando aqui.");

	    switch(listitem)
	    {
	        case 0: VerFurniMoveis(playerid, 0);
	        case 1:
			{
			    new MaxMoveis = PlayerMaxMoveis(playerid);
			    new Moveis = GetInteriorMoveis(playerid);
       			if(Moveis < MaxMoveis) {
          			format(strCasa,sizeof(strCasa),"%s | Moveis [%d/%d]",strCasa, Moveis, MaxMoveis);
					Dialog_Show(playerid, DIALOG_F_CATEGORIAS, DIALOG_STYLE_LIST, strCasa, "Conforto\nDecorações\nEntreterimento\nEletrodomésticos\nBanheiro\nIluminacao\nArmazenamento\nSuperfícies\nDiversos\nEspecial\nPorta\nTVS\nComputadores", "Selecionar C", "Cancelar");
				}
				else return SCM(playerid, COLOR_LIGHTRED, "Limite de móveis atingido.");
			}
			case 2:
			{
			    if(PlayerInfo[playerid][pEntrouCasa] != -1)
				{
				    new str[256];
					format(str,sizeof(str),"Você está prestes a deletar todos os moveis do furniture de sua casa, tem certeza disso?");
    				SendConfirmationMsg(playerid,str,DIALOG_APAGARFURNITURE,1);
					return 1;
				}
			    else if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
				{
				    new str[256];
					format(str,sizeof(str),"Você está prestes a deletar todos os moveis do furniture de sua empresa, tem certeza disso?");
    				SendConfirmationMsg(playerid,str,DIALOG_APAGARFURNITURE,2);
					return 1;
				}
			    else if(PlayerInfo[playerid][pEntrouComplexo] != -1)
				{
				    new str[256];
					format(str,sizeof(str),"Você está prestes a deletar todos os moveis do furniture de seu complexo, tem certeza disso?");
    				SendConfirmationMsg(playerid,str,DIALOG_APAGARFURNITURE,3);
					return 1;
				}
				else if(PlayerInfo[playerid][pEntrouGaragem] != -1)
				{
				    new str[256];
					format(str,sizeof(str),"Você está prestes a deletar todos os moveis do furniture de sua garagem, tem certeza disso?");
    				SendConfirmationMsg(playerid,str,DIALOG_APAGARFURNITURE,4);
					return 1;
				}
			}
	    }
	}
	return 1;
}

stock VerFurniMoveis(playerid, pagina)
{
	new movel_start;
	switch(pagina)
	{
	    case 0: movel_start = 0;
	    case 1: movel_start = 40;
	    case 2: movel_start = 80;
	    case 3: movel_start = 120;
	    case 4: movel_start = 160;
	    case 5: movel_start = 200;
	    case 6: movel_start = 240;
	    case 7: movel_start = 280;
	    case 8: movel_start = 360;
	}

	new strCasa[124];
 	new casa = -1,
 	    emp = -1,
		complex = -1,
		garag = -1;

    new MovelTerm = movel_start+41,
		TotalLista = 1, TotalLista2 = 0;
	new strLista[1024];
	new Float:DistanciaObj;

	format(strLista,sizeof(strLista),"");

	new MaxMoveis = PlayerMaxMoveis(playerid);
 	new Moveis = GetInteriorMoveis(playerid);

  	if(PlayerInfo[playerid][pEntrouCasa] != -1)
   	{
 		format(strCasa,sizeof(strCasa),"[Furniture] Casa: %d - | Moveis [%d/%d]",PlayerInfo[playerid][pEntrouCasa], Moveis, MaxMoveis);
 		casa = PlayerInfo[playerid][pEntrouCasa];
 	    emp = -1;
		complex = -1;
		garag = -1;

		for(new m = 0; m < MAX_MOVEIS; m++)
  		{
    		if(FurniInfo[m][mCriado] != 0)
   			{
      			if(FurniInfo[m][mNaCasa] == casa)
  				{
  				    if(TotalLista2 >= movel_start)
  				    {
	  				    if((TotalLista-1) < MovelTerm)
	  	        		{
	  	        		    DistanciaObj = GetPlayerDistanceFromPoint(playerid, FurniInfo[m][mX], FurniInfo[m][mY], FurniInfo[m][mZ]);
	  	                    if(TotalLista == 1)
	   		    			{
			     		    	if(pagina != 0) format(strLista,sizeof(strLista),"Slot\tMovel\tDistancia do Obj\n<<Página Anterior\n%d\t%s\t%.2f", (movel_start+TotalLista), FurniInfo[m][mFurniNome], DistanciaObj);
								else format(strLista,sizeof(strLista),"Slot\tMovel\tDistancia do Obj\n%d\t%s\t%.2f", (movel_start+TotalLista), FurniInfo[m][mFurniNome], DistanciaObj);
							 	VendoFurniList[playerid][TotalLista] = m;
			      		    	TotalLista++;
							}
							else if(TotalLista > 1 && TotalLista < 40)
							{
				    			format(strLista,sizeof(strLista),"%s\n%d\t%s\t%.2f", strLista, (movel_start+TotalLista), FurniInfo[m][mFurniNome], DistanciaObj);
							    VendoFurniList[playerid][TotalLista] = m;
							    TotalLista++;
							}
							else if(TotalLista == 40)
							{
				    			format(strLista,sizeof(strLista),"%s\n%d\t%s\t%.2f\nPróxima Pagina >>", strLista, (movel_start+TotalLista), FurniInfo[m][mFurniNome], DistanciaObj);
				    			VendoFurniList[playerid][TotalLista] = m;
				    			TotalLista++;
							}
						}
					}
					TotalLista2++;
				}
			}
		}
		if(TotalLista == 1) return Dialog_Show(playerid, 999999, DIALOG_STYLE_MSGBOX, strCasa, "Não há nenhum móvel nessa casa.", "Fechar", "");
		else
		{
  			VendoFurniList[playerid][199] = pagina;
  			Dialog_Show(playerid, DIALOG_F_MOVEIS_N, DIALOG_STYLE_TABLIST_HEADERS, strCasa, strLista, "Selecionar", "Cancelar");
		}
	}
	else if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
 	{
 		format(strCasa,sizeof(strCasa),"[Furniture] Empresa: %d | Moveis [%d/%d]",PlayerInfo[playerid][pEntrouEmpresa], Moveis, MaxMoveis);
 		emp = PlayerInfo[playerid][pEntrouEmpresa];
 	    casa = -1;
		complex = -1;
		garag = -1;

		for(new m = 0; m < MAX_MOVEIS; m++)
  		{
    		if(FurniInfo[m][mCriado] != 0)
   			{
      			if(FurniInfo[m][mNaEmpresa] == emp)
  				{
  				    if(TotalLista2 >= movel_start)
  				    {
	  				    if((TotalLista-1) < MovelTerm)
	  	        		{
	  	        		    DistanciaObj = GetPlayerDistanceFromPoint(playerid, FurniInfo[m][mX], FurniInfo[m][mY], FurniInfo[m][mZ]);
	  	                    if(TotalLista == 1)
	   		    			{
			     		    	if(pagina != 0) format(strLista,sizeof(strLista),"Slot\tMovel\tDistancia do Obj\n<<Página Anterior\n%d\t%s\t%.2f", (movel_start+TotalLista), FurniInfo[m][mFurniNome], DistanciaObj);
								else format(strLista,sizeof(strLista),"Slot\tMovel\tDistancia do Obj\n%d\t%s\t%.2f", (movel_start+TotalLista), FurniInfo[m][mFurniNome], DistanciaObj);
							 	VendoFurniList[playerid][TotalLista] = m;
			      		    	TotalLista++;
							}
							else if(TotalLista > 1 && TotalLista < 40)
							{
				    			format(strLista,sizeof(strLista),"%s\n%d\t%s\t%.2f", strLista, (movel_start+TotalLista), FurniInfo[m][mFurniNome], DistanciaObj);
							    VendoFurniList[playerid][TotalLista] = m;
							    TotalLista++;
							}
							else if(TotalLista == 40)
							{
				    			format(strLista,sizeof(strLista),"%s\n%d\t%s\t%.2f\nPróxima Pagina >>", strLista, (movel_start+TotalLista), FurniInfo[m][mFurniNome], DistanciaObj);
				    			VendoFurniList[playerid][TotalLista] = m;
				    			TotalLista++;
							}
						}
					}
					TotalLista2++;
				}
			}
		}
		if(TotalLista == 1) return Dialog_Show(playerid, 999999, DIALOG_STYLE_MSGBOX, strCasa, "Não há nenhum móvel nessa empresa.", "Fechar", "");
		else
		{
  			VendoFurniList[playerid][199] = pagina;
  			Dialog_Show(playerid, DIALOG_F_MOVEIS_N, DIALOG_STYLE_TABLIST_HEADERS, strCasa, strLista, "Selecionar", "Cancelar");
		}
	}
   	else if(PlayerInfo[playerid][pEntrouComplexo] != -1)
   	{
   		format(strCasa,sizeof(strCasa),"[Furniture] Complexo: %d | Moveis [%d/%d]",PlayerInfo[playerid][pEntrouComplexo], Moveis, MaxMoveis);
   		complex = PlayerInfo[playerid][pEntrouComplexo];
 	    casa = -1;
		emp = -1;
		garag = -1;

		for(new m = 0; m < MAX_MOVEIS; m++)
  		{
    		if(FurniInfo[m][mCriado] != 0)
   			{
      			if(FurniInfo[m][mNoComplexo] == complex)
  				{
  				    if(TotalLista2 >= movel_start)
  				    {
	  				    if((TotalLista-1) < MovelTerm)
	  	        		{
	  	        		    DistanciaObj = GetPlayerDistanceFromPoint(playerid, FurniInfo[m][mX], FurniInfo[m][mY], FurniInfo[m][mZ]);
	  	                    if(TotalLista == 1)
	   		    			{
			     		    	if(pagina != 0) format(strLista,sizeof(strLista),"Slot\tMovel\tDistancia do Obj\n<<Página Anterior\n%d\t%s\t%.2f", (movel_start+TotalLista), FurniInfo[m][mFurniNome], DistanciaObj);
								else format(strLista,sizeof(strLista),"Slot\tMovel\tDistancia do Obj\n%d\t%s\t%.2f", (movel_start+TotalLista), FurniInfo[m][mFurniNome], DistanciaObj);
							 	VendoFurniList[playerid][TotalLista] = m;
			      		    	TotalLista++;
							}
							else if(TotalLista > 1 && TotalLista < 40)
							{
				    			format(strLista,sizeof(strLista),"%s\n%d\t%s\t%.2f", strLista, (movel_start+TotalLista), FurniInfo[m][mFurniNome], DistanciaObj);
							    VendoFurniList[playerid][TotalLista] = m;
							    TotalLista++;
							}
							else if(TotalLista == 40)
							{
				    			format(strLista,sizeof(strLista),"%s\n%d\t%s\t%.2f\nPróxima Pagina >>", strLista, (movel_start+TotalLista), FurniInfo[m][mFurniNome], DistanciaObj);
				    			VendoFurniList[playerid][TotalLista] = m;
				    			TotalLista++;
							}
						}
					}
					TotalLista2++;
				}
			}
		}
		if(TotalLista == 1) return Dialog_Show(playerid, 999999, DIALOG_STYLE_MSGBOX, strCasa, "Não há nenhum móvel nesse complexo.", "Fechar", "");
		else
		{
  			VendoFurniList[playerid][199] = pagina;
  			Dialog_Show(playerid, DIALOG_F_MOVEIS_N, DIALOG_STYLE_TABLIST_HEADERS, strCasa, strLista, "Selecionar", "Cancelar");
		}
    }
    else if(PlayerInfo[playerid][pEntrouGaragem] != -1)
    {
   		format(strCasa,sizeof(strCasa),"[Furniture] Garagem: %d | Moveis [%d/%d]",PlayerInfo[playerid][pEntrouGaragem], Moveis, MaxMoveis);
   		garag = PlayerInfo[playerid][pEntrouGaragem];
 	    casa = -1;
		emp = -1;
		complex = -1;

		for(new m = 0; m < MAX_MOVEIS; m++)
  		{
    		if(FurniInfo[m][mCriado] != 0)
   			{
      			if(FurniInfo[m][mNaGaragem] == garag)
  				{
  				    if(TotalLista2 >= movel_start)
  				    {
	  				    if((TotalLista-1) < MovelTerm)
	  	        		{
	  	        		    DistanciaObj = GetPlayerDistanceFromPoint(playerid, FurniInfo[m][mX], FurniInfo[m][mY], FurniInfo[m][mZ]);
	  	                    if(TotalLista == 1)
	   		    			{
			     		    	if(pagina != 0) format(strLista,sizeof(strLista),"Slot\tMovel\tDistancia do Obj\n<<Página Anterior\n%d\t%s\t%.2f", (movel_start+TotalLista), FurniInfo[m][mFurniNome], DistanciaObj);
								else format(strLista,sizeof(strLista),"Slot\tMovel\tDistancia do Obj\n%d\t%s\t%.2f", (movel_start+TotalLista), FurniInfo[m][mFurniNome], DistanciaObj);
							 	VendoFurniList[playerid][TotalLista] = m;
			      		    	TotalLista++;
							}
							else if(TotalLista > 1 && TotalLista < 40)
							{
				    			format(strLista,sizeof(strLista),"%s\n%d\t%s\t%.2f", strLista, (movel_start+TotalLista), FurniInfo[m][mFurniNome], DistanciaObj);
							    VendoFurniList[playerid][TotalLista] = m;
							    TotalLista++;
							}
							else if(TotalLista == 40)
							{
				    			format(strLista,sizeof(strLista),"%s\n%d\t%s\t%.2f\nPróxima Pagina >>", strLista, (movel_start+TotalLista), FurniInfo[m][mFurniNome], DistanciaObj);
				    			VendoFurniList[playerid][TotalLista] = m;
				    			TotalLista++;
							}
						}
					}
					TotalLista2++;
				}
			}
		}
		if(TotalLista == 1) return Dialog_Show(playerid, 999999, DIALOG_STYLE_MSGBOX, strCasa, "Não há nenhum móvel nessa garagem.", "Fechar", "");
		else
		{
  			VendoFurniList[playerid][199] = pagina;
  			Dialog_Show(playerid, DIALOG_F_MOVEIS_N, DIALOG_STYLE_TABLIST_HEADERS, strCasa, strLista, "Selecionar", "Cancelar");
		}
    }
    else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando aqui.");
	return 1;
}

Dialog:DIALOG_F_MOVEIS_N(playerid, response, listitem, inputtext[])
{
	if(!response) return 1;

	new strCasa[124];
 	new c = -1;
  	if(PlayerInfo[playerid][pEntrouCasa] != -1)
   	{
 		c = PlayerInfo[playerid][pEntrouCasa];
 		format(strCasa,sizeof(strCasa),"[Furniture] Casa: %d",c);
	}
	else if(PlayerInfo[playerid][pEntrouEmpresa] != -1)
 	{
  		c = PlayerInfo[playerid][pEntrouEmpresa];
  		format(strCasa,sizeof(strCasa),"[Furniture] Empresa: %d",c);
    }
    else if(PlayerInfo[playerid][pEntrouComplexo] != -1)
 	{
  		c = PlayerInfo[playerid][pEntrouComplexo];
  		format(strCasa,sizeof(strCasa),"[Furniture] Complexo: %d",c);
    }
    else if(PlayerInfo[playerid][pEntrouGaragem] != -1)
 	{
  		c = PlayerInfo[playerid][pEntrouGaragem];
  		format(strCasa,sizeof(strCasa),"[Furniture] Garagem: %d",c);
    }
    if(c == -1) return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode usar este comando aqui.");

	//Paginação
	if(listitem == 0 && VendoFurniList[playerid][199] > 0)
	{
	    VerFurniMoveis(playerid, VendoFurniList[playerid][199]-1);
	}
	else if(listitem == 41 && VendoFurniList[playerid][199] > 0 && VendoFurniList[playerid][199] < 8)
	{
	    VerFurniMoveis(playerid, VendoFurniList[playerid][199]+1);
	}
	else if(listitem == 40 && VendoFurniList[playerid][199] == 0)
	{
	    VerFurniMoveis(playerid, VendoFurniList[playerid][199]+1);
	}
	else
	{
	    new idselect;

	    if(VendoFurniList[playerid][199] == 0) idselect = listitem+1;
	    else idselect = listitem;

   		new MovelID  = VendoFurniList[playerid][idselect];
   		VendoFurniList[playerid][0] = MovelID;
   		if(ObjetoEPorta(FurniInfo[MovelID][mModelo]))
   		{
   		    Dialog_Show(playerid, DIALOG_F_PORTAS, DIALOG_STYLE_LIST, strCasa, "Editar Posição\nEditar Nome\nEditar Textura\nEditar Textura 2\nPosição Porta Aberta\nDeletar", "Selecionar", "Fechar");
   		}
   		else
   		{
        	Dialog_Show(playerid, DIALOG_F_MOVEIS3, DIALOG_STYLE_LIST, strCasa, "Editar Posição\nEditar Nome\nEditar Textura\nEditar Textura 2\nDeletar", "Selecionar", "Fechar");
		}
	}
	return 1;
}

stock CriarSangue(playerid)
{
    new surf = GetPlayerSurfingVehicleID(playerid);
    if(IsPlayerFalling(playerid) || IsPlayerJumping(playerid) || IsPlayerInWater(playerid) || surf != INVALID_VEHICLE_ID || IsPlayerInAnyVehicle(playerid)) return false;

	new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);

	new sid = 9999999;
	for(new s = 0; s < MAX_SANGUE_CHAO; s++)
	{
	    if(SangueData[s][SangueTempo] == 0)
	    {
	        sid = s;
	        break;
	    }
	}
	if(sid == 9999999) return 1;

	SangueData[sid][SangueObj] = CreateDynamicObject( 19836, pos[0],pos[1],(pos[2] - 0.99),0.0,0.0,0.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid),-1,50.0);
	SangueData[sid][SangueTempo] = SANGUE_TEMPO;
	return true;
}

stock IsPlayerFalling(playerid)
{
	new
			animation[32];
	GetAnimationName(
		GetPlayerAnimationIndex(playerid),
		animation,
		0,
		animation,
		32
	);
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT
	&& (!strcmp(animation, "FALL_FALL", true) || !strcmp(animation, "FALL_GLIDE", true)))
		return true;
	return false;
}

stock IsPlayerJumping(playerid)
{
	new
			animation[32];
	GetAnimationName(
		GetPlayerAnimationIndex(playerid),
		animation,
		0,
		animation,
		32
	);
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT
	&& (!strcmp(animation, "JUMP_LAUNCH", true) || !strcmp(animation, "JUMP_GLIDE", true)))
		return true;
	return false;
}
//==============================================================================================//
CMD:ajudapesca(playerid,params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Você deve estar logado para utilizar este comando.");

    SendClientMessage(playerid, COLOR_LIGHTGREEN, "_______________________________________");
    SendClientMessage(playerid, COLOR_GREY,"Sistema de Pesca:");
	SendClientMessage(playerid,	COLOR_GREY,"Use '/pescar' para começar apé no pescar no pier.");
 	SendClientMessage(playerid,	COLOR_GREY,"Use '/venderpeixes' para vender os peixes que você já pescou.");
  	SendClientMessage(playerid,	COLOR_GREY,"Use '/meuspeixes' para ver os seus peixes pescados.");
  	return true;
}

CMD:pescar(playerid,params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Você deve estar logado para utilizar este comando.");
    if(PlayerInfo[playerid][pJob] != JOB_PESCADOR) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não é um pescador.");

	new Float:x,Float:y,Float:z;
	if(Fishingando[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já está pescando.");
	if(!IsPlayerInAnyVehicle(playerid))
	{
        if(IsPlayerInRangeOfPoint(playerid,10.0,403.6926,-2088.1819,7.8359) || IsPlayerInRangeOfPoint(playerid,10.0,354.9837,-2088.4375,7.8359) ||
        IsPlayerInRangeOfPoint(playerid,10.0,398.7906,-2088.4426,7.8359) || IsPlayerInRangeOfPoint(playerid,10.0,357.9417,-2088.7976,7.8359) ||
        IsPlayerInRangeOfPoint(playerid,10.0,396.1158,-2088.4426,7.8359) || IsPlayerInRangeOfPoint(playerid,10.0,349.8815,-2086.5725,7.8301) ||
        IsPlayerInRangeOfPoint(playerid,10.0,391.0401,-2088.4419,7.8359) || IsPlayerInRangeOfPoint(playerid,10.0,350.1172,-2073.5886,7.8359) ||
        IsPlayerInRangeOfPoint(playerid,10.0,383.4347,-2088.4409,7.8359) || IsPlayerInRangeOfPoint(playerid,10.0,350.0663,-2067.8779,7.8359) ||
        IsPlayerInRangeOfPoint(playerid,10.0,374.8870,-2088.4392,7.8359) || IsPlayerInRangeOfPoint(playerid,10.0,350.0005,-2065.2246,7.8359) ||
        IsPlayerInRangeOfPoint(playerid,10.0,369.6994,-2088.4382,7.8359) || IsPlayerInRangeOfPoint(playerid,10.0,349.8986,-2059.9092,7.8359) ||
        IsPlayerInRangeOfPoint(playerid,10.0,367.0965,-2088.4382,7.8359) || IsPlayerInRangeOfPoint(playerid,10.0,349.8648,-2052.6252,7.8359) ||
        IsPlayerInRangeOfPoint(playerid,10.0,362.4504,-2088.4380,7.8359)
        )
		{
		    if(FishWeighBarco[playerid] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algum barco carregado com peixes.");
		    if(PlayerInfo[playerid][pLoadCrate] != -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já está carregando uma caixa.");
		    if(PlayerInfo[playerid][pArmaMao] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você precisa guardar sua arma antes.");
            if(OutrasInfos[playerid][oAlgemado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não pode realizar essa ação estando algemado.");
			if(Fishingando[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já está pescando, aguarde.");

			if(IsPlayerInRangeOfPoint(playerid,0.1,FishingPosX[playerid],FishingPosY[playerid],FishingPosZ[playerid])) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não pode pescar no mesmo local em que estava, mova-se um pouco!");
			if(FishWeigh[playerid] >= 1200) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você já está com mais de 1200 Lbs de peixes.. Vá vendê-los.");

			GetPlayerPos(playerid,x,y,z);
	  		FishingPosX[playerid] = x;
	    	FishingPosY[playerid] = y;
	    	FishingPosZ[playerid] = z;

            Fishingando[playerid] = 1;
			ApplyAnimation(playerid,"SWORD","sword_block",50.0 ,0,1,0,1,1);
	  		SetPlayerAttachedObject(playerid, 0,18632,6,0.079376,0.037070,0.007706,181.482910,0.000000,0.000000,1.000000,1.000000,1.000000);
	    	FishTimer[playerid] = SetTimerEx("PlayerFishing",4000,false,"ii",playerid,1);
	     	SendClientMessage(playerid,COLOR_LIGHTGREEN,"Pescando... Não se mova.");
		}
		else {
			SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está próximo ao pier de Pesca.");
			cp_target[playerid] = 1;
   			SetPlayerCheckpoint(playerid, 369.0661,-2044.9672,7.6719, 10.0);
		}
	}
	else
	{
	    if(FishWeigh[playerid] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem alguns peixes em seu inventário, venda-os antes de utilizar um barco.");
	    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não está em um barco.");
	    if(Fishingando[playerid] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já está pescando, aguarde.");

	    new VehicleP = GetPlayerVehicleID(playerid);
	    new m = GetVehicleModel(VehicleP);

	    if(FishWeighBarcoID[playerid] > -1)
	    {
	        if(FishWeighBarcoID[playerid] != VehicleP)
	        {
	        	return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você já tem algum barco carregado com peixes.");
	        }
	    }

		new MaxPesoBoat;
		switch(m)
		{
		    case 473: //Dinghy
		    {
		        MaxPesoBoat = 8000;
		    }
		    case 472: //Coastguard
		    {
		        MaxPesoBoat = 10000;
		    }
		    case 453: //Dinghy
		    {
		        MaxPesoBoat = 20000;
		    }
		}

		if(MaxPesoBoat < 10000) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Este veículo não pode ser utilizado para pesca.");
		new slot = GetVehicleSlot(VehicleP);
		if(slot > -1) {
	    	if(VehicleInfo[slot][vOwner] == PlayerInfo[playerid][pID]) {
	    		if(FishBarcoPoint[playerid] == 0) {
	    		    if(IsPlayerInRangeOfPoint(playerid,40.0,375.8828,-2153.1353,-0.9955)) {
		    		    FishWeighBarcoID[playerid] = VehicleP;

		    		    Fishingando[playerid] = 1;
						GetPlayerPos(playerid,x,y,z);
				  		FishingPosX[playerid] = x;
				    	FishingPosY[playerid] = y;
				    	FishingPosZ[playerid] = z;
		    		    FishTimer[playerid] = SetTimerEx("PlayerFishing",4000,false,"ii",playerid,2);
	     				SendClientMessage(playerid,COLOR_LIGHTGREEN,"Pescando... Não se mova.");
	     				return 1;
					}
	    		    else {
						SendClientMessage(playerid, COLOR_LIGHTGREEN, "Vá até o ponto de pesca e utilize o comando novamente.");
						cp_target[playerid] = 1;
		    		    SetPlayerCheckpoint(playerid, 375.8828,-2153.1353,-0.9955, 10.0);
		    		    return 1;
					}
	    		}
	    		if(FishBarcoPoint[playerid] >= 1 && FishBarcoPoint[playerid] < 11) {
	    		    if(IsPlayerInRangeOfPoint(playerid,40.0,375.8828,-2153.1353,-0.9955)) {
		    		    FishWeighBarcoID[playerid] = VehicleP;

						Fishingando[playerid] = 1;
						GetPlayerPos(playerid,x,y,z);
				  		FishingPosX[playerid] = x;
				    	FishingPosY[playerid] = y;
				    	FishingPosZ[playerid] = z;
		    		    FishTimer[playerid] = SetTimerEx("PlayerFishing",4000,false,"ii",playerid,2);
	     				SendClientMessage(playerid,COLOR_LIGHTGREEN,"Pescando... Não se mova.");
	     				return 1;
					}
	    		    else {
						SendClientMessage(playerid, COLOR_LIGHTGREEN, "Vá até o ponto de pesca e utilize o comando novamente.");
						cp_target[playerid] = 1;
		    		    SetPlayerCheckpoint(playerid, 375.7923,-2158.4731,2.8651, 10.0);
		    		    return 1;
					}
	    		}
	    		else if(FishBarcoPoint[playerid] >= 11 && FishBarcoPoint[playerid] < 21) {
	    		    if(IsPlayerInRangeOfPoint(playerid,40.0,375.7923,-2158.4731,2.8651)) {
					    GetPlayerPos(playerid,x,y,z);
				  		FishingPosX[playerid] = x;
				    	FishingPosY[playerid] = y;
				    	FishingPosZ[playerid] = z;
				    	Fishingando[playerid] = 1;
		    		    FishTimer[playerid] = SetTimerEx("PlayerFishing",4000,false,"ii",playerid,2);
	     				SendClientMessage(playerid,COLOR_LIGHTGREEN,"Pescando... Não se mova.");
	     				return 1;
					}
	    		    else {
						SendClientMessage(playerid, COLOR_LIGHTGREEN, "Vá até o ponto de pesca e utilize o comando novamente.");
						cp_target[playerid] = 1;
		    		    SetPlayerCheckpoint(playerid, 365.1804,-2194.3152,-0.1900, 10.0);
		    		    return 1;
					}
	    		}
	    		else if(FishBarcoPoint[playerid] >= 21 && FishBarcoPoint[playerid] < 31) {
	    		    if(IsPlayerInRangeOfPoint(playerid,40.0,365.1804,-2194.3152,-0.1900)) {
					    GetPlayerPos(playerid,x,y,z);
				  		FishingPosX[playerid] = x;
				    	FishingPosY[playerid] = y;
				    	FishingPosZ[playerid] = z;
				    	Fishingando[playerid] = 1;
		    		    FishTimer[playerid] = SetTimerEx("PlayerFishing",4000,false,"ii",playerid,2);
	     				SendClientMessage(playerid,COLOR_LIGHTGREEN,"Pescando... Não se mova.");
	     				return 1;
					}
	    		    else {
						SendClientMessage(playerid, COLOR_LIGHTGREEN, "Vá até o ponto de pesca e utilize o comando novamente.");
						cp_target[playerid] = 1;
		    		    SetPlayerCheckpoint(playerid, 365.1804,-2194.3152,-0.1900, 10.0);
		    		    return 1;
					}
	    		}
			}
		}
	}
 	return true;
}

CMD:meuspeixes(playerid,params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Você deve estar logado para utilizar este comando.");
    if(PlayerInfo[playerid][pJob] != JOB_PESCADOR) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não é um pescador.");

    if(FishWeigh[playerid] > 0) format(string,sizeof(string),"Você tem %i Lbs de peixes em seu inventário.",FishWeigh[playerid]);
	else if(FishWeighBarco[playerid] > 0) format(string,sizeof(string),"Você tem %i Lbs de peixes em seu barco id %d.",FishWeighBarco[playerid],FishWeighBarcoID[playerid]);
	else format(string,sizeof(string),"[INV] {FFFFFF}Você tem %i lbs de peixes em seu inventário.", FishWeigh[playerid]);
  	SendClientMessage(playerid,COLOR_LIGHTGREEN,string);
   	return true;
}

CMD:venderpeixes(playerid,params[])
{
    if (PlayerInfo[playerid][pLogado] == 0) return SendClientMessage(playerid, COLOR_WHITE, "Você deve estar logado para utilizar este comando.");
    if(PlayerInfo[playerid][pJob] != JOB_PESCADOR) return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não é um pescador.");

	if(IsPlayerInAnyVehicle(playerid)) {
		new VehicleP = GetPlayerVehicleID(playerid);
	    if(FishWeighBarcoID[playerid] > -1) {
	        if(FishWeigh[playerid] > 0 || FishWeighBarco[playerid] > 0) {
		        if(FishWeighBarcoID[playerid] == VehicleP) {
		            if(!IsPlayerInRangeOfPoint(playerid,15.0,2784.9338,-2454.6338,13.6344)) {
					    SetPlayerCheckpoint(playerid, 2784.9338,-2454.6338,13.6344, 10.0);
						SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está na casa de vendas de peixe.");
						cp_target[playerid] = 1;
						return 1;
					}

					new pay;
				 	if(FishWeigh[playerid] > 0) {
					 	pay = floatround(FishWeigh[playerid]*0.5);
					 	format(string,sizeof(string),"Você recebeu R$%i por vender %i lbs de peixes.",pay,FishWeigh[playerid]);
					}
					else if(FishWeighBarco[playerid] > 0) {
						pay = floatround(FishWeighBarco[playerid]*0.5);
						format(string,sizeof(string),"Você recebeu R$%i por vender %i lbs de peixes.",pay,FishWeighBarco[playerid]);
					}
				    SendClientMessage(playerid,COLOR_LIGHTGREEN,string);


				    FishWeigh[playerid] = 0;
				    FishBarcoPoint[playerid] = 0;
				    FishWeighBarcoID[playerid] = -1;
				    FishWeighBarco[playerid] = 0;
				    PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]+pay;
		        }
		        else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está no seu barco carregado.");
			}
	    }
	    else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não tem peixes para vender.");
	}
	else {
	    if(FishWeigh[playerid] > 0 || FishWeighBarco[playerid] > 0) {
			if(!IsPlayerInRangeOfPoint(playerid,5.0, -754.3839,1529.4766,26.9495)) {
			    SetPlayerCheckpoint(playerid, -754.3839,1529.4766,26.9495, 5.0);
				SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não está na casa de vendas de peixe.");
				cp_target[playerid] = 1;
				return 1;
			}
		 	new pay;
		 	if(FishWeigh[playerid] > 0) {
			 	pay = floatround(FishWeigh[playerid]*0.5);
			 	format(string,sizeof(string),"Você recebeu R$%i por vender %i lbs de peixes.",pay,FishWeigh[playerid]);
			}
			else if(FishWeighBarco[playerid] > 0) {
				pay = floatround(FishWeighBarco[playerid]*0.5);
				format(string,sizeof(string),"Você recebeu R$%i por vender %i lbs de peixes.",pay,FishWeighBarco[playerid]);
			}
		    SendClientMessage(playerid,COLOR_LIGHTGREEN,string);


		    FishWeigh[playerid] = 0;
		    FishBarcoPoint[playerid] = 0;
		    FishWeighBarcoID[playerid] = -1;
		    FishWeighBarco[playerid] = 0;
		    PlayerInfo[playerid][pGrana] = PlayerInfo[playerid][pGrana]+pay;
		}
		else return SendClientMessage(playerid,COLOR_LIGHTRED,"ERRO:{FFFFFF} Você não tem peixes para vender.");
	}
    return true;
}

forward PlayerFishing(playerid,tipo);
public PlayerFishing(playerid,tipo)
{
    new fish = randomEx(0,8), str[256], fweight;
    RemovePlayerAttachedObject(playerid,0);

    new Float:DistMax;
    if(tipo == 1) DistMax = 3.0;
    else if(tipo == 2) DistMax = 20.0;

    if(!IsPlayerInRangeOfPoint(playerid, DistMax, FishingPosX[playerid],FishingPosY[playerid],FishingPosZ[playerid]))
	{
	 	SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:{FFFFFF} Você saiu do local em que você estava pescando e a pesca foi cancelada.");
	 	Fishingando[playerid] = 0;
	}
	switch(fish)
 	{
  		case 0,1,3,5,7,8:
 		{
 		    new fishspecie = randomEx(0,7), strz[24];
		    switch(fishspecie)
		    {
		    		case 0: { strz = "Tubarão"; fweight = randomEx(90,130); }
		            case 1: { strz = "Barracuda"; fweight = randomEx(50,90); }
		            case 2: { strz = "Bass"; fweight = randomEx(30,50); }
		            case 3: { strz = "Batfish"; fweight = randomEx(15,40); }
		            case 4: { strz = "Peixe-gato"; fweight = randomEx(90,130); }
		            case 5: { strz = "Black Tetra"; fweight = randomEx(10,20); }
		            case 6: { strz = "Carpa"; fweight = randomEx(30,60); }
		            case 7: { strz = "Boga"; fweight = randomEx(20,40); }
			}
		 	format(str,sizeof(str),"Você pescou um %s de %i lbs.",strz,fweight);

			if(tipo == 1) FishWeigh[playerid] += fweight;
			else if(tipo == 2) FishWeighBarco[playerid] += fweight;
  		}
      	case 2,6: format(str,sizeof(str),"Você não pescou nada");
       	case 4: format(str,sizeof(str),"Você pescou uma bota velha e a jogou de volta na água.");
	}
	SCM(playerid, COLOR_LIGHTGREEN, str);
	Fishingando[playerid] = 0;

	if(tipo == 2)
	{
		FishBarcoPoint[playerid]++;

		if(FishBarcoPoint[playerid] == 11)
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Vá até outro ponto de pesca e utilize o comando novamente.");
			cp_target[playerid] = 1;
   			SetPlayerCheckpoint(playerid, -464.2943, 1158.3857, 0.0221, 10.0);
		}
		else if(FishBarcoPoint[playerid] == 21)
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Vá até outro ponto de pesca e utilize o comando novamente.");
			cp_target[playerid] = 1;
   			SetPlayerCheckpoint(playerid, -486.9046, 1127.3021, -0.3087, 10.0);
		}
		else if(FishBarcoPoint[playerid] == 31)
		{
		    FishBarcoPoint[playerid] = 11;
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Vá até outro ponto de pesca e utilize o comando novamente.");
			cp_target[playerid] = 1;
   			SetPlayerCheckpoint(playerid, -519.4839, 1186.4100, -0.5192, 10.0);
		}
	}
	return 1;
}
CriarRefundoArma(admin[], arma, chave, jogador[])
{
	static
	    str[256];

	format(str,sizeof(str),"INSERT INTO refundoarma (admin,arma,chave,jogador) VALUES ('%s','%d','%d','%s')",
		SQL_ReturnEscaped(admin),
		arma,
		chave,
		SQL_ReturnEscaped(jogador)
	);
	mysql_tquery(Pipeline, str);
}
CriarRefundoItem(admin[], arma, chave, quantidade, jogador[])
{
	static
	    str[256];

	format(str,sizeof(str),"INSERT INTO refundoitens (admin,arma,chave,quantidade, jogador) VALUES ('%s','%d','%d','%d','%s')",
		SQL_ReturnEscaped(admin),
		arma,
		chave,
		quantidade,
		SQL_ReturnEscaped(jogador)
	);
	mysql_tquery(Pipeline, str);
}
CriarRefundoGrana(admin[], arma, chave, jogador[])
{
	static
	    str[256];

	format(str,sizeof(str),"INSERT INTO refundograna (admin,arma,chave,jogador) VALUES ('%s','%d','%d','%s')",
		SQL_ReturnEscaped(admin),
		arma,
		chave,
		SQL_ReturnEscaped(jogador)
	);
	mysql_tquery(Pipeline, str);
}
ReturnName(playerid, underscore=1)
{
	static
	    name[MAX_PLAYER_NAME + 1];

	GetPlayerName(playerid, name, sizeof(name));

	if (!underscore) {
	    for (new i = 0, len = strlen(name); i < len; i ++) {
	        if (name[i] == '_') name[i] = ' ';
		}
	}
	return name;
}

forward OnVerLastLogin(extraid);
public OnVerLastLogin(extraid)
{
	static
	    rows,
	    fields;

 	cache_get_data(rows, fields, Pipeline);

	if (!rows)
	    return SendClientMessage(extraid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Usuário não encontrado.");

	cache_get_data(rows, fields, Pipeline);

	static
		nome2[32],
		nome[32],
		nome3[32];

 	cache_get_field_content(0, "UltimoLogin", nome, Pipeline);
 	cache_get_field_content(0, "Username", nome2, Pipeline);
	cache_get_field_content(0, "pNomeOOC", nome3, Pipeline);

    format(string,sizeof(string),"O último login de %s foi em %s e seu usuário é %s.",nome2,nome,nome3);
    SendClientMessage(extraid,COLOR_LIGHTGREEN,string);
	return 1;
}
forward OnVerRefudoArma(extraid, id);
public OnVerRefudoArma(extraid, id)
{

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, Pipeline);

	if (!rows)
	    return SendClientMessage(extraid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta chave de refundo já foi usada ou não existe.");

	static
	    arma,
		chave,
		admin[32],
		nome[32];

 	cache_get_field_content(0, "jogador", nome, Pipeline);
 	cache_get_field_content(0, "admin", admin, Pipeline);
  	chave = cache_get_field_int(0, "chave");
  	arma = cache_get_field_int(0, "arma");


	if(strcmp(ReturnName(extraid), nome) == 0)
	{
		Dialog_Show(extraid, RefundoArma, DIALOG_STYLE_MSGBOX, "Refundo", "Chave: %d\nArma: %s (%d)\nAdministrador: %s\n\nCaso o item do refundo esteja errado contate um administrador.", "Receber", "Fechar", chave, GunNames[arma],arma,admin);
		Refundo[extraid][0] = chave;
		Refundo[extraid][1] = arma;

	}
	else
	{
		SendClientMessage(extraid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta chave de refundo não foi criada para seu personagem.");
	}
	return 1;
}
forward OnVerRefudoItem(extraid, id);
public OnVerRefudoItem(extraid, id)
{

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, Pipeline);

	if (!rows)
	    return SendClientMessage(extraid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta chave de refundo já foi usada ou não existe.");

	static
	    arma,
		chave,
		quantidade,
		etnia[128],
		admin[32],
		nome[32];

 	cache_get_field_content(0, "jogador", nome, Pipeline);
 	cache_get_field_content(0, "admin", admin, Pipeline);
  	chave = cache_get_field_int(0, "chave");
  	quantidade = cache_get_field_int(0, "quantidade");
  	arma = cache_get_field_int(0, "arma");

    switch (arma)
 	{
 	    case 1: { etnia = "Maconha Ruim";}
		case 2: { etnia = "Maconha Boa";}
		case 3: { etnia = "Maconha Excelente";}
		case 4: { etnia = "Cocaína Ruim";}
		case 5: { etnia = "Cocaína Boa";}
		case 6: { etnia = "Cocaína Excelente";}
		case 7: { etnia = "Crack Ruim";}
  		case 8: { etnia = "Crack Bom";}
		case 9: { etnia = "Crack Excelente";}
		case 10: { etnia = "LSD Ruim";}
		case 11: { etnia = "LSD Bom";}
		case 12: { etnia = "LSD Excelente";}
		case 13: { etnia = "Metanfetamina Ruim";}
		case 14: { etnia = "Metanfetamina Boa";}
  		case 15: { etnia = "Metanfetamina Excelente";}
		case 16: { etnia = "Munição 9mm";}
		case 17: { etnia = "Munição 5x56 mm ";}
		case 18: { etnia = "Cartucho";}
		case 19: { etnia = "Munição 12.7x106mm";}
		case 20: { etnia = "Tubo de lança perfume";}
		case 21: { etnia = "Pasta base";}
		case 22: { etnia = "Sementes";}
 	}

	if(strcmp(ReturnName(extraid), nome) == 0)
	{
		Dialog_Show(extraid, RefundoItem, DIALOG_STYLE_MSGBOX, "Refundo", "Chave: %d\nItem: %s\nQuantidade: %d\nAdministrador: %s\n\nCaso o item do refundo esteja errado contate um administrador.", "Receber", "Fechar", chave,etnia,quantidade,admin);
		Refundo[extraid][0] = chave;
		Refundo[extraid][1] = arma;
        Refundo[extraid][2] = quantidade;

	}
	else
	{
		SendClientMessage(extraid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta chave de refundo não foi criada para seu personagem.");
	}
	return 1;
}


forward OnVerRefudoGrana(extraid, id);
public OnVerRefudoGrana(extraid, id)
{

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, Pipeline);

	if (!rows)
	    return SendClientMessage(extraid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta chave de refundo já foi usada ou não existe.");

	static
	    arma,
		chave,
		admin[32],
		nome[32];

 	cache_get_field_content(0, "jogador", nome, Pipeline);
 	cache_get_field_content(0, "admin", admin, Pipeline);
  	chave = cache_get_field_int(0, "chave");
  	arma = cache_get_field_int(0, "arma");


	if(strcmp(ReturnName(extraid), nome) == 0)
	{
		Dialog_Show(extraid, RefundoGrana, DIALOG_STYLE_MSGBOX, "Refundo", "Chave: %d\nDinheiro: R$ %d \nAdministrador: %s\n\nCaso o item do refundo esteja errado contate um administrador.", "Receber", "Fechar", chave,arma,admin);
		Refundo[extraid][0] = chave;
		Refundo[extraid][1] = arma;

	}
	else
	{
		SendClientMessage(extraid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Esta chave de refundo não foi criada para seu personagem.");
	}
	return 1;
}
CMD:refundararma(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	if (PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pRefundTeam] < 1 && !OutrasInfos[playerid][oAdminOnDuty])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve usar o comando /aduty antes.");

	{
	    new userid[24], level;
		if(sscanf(params, "s[24]d",userid, level))
			return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /refundararma [Nome_Sobrenone] [arma]");

		new key = randomEx(1000, 99999999);

		CriarRefundoArma(PlayerInfo[playerid][pNomeOOC], level, key, userid);
		SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s criou uma chave de refundo ID %d para %s (Arma: %d).", PlayerInfo[playerid][pNomeOOC], key, userid, level);
	}
	return 1;
}
CMD:refundargrana(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
   	if (PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pRefundTeam] < 1 && !OutrasInfos[playerid][oAdminOnDuty])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve usar o comando /aduty antes.");

	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
	    new userid[24], level;
		if(sscanf(params, "s[24]d",userid, level))
			return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /refundagrana [Nome_Sobrenone] [dinheiro].");

		new key = randomEx(1000, 99999999);

		CriarRefundoGrana(PlayerInfo[playerid][pNomeOOC], level, key, userid);
		SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s criou uma chave de refundo ID %d para %s (Dinheiro: R$ %d).", PlayerInfo[playerid][pNomeOOC], key, userid, level);
	}
	return 1;
}
CMD:refundaritem(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
   	if (PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pRefundTeam] < 1 && !OutrasInfos[playerid][oAdminOnDuty])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve usar o comando /aduty antes.");

	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
	    new userid[24], level, etnia[128], quantidade;
		if(sscanf(params, "s[24]dd",userid, level, quantidade))
		{
		    new str[128];
			SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /refundaritem [Nome_Sobrenone] [Item ID] [quantidade].");
    		format(str,sizeof(str),"1. Maconha Ruim | 2. Maconha Boa | 3. Maconha Excelente"); SendClientMessage(playerid,COLOR_WHITE,str);
			format(str,sizeof(str),"4. Cocaína Ruim | 5. Cocaina Boa | 6. Cocaina Excelente"); SendClientMessage(playerid,COLOR_WHITE,str);
			format(str,sizeof(str),"7. Crack Ruim| 8. Crack Boa | 9. Crack Excelente"); SendClientMessage(playerid,COLOR_WHITE,str);
			format(str,sizeof(str),"10. LSD Ruim | 11. LSD Bom | 12. LSD Excelente"); SendClientMessage(playerid,COLOR_WHITE,str);
			format(str,sizeof(str),"13. Metanfetamina Ruim | 14. Metanfetamina Boa | 15. Metanfetamina Excelente"); SendClientMessage(playerid,COLOR_WHITE,str);
			format(str,sizeof(str),"16. Ammo 9mm | 17. Ammo 5x56mm | 18. Cartucho | 19. Ammo 12.7x106mm"); SendClientMessage(playerid,COLOR_WHITE,str);
			format(str, sizeof(str), "20. Lança Perfume | 21. Pasta Base | 22. Sementes"); SendClientMessage(playerid,COLOR_WHITE,str);
			return 1;
		}
		if (level < 1 || level > 23)
	    	return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Item inválido.");

		switch (level)
 		{
 	    	case 1: { etnia = "Maconha Ruim";}
			case 2: { etnia = "Maconha Boa";}
			case 3: { etnia = "Maconha Excelente";}
			case 4: { etnia = "Cocaína Ruim";}
			case 5: { etnia = "Cocaína Boa";}
			case 6: { etnia = "Cocaína Excelente";}
			case 7: { etnia = "Crack Ruim";}
  			case 8: { etnia = "Crack Bom";}
			case 9: { etnia = "Crack Excelente";}
			case 10: { etnia = "LSD Ruim";}
			case 11: { etnia = "LSD Bom";}
			case 12: { etnia = "LSD Excelente";}
			case 13: { etnia = "Metanfetamina Ruim";}
			case 14: { etnia = "Metanfetamina Boa";}
  			case 15: { etnia = "Metanfetamina Excelente";}
			case 16: { etnia = "Munição 9mm";}
			case 17: { etnia = "Munição 5x56mm ";}
			case 18: { etnia = "Cartucho";}
			case 19: { etnia = "Munição 12.7x106mm";}
			case 20: { etnia = "Lança perfume";}
			case 21: { etnia = "Pasta base";}
			case 22: { etnia = "Sementes";}
 		}

		new key = randomEx(1000, 99999999);

		CriarRefundoItem(PlayerInfo[playerid][pNomeOOC], level, key, quantidade, userid);
		SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s criou uma chave de refundo ID %d para %s (Item: %s | Quantidade: %d).", PlayerInfo[playerid][pNomeOOC], key, userid, etnia, quantidade);
	}
	return 1;
}

stock VerRefundoArma(playerid, chave)
{
	new
	    str[128];

	format(str, sizeof(str), "SELECT * FROM `refundoarma` WHERE `chave` = '%d'", chave);
	mysql_tquery(Pipeline, str, "OnVerRefudoArma", "dd", playerid, chave);
	return 1;
}
stock VerLastLogin(playerid, nome[])
{
	new
	    str[128];

	format(str, sizeof(str), "SELECT * FROM `accounts` WHERE `Username` = '%s'", nome);
	mysql_tquery(Pipeline, str, "OnVerLastLogin", "ds", playerid, nome);
	return 1;
}

stock VerRefundoGrana(playerid, chave)
{
	new
	    str[128];

	format(str, sizeof(str), "SELECT * FROM `refundograna` WHERE `chave` = '%d'", chave);
	mysql_tquery(Pipeline, str, "OnVerRefudoGrana", "dd", playerid, chave);
	return 1;
}
stock VerRefundoItem(playerid, chave)
{
	new
	    str[128];

	format(str, sizeof(str), "SELECT * FROM `refundoitens` WHERE `chave` = '%d'", chave);
	mysql_tquery(Pipeline, str, "OnVerRefudoItem", "dd", playerid, chave);
	return 1;
}

RefundoArmaRemover(chave)
{
	static
	    str[128];

	format(str, sizeof(str), "DELETE FROM `refundoarma` WHERE `chave` = '%d'", chave);
    mysql_tquery(Pipeline, str);
}
RefundoGranaRemover(chave)
{
	static
	    str[128];

	format(str, sizeof(str), "DELETE FROM `refundograna` WHERE `chave` = '%d'", chave);
    mysql_tquery(Pipeline, str);
}
RefundoItemRemover(chave)
{
	static
	    str[128];

	format(str, sizeof(str), "DELETE FROM `refundoitens` WHERE `chave` = '%d'", chave);
    mysql_tquery(Pipeline, str);
}
CMD:ajudainicial(playerid,params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if(PlayerInfo[playerid][pLevel] >= 0 && PlayerInfo[playerid][pAjudaInicial] != 2)
	{
	    new NaEmpresa = PlayerInfo[playerid][pEntrouEmpresa];
		if(NaEmpresa != -1)
		{
			switch(EmpInfo[NaEmpresa][eTipo])
			{
			    case EMP_TIPO_CONCE:
			    {
 					ShowModelSelectionMenu(playerid, "AJUDA INICIAL", MODEL_SELECTION_AJUDA_INI, CARROS_AJUDAINI, sizeof(CARROS_AJUDAINI), -16.0, 0.0, -55.0);
 					return 1;
				}
				default:
				{
    				SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} {FFFFFF}Você precisa estar dentro da concessionária e utilizar o comando.(/ajudainicial).");
				}
			}
		}
		else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} {FFFFFF}Você precisa estar dentro da concessionária e utilizar o comando.(/ajudainicial).");
	}
	else return SCM(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} {FFFFFF}Você já recebeu este beneficio.");
	return 1;
}
GPS(playerid, name[], Float:x, Float:y, Float:z)
{
    format(PlayerInfo[playerid][pLocation], 32, name);

    PlayerInfo[playerid][pWaypoint] = 1;
   	PlayerInfo[playerid][pWaypointPos][0] = x;
    PlayerInfo[playerid][pWaypointPos][1] = y;
   	PlayerInfo[playerid][pWaypointPos][2] = z;

	SetPlayerCheckpoint(playerid, x, y, z, 3.0);
	PlayerTextDrawShow(playerid, PlayerInfo[playerid][pTextdraws]);

	return 1;
}
stock LGPS(playerid)
{
    if (PlayerInfo[playerid][pWaypoint])
	{
 		PlayerInfo[playerid][pWaypoint] = 0;

 		DisablePlayerCheckpoint(playerid);
  		PlayerTextDrawHide(playerid, PlayerInfo[playerid][pTextdraws]);
	}
	return 1;
}

Dialog:DIALOG_GPS_END(playerid, response, listitem, inputtext[]) {
	if(response){
	    new str[64],
			strh[64];
        format(str, sizeof str, "%s",inputtext);
        for(new i; i < MAX_HOUSES; i++){
	        if(HouseInfo[i][hCriada]){
				if(strlen(HouseInfo[i][hEndereco]) > 5){
				    format(strh, sizeof strh, "%s", HouseInfo[i][hEndereco]);
				    if (strfind(str, strh, true) != -1){

				        if(HouseInfo[i][hExWorld] == 0){
							GPS(playerid, GetLocation(HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]), HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]);
							return 1;
						}
						else {
						    for(new c; c < MAX_COMPLEXOS; c++)
						    {
					        	if(ComplexoInfo[c][cID] == (HouseInfo[i][hExWorld]-1000))
					            {
					                GPS(playerid, GetLocation(ComplexoInfo[c][cExX], ComplexoInfo[c][cExY], ComplexoInfo[c][cExZ]), ComplexoInfo[c][cExX], ComplexoInfo[c][cExY], ComplexoInfo[c][cExZ]);
					                return 1;
					            }
							}
						}
					}
				}
			}
		}
	}
	SCM(playerid, COLOR_LIGHTRED, "Endereço não encontrado.");
	return 1;
}

forward GetClosetBusiness(playerid, biztype);
public GetClosetBusiness(playerid, biztype)
{
	new winner = -1; new Float:windistance = 9999999.0;
	for(new i; i < MAX_EMPRESAS; i++)
    {
        if(EmpInfo[i][eCriada]) {
            if(EmpInfo[i][eTipo] == biztype){
	            new Float:distance = GetDistanceToPoint(playerid,EmpInfo[i][eExX],EmpInfo[i][eExY],EmpInfo[i][eExZ]);
				if(distance < windistance) {
				    winner = i;
				    windistance = distance;
				}
			}
		}
	}
	return winner;
}

forward GetClosetPump(playerid);
public GetClosetPump(playerid)
{
	new winner = -1; new Float:windistance = 9999999.0;
	for(new i; i < MAX_GAS_PUMPS; i++)
    {
        if(PumpData[i][pumpExists]) {
        	new Float:distance = GetDistanceToPoint(playerid,PumpData[i][pumpPos][0], PumpData[i][pumpPos][1], PumpData[i][pumpPos][2]);
			if(distance < windistance) {
   				winner = i;
   				windistance = distance;
			}
		}
	}
	return winner;
}

Dialog:WoW(playerid, response, listitem, inputtext[]) {
	new emp_pox = -1;
	switch(listitem)
	{
	    case 0:
		{
		    Dialog_Show(playerid, DIALOG_GPS_END, DIALOG_STYLE_INPUT, "GPS - Endereço residêncial", "Entre com o endereço da residência:", "Encontrar", "Cancelar");
			return 1;
		}
	    case 1: GPS(playerid, "16ºBPM/UPP", 2515.4541,-1524.9955,24.0324);
	    case 2:
		{
            emp_pox = GetClosetPump(playerid);
			GPS(playerid, "Posto de Gasolina", PumpData[emp_pox][pumpPos][0], PumpData[emp_pox][pumpPos][1], PumpData[emp_pox][pumpPos][2]);
		}
		case 3:
		{
			emp_pox = GetClosetBusiness(playerid, 51);
			GPS(playerid, EmpInfo[emp_pox][eNome], EmpInfo[emp_pox][eExX],EmpInfo[emp_pox][eExY],EmpInfo[emp_pox][eExZ]);
		}
		case 4:
		{
		    emp_pox = GetClosetBusiness(playerid, 6);
			GPS(playerid, EmpInfo[emp_pox][eNome], EmpInfo[emp_pox][eExX],EmpInfo[emp_pox][eExY],EmpInfo[emp_pox][eExZ]);
		}
		case 5:
		{
		    emp_pox = GetClosetBusiness(playerid, 23);
	  		GPS(playerid, "Concessionaria", EmpInfo[emp_pox][eExX],EmpInfo[emp_pox][eExY],EmpInfo[emp_pox][eExZ]);
		}
		case 6:
		{
		    emp_pox = GetClosetBusiness(playerid, 7);
	   		GPS(playerid, EmpInfo[emp_pox][eNome], EmpInfo[emp_pox][eExX],EmpInfo[emp_pox][eExY],EmpInfo[emp_pox][eExZ]);
		}
		case 7:
		{
		    emp_pox = GetClosetBusiness(playerid, 20);
		    GPS(playerid, EmpInfo[emp_pox][eNome], EmpInfo[emp_pox][eExX],EmpInfo[emp_pox][eExY],EmpInfo[emp_pox][eExZ]);
		}
		case 8:
		{
		    emp_pox = GetClosetBusiness(playerid, 21);
		    GPS(playerid, EmpInfo[emp_pox][eNome], EmpInfo[emp_pox][eExX],EmpInfo[emp_pox][eExY],EmpInfo[emp_pox][eExZ]);
		}
		case 9: GPS(playerid, "Pizzaria", -1212.8846,1831.0748,41.9297);
		case 10: GPS(playerid, "Pier de Pesca", 369.0661,-2044.9672,7.6719);
		case 11:
		{
		    emp_pox = GetClosetBusiness(playerid, 10);
		    GPS(playerid, EmpInfo[emp_pox][eNome], EmpInfo[emp_pox][eExX],EmpInfo[emp_pox][eExY],EmpInfo[emp_pox][eExZ]);
		}
		case 12: GPS(playerid, "Hospital", 1172.1819,-1323.7139,15.4038);
        case 13: GPS(playerid, "Loja de Peças", 1097.8562,-1520.4569,22.7452);
        case 14: GPS(playerid, "Central de anúncios", 1166.6110,-1473.7046,15.7921);
		case 15:
		{
			 emp_pox = GetClosetBusiness(playerid, EMP_TIPO_LIC_CENTER);
			 GPS(playerid, "Auto Escola", EmpInfo[emp_pox][eExX],EmpInfo[emp_pox][eExY],EmpInfo[emp_pox][eExZ]);
		}
		case 16: GPS(playerid, "Delegacia", 1729.1348,-1577.5988,13.5451);
		case 17:
		{
		    emp_pox = GetClosetBusiness(playerid, 8);
		    GPS(playerid, "Loja de Armas", EmpInfo[emp_pox][eExX],EmpInfo[emp_pox][eExY],EmpInfo[emp_pox][eExZ]);
		}
		case 18: GPS(playerid, "UPA 24 HORAS", 2027.3602,-1386.4576,17.2108);
		case 19: LGPS(playerid);
 	}
 	SendClientMessage(playerid, COLOR_LIGHTGREEN, "O local escolhido foi marcado em seu GPS.");
  	return 1;
}
CMD:gps(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	Dialog_Show(playerid, WoW, DIALOG_STYLE_LIST, "GPS", "Procurar Endereço >>\n16ºBPM\nPosto de Gasolina\nAgência de Empregos\n24-7\nConcesionária\nLoja de Roupas\nBanco\nPawn Shop\nPizzaria\nPier de Pesca\nCasa de Apostas\nHospital\nLoja de Peças\nAnuncios\nAuto Escola\n29ºDP Penha\nLoja de Armas\nUPA 24 HRS\nDesligar o GPS", "Selecionar", "Fechar");
	return 1;
}

CMD:propriedades(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
	new casa = 0,
		complexo = 0,
		garagem = 0,
		empresas = 0,
		tipo[64];

	format(string, sizeof(string), "___________Propriedades (%s)___________", PlayerName(playerid, 0));
	SendClientMessage(playerid, COLOR_LIGHTGREEN, string);

    for(new i; i < MAX_HOUSES; i++)
    {
        if(HouseInfo[i][hCriada])
		{
		    if(HouseInfo[i][hDono] == PlayerInfo[playerid][pID])
    		{
    		    format(string, sizeof(string), "Residencia: %d | Valor: %d | Endereço: %s | %s",i,HouseInfo[i][hPreco],HouseInfo[i][hEndereco],GetLocation(HouseInfo[i][hExX], HouseInfo[i][hExY], HouseInfo[i][hExZ]));
				SendClientMessage(playerid, COLOR_LIGHTWHITE, string);
				casa++;
    		}
		}
	}
    for(new i; i < MAX_GARAGENS; i++)
    {
        if(GaragemInfo[i][hCriada])
		{
		    if(GaragemInfo[i][hDono] == PlayerInfo[playerid][pID])
    		{
    		    format(string, sizeof(string), "Garagem: %d | Valor: %d | Localização: %s",i,GaragemInfo[i][hPreco],GetLocation(GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]));
				SendClientMessage(playerid, COLOR_LIGHTWHITE, string);
				garagem++;
    		}
    		if(HouseInfo[GaragemInfo[i][hTipo]][hDono] == PlayerInfo[playerid][pID])
    		{
    		    format(string, sizeof(string), "Garagem: %d | Casa: %d | Localização: %s",i,GaragemInfo[i][hTipo],GetLocation(GaragemInfo[i][hExX], GaragemInfo[i][hExY], GaragemInfo[i][hExZ]));
				SendClientMessage(playerid, COLOR_LIGHTWHITE, string);
				garagem++;
    		}
		}
	}
    for(new i; i < MAX_EMPRESAS; i++)
    {
        if(EmpInfo[i][eCriada])
		{
		    if(EmpInfo[i][eDono] == PlayerInfo[playerid][pID])
    		{
    		    switch(EmpInfo[i][eTipo])
				{
					case 6: format(tipo, sizeof(tipo), "Posto de Gasolina / 24/7");
					case 1: format(tipo, sizeof(tipo), "Seguros de Veículos");
					case 7: format(tipo, sizeof(tipo), "Roupas/Itens");
					case 8: format(tipo, sizeof(tipo), "Ammu Nation");
					case 10: format(tipo, sizeof(tipo), "Loja de Apostas");
					case 55: format(tipo, sizeof(tipo), "Ferro Velho");
					case 15: format(tipo, sizeof(tipo), "Conce de Motos");
					case 20: format(tipo, sizeof(tipo), "Banco");
					case 21: format(tipo, sizeof(tipo), "Pawn Shop");
					case 22: format(tipo, sizeof(tipo), "Burger Shot");
					case 23: format(tipo, sizeof(tipo), "Concessionária");
					case 24: format(tipo, sizeof(tipo), "Bar");
					case 50: format(tipo, sizeof(tipo), "Centro de Licenças");
					default: format(tipo, sizeof(tipo), "Outros");
				}

                if(EmpInfo[i][eLeasing] > 0)
                    format(string, sizeof(string), "[%d] %s | Localização: %s | Tipo: %s | Leasing: R$%d/semanal",i,EmpInfo[i][eNome],GetLocation(EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]), tipo, EmpInfo[i][eLeasing]);
                else
    		    	format(string, sizeof(string), "[%d] %s | Localização: %s | Tipo: %s",i,EmpInfo[i][eNome],GetLocation(EmpInfo[i][eExX], EmpInfo[i][eExY], EmpInfo[i][eExZ]), tipo);
				SendClientMessage(playerid, COLOR_WHITE, string);
				empresas++;
    		}
		}
	}
    for(new i; i < MAX_COMPLEXOS; i++)
    {
        if(ComplexoInfo[i][cCriada])
		{
		    if(ComplexoInfo[i][cDono] == PlayerInfo[playerid][pID])
    		{
    		    format(string, sizeof(string), "Complexo ID: %d | Valor: %d | Localização: %s",i,ComplexoInfo[i][cPreco],GetLocation(ComplexoInfo[i][cExX], ComplexoInfo[i][cExY], ComplexoInfo[i][cExZ]));
				SendClientMessage(playerid, COLOR_WHITE, string);
				complexo++;
    		}
		}
	}
	if(casa == 0 && complexo == 0 && garagem == 0 && empresas == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você não tem nenhuma propriedade.");

	return 1;
}

stock PlayerOnlineByID(id){
	new count = -1;
	foreach (new i : Player){
		if (PlayerInfo[i][pID] == id) count = i;
	}
	return count;
}

stock PlayerOnline(playername[]){
	new count = -1;
	foreach (new i : Player){
		if (strfind(PlayerInfo[i][pNomeP], playername, true) != -1) count = i;
	}
	return count;
}

CMD:dds(playerid, params[])
{
	SCM(playerid, -1, GetWeekDay());
	return 1;
}
stock GetWeekDay()
{
	new
		WeekDay[20];

	switch(((gettime()+334800)/86400-(gettime()+334800)/86400/7*7))
	{
		case 0: WeekDay = "Domingo.";
		case 1: WeekDay = "Segunda-Feira.";
		case 2: WeekDay = "Terça-Feira.";
		case 3: WeekDay = "Quarta-Feira.";
		case 4: WeekDay = "Quinta-Feira.";
		case 5: WeekDay = "Sexta-Feira.";
		case 6: WeekDay = "Sábado.";
	}
	return WeekDay;
}

//==============================================================================

CMD:obj(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if (PlayerInfo[playerid][pAdmin] < 3001) return 1;

    new obj_id = 0;
	if(sscanf(params, "d", obj_id)) return SendClientMessage(playerid, 0xFFFFFFFF, "ERRO:{FFFFFF} Você deve digitar um ID.");

 	new Float:x, Float:y, Float:z;
  	GetPlayerPos(playerid, x, y, z);
    SetPVarInt(playerid, "adicionandoOBJADM", 1);
    SetPVarInt(playerid, "adicionandoOBJADMID", obj_id);

    ADM_OBJ = CreateDynamicObject(obj_id, x+1, y+1, z, 0.0, 0.0, 0.0);

   	EditDynamicObject(playerid,  CreateDynamicObject(obj_id, x+1, y+1, z, 0.0, 0.0, 0.0));
    SendClientMessage(playerid, 0xFFFFFFFF, "[SERVER] Objeto criado!");
    return 1;
}

CMD:sound(playerid, params[])
{
    if(!PlayerInfo[playerid][pLogado]) return 1;
    if (PlayerInfo[playerid][pAdmin] < 4 && !OutrasInfos[playerid][oAdminOnDuty])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve usar o comando /aduty antes.");

    new soundid = 0;
	if(sscanf(params, "d", soundid)) return SendClientMessage(playerid, 0xFFFFFFFF, "ERRO:{FFFFFF} Você deve digitar um ID!");

	PlayerPlaySound(playerid, soundid, 0.0, 0.0, 10.0);
	return 1;
}

stock ConvertTimestampToDate( timestamp, _form=0 )
{
	timestamp -= 10800;
    new year=1970, day=0, month=0, hour=0, mins=0, sec=0;

    new days_of_month[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
    new names_of_month[12][10] = {"Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"};
    new returnstring[32];

    while(timestamp>31622400){
        timestamp -= 31536000;
        if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) ) timestamp -= 86400;
        year++;
    }

    if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) )
        days_of_month[1] = 29;
    else
        days_of_month[1] = 28;


    while(timestamp>86400){
        timestamp -= 86400, day++;
        if(day==days_of_month[month]) day=0, month++;
    }

    while(timestamp>60){
        timestamp -= 60, mins++;
        if( mins == 60) mins=0, hour++;
    }

    sec=timestamp;

    switch( _form ){
        case 1: format(returnstring, 31, "%02d/%02d/%d %02d:%02d:%02d", day+1, month+1, year, hour, mins, sec);
        case 2: format(returnstring, 31, "%s %02d, %d, %02d:%02d:%02d", names_of_month[month],day+1,year, hour, mins, sec);
        case 3: format(returnstring, 31, "%d %c%c%c %d, %02d:%02d", day+1,names_of_month[month][0],names_of_month[month][1],names_of_month[month][2], year,hour,mins);
        case 4: format(returnstring, 31, "%02d.%02d.%d-%02d:%02d:%02d", day+1, month+1, year, hour, mins, sec);
        default: format(returnstring, 31, "%02d/%02d/%d às %02d:%02d:%02d", day+1, month+1, year, hour, mins, sec);
    }

    return returnstring;
}
//==============================================================================
//==============================================================================
/*CMD:viajar(playerid, params[])
{
    1.808619,32.384357,1199.593750

                            format(string,sizeof(string),"\t\t\t\t------ LS Seguros ------\n\n \
                            Você está contratando um veículo para o seu %s, pelo valor de R$%d mensais.\n\n \
                            O seu veículo estará protegido contra: \n \
                            \t- Roubo e Furto\n\t- Acidentes Naturais\n\t- Explosões Acidentais \n\n \
                            [Pagamento]\nVocê deverá ter o valor todo mês ((Paycheck)) no banco, se não\nserá cancelado sem aviso prévio.\n",vname, price);
                            SendConfirmationMsg(playerid,string,DIALOG_INSURANCE,price);

*/

stock IsInvalidVehicle(modelid){
	switch(modelid){
	    case 590, 570, 569, 538, 537, 449: return 1;
	}
	return 0;
}

CMD:VendoObjetos(playerid, params[]){
	format(string,sizeof(string),"Vendo %d objetos.",Streamer_CountItems(STREAMER_TYPE_OBJECT));
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	return 1;
}
ALTCOMMAND:ultimoatirador->checaratirador;
ALTCOMMAND:uatirador->checaratirador;
CMD:checaratirador(playerid, params[]){
	if(!PlayerInfo[playerid][pLogado]) return 1;
	if(PlayerInfo[playerid][pAdmin] < 1) return 1;
    if (PlayerInfo[playerid][pAdmin] < 4 && !OutrasInfos[playerid][oAdminOnDuty])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Você deve usar o comando /aduty antes.");

	new otherid;
    if(sscanf(params, "d", otherid)) return SendClientMessage(playerid, 0xFFFFFFFF, "ERRO:{FFFFFF} Você deve digitar um ID. (/checaratirador [playerid])");
	new shooterid = LastShoter[otherid];
	format(string,sizeof(string),"O ultimo player a atirar em %s foi %s.",PlayerName(otherid, 0), PlayerName(shooterid, 0));
	SendClientMessage(playerid, COLOR_LIGHTRED, string);
	return 1;
}
